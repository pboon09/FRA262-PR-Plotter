
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d30  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08010f08  08010f08  00011f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011518  08011518  00013158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011518  08011518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011520  08011520  00013158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011520  08011520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011524  08011524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08011528  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002110  20000158  08011680  00013158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002268  08011680  00013268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba85  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c1  00000000  00000000  0003ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00043fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ff  00000000  00000000  00045c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6ed  00000000  00000000  00047217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a20a  00000000  00000000  00074904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119d9d  00000000  00000000  0009eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b88ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008160  00000000  00000000  001b88f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c0a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000158 	.word	0x20000158
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010ef0 	.word	0x08010ef0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000015c 	.word	0x2000015c
 8000214:	08010ef0 	.word	0x08010ef0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 ffbc 	bl	8008f5c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f007 f8a5 	bl	8008140 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fdf0 	bl	8001d20 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ffd1 	bl	8003308 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8cd 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8c4 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8b0 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f8a7 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f895 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f888 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 fcb0 	bl	8009de8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f85f 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 fc93 	bl	8009de8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f842 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 fc78 	bl	8009de8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f823 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fb6e 	bl	8001d20 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d fd61 	bl	800f188 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d fd2d 	bl	800f188 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800177a:	f7ff f833 	bl	80007e4 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9e5 	bl	8000b54 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 800178e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001792:	edd7 7a06 	vldr	s15, [r7, #24]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001830 <REVOLUTE_MOTOR_DFD_Compute+0x1b4>
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f9cb 	bl	8000b54 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb1 8a67 	vneg.f32	s16, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9b5 	bl	8000b54 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef1 8a67 	vneg.f32	s17, s15
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9a8 	bl	8000b54 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	ee02 3a10 	vmov	s4, r3
 800180a:	eef0 1a68 	vmov.f32	s3, s17
 800180e:	ee01 4a10 	vmov	s2, r4
 8001812:	eef0 0a48 	vmov.f32	s1, s16
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f000 fa81 	bl	8001d20 <mapf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b02 	vpop	{d8}
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	00000000 	.word	0x00000000

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb1 8a67 	vneg.f32	s16, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f92d 	bl	8000b54 <__aeabi_d2f>
 80018fa:	4604      	mov	r4, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef1 8a67 	vneg.f32	s17, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f917 	bl	8000b54 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	ee02 3a10 	vmov	s4, r3
 800192c:	eef0 1a68 	vmov.f32	s3, s17
 8001930:	ee01 4a10 	vmov	s2, r4
 8001934:	eef0 0a48 	vmov.f32	s1, s16
 8001938:	ed97 0a02 	vldr	s0, [r7, #8]
 800193c:	f000 f9f0 	bl	8001d20 <mapf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	bdb0      	pop	{r4, r5, r7, pc}

08001952 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	ed2d 8b02 	vpush	{d8}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0a02 	vstr	s0, [r7, #8]
 8001986:	edc7 0a01 	vstr	s1, [r7, #4]
 800198a:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fd96 	bl	80004e0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f00d fb90 	bl	800f0e0 <cos>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fde2 	bl	8000590 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8be 	bl	8000b54 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed97 7a00 	vldr	s14, [r7]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd66 	bl	80004e0 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdb8 	bl	8000590 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a30:	f7fe fed8 	bl	80007e4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88a 	bl	8000b54 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f874 	bl	8000b54 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb1 8a67 	vneg.f32	s16, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f867 	bl	8000b54 <__aeabi_d2f>
 8001a86:	4604      	mov	r4, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef1 8a67 	vneg.f32	s17, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee02 3a10 	vmov	s4, r3
 8001ab8:	eef0 1a68 	vmov.f32	s3, s17
 8001abc:	ee01 4a10 	vmov	s2, r4
 8001ac0:	eef0 0a48 	vmov.f32	s1, s16
 8001ac4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ac8:	f000 f92a 	bl	8001d20 <mapf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae0 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
 8001af6:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <FIR_init+0x2a>
        numTaps += 1;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	897a      	ldrh	r2, [r7, #10]
 8001b0e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d f9d6 	bl	800eecc <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00d f9cd 	bl	800eecc <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e0 	beq.w	8001d04 <FIR_init+0x224>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80db 	beq.w	8001d04 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b52:	e00a      	b.n	8001b6a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b66:	3301      	adds	r3, #1
 8001b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3f0      	bcc.n	8001b54 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b76:	ed97 7a00 	vldr	s14, [r7]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b8e:	e077      	b.n	8001c80 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001b90:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10c      	bne.n	8001bb6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e02c      	b.n	8001c10 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d10 <FIR_init+0x230>
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00d fba8 	bl	800f334 <sinf>
 8001be4:	eef0 6a40 	vmov.f32	s13, s0
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d14 <FIR_init+0x234>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	ed93 8a00 	vldr	s16, [r3]
 8001c20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d10 <FIR_init+0x230>
 8001c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	f00d fb30 	bl	800f2ac <cosf>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <FIR_init+0x238>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d1c <FIR_init+0x23c>
 8001c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c70:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c80:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	db82      	blt.n	8001b90 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	83fb      	strh	r3, [r7, #30]
 8001c94:	e00f      	b.n	8001cb6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3eb      	bcc.n	8001c96 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d01b      	beq.n	8001d04 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83bb      	strh	r3, [r7, #28]
 8001cd0:	e014      	b.n	8001cfc <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 6a00 	vldr	s13, [r3]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	8bbb      	ldrh	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf6:	8bbb      	ldrh	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	83bb      	strh	r3, [r7, #28]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	ecbd 8b02 	vpop	{d8}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40c90fdb 	.word	0x40c90fdb
 8001d14:	40490fdb 	.word	0x40490fdb
 8001d18:	3eeb851f 	.word	0x3eeb851f
 8001d1c:	3f0a3d71 	.word	0x3f0a3d71

08001d20 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d32:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d36:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
}
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000174 	.word	0x20000174

08001dd0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <modbus_3t5_Timeout+0x1c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	755a      	strb	r2, [r3, #21]

}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000174 	.word	0x20000174

08001df0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f00b fe9f 	bl	800db3c <HAL_UART_GetError>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d101      	bne.n	8001e08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e04:	f7ff ffc4 	bl	8001d90 <modbus_1t5_Timeout>

	}
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	7e3a      	ldrb	r2, [r7, #24]
 8001e42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <Modbus_init+0xc8>)
 8001e52:	210e      	movs	r1, #14
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00a f91f 	bl	800c098 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00b fe15 	bl	800da90 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00b fe2c 	bl	800dac8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <Modbus_init+0xcc>)
 8001e76:	2104      	movs	r1, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00b f95d 	bl	800d138 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001e94:	4413      	add	r3, r2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f00b fa05 	bl	800d2ac <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10c      	bne.n	8001ecc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <Modbus_init+0xc4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 f8c9 	bl	800b050 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fb18 	bl	800b4fc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000174 	.word	0x20000174
 8001ed8:	08001dd1 	.word	0x08001dd1
 8001edc:	08001df1 	.word	0x08001df1

08001ee0 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ee8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001eec:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ef0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ef4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ef8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001efc:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f00:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f04:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f08:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2210      	movs	r2, #16
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00d f874 	bl	800f038 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3310      	adds	r3, #16
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d f86d 	bl	800f038 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	e00c      	b.n	8001f7e <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <MotorKalman_Init+0x27c>)
 8001f76:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	ddef      	ble.n	8001f64 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00d f852 	bl	800f038 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f98:	e00d      	b.n	8001fb6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	33be      	adds	r3, #190	@ 0xbe
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	ddee      	ble.n	8001f9a <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	33f0      	adds	r3, #240	@ 0xf0
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d f837 	bl	800f038 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00d f82a 	bl	800f038 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fea:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f000 f922 	bl	800223c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001ff8:	ed97 0a00 	vldr	s0, [r7]
 8001ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ffe:	f000 f94d 	bl	800229c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	f00c fe94 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3310      	adds	r3, #16
 800201c:	2204      	movs	r2, #4
 800201e:	2104      	movs	r1, #4
 8002020:	f00c fe8b 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002030:	2204      	movs	r2, #4
 8002032:	2104      	movs	r1, #4
 8002034:	f00c fe81 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002044:	2201      	movs	r2, #1
 8002046:	2101      	movs	r1, #1
 8002048:	f00c fe77 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002058:	2201      	movs	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	f00c fe6d 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	f00c fe63 	bl	800ed3a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002080:	2204      	movs	r2, #4
 8002082:	2104      	movs	r1, #4
 8002084:	f00c fe59 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002094:	2201      	movs	r2, #1
 8002096:	2104      	movs	r1, #4
 8002098:	f00c fe4f 	bl	800ed3a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	f00c fe45 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80020bc:	2204      	movs	r2, #4
 80020be:	2104      	movs	r1, #4
 80020c0:	f00c fe3b 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80020d0:	2204      	movs	r2, #4
 80020d2:	2101      	movs	r1, #1
 80020d4:	f00c fe31 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80020e4:	2201      	movs	r2, #1
 80020e6:	2101      	movs	r1, #1
 80020e8:	f00c fe27 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f00c fe1d 	bl	800ed3a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f000 f82d 	bl	8002160 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3390      	adds	r3, #144	@ 0x90
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00c fe11 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	33e0      	adds	r3, #224	@ 0xe0
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	f00c fe08 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002136:	2204      	movs	r2, #4
 8002138:	2104      	movs	r1, #4
 800213a:	f00c fdfe 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800214a:	2201      	movs	r2, #1
 800214c:	2104      	movs	r1, #4
 800214e:	f00c fdf4 	bl	800ed3a <arm_mat_init_f32>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	@ 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	42c80000 	.word	0x42c80000

08002160 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	eeb0 3a64 	vmov.f32	s6, s9
 80021a4:	eef0 2a45 	vmov.f32	s5, s10
 80021a8:	eeb0 2a65 	vmov.f32	s4, s11
 80021ac:	eef0 1a46 	vmov.f32	s3, s12
 80021b0:	eeb0 1a66 	vmov.f32	s2, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f001 f83c 	bl	8003238 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00c ff34 	bl	800f038 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021d6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800220a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002238 <MotorKalman_DiscretizeModel+0xd8>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	3c23d70a 	.word	0x3c23d70a
 8002238:	3dcccccd 	.word	0x3dcccccd

0800223c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00c fef0 	bl	800f038 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002258:	edd7 7a00 	vldr	s15, [r7]
 800225c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d107      	bne.n	800228e <MotorKalman_SetProcessNoise+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d002      	beq.n	8002294 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff66 	bl	8002160 <MotorKalman_DiscretizeModel>
    }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022a8:	ed97 0a00 	vldr	s0, [r7]
 80022ac:	f00c ffe0 	bl	800f270 <sqrtf>
 80022b0:	eef0 7a40 	vmov.f32	s15, s0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b0b2      	sub	sp, #200	@ 0xc8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80022de:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022f2:	e041      	b.n	8002378 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	33c8      	adds	r3, #200	@ 0xc8
 80022fc:	443b      	add	r3, r7
 80022fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800230c:	e02b      	b.n	8002366 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	33c8      	adds	r3, #200	@ 0xc8
 8002316:	443b      	add	r3, r7
 8002318:	3b3c      	subs	r3, #60	@ 0x3c
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002328:	4413      	add	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	3324      	adds	r3, #36	@ 0x24
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33c8      	adds	r3, #200	@ 0xc8
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800235c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002360:	3301      	adds	r3, #1
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236a:	2b03      	cmp	r3, #3
 800236c:	ddcf      	ble.n	800230e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	3301      	adds	r3, #1
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237c:	2b03      	cmp	r3, #3
 800237e:	ddb9      	ble.n	80022f4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002386:	e021      	b.n	80023cc <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	33c8      	adds	r3, #200	@ 0xc8
 8002390:	443b      	add	r3, r7
 8002392:	3b3c      	subs	r3, #60	@ 0x3c
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800239e:	3338      	adds	r3, #56	@ 0x38
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	ddd9      	ble.n	8002388 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00c fe2b 	bl	800f038 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2240      	movs	r2, #64	@ 0x40
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00c fe24 	bl	800f038 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023f6:	e05f      	b.n	80024b8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fe:	e052      	b.n	80024a6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	33c8      	adds	r3, #200	@ 0xc8
 8002410:	443b      	add	r3, r7
 8002412:	3b7c      	subs	r3, #124	@ 0x7c
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002420:	e038      	b.n	8002494 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	33c8      	adds	r3, #200	@ 0xc8
 8002432:	443b      	add	r3, r7
 8002434:	3b7c      	subs	r3, #124	@ 0x7c
 8002436:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	3324      	adds	r3, #36	@ 0x24
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800246e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002478:	4413      	add	r3, r2
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	33c8      	adds	r3, #200	@ 0xc8
 8002482:	443b      	add	r3, r7
 8002484:	3b7c      	subs	r3, #124	@ 0x7c
 8002486:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800248a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002498:	2b03      	cmp	r3, #3
 800249a:	ddc2      	ble.n	8002422 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dda8      	ble.n	8002400 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024bc:	2b03      	cmp	r3, #3
 80024be:	dd9b      	ble.n	80023f8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024c6:	e05f      	b.n	8002588 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ce:	e052      	b.n	8002576 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	33c8      	adds	r3, #200	@ 0xc8
 80024e0:	443b      	add	r3, r7
 80024e2:	3bbc      	subs	r3, #188	@ 0xbc
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024f0:	e038      	b.n	8002564 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	33c8      	adds	r3, #200	@ 0xc8
 8002502:	443b      	add	r3, r7
 8002504:	3bbc      	subs	r3, #188	@ 0xbc
 8002506:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	33c8      	adds	r3, #200	@ 0xc8
 800251a:	443b      	add	r3, r7
 800251c:	3b7c      	subs	r3, #124	@ 0x7c
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	4413      	add	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	3324      	adds	r3, #36	@ 0x24
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	4413      	add	r3, r2
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	33c8      	adds	r3, #200	@ 0xc8
 8002552:	443b      	add	r3, r7
 8002554:	3bbc      	subs	r3, #188	@ 0xbc
 8002556:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800255a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002568:	2b03      	cmp	r3, #3
 800256a:	ddc2      	ble.n	80024f2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b03      	cmp	r3, #3
 800257c:	dda8      	ble.n	80024d0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800258c:	2b03      	cmp	r3, #3
 800258e:	dd9b      	ble.n	80024c8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002596:	e037      	b.n	8002608 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800259e:	e02a      	b.n	80025f6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	33c8      	adds	r3, #200	@ 0xc8
 80025b0:	443b      	add	r3, r7
 80025b2:	3bbc      	subs	r3, #188	@ 0xbc
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c2:	4413      	add	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3354      	adds	r3, #84	@ 0x54
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025da:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025f0:	3301      	adds	r3, #1
 80025f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	ddd0      	ble.n	80025a0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002602:	3301      	adds	r3, #1
 8002604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260c:	2b03      	cmp	r3, #3
 800260e:	ddc3      	ble.n	8002598 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	2104      	movs	r1, #4
 8002644:	f00c fb79 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3310      	adds	r3, #16
 8002652:	2204      	movs	r2, #4
 8002654:	2104      	movs	r1, #4
 8002656:	f00c fb70 	bl	800ed3a <arm_mat_init_f32>
}
 800265a:	bf00      	nop
 800265c:	37c8      	adds	r7, #200	@ 0xc8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b0d0      	sub	sp, #320	@ 0x140
 8002668:	af00      	add	r7, sp, #0
 800266a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800266e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002678:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800267c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800268e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800269c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80026c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	edd3 7a03 	vldr	s15, [r3, #12]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002728:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002740:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002754:	e04d      	b.n	80027f2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002756:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002760:	443b      	add	r3, r7
 8002762:	3b58      	subs	r3, #88	@ 0x58
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002770:	e036      	b.n	80027e0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002772:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800277c:	443b      	add	r3, r7
 800277e:	3b58      	subs	r3, #88	@ 0x58
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002788:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002792:	333c      	adds	r3, #60	@ 0x3c
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	edd3 6a00 	vldr	s13, [r3]
 800279c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027a6:	4413      	add	r3, r2
 80027a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027ac:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027ce:	443b      	add	r3, r7
 80027d0:	3b58      	subs	r3, #88	@ 0x58
 80027d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddc4      	ble.n	8002772 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	ddad      	ble.n	8002756 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002808:	e021      	b.n	800284e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800280a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002814:	443b      	add	r3, r7
 8002816:	3b58      	subs	r3, #88	@ 0x58
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	2b03      	cmp	r3, #3
 8002854:	ddd9      	ble.n	800280a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002864:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002870:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002884:	e04d      	b.n	8002922 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002890:	443b      	add	r3, r7
 8002892:	3b68      	subs	r3, #104	@ 0x68
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028a0:	e036      	b.n	8002910 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028ac:	443b      	add	r3, r7
 80028ae:	3b68      	subs	r3, #104	@ 0x68
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028be:	4413      	add	r3, r2
 80028c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028c4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	3304      	adds	r3, #4
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edd3 6a00 	vldr	s13, [r3]
 80028d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e2:	333c      	adds	r3, #60	@ 0x3c
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fe:	443b      	add	r3, r7
 8002900:	3b68      	subs	r3, #104	@ 0x68
 8002902:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002910:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002914:	2b03      	cmp	r3, #3
 8002916:	ddc4      	ble.n	80028a2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddad      	ble.n	8002886 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800292a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800293e:	e01a      	b.n	8002976 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002940:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800294a:	443b      	add	r3, r7
 800294c:	3b68      	subs	r3, #104	@ 0x68
 800294e:	edd3 6a00 	vldr	s13, [r3]
 8002952:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002964:	443b      	add	r3, r7
 8002966:	3b78      	subs	r3, #120	@ 0x78
 8002968:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800296c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002976:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800297a:	2b03      	cmp	r3, #3
 800297c:	dde0      	ble.n	8002940 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002984:	e029      	b.n	80029da <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002986:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800298a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a6:	443b      	add	r3, r7
 80029a8:	3b78      	subs	r3, #120	@ 0x78
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029de:	2b03      	cmp	r3, #3
 80029e0:	ddd1      	ble.n	8002986 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00c fb24 	bl	800f038 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80029f6:	e035      	b.n	8002a64 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80029fe:	e028      	b.n	8002a52 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a0a:	443b      	add	r3, r7
 8002a0c:	3b78      	subs	r3, #120	@ 0x78
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a20:	333c      	adds	r3, #60	@ 0x3c
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a34:	4413      	add	r3, r2
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a40:	443b      	add	r3, r7
 8002a42:	3bb8      	subs	r3, #184	@ 0xb8
 8002a44:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	ddd2      	ble.n	8002a00 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddc5      	ble.n	80029f8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00c fadf 	bl	800f038 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a80:	e038      	b.n	8002af4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a88:	e02b      	b.n	8002ae2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d102      	bne.n	8002a9c <MotorKalman_Update+0x438>
 8002a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a9a:	e001      	b.n	8002aa0 <MotorKalman_Update+0x43c>
 8002a9c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cb8 <MotorKalman_Update+0x654>
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ab2:	443b      	add	r3, r7
 8002ab4:	3bb8      	subs	r3, #184	@ 0xb8
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3bf8      	subs	r3, #248	@ 0xf8
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ad8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	ddcf      	ble.n	8002a8a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	ddc2      	ble.n	8002a82 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002afc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f103 0110 	add.w	r1, r3, #16
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00c fad5 	bl	800f0c0 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b1c:	e06e      	b.n	8002bfc <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b24:	e061      	b.n	8002bea <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b30:	4413      	add	r3, r2
 8002b32:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b36:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4e:	e043      	b.n	8002bd8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b60:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b82:	443b      	add	r3, r7
 8002b84:	3bf8      	subs	r3, #248	@ 0xf8
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b94:	4413      	add	r3, r2
 8002b96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b9a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb4:	4413      	add	r3, r2
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bbe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	ddb7      	ble.n	8002b50 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	dd99      	ble.n	8002b26 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	dd8c      	ble.n	8002b1e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2104      	movs	r1, #4
 8002c88:	f00c f857 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	2104      	movs	r1, #4
 8002caa:	f00c f846 	bl	800ed3a <arm_mat_init_f32>
}
 8002cae:	bf00      	nop
 8002cb0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00000000 	.word	0x00000000

08002cbc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cc8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff fafa 	bl	80022ca <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002cd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fcc2 	bl	8002664 <MotorKalman_Update>

    return filter->velocity;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00c      	b.n	8002d20 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	440b      	add	r3, r1
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbee      	blt.n	8002d06 <matrix_copy+0x12>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d44:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d48:	6020      	str	r0, [r4, #0]
 8002d4a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d4e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d58:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002d5c:	ed81 0a00 	vstr	s0, [r1]
 8002d60:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d64:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002d6e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002d72:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002d74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d78:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002d7c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	2104      	movs	r1, #4
 8002d86:	f00b ffd8 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002d8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d8e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d92:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	f00b ffcd 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002da0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002da4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002da8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2104      	movs	r1, #4
 8002db2:	f00b ffc2 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002db6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002dbe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	f00b ffb7 	bl	800ed3a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002dcc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c f92f 	bl	800f038 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002dda:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dde:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002de2:	2204      	movs	r2, #4
 8002de4:	2104      	movs	r1, #4
 8002de6:	f00b ffa8 	bl	800ed3a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002df0:	e011      	b.n	8002e16 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002df2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e02:	443b      	add	r3, r7
 8002e04:	3b6c      	subs	r3, #108	@ 0x6c
 8002e06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e0a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e0c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e10:	3301      	adds	r3, #1
 8002e12:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e16:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dde9      	ble.n	8002df2 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e1e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e22:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00b ff86 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e2e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e36:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e3a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e3e:	ed93 0a00 	vldr	s0, [r3]
 8002e42:	4610      	mov	r0, r2
 8002e44:	f00c f80b 	bl	800ee5e <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e50:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e54:	2210      	movs	r2, #16
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f7ff ff4c 	bl	8002cf4 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002e5c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002e60:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002e64:	2204      	movs	r2, #4
 8002e66:	2104      	movs	r1, #4
 8002e68:	f00b ff67 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002e6c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002e70:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002e74:	2204      	movs	r2, #4
 8002e76:	2104      	movs	r1, #4
 8002e78:	f00b ff5f 	bl	800ed3a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002e7c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002e80:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e84:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00b ff1b 	bl	800ecc4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002e8e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002e92:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e96:	2210      	movs	r2, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff2b 	bl	8002cf4 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002e9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ea2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002eac:	e03a      	b.n	8002f24 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002eae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002ec6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002eca:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ece:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00b ff49 	bl	800ed6a <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002ed8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002edc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff06 	bl	8002cf4 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eec:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef4:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002ef8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002efc:	4611      	mov	r1, r2
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00b ffab 	bl	800ee5e <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f08:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f0c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f10:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00b fed5 	bl	800ecc4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f1a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f24:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	ddc0      	ble.n	8002eae <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f2c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f30:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f34:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f38:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f3c:	ed93 0a00 	vldr	s0, [r3]
 8002f40:	4610      	mov	r0, r2
 8002f42:	f00b ff8c 	bl	800ee5e <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f46:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f4a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f5a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f5e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002f62:	2201      	movs	r2, #1
 8002f64:	2104      	movs	r1, #4
 8002f66:	f00b fee8 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002f6a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002f6e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002f72:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00b fef7 	bl	800ed6a <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002f7c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f80:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002f84:	2201      	movs	r2, #1
 8002f86:	2104      	movs	r1, #4
 8002f88:	f00b fed7 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002f8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fa4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fa8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002fac:	4611      	mov	r1, r2
 8002fae:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00b ff53 	bl	800ee5e <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002fb8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002fbc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fc0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00b fe7d 	bl	800ecc4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002fca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f00c f82d 	bl	800f038 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002fde:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002fe2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	2104      	movs	r1, #4
 8002fea:	f00b fea6 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002fee:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002ff2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002ff6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00b feb5 	bl	800ed6a <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003000:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003018:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	f00b fe8b 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003024:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003028:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800302c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003030:	4618      	mov	r0, r3
 8003032:	f00b fe9a 	bl	800ed6a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003036:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003046:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800304a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800305a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800305e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003062:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003066:	4611      	mov	r1, r2
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	4618      	mov	r0, r3
 800306e:	f00b fef6 	bl	800ee5e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003072:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003076:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800307a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800307e:	4618      	mov	r0, r3
 8003080:	f00b fe20 	bl	800ecc4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003084:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003088:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800308c:	4618      	mov	r0, r3
 800308e:	2340      	movs	r3, #64	@ 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	f00b ffd0 	bl	800f038 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030a0:	2204      	movs	r2, #4
 80030a2:	2104      	movs	r1, #4
 80030a4:	f00b fe49 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030a8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030ac:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00b fe58 	bl	800ed6a <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030be:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80030ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80030d2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80030d6:	2201      	movs	r2, #1
 80030d8:	2104      	movs	r1, #4
 80030da:	f00b fe2e 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80030de:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80030e2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00b fe3d 	bl	800ed6a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80030f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003100:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003104:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003114:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003128:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800312c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003130:	4611      	mov	r1, r2
 8003132:	eeb0 0a47 	vmov.f32	s0, s14
 8003136:	4618      	mov	r0, r3
 8003138:	f00b fe91 	bl	800ee5e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800313c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003140:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003144:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003148:	4618      	mov	r0, r3
 800314a:	f00b fdbb 	bl	800ecc4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800314e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003156:	4618      	mov	r0, r3
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	461a      	mov	r2, r3
 800315c:	2100      	movs	r1, #0
 800315e:	f00b ff6b 	bl	800f038 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003166:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800316a:	2204      	movs	r2, #4
 800316c:	2104      	movs	r1, #4
 800316e:	f00b fde4 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003172:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003176:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800317a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800317e:	4618      	mov	r0, r3
 8003180:	f00b fdf3 	bl	800ed6a <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003184:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003188:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	f107 001c 	add.w	r0, r7, #28
 80031a0:	2201      	movs	r2, #1
 80031a2:	2104      	movs	r1, #4
 80031a4:	f00b fdc9 	bl	800ed3a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031a8:	f107 021c 	add.w	r2, r7, #28
 80031ac:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00b fdd8 	bl	800ed6a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003234 <discretize_system_with_arm+0x4fc>
 80031fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003202:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4611      	mov	r1, r2
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	4618      	mov	r0, r3
 8003212:	f00b fe24 	bl	800ee5e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003216:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800321a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800321e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003222:	4618      	mov	r0, r3
 8003224:	f00b fd4e 	bl	800ecc4 <arm_mat_add_f32>
}
 8003228:	bf00      	nop
 800322a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	42f00000 	.word	0x42f00000

08003238 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	@ 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003242:	edc7 0a08 	vstr	s1, [r7, #32]
 8003246:	ed87 1a07 	vstr	s2, [r7, #28]
 800324a:	edc7 1a06 	vstr	s3, [r7, #24]
 800324e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003252:	edc7 2a04 	vstr	s5, [r7, #16]
 8003256:	ed87 3a03 	vstr	s6, [r7, #12]
 800325a:	60b8      	str	r0, [r7, #8]
 800325c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800325e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f00b fee6 	bl	800f038 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800326c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800327a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	eef1 6a67 	vneg.f32	s13, s15
 8003288:	ed97 7a07 	vldr	s14, [r7, #28]
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003294:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003298:	ed97 7a07 	vldr	s14, [r7, #28]
 800329c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b8:	eef1 6a67 	vneg.f32	s13, s15
 80032bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80032c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032cc:	eef1 6a67 	vneg.f32	s13, s15
 80032d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80032dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80032ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80032f0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80032fc:	f7ff fd1c 	bl	8002d38 <discretize_system_with_arm>
}
 8003300:	bf00      	nop
 8003302:	3778      	adds	r7, #120	@ 0x78
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <PWM_init+0x40>)
 800331a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f007 fe1e 	bl	800af70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4619      	mov	r1, r3
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f007 ff65 	bl	800b208 <HAL_TIM_PWM_Start>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	0a21fe80 	.word	0x0a21fe80

0800334c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	ed87 0a02 	vstr	s0, [r7, #8]
 8003358:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800335c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003360:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d137      	bne.n	80033da <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	889b      	ldrh	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <PWM_write_duty+0x32>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 800337c:	e0e1      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	889b      	ldrh	r3, [r3, #4]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d105      	bne.n	8003392 <PWM_write_duty+0x46>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003390:	e0d7      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	889b      	ldrh	r3, [r3, #4]
 8003396:	2b08      	cmp	r3, #8
 8003398:	d105      	bne.n	80033a6 <PWM_write_duty+0x5a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033a4:	e0cd      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	889b      	ldrh	r3, [r3, #4]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d105      	bne.n	80033ba <PWM_write_duty+0x6e>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b8:	e0c3      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d105      	bne.n	80033ce <PWM_write_duty+0x82>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	6493      	str	r3, [r2, #72]	@ 0x48
 80033cc:	e0b9      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033d8:	e0b3      	b.n	8003542 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80033ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	ee17 2a90 	vmov	r2, s15
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003402:	33fe      	adds	r3, #254	@ 0xfe
 8003404:	4a51      	ldr	r2, [pc, #324]	@ (800354c <PWM_write_duty+0x200>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0bdb      	lsrs	r3, r3, #15
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	899b      	ldrh	r3, [r3, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003430:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003434:	ed97 7a02 	vldr	s14, [r7, #8]
 8003438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003448:	ee17 3a90 	vmov	r3, s15
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	89db      	ldrh	r3, [r3, #14]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f830 	bl	80004bc <__aeabi_i2d>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	edd7 7a01 	vldr	s15, [r7, #4]
 8003464:	eef0 7ae7 	vabs.f32	s15, s15
 8003468:	ee17 0a90 	vmov	r0, s15
 800346c:	f7fd f838 	bl	80004e0 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f88a 	bl	8000590 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <PWM_write_duty+0x204>)
 800348a:	f7fd f9ab 	bl	80007e4 <__aeabi_ddiv>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fb3d 	bl	8000b14 <__aeabi_d2uiz>
 800349a:	4603      	mov	r3, r0
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	899a      	ldrh	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	89da      	ldrh	r2, [r3, #14]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	89da      	ldrh	r2, [r3, #14]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <PWM_write_duty+0x190>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6952      	ldr	r2, [r2, #20]
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034da:	e032      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	889b      	ldrh	r3, [r3, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d106      	bne.n	80034f2 <PWM_write_duty+0x1a6>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80034f0:	e027      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	889b      	ldrh	r3, [r3, #4]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d106      	bne.n	8003508 <PWM_write_duty+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003506:	e01c      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	889b      	ldrh	r3, [r3, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d106      	bne.n	800351e <PWM_write_duty+0x1d2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800351c:	e011      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d106      	bne.n	8003534 <PWM_write_duty+0x1e8>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003532:	e006      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003540:	e7ff      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bdb0      	pop	{r4, r5, r7, pc}
 800354a:	bf00      	nop
 800354c:	80008001 	.word	0x80008001
 8003550:	40590000 	.word	0x40590000
 8003554:	00000000 	.word	0x00000000

08003558 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	ed87 0a02 	vstr	s0, [r7, #8]
 8003564:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d137      	bne.n	80035e6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <PWM_write_range+0x32>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003588:	e0e1      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	889b      	ldrh	r3, [r3, #4]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d105      	bne.n	800359e <PWM_write_range+0x46>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	6393      	str	r3, [r2, #56]	@ 0x38
 800359c:	e0d7      	b.n	800374e <PWM_write_range+0x1f6>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	889b      	ldrh	r3, [r3, #4]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d105      	bne.n	80035b2 <PWM_write_range+0x5a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035b0:	e0cd      	b.n	800374e <PWM_write_range+0x1f6>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d105      	bne.n	80035c6 <PWM_write_range+0x6e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c4:	e0c3      	b.n	800374e <PWM_write_range+0x1f6>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d105      	bne.n	80035da <PWM_write_range+0x82>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80035d8:	e0b9      	b.n	800374e <PWM_write_range+0x1f6>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80035e4:	e0b3      	b.n	800374e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80035f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fe:	ee17 2a90 	vmov	r2, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800360e:	33fe      	adds	r3, #254	@ 0xfe
 8003610:	4a53      	ldr	r2, [pc, #332]	@ (8003760 <PWM_write_range+0x208>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0bdb      	lsrs	r3, r3, #15
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	899b      	ldrh	r3, [r3, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003640:	ed97 7a02 	vldr	s14, [r7, #8]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800364c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003654:	ee17 3a90 	vmov	r3, s15
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	89db      	ldrh	r3, [r3, #14]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff2a 	bl	80004bc <__aeabi_i2d>
 8003668:	4604      	mov	r4, r0
 800366a:	460d      	mov	r5, r1
 800366c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003670:	eef0 7ae7 	vabs.f32	s15, s15
 8003674:	ee17 0a90 	vmov	r0, s15
 8003678:	f7fc ff32 	bl	80004e0 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc ff84 	bl	8000590 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	a331      	add	r3, pc, #196	@ (adr r3, 8003758 <PWM_write_range+0x200>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fd f8a5 	bl	80007e4 <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa37 	bl	8000b14 <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	899a      	ldrh	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	89da      	ldrh	r2, [r3, #14]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	89da      	ldrh	r2, [r3, #14]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <PWM_write_range+0x190>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6952      	ldr	r2, [r2, #20]
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036e6:	e032      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d106      	bne.n	80036fe <PWM_write_range+0x1a6>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036fc:	e027      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d106      	bne.n	8003714 <PWM_write_range+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003712:	e01c      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d106      	bne.n	800372a <PWM_write_range+0x1d2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003728:	e011      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	889b      	ldrh	r3, [r3, #4]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d106      	bne.n	8003740 <PWM_write_range+0x1e8>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800373e:	e006      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800374c:	e7ff      	b.n	800374e <PWM_write_range+0x1f6>
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bdb0      	pop	{r4, r5, r7, pc}
 8003756:	bf00      	nop
 8003758:	00000000 	.word	0x00000000
 800375c:	40efffe0 	.word	0x40efffe0
 8003760:	80008001 	.word	0x80008001

08003764 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6178      	str	r0, [r7, #20]
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
 8003776:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	fb01 f202 	mul.w	r2, r1, r2
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003832:	213c      	movs	r1, #60	@ 0x3c
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f007 ffa3 	bl	800b780 <HAL_TIM_Encoder_Start>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	0000      	movs	r0, r0
 8003844:	0000      	movs	r0, r0
	...

08003848 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	0fda      	lsrs	r2, r3, #31
 8003870:	4413      	add	r3, r2
 8003872:	105b      	asrs	r3, r3, #1
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4293      	cmp	r3, r2
 800387a:	dd05      	ble.n	8003888 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e00e      	b.n	80038a6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	0fda      	lsrs	r2, r3, #31
 800388e:	4413      	add	r3, r2
 8003890:	105b      	asrs	r3, r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4293      	cmp	r3, r2
 800389a:	da04      	bge.n	80038a6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80038e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fdf3 	bl	80004e0 <__aeabi_f2d>
 80038fa:	4604      	mov	r4, r0
 80038fc:	460d      	mov	r5, r1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800391e:	ee17 0a90 	vmov	r0, s15
 8003922:	f7fc fddd 	bl	80004e0 <__aeabi_f2d>
 8003926:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f7fc fe30 	bl	8000590 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fdcf 	bl	80004e0 <__aeabi_f2d>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fe21 	bl	8000590 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fc65 	bl	8000224 <__adddf3>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8f7 	bl	8000b54 <__aeabi_d2f>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fdb5 	bl	80004e0 <__aeabi_f2d>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003996:	ee16 0a90 	vmov	r0, s13
 800399a:	f7fc fda1 	bl	80004e0 <__aeabi_f2d>
 800399e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fdf4 	bl	8000590 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4690      	mov	r8, r2
 80039ae:	4699      	mov	r9, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fd93 	bl	80004e0 <__aeabi_f2d>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4640      	mov	r0, r8
 80039c0:	4649      	mov	r1, r9
 80039c2:	f7fc fde5 	bl	8000590 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4690      	mov	r8, r2
 80039cc:	4699      	mov	r9, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fd84 	bl	80004e0 <__aeabi_f2d>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4640      	mov	r0, r8
 80039de:	4649      	mov	r1, r9
 80039e0:	f7fc fdd6 	bl	8000590 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fc1a 	bl	8000224 <__adddf3>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7fd f8ac 	bl	8000b54 <__aeabi_d2f>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	605a      	str	r2, [r3, #4]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a14:	f3af 8000 	nop.w
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	400921fb 	.word	0x400921fb

08003a20 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd4a 	bl	80004e0 <__aeabi_f2d>
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b83      	ldr	r3, [pc, #524]	@ (8003c60 <QEI_compute_data+0x240>)
 8003a52:	f7fc fd9d 	bl	8000590 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6a:	ee17 0a90 	vmov	r0, s15
 8003a6e:	f7fc fd37 	bl	80004e0 <__aeabi_f2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc feb3 	bl	80007e4 <__aeabi_ddiv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd28 	bl	80004e0 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7fc fd7a 	bl	8000590 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7fd f856 	bl	8000b54 <__aeabi_d2f>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ab4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ab8:	ee17 0a90 	vmov	r0, s15
 8003abc:	f7fc fd10 	bl	80004e0 <__aeabi_f2d>
 8003ac0:	a365      	add	r3, pc, #404	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fd63 	bl	8000590 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fcfd 	bl	80004e0 <__aeabi_f2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fe79 	bl	80007e4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	461d      	mov	r5, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fcee 	bl	80004e0 <__aeabi_f2d>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7fc fd40 	bl	8000590 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fd f81c 	bl	8000b54 <__aeabi_d2f>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fcda 	bl	80004e0 <__aeabi_f2d>
 8003b2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fd2d 	bl	8000590 <__aeabi_dmul>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fccc 	bl	80004e0 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fd1e 	bl	8000590 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b68:	ee17 0a90 	vmov	r0, s15
 8003b6c:	f7fc fcb8 	bl	80004e0 <__aeabi_f2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fe34 	bl	80007e4 <__aeabi_ddiv>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fca9 	bl	80004e0 <__aeabi_f2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fcfb 	bl	8000590 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fc ffd7 	bl	8000b54 <__aeabi_d2f>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d00a      	beq.n	8003bf4 <QEI_compute_data+0x1d4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	e001      	b.n	8003bf8 <QEI_compute_data+0x1d8>
 8003bf4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003c64 <QEI_compute_data+0x244>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	d00a      	beq.n	8003c36 <QEI_compute_data+0x216>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	e001      	b.n	8003c3a <QEI_compute_data+0x21a>
 8003c36:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003c64 <QEI_compute_data+0x244>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	615a      	str	r2, [r3, #20]
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	400921fb 	.word	0x400921fb
 8003c60:	404e0000 	.word	0x404e0000
 8003c64:	00000000 	.word	0x00000000

08003c68 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	@ 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6178      	str	r0, [r7, #20]
 8003c70:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c74:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c78:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c7c:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003ca6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003cba:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d503      	bpl.n	8003cd8 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	22ff      	movs	r2, #255	@ 0xff
 8003cd4:	741a      	strb	r2, [r3, #16]
 8003cd6:	e002      	b.n	8003cde <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003cde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d006      	beq.n	8003cfa <Trapezoidal_Generator+0x92>
 8003cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	d104      	bne.n	8003d04 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
        return;
 8003d02:	e06f      	b.n	8003de4 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003d04:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d10:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003d38:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003d48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d58:	db27      	blt.n	8003daa <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003d5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d5e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003d80:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003d92:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	edc3 7a02 	vstr	s15, [r3, #8]
 8003da8:	e018      	b.n	8003ddc <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003daa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db6:	eeb0 0a66 	vmov.f32	s0, s13
 8003dba:	f00b fa59 	bl	800f270 <sqrtf>
 8003dbe:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	3738      	adds	r7, #56	@ 0x38
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003dec:	b480      	push	{r7}
 8003dee:	b08d      	sub	sp, #52	@ 0x34
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8003dfe:	ed87 1a01 	vstr	s2, [r7, #4]
 8003e02:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e0c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004090 <Trapezoidal_Evaluated+0x2a4>
 8003e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	f200 811b 	bhi.w	8004068 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2200      	movs	r2, #0
 8003e36:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	7c1b      	ldrb	r3, [r3, #16]
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e46:	ed97 7a00 	vldr	s14, [r7]
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d109      	bne.n	8003e7c <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003e7a:	e00c      	b.n	8003e96 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	7c1b      	ldrb	r3, [r3, #16]
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d824      	bhi.n	8003ef6 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003eac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ee0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003ef4:	e0c6      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	d830      	bhi.n	8003f6e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f62:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	e08a      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d900      	bls.n	8003f86 <Trapezoidal_Evaluated+0x19a>
}
 8003f84:	e07e      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fae:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	dd11      	ble.n	8003ff0 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004000:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004004:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004008:	edd7 7a07 	vldr	s15, [r7, #28]
 800400c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004010:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004018:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800401c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004020:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004024:	edd7 7a07 	vldr	s15, [r7, #28]
 8004028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800402c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800403e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004042:	edd7 7a07 	vldr	s15, [r7, #28]
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004058:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800405c:	eef1 7a67 	vneg.f32	s15, s15
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004066:	e00d      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2201      	movs	r2, #1
 800406c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3734      	adds	r7, #52	@ 0x34
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	3a83126f 	.word	0x3a83126f

08004094 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	ed87 0a01 	vstr	s0, [r7, #4]
 800409e:	4603      	mov	r3, r0
 80040a0:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b1a      	cmp	r3, #26
 80040a6:	d018      	beq.n	80040da <temperature_to_base+0x46>
 80040a8:	2b1a      	cmp	r3, #26
 80040aa:	dc1d      	bgt.n	80040e8 <temperature_to_base+0x54>
 80040ac:	2b18      	cmp	r3, #24
 80040ae:	d002      	beq.n	80040b6 <temperature_to_base+0x22>
 80040b0:	2b19      	cmp	r3, #25
 80040b2:	d003      	beq.n	80040bc <temperature_to_base+0x28>
 80040b4:	e018      	b.n	80040e8 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80040b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ba:	e017      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80040bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80040fc <temperature_to_base+0x68>
 80040c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80040cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040d0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80040d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d8:	e008      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80040da:	edd7 7a01 	vldr	s15, [r7, #4]
 80040de:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004100 <temperature_to_base+0x6c>
 80040e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e6:	e001      	b.n	80040ec <temperature_to_base+0x58>
        default:
            return value;
 80040e8:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80040ec:	eeb0 0a67 	vmov.f32	s0, s15
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	42000000 	.word	0x42000000
 8004100:	43889333 	.word	0x43889333

08004104 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	ed87 0a01 	vstr	s0, [r7, #4]
 800410e:	4603      	mov	r3, r0
 8004110:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	2b1a      	cmp	r3, #26
 8004116:	d018      	beq.n	800414a <temperature_from_base+0x46>
 8004118:	2b1a      	cmp	r3, #26
 800411a:	dc1d      	bgt.n	8004158 <temperature_from_base+0x54>
 800411c:	2b18      	cmp	r3, #24
 800411e:	d002      	beq.n	8004126 <temperature_from_base+0x22>
 8004120:	2b19      	cmp	r3, #25
 8004122:	d003      	beq.n	800412c <temperature_from_base+0x28>
 8004124:	e018      	b.n	8004158 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004126:	edd7 7a01 	vldr	s15, [r7, #4]
 800412a:	e017      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 800412c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004130:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004138:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800413c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004140:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800416c <temperature_from_base+0x68>
 8004144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004148:	e008      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800414a:	edd7 7a01 	vldr	s15, [r7, #4]
 800414e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004170 <temperature_from_base+0x6c>
 8004152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004156:	e001      	b.n	800415c <temperature_from_base+0x58>
        default:
            return value;
 8004158:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	42000000 	.word	0x42000000
 8004170:	43889333 	.word	0x43889333

08004174 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e00a      	b.n	80041a4 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b1a      	cmp	r3, #26
 80041a8:	ddf1      	ble.n	800418e <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a11      	ldr	r2, [pc, #68]	@ (80041f4 <init_length_converter+0x80>)
 80041ae:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <init_length_converter+0x84>)
 80041b4:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80041bc:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <init_length_converter+0x88>)
 80041c2:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <init_length_converter+0x8c>)
 80041c8:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <init_length_converter+0x90>)
 80041ce:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <init_length_converter+0x94>)
 80041d4:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <init_length_converter+0x98>)
 80041da:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	3a83126f 	.word	0x3a83126f
 80041f8:	3c23d70a 	.word	0x3c23d70a
 80041fc:	447a0000 	.word	0x447a0000
 8004200:	3cd013a9 	.word	0x3cd013a9
 8004204:	3e9c0ebf 	.word	0x3e9c0ebf
 8004208:	3f6a161e 	.word	0x3f6a161e
 800420c:	44c92b02 	.word	0x44c92b02

08004210 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	220a      	movs	r2, #10
 8004222:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e00a      	b.n	8004240 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b1a      	cmp	r3, #26
 8004244:	ddf1      	ble.n	800422a <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <init_mass_converter+0x74>)
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <init_mass_converter+0x78>)
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0b      	ldr	r2, [pc, #44]	@ (800428c <init_mass_converter+0x7c>)
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0b      	ldr	r2, [pc, #44]	@ (8004290 <init_mass_converter+0x80>)
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <init_mass_converter+0x84>)
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	358637bd 	.word	0x358637bd
 8004288:	3a83126f 	.word	0x3a83126f
 800428c:	447a0000 	.word	0x447a0000
 8004290:	3ce83d36 	.word	0x3ce83d36
 8004294:	3ee83d36 	.word	0x3ee83d36

08004298 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	220f      	movs	r2, #15
 80042aa:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e00a      	b.n	80042c8 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b1a      	cmp	r3, #26
 80042cc:	ddf1      	ble.n	80042b2 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <init_angle_converter+0x64>)
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <init_angle_converter+0x68>)
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	3c8efa35 	.word	0x3c8efa35
 8004300:	3c80adfd 	.word	0x3c80adfd

08004304 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2214      	movs	r2, #20
 8004316:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e00a      	b.n	8004334 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b1a      	cmp	r3, #26
 8004338:	ddf1      	ble.n	800431e <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <init_time_converter+0x7c>)
 800433e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a10      	ldr	r2, [pc, #64]	@ (8004384 <init_time_converter+0x80>)
 8004344:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a0f      	ldr	r2, [pc, #60]	@ (8004388 <init_time_converter+0x84>)
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <init_time_converter+0x88>)
 8004358:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <init_time_converter+0x8c>)
 800435e:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <init_time_converter+0x90>)
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	3089705f 	.word	0x3089705f
 8004384:	358637bd 	.word	0x358637bd
 8004388:	3a83126f 	.word	0x3a83126f
 800438c:	42700000 	.word	0x42700000
 8004390:	45610000 	.word	0x45610000
 8004394:	47a8c000 	.word	0x47a8c000

08004398 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2218      	movs	r2, #24
 80043aa:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e00a      	b.n	80043c8 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b1a      	cmp	r3, #26
 80043cc:	ddf1      	ble.n	80043b2 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <init_temperature_converter+0x50>)
 80043d2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <init_temperature_converter+0x54>)
 80043d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08004095 	.word	0x08004095
 80043ec:	08004105 	.word	0x08004105

080043f0 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff feba 	bl	8004174 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3378      	adds	r3, #120	@ 0x78
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff03 	bl	8004210 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	33f0      	adds	r3, #240	@ 0xf0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff42 	bl	8004298 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff72 	bl	8004304 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ffb6 	bl	8004398 <init_temperature_converter>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b1a      	cmp	r3, #26
 8004442:	d803      	bhi.n	800444c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <UnitConverter_get_unit_type+0x28>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	e000      	b.n	800444e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200000d4 	.word	0x200000d4

08004460 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	ed87 0a02 	vstr	s0, [r7, #8]
 800446c:	460b      	mov	r3, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffdc 	bl	8004434 <UnitConverter_get_unit_type>
 800447c:	4603      	mov	r3, r0
 800447e:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004480:	79bb      	ldrb	r3, [r7, #6]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ffd6 	bl	8004434 <UnitConverter_get_unit_type>
 8004488:	4603      	mov	r3, r0
 800448a:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 800448c:	7efa      	ldrb	r2, [r7, #27]
 800448e:	7ebb      	ldrb	r3, [r7, #26]
 8004490:	429a      	cmp	r2, r3
 8004492:	d002      	beq.n	800449a <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004494:	edd7 7a02 	vldr	s15, [r7, #8]
 8004498:	e03b      	b.n	8004512 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800449a:	7efa      	ldrb	r2, [r7, #27]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	79fa      	ldrb	r2, [r7, #7]
 80044b8:	4610      	mov	r0, r2
 80044ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80044be:	4798      	blx	r3
 80044c0:	ed87 0a07 	vstr	s0, [r7, #28]
 80044c4:	e00c      	b.n	80044e0 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80044d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044dc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ec:	79ba      	ldrb	r2, [r7, #6]
 80044ee:	4610      	mov	r0, r2
 80044f0:	ed97 0a07 	vldr	s0, [r7, #28]
 80044f4:	4798      	blx	r3
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	e00a      	b.n	8004512 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	ed93 7a00 	vldr	s14, [r3]
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004512:	eeb0 0a67 	vmov.f32	s0, s15
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	ed87 0a02 	vstr	s0, [r7, #8]
 8004528:	460b      	mov	r3, r1
 800452a:	71fb      	strb	r3, [r7, #7]
 800452c:	4613      	mov	r3, r2
 800452e:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff7e 	bl	8004434 <UnitConverter_get_unit_type>
 8004538:	4603      	mov	r3, r0
 800453a:	2b02      	cmp	r3, #2
 800453c:	d111      	bne.n	8004562 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800453e:	79bb      	ldrb	r3, [r7, #6]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff77 	bl	8004434 <UnitConverter_get_unit_type>
 8004546:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10a      	bne.n	8004562 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800454c:	79ba      	ldrb	r2, [r7, #6]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4619      	mov	r1, r3
 8004552:	ed97 0a02 	vldr	s0, [r7, #8]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff82 	bl	8004460 <UnitConverter_convert>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	e001      	b.n	8004566 <UnitConverter_angle+0x4a>
    }
    return value;
 8004562:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004566:	eeb0 0a67 	vmov.f32	s0, s15
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2220      	movs	r2, #32
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f00a fd55 	bl	800f038 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800458e:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004596:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004598:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800459c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800459e:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80045aa:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80045b0:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b8:	2204      	movs	r2, #4
 80045ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ca:	2202      	movs	r2, #2
 80045cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045ce:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d8:	2200      	movs	r2, #0
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045dc:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80045ea:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045f8:	481e      	ldr	r0, [pc, #120]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045fa:	f003 fbe5 	bl	8007dc8 <HAL_ADC_Init>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004604:	f001 fc18 	bl	8005e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800460c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004610:	4619      	mov	r1, r3
 8004612:	4818      	ldr	r0, [pc, #96]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004614:	f004 fd04 	bl	8009020 <HAL_ADCEx_MultiModeConfigChannel>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800461e:	f001 fc0b 	bl	8005e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <MX_ADC1_Init+0x108>)
 8004624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004626:	2306      	movs	r3, #6
 8004628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800462a:	2307      	movs	r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800462e:	237f      	movs	r3, #127	@ 0x7f
 8004630:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004632:	2304      	movs	r3, #4
 8004634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	4619      	mov	r1, r3
 800463e:	480d      	ldr	r0, [pc, #52]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004640:	f003 fe70 	bl	8008324 <HAL_ADC_ConfigChannel>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800464a:	f001 fbf5 	bl	8005e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <MX_ADC1_Init+0x10c>)
 8004650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004652:	230c      	movs	r3, #12
 8004654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <MX_ADC1_Init+0x104>)
 800465c:	f003 fe62 	bl	8008324 <HAL_ADC_ConfigChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004666:	f001 fbe7 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	3730      	adds	r7, #48	@ 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000178 	.word	0x20000178
 8004678:	19200040 	.word	0x19200040
 800467c:	1d500080 	.word	0x1d500080

08004680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b09e      	sub	sp, #120	@ 0x78
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	2254      	movs	r2, #84	@ 0x54
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f00a fcc9 	bl	800f038 <memset>
  if(adcHandle->Instance==ADC1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ae:	d15e      	bne.n	800476e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80046b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 f9a3 	bl	800aa0c <HAL_RCCEx_PeriphCLKConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80046cc:	f001 fbb4 	bl	8005e38 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046d0:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d4:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046dc:	4b26      	ldr	r3, [pc, #152]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004700:	2303      	movs	r3, #3
 8004702:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004704:	2303      	movs	r3, #3
 8004706:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004710:	4619      	mov	r1, r3
 8004712:	481a      	ldr	r0, [pc, #104]	@ (800477c <HAL_ADC_MspInit+0xfc>)
 8004714:	f005 f9ce 	bl	8009ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800471a:	4a1a      	ldr	r2, [pc, #104]	@ (8004784 <HAL_ADC_MspInit+0x104>)
 800471c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004720:	2205      	movs	r2, #5
 8004722:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800473c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004748:	2220      	movs	r2, #32
 800474a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800474e:	2200      	movs	r2, #0
 8004750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004752:	480b      	ldr	r0, [pc, #44]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004754:	f004 fe7c 	bl	8009450 <HAL_DMA_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800475e:	f001 fb6b 	bl	8005e38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a06      	ldr	r2, [pc, #24]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
 8004768:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800476e:	bf00      	nop
 8004770:	3778      	adds	r7, #120	@ 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	48000800 	.word	0x48000800
 8004780:	200001e4 	.word	0x200001e4
 8004784:	40020008 	.word	0x40020008

08004788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800478e:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <MX_DMA_Init+0x90>)
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <MX_DMA_Init+0x90>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6493      	str	r3, [r2, #72]	@ 0x48
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <MX_DMA_Init+0x90>)
 800479c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <MX_DMA_Init+0x90>)
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <MX_DMA_Init+0x90>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80047b2:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <MX_DMA_Init+0x90>)
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	2100      	movs	r1, #0
 80047c2:	200b      	movs	r0, #11
 80047c4:	f004 fe0f 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047c8:	200b      	movs	r0, #11
 80047ca:	f004 fe26 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	200c      	movs	r0, #12
 80047d4:	f004 fe07 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80047d8:	200c      	movs	r0, #12
 80047da:	f004 fe1e 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	200d      	movs	r0, #13
 80047e4:	f004 fdff 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80047e8:	200d      	movs	r0, #13
 80047ea:	f004 fe16 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	200e      	movs	r0, #14
 80047f4:	f004 fdf7 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80047f8:	200e      	movs	r0, #14
 80047fa:	f004 fe0e 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	200f      	movs	r0, #15
 8004804:	f004 fdef 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004808:	200f      	movs	r0, #15
 800480a:	f004 fe06 	bl	800941a <HAL_NVIC_EnableIRQ>

}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004832:	4b4e      	ldr	r3, [pc, #312]	@ (800496c <MX_GPIO_Init+0x150>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	4a4d      	ldr	r2, [pc, #308]	@ (800496c <MX_GPIO_Init+0x150>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483e:	4b4b      	ldr	r3, [pc, #300]	@ (800496c <MX_GPIO_Init+0x150>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800484a:	4b48      	ldr	r3, [pc, #288]	@ (800496c <MX_GPIO_Init+0x150>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	4a47      	ldr	r2, [pc, #284]	@ (800496c <MX_GPIO_Init+0x150>)
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004856:	4b45      	ldr	r3, [pc, #276]	@ (800496c <MX_GPIO_Init+0x150>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	4b42      	ldr	r3, [pc, #264]	@ (800496c <MX_GPIO_Init+0x150>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	4a41      	ldr	r2, [pc, #260]	@ (800496c <MX_GPIO_Init+0x150>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <MX_GPIO_Init+0x150>)
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <MX_GPIO_Init+0x150>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	4a3b      	ldr	r2, [pc, #236]	@ (800496c <MX_GPIO_Init+0x150>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004886:	4b39      	ldr	r3, [pc, #228]	@ (800496c <MX_GPIO_Init+0x150>)
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800489c:	f005 faa4 	bl	8009de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a6:	4832      	ldr	r0, [pc, #200]	@ (8004970 <MX_GPIO_Init+0x154>)
 80048a8:	f005 fa9e 	bl	8009de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4619      	mov	r1, r3
 80048c2:	482b      	ldr	r0, [pc, #172]	@ (8004970 <MX_GPIO_Init+0x154>)
 80048c4:	f005 f8f6 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80048c8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80048cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e4:	f005 f8e6 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin EMER_Pin PROX_Pin
                           J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin
 80048e8:	f241 03b1 	movw	r3, #4273	@ 0x10b1
 80048ec:	617b      	str	r3, [r7, #20]
                          |J1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	481d      	ldr	r0, [pc, #116]	@ (8004974 <MX_GPIO_Init+0x158>)
 80048fe:	f005 f8d9 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004902:	2306      	movs	r3, #6
 8004904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800490a:	2302      	movs	r3, #2
 800490c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	4817      	ldr	r0, [pc, #92]	@ (8004974 <MX_GPIO_Init+0x158>)
 8004916:	f005 f8cd 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800491a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800491e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004920:	2301      	movs	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4619      	mov	r1, r3
 8004932:	480f      	ldr	r0, [pc, #60]	@ (8004970 <MX_GPIO_Init+0x154>)
 8004934:	f005 f8be 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004938:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800493c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	4619      	mov	r1, r3
 800494c:	4808      	ldr	r0, [pc, #32]	@ (8004970 <MX_GPIO_Init+0x154>)
 800494e:	f005 f8b1 	bl	8009ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	2028      	movs	r0, #40	@ 0x28
 8004958:	f004 fd45 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800495c:	2028      	movs	r0, #40	@ 0x28
 800495e:	f004 fd5c 	bl	800941a <HAL_NVIC_EnableIRQ>

}
 8004962:	bf00      	nop
 8004964:	3728      	adds	r7, #40	@ 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	48000800 	.word	0x48000800
 8004974:	48000400 	.word	0x48000400

08004978 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800497c:	f3bf 8f4f 	dsb	sy
}
 8004980:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <__NVIC_SystemReset+0x24>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800498a:	4904      	ldr	r1, [pc, #16]	@ (800499c <__NVIC_SystemReset+0x24>)
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <__NVIC_SystemReset+0x28>)
 800498e:	4313      	orrs	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004992:	f3bf 8f4f 	dsb	sy
}
 8004996:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <__NVIC_SystemReset+0x20>
 800499c:	e000ed00 	.word	0xe000ed00
 80049a0:	05fa0004 	.word	0x05fa0004

080049a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80049a8:	f002 ff59 	bl	800785e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80049ac:	f000 f8b0 	bl	8004b10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80049b0:	f7ff ff34 	bl	800481c <MX_GPIO_Init>
	MX_DMA_Init();
 80049b4:	f7ff fee8 	bl	8004788 <MX_DMA_Init>
	MX_ADC1_Init();
 80049b8:	f7ff fdda 	bl	8004570 <MX_ADC1_Init>
	MX_TIM2_Init();
 80049bc:	f002 f964 	bl	8006c88 <MX_TIM2_Init>
	MX_TIM3_Init();
 80049c0:	f002 f9b0 	bl	8006d24 <MX_TIM3_Init>
	MX_TIM4_Init();
 80049c4:	f002 fa04 	bl	8006dd0 <MX_TIM4_Init>
	MX_TIM5_Init();
 80049c8:	f002 fa58 	bl	8006e7c <MX_TIM5_Init>
	MX_TIM8_Init();
 80049cc:	f002 faac 	bl	8006f28 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80049d0:	f002 fd6e 	bl	80074b0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80049d4:	f002 fb66 	bl	80070a4 <MX_TIM16_Init>
	MX_TIM1_Init();
 80049d8:	f002 f8c2 	bl	8006b60 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80049dc:	f002 fd1e 	bl	800741c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80049e0:	f001 fa32 	bl	8005e48 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 80049e4:	4b3d      	ldr	r3, [pc, #244]	@ (8004adc <main+0x138>)
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae0 <main+0x13c>)
 80049ea:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80049ec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae4 <main+0x140>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae8 <main+0x144>)
 80049f2:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 80049f4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae0 <main+0x13c>)
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 80049fc:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <main+0x13c>)
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 8004a04:	4b38      	ldr	r3, [pc, #224]	@ (8004ae8 <main+0x144>)
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 8004a0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ae8 <main+0x144>)
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 8004a14:	4b32      	ldr	r3, [pc, #200]	@ (8004ae0 <main+0x13c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8004a1c:	4b32      	ldr	r3, [pc, #200]	@ (8004ae8 <main+0x144>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 8004a24:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <main+0x148>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d037      	beq.n	8004a9c <main+0xf8>
 8004a2c:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <main+0x14c>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f083 0301 	eor.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d030      	beq.n	8004a9c <main+0xf8>
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <main+0x144>)
 8004a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a40:	f083 0301 	eor.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d028      	beq.n	8004a9c <main+0xf8>
				&& !prismatic_axis.trajectory_active) {
 8004a4a:	4b25      	ldr	r3, [pc, #148]	@ (8004ae0 <main+0x13c>)
 8004a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d020      	beq.n	8004a9c <main+0xf8>
			start_combined_trajectory(
 8004a5a:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <main+0x150>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004a5e:	4a26      	ldr	r2, [pc, #152]	@ (8004af8 <main+0x154>)
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8004a68:	4b22      	ldr	r3, [pc, #136]	@ (8004af4 <main+0x150>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004a6c:	4a23      	ldr	r2, [pc, #140]	@ (8004afc <main+0x158>)
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8004a76:	eef0 0a47 	vmov.f32	s1, s14
 8004a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7e:	f000 f97d 	bl	8004d7c <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004a82:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <main+0x150>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
					% SEQUENCE_MAX_POINTS;
 8004a88:	425a      	negs	r2, r3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	f002 0203 	and.w	r2, r2, #3
 8004a92:	bf58      	it	pl
 8004a94:	4253      	negpl	r3, r2
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <main+0x150>)
 8004a9a:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8004a9c:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <main+0x148>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <main+0x14c>)
 8004aac:	701a      	strb	r2, [r3, #0]

		// Process button 2 - start homing procedure
		if (b2 && homing_state == HOMING_IDLE) {
 8004aae:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <main+0x15c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <main+0x11e>
 8004ab6:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <main+0x160>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <main+0x11e>
			start_homing();
 8004abe:	f000 fa45 	bl	8004f4c <start_homing>
		}

		// Process button 3 - enter manual control mode
		if (b3) {
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <main+0x164>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <main+0x12a>
			manual_control_mode();
 8004aca:	f000 ff9d 	bl	8005a08 <manual_control_mode>
		}

		// Process button 4 - system reset
		if (b4) {
 8004ace:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <main+0x168>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0a6      	beq.n	8004a24 <main+0x80>
			NVIC_SystemReset();
 8004ad6:	f7ff ff4f 	bl	8004978 <__NVIC_SystemReset>
 8004ada:	bf00      	nop
 8004adc:	200003e0 	.word	0x200003e0
 8004ae0:	20000294 	.word	0x20000294
 8004ae4:	2000043c 	.word	0x2000043c
 8004ae8:	200002d8 	.word	0x200002d8
 8004aec:	2000185c 	.word	0x2000185c
 8004af0:	2000032e 	.word	0x2000032e
 8004af4:	2000032d 	.word	0x2000032d
 8004af8:	08010f08 	.word	0x08010f08
 8004afc:	08010f18 	.word	0x08010f18
 8004b00:	20001860 	.word	0x20001860
 8004b04:	2000032c 	.word	0x2000032c
 8004b08:	20001864 	.word	0x20001864
 8004b0c:	20001868 	.word	0x20001868

08004b10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b094      	sub	sp, #80	@ 0x50
 8004b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b16:	f107 0318 	add.w	r3, r7, #24
 8004b1a:	2238      	movs	r2, #56	@ 0x38
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f00a fa8a 	bl	800f038 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f005 f988 	bl	8009e48 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b42:	2340      	movs	r3, #64	@ 0x40
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b46:	2302      	movs	r3, #2
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004b52:	2355      	movs	r3, #85	@ 0x55
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b56:	2302      	movs	r3, #2
 8004b58:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b62:	f107 0318 	add.w	r3, r7, #24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f005 fa22 	bl	8009fb0 <HAL_RCC_OscConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <SystemClock_Config+0x66>
		Error_Handler();
 8004b72:	f001 f961 	bl	8005e38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004b76:	230f      	movs	r3, #15
 8004b78:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f005 fd20 	bl	800a5d4 <HAL_RCC_ClockConfig>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <SystemClock_Config+0x8e>
		Error_Handler();
 8004b9a:	f001 f94d 	bl	8005e38 <Error_Handler>
	}
}
 8004b9e:	bf00      	nop
 8004ba0:	3750      	adds	r7, #80	@ 0x50
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <normalize_angle>:
/* USER CODE BEGIN 4 *//**
 * @brief Normalizes an angle to the range [0, 2π]
 * @param angle_rad Angle in radians
 * @return Normalized angle in radians
 */
float normalize_angle(float angle_rad) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8004bb2:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8004bf0 <normalize_angle+0x48>
 8004bb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bba:	f00a fb39 	bl	800f230 <fmodf>
 8004bbe:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8004bc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	d507      	bpl.n	8004be0 <normalize_angle+0x38>
		result += 2.0f * PI;
 8004bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bd4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004bf0 <normalize_angle+0x48>
 8004bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bdc:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	ee07 3a90 	vmov	s15, r3
}
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40c90fdb 	.word	0x40c90fdb

08004bf4 <calculate_movement_deg>:
 * @brief Calculates shortest angular movement in degrees
 * @param current_deg Current angle in degrees
 * @param target_deg Target angle in degrees
 * @return Movement required in degrees
 */
float calculate_movement_deg(float current_deg, float target_deg) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8004bfe:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8004c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c0c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c18:	d508      	bpl.n	8004c2c <calculate_movement_deg+0x38>
 8004c1a:	edd7 7a00 	vldr	s15, [r7]
 8004c1e:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	d411      	bmi.n	8004c50 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8004c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c30:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	db33      	blt.n	8004ca6 <calculate_movement_deg+0xb2>
 8004c3e:	edd7 7a00 	vldr	s15, [r7]
 8004c42:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	db2a      	blt.n	8004ca6 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8004c50:	ed97 7a00 	vldr	s14, [r7]
 8004c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c5c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8004c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c64:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	dd07      	ble.n	8004c82 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8004c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c76:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004d74 <calculate_movement_deg+0x180>
 8004c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c7e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c86:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004d78 <calculate_movement_deg+0x184>
 8004c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	d562      	bpl.n	8004d5a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8004c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c98:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004d74 <calculate_movement_deg+0x180>
 8004c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ca0:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004ca4:	e059      	b.n	8004d5a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// Explicitly determine direction to avoid crossing 180°
		if (current_deg < 180.0f) {
 8004ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004caa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	d52a      	bpl.n	8004d0e <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8004cb8:	edd7 7a00 	vldr	s15, [r7]
 8004cbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	d50e      	bpl.n	8004cf0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8004cd2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004d74 <calculate_movement_deg+0x180>
 8004cd6:	edd7 7a00 	vldr	s15, [r7]
 8004cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce6:	eef1 7a67 	vneg.f32	s15, s15
 8004cea:	edc7 7a03 	vstr	s15, [r7, #12]
 8004cee:	e034      	b.n	8004d5a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8004cf0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cf4:	edd7 7a00 	vldr	s15, [r7]
 8004cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cfc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d74 <calculate_movement_deg+0x180>
 8004d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d04:	eef1 7a67 	vneg.f32	s15, s15
 8004d08:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d0c:	e025      	b.n	8004d5a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8004d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004d70 <calculate_movement_deg+0x17c>
 8004d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d1a:	ed97 7a00 	vldr	s14, [r7]
 8004d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	d50c      	bpl.n	8004d42 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8004d28:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004d74 <calculate_movement_deg+0x180>
 8004d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d34:	ed97 7a00 	vldr	s14, [r7]
 8004d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d3c:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d40:	e00b      	b.n	8004d5a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8004d42:	ed97 7a00 	vldr	s14, [r7]
 8004d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004d74 <calculate_movement_deg+0x180>
 8004d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d56:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	ee07 3a90 	vmov	s15, r3
}
 8004d60:	eeb0 0a67 	vmov.f32	s0, s15
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	43340000 	.word	0x43340000
 8004d74:	43b40000 	.word	0x43b40000
 8004d78:	c3340000 	.word	0xc3340000

08004d7c <start_combined_trajectory>:
 * @brief Starts a combined trajectory for both prismatic and revolute axes
 * @param prismatic_target_mm Target position for prismatic axis in mm
 * @param revolute_target_deg Target position for revolute axis in degrees
 */
void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	ed2d 8b02 	vpush	{d8}
 8004d82:	b08d      	sub	sp, #52	@ 0x34
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d8a:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8004d8e:	4b60      	ldr	r3, [pc, #384]	@ (8004f10 <start_combined_trajectory+0x194>)
 8004d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float rev_current = revolute_encoder.rads;
 8004d94:	4b5f      	ldr	r3, [pc, #380]	@ (8004f14 <start_combined_trajectory+0x198>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8004d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f18 <start_combined_trajectory+0x19c>)
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8004da2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f18 <start_combined_trajectory+0x19c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004da8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <start_combined_trajectory+0x1a0>)
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004db0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f1c <start_combined_trajectory+0x1a0>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 8004db6:	4a5a      	ldr	r2, [pc, #360]	@ (8004f20 <start_combined_trajectory+0x1a4>)
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8004dbc:	4a59      	ldr	r2, [pc, #356]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 8004dc2:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8004f28 <start_combined_trajectory+0x1ac>
 8004dc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004dca:	f00a faf9 	bl	800f3c0 <fmaxf>
 8004dce:	eef0 7a40 	vmov.f32	s15, s0
 8004dd2:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8004f2c <start_combined_trajectory+0x1b0>
 8004dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dda:	f00a fb0e 	bl	800f3fa <fminf>
 8004dde:	eef0 7a40 	vmov.f32	s15, s0
 8004de2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <start_combined_trajectory+0x1a4>)
 8004de4:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 8004de8:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004dec:	f7ff fedc 	bl	8004ba8 <normalize_angle>
 8004df0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	// Convert target to radians
	float target_radians = UnitConverter_angle(&converter_system,
 8004df4:	220f      	movs	r2, #15
 8004df6:	210e      	movs	r1, #14
 8004df8:	ed97 0a00 	vldr	s0, [r7]
 8004dfc:	484c      	ldr	r0, [pc, #304]	@ (8004f30 <start_combined_trajectory+0x1b4>)
 8004dfe:	f7ff fb8d 	bl	800451c <UnitConverter_angle>
 8004e02:	ed87 0a08 	vstr	s0, [r7, #32]
			revolute_target_deg, UNIT_DEGREE, UNIT_RADIAN);

	// Normalize target to [0, 2π]
	float normalized_target = normalize_angle(target_radians);
 8004e06:	ed97 0a08 	vldr	s0, [r7, #32]
 8004e0a:	f7ff fecd 	bl	8004ba8 <normalize_angle>
 8004e0e:	ed87 0a07 	vstr	s0, [r7, #28]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 8004e12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004e16:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004f34 <start_combined_trajectory+0x1b8>
 8004e1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e1e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f38 <start_combined_trajectory+0x1bc>
 8004e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e26:	edc7 7a06 	vstr	s15, [r7, #24]
	float target_deg = revolute_target_deg;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	617b      	str	r3, [r7, #20]

	// Calculate movement in degrees
	float movement_deg = calculate_movement_deg(current_deg, target_deg);
 8004e2e:	edd7 0a05 	vldr	s1, [r7, #20]
 8004e32:	ed97 0a06 	vldr	s0, [r7, #24]
 8004e36:	f7ff fedd 	bl	8004bf4 <calculate_movement_deg>
 8004e3a:	ed87 0a04 	vstr	s0, [r7, #16]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8004e3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e42:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8004f38 <start_combined_trajectory+0x1bc>
 8004e46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e4a:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8004f34 <start_combined_trajectory+0x1b8>
 8004e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e52:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8004e56:	4b33      	ldr	r3, [pc, #204]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004e58:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e64:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004e66:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f20 <start_combined_trajectory+0x1a4>)
 8004e6c:	ed93 8a03 	vldr	s16, [r3, #12]
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <start_combined_trajectory+0x1a4>)
 8004e72:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004e76:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <start_combined_trajectory+0x1c0>)
 8004e78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7fb fe68 	bl	8000b54 <__aeabi_d2f>
 8004e84:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sdd_max);
 8004e86:	4b2d      	ldr	r3, [pc, #180]	@ (8004f3c <start_combined_trajectory+0x1c0>)
 8004e88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fb fe60 	bl	8000b54 <__aeabi_d2f>
 8004e94:	4603      	mov	r3, r0
 8004e96:	ee01 3a90 	vmov	s3, r3
 8004e9a:	ee01 4a10 	vmov	s2, r4
 8004e9e:	eef0 0a68 	vmov.f32	s1, s17
 8004ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8004ea6:	4826      	ldr	r0, [pc, #152]	@ (8004f40 <start_combined_trajectory+0x1c4>)
 8004ea8:	f7fe fede 	bl	8003c68 <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004eae:	ed93 8a03 	vldr	s16, [r3, #12]
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004eb4:	edd3 8a04 	vldr	s17, [r3, #16]
			revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8004eb8:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <start_combined_trajectory+0x1c8>)
 8004eba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f7fb fe47 	bl	8000b54 <__aeabi_d2f>
 8004ec6:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qdd_max);
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <start_combined_trajectory+0x1c8>)
 8004eca:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f7fb fe3f 	bl	8000b54 <__aeabi_d2f>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	ee01 3a90 	vmov	s3, r3
 8004edc:	ee01 4a10 	vmov	s2, r4
 8004ee0:	eef0 0a68 	vmov.f32	s1, s17
 8004ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ee8:	4817      	ldr	r0, [pc, #92]	@ (8004f48 <start_combined_trajectory+0x1cc>)
 8004eea:	f7fe febd 	bl	8003c68 <Trapezoidal_Generator>

	// Lift pen during movement
	plotter_pen_up();
 8004eee:	f001 fc47 	bl	8006780 <plotter_pen_up>

	// Set trajectory active flags
	prismatic_axis.trajectory_active = true;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <start_combined_trajectory+0x1a4>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = true;
 8004efa:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <start_combined_trajectory+0x1a8>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8004f02:	bf00      	nop
 8004f04:	3734      	adds	r7, #52	@ 0x34
 8004f06:	46bd      	mov	sp, r7
 8004f08:	ecbd 8b02 	vpop	{d8}
 8004f0c:	bd90      	pop	{r4, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200003e0 	.word	0x200003e0
 8004f14:	2000043c 	.word	0x2000043c
 8004f18:	2000026c 	.word	0x2000026c
 8004f1c:	20000280 	.word	0x20000280
 8004f20:	20000294 	.word	0x20000294
 8004f24:	200002d8 	.word	0x200002d8
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	43960000 	.word	0x43960000
 8004f30:	200007ac 	.word	0x200007ac
 8004f34:	43340000 	.word	0x43340000
 8004f38:	40490fdb 	.word	0x40490fdb
 8004f3c:	20000060 	.word	0x20000060
 8004f40:	20000244 	.word	0x20000244
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000258 	.word	0x20000258

08004f4c <start_homing>:

/**
 * @brief Starts the homing sequence for both axes
 */
void start_homing(void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	// Ensure pen is up for safety
	plotter_pen_up();
 8004f50:	f001 fc16 	bl	8006780 <plotter_pen_up>

	// Set initial homing state
	homing_state = HOMING_PRIS_DOWN;
 8004f54:	4b02      	ldr	r3, [pc, #8]	@ (8004f60 <start_homing+0x14>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	2000032c 	.word	0x2000032c

08004f64 <update_control_loops>:

/**
 * @brief Updates control loops for both axes
 */
void update_control_loops(void) {
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	ed2d 8b02 	vpush	{d8}
 8004f6c:	b089      	sub	sp, #36	@ 0x24
 8004f6e:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 8004f70:	4b9e      	ldr	r3, [pc, #632]	@ (80051ec <update_control_loops+0x288>)
 8004f72:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004f76:	eeb0 0a67 	vmov.f32	s0, s15
 8004f7a:	f7ff fe15 	bl	8004ba8 <normalize_angle>
 8004f7e:	eef0 7a40 	vmov.f32	s15, s0
 8004f82:	4b9b      	ldr	r3, [pc, #620]	@ (80051f0 <update_control_loops+0x28c>)
 8004f84:	edc3 7a00 	vstr	s15, [r3]

	// Calculate angle in degrees for display/debugging
	angle_deg = UnitConverter_angle(&converter_system,
 8004f88:	4b99      	ldr	r3, [pc, #612]	@ (80051f0 <update_control_loops+0x28c>)
 8004f8a:	edd3 7a00 	vldr	s15, [r3]
 8004f8e:	220e      	movs	r2, #14
 8004f90:	210f      	movs	r1, #15
 8004f92:	eeb0 0a67 	vmov.f32	s0, s15
 8004f96:	4897      	ldr	r0, [pc, #604]	@ (80051f4 <update_control_loops+0x290>)
 8004f98:	f7ff fac0 	bl	800451c <UnitConverter_angle>
 8004f9c:	eef0 7a40 	vmov.f32	s15, s0
 8004fa0:	4b95      	ldr	r3, [pc, #596]	@ (80051f8 <update_control_loops+0x294>)
 8004fa2:	edc3 7a00 	vstr	s15, [r3]
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	// Update prismatic trajectory if active
	if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8004fa6:	4b95      	ldr	r3, [pc, #596]	@ (80051fc <update_control_loops+0x298>)
 8004fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d048      	beq.n	8005042 <update_control_loops+0xde>
 8004fb0:	4b93      	ldr	r3, [pc, #588]	@ (8005200 <update_control_loops+0x29c>)
 8004fb2:	7c1b      	ldrb	r3, [r3, #16]
 8004fb4:	f083 0301 	eor.w	r3, r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d041      	beq.n	8005042 <update_control_loops+0xde>
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80051fc <update_control_loops+0x298>)
 8004fc0:	ed93 8a03 	vldr	s16, [r3, #12]
 8004fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80051fc <update_control_loops+0x298>)
 8004fc6:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004fca:	4b8e      	ldr	r3, [pc, #568]	@ (8005204 <update_control_loops+0x2a0>)
 8004fcc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb fdbe 	bl	8000b54 <__aeabi_d2f>
 8004fd8:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8004fda:	4b8a      	ldr	r3, [pc, #552]	@ (8005204 <update_control_loops+0x2a0>)
 8004fdc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f7fb fdb6 	bl	8000b54 <__aeabi_d2f>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	ee01 3a90 	vmov	s3, r3
 8004fee:	ee01 4a10 	vmov	s2, r4
 8004ff2:	eef0 0a68 	vmov.f32	s1, s17
 8004ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8004ffa:	4981      	ldr	r1, [pc, #516]	@ (8005200 <update_control_loops+0x29c>)
 8004ffc:	4882      	ldr	r0, [pc, #520]	@ (8005208 <update_control_loops+0x2a4>)
 8004ffe:	f7fe fef5 	bl	8003dec <Trapezoidal_Evaluated>

		prismatic_axis.position = prisEva.setposition;
 8005002:	4b7f      	ldr	r3, [pc, #508]	@ (8005200 <update_control_loops+0x29c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7d      	ldr	r2, [pc, #500]	@ (80051fc <update_control_loops+0x298>)
 8005008:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = prisEva.setvelocity;
 800500a:	4b7d      	ldr	r3, [pc, #500]	@ (8005200 <update_control_loops+0x29c>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4a7b      	ldr	r2, [pc, #492]	@ (80051fc <update_control_loops+0x298>)
 8005010:	6053      	str	r3, [r2, #4]

		if (prisEva.isFinised) {
 8005012:	4b7b      	ldr	r3, [pc, #492]	@ (8005200 <update_control_loops+0x29c>)
 8005014:	7c1b      	ldrb	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d013      	beq.n	8005042 <update_control_loops+0xde>
			prismatic_axis.trajectory_active = false;
 800501a:	4a78      	ldr	r2, [pc, #480]	@ (80051fc <update_control_loops+0x298>)
 800501c:	2300      	movs	r3, #0
 800501e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			prismatic_axis.position = prisEva.setposition;
 8005022:	4b77      	ldr	r3, [pc, #476]	@ (8005200 <update_control_loops+0x29c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	@ (80051fc <update_control_loops+0x298>)
 8005028:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = 0.0f;
 800502a:	4b74      	ldr	r3, [pc, #464]	@ (80051fc <update_control_loops+0x298>)
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
			prismatic_axis.dfd = 0.0f;
 8005032:	4b72      	ldr	r3, [pc, #456]	@ (80051fc <update_control_loops+0x298>)
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c
			prismatic_axis.ffd = 0.0f;
 800503a:	4b70      	ldr	r3, [pc, #448]	@ (80051fc <update_control_loops+0x298>)
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Update revolute trajectory if active
	if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <update_control_loops+0x2a8>)
 8005044:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	d048      	beq.n	80050de <update_control_loops+0x17a>
 800504c:	4b70      	ldr	r3, [pc, #448]	@ (8005210 <update_control_loops+0x2ac>)
 800504e:	7c1b      	ldrb	r3, [r3, #16]
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d041      	beq.n	80050de <update_control_loops+0x17a>
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800505a:	4b6c      	ldr	r3, [pc, #432]	@ (800520c <update_control_loops+0x2a8>)
 800505c:	ed93 8a03 	vldr	s16, [r3, #12]
 8005060:	4b6a      	ldr	r3, [pc, #424]	@ (800520c <update_control_loops+0x2a8>)
 8005062:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8005066:	4b6b      	ldr	r3, [pc, #428]	@ (8005214 <update_control_loops+0x2b0>)
 8005068:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800506c:	4610      	mov	r0, r2
 800506e:	4619      	mov	r1, r3
 8005070:	f7fb fd70 	bl	8000b54 <__aeabi_d2f>
 8005074:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 8005076:	4b67      	ldr	r3, [pc, #412]	@ (8005214 <update_control_loops+0x2b0>)
 8005078:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	f7fb fd68 	bl	8000b54 <__aeabi_d2f>
 8005084:	4603      	mov	r3, r0
 8005086:	ee01 3a90 	vmov	s3, r3
 800508a:	ee01 4a10 	vmov	s2, r4
 800508e:	eef0 0a68 	vmov.f32	s1, s17
 8005092:	eeb0 0a48 	vmov.f32	s0, s16
 8005096:	495e      	ldr	r1, [pc, #376]	@ (8005210 <update_control_loops+0x2ac>)
 8005098:	485f      	ldr	r0, [pc, #380]	@ (8005218 <update_control_loops+0x2b4>)
 800509a:	f7fe fea7 	bl	8003dec <Trapezoidal_Evaluated>

		revolute_axis.position = revEva.setposition;
 800509e:	4b5c      	ldr	r3, [pc, #368]	@ (8005210 <update_control_loops+0x2ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5a      	ldr	r2, [pc, #360]	@ (800520c <update_control_loops+0x2a8>)
 80050a4:	6013      	str	r3, [r2, #0]
		revolute_axis.velocity = revEva.setvelocity;
 80050a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <update_control_loops+0x2ac>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4a58      	ldr	r2, [pc, #352]	@ (800520c <update_control_loops+0x2a8>)
 80050ac:	6053      	str	r3, [r2, #4]

		if (revEva.isFinised) {
 80050ae:	4b58      	ldr	r3, [pc, #352]	@ (8005210 <update_control_loops+0x2ac>)
 80050b0:	7c1b      	ldrb	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <update_control_loops+0x17a>
			revolute_axis.trajectory_active = false;
 80050b6:	4a55      	ldr	r2, [pc, #340]	@ (800520c <update_control_loops+0x2a8>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			revolute_axis.position = revEva.setposition;
 80050be:	4b54      	ldr	r3, [pc, #336]	@ (8005210 <update_control_loops+0x2ac>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a52      	ldr	r2, [pc, #328]	@ (800520c <update_control_loops+0x2a8>)
 80050c4:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = 0.0f;
 80050c6:	4b51      	ldr	r3, [pc, #324]	@ (800520c <update_control_loops+0x2a8>)
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
			revolute_axis.dfd = 0.0f;
 80050ce:	4b4f      	ldr	r3, [pc, #316]	@ (800520c <update_control_loops+0x2a8>)
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	62da      	str	r2, [r3, #44]	@ 0x2c
			revolute_axis.ffd = 0.0f;
 80050d6:	4b4d      	ldr	r3, [pc, #308]	@ (800520c <update_control_loops+0x2a8>)
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Calculate control signals for prismatic axis
	prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos, -65535.0f,
 80050de:	4b47      	ldr	r3, [pc, #284]	@ (80051fc <update_control_loops+0x298>)
 80050e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80050e4:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80050e8:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80050ec:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 800521c <update_control_loops+0x2b8>
 80050f0:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8005220 <update_control_loops+0x2bc>
 80050f4:	eeb0 0a67 	vmov.f32	s0, s15
 80050f8:	f7fc fe12 	bl	8001d20 <mapf>
 80050fc:	eef0 7a40 	vmov.f32	s15, s0
 8005100:	4b3e      	ldr	r3, [pc, #248]	@ (80051fc <update_control_loops+0x298>)
 8005102:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005106:	4b3d      	ldr	r3, [pc, #244]	@ (80051fc <update_control_loops+0x298>)
 8005108:	edd3 7a08 	vldr	s15, [r3, #32]
 800510c:	4b45      	ldr	r3, [pc, #276]	@ (8005224 <update_control_loops+0x2c0>)
 800510e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005112:	eef0 0a47 	vmov.f32	s1, s14
 8005116:	eeb0 0a67 	vmov.f32	s0, s15
 800511a:	4843      	ldr	r0, [pc, #268]	@ (8005228 <update_control_loops+0x2c4>)
 800511c:	f7fd fdce 	bl	8002cbc <MotorKalman_Estimate>
 8005120:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_axis.input_voltage, prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8005124:	4b41      	ldr	r3, [pc, #260]	@ (800522c <update_control_loops+0x2c8>)
 8005126:	edd3 7a04 	vldr	s15, [r3, #16]
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8005230 <update_control_loops+0x2cc>
 8005132:	ee67 7a87 	vmul.f32	s15, s15, s14
	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005136:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <update_control_loops+0x298>)
 8005138:	edc3 7a07 	vstr	s15, [r3, #28]

	if (isnan(prismatic_axis.kalman_velocity)) {
 800513c:	4b2f      	ldr	r3, [pc, #188]	@ (80051fc <update_control_loops+0x298>)
 800513e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005142:	eef4 7a67 	vcmp.f32	s15, s15
 8005146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514a:	d703      	bvc.n	8005154 <update_control_loops+0x1f0>
		prismatic_axis.kalman_velocity = 0.0f;
 800514c:	4b2b      	ldr	r3, [pc, #172]	@ (80051fc <update_control_loops+0x298>)
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	61da      	str	r2, [r3, #28]
	}

	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8005154:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <update_control_loops+0x298>)
 8005156:	ed93 7a00 	vldr	s14, [r3]
 800515a:	4b32      	ldr	r3, [pc, #200]	@ (8005224 <update_control_loops+0x2c0>)
 800515c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8005160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <update_control_loops+0x298>)
 8005166:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <update_control_loops+0x298>)
 800516c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005170:	eeb0 0a67 	vmov.f32	s0, s15
 8005174:	482f      	ldr	r0, [pc, #188]	@ (8005234 <update_control_loops+0x2d0>)
 8005176:	f7fc f84f 	bl	8001218 <PID_CONTROLLER_Compute>
 800517a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800517e:	4b21      	ldr	r3, [pc, #132]	@ (8005204 <update_control_loops+0x2a0>)
 8005180:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	f7fb fc9c 	bl	8000ac4 <__aeabi_d2iz>
 800518c:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800518e:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <update_control_loops+0x2a0>)
 8005190:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005194:	4690      	mov	r8, r2
 8005196:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb fc91 	bl	8000ac4 <__aeabi_d2iz>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4619      	mov	r1, r3
 80051a6:	4620      	mov	r0, r4
 80051a8:	eeb0 0a48 	vmov.f32	s0, s16
 80051ac:	f7fb ffd2 	bl	8001154 <PWM_Satuation>
 80051b0:	ee07 0a90 	vmov	s15, r0
 80051b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051b8:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <update_control_loops+0x298>)
 80051ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 80051be:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <update_control_loops+0x298>)
 80051c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d037      	beq.n	8005238 <update_control_loops+0x2d4>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051c8:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <update_control_loops+0x298>)
 80051ca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <update_control_loops+0x298>)
 80051d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80051d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051d8:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <update_control_loops+0x298>)
 80051da:	edd3 7a07 	vldr	s15, [r3, #28]
 80051de:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051e2:	4b06      	ldr	r3, [pc, #24]	@ (80051fc <update_control_loops+0x298>)
 80051e4:	edc3 7a06 	vstr	s15, [r3, #24]
 80051e8:	e031      	b.n	800524e <update_control_loops+0x2ea>
 80051ea:	bf00      	nop
 80051ec:	2000043c 	.word	0x2000043c
 80051f0:	20000330 	.word	0x20000330
 80051f4:	200007ac 	.word	0x200007ac
 80051f8:	20000334 	.word	0x20000334
 80051fc:	20000294 	.word	0x20000294
 8005200:	2000026c 	.word	0x2000026c
 8005204:	20000060 	.word	0x20000060
 8005208:	20000244 	.word	0x20000244
 800520c:	200002d8 	.word	0x200002d8
 8005210:	20000280 	.word	0x20000280
 8005214:	20000000 	.word	0x20000000
 8005218:	20000258 	.word	0x20000258
 800521c:	477fff00 	.word	0x477fff00
 8005220:	c77fff00 	.word	0xc77fff00
 8005224:	200003e0 	.word	0x200003e0
 8005228:	20000a34 	.word	0x20000a34
 800522c:	200000c0 	.word	0x200000c0
 8005230:	447a0000 	.word	0x447a0000
 8005234:	20000498 	.word	0x20000498
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005238:	4ba1      	ldr	r3, [pc, #644]	@ (80054c0 <update_control_loops+0x55c>)
 800523a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800523e:	4ba0      	ldr	r3, [pc, #640]	@ (80054c0 <update_control_loops+0x55c>)
 8005240:	edd3 7a07 	vldr	s15, [r3, #28]
 8005244:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005248:	4b9d      	ldr	r3, [pc, #628]	@ (80054c0 <update_control_loops+0x55c>)
 800524a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800524e:	4b9c      	ldr	r3, [pc, #624]	@ (80054c0 <update_control_loops+0x55c>)
 8005250:	edd3 7a06 	vldr	s15, [r3, #24]
 8005254:	eeb0 0a67 	vmov.f32	s0, s15
 8005258:	489a      	ldr	r0, [pc, #616]	@ (80054c4 <update_control_loops+0x560>)
 800525a:	f7fb ffdd 	bl	8001218 <PID_CONTROLLER_Compute>
 800525e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8005262:	4b99      	ldr	r3, [pc, #612]	@ (80054c8 <update_control_loops+0x564>)
 8005264:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	f7fb fc2a 	bl	8000ac4 <__aeabi_d2iz>
 8005270:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8005272:	4b95      	ldr	r3, [pc, #596]	@ (80054c8 <update_control_loops+0x564>)
 8005274:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005278:	613a      	str	r2, [r7, #16]
 800527a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800527e:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 8005280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005284:	f7fb fc1e 	bl	8000ac4 <__aeabi_d2iz>
 8005288:	4603      	mov	r3, r0
 800528a:	4619      	mov	r1, r3
 800528c:	4620      	mov	r0, r4
 800528e:	eeb0 0a48 	vmov.f32	s0, s16
 8005292:	f7fb ff5f 	bl	8001154 <PWM_Satuation>
 8005296:	ee07 0a90 	vmov	s15, r0
 800529a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800529e:	4b88      	ldr	r3, [pc, #544]	@ (80054c0 <update_control_loops+0x55c>)
 80052a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Calculate control signals for revolute axis
	revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80052a4:	4b89      	ldr	r3, [pc, #548]	@ (80054cc <update_control_loops+0x568>)
 80052a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80052aa:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80052ae:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80052b2:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 80054d0 <update_control_loops+0x56c>
 80052b6:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80054d4 <update_control_loops+0x570>
 80052ba:	eeb0 0a67 	vmov.f32	s0, s15
 80052be:	f7fc fd2f 	bl	8001d20 <mapf>
 80052c2:	eef0 7a40 	vmov.f32	s15, s0
 80052c6:	4b81      	ldr	r3, [pc, #516]	@ (80054cc <update_control_loops+0x568>)
 80052c8:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	revolute_axis.kalman_velocity = MotorKalman_Estimate(&revolute_kalman,
 80052cc:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <update_control_loops+0x568>)
 80052ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80052d2:	4b81      	ldr	r3, [pc, #516]	@ (80054d8 <update_control_loops+0x574>)
 80052d4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80052d8:	eef0 0a47 	vmov.f32	s1, s14
 80052dc:	eeb0 0a67 	vmov.f32	s0, s15
 80052e0:	487e      	ldr	r0, [pc, #504]	@ (80054dc <update_control_loops+0x578>)
 80052e2:	f7fd fceb 	bl	8002cbc <MotorKalman_Estimate>
 80052e6:	eef0 7a40 	vmov.f32	s15, s0
 80052ea:	4b78      	ldr	r3, [pc, #480]	@ (80054cc <update_control_loops+0x568>)
 80052ec:	edc3 7a07 	vstr	s15, [r3, #28]
			revolute_axis.input_voltage, revolute_encoder.rads);

	if (isnan(revolute_axis.kalman_velocity)) {
 80052f0:	4b76      	ldr	r3, [pc, #472]	@ (80054cc <update_control_loops+0x568>)
 80052f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80052f6:	eef4 7a67 	vcmp.f32	s15, s15
 80052fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fe:	d703      	bvc.n	8005308 <update_control_loops+0x3a4>
		revolute_axis.kalman_velocity = 0.0f;
 8005300:	4b72      	ldr	r3, [pc, #456]	@ (80054cc <update_control_loops+0x568>)
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	61da      	str	r2, [r3, #28]
	}

	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8005308:	4b70      	ldr	r3, [pc, #448]	@ (80054cc <update_control_loops+0x568>)
 800530a:	ed93 7a00 	vldr	s14, [r3]
 800530e:	4b74      	ldr	r3, [pc, #464]	@ (80054e0 <update_control_loops+0x57c>)
 8005310:	edd3 7a00 	vldr	s15, [r3]
 8005314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005318:	4b6c      	ldr	r3, [pc, #432]	@ (80054cc <update_control_loops+0x568>)
 800531a:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 800531e:	4b6b      	ldr	r3, [pc, #428]	@ (80054cc <update_control_loops+0x568>)
 8005320:	edd3 7a05 	vldr	s15, [r3, #20]
 8005324:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80054e4 <update_control_loops+0x580>
 8005328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005330:	dd09      	ble.n	8005346 <update_control_loops+0x3e2>
		revolute_axis.pos_error -= 2.0f * PI;
 8005332:	4b66      	ldr	r3, [pc, #408]	@ (80054cc <update_control_loops+0x568>)
 8005334:	edd3 7a05 	vldr	s15, [r3, #20]
 8005338:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80054e8 <update_control_loops+0x584>
 800533c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005340:	4b62      	ldr	r3, [pc, #392]	@ (80054cc <update_control_loops+0x568>)
 8005342:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 8005346:	4b61      	ldr	r3, [pc, #388]	@ (80054cc <update_control_loops+0x568>)
 8005348:	edd3 7a05 	vldr	s15, [r3, #20]
 800534c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80054ec <update_control_loops+0x588>
 8005350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	d509      	bpl.n	800536e <update_control_loops+0x40a>
		revolute_axis.pos_error += 2.0f * PI;
 800535a:	4b5c      	ldr	r3, [pc, #368]	@ (80054cc <update_control_loops+0x568>)
 800535c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005360:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80054e8 <update_control_loops+0x584>
 8005364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005368:	4b58      	ldr	r3, [pc, #352]	@ (80054cc <update_control_loops+0x568>)
 800536a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 800536e:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <update_control_loops+0x568>)
 8005370:	edd3 7a05 	vldr	s15, [r3, #20]
 8005374:	eeb0 0a67 	vmov.f32	s0, s15
 8005378:	485d      	ldr	r0, [pc, #372]	@ (80054f0 <update_control_loops+0x58c>)
 800537a:	f7fb ff4d 	bl	8001218 <PID_CONTROLLER_Compute>
 800537e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8005382:	4b5c      	ldr	r3, [pc, #368]	@ (80054f4 <update_control_loops+0x590>)
 8005384:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	f7fb fb9a 	bl	8000ac4 <__aeabi_d2iz>
 8005390:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8005392:	4b58      	ldr	r3, [pc, #352]	@ (80054f4 <update_control_loops+0x590>)
 8005394:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005398:	60ba      	str	r2, [r7, #8]
 800539a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800539e:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 80053a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053a4:	f7fb fb8e 	bl	8000ac4 <__aeabi_d2iz>
 80053a8:	4603      	mov	r3, r0
 80053aa:	4619      	mov	r1, r3
 80053ac:	4620      	mov	r0, r4
 80053ae:	eeb0 0a48 	vmov.f32	s0, s16
 80053b2:	f7fb fecf 	bl	8001154 <PWM_Satuation>
 80053b6:	ee07 0a90 	vmov	s15, r0
 80053ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053be:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <update_control_loops+0x568>)
 80053c0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 80053c4:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <update_control_loops+0x568>)
 80053c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d010      	beq.n	80053f0 <update_control_loops+0x48c>
		revolute_axis.vel_error = revolute_axis.command_vel
 80053ce:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <update_control_loops+0x568>)
 80053d0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <update_control_loops+0x568>)
 80053d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053de:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <update_control_loops+0x568>)
 80053e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80053e4:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80053e8:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <update_control_loops+0x568>)
 80053ea:	edc3 7a06 	vstr	s15, [r3, #24]
 80053ee:	e00a      	b.n	8005406 <update_control_loops+0x4a2>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80053f0:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <update_control_loops+0x568>)
 80053f2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80053f6:	4b35      	ldr	r3, [pc, #212]	@ (80054cc <update_control_loops+0x568>)
 80053f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80053fc:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8005400:	4b32      	ldr	r3, [pc, #200]	@ (80054cc <update_control_loops+0x568>)
 8005402:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <update_control_loops+0x568>)
 8005408:	edd3 7a06 	vldr	s15, [r3, #24]
 800540c:	eeb0 0a67 	vmov.f32	s0, s15
 8005410:	4839      	ldr	r0, [pc, #228]	@ (80054f8 <update_control_loops+0x594>)
 8005412:	f7fb ff01 	bl	8001218 <PID_CONTROLLER_Compute>
 8005416:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 800541a:	4b36      	ldr	r3, [pc, #216]	@ (80054f4 <update_control_loops+0x590>)
 800541c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f7fb fb4e 	bl	8000ac4 <__aeabi_d2iz>
 8005428:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 800542a:	4b32      	ldr	r3, [pc, #200]	@ (80054f4 <update_control_loops+0x590>)
 800542c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005430:	603a      	str	r2, [r7, #0]
 8005432:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005436:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 8005438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800543c:	f7fb fb42 	bl	8000ac4 <__aeabi_d2iz>
 8005440:	4603      	mov	r3, r0
 8005442:	4619      	mov	r1, r3
 8005444:	4620      	mov	r0, r4
 8005446:	eeb0 0a48 	vmov.f32	s0, s16
 800544a:	f7fb fe83 	bl	8001154 <PWM_Satuation>
 800544e:	ee07 0a90 	vmov	s15, r0
 8005452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005456:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <update_control_loops+0x568>)
 8005458:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Add feed-forward compensation
	if (prismatic_axis.trajectory_active) {
 800545c:	4b18      	ldr	r3, [pc, #96]	@ (80054c0 <update_control_loops+0x55c>)
 800545e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005462:	2b00      	cmp	r3, #0
 8005464:	d052      	beq.n	800550c <update_control_loops+0x5a8>
	    // Only compute FFD during active movement
	    prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
	                                                    prismatic_axis.velocity / 1000.0f);
 8005466:	4b16      	ldr	r3, [pc, #88]	@ (80054c0 <update_control_loops+0x55c>)
 8005468:	edd3 7a01 	vldr	s15, [r3, #4]
	    prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800546c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80054fc <update_control_loops+0x598>
 8005470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005474:	eeb0 0a47 	vmov.f32	s0, s14
 8005478:	4821      	ldr	r0, [pc, #132]	@ (8005500 <update_control_loops+0x59c>)
 800547a:	f7fc f9e9 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 800547e:	eef0 7a40 	vmov.f32	s15, s0
 8005482:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <update_control_loops+0x55c>)
 8005484:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	    // Only compute DFD during active movement
	    prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <update_control_loops+0x57c>)
 800548a:	ed93 7a00 	vldr	s14, [r3]
 800548e:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <update_control_loops+0x568>)
 8005490:	edd3 6a01 	vldr	s13, [r3, #4]
	                                                    normalized_position,
	                                                    revolute_axis.velocity,
	                                                    prismatic_encoder.mm / 1000.0f);
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <update_control_loops+0x5a0>)
 8005496:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	    prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800549a:	eddf 5a18 	vldr	s11, [pc, #96]	@ 80054fc <update_control_loops+0x598>
 800549e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80054a2:	eeb0 1a46 	vmov.f32	s2, s12
 80054a6:	eef0 0a66 	vmov.f32	s1, s13
 80054aa:	eeb0 0a47 	vmov.f32	s0, s14
 80054ae:	4816      	ldr	r0, [pc, #88]	@ (8005508 <update_control_loops+0x5a4>)
 80054b0:	f7fc fa61 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 80054b4:	eef0 7a40 	vmov.f32	s15, s0
 80054b8:	4b01      	ldr	r3, [pc, #4]	@ (80054c0 <update_control_loops+0x55c>)
 80054ba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80054be:	e02d      	b.n	800551c <update_control_loops+0x5b8>
 80054c0:	20000294 	.word	0x20000294
 80054c4:	200004c0 	.word	0x200004c0
 80054c8:	20000060 	.word	0x20000060
 80054cc:	200002d8 	.word	0x200002d8
 80054d0:	477fff00 	.word	0x477fff00
 80054d4:	c77fff00 	.word	0xc77fff00
 80054d8:	2000043c 	.word	0x2000043c
 80054dc:	20000da0 	.word	0x20000da0
 80054e0:	20000330 	.word	0x20000330
 80054e4:	40490fdb 	.word	0x40490fdb
 80054e8:	40c90fdb 	.word	0x40c90fdb
 80054ec:	c0490fdb 	.word	0xc0490fdb
 80054f0:	200004e8 	.word	0x200004e8
 80054f4:	20000000 	.word	0x20000000
 80054f8:	20000510 	.word	0x20000510
 80054fc:	447a0000 	.word	0x447a0000
 8005500:	20000538 	.word	0x20000538
 8005504:	200003e0 	.word	0x200003e0
 8005508:	2000053c 	.word	0x2000053c
	} else {
	    // Zero when not moving
	    prismatic_axis.ffd = 0.0f;
 800550c:	4b8b      	ldr	r3, [pc, #556]	@ (800573c <update_control_loops+0x7d8>)
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	@ 0x30
	    prismatic_axis.dfd = 0.0f;
 8005514:	4b89      	ldr	r3, [pc, #548]	@ (800573c <update_control_loops+0x7d8>)
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	float pris_backlash_compensation = prismatic_backlash_compensator(
 800551c:	4b87      	ldr	r3, [pc, #540]	@ (800573c <update_control_loops+0x7d8>)
 800551e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005522:	eeb0 0a67 	vmov.f32	s0, s15
 8005526:	f000 f9cd 	bl	80058c4 <prismatic_backlash_compensator>
 800552a:	ed87 0a07 	vstr	s0, [r7, #28]
			prismatic_axis.command_vel);

	prismatic_axis.command_pos = prismatic_axis.command_pos
 800552e:	4b83      	ldr	r3, [pc, #524]	@ (800573c <update_control_loops+0x7d8>)
 8005530:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ pris_backlash_compensation + prismatic_axis.dfd
 8005534:	edd7 7a07 	vldr	s15, [r7, #28]
 8005538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800553c:	4b7f      	ldr	r3, [pc, #508]	@ (800573c <update_control_loops+0x7d8>)
 800553e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005542:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ prismatic_axis.ffd;
 8005546:	4b7d      	ldr	r3, [pc, #500]	@ (800573c <update_control_loops+0x7d8>)
 8005548:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800554c:	ee77 7a27 	vadd.f32	s15, s14, s15
	prismatic_axis.command_pos = prismatic_axis.command_pos
 8005550:	4b7a      	ldr	r3, [pc, #488]	@ (800573c <update_control_loops+0x7d8>)
 8005552:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8005556:	4b7a      	ldr	r3, [pc, #488]	@ (8005740 <update_control_loops+0x7dc>)
 8005558:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800555c:	2b00      	cmp	r3, #0
 800555e:	d025      	beq.n	80055ac <update_control_loops+0x648>
	    // Only compute DFD during active movement
	    revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005560:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <update_control_loops+0x7e0>)
 8005562:	ed93 7a00 	vldr	s14, [r3]
	                                                  normalized_position, 0.0f,
	                                                  prismatic_encoder.mm / 1000.0f);
 8005566:	4b78      	ldr	r3, [pc, #480]	@ (8005748 <update_control_loops+0x7e4>)
 8005568:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	    revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800556c:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 800574c <update_control_loops+0x7e8>
 8005570:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005574:	eeb0 1a66 	vmov.f32	s2, s13
 8005578:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8005750 <update_control_loops+0x7ec>
 800557c:	eeb0 0a47 	vmov.f32	s0, s14
 8005580:	4874      	ldr	r0, [pc, #464]	@ (8005754 <update_control_loops+0x7f0>)
 8005582:	f7fc f87b 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005586:	eef0 7a40 	vmov.f32	s15, s0
 800558a:	4b6d      	ldr	r3, [pc, #436]	@ (8005740 <update_control_loops+0x7dc>)
 800558c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	    // Only compute FFD during active movement
	    revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005590:	4b6b      	ldr	r3, [pc, #428]	@ (8005740 <update_control_loops+0x7dc>)
 8005592:	edd3 7a01 	vldr	s15, [r3, #4]
 8005596:	eeb0 0a67 	vmov.f32	s0, s15
 800559a:	486f      	ldr	r0, [pc, #444]	@ (8005758 <update_control_loops+0x7f4>)
 800559c:	f7fb ffda 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 80055a0:	eef0 7a40 	vmov.f32	s15, s0
 80055a4:	4b66      	ldr	r3, [pc, #408]	@ (8005740 <update_control_loops+0x7dc>)
 80055a6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80055aa:	e007      	b.n	80055bc <update_control_loops+0x658>
	                                                  revolute_axis.velocity);
	} else {
	    // Zero when not moving
	    revolute_axis.dfd = 0.0f;
 80055ac:	4b64      	ldr	r3, [pc, #400]	@ (8005740 <update_control_loops+0x7dc>)
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	    revolute_axis.ffd = 0.0f;
 80055b4:	4b62      	ldr	r3, [pc, #392]	@ (8005740 <update_control_loops+0x7dc>)
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	float rev_backlash_compensation = revolute_backlash_compensator(
 80055bc:	4b60      	ldr	r3, [pc, #384]	@ (8005740 <update_control_loops+0x7dc>)
 80055be:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80055c2:	eeb0 0a67 	vmov.f32	s0, s15
 80055c6:	f000 f8db 	bl	8005780 <revolute_backlash_compensator>
 80055ca:	ed87 0a06 	vstr	s0, [r7, #24]
			revolute_axis.command_vel);

	revolute_axis.command_pos = revolute_axis.command_pos
 80055ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005740 <update_control_loops+0x7dc>)
 80055d0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ rev_backlash_compensation + revolute_axis.dfd + revolute_axis.ffd;
 80055d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80055d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055dc:	4b58      	ldr	r3, [pc, #352]	@ (8005740 <update_control_loops+0x7dc>)
 80055de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80055e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e6:	4b56      	ldr	r3, [pc, #344]	@ (8005740 <update_control_loops+0x7dc>)
 80055e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80055ec:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = revolute_axis.command_pos
 80055f0:	4b53      	ldr	r3, [pc, #332]	@ (8005740 <update_control_loops+0x7dc>)
 80055f2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055f6:	4b51      	ldr	r3, [pc, #324]	@ (800573c <update_control_loops+0x7d8>)
 80055f8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055fc:	4b57      	ldr	r3, [pc, #348]	@ (800575c <update_control_loops+0x7f8>)
 80055fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	f7fb fa5d 	bl	8000ac4 <__aeabi_d2iz>
 800560a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800560c:	4b53      	ldr	r3, [pc, #332]	@ (800575c <update_control_loops+0x7f8>)
 800560e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005612:	4615      	mov	r5, r2
 8005614:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005618:	4628      	mov	r0, r5
 800561a:	4631      	mov	r1, r6
 800561c:	f7fb fa52 	bl	8000ac4 <__aeabi_d2iz>
 8005620:	4603      	mov	r3, r0
 8005622:	4619      	mov	r1, r3
 8005624:	4620      	mov	r0, r4
 8005626:	eeb0 0a48 	vmov.f32	s0, s16
 800562a:	f7fb fd93 	bl	8001154 <PWM_Satuation>
 800562e:	ee07 0a90 	vmov	s15, r0
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	4b41      	ldr	r3, [pc, #260]	@ (800573c <update_control_loops+0x7d8>)
 8005638:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800563c:	4b40      	ldr	r3, [pc, #256]	@ (8005740 <update_control_loops+0x7dc>)
 800563e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005642:	4b47      	ldr	r3, [pc, #284]	@ (8005760 <update_control_loops+0x7fc>)
 8005644:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	f7fb fa3a 	bl	8000ac4 <__aeabi_d2iz>
 8005650:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005652:	4b43      	ldr	r3, [pc, #268]	@ (8005760 <update_control_loops+0x7fc>)
 8005654:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005658:	4692      	mov	sl, r2
 800565a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800565e:	4650      	mov	r0, sl
 8005660:	4659      	mov	r1, fp
 8005662:	f7fb fa2f 	bl	8000ac4 <__aeabi_d2iz>
 8005666:	4603      	mov	r3, r0
 8005668:	4619      	mov	r1, r3
 800566a:	4620      	mov	r0, r4
 800566c:	eeb0 0a48 	vmov.f32	s0, s16
 8005670:	f7fb fd70 	bl	8001154 <PWM_Satuation>
 8005674:	ee07 0a90 	vmov	s15, r0
 8005678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567c:	4b30      	ldr	r3, [pc, #192]	@ (8005740 <update_control_loops+0x7dc>)
 800567e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8005682:	4b2e      	ldr	r3, [pc, #184]	@ (800573c <update_control_loops+0x7d8>)
 8005684:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005688:	eef0 0a67 	vmov.f32	s1, s15
 800568c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8005764 <update_control_loops+0x800>
 8005690:	4835      	ldr	r0, [pc, #212]	@ (8005768 <update_control_loops+0x804>)
 8005692:	f7fb fe77 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005696:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <update_control_loops+0x7dc>)
 8005698:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800569c:	eef0 0a67 	vmov.f32	s1, s15
 80056a0:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8005764 <update_control_loops+0x800>
 80056a4:	4831      	ldr	r0, [pc, #196]	@ (800576c <update_control_loops+0x808>)
 80056a6:	f7fb fe6d 	bl	8001384 <MDXX_set_range>

	prismatic_axis.mm = prismatic_encoder.mm;
 80056aa:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <update_control_loops+0x7e4>)
 80056ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ae:	4a23      	ldr	r2, [pc, #140]	@ (800573c <update_control_loops+0x7d8>)
 80056b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	prismatic_axis.target = prismatic_axis.target_pos;
 80056b2:	4b22      	ldr	r3, [pc, #136]	@ (800573c <update_control_loops+0x7d8>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4a21      	ldr	r2, [pc, #132]	@ (800573c <update_control_loops+0x7d8>)
 80056b8:	6393      	str	r3, [r2, #56]	@ 0x38

	revolute_axis.deg = UnitConverter_angle(&converter_system, normalized_position, UNIT_RADIAN, UNIT_DEGREE);;
 80056ba:	4b22      	ldr	r3, [pc, #136]	@ (8005744 <update_control_loops+0x7e0>)
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	220e      	movs	r2, #14
 80056c2:	210f      	movs	r1, #15
 80056c4:	eeb0 0a67 	vmov.f32	s0, s15
 80056c8:	4829      	ldr	r0, [pc, #164]	@ (8005770 <update_control_loops+0x80c>)
 80056ca:	f7fe ff27 	bl	800451c <UnitConverter_angle>
 80056ce:	eef0 7a40 	vmov.f32	s15, s0
 80056d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <update_control_loops+0x7dc>)
 80056d4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	revolute_axis.target = 	UnitConverter_angle(&converter_system, revolute_axis.target_pos, UNIT_RADIAN, UNIT_DEGREE);
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <update_control_loops+0x7dc>)
 80056da:	edd3 7a04 	vldr	s15, [r3, #16]
 80056de:	220e      	movs	r2, #14
 80056e0:	210f      	movs	r1, #15
 80056e2:	eeb0 0a67 	vmov.f32	s0, s15
 80056e6:	4822      	ldr	r0, [pc, #136]	@ (8005770 <update_control_loops+0x80c>)
 80056e8:	f7fe ff18 	bl	800451c <UnitConverter_angle>
 80056ec:	eef0 7a40 	vmov.f32	s15, s0
 80056f0:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <update_control_loops+0x7dc>)
 80056f2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Put pen down when both trajectories are complete
	static uint32_t pen_down_timer = 0;
	if (revEva.isFinised && prisEva.isFinised) {
 80056f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005774 <update_control_loops+0x810>)
 80056f8:	7c1b      	ldrb	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <update_control_loops+0x7c2>
 80056fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005778 <update_control_loops+0x814>)
 8005700:	7c1b      	ldrb	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00f      	beq.n	8005726 <update_control_loops+0x7c2>
		pen_down_timer++;
 8005706:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <update_control_loops+0x818>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <update_control_loops+0x818>)
 800570e:	6013      	str	r3, [r2, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 8005710:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <update_control_loops+0x818>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005718:	d909      	bls.n	800572e <update_control_loops+0x7ca>
			plotter_pen_down();
 800571a:	f001 f841 	bl	80067a0 <plotter_pen_down>
			pen_down_timer = 0;
 800571e:	4b17      	ldr	r3, [pc, #92]	@ (800577c <update_control_loops+0x818>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 8005724:	e003      	b.n	800572e <update_control_loops+0x7ca>
		}
	} else {
		pen_down_timer = 0;
 8005726:	4b15      	ldr	r3, [pc, #84]	@ (800577c <update_control_loops+0x818>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
	}
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	3724      	adds	r7, #36	@ 0x24
 8005732:	46bd      	mov	sp, r7
 8005734:	ecbd 8b02 	vpop	{d8}
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	20000294 	.word	0x20000294
 8005740:	200002d8 	.word	0x200002d8
 8005744:	20000330 	.word	0x20000330
 8005748:	200003e0 	.word	0x200003e0
 800574c:	447a0000 	.word	0x447a0000
 8005750:	00000000 	.word	0x00000000
 8005754:	20000548 	.word	0x20000548
 8005758:	20000544 	.word	0x20000544
 800575c:	20000060 	.word	0x20000060
 8005760:	20000000 	.word	0x20000000
 8005764:	44fa0000 	.word	0x44fa0000
 8005768:	20000348 	.word	0x20000348
 800576c:	20000394 	.word	0x20000394
 8005770:	200007ac 	.word	0x200007ac
 8005774:	20000280 	.word	0x20000280
 8005778:	2000026c 	.word	0x2000026c
 800577c:	20000338 	.word	0x20000338

08005780 <revolute_backlash_compensator>:
/**
 * @brief Compensation for revolute axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float revolute_backlash_compensator(float cmd_vel) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 800578a:	edd7 7a01 	vldr	s15, [r7, #4]
 800578e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005796:	dd02      	ble.n	800579e <revolute_backlash_compensator+0x1e>
 8005798:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800579c:	e00a      	b.n	80057b4 <revolute_backlash_compensator+0x34>
 800579e:	edd7 7a01 	vldr	s15, [r7, #4]
 80057a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057aa:	d501      	bpl.n	80057b0 <revolute_backlash_compensator+0x30>
 80057ac:	4b3e      	ldr	r3, [pc, #248]	@ (80058a8 <revolute_backlash_compensator+0x128>)
 80057ae:	e001      	b.n	80057b4 <revolute_backlash_compensator+0x34>
 80057b0:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 80057b4:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 80057b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d102      	bne.n	80057ca <revolute_backlash_compensator+0x4a>
		current_direction = revolute_last_cmd_direction;
 80057c4:	4b39      	ldr	r3, [pc, #228]	@ (80058ac <revolute_backlash_compensator+0x12c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != revolute_last_cmd_direction
 80057ca:	4b38      	ldr	r3, [pc, #224]	@ (80058ac <revolute_backlash_compensator+0x12c>)
 80057cc:	edd3 7a00 	vldr	s15, [r3]
 80057d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80057d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80057d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057dc:	d013      	beq.n	8005806 <revolute_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 80057de:	edd7 7a05 	vldr	s15, [r7, #20]
 80057e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	d00c      	beq.n	8005806 <revolute_backlash_compensator+0x86>
		// If direction changed, update backlash state
		revolute_backlash_state = current_direction * revolute_backlash;
 80057ec:	4b30      	ldr	r3, [pc, #192]	@ (80058b0 <revolute_backlash_compensator+0x130>)
 80057ee:	ed93 7a00 	vldr	s14, [r3]
 80057f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	4b2e      	ldr	r3, [pc, #184]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 80057fc:	edc3 7a00 	vstr	s15, [r3]
		revolute_last_cmd_direction = current_direction;
 8005800:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <revolute_backlash_compensator+0x12c>)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = revolute_backlash_state * BACKLASH_COMPENSATION_GAIN;
 8005806:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 8005808:	edd3 7a00 	vldr	s15, [r3]
 800580c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80058b8 <revolute_backlash_compensator+0x138>
 8005810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005814:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 8005818:	edd7 7a01 	vldr	s15, [r7, #4]
 800581c:	eef0 7ae7 	vabs.f32	s15, s15
 8005820:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80058bc <revolute_backlash_compensator+0x13c>
 8005824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005828:	edc7 7a03 	vstr	s15, [r7, #12]
	if (revolute_backlash_state > 0.0f) {
 800582c:	4b21      	ldr	r3, [pc, #132]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 800582e:	edd3 7a00 	vldr	s15, [r3]
 8005832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	dd12      	ble.n	8005862 <revolute_backlash_compensator+0xe2>
		revolute_backlash_state = fmaxf(0.0f,
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 800583e:	ed93 7a00 	vldr	s14, [r3]
 8005842:	edd7 7a03 	vldr	s15, [r7, #12]
 8005846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584a:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80058c0 <revolute_backlash_compensator+0x140>
 800584e:	eeb0 0a67 	vmov.f32	s0, s15
 8005852:	f009 fdb5 	bl	800f3c0 <fmaxf>
 8005856:	eef0 7a40 	vmov.f32	s15, s0
 800585a:	4b16      	ldr	r3, [pc, #88]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 800585c:	edc3 7a00 	vstr	s15, [r3]
 8005860:	e019      	b.n	8005896 <revolute_backlash_compensator+0x116>
				revolute_backlash_state - backlash_decay_rate);
	} else if (revolute_backlash_state < 0.0f) {
 8005862:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 8005864:	edd3 7a00 	vldr	s15, [r3]
 8005868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	d511      	bpl.n	8005896 <revolute_backlash_compensator+0x116>
		revolute_backlash_state = fminf(0.0f,
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 8005874:	ed93 7a00 	vldr	s14, [r3]
 8005878:	edd7 7a03 	vldr	s15, [r7, #12]
 800587c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005880:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80058c0 <revolute_backlash_compensator+0x140>
 8005884:	eeb0 0a67 	vmov.f32	s0, s15
 8005888:	f009 fdb7 	bl	800f3fa <fminf>
 800588c:	eef0 7a40 	vmov.f32	s15, s0
 8005890:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <revolute_backlash_compensator+0x134>)
 8005892:	edc3 7a00 	vstr	s15, [r3]
				revolute_backlash_state + backlash_decay_rate);
	}

	return compensation;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	ee07 3a90 	vmov	s15, r3
}
 800589c:	eeb0 0a67 	vmov.f32	s0, s15
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	bf800000 	.word	0xbf800000
 80058ac:	2000031c 	.word	0x2000031c
 80058b0:	200000f0 	.word	0x200000f0
 80058b4:	20000320 	.word	0x20000320
 80058b8:	3e4ccccd 	.word	0x3e4ccccd
 80058bc:	3c23d70a 	.word	0x3c23d70a
 80058c0:	00000000 	.word	0x00000000

080058c4 <prismatic_backlash_compensator>:
/**
 * @brief Compensation for prismatic axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float prismatic_backlash_compensator(float cmd_vel) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 80058ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80058d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	dd02      	ble.n	80058e2 <prismatic_backlash_compensator+0x1e>
 80058dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80058e0:	e00a      	b.n	80058f8 <prismatic_backlash_compensator+0x34>
 80058e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ee:	d501      	bpl.n	80058f4 <prismatic_backlash_compensator+0x30>
 80058f0:	4b3e      	ldr	r3, [pc, #248]	@ (80059ec <prismatic_backlash_compensator+0x128>)
 80058f2:	e001      	b.n	80058f8 <prismatic_backlash_compensator+0x34>
 80058f4:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 80058f8:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 80058fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80058fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005906:	d102      	bne.n	800590e <prismatic_backlash_compensator+0x4a>
		current_direction = prismatic_last_cmd_direction;
 8005908:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <prismatic_backlash_compensator+0x12c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != prismatic_last_cmd_direction
 800590e:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <prismatic_backlash_compensator+0x12c>)
 8005910:	edd3 7a00 	vldr	s15, [r3]
 8005914:	ed97 7a05 	vldr	s14, [r7, #20]
 8005918:	eeb4 7a67 	vcmp.f32	s14, s15
 800591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005920:	d013      	beq.n	800594a <prismatic_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 8005922:	edd7 7a05 	vldr	s15, [r7, #20]
 8005926:	eef5 7a40 	vcmp.f32	s15, #0.0
 800592a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592e:	d00c      	beq.n	800594a <prismatic_backlash_compensator+0x86>
		// If direction changed, update backlash state
		prismatic_backlash_state = current_direction * prismatic_backlash;
 8005930:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <prismatic_backlash_compensator+0x130>)
 8005932:	ed93 7a00 	vldr	s14, [r3]
 8005936:	edd7 7a05 	vldr	s15, [r7, #20]
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	4b2e      	ldr	r3, [pc, #184]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 8005940:	edc3 7a00 	vstr	s15, [r3]
		prismatic_last_cmd_direction = current_direction;
 8005944:	4a2a      	ldr	r2, [pc, #168]	@ (80059f0 <prismatic_backlash_compensator+0x12c>)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = prismatic_backlash_state
			* PRISMATIC_BACKLASH_COMPENSATION_GAIN;
 800594a:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 800594c:	edd3 7a00 	vldr	s15, [r3]
	float compensation = prismatic_backlash_state
 8005950:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80059fc <prismatic_backlash_compensator+0x138>
 8005954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005958:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 800595c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005960:	eef0 7ae7 	vabs.f32	s15, s15
 8005964:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005a00 <prismatic_backlash_compensator+0x13c>
 8005968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (prismatic_backlash_state > 0.0f) {
 8005970:	4b21      	ldr	r3, [pc, #132]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 8005972:	edd3 7a00 	vldr	s15, [r3]
 8005976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	dd12      	ble.n	80059a6 <prismatic_backlash_compensator+0xe2>
		prismatic_backlash_state = fmaxf(0.0f,
 8005980:	4b1d      	ldr	r3, [pc, #116]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 8005982:	ed93 7a00 	vldr	s14, [r3]
 8005986:	edd7 7a03 	vldr	s15, [r7, #12]
 800598a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005a04 <prismatic_backlash_compensator+0x140>
 8005992:	eeb0 0a67 	vmov.f32	s0, s15
 8005996:	f009 fd13 	bl	800f3c0 <fmaxf>
 800599a:	eef0 7a40 	vmov.f32	s15, s0
 800599e:	4b16      	ldr	r3, [pc, #88]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 80059a0:	edc3 7a00 	vstr	s15, [r3]
 80059a4:	e019      	b.n	80059da <prismatic_backlash_compensator+0x116>
				prismatic_backlash_state - backlash_decay_rate);
	} else if (prismatic_backlash_state < 0.0f) {
 80059a6:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 80059a8:	edd3 7a00 	vldr	s15, [r3]
 80059ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b4:	d511      	bpl.n	80059da <prismatic_backlash_compensator+0x116>
		prismatic_backlash_state = fminf(0.0f,
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 80059b8:	ed93 7a00 	vldr	s14, [r3]
 80059bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80059c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005a04 <prismatic_backlash_compensator+0x140>
 80059c8:	eeb0 0a67 	vmov.f32	s0, s15
 80059cc:	f009 fd15 	bl	800f3fa <fminf>
 80059d0:	eef0 7a40 	vmov.f32	s15, s0
 80059d4:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <prismatic_backlash_compensator+0x134>)
 80059d6:	edc3 7a00 	vstr	s15, [r3]
				prismatic_backlash_state + backlash_decay_rate);
	}

	return compensation;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	ee07 3a90 	vmov	s15, r3
}
 80059e0:	eeb0 0a67 	vmov.f32	s0, s15
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	bf800000 	.word	0xbf800000
 80059f0:	20000324 	.word	0x20000324
 80059f4:	200000f4 	.word	0x200000f4
 80059f8:	20000328 	.word	0x20000328
 80059fc:	3dcccccd 	.word	0x3dcccccd
 8005a00:	3c23d70a 	.word	0x3c23d70a
 8005a04:	00000000 	.word	0x00000000

08005a08 <manual_control_mode>:

/**
 * @brief Manual control mode using joystick
 */
void manual_control_mode(void) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	// Put pen down for drawing
	plotter_pen_down();
 8005a0e:	f000 fec7 	bl	80067a0 <plotter_pen_down>

	// Stop any active trajectories
	prismatic_axis.trajectory_active = false;
 8005a12:	4b64      	ldr	r3, [pc, #400]	@ (8005ba4 <manual_control_mode+0x19c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8005a1a:	4b63      	ldr	r3, [pc, #396]	@ (8005ba8 <manual_control_mode+0x1a0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Control loop using joystick
	while (1) {
		// Update sensors
		plotter_update_sensors();
 8005a22:	f000 fdd1 	bl	80065c8 <plotter_update_sensors>

		// Process prismatic axis joystick control
		if (up_photo && joystick_x > JOYSTICK_THRESHOLD) {
 8005a26:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <manual_control_mode+0x1a4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <manual_control_mode+0x4a>
 8005a2e:	4b60      	ldr	r3, [pc, #384]	@ (8005bb0 <manual_control_mode+0x1a8>)
 8005a30:	edd3 7a00 	vldr	s15, [r3]
 8005a34:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005bb4 <manual_control_mode+0x1ac>
 8005a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	dd07      	ble.n	8005a52 <manual_control_mode+0x4a>
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8005a42:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8005bb8 <manual_control_mode+0x1b0>
 8005a46:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8005bbc <manual_control_mode+0x1b4>
 8005a4a:	485d      	ldr	r0, [pc, #372]	@ (8005bc0 <manual_control_mode+0x1b8>)
 8005a4c:	f7fb fc9a 	bl	8001384 <MDXX_set_range>
 8005a50:	e040      	b.n	8005ad4 <manual_control_mode+0xcc>
		} else if (low_photo && joystick_x < -JOYSTICK_THRESHOLD) {
 8005a52:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc4 <manual_control_mode+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d011      	beq.n	8005a7e <manual_control_mode+0x76>
 8005a5a:	4b55      	ldr	r3, [pc, #340]	@ (8005bb0 <manual_control_mode+0x1a8>)
 8005a5c:	edd3 7a00 	vldr	s15, [r3]
 8005a60:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005bc8 <manual_control_mode+0x1c0>
 8005a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6c:	d507      	bpl.n	8005a7e <manual_control_mode+0x76>
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8005a6e:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8005bb8 <manual_control_mode+0x1b0>
 8005a72:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8005bbc <manual_control_mode+0x1b4>
 8005a76:	4852      	ldr	r0, [pc, #328]	@ (8005bc0 <manual_control_mode+0x1b8>)
 8005a78:	f7fb fc84 	bl	8001384 <MDXX_set_range>
 8005a7c:	e02a      	b.n	8005ad4 <manual_control_mode+0xcc>
		} else if (joystick_x > JOYSTICK_THRESHOLD) {
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb0 <manual_control_mode+0x1a8>)
 8005a80:	edd3 7a00 	vldr	s15, [r3]
 8005a84:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005bb4 <manual_control_mode+0x1ac>
 8005a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a90:	dd07      	ble.n	8005aa2 <manual_control_mode+0x9a>
			MDXX_set_range(&prismatic_motor, 2000, -12000);
 8005a92:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8005bcc <manual_control_mode+0x1c4>
 8005a96:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8005bbc <manual_control_mode+0x1b4>
 8005a9a:	4849      	ldr	r0, [pc, #292]	@ (8005bc0 <manual_control_mode+0x1b8>)
 8005a9c:	f7fb fc72 	bl	8001384 <MDXX_set_range>
 8005aa0:	e018      	b.n	8005ad4 <manual_control_mode+0xcc>
		} else if (joystick_x < -JOYSTICK_THRESHOLD) {
 8005aa2:	4b43      	ldr	r3, [pc, #268]	@ (8005bb0 <manual_control_mode+0x1a8>)
 8005aa4:	edd3 7a00 	vldr	s15, [r3]
 8005aa8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005bc8 <manual_control_mode+0x1c0>
 8005aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	d507      	bpl.n	8005ac6 <manual_control_mode+0xbe>
			MDXX_set_range(&prismatic_motor, 2000, 12000);
 8005ab6:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8005bd0 <manual_control_mode+0x1c8>
 8005aba:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8005bbc <manual_control_mode+0x1b4>
 8005abe:	4840      	ldr	r0, [pc, #256]	@ (8005bc0 <manual_control_mode+0x1b8>)
 8005ac0:	f7fb fc60 	bl	8001384 <MDXX_set_range>
 8005ac4:	e006      	b.n	8005ad4 <manual_control_mode+0xcc>
		} else {
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8005ac6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8005bb8 <manual_control_mode+0x1b0>
 8005aca:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8005bbc <manual_control_mode+0x1b4>
 8005ace:	483c      	ldr	r0, [pc, #240]	@ (8005bc0 <manual_control_mode+0x1b8>)
 8005ad0:	f7fb fc58 	bl	8001384 <MDXX_set_range>
		}

		// Process revolute axis joystick control
		float revolute_deg = UnitConverter_angle(&converter_system,
 8005ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd4 <manual_control_mode+0x1cc>)
 8005ad6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ada:	220e      	movs	r2, #14
 8005adc:	210f      	movs	r1, #15
 8005ade:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae2:	483d      	ldr	r0, [pc, #244]	@ (8005bd8 <manual_control_mode+0x1d0>)
 8005ae4:	f7fe fd1a 	bl	800451c <UnitConverter_angle>
 8005ae8:	ed87 0a01 	vstr	s0, [r7, #4]
				revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

		if ((revolute_deg > 175.0f && joystick_y > JOYSTICK_THRESHOLD)
 8005aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8005af0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005bdc <manual_control_mode+0x1d4>
 8005af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	dd09      	ble.n	8005b12 <manual_control_mode+0x10a>
 8005afe:	4b38      	ldr	r3, [pc, #224]	@ (8005be0 <manual_control_mode+0x1d8>)
 8005b00:	edd3 7a00 	vldr	s15, [r3]
 8005b04:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005bb4 <manual_control_mode+0x1ac>
 8005b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b10:	dc12      	bgt.n	8005b38 <manual_control_mode+0x130>
				|| (revolute_deg < -175.0f && joystick_y < -JOYSTICK_THRESHOLD)) {
 8005b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b16:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005be4 <manual_control_mode+0x1dc>
 8005b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	d511      	bpl.n	8005b48 <manual_control_mode+0x140>
 8005b24:	4b2e      	ldr	r3, [pc, #184]	@ (8005be0 <manual_control_mode+0x1d8>)
 8005b26:	edd3 7a00 	vldr	s15, [r3]
 8005b2a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005bc8 <manual_control_mode+0x1c0>
 8005b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d507      	bpl.n	8005b48 <manual_control_mode+0x140>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8005b38:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8005bb8 <manual_control_mode+0x1b0>
 8005b3c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8005bbc <manual_control_mode+0x1b4>
 8005b40:	4829      	ldr	r0, [pc, #164]	@ (8005be8 <manual_control_mode+0x1e0>)
 8005b42:	f7fb fc1f 	bl	8001384 <MDXX_set_range>
 8005b46:	e02a      	b.n	8005b9e <manual_control_mode+0x196>
		} else if (joystick_y > JOYSTICK_THRESHOLD) {
 8005b48:	4b25      	ldr	r3, [pc, #148]	@ (8005be0 <manual_control_mode+0x1d8>)
 8005b4a:	edd3 7a00 	vldr	s15, [r3]
 8005b4e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005bb4 <manual_control_mode+0x1ac>
 8005b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5a:	dd07      	ble.n	8005b6c <manual_control_mode+0x164>
			MDXX_set_range(&revolute_motor, 2000, 25000);
 8005b5c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8005bec <manual_control_mode+0x1e4>
 8005b60:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8005bbc <manual_control_mode+0x1b4>
 8005b64:	4820      	ldr	r0, [pc, #128]	@ (8005be8 <manual_control_mode+0x1e0>)
 8005b66:	f7fb fc0d 	bl	8001384 <MDXX_set_range>
 8005b6a:	e018      	b.n	8005b9e <manual_control_mode+0x196>
		} else if (joystick_y < -JOYSTICK_THRESHOLD) {
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <manual_control_mode+0x1d8>)
 8005b6e:	edd3 7a00 	vldr	s15, [r3]
 8005b72:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005bc8 <manual_control_mode+0x1c0>
 8005b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d507      	bpl.n	8005b90 <manual_control_mode+0x188>
			MDXX_set_range(&revolute_motor, 2000, -25000);
 8005b80:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8005bf0 <manual_control_mode+0x1e8>
 8005b84:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005bbc <manual_control_mode+0x1b4>
 8005b88:	4817      	ldr	r0, [pc, #92]	@ (8005be8 <manual_control_mode+0x1e0>)
 8005b8a:	f7fb fbfb 	bl	8001384 <MDXX_set_range>
 8005b8e:	e006      	b.n	8005b9e <manual_control_mode+0x196>
		} else {
			MDXX_set_range(&revolute_motor, 2000, 0);
 8005b90:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8005bb8 <manual_control_mode+0x1b0>
 8005b94:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8005bbc <manual_control_mode+0x1b4>
 8005b98:	4813      	ldr	r0, [pc, #76]	@ (8005be8 <manual_control_mode+0x1e0>)
 8005b9a:	f7fb fbf3 	bl	8001384 <MDXX_set_range>
		}

		// Exit condition - check if button is still pressed
		plotter_update_sensors();
 8005b9e:	f000 fd13 	bl	80065c8 <plotter_update_sensors>
	while (1) {
 8005ba2:	e73e      	b.n	8005a22 <manual_control_mode+0x1a>
 8005ba4:	20000294 	.word	0x20000294
 8005ba8:	200002d8 	.word	0x200002d8
 8005bac:	2000184c 	.word	0x2000184c
 8005bb0:	2000183c 	.word	0x2000183c
 8005bb4:	42200000 	.word	0x42200000
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	44fa0000 	.word	0x44fa0000
 8005bc0:	20000348 	.word	0x20000348
 8005bc4:	20001850 	.word	0x20001850
 8005bc8:	c2200000 	.word	0xc2200000
 8005bcc:	c63b8000 	.word	0xc63b8000
 8005bd0:	463b8000 	.word	0x463b8000
 8005bd4:	2000043c 	.word	0x2000043c
 8005bd8:	200007ac 	.word	0x200007ac
 8005bdc:	432f0000 	.word	0x432f0000
 8005be0:	20001840 	.word	0x20001840
 8005be4:	c32f0000 	.word	0xc32f0000
 8005be8:	20000394 	.word	0x20000394
 8005bec:	46c35000 	.word	0x46c35000
 8005bf0:	c6c35000 	.word	0xc6c35000

08005bf4 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin Pin that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d105      	bne.n	8005c10 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_GPIO_EXTI_Callback+0x28>)
 8005c06:	2205      	movs	r2, #5
 8005c08:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8005c0a:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
	}
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	200000f8 	.word	0x200000f8
 8005c20:	200000fb 	.word	0x200000fb

08005c24 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART receive complete callback
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer period elapsed callback - main control loop
 * @param htim Timer handle
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a6a      	ldr	r2, [pc, #424]	@ (8005dec <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	f040 80cc 	bne.w	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		// Update sensor readings
		plotter_update_sensors();
 8005c4a:	f000 fcbd 	bl	80065c8 <plotter_update_sensors>

//		 prismatic_axis.position = SIGNAL_generate(&sine_sg_cascade, 1e-3);

		// Update encoder readings
		QEI_get_diff_count(&prismatic_encoder);
 8005c4e:	4868      	ldr	r0, [pc, #416]	@ (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005c50:	f7fd fdfa 	bl	8003848 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8005c54:	4866      	ldr	r0, [pc, #408]	@ (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005c56:	f7fd fee3 	bl	8003a20 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8005c5a:	4866      	ldr	r0, [pc, #408]	@ (8005df4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8005c5c:	f7fd fdf4 	bl	8003848 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8005c60:	4864      	ldr	r0, [pc, #400]	@ (8005df4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8005c62:	f7fd fedd 	bl	8003a20 <QEI_compute_data>

        // Handle different system states
        if (homing_state != HOMING_IDLE) {
 8005c66:	4b64      	ldr	r3, [pc, #400]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80b1 	beq.w	8005dd2 <HAL_TIM_PeriodElapsedCallback+0x19a>
            // Homing state machine
            switch (homing_state) {
 8005c70:	4b61      	ldr	r3, [pc, #388]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	f200 80a7 	bhi.w	8005dca <HAL_TIM_PeriodElapsedCallback+0x192>
 8005c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cc3 	.word	0x08005cc3
 8005c8c:	08005d53 	.word	0x08005d53
 8005c90:	08005d7f 	.word	0x08005d7f
                case HOMING_PRIS_DOWN:
                    // Move prismatic motor down to lower limit
                    MDXX_set_range(&prismatic_motor, 2000, 10000);
 8005c94:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8005dfc <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8005c98:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005c9c:	4859      	ldr	r0, [pc, #356]	@ (8005e04 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005c9e:	f7fb fb71 	bl	8001384 <MDXX_set_range>

                    if (low_photo) {
 8005ca2:	4b59      	ldr	r3, [pc, #356]	@ (8005e08 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8096 	beq.w	8005dd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
                        MDXX_set_range(&prismatic_motor, 2000, 0);
 8005cac:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8005e0c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8005cb0:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005cb4:	4853      	ldr	r0, [pc, #332]	@ (8005e04 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005cb6:	f7fb fb65 	bl	8001384 <MDXX_set_range>
                        homing_state = HOMING_REV_RESET;
 8005cba:	4b4f      	ldr	r3, [pc, #316]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8005cc0:	e08a      	b.n	8005dd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
                    static int prox_count = 0;
                    static bool prox_previous = false;
                    static bool initialized = false;

                    // Initialize on first entry
                    if (!initialized) {
 8005cc2:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <HAL_TIM_PeriodElapsedCallback+0xb6>
                        prox_previous = prox;
 8005cd0:	4b50      	ldr	r3, [pc, #320]	@ (8005e14 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	4b4e      	ldr	r3, [pc, #312]	@ (8005e18 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8005ce0:	701a      	strb	r2, [r3, #0]
                        prox_count = 0;
 8005ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8005e1c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
                        initialized = true;
 8005ce8:	4b49      	ldr	r3, [pc, #292]	@ (8005e10 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
                    }

                    // Move revolute motor clockwise at constant speed
                    MDXX_set_range(&revolute_motor, 2000, 12000);
 8005cee:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005e20 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8005cf2:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005cf6:	484b      	ldr	r0, [pc, #300]	@ (8005e24 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8005cf8:	f7fb fb44 	bl	8001384 <MDXX_set_range>

                    // Count proximity sensor triggers (rising edge detection)
                    if (prox && !prox_previous) {
 8005cfc:	4b45      	ldr	r3, [pc, #276]	@ (8005e14 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <HAL_TIM_PeriodElapsedCallback+0xe4>
 8005d04:	4b44      	ldr	r3, [pc, #272]	@ (8005e18 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f083 0301 	eor.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_PeriodElapsedCallback+0xe4>
                        prox_count++;
 8005d12:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a40      	ldr	r2, [pc, #256]	@ (8005e1c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005d1a:	6013      	str	r3, [r2, #0]
                    }
                    prox_previous = prox;
 8005d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e14 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e18 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8005d2c:	701a      	strb	r2, [r3, #0]

                    // After reaching home, stop motor
                    if (prox_count >= 1) {
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e1c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dd52      	ble.n	8005ddc <HAL_TIM_PeriodElapsedCallback+0x1a4>
                        MDXX_set_range(&revolute_motor, 2000, 0);
 8005d36:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8005e0c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8005d3a:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005d3e:	4839      	ldr	r0, [pc, #228]	@ (8005e24 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8005d40:	f7fb fb20 	bl	8001384 <MDXX_set_range>
                        initialized = false;  // Reset for next time
 8005d44:	4b32      	ldr	r3, [pc, #200]	@ (8005e10 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
                        homing_state = HOMING_PRIS_UP;
 8005d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8005d50:	e044      	b.n	8005ddc <HAL_TIM_PeriodElapsedCallback+0x1a4>
                }

                case HOMING_PRIS_UP:
                    // Move prismatic motor up to upper limit
                    MDXX_set_range(&prismatic_motor, 2000, -10000);
 8005d52:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8005e28 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8005d56:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005d5a:	482a      	ldr	r0, [pc, #168]	@ (8005e04 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005d5c:	f7fb fb12 	bl	8001384 <MDXX_set_range>

                    if (up_photo) {
 8005d60:	4b32      	ldr	r3, [pc, #200]	@ (8005e2c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d03b      	beq.n	8005de0 <HAL_TIM_PeriodElapsedCallback+0x1a8>
                        MDXX_set_range(&prismatic_motor, 2000, 0);
 8005d68:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8005e0c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8005d6c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8005e00 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8005d70:	4824      	ldr	r0, [pc, #144]	@ (8005e04 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005d72:	f7fb fb07 	bl	8001384 <MDXX_set_range>
                        homing_state = HOMING_COMPLETE;
 8005d76:	4b20      	ldr	r3, [pc, #128]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005d78:	2204      	movs	r2, #4
 8005d7a:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8005d7c:	e030      	b.n	8005de0 <HAL_TIM_PeriodElapsedCallback+0x1a8>

                case HOMING_COMPLETE:
                    plotter_reset();
 8005d7e:	f000 fbeb 	bl	8006558 <plotter_reset>

                    // Reset ALL control variables
                    revolute_axis.pos_error = 0.0f;
 8005d82:	4b2b      	ldr	r3, [pc, #172]	@ (8005e30 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	615a      	str	r2, [r3, #20]
                    revolute_axis.vel_error = 0.0f;
 8005d8a:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
                    prismatic_axis.pos_error = 0.0f;
 8005d92:	4b28      	ldr	r3, [pc, #160]	@ (8005e34 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	615a      	str	r2, [r3, #20]
                    prismatic_axis.vel_error = 0.0f;
 8005d9a:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]

                    // Reset position setpoints to current position
                    prismatic_axis.position = prismatic_encoder.mm;
 8005da2:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da6:	4a23      	ldr	r2, [pc, #140]	@ (8005e34 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005da8:	6013      	str	r3, [r2, #0]
                    revolute_axis.position = revolute_encoder.rads;
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005db0:	6013      	str	r3, [r2, #0]

                    // Reset trajectories and state
                    prismatic_axis.trajectory_active = false;
 8005db2:	4b20      	ldr	r3, [pc, #128]	@ (8005e34 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    revolute_axis.trajectory_active = false;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    homing_state = HOMING_IDLE;
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
                    break;
 8005dc8:	e00b      	b.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>

                default:
                    // Unexpected state - reset to idle
                    homing_state = HOMING_IDLE;
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
                    break;
 8005dd0:	e007      	b.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
            }
        } else {
            // Normal operation - update control loops
            update_control_loops();
 8005dd2:	f7ff f8c7 	bl	8004f64 <update_control_loops>
        }
	}
}
 8005dd6:	e004      	b.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
                    break;
 8005dd8:	bf00      	nop
 8005dda:	e002      	b.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
                    break;
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
                    break;
 8005de0:	bf00      	nop
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	2000193c 	.word	0x2000193c
 8005df0:	200003e0 	.word	0x200003e0
 8005df4:	2000043c 	.word	0x2000043c
 8005df8:	2000032c 	.word	0x2000032c
 8005dfc:	461c4000 	.word	0x461c4000
 8005e00:	44fa0000 	.word	0x44fa0000
 8005e04:	20000348 	.word	0x20000348
 8005e08:	20001850 	.word	0x20001850
 8005e0c:	00000000 	.word	0x00000000
 8005e10:	2000033c 	.word	0x2000033c
 8005e14:	20001844 	.word	0x20001844
 8005e18:	2000033d 	.word	0x2000033d
 8005e1c:	20000340 	.word	0x20000340
 8005e20:	463b8000 	.word	0x463b8000
 8005e24:	20000394 	.word	0x20000394
 8005e28:	c61c4000 	.word	0xc61c4000
 8005e2c:	2000184c 	.word	0x2000184c
 8005e30:	200002d8 	.word	0x200002d8
 8005e34:	20000294 	.word	0x20000294

08005e38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e3c:	b672      	cpsid	i
}
 8005e3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <Error_Handler+0x8>
 8005e44:	0000      	movs	r0, r0
	...

08005e48 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8005e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	ed2d 8b02 	vpush	{d8}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005e54:	4bc8      	ldr	r3, [pc, #800]	@ (8006178 <plotter_begin+0x330>)
 8005e56:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8005e5a:	4bc8      	ldr	r3, [pc, #800]	@ (800617c <plotter_begin+0x334>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa fb3e 	bl	80004e0 <__aeabi_f2d>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa fb90 	bl	8000590 <__aeabi_dmul>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	4bc0      	ldr	r3, [pc, #768]	@ (8006180 <plotter_begin+0x338>)
 8005e7e:	f7fa fb87 	bl	8000590 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005e86:	49bc      	ldr	r1, [pc, #752]	@ (8006178 <plotter_begin+0x330>)
 8005e88:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8005e8c:	4bba      	ldr	r3, [pc, #744]	@ (8006178 <plotter_begin+0x330>)
 8005e8e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	4bbb      	ldr	r3, [pc, #748]	@ (8006184 <plotter_begin+0x33c>)
 8005e98:	f7fa fb7a 	bl	8000590 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	49b5      	ldr	r1, [pc, #724]	@ (8006178 <plotter_begin+0x330>)
 8005ea2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.3;
 8005ea6:	4bb8      	ldr	r3, [pc, #736]	@ (8006188 <plotter_begin+0x340>)
 8005ea8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005eac:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006160 <plotter_begin+0x318>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fb6d 	bl	8000590 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	a3aa      	add	r3, pc, #680	@ (adr r3, 8006168 <plotter_begin+0x320>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa fb64 	bl	8000590 <__aeabi_dmul>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	49ae      	ldr	r1, [pc, #696]	@ (8006188 <plotter_begin+0x340>)
 8005ece:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8005ed2:	4bad      	ldr	r3, [pc, #692]	@ (8006188 <plotter_begin+0x340>)
 8005ed4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005ed8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006170 <plotter_begin+0x328>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb57 	bl	8000590 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	49a8      	ldr	r1, [pc, #672]	@ (8006188 <plotter_begin+0x340>)
 8005ee8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8005eec:	2100      	movs	r1, #0
 8005eee:	48a7      	ldr	r0, [pc, #668]	@ (800618c <plotter_begin+0x344>)
 8005ef0:	f000 fc66 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005ef4:	eddf 2aa6 	vldr	s5, [pc, #664]	@ 8006190 <plotter_begin+0x348>
 8005ef8:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 8006194 <plotter_begin+0x34c>
 8005efc:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 80061cc <plotter_begin+0x384>
 8005f00:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 80061cc <plotter_begin+0x384>
 8005f04:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8006198 <plotter_begin+0x350>
 8005f08:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8006190 <plotter_begin+0x348>
 8005f0c:	489f      	ldr	r0, [pc, #636]	@ (800618c <plotter_begin+0x344>)
 8005f0e:	f000 fcb5 	bl	800687c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8005f12:	2102      	movs	r1, #2
 8005f14:	48a1      	ldr	r0, [pc, #644]	@ (800619c <plotter_begin+0x354>)
 8005f16:	f000 fc53 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8005f1a:	ed9f 3a9d 	vldr	s6, [pc, #628]	@ 8006190 <plotter_begin+0x348>
 8005f1e:	eddf 2a9d 	vldr	s5, [pc, #628]	@ 8006194 <plotter_begin+0x34c>
 8005f22:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 80061cc <plotter_begin+0x384>
 8005f26:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 80061cc <plotter_begin+0x384>
 8005f2a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005f2e:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8006198 <plotter_begin+0x350>
 8005f32:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8006190 <plotter_begin+0x348>
 8005f36:	4899      	ldr	r0, [pc, #612]	@ (800619c <plotter_begin+0x354>)
 8005f38:	f000 fccb 	bl	80068d2 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4898      	ldr	r0, [pc, #608]	@ (80061a0 <plotter_begin+0x358>)
 8005f40:	f000 fc3e 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8005f44:	eddf 2a97 	vldr	s5, [pc, #604]	@ 80061a4 <plotter_begin+0x35c>
 8005f48:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 80061a8 <plotter_begin+0x360>
 8005f4c:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 80061cc <plotter_begin+0x384>
 8005f50:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 80061cc <plotter_begin+0x384>
 8005f54:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8006198 <plotter_begin+0x350>
 8005f58:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80061a4 <plotter_begin+0x35c>
 8005f5c:	4890      	ldr	r0, [pc, #576]	@ (80061a0 <plotter_begin+0x358>)
 8005f5e:	f000 fc8d 	bl	800687c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8005f62:	2102      	movs	r1, #2
 8005f64:	4891      	ldr	r0, [pc, #580]	@ (80061ac <plotter_begin+0x364>)
 8005f66:	f000 fc2b 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8005f6a:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8005f6e:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8005f72:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 80061cc <plotter_begin+0x384>
 8005f76:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80061cc <plotter_begin+0x384>
 8005f7a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005f7e:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8006198 <plotter_begin+0x350>
 8005f82:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005f86:	4889      	ldr	r0, [pc, #548]	@ (80061ac <plotter_begin+0x364>)
 8005f88:	f000 fca3 	bl	80068d2 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4888      	ldr	r0, [pc, #544]	@ (80061b0 <plotter_begin+0x368>)
 8005f90:	f000 fc16 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005f94:	4b78      	ldr	r3, [pc, #480]	@ (8006178 <plotter_begin+0x330>)
 8005f96:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f7fa fdd9 	bl	8000b54 <__aeabi_d2f>
 8005fa2:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005fa4:	4b74      	ldr	r3, [pc, #464]	@ (8006178 <plotter_begin+0x330>)
 8005fa6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	f7fa fdd1 	bl	8000b54 <__aeabi_d2f>
 8005fb2:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8005fbc:	4b6e      	ldr	r3, [pc, #440]	@ (8006178 <plotter_begin+0x330>)
 8005fbe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f7fa fdc5 	bl	8000b54 <__aeabi_d2f>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	ee02 3a90 	vmov	s5, r3
 8005fd0:	eeb0 2a48 	vmov.f32	s4, s16
 8005fd4:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 80061cc <plotter_begin+0x384>
 8005fd8:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 80061cc <plotter_begin+0x384>
 8005fdc:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8006198 <plotter_begin+0x350>
 8005fe0:	ee00 4a10 	vmov	s0, r4
 8005fe4:	4872      	ldr	r0, [pc, #456]	@ (80061b0 <plotter_begin+0x368>)
 8005fe6:	f000 fc49 	bl	800687c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8005fea:	2102      	movs	r1, #2
 8005fec:	4871      	ldr	r0, [pc, #452]	@ (80061b4 <plotter_begin+0x36c>)
 8005fee:	f000 fbe7 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005ff2:	4b61      	ldr	r3, [pc, #388]	@ (8006178 <plotter_begin+0x330>)
 8005ff4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	f7fa fdaa 	bl	8000b54 <__aeabi_d2f>
 8006000:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8006002:	4b5d      	ldr	r3, [pc, #372]	@ (8006178 <plotter_begin+0x330>)
 8006004:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	f7fa fda2 	bl	8000b54 <__aeabi_d2f>
 8006010:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800601a:	4b57      	ldr	r3, [pc, #348]	@ (8006178 <plotter_begin+0x330>)
 800601c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	f7fa fd96 	bl	8000b54 <__aeabi_d2f>
 8006028:	4603      	mov	r3, r0
 800602a:	ee03 3a10 	vmov	s6, r3
 800602e:	eef0 2a48 	vmov.f32	s5, s16
 8006032:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 80061cc <plotter_begin+0x384>
 8006036:	eddf 1a65 	vldr	s3, [pc, #404]	@ 80061cc <plotter_begin+0x384>
 800603a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800603e:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8006198 <plotter_begin+0x350>
 8006042:	ee00 4a10 	vmov	s0, r4
 8006046:	485b      	ldr	r0, [pc, #364]	@ (80061b4 <plotter_begin+0x36c>)
 8006048:	f000 fc43 	bl	80068d2 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 800604c:	2100      	movs	r1, #0
 800604e:	485a      	ldr	r0, [pc, #360]	@ (80061b8 <plotter_begin+0x370>)
 8006050:	f000 fbb6 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006054:	4b4c      	ldr	r3, [pc, #304]	@ (8006188 <plotter_begin+0x340>)
 8006056:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800605a:	4610      	mov	r0, r2
 800605c:	4619      	mov	r1, r3
 800605e:	f7fa fd79 	bl	8000b54 <__aeabi_d2f>
 8006062:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8006064:	4b48      	ldr	r3, [pc, #288]	@ (8006188 <plotter_begin+0x340>)
 8006066:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	f7fa fd71 	bl	8000b54 <__aeabi_d2f>
 8006072:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 800607c:	4b42      	ldr	r3, [pc, #264]	@ (8006188 <plotter_begin+0x340>)
 800607e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f7fa fd65 	bl	8000b54 <__aeabi_d2f>
 800608a:	4603      	mov	r3, r0
 800608c:	ee02 3a90 	vmov	s5, r3
 8006090:	eeb0 2a48 	vmov.f32	s4, s16
 8006094:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 80061cc <plotter_begin+0x384>
 8006098:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 80061cc <plotter_begin+0x384>
 800609c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8006198 <plotter_begin+0x350>
 80060a0:	ee00 4a10 	vmov	s0, r4
 80060a4:	4844      	ldr	r0, [pc, #272]	@ (80061b8 <plotter_begin+0x370>)
 80060a6:	f000 fbe9 	bl	800687c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80060aa:	2102      	movs	r1, #2
 80060ac:	4843      	ldr	r0, [pc, #268]	@ (80061bc <plotter_begin+0x374>)
 80060ae:	f000 fb87 	bl	80067c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80060b2:	4b35      	ldr	r3, [pc, #212]	@ (8006188 <plotter_begin+0x340>)
 80060b4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	f7fa fd4a 	bl	8000b54 <__aeabi_d2f>
 80060c0:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <plotter_begin+0x340>)
 80060c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fa fd42 	bl	8000b54 <__aeabi_d2f>
 80060d0:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80060da:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <plotter_begin+0x340>)
 80060dc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7fa fd36 	bl	8000b54 <__aeabi_d2f>
 80060e8:	4603      	mov	r3, r0
 80060ea:	ee03 3a10 	vmov	s6, r3
 80060ee:	eef0 2a48 	vmov.f32	s5, s16
 80060f2:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 80061cc <plotter_begin+0x384>
 80060f6:	eddf 1a35 	vldr	s3, [pc, #212]	@ 80061cc <plotter_begin+0x384>
 80060fa:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80060fe:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8006198 <plotter_begin+0x350>
 8006102:	ee00 4a10 	vmov	s0, r4
 8006106:	482d      	ldr	r0, [pc, #180]	@ (80061bc <plotter_begin+0x374>)
 8006108:	f000 fbe3 	bl	80068d2 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 800610c:	482c      	ldr	r0, [pc, #176]	@ (80061c0 <plotter_begin+0x378>)
 800610e:	f7fe f96f 	bl	80043f0 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8006112:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <plotter_begin+0x334>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa f9e2 	bl	80004e0 <__aeabi_f2d>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	f7fa f880 	bl	8000224 <__adddf3>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <plotter_begin+0x338>)
 8006132:	f7fa fa2d 	bl	8000590 <__aeabi_dmul>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	f7fa fd09 	bl	8000b54 <__aeabi_d2f>
 8006142:	4603      	mov	r3, r0
 8006144:	ee00 3a90 	vmov	s1, r3
 8006148:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800614c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006154:	491b      	ldr	r1, [pc, #108]	@ (80061c4 <plotter_begin+0x37c>)
 8006156:	481c      	ldr	r0, [pc, #112]	@ (80061c8 <plotter_begin+0x380>)
 8006158:	f7fd fb04 	bl	8003764 <QEI_init>
 800615c:	e038      	b.n	80061d0 <plotter_begin+0x388>
 800615e:	bf00      	nop
 8006160:	55555555 	.word	0x55555555
 8006164:	3fe55555 	.word	0x3fe55555
 8006168:	33333333 	.word	0x33333333
 800616c:	3fd33333 	.word	0x3fd33333
 8006170:	9999999a 	.word	0x9999999a
 8006174:	3fd99999 	.word	0x3fd99999
 8006178:	20000060 	.word	0x20000060
 800617c:	200000c0 	.word	0x200000c0
 8006180:	408f4000 	.word	0x408f4000
 8006184:	3fe00000 	.word	0x3fe00000
 8006188:	20000000 	.word	0x20000000
 800618c:	2000058c 	.word	0x2000058c
 8006190:	477fff00 	.word	0x477fff00
 8006194:	c77fff00 	.word	0xc77fff00
 8006198:	3dcccccd 	.word	0x3dcccccd
 800619c:	200005d0 	.word	0x200005d0
 80061a0:	20000614 	.word	0x20000614
 80061a4:	43480000 	.word	0x43480000
 80061a8:	c3480000 	.word	0xc3480000
 80061ac:	20000658 	.word	0x20000658
 80061b0:	2000069c 	.word	0x2000069c
 80061b4:	200006e0 	.word	0x200006e0
 80061b8:	20000724 	.word	0x20000724
 80061bc:	20000768 	.word	0x20000768
 80061c0:	200007ac 	.word	0x200007ac
 80061c4:	20001ba0 	.word	0x20001ba0
 80061c8:	200003e0 	.word	0x200003e0
 80061cc:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80061d0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80061cc <plotter_begin+0x384>
 80061d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80061d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80061dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061e0:	49ae      	ldr	r1, [pc, #696]	@ (800649c <plotter_begin+0x654>)
 80061e2:	48af      	ldr	r0, [pc, #700]	@ (80064a0 <plotter_begin+0x658>)
 80061e4:	f7fd fabe 	bl	8003764 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80061e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061f2:	2204      	movs	r2, #4
 80061f4:	49ab      	ldr	r1, [pc, #684]	@ (80064a4 <plotter_begin+0x65c>)
 80061f6:	48ac      	ldr	r0, [pc, #688]	@ (80064a8 <plotter_begin+0x660>)
 80061f8:	f7fb f8a0 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80061fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4baa      	ldr	r3, [pc, #680]	@ (80064ac <plotter_begin+0x664>)
 8006204:	2200      	movs	r2, #0
 8006206:	49a7      	ldr	r1, [pc, #668]	@ (80064a4 <plotter_begin+0x65c>)
 8006208:	48a9      	ldr	r0, [pc, #676]	@ (80064b0 <plotter_begin+0x668>)
 800620a:	f7fb f897 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800620e:	220c      	movs	r2, #12
 8006210:	49a8      	ldr	r1, [pc, #672]	@ (80064b4 <plotter_begin+0x66c>)
 8006212:	48a9      	ldr	r0, [pc, #676]	@ (80064b8 <plotter_begin+0x670>)
 8006214:	f7fd f878 	bl	8003308 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006218:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 80064bc <plotter_begin+0x674>
 800621c:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 80064c0 <plotter_begin+0x678>
 8006220:	48a1      	ldr	r0, [pc, #644]	@ (80064a8 <plotter_begin+0x660>)
 8006222:	f7fb f8af 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006226:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 80064bc <plotter_begin+0x674>
 800622a:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 80064c0 <plotter_begin+0x678>
 800622e:	48a0      	ldr	r0, [pc, #640]	@ (80064b0 <plotter_begin+0x668>)
 8006230:	f7fb f8a8 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
			ZGX45RGG_400RPM_Constant.sd_max);
 8006234:	4ba3      	ldr	r3, [pc, #652]	@ (80064c4 <plotter_begin+0x67c>)
 8006236:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	f7fa fc89 	bl	8000b54 <__aeabi_d2f>
 8006242:	4603      	mov	r3, r0
 8006244:	ee01 3a90 	vmov	s3, r3
 8006248:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 80064c8 <plotter_begin+0x680>
 800624c:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 80064cc <plotter_begin+0x684>
 8006250:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 80064c8 <plotter_begin+0x680>
 8006254:	489e      	ldr	r0, [pc, #632]	@ (80064d0 <plotter_begin+0x688>)
 8006256:	f7fa ffac 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800625a:	4b9a      	ldr	r3, [pc, #616]	@ (80064c4 <plotter_begin+0x67c>)
 800625c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f7fa fc76 	bl	8000b54 <__aeabi_d2f>
 8006268:	4603      	mov	r3, r0
 800626a:	ee01 3a90 	vmov	s3, r3
 800626e:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80064bc <plotter_begin+0x674>
 8006272:	eddf 0a98 	vldr	s1, [pc, #608]	@ 80064d4 <plotter_begin+0x68c>
 8006276:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80064d8 <plotter_begin+0x690>
 800627a:	4898      	ldr	r0, [pc, #608]	@ (80064dc <plotter_begin+0x694>)
 800627c:	f7fa ff99 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
			ZGX45RGG_150RPM_Constant.qd_max);
 8006280:	4b97      	ldr	r3, [pc, #604]	@ (80064e0 <plotter_begin+0x698>)
 8006282:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	f7fa fc63 	bl	8000b54 <__aeabi_d2f>
 800628e:	4603      	mov	r3, r0
 8006290:	ee01 3a90 	vmov	s3, r3
 8006294:	eeb3 1a09 	vmov.f32	s2, #57	@ 0x41c80000  25.0
 8006298:	eddf 0a92 	vldr	s1, [pc, #584]	@ 80064e4 <plotter_begin+0x69c>
 800629c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80062a0:	4891      	ldr	r0, [pc, #580]	@ (80064e8 <plotter_begin+0x6a0>)
 80062a2:	f7fa ff86 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 80062a6:	4b8e      	ldr	r3, [pc, #568]	@ (80064e0 <plotter_begin+0x698>)
 80062a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	f7fa fc50 	bl	8000b54 <__aeabi_d2f>
 80062b4:	4603      	mov	r3, r0
 80062b6:	ee01 3a90 	vmov	s3, r3
 80062ba:	ed9f 1a80 	vldr	s2, [pc, #512]	@ 80064bc <plotter_begin+0x674>
 80062be:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 80064ec <plotter_begin+0x6a4>
 80062c2:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 80064f0 <plotter_begin+0x6a8>
 80062c6:	488b      	ldr	r0, [pc, #556]	@ (80064f4 <plotter_begin+0x6ac>)
 80062c8:	f7fa ff73 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80062cc:	4984      	ldr	r1, [pc, #528]	@ (80064e0 <plotter_begin+0x698>)
 80062ce:	488a      	ldr	r0, [pc, #552]	@ (80064f8 <plotter_begin+0x6b0>)
 80062d0:	f7fb f932 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80062d4:	497b      	ldr	r1, [pc, #492]	@ (80064c4 <plotter_begin+0x67c>)
 80062d6:	4889      	ldr	r0, [pc, #548]	@ (80064fc <plotter_begin+0x6b4>)
 80062d8:	f7fb faac 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80062dc:	4a88      	ldr	r2, [pc, #544]	@ (8006500 <plotter_begin+0x6b8>)
 80062de:	4980      	ldr	r1, [pc, #512]	@ (80064e0 <plotter_begin+0x698>)
 80062e0:	4888      	ldr	r0, [pc, #544]	@ (8006504 <plotter_begin+0x6bc>)
 80062e2:	f7fb f9b8 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80062e6:	4a86      	ldr	r2, [pc, #536]	@ (8006500 <plotter_begin+0x6b8>)
 80062e8:	4976      	ldr	r1, [pc, #472]	@ (80064c4 <plotter_begin+0x67c>)
 80062ea:	4887      	ldr	r0, [pc, #540]	@ (8006508 <plotter_begin+0x6c0>)
 80062ec:	f7fb fb31 	bl	8001952 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80062f0:	2302      	movs	r3, #2
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	eddf 0a85 	vldr	s1, [pc, #532]	@ 800650c <plotter_begin+0x6c4>
 80062f8:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8006510 <plotter_begin+0x6c8>
 80062fc:	2364      	movs	r3, #100	@ 0x64
 80062fe:	4a85      	ldr	r2, [pc, #532]	@ (8006514 <plotter_begin+0x6cc>)
 8006300:	4985      	ldr	r1, [pc, #532]	@ (8006518 <plotter_begin+0x6d0>)
 8006302:	4886      	ldr	r0, [pc, #536]	@ (800651c <plotter_begin+0x6d4>)
 8006304:	f7fa fe0c 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8006308:	2105      	movs	r1, #5
 800630a:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8006520 <plotter_begin+0x6d8>
 800630e:	4883      	ldr	r0, [pc, #524]	@ (800651c <plotter_begin+0x6d4>)
 8006310:	f7fa feb8 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8006314:	4881      	ldr	r0, [pc, #516]	@ (800651c <plotter_begin+0x6d4>)
 8006316:	f7fa fe5b 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800631a:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8006524 <plotter_begin+0x6dc>
 800631e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006322:	211f      	movs	r1, #31
 8006324:	4880      	ldr	r0, [pc, #512]	@ (8006528 <plotter_begin+0x6e0>)
 8006326:	f7fb fbdb 	bl	8001ae0 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800632a:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8006524 <plotter_begin+0x6dc>
 800632e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006332:	211f      	movs	r1, #31
 8006334:	487d      	ldr	r0, [pc, #500]	@ (800652c <plotter_begin+0x6e4>)
 8006336:	f7fb fbd3 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800633a:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8006524 <plotter_begin+0x6dc>
 800633e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006342:	211f      	movs	r1, #31
 8006344:	487a      	ldr	r0, [pc, #488]	@ (8006530 <plotter_begin+0x6e8>)
 8006346:	f7fb fbcb 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800634a:	eddf 0a76 	vldr	s1, [pc, #472]	@ 8006524 <plotter_begin+0x6dc>
 800634e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006352:	211f      	movs	r1, #31
 8006354:	4877      	ldr	r0, [pc, #476]	@ (8006534 <plotter_begin+0x6ec>)
 8006356:	f7fb fbc3 	bl	8001ae0 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800635a:	4b5a      	ldr	r3, [pc, #360]	@ (80064c4 <plotter_begin+0x67c>)
 800635c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f7fa fbf6 	bl	8000b54 <__aeabi_d2f>
 8006368:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800636a:	4b56      	ldr	r3, [pc, #344]	@ (80064c4 <plotter_begin+0x67c>)
 800636c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	f7fa fbee 	bl	8000b54 <__aeabi_d2f>
 8006378:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800637a:	4b52      	ldr	r3, [pc, #328]	@ (80064c4 <plotter_begin+0x67c>)
 800637c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	f7fa fbe6 	bl	8000b54 <__aeabi_d2f>
 8006388:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800638a:	4b4e      	ldr	r3, [pc, #312]	@ (80064c4 <plotter_begin+0x67c>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006390:	4610      	mov	r0, r2
 8006392:	4619      	mov	r1, r3
 8006394:	f7fa fbde 	bl	8000b54 <__aeabi_d2f>
 8006398:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800639a:	4b4a      	ldr	r3, [pc, #296]	@ (80064c4 <plotter_begin+0x67c>)
 800639c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7fa fbd6 	bl	8000b54 <__aeabi_d2f>
 80063a8:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80063aa:	4b46      	ldr	r3, [pc, #280]	@ (80064c4 <plotter_begin+0x67c>)
 80063ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80063b0:	4610      	mov	r0, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	f7fa fbce 	bl	8000b54 <__aeabi_d2f>
 80063b8:	4603      	mov	r3, r0
 80063ba:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80063be:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80063c2:	ee03 3a10 	vmov	s6, r3
 80063c6:	ee02 9a90 	vmov	s5, r9
 80063ca:	ee02 8a10 	vmov	s4, r8
 80063ce:	ee01 6a90 	vmov	s3, r6
 80063d2:	ee01 5a10 	vmov	s2, r5
 80063d6:	ee00 4a90 	vmov	s1, r4
 80063da:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8006538 <plotter_begin+0x6f0>
 80063de:	4857      	ldr	r0, [pc, #348]	@ (800653c <plotter_begin+0x6f4>)
 80063e0:	f7fb fd7e 	bl	8001ee0 <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80063e4:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <plotter_begin+0x698>)
 80063e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	f7fa fbb1 	bl	8000b54 <__aeabi_d2f>
 80063f2:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 80063f4:	4b3a      	ldr	r3, [pc, #232]	@ (80064e0 <plotter_begin+0x698>)
 80063f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	f7fa fba9 	bl	8000b54 <__aeabi_d2f>
 8006402:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8006404:	4b36      	ldr	r3, [pc, #216]	@ (80064e0 <plotter_begin+0x698>)
 8006406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	f7fa fba1 	bl	8000b54 <__aeabi_d2f>
 8006412:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8006414:	4b32      	ldr	r3, [pc, #200]	@ (80064e0 <plotter_begin+0x698>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	f7fa fb99 	bl	8000b54 <__aeabi_d2f>
 8006422:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8006424:	4b2e      	ldr	r3, [pc, #184]	@ (80064e0 <plotter_begin+0x698>)
 8006426:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	f7fa fb91 	bl	8000b54 <__aeabi_d2f>
 8006432:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 8006434:	4b2a      	ldr	r3, [pc, #168]	@ (80064e0 <plotter_begin+0x698>)
 8006436:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f7fa fb89 	bl	8000b54 <__aeabi_d2f>
 8006442:	4603      	mov	r3, r0
 8006444:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8006448:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800644c:	ee03 3a10 	vmov	s6, r3
 8006450:	ee02 9a90 	vmov	s5, r9
 8006454:	ee02 8a10 	vmov	s4, r8
 8006458:	ee01 6a90 	vmov	s3, r6
 800645c:	ee01 5a10 	vmov	s2, r5
 8006460:	ee00 4a90 	vmov	s1, r4
 8006464:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8006538 <plotter_begin+0x6f0>
 8006468:	4835      	ldr	r0, [pc, #212]	@ (8006540 <plotter_begin+0x6f8>)
 800646a:	f7fb fd39 	bl	8001ee0 <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 800646e:	23c8      	movs	r3, #200	@ 0xc8
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	2315      	movs	r3, #21
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4b33      	ldr	r3, [pc, #204]	@ (8006544 <plotter_begin+0x6fc>)
 8006478:	4a33      	ldr	r2, [pc, #204]	@ (8006548 <plotter_begin+0x700>)
 800647a:	4934      	ldr	r1, [pc, #208]	@ (800654c <plotter_begin+0x704>)
 800647c:	4834      	ldr	r0, [pc, #208]	@ (8006550 <plotter_begin+0x708>)
 800647e:	f7fb fcc7 	bl	8001e10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8006482:	4834      	ldr	r0, [pc, #208]	@ (8006554 <plotter_begin+0x70c>)
 8006484:	f004 fde4 	bl	800b050 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8006488:	f000 f866 	bl	8006558 <plotter_reset>
}
 800648c:	bf00      	nop
 800648e:	3704      	adds	r7, #4
 8006490:	46bd      	mov	sp, r7
 8006492:	ecbd 8b02 	vpop	{d8}
 8006496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800649a:	bf00      	nop
 800649c:	20001ad4 	.word	0x20001ad4
 80064a0:	2000043c 	.word	0x2000043c
 80064a4:	20001c6c 	.word	0x20001c6c
 80064a8:	20000348 	.word	0x20000348
 80064ac:	48000800 	.word	0x48000800
 80064b0:	20000394 	.word	0x20000394
 80064b4:	20001870 	.word	0x20001870
 80064b8:	20000550 	.word	0x20000550
 80064bc:	00000000 	.word	0x00000000
 80064c0:	44fa0000 	.word	0x44fa0000
 80064c4:	20000060 	.word	0x20000060
 80064c8:	42960000 	.word	0x42960000
 80064cc:	2edbe6ff 	.word	0x2edbe6ff
 80064d0:	20000498 	.word	0x20000498
 80064d4:	3727c5ac 	.word	0x3727c5ac
 80064d8:	43160000 	.word	0x43160000
 80064dc:	200004c0 	.word	0x200004c0
 80064e0:	20000000 	.word	0x20000000
 80064e4:	3c23d70a 	.word	0x3c23d70a
 80064e8:	200004e8 	.word	0x200004e8
 80064ec:	43480000 	.word	0x43480000
 80064f0:	453b8000 	.word	0x453b8000
 80064f4:	20000510 	.word	0x20000510
 80064f8:	20000544 	.word	0x20000544
 80064fc:	20000538 	.word	0x20000538
 8006500:	200000c0 	.word	0x200000c0
 8006504:	20000548 	.word	0x20000548
 8006508:	2000053c 	.word	0x2000053c
 800650c:	457ff000 	.word	0x457ff000
 8006510:	40533333 	.word	0x40533333
 8006514:	2000110c 	.word	0x2000110c
 8006518:	20000178 	.word	0x20000178
 800651c:	20000568 	.word	0x20000568
 8006520:	45000000 	.word	0x45000000
 8006524:	447a0000 	.word	0x447a0000
 8006528:	20000a10 	.word	0x20000a10
 800652c:	20000a04 	.word	0x20000a04
 8006530:	20000a28 	.word	0x20000a28
 8006534:	20000a1c 	.word	0x20000a1c
 8006538:	3a83126f 	.word	0x3a83126f
 800653c:	20000a34 	.word	0x20000a34
 8006540:	20000da0 	.word	0x20000da0
 8006544:	200016ac 	.word	0x200016ac
 8006548:	20001d38 	.word	0x20001d38
 800654c:	20001ed0 	.word	0x20001ed0
 8006550:	200011d4 	.word	0x200011d4
 8006554:	2000193c 	.word	0x2000193c

08006558 <plotter_reset>:

void plotter_reset() {
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
    prismatic_encoder.diff_counts = 0;
 800655c:	4b18      	ldr	r3, [pc, #96]	@ (80065c0 <plotter_reset+0x68>)
 800655e:	2200      	movs	r2, #0
 8006560:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_encoder.rpm = 0;
 8006562:	4b17      	ldr	r3, [pc, #92]	@ (80065c0 <plotter_reset+0x68>)
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	@ 0x30
    prismatic_encoder.pulses = 0;
 800656a:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <plotter_reset+0x68>)
 800656c:	2200      	movs	r2, #0
 800656e:	639a      	str	r2, [r3, #56]	@ 0x38
    prismatic_encoder.revs = 0;
 8006570:	4b13      	ldr	r3, [pc, #76]	@ (80065c0 <plotter_reset+0x68>)
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	63da      	str	r2, [r3, #60]	@ 0x3c
    prismatic_encoder.rads = 0;
 8006578:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <plotter_reset+0x68>)
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	641a      	str	r2, [r3, #64]	@ 0x40
    prismatic_encoder.mm = 0;
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <plotter_reset+0x68>)
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	649a      	str	r2, [r3, #72]	@ 0x48

    revolute_encoder.diff_counts = 0;
 8006588:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <plotter_reset+0x6c>)
 800658a:	2200      	movs	r2, #0
 800658c:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_encoder.rpm = 0;
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <plotter_reset+0x6c>)
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	@ 0x30
    revolute_encoder.pulses = 0;
 8006596:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <plotter_reset+0x6c>)
 8006598:	2200      	movs	r2, #0
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38
    revolute_encoder.revs = 0;
 800659c:	4b09      	ldr	r3, [pc, #36]	@ (80065c4 <plotter_reset+0x6c>)
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    revolute_encoder.rads = 0;
 80065a4:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <plotter_reset+0x6c>)
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40
    revolute_encoder.mm = 0;
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <plotter_reset+0x6c>)
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	200003e0 	.word	0x200003e0
 80065c4:	2000043c 	.word	0x2000043c

080065c8 <plotter_update_sensors>:

void plotter_update_sensors() {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80065cc:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8006730 <plotter_update_sensors+0x168>
 80065d0:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8006734 <plotter_update_sensors+0x16c>
 80065d4:	2106      	movs	r1, #6
 80065d6:	4858      	ldr	r0, [pc, #352]	@ (8006738 <plotter_update_sensors+0x170>)
 80065d8:	f7fa fd7e 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80065dc:	eef0 7a40 	vmov.f32	s15, s0
 80065e0:	4b56      	ldr	r3, [pc, #344]	@ (800673c <plotter_update_sensors+0x174>)
 80065e2:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 80065e6:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006730 <plotter_update_sensors+0x168>
 80065ea:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8006734 <plotter_update_sensors+0x16c>
 80065ee:	2107      	movs	r1, #7
 80065f0:	4851      	ldr	r0, [pc, #324]	@ (8006738 <plotter_update_sensors+0x170>)
 80065f2:	f7fa fd71 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80065f6:	eef0 7a40 	vmov.f32	s15, s0
 80065fa:	4b51      	ldr	r3, [pc, #324]	@ (8006740 <plotter_update_sensors+0x178>)
 80065fc:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8006600:	2180      	movs	r1, #128	@ 0x80
 8006602:	4850      	ldr	r0, [pc, #320]	@ (8006744 <plotter_update_sensors+0x17c>)
 8006604:	f003 fbd8 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf0c      	ite	eq
 800660e:	2301      	moveq	r3, #1
 8006610:	2300      	movne	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	4b4c      	ldr	r3, [pc, #304]	@ (8006748 <plotter_update_sensors+0x180>)
 8006618:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800661a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800661e:	484b      	ldr	r0, [pc, #300]	@ (800674c <plotter_update_sensors+0x184>)
 8006620:	f003 fbca 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	4b47      	ldr	r3, [pc, #284]	@ (8006750 <plotter_update_sensors+0x188>)
 8006634:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8006636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800663a:	4844      	ldr	r0, [pc, #272]	@ (800674c <plotter_update_sensors+0x184>)
 800663c:	f003 fbbc 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	4b41      	ldr	r3, [pc, #260]	@ (8006754 <plotter_update_sensors+0x18c>)
 8006650:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8006652:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006656:	483d      	ldr	r0, [pc, #244]	@ (800674c <plotter_update_sensors+0x184>)
 8006658:	f003 fbae 	bl	8009db8 <HAL_GPIO_ReadPin>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <plotter_update_sensors+0x190>)
 800666c:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800666e:	2120      	movs	r1, #32
 8006670:	4834      	ldr	r0, [pc, #208]	@ (8006744 <plotter_update_sensors+0x17c>)
 8006672:	f003 fba1 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	461a      	mov	r2, r3
 800667a:	4b38      	ldr	r3, [pc, #224]	@ (800675c <plotter_update_sensors+0x194>)
 800667c:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800667e:	2101      	movs	r1, #1
 8006680:	4830      	ldr	r0, [pc, #192]	@ (8006744 <plotter_update_sensors+0x17c>)
 8006682:	f003 fb99 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006686:	4603      	mov	r3, r0
 8006688:	461a      	mov	r2, r3
 800668a:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <plotter_update_sensors+0x198>)
 800668c:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 800668e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006692:	482c      	ldr	r0, [pc, #176]	@ (8006744 <plotter_update_sensors+0x17c>)
 8006694:	f003 fb90 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	4b31      	ldr	r3, [pc, #196]	@ (8006764 <plotter_update_sensors+0x19c>)
 800669e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80066a0:	2104      	movs	r1, #4
 80066a2:	4828      	ldr	r0, [pc, #160]	@ (8006744 <plotter_update_sensors+0x17c>)
 80066a4:	f003 fb88 	bl	8009db8 <HAL_GPIO_ReadPin>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006768 <plotter_update_sensors+0x1a0>)
 80066ae:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80066b0:	2102      	movs	r1, #2
 80066b2:	4824      	ldr	r0, [pc, #144]	@ (8006744 <plotter_update_sensors+0x17c>)
 80066b4:	f003 fb80 	bl	8009db8 <HAL_GPIO_ReadPin>
 80066b8:	4603      	mov	r3, r0
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b2b      	ldr	r3, [pc, #172]	@ (800676c <plotter_update_sensors+0x1a4>)
 80066be:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80066c0:	2110      	movs	r1, #16
 80066c2:	4820      	ldr	r0, [pc, #128]	@ (8006744 <plotter_update_sensors+0x17c>)
 80066c4:	f003 fb78 	bl	8009db8 <HAL_GPIO_ReadPin>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bf0c      	ite	eq
 80066ce:	2301      	moveq	r3, #1
 80066d0:	2300      	movne	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	4b26      	ldr	r3, [pc, #152]	@ (8006770 <plotter_update_sensors+0x1a8>)
 80066d8:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 80066da:	4b23      	ldr	r3, [pc, #140]	@ (8006768 <plotter_update_sensors+0x1a0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <plotter_update_sensors+0x122>
		servo_state = PEN_UP;
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <plotter_update_sensors+0x1ac>)
 80066e4:	2202      	movs	r2, #2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e00a      	b.n	8006700 <plotter_update_sensors+0x138>
	} else if (low_lim) {
 80066ea:	4b20      	ldr	r3, [pc, #128]	@ (800676c <plotter_update_sensors+0x1a4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <plotter_update_sensors+0x132>
		servo_state = PEN_DOWN;
 80066f2:	4b20      	ldr	r3, [pc, #128]	@ (8006774 <plotter_update_sensors+0x1ac>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e002      	b.n	8006700 <plotter_update_sensors+0x138>
	} else {
		servo_state = PEN_IDLE;
 80066fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006774 <plotter_update_sensors+0x1ac>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8006700:	4b17      	ldr	r3, [pc, #92]	@ (8006760 <plotter_update_sensors+0x198>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <plotter_update_sensors+0x148>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8006708:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <plotter_update_sensors+0x1b0>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e006      	b.n	800671e <plotter_update_sensors+0x156>
	} else if (low_photo) {
 8006710:	4b14      	ldr	r3, [pc, #80]	@ (8006764 <plotter_update_sensors+0x19c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <plotter_update_sensors+0x156>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8006718:	4b17      	ldr	r3, [pc, #92]	@ (8006778 <plotter_update_sensors+0x1b0>)
 800671a:	2202      	movs	r2, #2
 800671c:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <plotter_update_sensors+0x194>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <plotter_update_sensors+0x164>
		revolute_state = RP_AT_HOME_POSITION;
 8006726:	4b15      	ldr	r3, [pc, #84]	@ (800677c <plotter_update_sensors+0x1b4>)
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
	}
}
 800672c:	bf00      	nop
 800672e:	bd80      	pop	{r7, pc}
 8006730:	42480000 	.word	0x42480000
 8006734:	c2480000 	.word	0xc2480000
 8006738:	20000568 	.word	0x20000568
 800673c:	2000183c 	.word	0x2000183c
 8006740:	20001840 	.word	0x20001840
 8006744:	48000400 	.word	0x48000400
 8006748:	2000185c 	.word	0x2000185c
 800674c:	48000800 	.word	0x48000800
 8006750:	20001860 	.word	0x20001860
 8006754:	20001864 	.word	0x20001864
 8006758:	20001868 	.word	0x20001868
 800675c:	20001844 	.word	0x20001844
 8006760:	2000184c 	.word	0x2000184c
 8006764:	20001850 	.word	0x20001850
 8006768:	20001854 	.word	0x20001854
 800676c:	20001858 	.word	0x20001858
 8006770:	20001848 	.word	0x20001848
 8006774:	20000344 	.word	0x20000344
 8006778:	200000f9 	.word	0x200000f9
 800677c:	200000fa 	.word	0x200000fa

08006780 <plotter_pen_up>:

void plotter_pen_up() {
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8006784:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8006788:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006798 <plotter_pen_up+0x18>
 800678c:	4803      	ldr	r0, [pc, #12]	@ (800679c <plotter_pen_up+0x1c>)
 800678e:	f7fc fddd 	bl	800334c <PWM_write_duty>
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	42480000 	.word	0x42480000
 800679c:	20000550 	.word	0x20000550

080067a0 <plotter_pen_down>:

void plotter_pen_down() {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 80067a4:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80067a8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80067b8 <plotter_pen_down+0x18>
 80067ac:	4803      	ldr	r0, [pc, #12]	@ (80067bc <plotter_pen_down+0x1c>)
 80067ae:	f7fc fdcd 	bl	800334c <PWM_write_duty>
}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	42480000 	.word	0x42480000
 80067bc:	20000550 	.word	0x20000550

080067c0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80067d8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80067e0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1b      	ldr	r2, [pc, #108]	@ (8006874 <SIGNAL_init+0xb4>)
 8006806:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d828      	bhi.n	8006868 <SIGNAL_init+0xa8>
 8006816:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <SIGNAL_init+0x5c>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006867 	.word	0x08006867
 8006820:	0800682d 	.word	0x0800682d
 8006824:	0800684b 	.word	0x0800684b
 8006828:	08006855 	.word	0x08006855
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006838:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a0e      	ldr	r2, [pc, #56]	@ (8006878 <SIGNAL_init+0xb8>)
 800683e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006846:	621a      	str	r2, [r3, #32]
            break;
 8006848:	e00e      	b.n	8006868 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006850:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8006852:	e009      	b.n	8006868 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006862:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8006864:	e000      	b.n	8006868 <SIGNAL_init+0xa8>
            break;
 8006866:	bf00      	nop
    }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	bf800000 	.word	0xbf800000
 8006878:	41200000 	.word	0x41200000

0800687c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	@ 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	61f8      	str	r0, [r7, #28]
 8006884:	ed87 0a06 	vstr	s0, [r7, #24]
 8006888:	edc7 0a05 	vstr	s1, [r7, #20]
 800688c:	ed87 1a04 	vstr	s2, [r7, #16]
 8006890:	edc7 1a03 	vstr	s3, [r7, #12]
 8006894:	ed87 2a02 	vstr	s4, [r7, #8]
 8006898:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80068c6:	bf00      	nop
 80068c8:	3724      	adds	r7, #36	@ 0x24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80068d2:	b480      	push	{r7}
 80068d4:	b089      	sub	sp, #36	@ 0x24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	61f8      	str	r0, [r7, #28]
 80068da:	ed87 0a06 	vstr	s0, [r7, #24]
 80068de:	edc7 0a05 	vstr	s1, [r7, #20]
 80068e2:	ed87 1a04 	vstr	s2, [r7, #16]
 80068e6:	edc7 1a03 	vstr	s3, [r7, #12]
 80068ea:	ed87 2a02 	vstr	s4, [r7, #8]
 80068ee:	edc7 2a01 	vstr	s5, [r7, #4]
 80068f2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2202      	movs	r2, #2
 80068fa:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006926:	bf00      	nop
 8006928:	3724      	adds	r7, #36	@ 0x24
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800693a:	4b0f      	ldr	r3, [pc, #60]	@ (8006978 <HAL_MspInit+0x44>)
 800693c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800693e:	4a0e      	ldr	r2, [pc, #56]	@ (8006978 <HAL_MspInit+0x44>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6613      	str	r3, [r2, #96]	@ 0x60
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <HAL_MspInit+0x44>)
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006952:	4b09      	ldr	r3, [pc, #36]	@ (8006978 <HAL_MspInit+0x44>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006956:	4a08      	ldr	r2, [pc, #32]	@ (8006978 <HAL_MspInit+0x44>)
 8006958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800695c:	6593      	str	r3, [r2, #88]	@ 0x58
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_MspInit+0x44>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800696a:	f003 fb11 	bl	8009f90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000

0800697c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <NMI_Handler+0x4>

08006984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <HardFault_Handler+0x4>

0800698c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <MemManage_Handler+0x4>

08006994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <BusFault_Handler+0x4>

0800699c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <UsageFault_Handler+0x4>

080069a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069b2:	b480      	push	{r7}
 80069b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069d2:	f000 ff97 	bl	8007904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80069e0:	4802      	ldr	r0, [pc, #8]	@ (80069ec <DMA1_Channel1_IRQHandler+0x10>)
 80069e2:	f002 ff18 	bl	8009816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200001e4 	.word	0x200001e4

080069f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80069f4:	4802      	ldr	r0, [pc, #8]	@ (8006a00 <DMA1_Channel2_IRQHandler+0x10>)
 80069f6:	f002 ff0e 	bl	8009816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	2000205c 	.word	0x2000205c

08006a04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006a08:	4802      	ldr	r0, [pc, #8]	@ (8006a14 <DMA1_Channel3_IRQHandler+0x10>)
 8006a0a:	f002 ff04 	bl	8009816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200020bc 	.word	0x200020bc

08006a18 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006a1c:	4802      	ldr	r0, [pc, #8]	@ (8006a28 <DMA1_Channel4_IRQHandler+0x10>)
 8006a1e:	f002 fefa 	bl	8009816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20001f9c 	.word	0x20001f9c

08006a2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006a30:	4802      	ldr	r0, [pc, #8]	@ (8006a3c <DMA1_Channel5_IRQHandler+0x10>)
 8006a32:	f002 fef0 	bl	8009816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20001ffc 	.word	0x20001ffc

08006a40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006a44:	4803      	ldr	r0, [pc, #12]	@ (8006a54 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8006a46:	f004 ff29 	bl	800b89c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006a4a:	4803      	ldr	r0, [pc, #12]	@ (8006a58 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006a4c:	f004 ff26 	bl	800b89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20001870 	.word	0x20001870
 8006a58:	20001d38 	.word	0x20001d38

08006a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006a60:	4802      	ldr	r0, [pc, #8]	@ (8006a6c <TIM2_IRQHandler+0x10>)
 8006a62:	f004 ff1b 	bl	800b89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000193c 	.word	0x2000193c

08006a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006a74:	4802      	ldr	r0, [pc, #8]	@ (8006a80 <TIM3_IRQHandler+0x10>)
 8006a76:	f004 ff11 	bl	800b89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20001a08 	.word	0x20001a08

08006a84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006a88:	4802      	ldr	r0, [pc, #8]	@ (8006a94 <TIM4_IRQHandler+0x10>)
 8006a8a:	f004 ff07 	bl	800b89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006a8e:	bf00      	nop
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20001ad4 	.word	0x20001ad4

08006a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006a9c:	4802      	ldr	r0, [pc, #8]	@ (8006aa8 <USART2_IRQHandler+0x10>)
 8006a9e:	f006 fc51 	bl	800d344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20001ed0 	.word	0x20001ed0

08006aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006ab0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006ab4:	f003 f9b0 	bl	8009e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}

08006abc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006ac0:	4802      	ldr	r0, [pc, #8]	@ (8006acc <LPUART1_IRQHandler+0x10>)
 8006ac2:	f006 fc3f 	bl	800d344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20001e04 	.word	0x20001e04

08006ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ad8:	4a14      	ldr	r2, [pc, #80]	@ (8006b2c <_sbrk+0x5c>)
 8006ada:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <_sbrk+0x60>)
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ae4:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <_sbrk+0x64>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006aec:	4b11      	ldr	r3, [pc, #68]	@ (8006b34 <_sbrk+0x64>)
 8006aee:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <_sbrk+0x68>)
 8006af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <_sbrk+0x64>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d207      	bcs.n	8006b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b00:	f008 fab2 	bl	800f068 <__errno>
 8006b04:	4603      	mov	r3, r0
 8006b06:	220c      	movs	r2, #12
 8006b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	e009      	b.n	8006b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <_sbrk+0x64>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b16:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <_sbrk+0x64>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <_sbrk+0x64>)
 8006b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20020000 	.word	0x20020000
 8006b30:	00000400 	.word	0x00000400
 8006b34:	2000186c 	.word	0x2000186c
 8006b38:	20002268 	.word	0x20002268

08006b3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b40:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <SystemInit+0x20>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b46:	4a05      	ldr	r2, [pc, #20]	@ (8006b5c <SystemInit+0x20>)
 8006b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b098      	sub	sp, #96	@ 0x60
 8006b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
 8006b7e:	60da      	str	r2, [r3, #12]
 8006b80:	611a      	str	r2, [r3, #16]
 8006b82:	615a      	str	r2, [r3, #20]
 8006b84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	2234      	movs	r2, #52	@ 0x34
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f008 fa53 	bl	800f038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b92:	4b3b      	ldr	r3, [pc, #236]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006b94:	4a3b      	ldr	r2, [pc, #236]	@ (8006c84 <MX_TIM1_Init+0x124>)
 8006b96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b98:	4b39      	ldr	r3, [pc, #228]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b9e:	4b38      	ldr	r3, [pc, #224]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006ba4:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bac:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006bb2:	4b33      	ldr	r3, [pc, #204]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bb8:	4b31      	ldr	r3, [pc, #196]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006bbe:	4830      	ldr	r0, [pc, #192]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006bc0:	f004 fabe 	bl	800b140 <HAL_TIM_PWM_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8006bca:	f7ff f935 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006bda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006bde:	4619      	mov	r1, r3
 8006be0:	4827      	ldr	r0, [pc, #156]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006be2:	f006 f8cf 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006bec:	f7ff f924 	bl	8005e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bf0:	2360      	movs	r3, #96	@ 0x60
 8006bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c04:	2300      	movs	r3, #0
 8006c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006c0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c10:	220c      	movs	r2, #12
 8006c12:	4619      	mov	r1, r3
 8006c14:	481a      	ldr	r0, [pc, #104]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006c16:	f004 ffbb 	bl	800bb90 <HAL_TIM_PWM_ConfigChannel>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006c20:	f7ff f90a 	bl	8005e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006c54:	2300      	movs	r3, #0
 8006c56:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4807      	ldr	r0, [pc, #28]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006c62:	f006 f925 	bl	800ceb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006c6c:	f7ff f8e4 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006c70:	4803      	ldr	r0, [pc, #12]	@ (8006c80 <MX_TIM1_Init+0x120>)
 8006c72:	f000 fb77 	bl	8007364 <HAL_TIM_MspPostInit>

}
 8006c76:	bf00      	nop
 8006c78:	3760      	adds	r7, #96	@ 0x60
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20001870 	.word	0x20001870
 8006c84:	40012c00 	.word	0x40012c00

08006c88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c8e:	f107 0310 	add.w	r3, r7, #16
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	605a      	str	r2, [r3, #4]
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006cac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8006cae:	4b1c      	ldr	r3, [pc, #112]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cb0:	22a9      	movs	r2, #169	@ 0xa9
 8006cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006cba:	4b19      	ldr	r3, [pc, #100]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cc2:	4b17      	ldr	r3, [pc, #92]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cc8:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006cce:	4814      	ldr	r0, [pc, #80]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cd0:	f004 f8ea 	bl	800aea8 <HAL_TIM_Base_Init>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006cda:	f7ff f8ad 	bl	8005e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ce4:	f107 0310 	add.w	r3, r7, #16
 8006ce8:	4619      	mov	r1, r3
 8006cea:	480d      	ldr	r0, [pc, #52]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006cec:	f005 f864 	bl	800bdb8 <HAL_TIM_ConfigClockSource>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006cf6:	f7ff f89f 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4806      	ldr	r0, [pc, #24]	@ (8006d20 <MX_TIM2_Init+0x98>)
 8006d08:	f006 f83c 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006d12:	f7ff f891 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006d16:	bf00      	nop
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	2000193c 	.word	0x2000193c

08006d24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08c      	sub	sp, #48	@ 0x30
 8006d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006d2a:	f107 030c 	add.w	r3, r7, #12
 8006d2e:	2224      	movs	r2, #36	@ 0x24
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f008 f980 	bl	800f038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d38:	463b      	mov	r3, r7
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006d42:	4b21      	ldr	r3, [pc, #132]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d44:	4a21      	ldr	r2, [pc, #132]	@ (8006dcc <MX_TIM3_Init+0xa8>)
 8006d46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006d48:	4b1f      	ldr	r3, [pc, #124]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006d54:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d62:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006d80:	2301      	movs	r3, #1
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006d8c:	f107 030c 	add.w	r3, r7, #12
 8006d90:	4619      	mov	r1, r3
 8006d92:	480d      	ldr	r0, [pc, #52]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006d94:	f004 fc40 	bl	800b618 <HAL_TIM_Encoder_Init>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8006d9e:	f7ff f84b 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006da2:	2300      	movs	r3, #0
 8006da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006daa:	463b      	mov	r3, r7
 8006dac:	4619      	mov	r1, r3
 8006dae:	4806      	ldr	r0, [pc, #24]	@ (8006dc8 <MX_TIM3_Init+0xa4>)
 8006db0:	f005 ffe8 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006dba:	f7ff f83d 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006dbe:	bf00      	nop
 8006dc0:	3730      	adds	r7, #48	@ 0x30
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20001a08 	.word	0x20001a08
 8006dcc:	40000400 	.word	0x40000400

08006dd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	@ 0x30
 8006dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	2224      	movs	r2, #36	@ 0x24
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f008 f92a 	bl	800f038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006de4:	463b      	mov	r3, r7
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006dee:	4b21      	ldr	r3, [pc, #132]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006df0:	4a21      	ldr	r2, [pc, #132]	@ (8006e78 <MX_TIM4_Init+0xa8>)
 8006df2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006df4:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006e00:	4b1c      	ldr	r3, [pc, #112]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e08:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e0e:	4b19      	ldr	r3, [pc, #100]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006e14:	2303      	movs	r3, #3
 8006e16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	480d      	ldr	r0, [pc, #52]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006e40:	f004 fbea 	bl	800b618 <HAL_TIM_Encoder_Init>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006e4a:	f7fe fff5 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006e56:	463b      	mov	r3, r7
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4806      	ldr	r0, [pc, #24]	@ (8006e74 <MX_TIM4_Init+0xa4>)
 8006e5c:	f005 ff92 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006e66:	f7fe ffe7 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006e6a:	bf00      	nop
 8006e6c:	3730      	adds	r7, #48	@ 0x30
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20001ad4 	.word	0x20001ad4
 8006e78:	40000800 	.word	0x40000800

08006e7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08c      	sub	sp, #48	@ 0x30
 8006e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	2224      	movs	r2, #36	@ 0x24
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f008 f8d4 	bl	800f038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e90:	463b      	mov	r3, r7
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006e9a:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006e9c:	4a21      	ldr	r2, [pc, #132]	@ (8006f24 <MX_TIM5_Init+0xa8>)
 8006e9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8006eac:	4b1c      	ldr	r3, [pc, #112]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006eb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eba:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006edc:	2300      	movs	r3, #0
 8006ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	4619      	mov	r1, r3
 8006eea:	480d      	ldr	r0, [pc, #52]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006eec:	f004 fb94 	bl	800b618 <HAL_TIM_Encoder_Init>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8006ef6:	f7fe ff9f 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006efa:	2300      	movs	r3, #0
 8006efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006f02:	463b      	mov	r3, r7
 8006f04:	4619      	mov	r1, r3
 8006f06:	4806      	ldr	r0, [pc, #24]	@ (8006f20 <MX_TIM5_Init+0xa4>)
 8006f08:	f005 ff3c 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8006f12:	f7fe ff91 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006f16:	bf00      	nop
 8006f18:	3730      	adds	r7, #48	@ 0x30
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20001ba0 	.word	0x20001ba0
 8006f24:	40000c00 	.word	0x40000c00

08006f28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b09c      	sub	sp, #112	@ 0x70
 8006f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	605a      	str	r2, [r3, #4]
 8006f38:	609a      	str	r2, [r3, #8]
 8006f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
 8006f58:	615a      	str	r2, [r3, #20]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006f5c:	1d3b      	adds	r3, r7, #4
 8006f5e:	2234      	movs	r2, #52	@ 0x34
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f008 f868 	bl	800f038 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006f68:	4b4c      	ldr	r3, [pc, #304]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80070a0 <MX_TIM8_Init+0x178>)
 8006f6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f74:	4b49      	ldr	r3, [pc, #292]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006f7a:	4b48      	ldr	r3, [pc, #288]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006f82:	4b46      	ldr	r3, [pc, #280]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006f8a:	4b44      	ldr	r3, [pc, #272]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f90:	4b42      	ldr	r3, [pc, #264]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006f96:	4841      	ldr	r0, [pc, #260]	@ (800709c <MX_TIM8_Init+0x174>)
 8006f98:	f003 ff86 	bl	800aea8 <HAL_TIM_Base_Init>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8006fa2:	f7fe ff49 	bl	8005e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006faa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006fac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	483a      	ldr	r0, [pc, #232]	@ (800709c <MX_TIM8_Init+0x174>)
 8006fb4:	f004 ff00 	bl	800bdb8 <HAL_TIM_ConfigClockSource>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8006fbe:	f7fe ff3b 	bl	8005e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006fc2:	4836      	ldr	r0, [pc, #216]	@ (800709c <MX_TIM8_Init+0x174>)
 8006fc4:	f004 f8bc 	bl	800b140 <HAL_TIM_PWM_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8006fce:	f7fe ff33 	bl	8005e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006fde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	482d      	ldr	r0, [pc, #180]	@ (800709c <MX_TIM8_Init+0x174>)
 8006fe6:	f005 fecd 	bl	800cd84 <HAL_TIMEx_MasterConfigSynchronization>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8006ff0:	f7fe ff22 	bl	8005e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ff4:	2360      	movs	r3, #96	@ 0x60
 8006ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007000:	2300      	movs	r3, #0
 8007002:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007004:	2300      	movs	r3, #0
 8007006:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007008:	2300      	movs	r3, #0
 800700a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800700c:	2300      	movs	r3, #0
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007010:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007014:	2200      	movs	r2, #0
 8007016:	4619      	mov	r1, r3
 8007018:	4820      	ldr	r0, [pc, #128]	@ (800709c <MX_TIM8_Init+0x174>)
 800701a:	f004 fdb9 	bl	800bb90 <HAL_TIM_PWM_ConfigChannel>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8007024:	f7fe ff08 	bl	8005e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007028:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800702c:	2204      	movs	r2, #4
 800702e:	4619      	mov	r1, r3
 8007030:	481a      	ldr	r0, [pc, #104]	@ (800709c <MX_TIM8_Init+0x174>)
 8007032:	f004 fdad 	bl	800bb90 <HAL_TIM_PWM_ConfigChannel>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800703c:	f7fe fefc 	bl	8005e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007040:	2300      	movs	r3, #0
 8007042:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007044:	2300      	movs	r3, #0
 8007046:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007058:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800705e:	2300      	movs	r3, #0
 8007060:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007074:	2300      	movs	r3, #0
 8007076:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007078:	1d3b      	adds	r3, r7, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4807      	ldr	r0, [pc, #28]	@ (800709c <MX_TIM8_Init+0x174>)
 800707e:	f005 ff17 	bl	800ceb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8007088:	f7fe fed6 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800708c:	4803      	ldr	r0, [pc, #12]	@ (800709c <MX_TIM8_Init+0x174>)
 800708e:	f000 f969 	bl	8007364 <HAL_TIM_MspPostInit>

}
 8007092:	bf00      	nop
 8007094:	3770      	adds	r7, #112	@ 0x70
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20001c6c 	.word	0x20001c6c
 80070a0:	40013400 	.word	0x40013400

080070a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80070a8:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070aa:	4a15      	ldr	r2, [pc, #84]	@ (8007100 <MX_TIM16_Init+0x5c>)
 80070ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80070ae:	4b13      	ldr	r3, [pc, #76]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070b0:	22a9      	movs	r2, #169	@ 0xa9
 80070b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070b4:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80070ba:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070bc:	f240 4279 	movw	r2, #1145	@ 0x479
 80070c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80070d4:	4809      	ldr	r0, [pc, #36]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070d6:	f003 fee7 	bl	800aea8 <HAL_TIM_Base_Init>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80070e0:	f7fe feaa 	bl	8005e38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80070e4:	2108      	movs	r1, #8
 80070e6:	4805      	ldr	r0, [pc, #20]	@ (80070fc <MX_TIM16_Init+0x58>)
 80070e8:	f004 f9a0 	bl	800b42c <HAL_TIM_OnePulse_Init>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80070f2:	f7fe fea1 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20001d38 	.word	0x20001d38
 8007100:	40014400 	.word	0x40014400

08007104 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0d      	ldr	r2, [pc, #52]	@ (8007148 <HAL_TIM_PWM_MspInit+0x44>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d113      	bne.n	800713e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007116:	4b0d      	ldr	r3, [pc, #52]	@ (800714c <HAL_TIM_PWM_MspInit+0x48>)
 8007118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711a:	4a0c      	ldr	r2, [pc, #48]	@ (800714c <HAL_TIM_PWM_MspInit+0x48>)
 800711c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007120:	6613      	str	r3, [r2, #96]	@ 0x60
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <HAL_TIM_PWM_MspInit+0x48>)
 8007124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	2019      	movs	r0, #25
 8007134:	f002 f957 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007138:	2019      	movs	r0, #25
 800713a:	f002 f96e 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40021000 	.word	0x40021000

08007150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007160:	d114      	bne.n	800718c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	4a21      	ldr	r2, [pc, #132]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6593      	str	r3, [r2, #88]	@ 0x58
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 8007170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	201c      	movs	r0, #28
 8007180:	f002 f931 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007184:	201c      	movs	r0, #28
 8007186:	f002 f948 	bl	800941a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800718a:	e02a      	b.n	80071e2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a17      	ldr	r2, [pc, #92]	@ (80071f0 <HAL_TIM_Base_MspInit+0xa0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10c      	bne.n	80071b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007196:	4b15      	ldr	r3, [pc, #84]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 8007198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719a:	4a14      	ldr	r2, [pc, #80]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 800719c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80071a2:	4b12      	ldr	r3, [pc, #72]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 80071a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	693b      	ldr	r3, [r7, #16]
}
 80071ae:	e018      	b.n	80071e2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0f      	ldr	r2, [pc, #60]	@ (80071f4 <HAL_TIM_Base_MspInit+0xa4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d113      	bne.n	80071e2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80071ba:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 80071bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071be:	4a0b      	ldr	r2, [pc, #44]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 80071c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80071c6:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <HAL_TIM_Base_MspInit+0x9c>)
 80071c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	2019      	movs	r0, #25
 80071d8:	f002 f905 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80071dc:	2019      	movs	r0, #25
 80071de:	f002 f91c 	bl	800941a <HAL_NVIC_EnableIRQ>
}
 80071e2:	bf00      	nop
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40014400 	.word	0x40014400

080071f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08e      	sub	sp, #56	@ 0x38
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a4f      	ldr	r2, [pc, #316]	@ (8007354 <HAL_TIM_Encoder_MspInit+0x15c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d131      	bne.n	800727e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800721a:	4b4f      	ldr	r3, [pc, #316]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 800721c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721e:	4a4e      	ldr	r2, [pc, #312]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	6593      	str	r3, [r2, #88]	@ 0x58
 8007226:	4b4c      	ldr	r3, [pc, #304]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007232:	4b49      	ldr	r3, [pc, #292]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007236:	4a48      	ldr	r2, [pc, #288]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800723e:	4b46      	ldr	r3, [pc, #280]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800724a:	23c0      	movs	r3, #192	@ 0xc0
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724e:	2302      	movs	r3, #2
 8007250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007252:	2300      	movs	r3, #0
 8007254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007256:	2300      	movs	r3, #0
 8007258:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800725a:	2302      	movs	r3, #2
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800725e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007262:	4619      	mov	r1, r3
 8007264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007268:	f002 fc24 	bl	8009ab4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800726c:	2200      	movs	r2, #0
 800726e:	2100      	movs	r1, #0
 8007270:	201d      	movs	r0, #29
 8007272:	f002 f8b8 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007276:	201d      	movs	r0, #29
 8007278:	f002 f8cf 	bl	800941a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800727c:	e065      	b.n	800734a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a36      	ldr	r2, [pc, #216]	@ (800735c <HAL_TIM_Encoder_MspInit+0x164>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d132      	bne.n	80072ee <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007288:	4b33      	ldr	r3, [pc, #204]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 800728a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728c:	4a32      	ldr	r2, [pc, #200]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 800728e:	f043 0304 	orr.w	r3, r3, #4
 8007292:	6593      	str	r3, [r2, #88]	@ 0x58
 8007294:	4b30      	ldr	r3, [pc, #192]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 80072a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 80072ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072be:	2302      	movs	r3, #2
 80072c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c6:	2300      	movs	r3, #0
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80072ca:	230a      	movs	r3, #10
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072d2:	4619      	mov	r1, r3
 80072d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072d8:	f002 fbec 	bl	8009ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80072dc:	2200      	movs	r2, #0
 80072de:	2100      	movs	r1, #0
 80072e0:	201e      	movs	r0, #30
 80072e2:	f002 f880 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80072e6:	201e      	movs	r0, #30
 80072e8:	f002 f897 	bl	800941a <HAL_NVIC_EnableIRQ>
}
 80072ec:	e02d      	b.n	800734a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1b      	ldr	r2, [pc, #108]	@ (8007360 <HAL_TIM_Encoder_MspInit+0x168>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d128      	bne.n	800734a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	4a16      	ldr	r2, [pc, #88]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 80072fe:	f043 0308 	orr.w	r3, r3, #8
 8007302:	6593      	str	r3, [r2, #88]	@ 0x58
 8007304:	4b14      	ldr	r3, [pc, #80]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007310:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007314:	4a10      	ldr	r2, [pc, #64]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800731c:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <HAL_TIM_Encoder_MspInit+0x160>)
 800731e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007328:	2303      	movs	r3, #3
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732c:	2302      	movs	r3, #2
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007330:	2300      	movs	r3, #0
 8007332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007334:	2300      	movs	r3, #0
 8007336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007338:	2302      	movs	r3, #2
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800733c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007340:	4619      	mov	r1, r3
 8007342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007346:	f002 fbb5 	bl	8009ab4 <HAL_GPIO_Init>
}
 800734a:	bf00      	nop
 800734c:	3738      	adds	r7, #56	@ 0x38
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40000400 	.word	0x40000400
 8007358:	40021000 	.word	0x40021000
 800735c:	40000800 	.word	0x40000800
 8007360:	40000c00 	.word	0x40000c00

08007364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	@ 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a22      	ldr	r2, [pc, #136]	@ (800740c <HAL_TIM_MspPostInit+0xa8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d11c      	bne.n	80073c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007386:	4b22      	ldr	r3, [pc, #136]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 8007388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738a:	4a21      	ldr	r2, [pc, #132]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 800738c:	f043 0304 	orr.w	r3, r3, #4
 8007390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007392:	4b1f      	ldr	r3, [pc, #124]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 8007394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800739e:	2308      	movs	r3, #8
 80073a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a2:	2302      	movs	r3, #2
 80073a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073aa:	2300      	movs	r3, #0
 80073ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80073ae:	2302      	movs	r3, #2
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	4619      	mov	r1, r3
 80073b8:	4816      	ldr	r0, [pc, #88]	@ (8007414 <HAL_TIM_MspPostInit+0xb0>)
 80073ba:	f002 fb7b 	bl	8009ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80073be:	e020      	b.n	8007402 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <HAL_TIM_MspPostInit+0xb4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d11b      	bne.n	8007402 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073ca:	4b11      	ldr	r3, [pc, #68]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 80073cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ce:	4a10      	ldr	r2, [pc, #64]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 80073d0:	f043 0304 	orr.w	r3, r3, #4
 80073d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007410 <HAL_TIM_MspPostInit+0xac>)
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073e2:	23c0      	movs	r3, #192	@ 0xc0
 80073e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e6:	2302      	movs	r3, #2
 80073e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ee:	2300      	movs	r3, #0
 80073f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80073f2:	2304      	movs	r3, #4
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	4619      	mov	r1, r3
 80073fc:	4805      	ldr	r0, [pc, #20]	@ (8007414 <HAL_TIM_MspPostInit+0xb0>)
 80073fe:	f002 fb59 	bl	8009ab4 <HAL_GPIO_Init>
}
 8007402:	bf00      	nop
 8007404:	3728      	adds	r7, #40	@ 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40021000 	.word	0x40021000
 8007414:	48000800 	.word	0x48000800
 8007418:	40013400 	.word	0x40013400

0800741c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007420:	4b20      	ldr	r3, [pc, #128]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007422:	4a21      	ldr	r2, [pc, #132]	@ (80074a8 <MX_LPUART1_UART_Init+0x8c>)
 8007424:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8007426:	4b1f      	ldr	r3, [pc, #124]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007428:	4a20      	ldr	r2, [pc, #128]	@ (80074ac <MX_LPUART1_UART_Init+0x90>)
 800742a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800742c:	4b1d      	ldr	r3, [pc, #116]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007432:	4b1c      	ldr	r3, [pc, #112]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007434:	2200      	movs	r2, #0
 8007436:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007438:	4b1a      	ldr	r3, [pc, #104]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800743e:	4b19      	ldr	r3, [pc, #100]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007440:	220c      	movs	r2, #12
 8007442:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007444:	4b17      	ldr	r3, [pc, #92]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007446:	2200      	movs	r2, #0
 8007448:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800744a:	4b16      	ldr	r3, [pc, #88]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 800744c:	2200      	movs	r2, #0
 800744e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007450:	4b14      	ldr	r3, [pc, #80]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007452:	2200      	movs	r2, #0
 8007454:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007456:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007458:	2200      	movs	r2, #0
 800745a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800745c:	4811      	ldr	r0, [pc, #68]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 800745e:	f005 fe0b 	bl	800d078 <HAL_UART_Init>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8007468:	f7fe fce6 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800746c:	2100      	movs	r1, #0
 800746e:	480d      	ldr	r0, [pc, #52]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007470:	f007 fb5e 	bl	800eb30 <HAL_UARTEx_SetTxFifoThreshold>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800747a:	f7fe fcdd 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800747e:	2100      	movs	r1, #0
 8007480:	4808      	ldr	r0, [pc, #32]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007482:	f007 fb93 	bl	800ebac <HAL_UARTEx_SetRxFifoThreshold>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800748c:	f7fe fcd4 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007490:	4804      	ldr	r0, [pc, #16]	@ (80074a4 <MX_LPUART1_UART_Init+0x88>)
 8007492:	f007 fb14 	bl	800eabe <HAL_UARTEx_DisableFifoMode>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800749c:	f7fe fccc 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80074a0:	bf00      	nop
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20001e04 	.word	0x20001e04
 80074a8:	40008000 	.word	0x40008000
 80074ac:	001e8480 	.word	0x001e8480

080074b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074b4:	4b23      	ldr	r3, [pc, #140]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074b6:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <MX_USART2_UART_Init+0x98>)
 80074b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80074ba:	4b22      	ldr	r3, [pc, #136]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074bc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80074c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80074c2:	4b20      	ldr	r3, [pc, #128]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80074c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80074ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074da:	220c      	movs	r2, #12
 80074dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074de:	4b19      	ldr	r3, [pc, #100]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80074e4:	4b17      	ldr	r3, [pc, #92]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074ea:	4b16      	ldr	r3, [pc, #88]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80074f0:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074f6:	4b13      	ldr	r3, [pc, #76]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80074fc:	4811      	ldr	r0, [pc, #68]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 80074fe:	f005 fdbb 	bl	800d078 <HAL_UART_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8007508:	f7fe fc96 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800750c:	2100      	movs	r1, #0
 800750e:	480d      	ldr	r0, [pc, #52]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 8007510:	f007 fb0e 	bl	800eb30 <HAL_UARTEx_SetTxFifoThreshold>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800751a:	f7fe fc8d 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800751e:	2100      	movs	r1, #0
 8007520:	4808      	ldr	r0, [pc, #32]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 8007522:	f007 fb43 	bl	800ebac <HAL_UARTEx_SetRxFifoThreshold>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800752c:	f7fe fc84 	bl	8005e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007530:	4804      	ldr	r0, [pc, #16]	@ (8007544 <MX_USART2_UART_Init+0x94>)
 8007532:	f007 fac4 	bl	800eabe <HAL_UARTEx_DisableFifoMode>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800753c:	f7fe fc7c 	bl	8005e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007540:	bf00      	nop
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20001ed0 	.word	0x20001ed0
 8007548:	40004400 	.word	0x40004400

0800754c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b0a0      	sub	sp, #128	@ 0x80
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007554:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007564:	f107 0318 	add.w	r3, r7, #24
 8007568:	2254      	movs	r2, #84	@ 0x54
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f007 fd63 	bl	800f038 <memset>
  if(uartHandle->Instance==LPUART1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a99      	ldr	r2, [pc, #612]	@ (80077dc <HAL_UART_MspInit+0x290>)
 8007578:	4293      	cmp	r3, r2
 800757a:	f040 8093 	bne.w	80076a4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800757e:	2320      	movs	r3, #32
 8007580:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007582:	2300      	movs	r3, #0
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	4618      	mov	r0, r3
 800758c:	f003 fa3e 	bl	800aa0c <HAL_RCCEx_PeriphCLKConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007596:	f7fe fc4f 	bl	8005e38 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800759a:	4b91      	ldr	r3, [pc, #580]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 800759c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759e:	4a90      	ldr	r2, [pc, #576]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80075a0:	f043 0301 	orr.w	r3, r3, #1
 80075a4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80075a6:	4b8e      	ldr	r3, [pc, #568]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80075a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075b2:	4b8b      	ldr	r3, [pc, #556]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80075b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b6:	4a8a      	ldr	r2, [pc, #552]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80075b8:	f043 0302 	orr.w	r3, r3, #2
 80075bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075be:	4b88      	ldr	r3, [pc, #544]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80075c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80075ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80075ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d0:	2302      	movs	r3, #2
 80075d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d8:	2300      	movs	r3, #0
 80075da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80075dc:	2308      	movs	r3, #8
 80075de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80075e4:	4619      	mov	r1, r3
 80075e6:	487f      	ldr	r0, [pc, #508]	@ (80077e4 <HAL_UART_MspInit+0x298>)
 80075e8:	f002 fa64 	bl	8009ab4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80075ec:	4b7e      	ldr	r3, [pc, #504]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 80075ee:	4a7f      	ldr	r2, [pc, #508]	@ (80077ec <HAL_UART_MspInit+0x2a0>)
 80075f0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80075f2:	4b7d      	ldr	r3, [pc, #500]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 80075f4:	2222      	movs	r2, #34	@ 0x22
 80075f6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075f8:	4b7b      	ldr	r3, [pc, #492]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075fe:	4b7a      	ldr	r3, [pc, #488]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007600:	2200      	movs	r2, #0
 8007602:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007604:	4b78      	ldr	r3, [pc, #480]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007606:	2280      	movs	r2, #128	@ 0x80
 8007608:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800760a:	4b77      	ldr	r3, [pc, #476]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 800760c:	2200      	movs	r2, #0
 800760e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007610:	4b75      	ldr	r3, [pc, #468]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007612:	2200      	movs	r2, #0
 8007614:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8007616:	4b74      	ldr	r3, [pc, #464]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007618:	2200      	movs	r2, #0
 800761a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800761c:	4b72      	ldr	r3, [pc, #456]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 800761e:	2200      	movs	r2, #0
 8007620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007622:	4871      	ldr	r0, [pc, #452]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007624:	f001 ff14 	bl	8009450 <HAL_DMA_Init>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800762e:	f7fe fc03 	bl	8005e38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a6c      	ldr	r2, [pc, #432]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 8007636:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800763a:	4a6b      	ldr	r2, [pc, #428]	@ (80077e8 <HAL_UART_MspInit+0x29c>)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8007640:	4b6b      	ldr	r3, [pc, #428]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007642:	4a6c      	ldr	r2, [pc, #432]	@ (80077f4 <HAL_UART_MspInit+0x2a8>)
 8007644:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8007646:	4b6a      	ldr	r3, [pc, #424]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007648:	2223      	movs	r2, #35	@ 0x23
 800764a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800764c:	4b68      	ldr	r3, [pc, #416]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 800764e:	2210      	movs	r2, #16
 8007650:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007652:	4b67      	ldr	r3, [pc, #412]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007654:	2200      	movs	r2, #0
 8007656:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007658:	4b65      	ldr	r3, [pc, #404]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 800765a:	2280      	movs	r2, #128	@ 0x80
 800765c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800765e:	4b64      	ldr	r3, [pc, #400]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007660:	2200      	movs	r2, #0
 8007662:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007664:	4b62      	ldr	r3, [pc, #392]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007666:	2200      	movs	r2, #0
 8007668:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800766a:	4b61      	ldr	r3, [pc, #388]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 800766c:	2200      	movs	r2, #0
 800766e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007670:	4b5f      	ldr	r3, [pc, #380]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007672:	2200      	movs	r2, #0
 8007674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007676:	485e      	ldr	r0, [pc, #376]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 8007678:	f001 feea 	bl	8009450 <HAL_DMA_Init>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007682:	f7fe fbd9 	bl	8005e38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a59      	ldr	r2, [pc, #356]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 800768a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800768c:	4a58      	ldr	r2, [pc, #352]	@ (80077f0 <HAL_UART_MspInit+0x2a4>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	205b      	movs	r0, #91	@ 0x5b
 8007698:	f001 fea5 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800769c:	205b      	movs	r0, #91	@ 0x5b
 800769e:	f001 febc 	bl	800941a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80076a2:	e097      	b.n	80077d4 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a53      	ldr	r2, [pc, #332]	@ (80077f8 <HAL_UART_MspInit+0x2ac>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	f040 8092 	bne.w	80077d4 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80076b0:	2302      	movs	r3, #2
 80076b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80076b4:	2300      	movs	r3, #0
 80076b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	4618      	mov	r0, r3
 80076be:	f003 f9a5 	bl	800aa0c <HAL_RCCEx_PeriphCLKConfig>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_UART_MspInit+0x180>
      Error_Handler();
 80076c8:	f7fe fbb6 	bl	8005e38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076cc:	4b44      	ldr	r3, [pc, #272]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d0:	4a43      	ldr	r2, [pc, #268]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80076d8:	4b41      	ldr	r3, [pc, #260]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076e4:	4b3e      	ldr	r3, [pc, #248]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e8:	4a3d      	ldr	r2, [pc, #244]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076f0:	4b3b      	ldr	r3, [pc, #236]	@ (80077e0 <HAL_UART_MspInit+0x294>)
 80076f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80076fc:	230c      	movs	r3, #12
 80076fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007700:	2302      	movs	r3, #2
 8007702:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007704:	2300      	movs	r3, #0
 8007706:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007708:	2300      	movs	r3, #0
 800770a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800770c:	2307      	movs	r3, #7
 800770e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007710:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007714:	4619      	mov	r1, r3
 8007716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800771a:	f002 f9cb 	bl	8009ab4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800771e:	4b37      	ldr	r3, [pc, #220]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007720:	4a37      	ldr	r2, [pc, #220]	@ (8007800 <HAL_UART_MspInit+0x2b4>)
 8007722:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007724:	4b35      	ldr	r3, [pc, #212]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007726:	221a      	movs	r2, #26
 8007728:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800772a:	4b34      	ldr	r3, [pc, #208]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 800772c:	2200      	movs	r2, #0
 800772e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007730:	4b32      	ldr	r3, [pc, #200]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007732:	2200      	movs	r2, #0
 8007734:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007736:	4b31      	ldr	r3, [pc, #196]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007738:	2280      	movs	r2, #128	@ 0x80
 800773a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800773c:	4b2f      	ldr	r3, [pc, #188]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 800773e:	2200      	movs	r2, #0
 8007740:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007742:	4b2e      	ldr	r3, [pc, #184]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007744:	2200      	movs	r2, #0
 8007746:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007748:	4b2c      	ldr	r3, [pc, #176]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 800774a:	2200      	movs	r2, #0
 800774c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800774e:	4b2b      	ldr	r3, [pc, #172]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007750:	2200      	movs	r2, #0
 8007752:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007754:	4829      	ldr	r0, [pc, #164]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007756:	f001 fe7b 	bl	8009450 <HAL_DMA_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8007760:	f7fe fb6a 	bl	8005e38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a25      	ldr	r2, [pc, #148]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800776c:	4a23      	ldr	r2, [pc, #140]	@ (80077fc <HAL_UART_MspInit+0x2b0>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8007772:	4b24      	ldr	r3, [pc, #144]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 8007774:	4a24      	ldr	r2, [pc, #144]	@ (8007808 <HAL_UART_MspInit+0x2bc>)
 8007776:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007778:	4b22      	ldr	r3, [pc, #136]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 800777a:	221b      	movs	r2, #27
 800777c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800777e:	4b21      	ldr	r3, [pc, #132]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 8007780:	2210      	movs	r2, #16
 8007782:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007784:	4b1f      	ldr	r3, [pc, #124]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 8007786:	2200      	movs	r2, #0
 8007788:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800778a:	4b1e      	ldr	r3, [pc, #120]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 800778c:	2280      	movs	r2, #128	@ 0x80
 800778e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007790:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 8007792:	2200      	movs	r2, #0
 8007794:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007796:	4b1b      	ldr	r3, [pc, #108]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 8007798:	2200      	movs	r2, #0
 800779a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800779c:	4b19      	ldr	r3, [pc, #100]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 800779e:	2200      	movs	r2, #0
 80077a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80077a2:	4b18      	ldr	r3, [pc, #96]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80077a8:	4816      	ldr	r0, [pc, #88]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 80077aa:	f001 fe51 	bl	8009450 <HAL_DMA_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80077b4:	f7fe fb40 	bl	8005e38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a12      	ldr	r2, [pc, #72]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 80077bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80077be:	4a11      	ldr	r2, [pc, #68]	@ (8007804 <HAL_UART_MspInit+0x2b8>)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80077c4:	2200      	movs	r2, #0
 80077c6:	2100      	movs	r1, #0
 80077c8:	2026      	movs	r0, #38	@ 0x26
 80077ca:	f001 fe0c 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077ce:	2026      	movs	r0, #38	@ 0x26
 80077d0:	f001 fe23 	bl	800941a <HAL_NVIC_EnableIRQ>
}
 80077d4:	bf00      	nop
 80077d6:	3780      	adds	r7, #128	@ 0x80
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40008000 	.word	0x40008000
 80077e0:	40021000 	.word	0x40021000
 80077e4:	48000400 	.word	0x48000400
 80077e8:	20001f9c 	.word	0x20001f9c
 80077ec:	40020044 	.word	0x40020044
 80077f0:	20001ffc 	.word	0x20001ffc
 80077f4:	40020058 	.word	0x40020058
 80077f8:	40004400 	.word	0x40004400
 80077fc:	2000205c 	.word	0x2000205c
 8007800:	4002001c 	.word	0x4002001c
 8007804:	200020bc 	.word	0x200020bc
 8007808:	40020030 	.word	0x40020030

0800780c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800780c:	480d      	ldr	r0, [pc, #52]	@ (8007844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800780e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007810:	f7ff f994 	bl	8006b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007814:	480c      	ldr	r0, [pc, #48]	@ (8007848 <LoopForever+0x6>)
  ldr r1, =_edata
 8007816:	490d      	ldr	r1, [pc, #52]	@ (800784c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007818:	4a0d      	ldr	r2, [pc, #52]	@ (8007850 <LoopForever+0xe>)
  movs r3, #0
 800781a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800781c:	e002      	b.n	8007824 <LoopCopyDataInit>

0800781e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800781e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007822:	3304      	adds	r3, #4

08007824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007828:	d3f9      	bcc.n	800781e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800782a:	4a0a      	ldr	r2, [pc, #40]	@ (8007854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800782c:	4c0a      	ldr	r4, [pc, #40]	@ (8007858 <LoopForever+0x16>)
  movs r3, #0
 800782e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007830:	e001      	b.n	8007836 <LoopFillZerobss>

08007832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007834:	3204      	adds	r2, #4

08007836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007838:	d3fb      	bcc.n	8007832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800783a:	f007 fc1b 	bl	800f074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800783e:	f7fd f8b1 	bl	80049a4 <main>

08007842 <LoopForever>:

LoopForever:
    b LoopForever
 8007842:	e7fe      	b.n	8007842 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8007844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800784c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8007850:	08011528 	.word	0x08011528
  ldr r2, =_sbss
 8007854:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8007858:	20002268 	.word	0x20002268

0800785c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800785c:	e7fe      	b.n	800785c <ADC1_2_IRQHandler>

0800785e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007868:	2003      	movs	r0, #3
 800786a:	f001 fdb1 	bl	80093d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800786e:	2000      	movs	r0, #0
 8007870:	f000 f80e 	bl	8007890 <HAL_InitTick>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	71fb      	strb	r3, [r7, #7]
 800787e:	e001      	b.n	8007884 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007880:	f7ff f858 	bl	8006934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007884:	79fb      	ldrb	r3, [r7, #7]

}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800789c:	4b16      	ldr	r3, [pc, #88]	@ (80078f8 <HAL_InitTick+0x68>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d022      	beq.n	80078ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80078a4:	4b15      	ldr	r3, [pc, #84]	@ (80078fc <HAL_InitTick+0x6c>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	4b13      	ldr	r3, [pc, #76]	@ (80078f8 <HAL_InitTick+0x68>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80078b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fdbc 	bl	8009436 <HAL_SYSTICK_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10f      	bne.n	80078e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d809      	bhi.n	80078de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078ca:	2200      	movs	r2, #0
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	f001 fd88 	bl	80093e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007900 <HAL_InitTick+0x70>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	e007      	b.n	80078ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	73fb      	strb	r3, [r7, #15]
 80078e2:	e004      	b.n	80078ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e001      	b.n	80078ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000104 	.word	0x20000104
 80078fc:	200000fc 	.word	0x200000fc
 8007900:	20000100 	.word	0x20000100

08007904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007908:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <HAL_IncTick+0x1c>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_IncTick+0x20>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4413      	add	r3, r2
 8007912:	4a03      	ldr	r2, [pc, #12]	@ (8007920 <HAL_IncTick+0x1c>)
 8007914:	6013      	str	r3, [r2, #0]
}
 8007916:	bf00      	nop
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	2000211c 	.word	0x2000211c
 8007924:	20000104 	.word	0x20000104

08007928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return uwTick;
 800792c:	4b03      	ldr	r3, [pc, #12]	@ (800793c <HAL_GetTick+0x14>)
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	2000211c 	.word	0x2000211c

08007940 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3360      	adds	r3, #96	@ 0x60
 80079ba:	461a      	mov	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	4b08      	ldr	r3, [pc, #32]	@ (80079ec <LL_ADC_SetOffset+0x44>)
 80079ca:	4013      	ands	r3, r2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	03fff000 	.word	0x03fff000

080079f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3360      	adds	r3, #96	@ 0x60
 80079fe:	461a      	mov	r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3360      	adds	r3, #96	@ 0x60
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3360      	adds	r3, #96	@ 0x60
 8007a62:	461a      	mov	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3360      	adds	r3, #96	@ 0x60
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	615a      	str	r2, [r3, #20]
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b087      	sub	sp, #28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3330      	adds	r3, #48	@ 0x30
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f003 030c 	and.w	r3, r3, #12
 8007b26:	4413      	add	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	211f      	movs	r1, #31
 8007b36:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	401a      	ands	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	0e9b      	lsrs	r3, r3, #26
 8007b42:	f003 011f 	and.w	r1, r3, #31
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	431a      	orrs	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b087      	sub	sp, #28
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3314      	adds	r3, #20
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	0e5b      	lsrs	r3, r3, #25
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	4413      	add	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	0d1b      	lsrs	r3, r3, #20
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	2107      	movs	r1, #7
 8007b90:	fa01 f303 	lsl.w	r3, r1, r3
 8007b94:	43db      	mvns	r3, r3
 8007b96:	401a      	ands	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	0d1b      	lsrs	r3, r3, #20
 8007b9c:	f003 031f 	and.w	r3, r3, #31
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007bac:	bf00      	nop
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0318 	and.w	r3, r3, #24
 8007bda:	4908      	ldr	r1, [pc, #32]	@ (8007bfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8007bdc:	40d9      	lsrs	r1, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	400b      	ands	r3, r1
 8007be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	0007ffff 	.word	0x0007ffff

08007c00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 031f 	and.w	r3, r3, #31
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6093      	str	r3, [r2, #8]
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c54:	d101      	bne.n	8007c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007c7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca4:	d101      	bne.n	8007caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007ccc:	f043 0201 	orr.w	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007cf4:	f043 0202 	orr.w	r2, r3, #2
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <LL_ADC_IsEnabled+0x18>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <LL_ADC_IsEnabled+0x1a>
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d101      	bne.n	8007d46 <LL_ADC_IsDisableOngoing+0x18>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <LL_ADC_IsDisableOngoing+0x1a>
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007d68:	f043 0204 	orr.w	r2, r3, #4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d101      	bne.n	8007d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d101      	bne.n	8007dba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b089      	sub	sp, #36	@ 0x24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e1a9      	b.n	8008136 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fc fc45 	bl	8004680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff ff19 	bl	8007c40 <LL_ADC_IsDeepPowerDownEnabled>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d004      	beq.n	8007e1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff feff 	bl	8007c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff ff34 	bl	8007c90 <LL_ADC_IsInternalRegulatorEnabled>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d115      	bne.n	8007e5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ff18 	bl	8007c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e38:	4b9c      	ldr	r3, [pc, #624]	@ (80080ac <HAL_ADC_Init+0x2e4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	099b      	lsrs	r3, r3, #6
 8007e3e:	4a9c      	ldr	r2, [pc, #624]	@ (80080b0 <HAL_ADC_Init+0x2e8>)
 8007e40:	fba2 2303 	umull	r2, r3, r2, r3
 8007e44:	099b      	lsrs	r3, r3, #6
 8007e46:	3301      	adds	r3, #1
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007e4c:	e002      	b.n	8007e54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f9      	bne.n	8007e4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff ff16 	bl	8007c90 <LL_ADC_IsInternalRegulatorEnabled>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10d      	bne.n	8007e86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6e:	f043 0210 	orr.w	r2, r3, #16
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e7a:	f043 0201 	orr.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff ff76 	bl	8007d7c <LL_ADC_REG_IsConversionOngoing>
 8007e90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 8142 	bne.w	8008124 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 813e 	bne.w	8008124 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007eb0:	f043 0202 	orr.w	r2, r3, #2
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff ff23 	bl	8007d08 <LL_ADC_IsEnabled>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d141      	bne.n	8007f4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ed0:	d004      	beq.n	8007edc <HAL_ADC_Init+0x114>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a77      	ldr	r2, [pc, #476]	@ (80080b4 <HAL_ADC_Init+0x2ec>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d10f      	bne.n	8007efc <HAL_ADC_Init+0x134>
 8007edc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007ee0:	f7ff ff12 	bl	8007d08 <LL_ADC_IsEnabled>
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4873      	ldr	r0, [pc, #460]	@ (80080b4 <HAL_ADC_Init+0x2ec>)
 8007ee8:	f7ff ff0e 	bl	8007d08 <LL_ADC_IsEnabled>
 8007eec:	4603      	mov	r3, r0
 8007eee:	4323      	orrs	r3, r4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	e012      	b.n	8007f22 <HAL_ADC_Init+0x15a>
 8007efc:	486e      	ldr	r0, [pc, #440]	@ (80080b8 <HAL_ADC_Init+0x2f0>)
 8007efe:	f7ff ff03 	bl	8007d08 <LL_ADC_IsEnabled>
 8007f02:	4604      	mov	r4, r0
 8007f04:	486d      	ldr	r0, [pc, #436]	@ (80080bc <HAL_ADC_Init+0x2f4>)
 8007f06:	f7ff feff 	bl	8007d08 <LL_ADC_IsEnabled>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	431c      	orrs	r4, r3
 8007f0e:	486c      	ldr	r0, [pc, #432]	@ (80080c0 <HAL_ADC_Init+0x2f8>)
 8007f10:	f7ff fefa 	bl	8007d08 <LL_ADC_IsEnabled>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4323      	orrs	r3, r4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d012      	beq.n	8007f4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f2e:	d004      	beq.n	8007f3a <HAL_ADC_Init+0x172>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a5f      	ldr	r2, [pc, #380]	@ (80080b4 <HAL_ADC_Init+0x2ec>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d101      	bne.n	8007f3e <HAL_ADC_Init+0x176>
 8007f3a:	4a62      	ldr	r2, [pc, #392]	@ (80080c4 <HAL_ADC_Init+0x2fc>)
 8007f3c:	e000      	b.n	8007f40 <HAL_ADC_Init+0x178>
 8007f3e:	4a62      	ldr	r2, [pc, #392]	@ (80080c8 <HAL_ADC_Init+0x300>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7ff fcfa 	bl	8007940 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7f5b      	ldrb	r3, [r3, #29]
 8007f50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007f5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007f62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d106      	bne.n	8007f88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	045b      	lsls	r3, r3, #17
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d009      	beq.n	8007fa4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	4b48      	ldr	r3, [pc, #288]	@ (80080cc <HAL_ADC_Init+0x304>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	69b9      	ldr	r1, [r7, #24]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fee5 	bl	8007da2 <LL_ADC_INJ_IsConversionOngoing>
 8007fd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d17f      	bne.n	80080e0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d17c      	bne.n	80080e0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007fea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ff2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008002:	f023 0302 	bic.w	r3, r3, #2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	69b9      	ldr	r1, [r7, #24]
 800800c:	430b      	orrs	r3, r1
 800800e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008030:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6911      	ldr	r1, [r2, #16]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	430b      	orrs	r3, r1
 8008042:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8008046:	e013      	b.n	8008070 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008056:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800806c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008076:	2b01      	cmp	r3, #1
 8008078:	d12a      	bne.n	80080d0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008084:	f023 0304 	bic.w	r3, r3, #4
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008090:	4311      	orrs	r1, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008096:	4311      	orrs	r1, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800809c:	430a      	orrs	r2, r1
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0201 	orr.w	r2, r2, #1
 80080a8:	611a      	str	r2, [r3, #16]
 80080aa:	e019      	b.n	80080e0 <HAL_ADC_Init+0x318>
 80080ac:	200000fc 	.word	0x200000fc
 80080b0:	053e2d63 	.word	0x053e2d63
 80080b4:	50000100 	.word	0x50000100
 80080b8:	50000400 	.word	0x50000400
 80080bc:	50000500 	.word	0x50000500
 80080c0:	50000600 	.word	0x50000600
 80080c4:	50000300 	.word	0x50000300
 80080c8:	50000700 	.word	0x50000700
 80080cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d10c      	bne.n	8008102 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ee:	f023 010f 	bic.w	r1, r3, #15
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	1e5a      	subs	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008100:	e007      	b.n	8008112 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 020f 	bic.w	r2, r2, #15
 8008110:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	f043 0201 	orr.w	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008122:	e007      	b.n	8008134 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008128:	f043 0210 	orr.w	r2, r3, #16
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008134:	7ffb      	ldrb	r3, [r7, #31]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3724      	adds	r7, #36	@ 0x24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd90      	pop	{r4, r7, pc}
 800813e:	bf00      	nop

08008140 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008154:	d004      	beq.n	8008160 <HAL_ADC_Start_DMA+0x20>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a5a      	ldr	r2, [pc, #360]	@ (80082c4 <HAL_ADC_Start_DMA+0x184>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d101      	bne.n	8008164 <HAL_ADC_Start_DMA+0x24>
 8008160:	4b59      	ldr	r3, [pc, #356]	@ (80082c8 <HAL_ADC_Start_DMA+0x188>)
 8008162:	e000      	b.n	8008166 <HAL_ADC_Start_DMA+0x26>
 8008164:	4b59      	ldr	r3, [pc, #356]	@ (80082cc <HAL_ADC_Start_DMA+0x18c>)
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fd4a 	bl	8007c00 <LL_ADC_GetMultimode>
 800816c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe02 	bl	8007d7c <LL_ADC_REG_IsConversionOngoing>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 809b 	bne.w	80082b6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <HAL_ADC_Start_DMA+0x4e>
 800818a:	2302      	movs	r3, #2
 800818c:	e096      	b.n	80082bc <HAL_ADC_Start_DMA+0x17c>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a4d      	ldr	r2, [pc, #308]	@ (80082d0 <HAL_ADC_Start_DMA+0x190>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d008      	beq.n	80081b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d005      	beq.n	80081b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	d002      	beq.n	80081b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b09      	cmp	r3, #9
 80081b0:	d17a      	bne.n	80082a8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 fcf6 	bl	8008ba4 <ADC_Enable>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d16d      	bne.n	800829e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a3a      	ldr	r2, [pc, #232]	@ (80082c4 <HAL_ADC_Start_DMA+0x184>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_ADC_Start_DMA+0xb4>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a3b      	ldr	r2, [pc, #236]	@ (80082d4 <HAL_ADC_Start_DMA+0x194>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d002      	beq.n	80081f0 <HAL_ADC_Start_DMA+0xb0>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	e003      	b.n	80081f8 <HAL_ADC_Start_DMA+0xb8>
 80081f0:	4b39      	ldr	r3, [pc, #228]	@ (80082d8 <HAL_ADC_Start_DMA+0x198>)
 80081f2:	e001      	b.n	80081f8 <HAL_ADC_Start_DMA+0xb8>
 80081f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d002      	beq.n	8008206 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800820a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008222:	f023 0206 	bic.w	r2, r3, #6
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	661a      	str	r2, [r3, #96]	@ 0x60
 800822a:	e002      	b.n	8008232 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008236:	4a29      	ldr	r2, [pc, #164]	@ (80082dc <HAL_ADC_Start_DMA+0x19c>)
 8008238:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823e:	4a28      	ldr	r2, [pc, #160]	@ (80082e0 <HAL_ADC_Start_DMA+0x1a0>)
 8008240:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	4a27      	ldr	r2, [pc, #156]	@ (80082e4 <HAL_ADC_Start_DMA+0x1a4>)
 8008248:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	221c      	movs	r2, #28
 8008250:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0210 	orr.w	r2, r2, #16
 8008268:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0201 	orr.w	r2, r2, #1
 8008278:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3340      	adds	r3, #64	@ 0x40
 8008284:	4619      	mov	r1, r3
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f001 f989 	bl	80095a0 <HAL_DMA_Start_IT>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fd5c 	bl	8007d54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800829c:	e00d      	b.n	80082ba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80082a6:	e008      	b.n	80082ba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80082b4:	e001      	b.n	80082ba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
 80082b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	50000100 	.word	0x50000100
 80082c8:	50000300 	.word	0x50000300
 80082cc:	50000700 	.word	0x50000700
 80082d0:	50000600 	.word	0x50000600
 80082d4:	50000500 	.word	0x50000500
 80082d8:	50000400 	.word	0x50000400
 80082dc:	08008d8f 	.word	0x08008d8f
 80082e0:	08008e67 	.word	0x08008e67
 80082e4:	08008e83 	.word	0x08008e83

080082e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b0b6      	sub	sp, #216	@ 0xd8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800833e:	2b01      	cmp	r3, #1
 8008340:	d102      	bne.n	8008348 <HAL_ADC_ConfigChannel+0x24>
 8008342:	2302      	movs	r3, #2
 8008344:	f000 bc13 	b.w	8008b6e <HAL_ADC_ConfigChannel+0x84a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fd11 	bl	8007d7c <LL_ADC_REG_IsConversionOngoing>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 83f3 	bne.w	8008b48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	6859      	ldr	r1, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7ff fbcb 	bl	8007b0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fcff 	bl	8007d7c <LL_ADC_REG_IsConversionOngoing>
 800837e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff fd0b 	bl	8007da2 <LL_ADC_INJ_IsConversionOngoing>
 800838c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008390:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 81d9 	bne.w	800874c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800839a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 81d4 	bne.w	800874c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ac:	d10f      	bne.n	80083ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7ff fbd2 	bl	8007b62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fb79 	bl	8007abe <LL_ADC_SetSamplingTimeCommonConfig>
 80083cc:	e00e      	b.n	80083ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7ff fbc1 	bl	8007b62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fb69 	bl	8007abe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	695a      	ldr	r2, [r3, #20]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d022      	beq.n	8008454 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6919      	ldr	r1, [r3, #16]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800841e:	f7ff fac3 	bl	80079a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6919      	ldr	r1, [r3, #16]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	461a      	mov	r2, r3
 8008430:	f7ff fb0f 	bl	8007a52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008440:	2b01      	cmp	r3, #1
 8008442:	d102      	bne.n	800844a <HAL_ADC_ConfigChannel+0x126>
 8008444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008448:	e000      	b.n	800844c <HAL_ADC_ConfigChannel+0x128>
 800844a:	2300      	movs	r3, #0
 800844c:	461a      	mov	r2, r3
 800844e:	f7ff fb1b 	bl	8007a88 <LL_ADC_SetOffsetSaturation>
 8008452:	e17b      	b.n	800874c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2100      	movs	r1, #0
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fac8 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008460:	4603      	mov	r3, r0
 8008462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_ADC_ConfigChannel+0x15c>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2100      	movs	r1, #0
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fabd 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008476:	4603      	mov	r3, r0
 8008478:	0e9b      	lsrs	r3, r3, #26
 800847a:	f003 021f 	and.w	r2, r3, #31
 800847e:	e01e      	b.n	80084be <HAL_ADC_ConfigChannel+0x19a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fab2 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 800848c:	4603      	mov	r3, r0
 800848e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008496:	fa93 f3a3 	rbit	r3, r3
 800849a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800849e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80084a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80084ae:	2320      	movs	r3, #32
 80084b0:	e004      	b.n	80084bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80084b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084b6:	fab3 f383 	clz	r3, r3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <HAL_ADC_ConfigChannel+0x1b2>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	0e9b      	lsrs	r3, r3, #26
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	e018      	b.n	8008508 <HAL_ADC_ConfigChannel+0x1e4>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80084e2:	fa93 f3a3 	rbit	r3, r3
 80084e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80084ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80084f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80084fa:	2320      	movs	r3, #32
 80084fc:	e004      	b.n	8008508 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80084fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008502:	fab3 f383 	clz	r3, r3
 8008506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008508:	429a      	cmp	r2, r3
 800850a:	d106      	bne.n	800851a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2200      	movs	r2, #0
 8008512:	2100      	movs	r1, #0
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fa81 	bl	8007a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2101      	movs	r1, #1
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fa65 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008526:	4603      	mov	r3, r0
 8008528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x222>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2101      	movs	r1, #1
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff fa5a 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 800853c:	4603      	mov	r3, r0
 800853e:	0e9b      	lsrs	r3, r3, #26
 8008540:	f003 021f 	and.w	r2, r3, #31
 8008544:	e01e      	b.n	8008584 <HAL_ADC_ConfigChannel+0x260>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2101      	movs	r1, #1
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fa4f 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008552:	4603      	mov	r3, r0
 8008554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800855c:	fa93 f3a3 	rbit	r3, r3
 8008560:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800856c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008574:	2320      	movs	r3, #32
 8008576:	e004      	b.n	8008582 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800857c:	fab3 f383 	clz	r3, r3
 8008580:	b2db      	uxtb	r3, r3
 8008582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <HAL_ADC_ConfigChannel+0x278>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0e9b      	lsrs	r3, r3, #26
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	e018      	b.n	80085ce <HAL_ADC_ConfigChannel+0x2aa>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085a8:	fa93 f3a3 	rbit	r3, r3
 80085ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80085b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80085b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80085c0:	2320      	movs	r3, #32
 80085c2:	e004      	b.n	80085ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80085c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085c8:	fab3 f383 	clz	r3, r3
 80085cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d106      	bne.n	80085e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	2101      	movs	r1, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fa1e 	bl	8007a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2102      	movs	r1, #2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fa02 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <HAL_ADC_ConfigChannel+0x2e8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2102      	movs	r1, #2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff f9f7 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008602:	4603      	mov	r3, r0
 8008604:	0e9b      	lsrs	r3, r3, #26
 8008606:	f003 021f 	and.w	r2, r3, #31
 800860a:	e01e      	b.n	800864a <HAL_ADC_ConfigChannel+0x326>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2102      	movs	r1, #2
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f9ec 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 8008618:	4603      	mov	r3, r0
 800861a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800861e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008622:	fa93 f3a3 	rbit	r3, r3
 8008626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800862a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800862e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008632:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800863a:	2320      	movs	r3, #32
 800863c:	e004      	b.n	8008648 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800863e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008642:	fab3 f383 	clz	r3, r3
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <HAL_ADC_ConfigChannel+0x33e>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	0e9b      	lsrs	r3, r3, #26
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	e016      	b.n	8008690 <HAL_ADC_ConfigChannel+0x36c>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800866e:	fa93 f3a3 	rbit	r3, r3
 8008672:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800867a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008682:	2320      	movs	r3, #32
 8008684:	e004      	b.n	8008690 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800868a:	fab3 f383 	clz	r3, r3
 800868e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008690:	429a      	cmp	r2, r3
 8008692:	d106      	bne.n	80086a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	2102      	movs	r1, #2
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff f9bd 	bl	8007a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2103      	movs	r1, #3
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff f9a1 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <HAL_ADC_ConfigChannel+0x3aa>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2103      	movs	r1, #3
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f996 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 80086c4:	4603      	mov	r3, r0
 80086c6:	0e9b      	lsrs	r3, r3, #26
 80086c8:	f003 021f 	and.w	r2, r3, #31
 80086cc:	e017      	b.n	80086fe <HAL_ADC_ConfigChannel+0x3da>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2103      	movs	r1, #3
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff f98b 	bl	80079f0 <LL_ADC_GetOffsetChannel>
 80086da:	4603      	mov	r3, r0
 80086dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086e0:	fa93 f3a3 	rbit	r3, r3
 80086e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80086e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80086ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80086f0:	2320      	movs	r3, #32
 80086f2:	e003      	b.n	80086fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80086f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086f6:	fab3 f383 	clz	r3, r3
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <HAL_ADC_ConfigChannel+0x3f2>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	0e9b      	lsrs	r3, r3, #26
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	e011      	b.n	800873a <HAL_ADC_ConfigChannel+0x416>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008726:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800872e:	2320      	movs	r3, #32
 8008730:	e003      	b.n	800873a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008734:	fab3 f383 	clz	r3, r3
 8008738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800873a:	429a      	cmp	r2, r3
 800873c:	d106      	bne.n	800874c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	2103      	movs	r1, #3
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff f968 	bl	8007a1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fad9 	bl	8007d08 <LL_ADC_IsEnabled>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 813d 	bne.w	80089d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6819      	ldr	r1, [r3, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	461a      	mov	r2, r3
 800876c:	f7ff fa24 	bl	8007bb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	4aa2      	ldr	r2, [pc, #648]	@ (8008a00 <HAL_ADC_ConfigChannel+0x6dc>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f040 812e 	bne.w	80089d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <HAL_ADC_ConfigChannel+0x480>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	0e9b      	lsrs	r3, r3, #26
 8008792:	3301      	adds	r3, #1
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	2b09      	cmp	r3, #9
 800879a:	bf94      	ite	ls
 800879c:	2301      	movls	r3, #1
 800879e:	2300      	movhi	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	e019      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x4b4>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087ac:	fa93 f3a3 	rbit	r3, r3
 80087b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80087b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80087b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80087bc:	2320      	movs	r3, #32
 80087be:	e003      	b.n	80087c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80087c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087c2:	fab3 f383 	clz	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	3301      	adds	r3, #1
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2b09      	cmp	r3, #9
 80087d0:	bf94      	ite	ls
 80087d2:	2301      	movls	r3, #1
 80087d4:	2300      	movhi	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d079      	beq.n	80088d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d107      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x4d4>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	0e9b      	lsrs	r3, r3, #26
 80087ee:	3301      	adds	r3, #1
 80087f0:	069b      	lsls	r3, r3, #26
 80087f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80087f6:	e015      	b.n	8008824 <HAL_ADC_ConfigChannel+0x500>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008800:	fa93 f3a3 	rbit	r3, r3
 8008804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008808:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800880a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008810:	2320      	movs	r3, #32
 8008812:	e003      	b.n	800881c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008816:	fab3 f383 	clz	r3, r3
 800881a:	b2db      	uxtb	r3, r3
 800881c:	3301      	adds	r3, #1
 800881e:	069b      	lsls	r3, r3, #26
 8008820:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x520>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	0e9b      	lsrs	r3, r3, #26
 8008836:	3301      	adds	r3, #1
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	e017      	b.n	8008874 <HAL_ADC_ConfigChannel+0x550>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800884c:	fa93 f3a3 	rbit	r3, r3
 8008850:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008854:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800885c:	2320      	movs	r3, #32
 800885e:	e003      	b.n	8008868 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008862:	fab3 f383 	clz	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	3301      	adds	r3, #1
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	2101      	movs	r1, #1
 8008870:	fa01 f303 	lsl.w	r3, r1, r3
 8008874:	ea42 0103 	orr.w	r1, r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <HAL_ADC_ConfigChannel+0x576>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	0e9b      	lsrs	r3, r3, #26
 800888a:	3301      	adds	r3, #1
 800888c:	f003 021f 	and.w	r2, r3, #31
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	051b      	lsls	r3, r3, #20
 8008898:	e018      	b.n	80088cc <HAL_ADC_ConfigChannel+0x5a8>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	fa93 f3a3 	rbit	r3, r3
 80088a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80088a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80088ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80088b2:	2320      	movs	r3, #32
 80088b4:	e003      	b.n	80088be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	fab3 f383 	clz	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	3301      	adds	r3, #1
 80088c0:	f003 021f 	and.w	r2, r3, #31
 80088c4:	4613      	mov	r3, r2
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	4413      	add	r3, r2
 80088ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80088cc:	430b      	orrs	r3, r1
 80088ce:	e07e      	b.n	80089ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <HAL_ADC_ConfigChannel+0x5c8>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	0e9b      	lsrs	r3, r3, #26
 80088e2:	3301      	adds	r3, #1
 80088e4:	069b      	lsls	r3, r3, #26
 80088e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80088ea:	e015      	b.n	8008918 <HAL_ADC_ConfigChannel+0x5f4>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f4:	fa93 f3a3 	rbit	r3, r3
 80088f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008904:	2320      	movs	r3, #32
 8008906:	e003      	b.n	8008910 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	fab3 f383 	clz	r3, r3
 800890e:	b2db      	uxtb	r3, r3
 8008910:	3301      	adds	r3, #1
 8008912:	069b      	lsls	r3, r3, #26
 8008914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <HAL_ADC_ConfigChannel+0x614>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	0e9b      	lsrs	r3, r3, #26
 800892a:	3301      	adds	r3, #1
 800892c:	f003 031f 	and.w	r3, r3, #31
 8008930:	2101      	movs	r1, #1
 8008932:	fa01 f303 	lsl.w	r3, r1, r3
 8008936:	e017      	b.n	8008968 <HAL_ADC_ConfigChannel+0x644>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	fa93 f3a3 	rbit	r3, r3
 8008944:	61fb      	str	r3, [r7, #28]
  return result;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008950:	2320      	movs	r3, #32
 8008952:	e003      	b.n	800895c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	fab3 f383 	clz	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	3301      	adds	r3, #1
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	2101      	movs	r1, #1
 8008964:	fa01 f303 	lsl.w	r3, r1, r3
 8008968:	ea42 0103 	orr.w	r1, r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10d      	bne.n	8008994 <HAL_ADC_ConfigChannel+0x670>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	0e9b      	lsrs	r3, r3, #26
 800897e:	3301      	adds	r3, #1
 8008980:	f003 021f 	and.w	r2, r3, #31
 8008984:	4613      	mov	r3, r2
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	4413      	add	r3, r2
 800898a:	3b1e      	subs	r3, #30
 800898c:	051b      	lsls	r3, r3, #20
 800898e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008992:	e01b      	b.n	80089cc <HAL_ADC_ConfigChannel+0x6a8>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	fa93 f3a3 	rbit	r3, r3
 80089a0:	613b      	str	r3, [r7, #16]
  return result;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80089ac:	2320      	movs	r3, #32
 80089ae:	e003      	b.n	80089b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	fab3 f383 	clz	r3, r3
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	3301      	adds	r3, #1
 80089ba:	f003 021f 	and.w	r2, r3, #31
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	3b1e      	subs	r3, #30
 80089c6:	051b      	lsls	r3, r3, #20
 80089c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089d2:	4619      	mov	r1, r3
 80089d4:	f7ff f8c5 	bl	8007b62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b09      	ldr	r3, [pc, #36]	@ (8008a04 <HAL_ADC_ConfigChannel+0x6e0>)
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80be 	beq.w	8008b62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089ee:	d004      	beq.n	80089fa <HAL_ADC_ConfigChannel+0x6d6>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a04      	ldr	r2, [pc, #16]	@ (8008a08 <HAL_ADC_ConfigChannel+0x6e4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10a      	bne.n	8008a10 <HAL_ADC_ConfigChannel+0x6ec>
 80089fa:	4b04      	ldr	r3, [pc, #16]	@ (8008a0c <HAL_ADC_ConfigChannel+0x6e8>)
 80089fc:	e009      	b.n	8008a12 <HAL_ADC_ConfigChannel+0x6ee>
 80089fe:	bf00      	nop
 8008a00:	407f0000 	.word	0x407f0000
 8008a04:	80080000 	.word	0x80080000
 8008a08:	50000100 	.word	0x50000100
 8008a0c:	50000300 	.word	0x50000300
 8008a10:	4b59      	ldr	r3, [pc, #356]	@ (8008b78 <HAL_ADC_ConfigChannel+0x854>)
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe ffba 	bl	800798c <LL_ADC_GetCommonPathInternalCh>
 8008a18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a56      	ldr	r2, [pc, #344]	@ (8008b7c <HAL_ADC_ConfigChannel+0x858>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <HAL_ADC_ConfigChannel+0x70c>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a55      	ldr	r2, [pc, #340]	@ (8008b80 <HAL_ADC_ConfigChannel+0x85c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d13a      	bne.n	8008aa6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d134      	bne.n	8008aa6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a44:	d005      	beq.n	8008a52 <HAL_ADC_ConfigChannel+0x72e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8008b84 <HAL_ADC_ConfigChannel+0x860>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	f040 8085 	bne.w	8008b5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a5a:	d004      	beq.n	8008a66 <HAL_ADC_ConfigChannel+0x742>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a49      	ldr	r2, [pc, #292]	@ (8008b88 <HAL_ADC_ConfigChannel+0x864>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d101      	bne.n	8008a6a <HAL_ADC_ConfigChannel+0x746>
 8008a66:	4a49      	ldr	r2, [pc, #292]	@ (8008b8c <HAL_ADC_ConfigChannel+0x868>)
 8008a68:	e000      	b.n	8008a6c <HAL_ADC_ConfigChannel+0x748>
 8008a6a:	4a43      	ldr	r2, [pc, #268]	@ (8008b78 <HAL_ADC_ConfigChannel+0x854>)
 8008a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7fe ff75 	bl	8007966 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a7c:	4b44      	ldr	r3, [pc, #272]	@ (8008b90 <HAL_ADC_ConfigChannel+0x86c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	099b      	lsrs	r3, r3, #6
 8008a82:	4a44      	ldr	r2, [pc, #272]	@ (8008b94 <HAL_ADC_ConfigChannel+0x870>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	099b      	lsrs	r3, r3, #6
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008a96:	e002      	b.n	8008a9e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1f9      	bne.n	8008a98 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008aa4:	e05a      	b.n	8008b5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8008b98 <HAL_ADC_ConfigChannel+0x874>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d125      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d11f      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a31      	ldr	r2, [pc, #196]	@ (8008b88 <HAL_ADC_ConfigChannel+0x864>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d104      	bne.n	8008ad0 <HAL_ADC_ConfigChannel+0x7ac>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a34      	ldr	r2, [pc, #208]	@ (8008b9c <HAL_ADC_ConfigChannel+0x878>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d047      	beq.n	8008b60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ad8:	d004      	beq.n	8008ae4 <HAL_ADC_ConfigChannel+0x7c0>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2a      	ldr	r2, [pc, #168]	@ (8008b88 <HAL_ADC_ConfigChannel+0x864>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d101      	bne.n	8008ae8 <HAL_ADC_ConfigChannel+0x7c4>
 8008ae4:	4a29      	ldr	r2, [pc, #164]	@ (8008b8c <HAL_ADC_ConfigChannel+0x868>)
 8008ae6:	e000      	b.n	8008aea <HAL_ADC_ConfigChannel+0x7c6>
 8008ae8:	4a23      	ldr	r2, [pc, #140]	@ (8008b78 <HAL_ADC_ConfigChannel+0x854>)
 8008aea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe ff36 	bl	8007966 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008afa:	e031      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a27      	ldr	r2, [pc, #156]	@ (8008ba0 <HAL_ADC_ConfigChannel+0x87c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d12d      	bne.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d127      	bne.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <HAL_ADC_ConfigChannel+0x864>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b24:	d004      	beq.n	8008b30 <HAL_ADC_ConfigChannel+0x80c>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a17      	ldr	r2, [pc, #92]	@ (8008b88 <HAL_ADC_ConfigChannel+0x864>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d101      	bne.n	8008b34 <HAL_ADC_ConfigChannel+0x810>
 8008b30:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <HAL_ADC_ConfigChannel+0x868>)
 8008b32:	e000      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x812>
 8008b34:	4a10      	ldr	r2, [pc, #64]	@ (8008b78 <HAL_ADC_ConfigChannel+0x854>)
 8008b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f7fe ff10 	bl	8007966 <LL_ADC_SetCommonPathInternalCh>
 8008b46:	e00c      	b.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b4c:	f043 0220 	orr.w	r2, r3, #32
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008b5a:	e002      	b.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b5c:	bf00      	nop
 8008b5e:	e000      	b.n	8008b62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	37d8      	adds	r7, #216	@ 0xd8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	50000700 	.word	0x50000700
 8008b7c:	c3210000 	.word	0xc3210000
 8008b80:	90c00010 	.word	0x90c00010
 8008b84:	50000600 	.word	0x50000600
 8008b88:	50000100 	.word	0x50000100
 8008b8c:	50000300 	.word	0x50000300
 8008b90:	200000fc 	.word	0x200000fc
 8008b94:	053e2d63 	.word	0x053e2d63
 8008b98:	c7520000 	.word	0xc7520000
 8008b9c:	50000500 	.word	0x50000500
 8008ba0:	cb840000 	.word	0xcb840000

08008ba4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff f8a7 	bl	8007d08 <LL_ADC_IsEnabled>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d176      	bne.n	8008cae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8008cb8 <ADC_Enable+0x114>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00d      	beq.n	8008bea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bd2:	f043 0210 	orr.w	r2, r3, #16
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bde:	f043 0201 	orr.w	r2, r3, #1
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e062      	b.n	8008cb0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff f862 	bl	8007cb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bfc:	d004      	beq.n	8008c08 <ADC_Enable+0x64>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a2e      	ldr	r2, [pc, #184]	@ (8008cbc <ADC_Enable+0x118>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d101      	bne.n	8008c0c <ADC_Enable+0x68>
 8008c08:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc0 <ADC_Enable+0x11c>)
 8008c0a:	e000      	b.n	8008c0e <ADC_Enable+0x6a>
 8008c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc4 <ADC_Enable+0x120>)
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe febc 	bl	800798c <LL_ADC_GetCommonPathInternalCh>
 8008c14:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cc8 <ADC_Enable+0x124>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	099b      	lsrs	r3, r3, #6
 8008c24:	4a29      	ldr	r2, [pc, #164]	@ (8008ccc <ADC_Enable+0x128>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	099b      	lsrs	r3, r3, #6
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	4613      	mov	r3, r2
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008c38:	e002      	b.n	8008c40 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f9      	bne.n	8008c3a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c46:	f7fe fe6f 	bl	8007928 <HAL_GetTick>
 8008c4a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c4c:	e028      	b.n	8008ca0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff f858 	bl	8007d08 <LL_ADC_IsEnabled>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff f828 	bl	8007cb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c68:	f7fe fe5e 	bl	8007928 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d914      	bls.n	8008ca0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d00d      	beq.n	8008ca0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c88:	f043 0210 	orr.w	r2, r3, #16
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c94:	f043 0201 	orr.w	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e007      	b.n	8008cb0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d1cf      	bne.n	8008c4e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	8000003f 	.word	0x8000003f
 8008cbc:	50000100 	.word	0x50000100
 8008cc0:	50000300 	.word	0x50000300
 8008cc4:	50000700 	.word	0x50000700
 8008cc8:	200000fc 	.word	0x200000fc
 8008ccc:	053e2d63 	.word	0x053e2d63

08008cd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff f826 	bl	8007d2e <LL_ADC_IsDisableOngoing>
 8008ce2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff f80d 	bl	8007d08 <LL_ADC_IsEnabled>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d047      	beq.n	8008d84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d144      	bne.n	8008d84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 030d 	and.w	r3, r3, #13
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10c      	bne.n	8008d22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe ffe7 	bl	8007ce0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2203      	movs	r2, #3
 8008d18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d1a:	f7fe fe05 	bl	8007928 <HAL_GetTick>
 8008d1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d20:	e029      	b.n	8008d76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d26:	f043 0210 	orr.w	r2, r3, #16
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d32:	f043 0201 	orr.w	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e023      	b.n	8008d86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d3e:	f7fe fdf3 	bl	8007928 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d914      	bls.n	8008d76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d5e:	f043 0210 	orr.w	r2, r3, #16
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d6a:	f043 0201 	orr.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e007      	b.n	8008d86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1dc      	bne.n	8008d3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d14b      	bne.n	8008e40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d021      	beq.n	8008e06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fe8c 	bl	8007ae4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d032      	beq.n	8008e38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d12b      	bne.n	8008e38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11f      	bne.n	8008e38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dfc:	f043 0201 	orr.w	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e04:	e018      	b.n	8008e38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d111      	bne.n	8008e38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e30:	f043 0201 	orr.w	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fa55 	bl	80082e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e3e:	e00e      	b.n	8008e5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fa5f 	bl	8008310 <HAL_ADC_ErrorCallback>
}
 8008e52:	e004      	b.n	8008e5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fa41 	bl	80082fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ea0:	f043 0204 	orr.w	r2, r3, #4
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff fa31 	bl	8008310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <LL_ADC_IsEnabled>:
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <LL_ADC_IsEnabled+0x18>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <LL_ADC_IsEnabled+0x1a>
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <LL_ADC_StartCalibration>:
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008eee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	609a      	str	r2, [r3, #8]
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <LL_ADC_IsCalibrationOnGoing>:
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f22:	d101      	bne.n	8008f28 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <LL_ADC_REG_IsConversionOngoing>:
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d101      	bne.n	8008f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_ADCEx_Calibration_Start+0x1c>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e04d      	b.n	8009014 <HAL_ADCEx_Calibration_Start+0xb8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fea5 	bl	8008cd0 <ADC_Disable>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d136      	bne.n	8008ffe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008f98:	f023 0302 	bic.w	r3, r3, #2
 8008f9c:	f043 0202 	orr.w	r2, r3, #2
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff ff96 	bl	8008edc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008fb0:	e014      	b.n	8008fdc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4a18      	ldr	r2, [pc, #96]	@ (800901c <HAL_ADCEx_Calibration_Start+0xc0>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d90d      	bls.n	8008fdc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fc4:	f023 0312 	bic.w	r3, r3, #18
 8008fc8:	f043 0210 	orr.w	r2, r3, #16
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e01b      	b.n	8009014 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff ff94 	bl	8008f0e <LL_ADC_IsCalibrationOnGoing>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e2      	bne.n	8008fb2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff0:	f023 0303 	bic.w	r3, r3, #3
 8008ff4:	f043 0201 	orr.w	r2, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ffc:	e005      	b.n	800900a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009002:	f043 0210 	orr.w	r2, r3, #16
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	0004de01 	.word	0x0004de01

08009020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b0a1      	sub	sp, #132	@ 0x84
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800903a:	2302      	movs	r3, #2
 800903c:	e0e7      	b.n	800920e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8009046:	2300      	movs	r3, #0
 8009048:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800904a:	2300      	movs	r3, #0
 800904c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009056:	d102      	bne.n	800905e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009058:	4b6f      	ldr	r3, [pc, #444]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	e009      	b.n	8009072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a6e      	ldr	r2, [pc, #440]	@ (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d102      	bne.n	800906e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8009068:	4b6d      	ldr	r3, [pc, #436]	@ (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	e001      	b.n	8009072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0be      	b.n	800920e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff ff4f 	bl	8008f36 <LL_ADC_REG_IsConversionOngoing>
 8009098:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff ff49 	bl	8008f36 <LL_ADC_REG_IsConversionOngoing>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 80a0 	bne.w	80091ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80090ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f040 809c 	bne.w	80091ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090bc:	d004      	beq.n	80090c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a55      	ldr	r2, [pc, #340]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80090c8:	4b56      	ldr	r3, [pc, #344]	@ (8009224 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80090ca:	e000      	b.n	80090ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80090cc:	4b56      	ldr	r3, [pc, #344]	@ (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80090ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d04b      	beq.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090ea:	035b      	lsls	r3, r3, #13
 80090ec:	430b      	orrs	r3, r1
 80090ee:	431a      	orrs	r2, r3
 80090f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090fc:	d004      	beq.n	8009108 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a45      	ldr	r2, [pc, #276]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d10f      	bne.n	8009128 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8009108:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800910c:	f7ff fed3 	bl	8008eb6 <LL_ADC_IsEnabled>
 8009110:	4604      	mov	r4, r0
 8009112:	4841      	ldr	r0, [pc, #260]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009114:	f7ff fecf 	bl	8008eb6 <LL_ADC_IsEnabled>
 8009118:	4603      	mov	r3, r0
 800911a:	4323      	orrs	r3, r4
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e012      	b.n	800914e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8009128:	483c      	ldr	r0, [pc, #240]	@ (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800912a:	f7ff fec4 	bl	8008eb6 <LL_ADC_IsEnabled>
 800912e:	4604      	mov	r4, r0
 8009130:	483b      	ldr	r0, [pc, #236]	@ (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009132:	f7ff fec0 	bl	8008eb6 <LL_ADC_IsEnabled>
 8009136:	4603      	mov	r3, r0
 8009138:	431c      	orrs	r4, r3
 800913a:	483c      	ldr	r0, [pc, #240]	@ (800922c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800913c:	f7ff febb 	bl	8008eb6 <LL_ADC_IsEnabled>
 8009140:	4603      	mov	r3, r0
 8009142:	4323      	orrs	r3, r4
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d056      	beq.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800915a:	f023 030f 	bic.w	r3, r3, #15
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	6811      	ldr	r1, [r2, #0]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6892      	ldr	r2, [r2, #8]
 8009166:	430a      	orrs	r2, r1
 8009168:	431a      	orrs	r2, r3
 800916a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800916c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800916e:	e047      	b.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800917a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009184:	d004      	beq.n	8009190 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a23      	ldr	r2, [pc, #140]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10f      	bne.n	80091b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009190:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009194:	f7ff fe8f 	bl	8008eb6 <LL_ADC_IsEnabled>
 8009198:	4604      	mov	r4, r0
 800919a:	481f      	ldr	r0, [pc, #124]	@ (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800919c:	f7ff fe8b 	bl	8008eb6 <LL_ADC_IsEnabled>
 80091a0:	4603      	mov	r3, r0
 80091a2:	4323      	orrs	r3, r4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf0c      	ite	eq
 80091a8:	2301      	moveq	r3, #1
 80091aa:	2300      	movne	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e012      	b.n	80091d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80091b0:	481a      	ldr	r0, [pc, #104]	@ (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80091b2:	f7ff fe80 	bl	8008eb6 <LL_ADC_IsEnabled>
 80091b6:	4604      	mov	r4, r0
 80091b8:	4819      	ldr	r0, [pc, #100]	@ (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80091ba:	f7ff fe7c 	bl	8008eb6 <LL_ADC_IsEnabled>
 80091be:	4603      	mov	r3, r0
 80091c0:	431c      	orrs	r4, r3
 80091c2:	481a      	ldr	r0, [pc, #104]	@ (800922c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80091c4:	f7ff fe77 	bl	8008eb6 <LL_ADC_IsEnabled>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4323      	orrs	r3, r4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf0c      	ite	eq
 80091d0:	2301      	moveq	r3, #1
 80091d2:	2300      	movne	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d012      	beq.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80091e2:	f023 030f 	bic.w	r3, r3, #15
 80091e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80091e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80091ea:	e009      	b.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f0:	f043 0220 	orr.w	r2, r3, #32
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80091fe:	e000      	b.n	8009202 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009200:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800920a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800920e:	4618      	mov	r0, r3
 8009210:	3784      	adds	r7, #132	@ 0x84
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}
 8009216:	bf00      	nop
 8009218:	50000100 	.word	0x50000100
 800921c:	50000400 	.word	0x50000400
 8009220:	50000500 	.word	0x50000500
 8009224:	50000300 	.word	0x50000300
 8009228:	50000700 	.word	0x50000700
 800922c:	50000600 	.word	0x50000600

08009230 <__NVIC_SetPriorityGrouping>:
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009240:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <__NVIC_SetPriorityGrouping+0x44>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800924c:	4013      	ands	r3, r2
 800924e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800925c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009262:	4a04      	ldr	r2, [pc, #16]	@ (8009274 <__NVIC_SetPriorityGrouping+0x44>)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	60d3      	str	r3, [r2, #12]
}
 8009268:	bf00      	nop
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	e000ed00 	.word	0xe000ed00

08009278 <__NVIC_GetPriorityGrouping>:
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__NVIC_GetPriorityGrouping+0x18>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	f003 0307 	and.w	r3, r3, #7
}
 8009286:	4618      	mov	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	e000ed00 	.word	0xe000ed00

08009294 <__NVIC_EnableIRQ>:
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800929e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	db0b      	blt.n	80092be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	f003 021f 	and.w	r2, r3, #31
 80092ac:	4907      	ldr	r1, [pc, #28]	@ (80092cc <__NVIC_EnableIRQ+0x38>)
 80092ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	2001      	movs	r0, #1
 80092b6:	fa00 f202 	lsl.w	r2, r0, r2
 80092ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	e000e100 	.word	0xe000e100

080092d0 <__NVIC_SetPriority>:
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db0a      	blt.n	80092fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	490c      	ldr	r1, [pc, #48]	@ (800931c <__NVIC_SetPriority+0x4c>)
 80092ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ee:	0112      	lsls	r2, r2, #4
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	440b      	add	r3, r1
 80092f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80092f8:	e00a      	b.n	8009310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4908      	ldr	r1, [pc, #32]	@ (8009320 <__NVIC_SetPriority+0x50>)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	3b04      	subs	r3, #4
 8009308:	0112      	lsls	r2, r2, #4
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	440b      	add	r3, r1
 800930e:	761a      	strb	r2, [r3, #24]
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	e000e100 	.word	0xe000e100
 8009320:	e000ed00 	.word	0xe000ed00

08009324 <NVIC_EncodePriority>:
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	@ 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f1c3 0307 	rsb	r3, r3, #7
 800933e:	2b04      	cmp	r3, #4
 8009340:	bf28      	it	cs
 8009342:	2304      	movcs	r3, #4
 8009344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	3304      	adds	r3, #4
 800934a:	2b06      	cmp	r3, #6
 800934c:	d902      	bls.n	8009354 <NVIC_EncodePriority+0x30>
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	3b03      	subs	r3, #3
 8009352:	e000      	b.n	8009356 <NVIC_EncodePriority+0x32>
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009358:	f04f 32ff 	mov.w	r2, #4294967295
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	43da      	mvns	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	401a      	ands	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800936c:	f04f 31ff 	mov.w	r1, #4294967295
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	fa01 f303 	lsl.w	r3, r1, r3
 8009376:	43d9      	mvns	r1, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800937c:	4313      	orrs	r3, r2
}
 800937e:	4618      	mov	r0, r3
 8009380:	3724      	adds	r7, #36	@ 0x24
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3b01      	subs	r3, #1
 8009398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800939c:	d301      	bcc.n	80093a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800939e:	2301      	movs	r3, #1
 80093a0:	e00f      	b.n	80093c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093a2:	4a0a      	ldr	r2, [pc, #40]	@ (80093cc <SysTick_Config+0x40>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093aa:	210f      	movs	r1, #15
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	f7ff ff8e 	bl	80092d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093b4:	4b05      	ldr	r3, [pc, #20]	@ (80093cc <SysTick_Config+0x40>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093ba:	4b04      	ldr	r3, [pc, #16]	@ (80093cc <SysTick_Config+0x40>)
 80093bc:	2207      	movs	r2, #7
 80093be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	e000e010 	.word	0xe000e010

080093d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff29 	bl	8009230 <__NVIC_SetPriorityGrouping>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	4603      	mov	r3, r0
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80093f4:	f7ff ff40 	bl	8009278 <__NVIC_GetPriorityGrouping>
 80093f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	6978      	ldr	r0, [r7, #20]
 8009400:	f7ff ff90 	bl	8009324 <NVIC_EncodePriority>
 8009404:	4602      	mov	r2, r0
 8009406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff ff5f 	bl	80092d0 <__NVIC_SetPriority>
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	4603      	mov	r3, r0
 8009422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff ff33 	bl	8009294 <__NVIC_EnableIRQ>
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffa4 	bl	800938c <SysTick_Config>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e08d      	b.n	800957e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	4b47      	ldr	r3, [pc, #284]	@ (8009588 <HAL_DMA_Init+0x138>)
 800946a:	429a      	cmp	r2, r3
 800946c:	d80f      	bhi.n	800948e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	4b45      	ldr	r3, [pc, #276]	@ (800958c <HAL_DMA_Init+0x13c>)
 8009476:	4413      	add	r3, r2
 8009478:	4a45      	ldr	r2, [pc, #276]	@ (8009590 <HAL_DMA_Init+0x140>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	091b      	lsrs	r3, r3, #4
 8009480:	009a      	lsls	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a42      	ldr	r2, [pc, #264]	@ (8009594 <HAL_DMA_Init+0x144>)
 800948a:	641a      	str	r2, [r3, #64]	@ 0x40
 800948c:	e00e      	b.n	80094ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	4b40      	ldr	r3, [pc, #256]	@ (8009598 <HAL_DMA_Init+0x148>)
 8009496:	4413      	add	r3, r2
 8009498:	4a3d      	ldr	r2, [pc, #244]	@ (8009590 <HAL_DMA_Init+0x140>)
 800949a:	fba2 2303 	umull	r2, r3, r2, r3
 800949e:	091b      	lsrs	r3, r3, #4
 80094a0:	009a      	lsls	r2, r3, #2
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a3c      	ldr	r2, [pc, #240]	@ (800959c <HAL_DMA_Init+0x14c>)
 80094aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80094c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80094d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa76 	bl	80099f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800950c:	d102      	bne.n	8009514 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009528:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d010      	beq.n	8009554 <HAL_DMA_Init+0x104>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2b04      	cmp	r3, #4
 8009538:	d80c      	bhi.n	8009554 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa96 	bl	8009a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	e008      	b.n	8009566 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	40020407 	.word	0x40020407
 800958c:	bffdfff8 	.word	0xbffdfff8
 8009590:	cccccccd 	.word	0xcccccccd
 8009594:	40020000 	.word	0x40020000
 8009598:	bffdfbf8 	.word	0xbffdfbf8
 800959c:	40020400 	.word	0x40020400

080095a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_DMA_Start_IT+0x20>
 80095bc:	2302      	movs	r3, #2
 80095be:	e066      	b.n	800968e <HAL_DMA_Start_IT+0xee>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d155      	bne.n	8009680 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 f9bb 	bl	8009974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 020e 	orr.w	r2, r2, #14
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e00f      	b.n	8009638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0204 	bic.w	r2, r2, #4
 8009626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 020a 	orr.w	r2, r2, #10
 8009636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009654:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800966c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e005      	b.n	800968c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009688:	2302      	movs	r3, #2
 800968a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d005      	beq.n	80096ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2204      	movs	r2, #4
 80096b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	73fb      	strb	r3, [r7, #15]
 80096b8:	e037      	b.n	800972a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 020e 	bic.w	r2, r2, #14
 80096c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0201 	bic.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ee:	f003 021f 	and.w	r2, r3, #31
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	2101      	movs	r1, #1
 80096f8:	fa01 f202 	lsl.w	r2, r1, r2
 80096fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009706:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00c      	beq.n	800972a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800971e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009728:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d00d      	beq.n	800977c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2204      	movs	r2, #4
 8009764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	73fb      	strb	r3, [r7, #15]
 800977a:	e047      	b.n	800980c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 020e 	bic.w	r2, r2, #14
 800978a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0201 	bic.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b0:	f003 021f 	and.w	r2, r3, #31
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b8:	2101      	movs	r1, #1
 80097ba:	fa01 f202 	lsl.w	r2, r1, r2
 80097be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80097c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80097ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	4798      	blx	r3
    }
  }
  return status;
 800980c:	7bfb      	ldrb	r3, [r7, #15]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009832:	f003 031f 	and.w	r3, r3, #31
 8009836:	2204      	movs	r2, #4
 8009838:	409a      	lsls	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4013      	ands	r3, r2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d026      	beq.n	8009890 <HAL_DMA_IRQHandler+0x7a>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d021      	beq.n	8009890 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d107      	bne.n	800986a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0204 	bic.w	r2, r2, #4
 8009868:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986e:	f003 021f 	and.w	r2, r3, #31
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009876:	2104      	movs	r1, #4
 8009878:	fa01 f202 	lsl.w	r2, r1, r2
 800987c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009882:	2b00      	cmp	r3, #0
 8009884:	d071      	beq.n	800996a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800988e:	e06c      	b.n	800996a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	2202      	movs	r2, #2
 800989a:	409a      	lsls	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4013      	ands	r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02e      	beq.n	8009902 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d029      	beq.n	8009902 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10b      	bne.n	80098d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 020a 	bic.w	r2, r2, #10
 80098ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d8:	f003 021f 	and.w	r2, r3, #31
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e0:	2102      	movs	r1, #2
 80098e2:	fa01 f202 	lsl.w	r2, r1, r2
 80098e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d038      	beq.n	800996a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009900:	e033      	b.n	800996a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009906:	f003 031f 	and.w	r3, r3, #31
 800990a:	2208      	movs	r2, #8
 800990c:	409a      	lsls	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4013      	ands	r3, r2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02a      	beq.n	800996c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d025      	beq.n	800996c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 020e 	bic.w	r2, r2, #14
 800992e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009934:	f003 021f 	and.w	r2, r3, #31
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993c:	2101      	movs	r1, #1
 800993e:	fa01 f202 	lsl.w	r2, r1, r2
 8009942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800996a:	bf00      	nop
 800996c:	bf00      	nop
}
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800998a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800999c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a2:	f003 021f 	and.w	r2, r3, #31
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099aa:	2101      	movs	r1, #1
 80099ac:	fa01 f202 	lsl.w	r2, r1, r2
 80099b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	2b10      	cmp	r3, #16
 80099c0:	d108      	bne.n	80099d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099d2:	e007      	b.n	80099e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	60da      	str	r2, [r3, #12]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b16      	ldr	r3, [pc, #88]	@ (8009a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d802      	bhi.n	8009a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009a04:	4b15      	ldr	r3, [pc, #84]	@ (8009a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e001      	b.n	8009a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009a0a:	4b15      	ldr	r3, [pc, #84]	@ (8009a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009a0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	3b08      	subs	r3, #8
 8009a1a:	4a12      	ldr	r2, [pc, #72]	@ (8009a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a20:	091b      	lsrs	r3, r3, #4
 8009a22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a28:	089b      	lsrs	r3, r3, #2
 8009a2a:	009a      	lsls	r2, r3, #2
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	4413      	add	r3, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a0b      	ldr	r2, [pc, #44]	@ (8009a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	2201      	movs	r2, #1
 8009a44:	409a      	lsls	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40020407 	.word	0x40020407
 8009a5c:	40020800 	.word	0x40020800
 8009a60:	40020820 	.word	0x40020820
 8009a64:	cccccccd 	.word	0xcccccccd
 8009a68:	40020880 	.word	0x40020880

08009a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	461a      	mov	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a08      	ldr	r2, [pc, #32]	@ (8009ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009a8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	2201      	movs	r2, #1
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	1000823f 	.word	0x1000823f
 8009ab0:	40020940 	.word	0x40020940

08009ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009ac2:	e15a      	b.n	8009d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	2101      	movs	r1, #1
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 814c 	beq.w	8009d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d005      	beq.n	8009af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d130      	bne.n	8009b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	2203      	movs	r2, #3
 8009b00:	fa02 f303 	lsl.w	r3, r2, r3
 8009b04:	43db      	mvns	r3, r3
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	43db      	mvns	r3, r3
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4013      	ands	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	091b      	lsrs	r3, r3, #4
 8009b40:	f003 0201 	and.w	r2, r3, #1
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d017      	beq.n	8009b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	2203      	movs	r2, #3
 8009b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b72:	43db      	mvns	r3, r3
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4013      	ands	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	fa02 f303 	lsl.w	r3, r2, r3
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d123      	bne.n	8009be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	08da      	lsrs	r2, r3, #3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3208      	adds	r2, #8
 8009ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	220f      	movs	r2, #15
 8009bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bba:	43db      	mvns	r3, r3
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	691a      	ldr	r2, [r3, #16]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	08da      	lsrs	r2, r3, #3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3208      	adds	r2, #8
 8009be0:	6939      	ldr	r1, [r7, #16]
 8009be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	2203      	movs	r2, #3
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43db      	mvns	r3, r3
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f003 0203 	and.w	r2, r3, #3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80a6 	beq.w	8009d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c28:	4b5b      	ldr	r3, [pc, #364]	@ (8009d98 <HAL_GPIO_Init+0x2e4>)
 8009c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8009d98 <HAL_GPIO_Init+0x2e4>)
 8009c2e:	f043 0301 	orr.w	r3, r3, #1
 8009c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8009c34:	4b58      	ldr	r3, [pc, #352]	@ (8009d98 <HAL_GPIO_Init+0x2e4>)
 8009c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	60bb      	str	r3, [r7, #8]
 8009c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c40:	4a56      	ldr	r2, [pc, #344]	@ (8009d9c <HAL_GPIO_Init+0x2e8>)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	089b      	lsrs	r3, r3, #2
 8009c46:	3302      	adds	r3, #2
 8009c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	220f      	movs	r2, #15
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	4013      	ands	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009c6a:	d01f      	beq.n	8009cac <HAL_GPIO_Init+0x1f8>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8009da0 <HAL_GPIO_Init+0x2ec>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d019      	beq.n	8009ca8 <HAL_GPIO_Init+0x1f4>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a4b      	ldr	r2, [pc, #300]	@ (8009da4 <HAL_GPIO_Init+0x2f0>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d013      	beq.n	8009ca4 <HAL_GPIO_Init+0x1f0>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8009da8 <HAL_GPIO_Init+0x2f4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00d      	beq.n	8009ca0 <HAL_GPIO_Init+0x1ec>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a49      	ldr	r2, [pc, #292]	@ (8009dac <HAL_GPIO_Init+0x2f8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d007      	beq.n	8009c9c <HAL_GPIO_Init+0x1e8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a48      	ldr	r2, [pc, #288]	@ (8009db0 <HAL_GPIO_Init+0x2fc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d101      	bne.n	8009c98 <HAL_GPIO_Init+0x1e4>
 8009c94:	2305      	movs	r3, #5
 8009c96:	e00a      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009c98:	2306      	movs	r3, #6
 8009c9a:	e008      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	e006      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e004      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e002      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <HAL_GPIO_Init+0x1fa>
 8009cac:	2300      	movs	r3, #0
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	f002 0203 	and.w	r2, r2, #3
 8009cb4:	0092      	lsls	r2, r2, #2
 8009cb6:	4093      	lsls	r3, r2
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cbe:	4937      	ldr	r1, [pc, #220]	@ (8009d9c <HAL_GPIO_Init+0x2e8>)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	089b      	lsrs	r3, r3, #2
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009ccc:	4b39      	ldr	r3, [pc, #228]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	43db      	mvns	r3, r3
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009cf0:	4a30      	ldr	r2, [pc, #192]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	43db      	mvns	r3, r3
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4013      	ands	r3, r2
 8009d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009d1a:	4a26      	ldr	r2, [pc, #152]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009d20:	4b24      	ldr	r3, [pc, #144]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009d44:	4a1b      	ldr	r2, [pc, #108]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	4013      	ands	r3, r2
 8009d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d6e:	4a11      	ldr	r2, [pc, #68]	@ (8009db4 <HAL_GPIO_Init+0x300>)
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	3301      	adds	r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f ae9d 	bne.w	8009ac4 <HAL_GPIO_Init+0x10>
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	40021000 	.word	0x40021000
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	48000400 	.word	0x48000400
 8009da4:	48000800 	.word	0x48000800
 8009da8:	48000c00 	.word	0x48000c00
 8009dac:	48001000 	.word	0x48001000
 8009db0:	48001400 	.word	0x48001400
 8009db4:	40010400 	.word	0x40010400

08009db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691a      	ldr	r2, [r3, #16]
 8009dc8:	887b      	ldrh	r3, [r7, #2]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
 8009dd4:	e001      	b.n	8009dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	807b      	strh	r3, [r7, #2]
 8009df4:	4613      	mov	r3, r2
 8009df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009df8:	787b      	ldrb	r3, [r7, #1]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009dfe:	887a      	ldrh	r2, [r7, #2]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009e04:	e002      	b.n	8009e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009e06:	887a      	ldrh	r2, [r7, #2]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009e22:	4b08      	ldr	r3, [pc, #32]	@ (8009e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e24:	695a      	ldr	r2, [r3, #20]
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	4013      	ands	r3, r2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d006      	beq.n	8009e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e2e:	4a05      	ldr	r2, [pc, #20]	@ (8009e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e30:	88fb      	ldrh	r3, [r7, #6]
 8009e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e34:	88fb      	ldrh	r3, [r7, #6]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fb fedc 	bl	8005bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	40010400 	.word	0x40010400

08009e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d141      	bne.n	8009eda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e56:	4b4b      	ldr	r3, [pc, #300]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e62:	d131      	bne.n	8009ec8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e64:	4b47      	ldr	r3, [pc, #284]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6a:	4a46      	ldr	r2, [pc, #280]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e74:	4b43      	ldr	r3, [pc, #268]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009e7c:	4a41      	ldr	r2, [pc, #260]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009e84:	4b40      	ldr	r3, [pc, #256]	@ (8009f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2232      	movs	r2, #50	@ 0x32
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8009f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e90:	fba2 2303 	umull	r2, r3, r2, r3
 8009e94:	0c9b      	lsrs	r3, r3, #18
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e9a:	e002      	b.n	8009ea2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ea2:	4b38      	ldr	r3, [pc, #224]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eae:	d102      	bne.n	8009eb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f2      	bne.n	8009e9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009eb6:	4b33      	ldr	r3, [pc, #204]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ec2:	d158      	bne.n	8009f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e057      	b.n	8009f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ece:	4a2d      	ldr	r2, [pc, #180]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009ed8:	e04d      	b.n	8009f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee0:	d141      	bne.n	8009f66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ee2:	4b28      	ldr	r3, [pc, #160]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eee:	d131      	bne.n	8009f54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ef0:	4b24      	ldr	r3, [pc, #144]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	4a23      	ldr	r2, [pc, #140]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f00:	4b20      	ldr	r3, [pc, #128]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009f08:	4a1e      	ldr	r2, [pc, #120]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f10:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2232      	movs	r2, #50	@ 0x32
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
 8009f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	0c9b      	lsrs	r3, r3, #18
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f26:	e002      	b.n	8009f2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f2e:	4b15      	ldr	r3, [pc, #84]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f3a:	d102      	bne.n	8009f42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f2      	bne.n	8009f28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f42:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f4e:	d112      	bne.n	8009f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e011      	b.n	8009f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f54:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009f64:	e007      	b.n	8009f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009f66:	4b07      	ldr	r3, [pc, #28]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009f6e:	4a05      	ldr	r2, [pc, #20]	@ (8009f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009f74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40007000 	.word	0x40007000
 8009f88:	200000fc 	.word	0x200000fc
 8009f8c:	431bde83 	.word	0x431bde83

08009f90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009f90:	b480      	push	{r7}
 8009f92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009f94:	4b05      	ldr	r3, [pc, #20]	@ (8009fac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	4a04      	ldr	r2, [pc, #16]	@ (8009fac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f9e:	6093      	str	r3, [r2, #8]
}
 8009fa0:	bf00      	nop
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	40007000 	.word	0x40007000

08009fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e2fe      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d075      	beq.n	800a0ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fce:	4b97      	ldr	r3, [pc, #604]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f003 030c 	and.w	r3, r3, #12
 8009fd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fd8:	4b94      	ldr	r3, [pc, #592]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b0c      	cmp	r3, #12
 8009fe6:	d102      	bne.n	8009fee <HAL_RCC_OscConfig+0x3e>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d002      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x44>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d10b      	bne.n	800a00c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ff4:	4b8d      	ldr	r3, [pc, #564]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d05b      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x108>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d157      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e2d9      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a014:	d106      	bne.n	800a024 <HAL_RCC_OscConfig+0x74>
 800a016:	4b85      	ldr	r3, [pc, #532]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a84      	ldr	r2, [pc, #528]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a01c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	e01d      	b.n	800a060 <HAL_RCC_OscConfig+0xb0>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a02c:	d10c      	bne.n	800a048 <HAL_RCC_OscConfig+0x98>
 800a02e:	4b7f      	ldr	r3, [pc, #508]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a7e      	ldr	r2, [pc, #504]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	4b7c      	ldr	r3, [pc, #496]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a7b      	ldr	r2, [pc, #492]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	e00b      	b.n	800a060 <HAL_RCC_OscConfig+0xb0>
 800a048:	4b78      	ldr	r3, [pc, #480]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a77      	ldr	r2, [pc, #476]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a04e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	4b75      	ldr	r3, [pc, #468]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a74      	ldr	r2, [pc, #464]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a05a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a05e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d013      	beq.n	800a090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7fd fc5e 	bl	8007928 <HAL_GetTick>
 800a06c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a070:	f7fd fc5a 	bl	8007928 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b64      	cmp	r3, #100	@ 0x64
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e29e      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a082:	4b6a      	ldr	r3, [pc, #424]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f0      	beq.n	800a070 <HAL_RCC_OscConfig+0xc0>
 800a08e:	e014      	b.n	800a0ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a090:	f7fd fc4a 	bl	8007928 <HAL_GetTick>
 800a094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a096:	e008      	b.n	800a0aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a098:	f7fd fc46 	bl	8007928 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b64      	cmp	r3, #100	@ 0x64
 800a0a4:	d901      	bls.n	800a0aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e28a      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a0aa:	4b60      	ldr	r3, [pc, #384]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1f0      	bne.n	800a098 <HAL_RCC_OscConfig+0xe8>
 800a0b6:	e000      	b.n	800a0ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d075      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0c6:	4b59      	ldr	r3, [pc, #356]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f003 030c 	and.w	r3, r3, #12
 800a0ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0d0:	4b56      	ldr	r3, [pc, #344]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b0c      	cmp	r3, #12
 800a0de:	d102      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x136>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d002      	beq.n	800a0ec <HAL_RCC_OscConfig+0x13c>
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d11f      	bne.n	800a12c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0ec:	4b4f      	ldr	r3, [pc, #316]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <HAL_RCC_OscConfig+0x154>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e25d      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a104:	4b49      	ldr	r3, [pc, #292]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	061b      	lsls	r3, r3, #24
 800a112:	4946      	ldr	r1, [pc, #280]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a114:	4313      	orrs	r3, r2
 800a116:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a118:	4b45      	ldr	r3, [pc, #276]	@ (800a230 <HAL_RCC_OscConfig+0x280>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fd fbb7 	bl	8007890 <HAL_InitTick>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d043      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e249      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d023      	beq.n	800a17c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a134:	4b3d      	ldr	r3, [pc, #244]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a3c      	ldr	r2, [pc, #240]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a13a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a13e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a140:	f7fd fbf2 	bl	8007928 <HAL_GetTick>
 800a144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a146:	e008      	b.n	800a15a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a148:	f7fd fbee 	bl	8007928 <HAL_GetTick>
 800a14c:	4602      	mov	r2, r0
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	2b02      	cmp	r3, #2
 800a154:	d901      	bls.n	800a15a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e232      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a15a:	4b34      	ldr	r3, [pc, #208]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0f0      	beq.n	800a148 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a166:	4b31      	ldr	r3, [pc, #196]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	061b      	lsls	r3, r3, #24
 800a174:	492d      	ldr	r1, [pc, #180]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a176:	4313      	orrs	r3, r2
 800a178:	604b      	str	r3, [r1, #4]
 800a17a:	e01a      	b.n	800a1b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a17c:	4b2b      	ldr	r3, [pc, #172]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a2a      	ldr	r2, [pc, #168]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a182:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a188:	f7fd fbce 	bl	8007928 <HAL_GetTick>
 800a18c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a18e:	e008      	b.n	800a1a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a190:	f7fd fbca 	bl	8007928 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d901      	bls.n	800a1a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e20e      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a1a2:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1f0      	bne.n	800a190 <HAL_RCC_OscConfig+0x1e0>
 800a1ae:	e000      	b.n	800a1b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d041      	beq.n	800a242 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d01c      	beq.n	800a200 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1c6:	4b19      	ldr	r3, [pc, #100]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a1c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1cc:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d6:	f7fd fba7 	bl	8007928 <HAL_GetTick>
 800a1da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1de:	f7fd fba3 	bl	8007928 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e1e7      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0ef      	beq.n	800a1de <HAL_RCC_OscConfig+0x22e>
 800a1fe:	e020      	b.n	800a242 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a200:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a206:	4a09      	ldr	r2, [pc, #36]	@ (800a22c <HAL_RCC_OscConfig+0x27c>)
 800a208:	f023 0301 	bic.w	r3, r3, #1
 800a20c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a210:	f7fd fb8a 	bl	8007928 <HAL_GetTick>
 800a214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a216:	e00d      	b.n	800a234 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a218:	f7fd fb86 	bl	8007928 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d906      	bls.n	800a234 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e1ca      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
 800a22a:	bf00      	nop
 800a22c:	40021000 	.word	0x40021000
 800a230:	20000100 	.word	0x20000100
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a234:	4b8c      	ldr	r3, [pc, #560]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ea      	bne.n	800a218 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 80a6 	beq.w	800a39c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a250:	2300      	movs	r3, #0
 800a252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a254:	4b84      	ldr	r3, [pc, #528]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_RCC_OscConfig+0x2b4>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <HAL_RCC_OscConfig+0x2b6>
 800a264:	2300      	movs	r3, #0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a26a:	4b7f      	ldr	r3, [pc, #508]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a26c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a26e:	4a7e      	ldr	r2, [pc, #504]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a274:	6593      	str	r3, [r2, #88]	@ 0x58
 800a276:	4b7c      	ldr	r3, [pc, #496]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a27a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a282:	2301      	movs	r3, #1
 800a284:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a286:	4b79      	ldr	r3, [pc, #484]	@ (800a46c <HAL_RCC_OscConfig+0x4bc>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d118      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a292:	4b76      	ldr	r3, [pc, #472]	@ (800a46c <HAL_RCC_OscConfig+0x4bc>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a75      	ldr	r2, [pc, #468]	@ (800a46c <HAL_RCC_OscConfig+0x4bc>)
 800a298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a29c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a29e:	f7fd fb43 	bl	8007928 <HAL_GetTick>
 800a2a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2a4:	e008      	b.n	800a2b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2a6:	f7fd fb3f 	bl	8007928 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e183      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2b8:	4b6c      	ldr	r3, [pc, #432]	@ (800a46c <HAL_RCC_OscConfig+0x4bc>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0f0      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d108      	bne.n	800a2de <HAL_RCC_OscConfig+0x32e>
 800a2cc:	4b66      	ldr	r3, [pc, #408]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2d2:	4a65      	ldr	r2, [pc, #404]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2d4:	f043 0301 	orr.w	r3, r3, #1
 800a2d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a2dc:	e024      	b.n	800a328 <HAL_RCC_OscConfig+0x378>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d110      	bne.n	800a308 <HAL_RCC_OscConfig+0x358>
 800a2e6:	4b60      	ldr	r3, [pc, #384]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ec:	4a5e      	ldr	r2, [pc, #376]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2ee:	f043 0304 	orr.w	r3, r3, #4
 800a2f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a2f6:	4b5c      	ldr	r3, [pc, #368]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2fc:	4a5a      	ldr	r2, [pc, #360]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a306:	e00f      	b.n	800a328 <HAL_RCC_OscConfig+0x378>
 800a308:	4b57      	ldr	r3, [pc, #348]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a30e:	4a56      	ldr	r2, [pc, #344]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a318:	4b53      	ldr	r3, [pc, #332]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a31e:	4a52      	ldr	r2, [pc, #328]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a320:	f023 0304 	bic.w	r3, r3, #4
 800a324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d016      	beq.n	800a35e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a330:	f7fd fafa 	bl	8007928 <HAL_GetTick>
 800a334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a336:	e00a      	b.n	800a34e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a338:	f7fd faf6 	bl	8007928 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a346:	4293      	cmp	r3, r2
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e138      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a34e:	4b46      	ldr	r3, [pc, #280]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0ed      	beq.n	800a338 <HAL_RCC_OscConfig+0x388>
 800a35c:	e015      	b.n	800a38a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a35e:	f7fd fae3 	bl	8007928 <HAL_GetTick>
 800a362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a364:	e00a      	b.n	800a37c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a366:	f7fd fadf 	bl	8007928 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a374:	4293      	cmp	r3, r2
 800a376:	d901      	bls.n	800a37c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e121      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a37c:	4b3a      	ldr	r3, [pc, #232]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1ed      	bne.n	800a366 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a38a:	7ffb      	ldrb	r3, [r7, #31]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d105      	bne.n	800a39c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a390:	4b35      	ldr	r3, [pc, #212]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a394:	4a34      	ldr	r2, [pc, #208]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a39a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0320 	and.w	r3, r3, #32
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d03c      	beq.n	800a422 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01c      	beq.n	800a3ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a3b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a3b8:	f043 0301 	orr.w	r3, r3, #1
 800a3bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c0:	f7fd fab2 	bl	8007928 <HAL_GetTick>
 800a3c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a3c6:	e008      	b.n	800a3da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3c8:	f7fd faae 	bl	8007928 <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d901      	bls.n	800a3da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e0f2      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a3da:	4b23      	ldr	r3, [pc, #140]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a3dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0ef      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x418>
 800a3e8:	e01b      	b.n	800a422 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a3ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a3f2:	f023 0301 	bic.w	r3, r3, #1
 800a3f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3fa:	f7fd fa95 	bl	8007928 <HAL_GetTick>
 800a3fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a400:	e008      	b.n	800a414 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a402:	f7fd fa91 	bl	8007928 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d901      	bls.n	800a414 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e0d5      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a414:	4b14      	ldr	r3, [pc, #80]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a416:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1ef      	bne.n	800a402 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80c9 	beq.w	800a5be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a42c:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 030c 	and.w	r3, r3, #12
 800a434:	2b0c      	cmp	r3, #12
 800a436:	f000 8083 	beq.w	800a540 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d15e      	bne.n	800a500 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a442:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a08      	ldr	r2, [pc, #32]	@ (800a468 <HAL_RCC_OscConfig+0x4b8>)
 800a448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a44c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a44e:	f7fd fa6b 	bl	8007928 <HAL_GetTick>
 800a452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a454:	e00c      	b.n	800a470 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a456:	f7fd fa67 	bl	8007928 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d905      	bls.n	800a470 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e0ab      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
 800a468:	40021000 	.word	0x40021000
 800a46c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a470:	4b55      	ldr	r3, [pc, #340]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1ec      	bne.n	800a456 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a47c:	4b52      	ldr	r3, [pc, #328]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	4b52      	ldr	r3, [pc, #328]	@ (800a5cc <HAL_RCC_OscConfig+0x61c>)
 800a482:	4013      	ands	r3, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6a11      	ldr	r1, [r2, #32]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a48c:	3a01      	subs	r2, #1
 800a48e:	0112      	lsls	r2, r2, #4
 800a490:	4311      	orrs	r1, r2
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a496:	0212      	lsls	r2, r2, #8
 800a498:	4311      	orrs	r1, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a49e:	0852      	lsrs	r2, r2, #1
 800a4a0:	3a01      	subs	r2, #1
 800a4a2:	0552      	lsls	r2, r2, #21
 800a4a4:	4311      	orrs	r1, r2
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a4aa:	0852      	lsrs	r2, r2, #1
 800a4ac:	3a01      	subs	r2, #1
 800a4ae:	0652      	lsls	r2, r2, #25
 800a4b0:	4311      	orrs	r1, r2
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a4b6:	06d2      	lsls	r2, r2, #27
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	4943      	ldr	r1, [pc, #268]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4c0:	4b41      	ldr	r3, [pc, #260]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a40      	ldr	r2, [pc, #256]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a4cc:	4b3e      	ldr	r3, [pc, #248]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	4a3d      	ldr	r2, [pc, #244]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d8:	f7fd fa26 	bl	8007928 <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4e0:	f7fd fa22 	bl	8007928 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e066      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4f2:	4b35      	ldr	r3, [pc, #212]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0f0      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x530>
 800a4fe:	e05e      	b.n	800a5be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a500:	4b31      	ldr	r3, [pc, #196]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a30      	ldr	r2, [pc, #192]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a50a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50c:	f7fd fa0c 	bl	8007928 <HAL_GetTick>
 800a510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a512:	e008      	b.n	800a526 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a514:	f7fd fa08 	bl	8007928 <HAL_GetTick>
 800a518:	4602      	mov	r2, r0
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e04c      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a526:	4b28      	ldr	r3, [pc, #160]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1f0      	bne.n	800a514 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a532:	4b25      	ldr	r3, [pc, #148]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a534:	68da      	ldr	r2, [r3, #12]
 800a536:	4924      	ldr	r1, [pc, #144]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a538:	4b25      	ldr	r3, [pc, #148]	@ (800a5d0 <HAL_RCC_OscConfig+0x620>)
 800a53a:	4013      	ands	r3, r2
 800a53c:	60cb      	str	r3, [r1, #12]
 800a53e:	e03e      	b.n	800a5be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e039      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a54c:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c8 <HAL_RCC_OscConfig+0x618>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f003 0203 	and.w	r2, r3, #3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d12c      	bne.n	800a5ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56a:	3b01      	subs	r3, #1
 800a56c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a56e:	429a      	cmp	r2, r3
 800a570:	d123      	bne.n	800a5ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a57e:	429a      	cmp	r2, r3
 800a580:	d11b      	bne.n	800a5ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a58e:	429a      	cmp	r2, r3
 800a590:	d113      	bne.n	800a5ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d109      	bne.n	800a5ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d001      	beq.n	800a5be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40021000 	.word	0x40021000
 800a5cc:	019f800c 	.word	0x019f800c
 800a5d0:	feeefffc 	.word	0xfeeefffc

0800a5d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e11e      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5ec:	4b91      	ldr	r3, [pc, #580]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 030f 	and.w	r3, r3, #15
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d910      	bls.n	800a61c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fa:	4b8e      	ldr	r3, [pc, #568]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f023 020f 	bic.w	r2, r3, #15
 800a602:	498c      	ldr	r1, [pc, #560]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	4313      	orrs	r3, r2
 800a608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a60a:	4b8a      	ldr	r3, [pc, #552]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 030f 	and.w	r3, r3, #15
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d001      	beq.n	800a61c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e106      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	d073      	beq.n	800a710 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d129      	bne.n	800a684 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a630:	4b81      	ldr	r3, [pc, #516]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e0f4      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a640:	f000 f99e 	bl	800a980 <RCC_GetSysClockFreqFromPLLSource>
 800a644:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	4a7c      	ldr	r2, [pc, #496]	@ (800a83c <HAL_RCC_ClockConfig+0x268>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d93f      	bls.n	800a6ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a64e:	4b7a      	ldr	r3, [pc, #488]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a662:	2b00      	cmp	r3, #0
 800a664:	d033      	beq.n	800a6ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d12f      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a66e:	4b72      	ldr	r3, [pc, #456]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a676:	4a70      	ldr	r2, [pc, #448]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a67c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a67e:	2380      	movs	r3, #128	@ 0x80
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e024      	b.n	800a6ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d107      	bne.n	800a69c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a68c:	4b6a      	ldr	r3, [pc, #424]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d109      	bne.n	800a6ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0c6      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a69c:	4b66      	ldr	r3, [pc, #408]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e0be      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a6ac:	f000 f8ce 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800a6b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	4a61      	ldr	r2, [pc, #388]	@ (800a83c <HAL_RCC_ClockConfig+0x268>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d909      	bls.n	800a6ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a6ba:	4b5f      	ldr	r3, [pc, #380]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c2:	4a5d      	ldr	r2, [pc, #372]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a6c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a6ca:	2380      	movs	r3, #128	@ 0x80
 800a6cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6ce:	4b5a      	ldr	r3, [pc, #360]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f023 0203 	bic.w	r2, r3, #3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4957      	ldr	r1, [pc, #348]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6e0:	f7fd f922 	bl	8007928 <HAL_GetTick>
 800a6e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e6:	e00a      	b.n	800a6fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e8:	f7fd f91e 	bl	8007928 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e095      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6fe:	4b4e      	ldr	r3, [pc, #312]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 020c 	and.w	r2, r3, #12
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d1eb      	bne.n	800a6e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d023      	beq.n	800a764 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a728:	4b43      	ldr	r3, [pc, #268]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4a42      	ldr	r2, [pc, #264]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a72e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a732:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d007      	beq.n	800a750 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a740:	4b3d      	ldr	r3, [pc, #244]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a748:	4a3b      	ldr	r2, [pc, #236]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a74a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a74e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a750:	4b39      	ldr	r3, [pc, #228]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	4936      	ldr	r1, [pc, #216]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	608b      	str	r3, [r1, #8]
 800a762:	e008      	b.n	800a776 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2b80      	cmp	r3, #128	@ 0x80
 800a768:	d105      	bne.n	800a776 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a76a:	4b33      	ldr	r3, [pc, #204]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	4a32      	ldr	r2, [pc, #200]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a770:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a774:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a776:	4b2f      	ldr	r3, [pc, #188]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d21d      	bcs.n	800a7c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a784:	4b2b      	ldr	r3, [pc, #172]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f023 020f 	bic.w	r2, r3, #15
 800a78c:	4929      	ldr	r1, [pc, #164]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	4313      	orrs	r3, r2
 800a792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a794:	f7fd f8c8 	bl	8007928 <HAL_GetTick>
 800a798:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a79a:	e00a      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a79c:	f7fd f8c4 	bl	8007928 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e03b      	b.n	800a82a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b2:	4b20      	ldr	r3, [pc, #128]	@ (800a834 <HAL_RCC_ClockConfig+0x260>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d1ed      	bne.n	800a79c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d008      	beq.n	800a7de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	4917      	ldr	r1, [pc, #92]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d009      	beq.n	800a7fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7ea:	4b13      	ldr	r3, [pc, #76]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	490f      	ldr	r1, [pc, #60]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a7fe:	f000 f825 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800a802:	4602      	mov	r2, r0
 800a804:	4b0c      	ldr	r3, [pc, #48]	@ (800a838 <HAL_RCC_ClockConfig+0x264>)
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	091b      	lsrs	r3, r3, #4
 800a80a:	f003 030f 	and.w	r3, r3, #15
 800a80e:	490c      	ldr	r1, [pc, #48]	@ (800a840 <HAL_RCC_ClockConfig+0x26c>)
 800a810:	5ccb      	ldrb	r3, [r1, r3]
 800a812:	f003 031f 	and.w	r3, r3, #31
 800a816:	fa22 f303 	lsr.w	r3, r2, r3
 800a81a:	4a0a      	ldr	r2, [pc, #40]	@ (800a844 <HAL_RCC_ClockConfig+0x270>)
 800a81c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a81e:	4b0a      	ldr	r3, [pc, #40]	@ (800a848 <HAL_RCC_ClockConfig+0x274>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f7fd f834 	bl	8007890 <HAL_InitTick>
 800a828:	4603      	mov	r3, r0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	40022000 	.word	0x40022000
 800a838:	40021000 	.word	0x40021000
 800a83c:	04c4b400 	.word	0x04c4b400
 800a840:	08010f28 	.word	0x08010f28
 800a844:	200000fc 	.word	0x200000fc
 800a848:	20000100 	.word	0x20000100

0800a84c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a852:	4b2c      	ldr	r3, [pc, #176]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f003 030c 	and.w	r3, r3, #12
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d102      	bne.n	800a864 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a85e:	4b2a      	ldr	r3, [pc, #168]	@ (800a908 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e047      	b.n	800a8f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a864:	4b27      	ldr	r3, [pc, #156]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f003 030c 	and.w	r3, r3, #12
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d102      	bne.n	800a876 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a870:	4b26      	ldr	r3, [pc, #152]	@ (800a90c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	e03e      	b.n	800a8f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a876:	4b23      	ldr	r3, [pc, #140]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 030c 	and.w	r3, r3, #12
 800a87e:	2b0c      	cmp	r3, #12
 800a880:	d136      	bne.n	800a8f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a882:	4b20      	ldr	r3, [pc, #128]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a88c:	4b1d      	ldr	r3, [pc, #116]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	091b      	lsrs	r3, r3, #4
 800a892:	f003 030f 	and.w	r3, r3, #15
 800a896:	3301      	adds	r3, #1
 800a898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d10c      	bne.n	800a8ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a90c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a8:	4a16      	ldr	r2, [pc, #88]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8aa:	68d2      	ldr	r2, [r2, #12]
 800a8ac:	0a12      	lsrs	r2, r2, #8
 800a8ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a8b2:	fb02 f303 	mul.w	r3, r2, r3
 800a8b6:	617b      	str	r3, [r7, #20]
      break;
 800a8b8:	e00c      	b.n	800a8d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8ba:	4a13      	ldr	r2, [pc, #76]	@ (800a908 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c2:	4a10      	ldr	r2, [pc, #64]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8c4:	68d2      	ldr	r2, [r2, #12]
 800a8c6:	0a12      	lsrs	r2, r2, #8
 800a8c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	617b      	str	r3, [r7, #20]
      break;
 800a8d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	0e5b      	lsrs	r3, r3, #25
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	3301      	adds	r3, #1
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	613b      	str	r3, [r7, #16]
 800a8ee:	e001      	b.n	800a8f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a8f4:	693b      	ldr	r3, [r7, #16]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	40021000 	.word	0x40021000
 800a908:	00f42400 	.word	0x00f42400
 800a90c:	016e3600 	.word	0x016e3600

0800a910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a914:	4b03      	ldr	r3, [pc, #12]	@ (800a924 <HAL_RCC_GetHCLKFreq+0x14>)
 800a916:	681b      	ldr	r3, [r3, #0]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	200000fc 	.word	0x200000fc

0800a928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a92c:	f7ff fff0 	bl	800a910 <HAL_RCC_GetHCLKFreq>
 800a930:	4602      	mov	r2, r0
 800a932:	4b06      	ldr	r3, [pc, #24]	@ (800a94c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	4904      	ldr	r1, [pc, #16]	@ (800a950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a93e:	5ccb      	ldrb	r3, [r1, r3]
 800a940:	f003 031f 	and.w	r3, r3, #31
 800a944:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a948:	4618      	mov	r0, r3
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	40021000 	.word	0x40021000
 800a950:	08010f38 	.word	0x08010f38

0800a954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a958:	f7ff ffda 	bl	800a910 <HAL_RCC_GetHCLKFreq>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	0adb      	lsrs	r3, r3, #11
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	4904      	ldr	r1, [pc, #16]	@ (800a97c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a96a:	5ccb      	ldrb	r3, [r1, r3]
 800a96c:	f003 031f 	and.w	r3, r3, #31
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a974:	4618      	mov	r0, r3
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40021000 	.word	0x40021000
 800a97c:	08010f38 	.word	0x08010f38

0800a980 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a986:	4b1e      	ldr	r3, [pc, #120]	@ (800aa00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f003 0303 	and.w	r3, r3, #3
 800a98e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a990:	4b1b      	ldr	r3, [pc, #108]	@ (800aa00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	091b      	lsrs	r3, r3, #4
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	3301      	adds	r3, #1
 800a99c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d10c      	bne.n	800a9be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9a4:	4a17      	ldr	r2, [pc, #92]	@ (800aa04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ac:	4a14      	ldr	r2, [pc, #80]	@ (800aa00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9ae:	68d2      	ldr	r2, [r2, #12]
 800a9b0:	0a12      	lsrs	r2, r2, #8
 800a9b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a9b6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ba:	617b      	str	r3, [r7, #20]
    break;
 800a9bc:	e00c      	b.n	800a9d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9be:	4a12      	ldr	r2, [pc, #72]	@ (800aa08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c6:	4a0e      	ldr	r2, [pc, #56]	@ (800aa00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9c8:	68d2      	ldr	r2, [r2, #12]
 800a9ca:	0a12      	lsrs	r2, r2, #8
 800a9cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
 800a9d4:	617b      	str	r3, [r7, #20]
    break;
 800a9d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a9d8:	4b09      	ldr	r3, [pc, #36]	@ (800aa00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a9f2:	687b      	ldr	r3, [r7, #4]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	40021000 	.word	0x40021000
 800aa04:	016e3600 	.word	0x016e3600
 800aa08:	00f42400 	.word	0x00f42400

0800aa0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa14:	2300      	movs	r3, #0
 800aa16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa18:	2300      	movs	r3, #0
 800aa1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8098 	beq.w	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa2e:	4b43      	ldr	r3, [pc, #268]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10d      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa3a:	4b40      	ldr	r3, [pc, #256]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa44:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa46:	4b3d      	ldr	r3, [pc, #244]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa4e:	60bb      	str	r3, [r7, #8]
 800aa50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa52:	2301      	movs	r3, #1
 800aa54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa56:	4b3a      	ldr	r3, [pc, #232]	@ (800ab40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a39      	ldr	r2, [pc, #228]	@ (800ab40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa62:	f7fc ff61 	bl	8007928 <HAL_GetTick>
 800aa66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa68:	e009      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa6a:	f7fc ff5d 	bl	8007928 <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d902      	bls.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	74fb      	strb	r3, [r7, #19]
        break;
 800aa7c:	e005      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa7e:	4b30      	ldr	r3, [pc, #192]	@ (800ab40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0ef      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800aa8a:	7cfb      	ldrb	r3, [r7, #19]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d159      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa90:	4b2a      	ldr	r3, [pc, #168]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01e      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d019      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aaac:	4b23      	ldr	r3, [pc, #140]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aab8:	4b20      	ldr	r3, [pc, #128]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aabe:	4a1f      	ldr	r2, [pc, #124]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aac8:	4b1c      	ldr	r3, [pc, #112]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aace:	4a1b      	ldr	r2, [pc, #108]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aad8:	4a18      	ldr	r2, [pc, #96]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d016      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaea:	f7fc ff1d 	bl	8007928 <HAL_GetTick>
 800aaee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaf0:	e00b      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaf2:	f7fc ff19 	bl	8007928 <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d902      	bls.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	74fb      	strb	r3, [r7, #19]
            break;
 800ab08:	e006      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0ec      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ab18:	7cfb      	ldrb	r3, [r7, #19]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10b      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab1e:	4b07      	ldr	r3, [pc, #28]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab2c:	4903      	ldr	r1, [pc, #12]	@ (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ab34:	e008      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab36:	7cfb      	ldrb	r3, [r7, #19]
 800ab38:	74bb      	strb	r3, [r7, #18]
 800ab3a:	e005      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ab3c:	40021000 	.word	0x40021000
 800ab40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab44:	7cfb      	ldrb	r3, [r7, #19]
 800ab46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab48:	7c7b      	ldrb	r3, [r7, #17]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d105      	bne.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab4e:	4ba7      	ldr	r3, [pc, #668]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab52:	4aa6      	ldr	r2, [pc, #664]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab66:	4ba1      	ldr	r3, [pc, #644]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab6c:	f023 0203 	bic.w	r2, r3, #3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	499d      	ldr	r1, [pc, #628]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab76:	4313      	orrs	r3, r2
 800ab78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab88:	4b98      	ldr	r3, [pc, #608]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8e:	f023 020c 	bic.w	r2, r3, #12
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	4995      	ldr	r1, [pc, #596]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0304 	and.w	r3, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abaa:	4b90      	ldr	r3, [pc, #576]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	498c      	ldr	r1, [pc, #560]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0308 	and.w	r3, r3, #8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00a      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800abcc:	4b87      	ldr	r3, [pc, #540]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	4984      	ldr	r1, [pc, #528]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0310 	and.w	r3, r3, #16
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800abee:	4b7f      	ldr	r3, [pc, #508]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	497b      	ldr	r1, [pc, #492]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac10:	4b76      	ldr	r3, [pc, #472]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	4973      	ldr	r1, [pc, #460]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac32:	4b6e      	ldr	r3, [pc, #440]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	496a      	ldr	r1, [pc, #424]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac54:	4b65      	ldr	r3, [pc, #404]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	4962      	ldr	r1, [pc, #392]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac76:	4b5d      	ldr	r3, [pc, #372]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac84:	4959      	ldr	r1, [pc, #356]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac98:	4b54      	ldr	r3, [pc, #336]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac9e:	f023 0203 	bic.w	r2, r3, #3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca6:	4951      	ldr	r1, [pc, #324]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acba:	4b4c      	ldr	r3, [pc, #304]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc8:	4948      	ldr	r1, [pc, #288]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acca:	4313      	orrs	r3, r2
 800accc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d015      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800acdc:	4b43      	ldr	r3, [pc, #268]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ace2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acea:	4940      	ldr	r1, [pc, #256]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acec:	4313      	orrs	r3, r2
 800acee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acfa:	d105      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acfc:	4b3b      	ldr	r3, [pc, #236]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	4a3a      	ldr	r2, [pc, #232]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d015      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ad14:	4b35      	ldr	r3, [pc, #212]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad22:	4932      	ldr	r1, [pc, #200]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad32:	d105      	bne.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad34:	4b2d      	ldr	r3, [pc, #180]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4a2c      	ldr	r2, [pc, #176]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d015      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad4c:	4b27      	ldr	r3, [pc, #156]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5a:	4924      	ldr	r1, [pc, #144]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad6a:	d105      	bne.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad6c:	4b1f      	ldr	r3, [pc, #124]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4a1e      	ldr	r2, [pc, #120]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d015      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad84:	4b19      	ldr	r3, [pc, #100]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad92:	4916      	ldr	r1, [pc, #88]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad94:	4313      	orrs	r3, r2
 800ad96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ada2:	d105      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ada4:	4b11      	ldr	r3, [pc, #68]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	4a10      	ldr	r2, [pc, #64]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d019      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adbc:	4b0b      	ldr	r3, [pc, #44]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adca:	4908      	ldr	r1, [pc, #32]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adda:	d109      	bne.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800addc:	4b03      	ldr	r3, [pc, #12]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	4a02      	ldr	r2, [pc, #8]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ade2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ade6:	60d3      	str	r3, [r2, #12]
 800ade8:	e002      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800adea:	bf00      	nop
 800adec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d015      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800adfc:	4b29      	ldr	r3, [pc, #164]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0a:	4926      	ldr	r1, [pc, #152]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae1a:	d105      	bne.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ae1c:	4b21      	ldr	r3, [pc, #132]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	4a20      	ldr	r2, [pc, #128]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d015      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ae34:	4b1b      	ldr	r3, [pc, #108]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae42:	4918      	ldr	r1, [pc, #96]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae52:	d105      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ae54:	4b13      	ldr	r3, [pc, #76]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4a12      	ldr	r2, [pc, #72]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d015      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae6c:	4b0d      	ldr	r3, [pc, #52]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae7a:	490a      	ldr	r1, [pc, #40]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae8a:	d105      	bne.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4a04      	ldr	r2, [pc, #16]	@ (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ae98:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	40021000 	.word	0x40021000

0800aea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e054      	b.n	800af64 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d111      	bne.n	800aeea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f001 fee2 	bl	800cc98 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a23      	ldr	r2, [pc, #140]	@ (800af6c <HAL_TIM_Base_Init+0xc4>)
 800aee0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2202      	movs	r2, #2
 800aeee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3304      	adds	r3, #4
 800aefa:	4619      	mov	r1, r3
 800aefc:	4610      	mov	r0, r2
 800aefe:	f001 fa2b 	bl	800c358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	08007151 	.word	0x08007151

0800af70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b01      	cmp	r3, #1
 800af82:	d001      	beq.n	800af88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e04c      	b.n	800b022 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a26      	ldr	r2, [pc, #152]	@ (800b030 <HAL_TIM_Base_Start+0xc0>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d022      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afa2:	d01d      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a22      	ldr	r2, [pc, #136]	@ (800b034 <HAL_TIM_Base_Start+0xc4>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d018      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a21      	ldr	r2, [pc, #132]	@ (800b038 <HAL_TIM_Base_Start+0xc8>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d013      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a1f      	ldr	r2, [pc, #124]	@ (800b03c <HAL_TIM_Base_Start+0xcc>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d00e      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1e      	ldr	r2, [pc, #120]	@ (800b040 <HAL_TIM_Base_Start+0xd0>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d009      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a1c      	ldr	r2, [pc, #112]	@ (800b044 <HAL_TIM_Base_Start+0xd4>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d004      	beq.n	800afe0 <HAL_TIM_Base_Start+0x70>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a1b      	ldr	r2, [pc, #108]	@ (800b048 <HAL_TIM_Base_Start+0xd8>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d115      	bne.n	800b00c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689a      	ldr	r2, [r3, #8]
 800afe6:	4b19      	ldr	r3, [pc, #100]	@ (800b04c <HAL_TIM_Base_Start+0xdc>)
 800afe8:	4013      	ands	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b06      	cmp	r3, #6
 800aff0:	d015      	beq.n	800b01e <HAL_TIM_Base_Start+0xae>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aff8:	d011      	beq.n	800b01e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f042 0201 	orr.w	r2, r2, #1
 800b008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b00a:	e008      	b.n	800b01e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0201 	orr.w	r2, r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	e000      	b.n	800b020 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b01e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40012c00 	.word	0x40012c00
 800b034:	40000400 	.word	0x40000400
 800b038:	40000800 	.word	0x40000800
 800b03c:	40000c00 	.word	0x40000c00
 800b040:	40013400 	.word	0x40013400
 800b044:	40014000 	.word	0x40014000
 800b048:	40015000 	.word	0x40015000
 800b04c:	00010007 	.word	0x00010007

0800b050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b01      	cmp	r3, #1
 800b062:	d001      	beq.n	800b068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e054      	b.n	800b112 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2202      	movs	r2, #2
 800b06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a26      	ldr	r2, [pc, #152]	@ (800b120 <HAL_TIM_Base_Start_IT+0xd0>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d022      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b092:	d01d      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a22      	ldr	r2, [pc, #136]	@ (800b124 <HAL_TIM_Base_Start_IT+0xd4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d018      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a21      	ldr	r2, [pc, #132]	@ (800b128 <HAL_TIM_Base_Start_IT+0xd8>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d013      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b12c <HAL_TIM_Base_Start_IT+0xdc>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00e      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b130 <HAL_TIM_Base_Start_IT+0xe0>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d009      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b134 <HAL_TIM_Base_Start_IT+0xe4>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d004      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x80>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a1b      	ldr	r2, [pc, #108]	@ (800b138 <HAL_TIM_Base_Start_IT+0xe8>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d115      	bne.n	800b0fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	4b19      	ldr	r3, [pc, #100]	@ (800b13c <HAL_TIM_Base_Start_IT+0xec>)
 800b0d8:	4013      	ands	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b06      	cmp	r3, #6
 800b0e0:	d015      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0xbe>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0e8:	d011      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fa:	e008      	b.n	800b10e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e000      	b.n	800b110 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	40012c00 	.word	0x40012c00
 800b124:	40000400 	.word	0x40000400
 800b128:	40000800 	.word	0x40000800
 800b12c:	40000c00 	.word	0x40000c00
 800b130:	40013400 	.word	0x40013400
 800b134:	40014000 	.word	0x40014000
 800b138:	40015000 	.word	0x40015000
 800b13c:	00010007 	.word	0x00010007

0800b140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e054      	b.n	800b1fc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d111      	bne.n	800b182 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f001 fd96 	bl	800cc98 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a23      	ldr	r2, [pc, #140]	@ (800b204 <HAL_TIM_PWM_Init+0xc4>)
 800b178:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2202      	movs	r2, #2
 800b186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f001 f8df 	bl	800c358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	08007105 	.word	0x08007105

0800b208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d109      	bne.n	800b22c <HAL_TIM_PWM_Start+0x24>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b01      	cmp	r3, #1
 800b222:	bf14      	ite	ne
 800b224:	2301      	movne	r3, #1
 800b226:	2300      	moveq	r3, #0
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	e03c      	b.n	800b2a6 <HAL_TIM_PWM_Start+0x9e>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d109      	bne.n	800b246 <HAL_TIM_PWM_Start+0x3e>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	bf14      	ite	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	2300      	moveq	r3, #0
 800b242:	b2db      	uxtb	r3, r3
 800b244:	e02f      	b.n	800b2a6 <HAL_TIM_PWM_Start+0x9e>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d109      	bne.n	800b260 <HAL_TIM_PWM_Start+0x58>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b01      	cmp	r3, #1
 800b256:	bf14      	ite	ne
 800b258:	2301      	movne	r3, #1
 800b25a:	2300      	moveq	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	e022      	b.n	800b2a6 <HAL_TIM_PWM_Start+0x9e>
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b0c      	cmp	r3, #12
 800b264:	d109      	bne.n	800b27a <HAL_TIM_PWM_Start+0x72>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b01      	cmp	r3, #1
 800b270:	bf14      	ite	ne
 800b272:	2301      	movne	r3, #1
 800b274:	2300      	moveq	r3, #0
 800b276:	b2db      	uxtb	r3, r3
 800b278:	e015      	b.n	800b2a6 <HAL_TIM_PWM_Start+0x9e>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b10      	cmp	r3, #16
 800b27e:	d109      	bne.n	800b294 <HAL_TIM_PWM_Start+0x8c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b01      	cmp	r3, #1
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	e008      	b.n	800b2a6 <HAL_TIM_PWM_Start+0x9e>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	bf14      	ite	ne
 800b2a0:	2301      	movne	r3, #1
 800b2a2:	2300      	moveq	r3, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e0a6      	b.n	800b3fc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d104      	bne.n	800b2be <HAL_TIM_PWM_Start+0xb6>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2bc:	e023      	b.n	800b306 <HAL_TIM_PWM_Start+0xfe>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d104      	bne.n	800b2ce <HAL_TIM_PWM_Start+0xc6>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2cc:	e01b      	b.n	800b306 <HAL_TIM_PWM_Start+0xfe>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d104      	bne.n	800b2de <HAL_TIM_PWM_Start+0xd6>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2dc:	e013      	b.n	800b306 <HAL_TIM_PWM_Start+0xfe>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b0c      	cmp	r3, #12
 800b2e2:	d104      	bne.n	800b2ee <HAL_TIM_PWM_Start+0xe6>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2ec:	e00b      	b.n	800b306 <HAL_TIM_PWM_Start+0xfe>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b10      	cmp	r3, #16
 800b2f2:	d104      	bne.n	800b2fe <HAL_TIM_PWM_Start+0xf6>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2fc:	e003      	b.n	800b306 <HAL_TIM_PWM_Start+0xfe>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2202      	movs	r2, #2
 800b302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fc9c 	bl	800cc4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a3a      	ldr	r2, [pc, #232]	@ (800b404 <HAL_TIM_PWM_Start+0x1fc>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d018      	beq.n	800b350 <HAL_TIM_PWM_Start+0x148>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a39      	ldr	r2, [pc, #228]	@ (800b408 <HAL_TIM_PWM_Start+0x200>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d013      	beq.n	800b350 <HAL_TIM_PWM_Start+0x148>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a37      	ldr	r2, [pc, #220]	@ (800b40c <HAL_TIM_PWM_Start+0x204>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00e      	beq.n	800b350 <HAL_TIM_PWM_Start+0x148>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a36      	ldr	r2, [pc, #216]	@ (800b410 <HAL_TIM_PWM_Start+0x208>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d009      	beq.n	800b350 <HAL_TIM_PWM_Start+0x148>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a34      	ldr	r2, [pc, #208]	@ (800b414 <HAL_TIM_PWM_Start+0x20c>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d004      	beq.n	800b350 <HAL_TIM_PWM_Start+0x148>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a33      	ldr	r2, [pc, #204]	@ (800b418 <HAL_TIM_PWM_Start+0x210>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d101      	bne.n	800b354 <HAL_TIM_PWM_Start+0x14c>
 800b350:	2301      	movs	r3, #1
 800b352:	e000      	b.n	800b356 <HAL_TIM_PWM_Start+0x14e>
 800b354:	2300      	movs	r3, #0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b368:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a25      	ldr	r2, [pc, #148]	@ (800b404 <HAL_TIM_PWM_Start+0x1fc>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d022      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37c:	d01d      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a26      	ldr	r2, [pc, #152]	@ (800b41c <HAL_TIM_PWM_Start+0x214>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d018      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a24      	ldr	r2, [pc, #144]	@ (800b420 <HAL_TIM_PWM_Start+0x218>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d013      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a23      	ldr	r2, [pc, #140]	@ (800b424 <HAL_TIM_PWM_Start+0x21c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00e      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a19      	ldr	r2, [pc, #100]	@ (800b408 <HAL_TIM_PWM_Start+0x200>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d009      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a18      	ldr	r2, [pc, #96]	@ (800b40c <HAL_TIM_PWM_Start+0x204>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d004      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x1b2>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a18      	ldr	r2, [pc, #96]	@ (800b418 <HAL_TIM_PWM_Start+0x210>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d115      	bne.n	800b3e6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	4b19      	ldr	r3, [pc, #100]	@ (800b428 <HAL_TIM_PWM_Start+0x220>)
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b06      	cmp	r3, #6
 800b3ca:	d015      	beq.n	800b3f8 <HAL_TIM_PWM_Start+0x1f0>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3d2:	d011      	beq.n	800b3f8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f042 0201 	orr.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e4:	e008      	b.n	800b3f8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0201 	orr.w	r2, r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e000      	b.n	800b3fa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	40012c00 	.word	0x40012c00
 800b408:	40013400 	.word	0x40013400
 800b40c:	40014000 	.word	0x40014000
 800b410:	40014400 	.word	0x40014400
 800b414:	40014800 	.word	0x40014800
 800b418:	40015000 	.word	0x40015000
 800b41c:	40000400 	.word	0x40000400
 800b420:	40000800 	.word	0x40000800
 800b424:	40000c00 	.word	0x40000c00
 800b428:	00010007 	.word	0x00010007

0800b42c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e04c      	b.n	800b4da <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d111      	bne.n	800b470 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fc1f 	bl	800cc98 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a1f      	ldr	r2, [pc, #124]	@ (800b4e4 <HAL_TIM_OnePulse_Init+0xb8>)
 800b466:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3304      	adds	r3, #4
 800b480:	4619      	mov	r1, r3
 800b482:	4610      	mov	r0, r2
 800b484:	f000 ff68 	bl	800c358 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0208 	bic.w	r2, r2, #8
 800b496:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6819      	ldr	r1, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	0800b4e9 	.word	0x0800b4e9

0800b4e8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b50c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b514:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b51c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b524:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d108      	bne.n	800b53e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d105      	bne.n	800b53e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b532:	7b7b      	ldrb	r3, [r7, #13]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d102      	bne.n	800b53e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b538:	7b3b      	ldrb	r3, [r7, #12]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d001      	beq.n	800b542 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e059      	b.n	800b5f6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2202      	movs	r2, #2
 800b546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2202      	movs	r2, #2
 800b54e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2202      	movs	r2, #2
 800b55e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f042 0202 	orr.w	r2, r2, #2
 800b570:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68da      	ldr	r2, [r3, #12]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f042 0204 	orr.w	r2, r2, #4
 800b580:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2201      	movs	r2, #1
 800b588:	2100      	movs	r1, #0
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fb5e 	bl	800cc4c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2201      	movs	r2, #1
 800b596:	2104      	movs	r1, #4
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fb57 	bl	800cc4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a17      	ldr	r2, [pc, #92]	@ (800b600 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d018      	beq.n	800b5da <HAL_TIM_OnePulse_Start_IT+0xde>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a15      	ldr	r2, [pc, #84]	@ (800b604 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d013      	beq.n	800b5da <HAL_TIM_OnePulse_Start_IT+0xde>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	@ (800b608 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00e      	beq.n	800b5da <HAL_TIM_OnePulse_Start_IT+0xde>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a12      	ldr	r2, [pc, #72]	@ (800b60c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d009      	beq.n	800b5da <HAL_TIM_OnePulse_Start_IT+0xde>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a11      	ldr	r2, [pc, #68]	@ (800b610 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d004      	beq.n	800b5da <HAL_TIM_OnePulse_Start_IT+0xde>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b614 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d101      	bne.n	800b5de <HAL_TIM_OnePulse_Start_IT+0xe2>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b5f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40013400 	.word	0x40013400
 800b608:	40014000 	.word	0x40014000
 800b60c:	40014400 	.word	0x40014400
 800b610:	40014800 	.word	0x40014800
 800b614:	40015000 	.word	0x40015000

0800b618 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e0a2      	b.n	800b772 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d111      	bne.n	800b65c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 fb29 	bl	800cc98 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a4a      	ldr	r2, [pc, #296]	@ (800b77c <HAL_TIM_Encoder_Init+0x164>)
 800b652:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6812      	ldr	r2, [r2, #0]
 800b66e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b672:	f023 0307 	bic.w	r3, r3, #7
 800b676:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3304      	adds	r3, #4
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f000 fe68 	bl	800c358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6b0:	f023 0303 	bic.w	r3, r3, #3
 800b6b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b6ce:	f023 030c 	bic.w	r3, r3, #12
 800b6d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b6de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	68da      	ldr	r2, [r3, #12]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	011a      	lsls	r2, r3, #4
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	031b      	lsls	r3, r3, #12
 800b6fe:	4313      	orrs	r3, r2
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b70c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b714:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	4313      	orrs	r3, r2
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	4313      	orrs	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	080071f9 	.word	0x080071f9

0800b780 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b790:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b798:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d110      	bne.n	800b7d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d102      	bne.n	800b7bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b7b6:	7b7b      	ldrb	r3, [r7, #13]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d001      	beq.n	800b7c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e069      	b.n	800b894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7d0:	e031      	b.n	800b836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d110      	bne.n	800b7fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d102      	bne.n	800b7e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b7de:	7b3b      	ldrb	r3, [r7, #12]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d001      	beq.n	800b7e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e055      	b.n	800b894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7f8:	e01d      	b.n	800b836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d108      	bne.n	800b812 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d105      	bne.n	800b812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b806:	7b7b      	ldrb	r3, [r7, #13]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d102      	bne.n	800b812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b80c:	7b3b      	ldrb	r3, [r7, #12]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d001      	beq.n	800b816 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e03e      	b.n	800b894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2202      	movs	r2, #2
 800b81a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2202      	movs	r2, #2
 800b822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2202      	movs	r2, #2
 800b82a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2202      	movs	r2, #2
 800b832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <HAL_TIM_Encoder_Start+0xc4>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d008      	beq.n	800b854 <HAL_TIM_Encoder_Start+0xd4>
 800b842:	e00f      	b.n	800b864 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2201      	movs	r2, #1
 800b84a:	2100      	movs	r1, #0
 800b84c:	4618      	mov	r0, r3
 800b84e:	f001 f9fd 	bl	800cc4c <TIM_CCxChannelCmd>
      break;
 800b852:	e016      	b.n	800b882 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2201      	movs	r2, #1
 800b85a:	2104      	movs	r1, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 f9f5 	bl	800cc4c <TIM_CCxChannelCmd>
      break;
 800b862:	e00e      	b.n	800b882 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2201      	movs	r2, #1
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f9ed 	bl	800cc4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2201      	movs	r2, #1
 800b878:	2104      	movs	r1, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 f9e6 	bl	800cc4c <TIM_CCxChannelCmd>
      break;
 800b880:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f042 0201 	orr.w	r2, r2, #1
 800b890:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d026      	beq.n	800b90c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d021      	beq.n	800b90c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f06f 0202 	mvn.w	r2, #2
 800b8d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
 800b8f0:	e009      	b.n	800b906 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d026      	beq.n	800b964 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d021      	beq.n	800b964 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f06f 0204 	mvn.w	r2, #4
 800b928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2202      	movs	r2, #2
 800b92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d005      	beq.n	800b94a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
 800b948:	e009      	b.n	800b95e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0308 	and.w	r3, r3, #8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d026      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f003 0308 	and.w	r3, r3, #8
 800b974:	2b00      	cmp	r3, #0
 800b976:	d021      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f06f 0208 	mvn.w	r2, #8
 800b980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2204      	movs	r2, #4
 800b986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	69db      	ldr	r3, [r3, #28]
 800b98e:	f003 0303 	and.w	r3, r3, #3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d005      	beq.n	800b9a2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	4798      	blx	r3
 800b9a0:	e009      	b.n	800b9b6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0310 	and.w	r3, r3, #16
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d026      	beq.n	800ba14 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0310 	and.w	r3, r3, #16
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d021      	beq.n	800ba14 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0210 	mvn.w	r2, #16
 800b9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2208      	movs	r2, #8
 800b9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	4798      	blx	r3
 800b9f8:	e009      	b.n	800ba0e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00e      	beq.n	800ba3c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d009      	beq.n	800ba3c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f06f 0201 	mvn.w	r2, #1
 800ba30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d104      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00e      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d009      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00e      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d009      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00e      	beq.n	800bae6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f06f 0220 	mvn.w	r2, #32
 800bada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00e      	beq.n	800bb0e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bb02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00e      	beq.n	800bb36 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d009      	beq.n	800bb36 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bb2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00e      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d009      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bb52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00e      	beq.n	800bb86 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb86:	bf00      	nop
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d101      	bne.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	e0ff      	b.n	800bdae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b14      	cmp	r3, #20
 800bbba:	f200 80f0 	bhi.w	800bd9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc4:	0800bc19 	.word	0x0800bc19
 800bbc8:	0800bd9f 	.word	0x0800bd9f
 800bbcc:	0800bd9f 	.word	0x0800bd9f
 800bbd0:	0800bd9f 	.word	0x0800bd9f
 800bbd4:	0800bc59 	.word	0x0800bc59
 800bbd8:	0800bd9f 	.word	0x0800bd9f
 800bbdc:	0800bd9f 	.word	0x0800bd9f
 800bbe0:	0800bd9f 	.word	0x0800bd9f
 800bbe4:	0800bc9b 	.word	0x0800bc9b
 800bbe8:	0800bd9f 	.word	0x0800bd9f
 800bbec:	0800bd9f 	.word	0x0800bd9f
 800bbf0:	0800bd9f 	.word	0x0800bd9f
 800bbf4:	0800bcdb 	.word	0x0800bcdb
 800bbf8:	0800bd9f 	.word	0x0800bd9f
 800bbfc:	0800bd9f 	.word	0x0800bd9f
 800bc00:	0800bd9f 	.word	0x0800bd9f
 800bc04:	0800bd1d 	.word	0x0800bd1d
 800bc08:	0800bd9f 	.word	0x0800bd9f
 800bc0c:	0800bd9f 	.word	0x0800bd9f
 800bc10:	0800bd9f 	.word	0x0800bd9f
 800bc14:	0800bd5d 	.word	0x0800bd5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 fc4e 	bl	800c4c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0208 	orr.w	r2, r2, #8
 800bc32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	699a      	ldr	r2, [r3, #24]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0204 	bic.w	r2, r2, #4
 800bc42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6999      	ldr	r1, [r3, #24]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	691a      	ldr	r2, [r3, #16]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	430a      	orrs	r2, r1
 800bc54:	619a      	str	r2, [r3, #24]
      break;
 800bc56:	e0a5      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fcc8 	bl	800c5f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	699a      	ldr	r2, [r3, #24]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	699a      	ldr	r2, [r3, #24]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6999      	ldr	r1, [r3, #24]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	021a      	lsls	r2, r3, #8
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	430a      	orrs	r2, r1
 800bc96:	619a      	str	r2, [r3, #24]
      break;
 800bc98:	e084      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fd3b 	bl	800c71c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69da      	ldr	r2, [r3, #28]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0208 	orr.w	r2, r2, #8
 800bcb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69da      	ldr	r2, [r3, #28]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0204 	bic.w	r2, r2, #4
 800bcc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69d9      	ldr	r1, [r3, #28]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	61da      	str	r2, [r3, #28]
      break;
 800bcd8:	e064      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68b9      	ldr	r1, [r7, #8]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fdad 	bl	800c840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	69da      	ldr	r2, [r3, #28]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	69da      	ldr	r2, [r3, #28]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69d9      	ldr	r1, [r3, #28]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	021a      	lsls	r2, r3, #8
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	61da      	str	r2, [r3, #28]
      break;
 800bd1a:	e043      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 fe20 	bl	800c968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f042 0208 	orr.w	r2, r2, #8
 800bd36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f022 0204 	bic.w	r2, r2, #4
 800bd46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	691a      	ldr	r2, [r3, #16]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bd5a:	e023      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fe6a 	bl	800ca3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	021a      	lsls	r2, r3, #8
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bd9c:	e002      	b.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	75fb      	strb	r3, [r7, #23]
      break;
 800bda2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop

0800bdb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <HAL_TIM_ConfigClockSource+0x1c>
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e0f6      	b.n	800bfc2 <HAL_TIM_ConfigClockSource+0x20a>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bdf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bdf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a6f      	ldr	r2, [pc, #444]	@ (800bfcc <HAL_TIM_ConfigClockSource+0x214>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	f000 80c1 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be14:	4a6d      	ldr	r2, [pc, #436]	@ (800bfcc <HAL_TIM_ConfigClockSource+0x214>)
 800be16:	4293      	cmp	r3, r2
 800be18:	f200 80c6 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be1c:	4a6c      	ldr	r2, [pc, #432]	@ (800bfd0 <HAL_TIM_ConfigClockSource+0x218>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	f000 80b9 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be24:	4a6a      	ldr	r2, [pc, #424]	@ (800bfd0 <HAL_TIM_ConfigClockSource+0x218>)
 800be26:	4293      	cmp	r3, r2
 800be28:	f200 80be 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be2c:	4a69      	ldr	r2, [pc, #420]	@ (800bfd4 <HAL_TIM_ConfigClockSource+0x21c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	f000 80b1 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be34:	4a67      	ldr	r2, [pc, #412]	@ (800bfd4 <HAL_TIM_ConfigClockSource+0x21c>)
 800be36:	4293      	cmp	r3, r2
 800be38:	f200 80b6 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be3c:	4a66      	ldr	r2, [pc, #408]	@ (800bfd8 <HAL_TIM_ConfigClockSource+0x220>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	f000 80a9 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be44:	4a64      	ldr	r2, [pc, #400]	@ (800bfd8 <HAL_TIM_ConfigClockSource+0x220>)
 800be46:	4293      	cmp	r3, r2
 800be48:	f200 80ae 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be4c:	4a63      	ldr	r2, [pc, #396]	@ (800bfdc <HAL_TIM_ConfigClockSource+0x224>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	f000 80a1 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be54:	4a61      	ldr	r2, [pc, #388]	@ (800bfdc <HAL_TIM_ConfigClockSource+0x224>)
 800be56:	4293      	cmp	r3, r2
 800be58:	f200 80a6 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be5c:	4a60      	ldr	r2, [pc, #384]	@ (800bfe0 <HAL_TIM_ConfigClockSource+0x228>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	f000 8099 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be64:	4a5e      	ldr	r2, [pc, #376]	@ (800bfe0 <HAL_TIM_ConfigClockSource+0x228>)
 800be66:	4293      	cmp	r3, r2
 800be68:	f200 809e 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be70:	f000 8091 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be78:	f200 8096 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be80:	f000 8089 	beq.w	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800be84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be88:	f200 808e 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be90:	d03e      	beq.n	800bf10 <HAL_TIM_ConfigClockSource+0x158>
 800be92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be96:	f200 8087 	bhi.w	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800be9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be9e:	f000 8086 	beq.w	800bfae <HAL_TIM_ConfigClockSource+0x1f6>
 800bea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bea6:	d87f      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bea8:	2b70      	cmp	r3, #112	@ 0x70
 800beaa:	d01a      	beq.n	800bee2 <HAL_TIM_ConfigClockSource+0x12a>
 800beac:	2b70      	cmp	r3, #112	@ 0x70
 800beae:	d87b      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800beb0:	2b60      	cmp	r3, #96	@ 0x60
 800beb2:	d050      	beq.n	800bf56 <HAL_TIM_ConfigClockSource+0x19e>
 800beb4:	2b60      	cmp	r3, #96	@ 0x60
 800beb6:	d877      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800beb8:	2b50      	cmp	r3, #80	@ 0x50
 800beba:	d03c      	beq.n	800bf36 <HAL_TIM_ConfigClockSource+0x17e>
 800bebc:	2b50      	cmp	r3, #80	@ 0x50
 800bebe:	d873      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bec0:	2b40      	cmp	r3, #64	@ 0x40
 800bec2:	d058      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x1be>
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	d86f      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bec8:	2b30      	cmp	r3, #48	@ 0x30
 800beca:	d064      	beq.n	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800becc:	2b30      	cmp	r3, #48	@ 0x30
 800bece:	d86b      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bed0:	2b20      	cmp	r3, #32
 800bed2:	d060      	beq.n	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800bed4:	2b20      	cmp	r3, #32
 800bed6:	d867      	bhi.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d05c      	beq.n	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800bedc:	2b10      	cmp	r3, #16
 800bede:	d05a      	beq.n	800bf96 <HAL_TIM_ConfigClockSource+0x1de>
 800bee0:	e062      	b.n	800bfa8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bef2:	f000 fe8b 	bl	800cc0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	609a      	str	r2, [r3, #8]
      break;
 800bf0e:	e04f      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf20:	f000 fe74 	bl	800cc0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf32:	609a      	str	r2, [r3, #8]
      break;
 800bf34:	e03c      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf42:	461a      	mov	r2, r3
 800bf44:	f000 fde6 	bl	800cb14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2150      	movs	r1, #80	@ 0x50
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 fe3f 	bl	800cbd2 <TIM_ITRx_SetConfig>
      break;
 800bf54:	e02c      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf62:	461a      	mov	r2, r3
 800bf64:	f000 fe05 	bl	800cb72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2160      	movs	r1, #96	@ 0x60
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fe2f 	bl	800cbd2 <TIM_ITRx_SetConfig>
      break;
 800bf74:	e01c      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf82:	461a      	mov	r2, r3
 800bf84:	f000 fdc6 	bl	800cb14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2140      	movs	r1, #64	@ 0x40
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fe1f 	bl	800cbd2 <TIM_ITRx_SetConfig>
      break;
 800bf94:	e00c      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f000 fe16 	bl	800cbd2 <TIM_ITRx_SetConfig>
      break;
 800bfa6:	e003      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bfac:	e000      	b.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800bfae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	00100070 	.word	0x00100070
 800bfd0:	00100060 	.word	0x00100060
 800bfd4:	00100050 	.word	0x00100050
 800bfd8:	00100040 	.word	0x00100040
 800bfdc:	00100030 	.word	0x00100030
 800bfe0:	00100020 	.word	0x00100020

0800bfe4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e14a      	b.n	800c34a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	f040 80dd 	bne.w	800c27c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800c0c2:	7afb      	ldrb	r3, [r7, #11]
 800c0c4:	2b1f      	cmp	r3, #31
 800c0c6:	f200 80d6 	bhi.w	800c276 <HAL_TIM_RegisterCallback+0x1de>
 800c0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d0 <HAL_TIM_RegisterCallback+0x38>)
 800c0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d0:	0800c151 	.word	0x0800c151
 800c0d4:	0800c159 	.word	0x0800c159
 800c0d8:	0800c161 	.word	0x0800c161
 800c0dc:	0800c169 	.word	0x0800c169
 800c0e0:	0800c171 	.word	0x0800c171
 800c0e4:	0800c179 	.word	0x0800c179
 800c0e8:	0800c181 	.word	0x0800c181
 800c0ec:	0800c189 	.word	0x0800c189
 800c0f0:	0800c191 	.word	0x0800c191
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c1a1 	.word	0x0800c1a1
 800c0fc:	0800c1a9 	.word	0x0800c1a9
 800c100:	0800c1b1 	.word	0x0800c1b1
 800c104:	0800c1b9 	.word	0x0800c1b9
 800c108:	0800c1c3 	.word	0x0800c1c3
 800c10c:	0800c1cd 	.word	0x0800c1cd
 800c110:	0800c1d7 	.word	0x0800c1d7
 800c114:	0800c1e1 	.word	0x0800c1e1
 800c118:	0800c1eb 	.word	0x0800c1eb
 800c11c:	0800c1f5 	.word	0x0800c1f5
 800c120:	0800c1ff 	.word	0x0800c1ff
 800c124:	0800c209 	.word	0x0800c209
 800c128:	0800c213 	.word	0x0800c213
 800c12c:	0800c21d 	.word	0x0800c21d
 800c130:	0800c227 	.word	0x0800c227
 800c134:	0800c231 	.word	0x0800c231
 800c138:	0800c23b 	.word	0x0800c23b
 800c13c:	0800c245 	.word	0x0800c245
 800c140:	0800c24f 	.word	0x0800c24f
 800c144:	0800c259 	.word	0x0800c259
 800c148:	0800c263 	.word	0x0800c263
 800c14c:	0800c26d 	.word	0x0800c26d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c156:	e0f7      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c15e:	e0f3      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c166:	e0ef      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c16e:	e0eb      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c176:	e0e7      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c17e:	e0e3      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c186:	e0df      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c18e:	e0db      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c196:	e0d7      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c19e:	e0d3      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c1a6:	e0cf      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c1ae:	e0cb      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c1b6:	e0c7      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c1c0:	e0c2      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c1ca:	e0bd      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c1d4:	e0b8      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c1de:	e0b3      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c1e8:	e0ae      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c1f2:	e0a9      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c1fc:	e0a4      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c206:	e09f      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c210:	e09a      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c21a:	e095      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c224:	e090      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c22e:	e08b      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c238:	e086      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c242:	e081      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c24c:	e07c      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c256:	e077      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800c260:	e072      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c26a:	e06d      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c274:	e068      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	75fb      	strb	r3, [r7, #23]
        break;
 800c27a:	e065      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d15d      	bne.n	800c344 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	2b0d      	cmp	r3, #13
 800c28c:	d857      	bhi.n	800c33e <HAL_TIM_RegisterCallback+0x2a6>
 800c28e:	a201      	add	r2, pc, #4	@ (adr r2, 800c294 <HAL_TIM_RegisterCallback+0x1fc>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2cd 	.word	0x0800c2cd
 800c298:	0800c2d5 	.word	0x0800c2d5
 800c29c:	0800c2dd 	.word	0x0800c2dd
 800c2a0:	0800c2e5 	.word	0x0800c2e5
 800c2a4:	0800c2ed 	.word	0x0800c2ed
 800c2a8:	0800c2f5 	.word	0x0800c2f5
 800c2ac:	0800c2fd 	.word	0x0800c2fd
 800c2b0:	0800c305 	.word	0x0800c305
 800c2b4:	0800c30d 	.word	0x0800c30d
 800c2b8:	0800c315 	.word	0x0800c315
 800c2bc:	0800c31d 	.word	0x0800c31d
 800c2c0:	0800c325 	.word	0x0800c325
 800c2c4:	0800c32d 	.word	0x0800c32d
 800c2c8:	0800c335 	.word	0x0800c335
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c2d2:	e039      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c2da:	e035      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c2e2:	e031      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c2ea:	e02d      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c2f2:	e029      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c2fa:	e025      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c302:	e021      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c30a:	e01d      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c312:	e019      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c31a:	e015      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c322:	e011      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c32a:	e00d      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c332:	e009      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c33c:	e004      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	75fb      	strb	r3, [r7, #23]
        break;
 800c342:	e001      	b.n	800c348 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c348:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	371c      	adds	r7, #28
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop

0800c358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a4c      	ldr	r2, [pc, #304]	@ (800c49c <TIM_Base_SetConfig+0x144>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d017      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c376:	d013      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a49      	ldr	r2, [pc, #292]	@ (800c4a0 <TIM_Base_SetConfig+0x148>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00f      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a48      	ldr	r2, [pc, #288]	@ (800c4a4 <TIM_Base_SetConfig+0x14c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d00b      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a47      	ldr	r2, [pc, #284]	@ (800c4a8 <TIM_Base_SetConfig+0x150>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d007      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a46      	ldr	r2, [pc, #280]	@ (800c4ac <TIM_Base_SetConfig+0x154>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d003      	beq.n	800c3a0 <TIM_Base_SetConfig+0x48>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a45      	ldr	r2, [pc, #276]	@ (800c4b0 <TIM_Base_SetConfig+0x158>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d108      	bne.n	800c3b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a39      	ldr	r2, [pc, #228]	@ (800c49c <TIM_Base_SetConfig+0x144>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d023      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3c0:	d01f      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4a36      	ldr	r2, [pc, #216]	@ (800c4a0 <TIM_Base_SetConfig+0x148>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d01b      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a35      	ldr	r2, [pc, #212]	@ (800c4a4 <TIM_Base_SetConfig+0x14c>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d017      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a34      	ldr	r2, [pc, #208]	@ (800c4a8 <TIM_Base_SetConfig+0x150>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d013      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a33      	ldr	r2, [pc, #204]	@ (800c4ac <TIM_Base_SetConfig+0x154>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d00f      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a33      	ldr	r2, [pc, #204]	@ (800c4b4 <TIM_Base_SetConfig+0x15c>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d00b      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a32      	ldr	r2, [pc, #200]	@ (800c4b8 <TIM_Base_SetConfig+0x160>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d007      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a31      	ldr	r2, [pc, #196]	@ (800c4bc <TIM_Base_SetConfig+0x164>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d003      	beq.n	800c402 <TIM_Base_SetConfig+0xaa>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a2c      	ldr	r2, [pc, #176]	@ (800c4b0 <TIM_Base_SetConfig+0x158>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d108      	bne.n	800c414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	4313      	orrs	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a18      	ldr	r2, [pc, #96]	@ (800c49c <TIM_Base_SetConfig+0x144>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d013      	beq.n	800c468 <TIM_Base_SetConfig+0x110>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ac <TIM_Base_SetConfig+0x154>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00f      	beq.n	800c468 <TIM_Base_SetConfig+0x110>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a1a      	ldr	r2, [pc, #104]	@ (800c4b4 <TIM_Base_SetConfig+0x15c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d00b      	beq.n	800c468 <TIM_Base_SetConfig+0x110>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a19      	ldr	r2, [pc, #100]	@ (800c4b8 <TIM_Base_SetConfig+0x160>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d007      	beq.n	800c468 <TIM_Base_SetConfig+0x110>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a18      	ldr	r2, [pc, #96]	@ (800c4bc <TIM_Base_SetConfig+0x164>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d003      	beq.n	800c468 <TIM_Base_SetConfig+0x110>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a13      	ldr	r2, [pc, #76]	@ (800c4b0 <TIM_Base_SetConfig+0x158>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d103      	bne.n	800c470 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d105      	bne.n	800c48e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	f023 0201 	bic.w	r2, r3, #1
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	611a      	str	r2, [r3, #16]
  }
}
 800c48e:	bf00      	nop
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	40012c00 	.word	0x40012c00
 800c4a0:	40000400 	.word	0x40000400
 800c4a4:	40000800 	.word	0x40000800
 800c4a8:	40000c00 	.word	0x40000c00
 800c4ac:	40013400 	.word	0x40013400
 800c4b0:	40015000 	.word	0x40015000
 800c4b4:	40014000 	.word	0x40014000
 800c4b8:	40014400 	.word	0x40014400
 800c4bc:	40014800 	.word	0x40014800

0800c4c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	f023 0201 	bic.w	r2, r3, #1
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 0303 	bic.w	r3, r3, #3
 800c4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	4313      	orrs	r3, r2
 800c504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 0302 	bic.w	r3, r3, #2
 800c50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	4313      	orrs	r3, r2
 800c516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a30      	ldr	r2, [pc, #192]	@ (800c5dc <TIM_OC1_SetConfig+0x11c>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d013      	beq.n	800c548 <TIM_OC1_SetConfig+0x88>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a2f      	ldr	r2, [pc, #188]	@ (800c5e0 <TIM_OC1_SetConfig+0x120>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d00f      	beq.n	800c548 <TIM_OC1_SetConfig+0x88>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a2e      	ldr	r2, [pc, #184]	@ (800c5e4 <TIM_OC1_SetConfig+0x124>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d00b      	beq.n	800c548 <TIM_OC1_SetConfig+0x88>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a2d      	ldr	r2, [pc, #180]	@ (800c5e8 <TIM_OC1_SetConfig+0x128>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_OC1_SetConfig+0x88>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a2c      	ldr	r2, [pc, #176]	@ (800c5ec <TIM_OC1_SetConfig+0x12c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_OC1_SetConfig+0x88>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a2b      	ldr	r2, [pc, #172]	@ (800c5f0 <TIM_OC1_SetConfig+0x130>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d10c      	bne.n	800c562 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f023 0308 	bic.w	r3, r3, #8
 800c54e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	4313      	orrs	r3, r2
 800c558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f023 0304 	bic.w	r3, r3, #4
 800c560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a1d      	ldr	r2, [pc, #116]	@ (800c5dc <TIM_OC1_SetConfig+0x11c>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d013      	beq.n	800c592 <TIM_OC1_SetConfig+0xd2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a1c      	ldr	r2, [pc, #112]	@ (800c5e0 <TIM_OC1_SetConfig+0x120>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d00f      	beq.n	800c592 <TIM_OC1_SetConfig+0xd2>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a1b      	ldr	r2, [pc, #108]	@ (800c5e4 <TIM_OC1_SetConfig+0x124>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d00b      	beq.n	800c592 <TIM_OC1_SetConfig+0xd2>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a1a      	ldr	r2, [pc, #104]	@ (800c5e8 <TIM_OC1_SetConfig+0x128>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d007      	beq.n	800c592 <TIM_OC1_SetConfig+0xd2>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a19      	ldr	r2, [pc, #100]	@ (800c5ec <TIM_OC1_SetConfig+0x12c>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d003      	beq.n	800c592 <TIM_OC1_SetConfig+0xd2>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a18      	ldr	r2, [pc, #96]	@ (800c5f0 <TIM_OC1_SetConfig+0x130>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d111      	bne.n	800c5b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c5a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	621a      	str	r2, [r3, #32]
}
 800c5d0:	bf00      	nop
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	40012c00 	.word	0x40012c00
 800c5e0:	40013400 	.word	0x40013400
 800c5e4:	40014000 	.word	0x40014000
 800c5e8:	40014400 	.word	0x40014400
 800c5ec:	40014800 	.word	0x40014800
 800c5f0:	40015000 	.word	0x40015000

0800c5f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	f023 0210 	bic.w	r2, r3, #16
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	021b      	lsls	r3, r3, #8
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	4313      	orrs	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0320 	bic.w	r3, r3, #32
 800c642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a2c      	ldr	r2, [pc, #176]	@ (800c704 <TIM_OC2_SetConfig+0x110>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d007      	beq.n	800c668 <TIM_OC2_SetConfig+0x74>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a2b      	ldr	r2, [pc, #172]	@ (800c708 <TIM_OC2_SetConfig+0x114>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d003      	beq.n	800c668 <TIM_OC2_SetConfig+0x74>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a2a      	ldr	r2, [pc, #168]	@ (800c70c <TIM_OC2_SetConfig+0x118>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d10d      	bne.n	800c684 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	011b      	lsls	r3, r3, #4
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4313      	orrs	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a1f      	ldr	r2, [pc, #124]	@ (800c704 <TIM_OC2_SetConfig+0x110>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d013      	beq.n	800c6b4 <TIM_OC2_SetConfig+0xc0>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a1e      	ldr	r2, [pc, #120]	@ (800c708 <TIM_OC2_SetConfig+0x114>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00f      	beq.n	800c6b4 <TIM_OC2_SetConfig+0xc0>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a1e      	ldr	r2, [pc, #120]	@ (800c710 <TIM_OC2_SetConfig+0x11c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00b      	beq.n	800c6b4 <TIM_OC2_SetConfig+0xc0>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a1d      	ldr	r2, [pc, #116]	@ (800c714 <TIM_OC2_SetConfig+0x120>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d007      	beq.n	800c6b4 <TIM_OC2_SetConfig+0xc0>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c718 <TIM_OC2_SetConfig+0x124>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d003      	beq.n	800c6b4 <TIM_OC2_SetConfig+0xc0>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a17      	ldr	r2, [pc, #92]	@ (800c70c <TIM_OC2_SetConfig+0x118>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d113      	bne.n	800c6dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c6ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	621a      	str	r2, [r3, #32]
}
 800c6f6:	bf00      	nop
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40012c00 	.word	0x40012c00
 800c708:	40013400 	.word	0x40013400
 800c70c:	40015000 	.word	0x40015000
 800c710:	40014000 	.word	0x40014000
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800

0800c71c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0303 	bic.w	r3, r3, #3
 800c756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	021b      	lsls	r3, r3, #8
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a2b      	ldr	r2, [pc, #172]	@ (800c828 <TIM_OC3_SetConfig+0x10c>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d007      	beq.n	800c78e <TIM_OC3_SetConfig+0x72>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a2a      	ldr	r2, [pc, #168]	@ (800c82c <TIM_OC3_SetConfig+0x110>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d003      	beq.n	800c78e <TIM_OC3_SetConfig+0x72>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a29      	ldr	r2, [pc, #164]	@ (800c830 <TIM_OC3_SetConfig+0x114>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d10d      	bne.n	800c7aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	021b      	lsls	r3, r3, #8
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c7a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a1e      	ldr	r2, [pc, #120]	@ (800c828 <TIM_OC3_SetConfig+0x10c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d013      	beq.n	800c7da <TIM_OC3_SetConfig+0xbe>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c82c <TIM_OC3_SetConfig+0x110>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d00f      	beq.n	800c7da <TIM_OC3_SetConfig+0xbe>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c834 <TIM_OC3_SetConfig+0x118>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d00b      	beq.n	800c7da <TIM_OC3_SetConfig+0xbe>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c838 <TIM_OC3_SetConfig+0x11c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d007      	beq.n	800c7da <TIM_OC3_SetConfig+0xbe>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c83c <TIM_OC3_SetConfig+0x120>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d003      	beq.n	800c7da <TIM_OC3_SetConfig+0xbe>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a16      	ldr	r2, [pc, #88]	@ (800c830 <TIM_OC3_SetConfig+0x114>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d113      	bne.n	800c802 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	011b      	lsls	r3, r3, #4
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	621a      	str	r2, [r3, #32]
}
 800c81c:	bf00      	nop
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	40012c00 	.word	0x40012c00
 800c82c:	40013400 	.word	0x40013400
 800c830:	40015000 	.word	0x40015000
 800c834:	40014000 	.word	0x40014000
 800c838:	40014400 	.word	0x40014400
 800c83c:	40014800 	.word	0x40014800

0800c840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c86e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c87a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	021b      	lsls	r3, r3, #8
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4313      	orrs	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c88e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	031b      	lsls	r3, r3, #12
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	4313      	orrs	r3, r2
 800c89a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a2c      	ldr	r2, [pc, #176]	@ (800c950 <TIM_OC4_SetConfig+0x110>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d007      	beq.n	800c8b4 <TIM_OC4_SetConfig+0x74>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a2b      	ldr	r2, [pc, #172]	@ (800c954 <TIM_OC4_SetConfig+0x114>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d003      	beq.n	800c8b4 <TIM_OC4_SetConfig+0x74>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c958 <TIM_OC4_SetConfig+0x118>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d10d      	bne.n	800c8d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	031b      	lsls	r3, r3, #12
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c950 <TIM_OC4_SetConfig+0x110>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d013      	beq.n	800c900 <TIM_OC4_SetConfig+0xc0>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a1e      	ldr	r2, [pc, #120]	@ (800c954 <TIM_OC4_SetConfig+0x114>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00f      	beq.n	800c900 <TIM_OC4_SetConfig+0xc0>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c95c <TIM_OC4_SetConfig+0x11c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d00b      	beq.n	800c900 <TIM_OC4_SetConfig+0xc0>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c960 <TIM_OC4_SetConfig+0x120>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d007      	beq.n	800c900 <TIM_OC4_SetConfig+0xc0>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a1c      	ldr	r2, [pc, #112]	@ (800c964 <TIM_OC4_SetConfig+0x124>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC4_SetConfig+0xc0>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a17      	ldr	r2, [pc, #92]	@ (800c958 <TIM_OC4_SetConfig+0x118>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d113      	bne.n	800c928 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c906:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c90e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	019b      	lsls	r3, r3, #6
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4313      	orrs	r3, r2
 800c91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	019b      	lsls	r3, r3, #6
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4313      	orrs	r3, r2
 800c926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	621a      	str	r2, [r3, #32]
}
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	40012c00 	.word	0x40012c00
 800c954:	40013400 	.word	0x40013400
 800c958:	40015000 	.word	0x40015000
 800c95c:	40014000 	.word	0x40014000
 800c960:	40014400 	.word	0x40014400
 800c964:	40014800 	.word	0x40014800

0800c968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c968:	b480      	push	{r7}
 800c96a:	b087      	sub	sp, #28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c9ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	041b      	lsls	r3, r3, #16
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a19      	ldr	r2, [pc, #100]	@ (800ca24 <TIM_OC5_SetConfig+0xbc>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d013      	beq.n	800c9ea <TIM_OC5_SetConfig+0x82>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a18      	ldr	r2, [pc, #96]	@ (800ca28 <TIM_OC5_SetConfig+0xc0>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00f      	beq.n	800c9ea <TIM_OC5_SetConfig+0x82>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a17      	ldr	r2, [pc, #92]	@ (800ca2c <TIM_OC5_SetConfig+0xc4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00b      	beq.n	800c9ea <TIM_OC5_SetConfig+0x82>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a16      	ldr	r2, [pc, #88]	@ (800ca30 <TIM_OC5_SetConfig+0xc8>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d007      	beq.n	800c9ea <TIM_OC5_SetConfig+0x82>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a15      	ldr	r2, [pc, #84]	@ (800ca34 <TIM_OC5_SetConfig+0xcc>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d003      	beq.n	800c9ea <TIM_OC5_SetConfig+0x82>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a14      	ldr	r2, [pc, #80]	@ (800ca38 <TIM_OC5_SetConfig+0xd0>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d109      	bne.n	800c9fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	021b      	lsls	r3, r3, #8
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	621a      	str	r2, [r3, #32]
}
 800ca18:	bf00      	nop
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	40012c00 	.word	0x40012c00
 800ca28:	40013400 	.word	0x40013400
 800ca2c:	40014000 	.word	0x40014000
 800ca30:	40014400 	.word	0x40014400
 800ca34:	40014800 	.word	0x40014800
 800ca38:	40015000 	.word	0x40015000

0800ca3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	021b      	lsls	r3, r3, #8
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	051b      	lsls	r3, r3, #20
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a1a      	ldr	r2, [pc, #104]	@ (800cafc <TIM_OC6_SetConfig+0xc0>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d013      	beq.n	800cac0 <TIM_OC6_SetConfig+0x84>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a19      	ldr	r2, [pc, #100]	@ (800cb00 <TIM_OC6_SetConfig+0xc4>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d00f      	beq.n	800cac0 <TIM_OC6_SetConfig+0x84>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a18      	ldr	r2, [pc, #96]	@ (800cb04 <TIM_OC6_SetConfig+0xc8>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d00b      	beq.n	800cac0 <TIM_OC6_SetConfig+0x84>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a17      	ldr	r2, [pc, #92]	@ (800cb08 <TIM_OC6_SetConfig+0xcc>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d007      	beq.n	800cac0 <TIM_OC6_SetConfig+0x84>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a16      	ldr	r2, [pc, #88]	@ (800cb0c <TIM_OC6_SetConfig+0xd0>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d003      	beq.n	800cac0 <TIM_OC6_SetConfig+0x84>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <TIM_OC6_SetConfig+0xd4>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d109      	bne.n	800cad4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	029b      	lsls	r3, r3, #10
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	621a      	str	r2, [r3, #32]
}
 800caee:	bf00      	nop
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	40012c00 	.word	0x40012c00
 800cb00:	40013400 	.word	0x40013400
 800cb04:	40014000 	.word	0x40014000
 800cb08:	40014400 	.word	0x40014400
 800cb0c:	40014800 	.word	0x40014800
 800cb10:	40015000 	.word	0x40015000

0800cb14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6a1b      	ldr	r3, [r3, #32]
 800cb24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f023 0201 	bic.w	r2, r3, #1
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	011b      	lsls	r3, r3, #4
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f023 030a 	bic.w	r3, r3, #10
 800cb50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	621a      	str	r2, [r3, #32]
}
 800cb66:	bf00      	nop
 800cb68:	371c      	adds	r7, #28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b087      	sub	sp, #28
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	60f8      	str	r0, [r7, #12]
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	f023 0210 	bic.w	r2, r3, #16
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cb9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	031b      	lsls	r3, r3, #12
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cbae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	621a      	str	r2, [r3, #32]
}
 800cbc6:	bf00      	nop
 800cbc8:	371c      	adds	r7, #28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b085      	sub	sp, #20
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cbe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	f043 0307 	orr.w	r3, r3, #7
 800cbf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	609a      	str	r2, [r3, #8]
}
 800cc00:	bf00      	nop
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	021a      	lsls	r2, r3, #8
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	609a      	str	r2, [r3, #8]
}
 800cc40:	bf00      	nop
 800cc42:	371c      	adds	r7, #28
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	f003 031f 	and.w	r3, r3, #31
 800cc5e:	2201      	movs	r2, #1
 800cc60:	fa02 f303 	lsl.w	r3, r2, r3
 800cc64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6a1a      	ldr	r2, [r3, #32]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	43db      	mvns	r3, r3
 800cc6e:	401a      	ands	r2, r3
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6a1a      	ldr	r2, [r3, #32]
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f003 031f 	and.w	r3, r3, #31
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	fa01 f303 	lsl.w	r3, r1, r3
 800cc84:	431a      	orrs	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	621a      	str	r2, [r3, #32]
}
 800cc8a:	bf00      	nop
 800cc8c:	371c      	adds	r7, #28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
	...

0800cc98 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a26      	ldr	r2, [pc, #152]	@ (800cd3c <TIM_ResetCallback+0xa4>)
 800cca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a25      	ldr	r2, [pc, #148]	@ (800cd40 <TIM_ResetCallback+0xa8>)
 800ccac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a24      	ldr	r2, [pc, #144]	@ (800cd44 <TIM_ResetCallback+0xac>)
 800ccb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a23      	ldr	r2, [pc, #140]	@ (800cd48 <TIM_ResetCallback+0xb0>)
 800ccbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a22      	ldr	r2, [pc, #136]	@ (800cd4c <TIM_ResetCallback+0xb4>)
 800ccc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a21      	ldr	r2, [pc, #132]	@ (800cd50 <TIM_ResetCallback+0xb8>)
 800cccc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a20      	ldr	r2, [pc, #128]	@ (800cd54 <TIM_ResetCallback+0xbc>)
 800ccd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a1f      	ldr	r2, [pc, #124]	@ (800cd58 <TIM_ResetCallback+0xc0>)
 800ccdc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a1e      	ldr	r2, [pc, #120]	@ (800cd5c <TIM_ResetCallback+0xc4>)
 800cce4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a1d      	ldr	r2, [pc, #116]	@ (800cd60 <TIM_ResetCallback+0xc8>)
 800ccec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a1c      	ldr	r2, [pc, #112]	@ (800cd64 <TIM_ResetCallback+0xcc>)
 800ccf4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	4a1b      	ldr	r2, [pc, #108]	@ (800cd68 <TIM_ResetCallback+0xd0>)
 800ccfc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a1a      	ldr	r2, [pc, #104]	@ (800cd6c <TIM_ResetCallback+0xd4>)
 800cd04:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a19      	ldr	r2, [pc, #100]	@ (800cd70 <TIM_ResetCallback+0xd8>)
 800cd0c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a18      	ldr	r2, [pc, #96]	@ (800cd74 <TIM_ResetCallback+0xdc>)
 800cd14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a17      	ldr	r2, [pc, #92]	@ (800cd78 <TIM_ResetCallback+0xe0>)
 800cd1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a16      	ldr	r2, [pc, #88]	@ (800cd7c <TIM_ResetCallback+0xe4>)
 800cd24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a15      	ldr	r2, [pc, #84]	@ (800cd80 <TIM_ResetCallback+0xe8>)
 800cd2c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	08005c39 	.word	0x08005c39
 800cd40:	0800bfe5 	.word	0x0800bfe5
 800cd44:	0800c05d 	.word	0x0800c05d
 800cd48:	0800c071 	.word	0x0800c071
 800cd4c:	0800c00d 	.word	0x0800c00d
 800cd50:	0800c021 	.word	0x0800c021
 800cd54:	0800bff9 	.word	0x0800bff9
 800cd58:	0800c035 	.word	0x0800c035
 800cd5c:	0800c049 	.word	0x0800c049
 800cd60:	0800c085 	.word	0x0800c085
 800cd64:	0800cfd9 	.word	0x0800cfd9
 800cd68:	0800cfed 	.word	0x0800cfed
 800cd6c:	0800d001 	.word	0x0800d001
 800cd70:	0800d015 	.word	0x0800d015
 800cd74:	0800d029 	.word	0x0800d029
 800cd78:	0800d03d 	.word	0x0800d03d
 800cd7c:	0800d051 	.word	0x0800d051
 800cd80:	0800d065 	.word	0x0800d065

0800cd84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d101      	bne.n	800cd9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e074      	b.n	800ce86 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2202      	movs	r2, #2
 800cda8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a34      	ldr	r2, [pc, #208]	@ (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d009      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a33      	ldr	r2, [pc, #204]	@ (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d004      	beq.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a31      	ldr	r2, [pc, #196]	@ (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d108      	bne.n	800cdec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cde0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cdf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a21      	ldr	r2, [pc, #132]	@ (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d022      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce1c:	d01d      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a1f      	ldr	r2, [pc, #124]	@ (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d018      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d013      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1c      	ldr	r2, [pc, #112]	@ (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00e      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a15      	ldr	r2, [pc, #84]	@ (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d009      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a18      	ldr	r2, [pc, #96]	@ (800ceac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d004      	beq.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a11      	ldr	r2, [pc, #68]	@ (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d10c      	bne.n	800ce74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	40012c00 	.word	0x40012c00
 800ce98:	40013400 	.word	0x40013400
 800ce9c:	40015000 	.word	0x40015000
 800cea0:	40000400 	.word	0x40000400
 800cea4:	40000800 	.word	0x40000800
 800cea8:	40000c00 	.word	0x40000c00
 800ceac:	40014000 	.word	0x40014000

0800ceb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d101      	bne.n	800cecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e078      	b.n	800cfbe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	4313      	orrs	r3, r2
 800cee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf32:	4313      	orrs	r3, r2
 800cf34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	041b      	lsls	r3, r3, #16
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	69db      	ldr	r3, [r3, #28]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a1c      	ldr	r2, [pc, #112]	@ (800cfcc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d009      	beq.n	800cf72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a1b      	ldr	r2, [pc, #108]	@ (800cfd0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d004      	beq.n	800cf72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a19      	ldr	r2, [pc, #100]	@ (800cfd4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d11c      	bne.n	800cfac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7c:	051b      	lsls	r3, r3, #20
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	40012c00 	.word	0x40012c00
 800cfd0:	40013400 	.word	0x40013400
 800cfd4:	40015000 	.word	0x40015000

0800cfd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e050      	b.n	800d12c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d090:	2b00      	cmp	r3, #0
 800d092:	d114      	bne.n	800d0be <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fd5b 	bl	800db58 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d103      	bne.n	800d0b4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a21      	ldr	r2, [pc, #132]	@ (800d134 <HAL_UART_Init+0xbc>)
 800d0b0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2224      	movs	r2, #36	@ 0x24
 800d0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f022 0201 	bic.w	r2, r2, #1
 800d0d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 f888 	bl	800e1f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fd89 	bl	800dbfc <UART_SetConfig>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d101      	bne.n	800d0f4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e01b      	b.n	800d12c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0201 	orr.w	r2, r2, #1
 800d122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 f907 	bl	800e338 <UART_CheckIdleState>
 800d12a:	4603      	mov	r3, r0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	0800754d 	.word	0x0800754d

0800d138 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800d138:	b480      	push	{r7}
 800d13a:	b087      	sub	sp, #28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	460b      	mov	r3, r1
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d109      	bne.n	800d164 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e09c      	b.n	800d29e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d16a:	2b20      	cmp	r3, #32
 800d16c:	d16c      	bne.n	800d248 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800d16e:	7afb      	ldrb	r3, [r7, #11]
 800d170:	2b0c      	cmp	r3, #12
 800d172:	d85e      	bhi.n	800d232 <HAL_UART_RegisterCallback+0xfa>
 800d174:	a201      	add	r2, pc, #4	@ (adr r2, 800d17c <HAL_UART_RegisterCallback+0x44>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d1b1 	.word	0x0800d1b1
 800d180:	0800d1bb 	.word	0x0800d1bb
 800d184:	0800d1c5 	.word	0x0800d1c5
 800d188:	0800d1cf 	.word	0x0800d1cf
 800d18c:	0800d1d9 	.word	0x0800d1d9
 800d190:	0800d1e3 	.word	0x0800d1e3
 800d194:	0800d1ed 	.word	0x0800d1ed
 800d198:	0800d1f7 	.word	0x0800d1f7
 800d19c:	0800d201 	.word	0x0800d201
 800d1a0:	0800d20b 	.word	0x0800d20b
 800d1a4:	0800d215 	.word	0x0800d215
 800d1a8:	0800d21f 	.word	0x0800d21f
 800d1ac:	0800d229 	.word	0x0800d229
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d1b8:	e070      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d1c2:	e06b      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d1cc:	e066      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d1d6:	e061      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d1e0:	e05c      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d1ea:	e057      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d1f4:	e052      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d1fe:	e04d      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d208:	e048      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d212:	e043      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d21c:	e03e      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d226:	e039      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d230:	e034      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d238:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	75fb      	strb	r3, [r7, #23]
        break;
 800d246:	e029      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d11a      	bne.n	800d288 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800d252:	7afb      	ldrb	r3, [r7, #11]
 800d254:	2b0b      	cmp	r3, #11
 800d256:	d002      	beq.n	800d25e <HAL_UART_RegisterCallback+0x126>
 800d258:	2b0c      	cmp	r3, #12
 800d25a:	d005      	beq.n	800d268 <HAL_UART_RegisterCallback+0x130>
 800d25c:	e009      	b.n	800d272 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d266:	e019      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d270:	e014      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	75fb      	strb	r3, [r7, #23]
        break;
 800d286:	e009      	b.n	800d29c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d28e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	371c      	adds	r7, #28
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08a      	sub	sp, #40	@ 0x28
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2c0:	2b20      	cmp	r3, #32
 800d2c2:	d137      	bne.n	800d334 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <HAL_UART_Receive_DMA+0x24>
 800d2ca:	88fb      	ldrh	r3, [r7, #6]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e030      	b.n	800d336 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a18      	ldr	r2, [pc, #96]	@ (800d340 <HAL_UART_Receive_DMA+0x94>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d01f      	beq.n	800d324 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d018      	beq.n	800d324 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	e853 3f00 	ldrex	r3, [r3]
 800d2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	461a      	mov	r2, r3
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	623b      	str	r3, [r7, #32]
 800d312:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d314:	69f9      	ldr	r1, [r7, #28]
 800d316:	6a3a      	ldr	r2, [r7, #32]
 800d318:	e841 2300 	strex	r3, r2, [r1]
 800d31c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1e6      	bne.n	800d2f2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d324:	88fb      	ldrh	r3, [r7, #6]
 800d326:	461a      	mov	r2, r3
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f001 f91c 	bl	800e568 <UART_Start_Receive_DMA>
 800d330:	4603      	mov	r3, r0
 800d332:	e000      	b.n	800d336 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d334:	2302      	movs	r3, #2
  }
}
 800d336:	4618      	mov	r0, r3
 800d338:	3728      	adds	r7, #40	@ 0x28
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	40008000 	.word	0x40008000

0800d344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b0ba      	sub	sp, #232	@ 0xe8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d36a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d36e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d372:	4013      	ands	r3, r2
 800d374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d11b      	bne.n	800d3b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d384:	f003 0320 	and.w	r3, r3, #32
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d015      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d390:	f003 0320 	and.w	r3, r3, #32
 800d394:	2b00      	cmp	r3, #0
 800d396:	d105      	bne.n	800d3a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d39c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d009      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 8312 	beq.w	800d9d2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	4798      	blx	r3
      }
      return;
 800d3b6:	e30c      	b.n	800d9d2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 8129 	beq.w	800d614 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d3c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d3c6:	4b90      	ldr	r3, [pc, #576]	@ (800d608 <HAL_UART_IRQHandler+0x2c4>)
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d3ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d3d2:	4b8e      	ldr	r3, [pc, #568]	@ (800d60c <HAL_UART_IRQHandler+0x2c8>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 811c 	beq.w	800d614 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3e0:	f003 0301 	and.w	r3, r3, #1
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d011      	beq.n	800d40c <HAL_UART_IRQHandler+0xc8>
 800d3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00b      	beq.n	800d40c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d402:	f043 0201 	orr.w	r2, r3, #1
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d011      	beq.n	800d43c <HAL_UART_IRQHandler+0xf8>
 800d418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00b      	beq.n	800d43c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2202      	movs	r2, #2
 800d42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d432:	f043 0204 	orr.w	r2, r3, #4
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d440:	f003 0304 	and.w	r3, r3, #4
 800d444:	2b00      	cmp	r3, #0
 800d446:	d011      	beq.n	800d46c <HAL_UART_IRQHandler+0x128>
 800d448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00b      	beq.n	800d46c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2204      	movs	r2, #4
 800d45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d462:	f043 0202 	orr.w	r2, r3, #2
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b00      	cmp	r3, #0
 800d476:	d017      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d488:	4b5f      	ldr	r3, [pc, #380]	@ (800d608 <HAL_UART_IRQHandler+0x2c4>)
 800d48a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00b      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2208      	movs	r2, #8
 800d496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d49e:	f043 0208 	orr.w	r2, r3, #8
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d012      	beq.n	800d4da <HAL_UART_IRQHandler+0x196>
 800d4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4d0:	f043 0220 	orr.w	r2, r3, #32
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 8278 	beq.w	800d9d6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ea:	f003 0320 	and.w	r3, r3, #32
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4f6:	f003 0320 	and.w	r3, r3, #32
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d007      	beq.n	800d51a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d52e:	2b40      	cmp	r3, #64	@ 0x40
 800d530:	d005      	beq.n	800d53e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d536:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d058      	beq.n	800d5f0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 f8f9 	bl	800e736 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d54e:	2b40      	cmp	r3, #64	@ 0x40
 800d550:	d148      	bne.n	800d5e4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3308      	adds	r3, #8
 800d558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d560:	e853 3f00 	ldrex	r3, [r3]
 800d564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3308      	adds	r3, #8
 800d57a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d57e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d58a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d58e:	e841 2300 	strex	r3, r2, [r1]
 800d592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1d9      	bne.n	800d552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d017      	beq.n	800d5d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ae:	4a18      	ldr	r2, [pc, #96]	@ (800d610 <HAL_UART_IRQHandler+0x2cc>)
 800d5b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fc f8c5 	bl	8009748 <HAL_DMA_Abort_IT>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01f      	beq.n	800d604 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d6:	e015      	b.n	800d604 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5e2:	e00f      	b.n	800d604 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ee:	e009      	b.n	800d604 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d602:	e1e8      	b.n	800d9d6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d604:	bf00      	nop
    return;
 800d606:	e1e6      	b.n	800d9d6 <HAL_UART_IRQHandler+0x692>
 800d608:	10000001 	.word	0x10000001
 800d60c:	04000120 	.word	0x04000120
 800d610:	0800ea01 	.word	0x0800ea01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d618:	2b01      	cmp	r3, #1
 800d61a:	f040 8176 	bne.w	800d90a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d622:	f003 0310 	and.w	r3, r3, #16
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 816f 	beq.w	800d90a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d630:	f003 0310 	and.w	r3, r3, #16
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 8168 	beq.w	800d90a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2210      	movs	r2, #16
 800d640:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d64c:	2b40      	cmp	r3, #64	@ 0x40
 800d64e:	f040 80dc 	bne.w	800d80a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d660:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 80b1 	beq.w	800d7cc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d674:	429a      	cmp	r2, r3
 800d676:	f080 80a9 	bcs.w	800d7cc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	f040 8087 	bne.w	800d7a6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6a4:	e853 3f00 	ldrex	r3, [r3]
 800d6a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d6ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d6c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d6ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d6d2:	e841 2300 	strex	r3, r2, [r1]
 800d6d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1da      	bne.n	800d698 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d6f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6f4:	f023 0301 	bic.w	r3, r3, #1
 800d6f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3308      	adds	r3, #8
 800d702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d706:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d70a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d70e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e1      	bne.n	800d6e2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3308      	adds	r3, #8
 800d724:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d72e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d744:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d746:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d748:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e3      	bne.n	800d71e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2220      	movs	r2, #32
 800d75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d76c:	e853 3f00 	ldrex	r3, [r3]
 800d770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d774:	f023 0310 	bic.w	r3, r3, #16
 800d778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d786:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d788:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d78c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d78e:	e841 2300 	strex	r3, r2, [r1]
 800d792:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e4      	bne.n	800d764 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fb ff78 	bl	8009696 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800d7be:	b292      	uxth	r2, r2
 800d7c0:	1a8a      	subs	r2, r1, r2
 800d7c2:	b292      	uxth	r2, r2
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d7ca:	e106      	b.n	800d9da <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d7d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	f040 80ff 	bne.w	800d9da <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	f040 80f5 	bne.w	800d9da <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d802:	4611      	mov	r1, r2
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	4798      	blx	r3
      return;
 800d808:	e0e7      	b.n	800d9da <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d816:	b29b      	uxth	r3, r3
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d824:	b29b      	uxth	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 80d9 	beq.w	800d9de <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800d82c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 80d4 	beq.w	800d9de <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83e:	e853 3f00 	ldrex	r3, [r3]
 800d842:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d84a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d858:	647b      	str	r3, [r7, #68]	@ 0x44
 800d85a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d85e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d860:	e841 2300 	strex	r3, r2, [r1]
 800d864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1e4      	bne.n	800d836 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3308      	adds	r3, #8
 800d872:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d876:	e853 3f00 	ldrex	r3, [r3]
 800d87a:	623b      	str	r3, [r7, #32]
   return(result);
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d882:	f023 0301 	bic.w	r3, r3, #1
 800d886:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3308      	adds	r3, #8
 800d890:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d894:	633a      	str	r2, [r7, #48]	@ 0x30
 800d896:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d89a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d89c:	e841 2300 	strex	r3, r2, [r1]
 800d8a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1e1      	bne.n	800d86c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f023 0310 	bic.w	r3, r3, #16
 800d8d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d8de:	61fb      	str	r3, [r7, #28]
 800d8e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	69b9      	ldr	r1, [r7, #24]
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e4      	bne.n	800d8bc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d8fe:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d902:	4611      	mov	r1, r2
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d908:	e069      	b.n	800d9de <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d90e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d912:	2b00      	cmp	r3, #0
 800d914:	d010      	beq.n	800d938 <HAL_UART_IRQHandler+0x5f4>
 800d916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d91a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00a      	beq.n	800d938 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d92a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d936:	e055      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d940:	2b00      	cmp	r3, #0
 800d942:	d014      	beq.n	800d96e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d105      	bne.n	800d95c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d008      	beq.n	800d96e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d960:	2b00      	cmp	r3, #0
 800d962:	d03e      	beq.n	800d9e2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	4798      	blx	r3
    }
    return;
 800d96c:	e039      	b.n	800d9e2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d976:	2b00      	cmp	r3, #0
 800d978:	d009      	beq.n	800d98e <HAL_UART_IRQHandler+0x64a>
 800d97a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f001 f84e 	bl	800ea28 <UART_EndTransmit_IT>
    return;
 800d98c:	e02a      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00b      	beq.n	800d9b2 <HAL_UART_IRQHandler+0x66e>
 800d99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d99e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9b0:	e018      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d012      	beq.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
 800d9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	da0e      	bge.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9d0:	e008      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d9d2:	bf00      	nop
 800d9d4:	e006      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d9d6:	bf00      	nop
 800d9d8:	e004      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d9da:	bf00      	nop
 800d9dc:	e002      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d9de:	bf00      	nop
 800d9e0:	e000      	b.n	800d9e4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d9e2:	bf00      	nop
  }
}
 800d9e4:	37e8      	adds	r7, #232	@ 0xe8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop

0800d9ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a09      	ldr	r2, [pc, #36]	@ (800dac4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d009      	beq.n	800dab8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	615a      	str	r2, [r3, #20]
  }
}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	40008000 	.word	0x40008000

0800dac8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a18      	ldr	r2, [pc, #96]	@ (800db38 <HAL_UART_EnableReceiverTimeout+0x70>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d027      	beq.n	800db2a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d120      	bne.n	800db26 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800daee:	2302      	movs	r3, #2
 800daf0:	e01c      	b.n	800db2c <HAL_UART_EnableReceiverTimeout+0x64>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2224      	movs	r2, #36	@ 0x24
 800dafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800db10:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	e002      	b.n	800db2c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800db26:	2302      	movs	r3, #2
 800db28:	e000      	b.n	800db2c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
  }
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	40008000 	.word	0x40008000

0800db3c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
	...

0800db58 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a1a      	ldr	r2, [pc, #104]	@ (800dbcc <UART_InitCallbacksToDefault+0x74>)
 800db64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a19      	ldr	r2, [pc, #100]	@ (800dbd0 <UART_InitCallbacksToDefault+0x78>)
 800db6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a18      	ldr	r2, [pc, #96]	@ (800dbd4 <UART_InitCallbacksToDefault+0x7c>)
 800db74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a17      	ldr	r2, [pc, #92]	@ (800dbd8 <UART_InitCallbacksToDefault+0x80>)
 800db7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a16      	ldr	r2, [pc, #88]	@ (800dbdc <UART_InitCallbacksToDefault+0x84>)
 800db84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4a15      	ldr	r2, [pc, #84]	@ (800dbe0 <UART_InitCallbacksToDefault+0x88>)
 800db8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a14      	ldr	r2, [pc, #80]	@ (800dbe4 <UART_InitCallbacksToDefault+0x8c>)
 800db94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4a13      	ldr	r2, [pc, #76]	@ (800dbe8 <UART_InitCallbacksToDefault+0x90>)
 800db9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a12      	ldr	r2, [pc, #72]	@ (800dbec <UART_InitCallbacksToDefault+0x94>)
 800dba4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a11      	ldr	r2, [pc, #68]	@ (800dbf0 <UART_InitCallbacksToDefault+0x98>)
 800dbac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a10      	ldr	r2, [pc, #64]	@ (800dbf4 <UART_InitCallbacksToDefault+0x9c>)
 800dbb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a0f      	ldr	r2, [pc, #60]	@ (800dbf8 <UART_InitCallbacksToDefault+0xa0>)
 800dbbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	0800da01 	.word	0x0800da01
 800dbd0:	0800d9ed 	.word	0x0800d9ed
 800dbd4:	0800da15 	.word	0x0800da15
 800dbd8:	08005c25 	.word	0x08005c25
 800dbdc:	0800da29 	.word	0x0800da29
 800dbe0:	0800da3d 	.word	0x0800da3d
 800dbe4:	0800da51 	.word	0x0800da51
 800dbe8:	0800da65 	.word	0x0800da65
 800dbec:	0800ea83 	.word	0x0800ea83
 800dbf0:	0800ea97 	.word	0x0800ea97
 800dbf4:	0800eaab 	.word	0x0800eaab
 800dbf8:	0800da79 	.word	0x0800da79

0800dbfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc00:	b08c      	sub	sp, #48	@ 0x30
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	689a      	ldr	r2, [r3, #8]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	431a      	orrs	r2, r3
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	431a      	orrs	r2, r3
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	69db      	ldr	r3, [r3, #28]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	4baa      	ldr	r3, [pc, #680]	@ (800ded4 <UART_SetConfig+0x2d8>)
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	6812      	ldr	r2, [r2, #0]
 800dc32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc34:	430b      	orrs	r3, r1
 800dc36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	68da      	ldr	r2, [r3, #12]
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	430a      	orrs	r2, r1
 800dc4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a9f      	ldr	r2, [pc, #636]	@ (800ded8 <UART_SetConfig+0x2dc>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d004      	beq.n	800dc68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc64:	4313      	orrs	r3, r2
 800dc66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800dc72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	6812      	ldr	r2, [r2, #0]
 800dc7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc7c:	430b      	orrs	r3, r1
 800dc7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc86:	f023 010f 	bic.w	r1, r3, #15
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a90      	ldr	r2, [pc, #576]	@ (800dedc <UART_SetConfig+0x2e0>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d125      	bne.n	800dcec <UART_SetConfig+0xf0>
 800dca0:	4b8f      	ldr	r3, [pc, #572]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800dca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dca6:	f003 0303 	and.w	r3, r3, #3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d81a      	bhi.n	800dce4 <UART_SetConfig+0xe8>
 800dcae:	a201      	add	r2, pc, #4	@ (adr r2, 800dcb4 <UART_SetConfig+0xb8>)
 800dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb4:	0800dcc5 	.word	0x0800dcc5
 800dcb8:	0800dcd5 	.word	0x0800dcd5
 800dcbc:	0800dccd 	.word	0x0800dccd
 800dcc0:	0800dcdd 	.word	0x0800dcdd
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcca:	e116      	b.n	800defa <UART_SetConfig+0x2fe>
 800dccc:	2302      	movs	r3, #2
 800dcce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcd2:	e112      	b.n	800defa <UART_SetConfig+0x2fe>
 800dcd4:	2304      	movs	r3, #4
 800dcd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcda:	e10e      	b.n	800defa <UART_SetConfig+0x2fe>
 800dcdc:	2308      	movs	r3, #8
 800dcde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dce2:	e10a      	b.n	800defa <UART_SetConfig+0x2fe>
 800dce4:	2310      	movs	r3, #16
 800dce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcea:	e106      	b.n	800defa <UART_SetConfig+0x2fe>
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a7c      	ldr	r2, [pc, #496]	@ (800dee4 <UART_SetConfig+0x2e8>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d138      	bne.n	800dd68 <UART_SetConfig+0x16c>
 800dcf6:	4b7a      	ldr	r3, [pc, #488]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800dcf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcfc:	f003 030c 	and.w	r3, r3, #12
 800dd00:	2b0c      	cmp	r3, #12
 800dd02:	d82d      	bhi.n	800dd60 <UART_SetConfig+0x164>
 800dd04:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <UART_SetConfig+0x110>)
 800dd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0a:	bf00      	nop
 800dd0c:	0800dd41 	.word	0x0800dd41
 800dd10:	0800dd61 	.word	0x0800dd61
 800dd14:	0800dd61 	.word	0x0800dd61
 800dd18:	0800dd61 	.word	0x0800dd61
 800dd1c:	0800dd51 	.word	0x0800dd51
 800dd20:	0800dd61 	.word	0x0800dd61
 800dd24:	0800dd61 	.word	0x0800dd61
 800dd28:	0800dd61 	.word	0x0800dd61
 800dd2c:	0800dd49 	.word	0x0800dd49
 800dd30:	0800dd61 	.word	0x0800dd61
 800dd34:	0800dd61 	.word	0x0800dd61
 800dd38:	0800dd61 	.word	0x0800dd61
 800dd3c:	0800dd59 	.word	0x0800dd59
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd46:	e0d8      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd48:	2302      	movs	r3, #2
 800dd4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd4e:	e0d4      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd50:	2304      	movs	r3, #4
 800dd52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd56:	e0d0      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd58:	2308      	movs	r3, #8
 800dd5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd5e:	e0cc      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd60:	2310      	movs	r3, #16
 800dd62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd66:	e0c8      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a5e      	ldr	r2, [pc, #376]	@ (800dee8 <UART_SetConfig+0x2ec>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d125      	bne.n	800ddbe <UART_SetConfig+0x1c2>
 800dd72:	4b5b      	ldr	r3, [pc, #364]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800dd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800dd7c:	2b30      	cmp	r3, #48	@ 0x30
 800dd7e:	d016      	beq.n	800ddae <UART_SetConfig+0x1b2>
 800dd80:	2b30      	cmp	r3, #48	@ 0x30
 800dd82:	d818      	bhi.n	800ddb6 <UART_SetConfig+0x1ba>
 800dd84:	2b20      	cmp	r3, #32
 800dd86:	d00a      	beq.n	800dd9e <UART_SetConfig+0x1a2>
 800dd88:	2b20      	cmp	r3, #32
 800dd8a:	d814      	bhi.n	800ddb6 <UART_SetConfig+0x1ba>
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <UART_SetConfig+0x19a>
 800dd90:	2b10      	cmp	r3, #16
 800dd92:	d008      	beq.n	800dda6 <UART_SetConfig+0x1aa>
 800dd94:	e00f      	b.n	800ddb6 <UART_SetConfig+0x1ba>
 800dd96:	2300      	movs	r3, #0
 800dd98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd9c:	e0ad      	b.n	800defa <UART_SetConfig+0x2fe>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dda4:	e0a9      	b.n	800defa <UART_SetConfig+0x2fe>
 800dda6:	2304      	movs	r3, #4
 800dda8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ddac:	e0a5      	b.n	800defa <UART_SetConfig+0x2fe>
 800ddae:	2308      	movs	r3, #8
 800ddb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ddb4:	e0a1      	b.n	800defa <UART_SetConfig+0x2fe>
 800ddb6:	2310      	movs	r3, #16
 800ddb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ddbc:	e09d      	b.n	800defa <UART_SetConfig+0x2fe>
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a4a      	ldr	r2, [pc, #296]	@ (800deec <UART_SetConfig+0x2f0>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d125      	bne.n	800de14 <UART_SetConfig+0x218>
 800ddc8:	4b45      	ldr	r3, [pc, #276]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800ddca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ddd2:	2bc0      	cmp	r3, #192	@ 0xc0
 800ddd4:	d016      	beq.n	800de04 <UART_SetConfig+0x208>
 800ddd6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ddd8:	d818      	bhi.n	800de0c <UART_SetConfig+0x210>
 800ddda:	2b80      	cmp	r3, #128	@ 0x80
 800dddc:	d00a      	beq.n	800ddf4 <UART_SetConfig+0x1f8>
 800ddde:	2b80      	cmp	r3, #128	@ 0x80
 800dde0:	d814      	bhi.n	800de0c <UART_SetConfig+0x210>
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <UART_SetConfig+0x1f0>
 800dde6:	2b40      	cmp	r3, #64	@ 0x40
 800dde8:	d008      	beq.n	800ddfc <UART_SetConfig+0x200>
 800ddea:	e00f      	b.n	800de0c <UART_SetConfig+0x210>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ddf2:	e082      	b.n	800defa <UART_SetConfig+0x2fe>
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ddfa:	e07e      	b.n	800defa <UART_SetConfig+0x2fe>
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de02:	e07a      	b.n	800defa <UART_SetConfig+0x2fe>
 800de04:	2308      	movs	r3, #8
 800de06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de0a:	e076      	b.n	800defa <UART_SetConfig+0x2fe>
 800de0c:	2310      	movs	r3, #16
 800de0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de12:	e072      	b.n	800defa <UART_SetConfig+0x2fe>
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a35      	ldr	r2, [pc, #212]	@ (800def0 <UART_SetConfig+0x2f4>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d12a      	bne.n	800de74 <UART_SetConfig+0x278>
 800de1e:	4b30      	ldr	r3, [pc, #192]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800de20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de2c:	d01a      	beq.n	800de64 <UART_SetConfig+0x268>
 800de2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de32:	d81b      	bhi.n	800de6c <UART_SetConfig+0x270>
 800de34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de38:	d00c      	beq.n	800de54 <UART_SetConfig+0x258>
 800de3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de3e:	d815      	bhi.n	800de6c <UART_SetConfig+0x270>
 800de40:	2b00      	cmp	r3, #0
 800de42:	d003      	beq.n	800de4c <UART_SetConfig+0x250>
 800de44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de48:	d008      	beq.n	800de5c <UART_SetConfig+0x260>
 800de4a:	e00f      	b.n	800de6c <UART_SetConfig+0x270>
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de52:	e052      	b.n	800defa <UART_SetConfig+0x2fe>
 800de54:	2302      	movs	r3, #2
 800de56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de5a:	e04e      	b.n	800defa <UART_SetConfig+0x2fe>
 800de5c:	2304      	movs	r3, #4
 800de5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de62:	e04a      	b.n	800defa <UART_SetConfig+0x2fe>
 800de64:	2308      	movs	r3, #8
 800de66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de6a:	e046      	b.n	800defa <UART_SetConfig+0x2fe>
 800de6c:	2310      	movs	r3, #16
 800de6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de72:	e042      	b.n	800defa <UART_SetConfig+0x2fe>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a17      	ldr	r2, [pc, #92]	@ (800ded8 <UART_SetConfig+0x2dc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d13a      	bne.n	800def4 <UART_SetConfig+0x2f8>
 800de7e:	4b18      	ldr	r3, [pc, #96]	@ (800dee0 <UART_SetConfig+0x2e4>)
 800de80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800de88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de8c:	d01a      	beq.n	800dec4 <UART_SetConfig+0x2c8>
 800de8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de92:	d81b      	bhi.n	800decc <UART_SetConfig+0x2d0>
 800de94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de98:	d00c      	beq.n	800deb4 <UART_SetConfig+0x2b8>
 800de9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de9e:	d815      	bhi.n	800decc <UART_SetConfig+0x2d0>
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <UART_SetConfig+0x2b0>
 800dea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dea8:	d008      	beq.n	800debc <UART_SetConfig+0x2c0>
 800deaa:	e00f      	b.n	800decc <UART_SetConfig+0x2d0>
 800deac:	2300      	movs	r3, #0
 800deae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800deb2:	e022      	b.n	800defa <UART_SetConfig+0x2fe>
 800deb4:	2302      	movs	r3, #2
 800deb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800deba:	e01e      	b.n	800defa <UART_SetConfig+0x2fe>
 800debc:	2304      	movs	r3, #4
 800debe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dec2:	e01a      	b.n	800defa <UART_SetConfig+0x2fe>
 800dec4:	2308      	movs	r3, #8
 800dec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800deca:	e016      	b.n	800defa <UART_SetConfig+0x2fe>
 800decc:	2310      	movs	r3, #16
 800dece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ded2:	e012      	b.n	800defa <UART_SetConfig+0x2fe>
 800ded4:	cfff69f3 	.word	0xcfff69f3
 800ded8:	40008000 	.word	0x40008000
 800dedc:	40013800 	.word	0x40013800
 800dee0:	40021000 	.word	0x40021000
 800dee4:	40004400 	.word	0x40004400
 800dee8:	40004800 	.word	0x40004800
 800deec:	40004c00 	.word	0x40004c00
 800def0:	40005000 	.word	0x40005000
 800def4:	2310      	movs	r3, #16
 800def6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4aae      	ldr	r2, [pc, #696]	@ (800e1b8 <UART_SetConfig+0x5bc>)
 800df00:	4293      	cmp	r3, r2
 800df02:	f040 8097 	bne.w	800e034 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800df0a:	2b08      	cmp	r3, #8
 800df0c:	d823      	bhi.n	800df56 <UART_SetConfig+0x35a>
 800df0e:	a201      	add	r2, pc, #4	@ (adr r2, 800df14 <UART_SetConfig+0x318>)
 800df10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df14:	0800df39 	.word	0x0800df39
 800df18:	0800df57 	.word	0x0800df57
 800df1c:	0800df41 	.word	0x0800df41
 800df20:	0800df57 	.word	0x0800df57
 800df24:	0800df47 	.word	0x0800df47
 800df28:	0800df57 	.word	0x0800df57
 800df2c:	0800df57 	.word	0x0800df57
 800df30:	0800df57 	.word	0x0800df57
 800df34:	0800df4f 	.word	0x0800df4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df38:	f7fc fcf6 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 800df3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800df3e:	e010      	b.n	800df62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df40:	4b9e      	ldr	r3, [pc, #632]	@ (800e1bc <UART_SetConfig+0x5c0>)
 800df42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800df44:	e00d      	b.n	800df62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df46:	f7fc fc81 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800df4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800df4c:	e009      	b.n	800df62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800df54:	e005      	b.n	800df62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800df60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 8130 	beq.w	800e1ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6e:	4a94      	ldr	r2, [pc, #592]	@ (800e1c0 <UART_SetConfig+0x5c4>)
 800df70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df74:	461a      	mov	r2, r3
 800df76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df78:	fbb3 f3f2 	udiv	r3, r3, r2
 800df7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	4413      	add	r3, r2
 800df88:	69ba      	ldr	r2, [r7, #24]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d305      	bcc.n	800df9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df94:	69ba      	ldr	r2, [r7, #24]
 800df96:	429a      	cmp	r2, r3
 800df98:	d903      	bls.n	800dfa2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dfa0:	e113      	b.n	800e1ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	60bb      	str	r3, [r7, #8]
 800dfa8:	60fa      	str	r2, [r7, #12]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfae:	4a84      	ldr	r2, [pc, #528]	@ (800e1c0 <UART_SetConfig+0x5c4>)
 800dfb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	603b      	str	r3, [r7, #0]
 800dfba:	607a      	str	r2, [r7, #4]
 800dfbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfc4:	f7f2 fe16 	bl	8000bf4 <__aeabi_uldivmod>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4619      	mov	r1, r3
 800dfd0:	f04f 0200 	mov.w	r2, #0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	020b      	lsls	r3, r1, #8
 800dfda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfde:	0202      	lsls	r2, r0, #8
 800dfe0:	6979      	ldr	r1, [r7, #20]
 800dfe2:	6849      	ldr	r1, [r1, #4]
 800dfe4:	0849      	lsrs	r1, r1, #1
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	4605      	mov	r5, r0
 800dfec:	eb12 0804 	adds.w	r8, r2, r4
 800dff0:	eb43 0905 	adc.w	r9, r3, r5
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	469a      	mov	sl, r3
 800dffc:	4693      	mov	fp, r2
 800dffe:	4652      	mov	r2, sl
 800e000:	465b      	mov	r3, fp
 800e002:	4640      	mov	r0, r8
 800e004:	4649      	mov	r1, r9
 800e006:	f7f2 fdf5 	bl	8000bf4 <__aeabi_uldivmod>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4613      	mov	r3, r2
 800e010:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e018:	d308      	bcc.n	800e02c <UART_SetConfig+0x430>
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e020:	d204      	bcs.n	800e02c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	6a3a      	ldr	r2, [r7, #32]
 800e028:	60da      	str	r2, [r3, #12]
 800e02a:	e0ce      	b.n	800e1ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e032:	e0ca      	b.n	800e1ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e03c:	d166      	bne.n	800e10c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e03e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e042:	2b08      	cmp	r3, #8
 800e044:	d827      	bhi.n	800e096 <UART_SetConfig+0x49a>
 800e046:	a201      	add	r2, pc, #4	@ (adr r2, 800e04c <UART_SetConfig+0x450>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e071 	.word	0x0800e071
 800e050:	0800e079 	.word	0x0800e079
 800e054:	0800e081 	.word	0x0800e081
 800e058:	0800e097 	.word	0x0800e097
 800e05c:	0800e087 	.word	0x0800e087
 800e060:	0800e097 	.word	0x0800e097
 800e064:	0800e097 	.word	0x0800e097
 800e068:	0800e097 	.word	0x0800e097
 800e06c:	0800e08f 	.word	0x0800e08f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e070:	f7fc fc5a 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 800e074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e076:	e014      	b.n	800e0a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e078:	f7fc fc6c 	bl	800a954 <HAL_RCC_GetPCLK2Freq>
 800e07c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e07e:	e010      	b.n	800e0a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e080:	4b4e      	ldr	r3, [pc, #312]	@ (800e1bc <UART_SetConfig+0x5c0>)
 800e082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e084:	e00d      	b.n	800e0a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e086:	f7fc fbe1 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800e08a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e08c:	e009      	b.n	800e0a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e08e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e094:	e005      	b.n	800e0a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e0a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 8090 	beq.w	800e1ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ae:	4a44      	ldr	r2, [pc, #272]	@ (800e1c0 <UART_SetConfig+0x5c4>)
 800e0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0bc:	005a      	lsls	r2, r3, #1
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	085b      	lsrs	r3, r3, #1
 800e0c4:	441a      	add	r2, r3
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	2b0f      	cmp	r3, #15
 800e0d4:	d916      	bls.n	800e104 <UART_SetConfig+0x508>
 800e0d6:	6a3b      	ldr	r3, [r7, #32]
 800e0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0dc:	d212      	bcs.n	800e104 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0de:	6a3b      	ldr	r3, [r7, #32]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f023 030f 	bic.w	r3, r3, #15
 800e0e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	085b      	lsrs	r3, r3, #1
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	f003 0307 	and.w	r3, r3, #7
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	8bfb      	ldrh	r3, [r7, #30]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	8bfa      	ldrh	r2, [r7, #30]
 800e100:	60da      	str	r2, [r3, #12]
 800e102:	e062      	b.n	800e1ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e10a:	e05e      	b.n	800e1ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e10c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e110:	2b08      	cmp	r3, #8
 800e112:	d828      	bhi.n	800e166 <UART_SetConfig+0x56a>
 800e114:	a201      	add	r2, pc, #4	@ (adr r2, 800e11c <UART_SetConfig+0x520>)
 800e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11a:	bf00      	nop
 800e11c:	0800e141 	.word	0x0800e141
 800e120:	0800e149 	.word	0x0800e149
 800e124:	0800e151 	.word	0x0800e151
 800e128:	0800e167 	.word	0x0800e167
 800e12c:	0800e157 	.word	0x0800e157
 800e130:	0800e167 	.word	0x0800e167
 800e134:	0800e167 	.word	0x0800e167
 800e138:	0800e167 	.word	0x0800e167
 800e13c:	0800e15f 	.word	0x0800e15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e140:	f7fc fbf2 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 800e144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e146:	e014      	b.n	800e172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e148:	f7fc fc04 	bl	800a954 <HAL_RCC_GetPCLK2Freq>
 800e14c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e14e:	e010      	b.n	800e172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e150:	4b1a      	ldr	r3, [pc, #104]	@ (800e1bc <UART_SetConfig+0x5c0>)
 800e152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e154:	e00d      	b.n	800e172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e156:	f7fc fb79 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800e15a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e15c:	e009      	b.n	800e172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e15e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e164:	e005      	b.n	800e172 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e170:	bf00      	nop
    }

    if (pclk != 0U)
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	d028      	beq.n	800e1ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17c:	4a10      	ldr	r2, [pc, #64]	@ (800e1c0 <UART_SetConfig+0x5c4>)
 800e17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e182:	461a      	mov	r2, r3
 800e184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e186:	fbb3 f2f2 	udiv	r2, r3, r2
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	085b      	lsrs	r3, r3, #1
 800e190:	441a      	add	r2, r3
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	2b0f      	cmp	r3, #15
 800e1a0:	d910      	bls.n	800e1c4 <UART_SetConfig+0x5c8>
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1a8:	d20c      	bcs.n	800e1c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60da      	str	r2, [r3, #12]
 800e1b4:	e009      	b.n	800e1ca <UART_SetConfig+0x5ce>
 800e1b6:	bf00      	nop
 800e1b8:	40008000 	.word	0x40008000
 800e1bc:	00f42400 	.word	0x00f42400
 800e1c0:	08010f40 	.word	0x08010f40
      }
      else
      {
        ret = HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e1e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3730      	adds	r7, #48	@ 0x30
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e1f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e200:	f003 0308 	and.w	r3, r3, #8
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00a      	beq.n	800e21e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	430a      	orrs	r2, r1
 800e21c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00a      	beq.n	800e240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	430a      	orrs	r2, r1
 800e23e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00a      	beq.n	800e262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	430a      	orrs	r2, r1
 800e260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e266:	f003 0304 	and.w	r3, r3, #4
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00a      	beq.n	800e284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	430a      	orrs	r2, r1
 800e282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e288:	f003 0310 	and.w	r3, r3, #16
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00a      	beq.n	800e2a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2aa:	f003 0320 	and.w	r3, r3, #32
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00a      	beq.n	800e2c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	430a      	orrs	r2, r1
 800e2c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01a      	beq.n	800e30a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2f2:	d10a      	bne.n	800e30a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	430a      	orrs	r2, r1
 800e308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00a      	beq.n	800e32c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	430a      	orrs	r2, r1
 800e32a:	605a      	str	r2, [r3, #4]
  }
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b098      	sub	sp, #96	@ 0x60
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e348:	f7f9 faee 	bl	8007928 <HAL_GetTick>
 800e34c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f003 0308 	and.w	r3, r3, #8
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d12f      	bne.n	800e3bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e35c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e364:	2200      	movs	r2, #0
 800e366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f88e 	bl	800e48c <UART_WaitOnFlagUntilTimeout>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d022      	beq.n	800e3bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37e:	e853 3f00 	ldrex	r3, [r3]
 800e382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e38a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	461a      	mov	r2, r3
 800e392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e394:	647b      	str	r3, [r7, #68]	@ 0x44
 800e396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e39a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e39c:	e841 2300 	strex	r3, r2, [r1]
 800e3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1e6      	bne.n	800e376 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2220      	movs	r2, #32
 800e3ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	e063      	b.n	800e484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f003 0304 	and.w	r3, r3, #4
 800e3c6:	2b04      	cmp	r3, #4
 800e3c8:	d149      	bne.n	800e45e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f857 	bl	800e48c <UART_WaitOnFlagUntilTimeout>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d03c      	beq.n	800e45e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ec:	e853 3f00 	ldrex	r3, [r3]
 800e3f0:	623b      	str	r3, [r7, #32]
   return(result);
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e3f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e402:	633b      	str	r3, [r7, #48]	@ 0x30
 800e404:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e40a:	e841 2300 	strex	r3, r2, [r1]
 800e40e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1e6      	bne.n	800e3e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3308      	adds	r3, #8
 800e41c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	e853 3f00 	ldrex	r3, [r3]
 800e424:	60fb      	str	r3, [r7, #12]
   return(result);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f023 0301 	bic.w	r3, r3, #1
 800e42c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e436:	61fa      	str	r2, [r7, #28]
 800e438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43a:	69b9      	ldr	r1, [r7, #24]
 800e43c:	69fa      	ldr	r2, [r7, #28]
 800e43e:	e841 2300 	strex	r3, r2, [r1]
 800e442:	617b      	str	r3, [r7, #20]
   return(result);
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1e5      	bne.n	800e416 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e012      	b.n	800e484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2220      	movs	r2, #32
 800e46a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3758      	adds	r7, #88	@ 0x58
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	603b      	str	r3, [r7, #0]
 800e498:	4613      	mov	r3, r2
 800e49a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e49c:	e04f      	b.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a4:	d04b      	beq.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4a6:	f7f9 fa3f 	bl	8007928 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d302      	bcc.n	800e4bc <UART_WaitOnFlagUntilTimeout+0x30>
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	e04e      	b.n	800e55e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f003 0304 	and.w	r3, r3, #4
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d037      	beq.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b80      	cmp	r3, #128	@ 0x80
 800e4d2:	d034      	beq.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	2b40      	cmp	r3, #64	@ 0x40
 800e4d8:	d031      	beq.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	69db      	ldr	r3, [r3, #28]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b08      	cmp	r3, #8
 800e4e6:	d110      	bne.n	800e50a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2208      	movs	r2, #8
 800e4ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f000 f920 	bl	800e736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2208      	movs	r2, #8
 800e4fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e029      	b.n	800e55e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	69db      	ldr	r3, [r3, #28]
 800e510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e518:	d111      	bne.n	800e53e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f000 f906 	bl	800e736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2220      	movs	r2, #32
 800e52e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e53a:	2303      	movs	r3, #3
 800e53c:	e00f      	b.n	800e55e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	69da      	ldr	r2, [r3, #28]
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	4013      	ands	r3, r2
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	bf0c      	ite	eq
 800e54e:	2301      	moveq	r3, #1
 800e550:	2300      	movne	r3, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	461a      	mov	r2, r3
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d0a0      	beq.n	800e49e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b096      	sub	sp, #88	@ 0x58
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	4613      	mov	r3, r2
 800e574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	88fa      	ldrh	r2, [r7, #6]
 800e580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2222      	movs	r2, #34	@ 0x22
 800e590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d02d      	beq.n	800e5fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a4:	4a40      	ldr	r2, [pc, #256]	@ (800e6a8 <UART_Start_Receive_DMA+0x140>)
 800e5a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ae:	4a3f      	ldr	r2, [pc, #252]	@ (800e6ac <UART_Start_Receive_DMA+0x144>)
 800e5b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5b8:	4a3d      	ldr	r2, [pc, #244]	@ (800e6b0 <UART_Start_Receive_DMA+0x148>)
 800e5ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	3324      	adds	r3, #36	@ 0x24
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5d8:	461a      	mov	r2, r3
 800e5da:	88fb      	ldrh	r3, [r7, #6]
 800e5dc:	f7fa ffe0 	bl	80095a0 <HAL_DMA_Start_IT>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d009      	beq.n	800e5fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2210      	movs	r2, #16
 800e5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e051      	b.n	800e69e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d018      	beq.n	800e634 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e60a:	e853 3f00 	ldrex	r3, [r3]
 800e60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e616:	657b      	str	r3, [r7, #84]	@ 0x54
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	461a      	mov	r2, r3
 800e61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e620:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e622:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e624:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e628:	e841 2300 	strex	r3, r2, [r1]
 800e62c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e62e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1e6      	bne.n	800e602 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3308      	adds	r3, #8
 800e63a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e63e:	e853 3f00 	ldrex	r3, [r3]
 800e642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e646:	f043 0301 	orr.w	r3, r3, #1
 800e64a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	3308      	adds	r3, #8
 800e652:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e654:	637a      	str	r2, [r7, #52]	@ 0x34
 800e656:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e658:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e65a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e65c:	e841 2300 	strex	r3, r2, [r1]
 800e660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e5      	bne.n	800e634 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3308      	adds	r3, #8
 800e66e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	e853 3f00 	ldrex	r3, [r3]
 800e676:	613b      	str	r3, [r7, #16]
   return(result);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e67e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3308      	adds	r3, #8
 800e686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e688:	623a      	str	r2, [r7, #32]
 800e68a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68c:	69f9      	ldr	r1, [r7, #28]
 800e68e:	6a3a      	ldr	r2, [r7, #32]
 800e690:	e841 2300 	strex	r3, r2, [r1]
 800e694:	61bb      	str	r3, [r7, #24]
   return(result);
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1e5      	bne.n	800e668 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3758      	adds	r7, #88	@ 0x58
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0800e803 	.word	0x0800e803
 800e6ac:	0800e937 	.word	0x0800e937
 800e6b0:	0800e97d 	.word	0x0800e97d

0800e6b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b08f      	sub	sp, #60	@ 0x3c
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e6      	bne.n	800e6bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3308      	adds	r3, #8
 800e6f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	e853 3f00 	ldrex	r3, [r3]
 800e6fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e704:	633b      	str	r3, [r7, #48]	@ 0x30
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3308      	adds	r3, #8
 800e70c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e70e:	61ba      	str	r2, [r7, #24]
 800e710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e712:	6979      	ldr	r1, [r7, #20]
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	e841 2300 	strex	r3, r2, [r1]
 800e71a:	613b      	str	r3, [r7, #16]
   return(result);
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e5      	bne.n	800e6ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2220      	movs	r2, #32
 800e726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e72a:	bf00      	nop
 800e72c:	373c      	adds	r7, #60	@ 0x3c
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e736:	b480      	push	{r7}
 800e738:	b095      	sub	sp, #84	@ 0x54
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e75c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e75e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e6      	bne.n	800e73e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3308      	adds	r3, #8
 800e776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	e853 3f00 	ldrex	r3, [r3]
 800e77e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e786:	f023 0301 	bic.w	r3, r3, #1
 800e78a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3308      	adds	r3, #8
 800e792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e79c:	e841 2300 	strex	r3, r2, [r1]
 800e7a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e3      	bne.n	800e770 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d118      	bne.n	800e7e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	e853 3f00 	ldrex	r3, [r3]
 800e7bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	f023 0310 	bic.w	r3, r3, #16
 800e7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ce:	61bb      	str	r3, [r7, #24]
 800e7d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d2:	6979      	ldr	r1, [r7, #20]
 800e7d4:	69ba      	ldr	r2, [r7, #24]
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	613b      	str	r3, [r7, #16]
   return(result);
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e6      	bne.n	800e7b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e7f6:	bf00      	nop
 800e7f8:	3754      	adds	r7, #84	@ 0x54
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b09c      	sub	sp, #112	@ 0x70
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e80e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f003 0320 	and.w	r3, r3, #32
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d171      	bne.n	800e902 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e81e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e820:	2200      	movs	r2, #0
 800e822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e82e:	e853 3f00 	ldrex	r3, [r3]
 800e832:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e83a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e83c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e844:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e846:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e84a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e84c:	e841 2300 	strex	r3, r2, [r1]
 800e850:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e6      	bne.n	800e826 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e862:	e853 3f00 	ldrex	r3, [r3]
 800e866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e86a:	f023 0301 	bic.w	r3, r3, #1
 800e86e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3308      	adds	r3, #8
 800e876:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e878:	647a      	str	r2, [r7, #68]	@ 0x44
 800e87a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e87e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e880:	e841 2300 	strex	r3, r2, [r1]
 800e884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e5      	bne.n	800e858 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e88c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3308      	adds	r3, #8
 800e892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e896:	e853 3f00 	ldrex	r3, [r3]
 800e89a:	623b      	str	r3, [r7, #32]
   return(result);
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e8a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800e8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e5      	bne.n	800e88c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e8c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d118      	bne.n	800e902 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	e853 3f00 	ldrex	r3, [r3]
 800e8dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f023 0310 	bic.w	r3, r3, #16
 800e8e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f2:	69b9      	ldr	r1, [r7, #24]
 800e8f4:	69fa      	ldr	r2, [r7, #28]
 800e8f6:	e841 2300 	strex	r3, r2, [r1]
 800e8fa:	617b      	str	r3, [r7, #20]
   return(result);
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1e6      	bne.n	800e8d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e904:	2200      	movs	r2, #0
 800e906:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d109      	bne.n	800e924 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e912:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e916:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e918:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e91c:	4611      	mov	r1, r2
 800e91e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e920:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e922:	e004      	b.n	800e92e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800e924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e92a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e92c:	4798      	blx	r3
}
 800e92e:	bf00      	nop
 800e930:	3770      	adds	r7, #112	@ 0x70
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e942:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2201      	movs	r2, #1
 800e948:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d10b      	bne.n	800e96a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e95e:	0852      	lsrs	r2, r2, #1
 800e960:	b292      	uxth	r2, r2
 800e962:	4611      	mov	r1, r2
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e968:	e004      	b.n	800e974 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	4798      	blx	r3
}
 800e974:	bf00      	nop
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e988:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e998:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9a4:	2b80      	cmp	r3, #128	@ 0x80
 800e9a6:	d109      	bne.n	800e9bc <UART_DMAError+0x40>
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2b21      	cmp	r3, #33	@ 0x21
 800e9ac:	d106      	bne.n	800e9bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e9b6:	6978      	ldr	r0, [r7, #20]
 800e9b8:	f7ff fe7c 	bl	800e6b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9c6:	2b40      	cmp	r3, #64	@ 0x40
 800e9c8:	d109      	bne.n	800e9de <UART_DMAError+0x62>
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b22      	cmp	r3, #34	@ 0x22
 800e9ce:	d106      	bne.n	800e9de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e9d8:	6978      	ldr	r0, [r7, #20]
 800e9da:	f7ff feac 	bl	800e736 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9e4:	f043 0210 	orr.w	r2, r3, #16
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e9f4:	6978      	ldr	r0, [r7, #20]
 800e9f6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9f8:	bf00      	nop
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	e853 3f00 	ldrex	r3, [r3]
 800ea3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea44:	61fb      	str	r3, [r7, #28]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	61bb      	str	r3, [r7, #24]
 800ea50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea52:	6979      	ldr	r1, [r7, #20]
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	e841 2300 	strex	r3, r2, [r1]
 800ea5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e6      	bne.n	800ea30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea7a:	bf00      	nop
 800ea7c:	3720      	adds	r7, #32
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea8a:	bf00      	nop
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea9e:	bf00      	nop
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eab2:	bf00      	nop
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eabe:	b480      	push	{r7}
 800eac0:	b085      	sub	sp, #20
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_UARTEx_DisableFifoMode+0x16>
 800ead0:	2302      	movs	r3, #2
 800ead2:	e027      	b.n	800eb24 <HAL_UARTEx_DisableFifoMode+0x66>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2224      	movs	r2, #36	@ 0x24
 800eae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f022 0201 	bic.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800eb02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d101      	bne.n	800eb48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb44:	2302      	movs	r3, #2
 800eb46:	e02d      	b.n	800eba4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2224      	movs	r2, #36	@ 0x24
 800eb54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f022 0201 	bic.w	r2, r2, #1
 800eb6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	430a      	orrs	r2, r1
 800eb82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f84f 	bl	800ec28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2220      	movs	r2, #32
 800eb96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eba2:	2300      	movs	r3, #0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d101      	bne.n	800ebc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e02d      	b.n	800ec20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2224      	movs	r2, #36	@ 0x24
 800ebd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f022 0201 	bic.w	r2, r2, #1
 800ebea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 f811 	bl	800ec28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2220      	movs	r2, #32
 800ec12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d108      	bne.n	800ec4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec48:	e031      	b.n	800ecae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec4a:	2308      	movs	r3, #8
 800ec4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec4e:	2308      	movs	r3, #8
 800ec50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	0e5b      	lsrs	r3, r3, #25
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	f003 0307 	and.w	r3, r3, #7
 800ec60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	0f5b      	lsrs	r3, r3, #29
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	f003 0307 	and.w	r3, r3, #7
 800ec70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec72:	7bbb      	ldrb	r3, [r7, #14]
 800ec74:	7b3a      	ldrb	r2, [r7, #12]
 800ec76:	4911      	ldr	r1, [pc, #68]	@ (800ecbc <UARTEx_SetNbDataToProcess+0x94>)
 800ec78:	5c8a      	ldrb	r2, [r1, r2]
 800ec7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec7e:	7b3a      	ldrb	r2, [r7, #12]
 800ec80:	490f      	ldr	r1, [pc, #60]	@ (800ecc0 <UARTEx_SetNbDataToProcess+0x98>)
 800ec82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec84:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec90:	7bfb      	ldrb	r3, [r7, #15]
 800ec92:	7b7a      	ldrb	r2, [r7, #13]
 800ec94:	4909      	ldr	r1, [pc, #36]	@ (800ecbc <UARTEx_SetNbDataToProcess+0x94>)
 800ec96:	5c8a      	ldrb	r2, [r1, r2]
 800ec98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec9c:	7b7a      	ldrb	r2, [r7, #13]
 800ec9e:	4908      	ldr	r1, [pc, #32]	@ (800ecc0 <UARTEx_SetNbDataToProcess+0x98>)
 800eca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eca2:	fb93 f3f2 	sdiv	r3, r3, r2
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ecae:	bf00      	nop
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	08010f58 	.word	0x08010f58
 800ecc0:	08010f60 	.word	0x08010f60

0800ecc4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b08b      	sub	sp, #44	@ 0x2c
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	885b      	ldrh	r3, [r3, #2]
 800ecec:	fb02 f303 	mul.w	r3, r2, r3
 800ecf0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ecf6:	e013      	b.n	800ed20 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	1d1a      	adds	r2, r3, #4
 800ecfc:	627a      	str	r2, [r7, #36]	@ 0x24
 800ecfe:	ed93 7a00 	vldr	s14, [r3]
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	1d1a      	adds	r2, r3, #4
 800ed06:	623a      	str	r2, [r7, #32]
 800ed08:	edd3 7a00 	vldr	s15, [r3]
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	1d1a      	adds	r2, r3, #4
 800ed10:	61fa      	str	r2, [r7, #28]
 800ed12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed16:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e8      	bne.n	800ecf8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ed26:	2300      	movs	r3, #0
 800ed28:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ed2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	372c      	adds	r7, #44	@ 0x2c
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr

0800ed3a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b085      	sub	sp, #20
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	607b      	str	r3, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	817b      	strh	r3, [r7, #10]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	897a      	ldrh	r2, [r7, #10]
 800ed50:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	893a      	ldrh	r2, [r7, #8]
 800ed56:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	605a      	str	r2, [r3, #4]
}
 800ed5e:	bf00      	nop
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b093      	sub	sp, #76	@ 0x4c
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	60b9      	str	r1, [r7, #8]
 800ed74:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	885b      	ldrh	r3, [r3, #2]
 800ed9e:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	885b      	ldrh	r3, [r3, #2]
 800eda4:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800eda6:	2300      	movs	r3, #0
 800eda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edaa:	8b7b      	ldrh	r3, [r7, #26]
 800edac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800edae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	4413      	add	r3, r2
 800edb6:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800edb8:	8b3b      	ldrh	r3, [r7, #24]
 800edba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800edc2:	f04f 0300 	mov.w	r3, #0
 800edc6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800edc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edca:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800edcc:	8afb      	ldrh	r3, [r7, #22]
 800edce:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800edd0:	e017      	b.n	800ee02 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800edd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd4:	1d1a      	adds	r2, r3, #4
 800edd6:	647a      	str	r2, [r7, #68]	@ 0x44
 800edd8:	ed93 7a00 	vldr	s14, [r3]
 800eddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edde:	edd3 7a00 	vldr	s15, [r3]
 800ede2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ede6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800edea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edee:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800edf2:	8b3b      	ldrh	r3, [r7, #24]
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edf8:	4413      	add	r3, r2
 800edfa:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	3b01      	subs	r3, #1
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1e4      	bne.n	800edd2 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800ee08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ee0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee10:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800ee12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee14:	3b01      	subs	r3, #1
 800ee16:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800ee18:	8b3a      	ldrh	r2, [r7, #24]
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	6a3a      	ldr	r2, [r7, #32]
 800ee22:	4413      	add	r3, r2
 800ee24:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800ee26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1ca      	bne.n	800edc2 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800ee2c:	8b3b      	ldrh	r3, [r7, #24]
 800ee2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee30:	4413      	add	r3, r2
 800ee32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800ee34:	8afb      	ldrh	r3, [r7, #22]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee3a:	4413      	add	r3, r2
 800ee3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800ee3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee40:	3b01      	subs	r3, #1
 800ee42:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800ee44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1b1      	bne.n	800edae <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800ee4e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	374c      	adds	r7, #76	@ 0x4c
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b08b      	sub	sp, #44	@ 0x2c
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	ed87 0a02 	vstr	s0, [r7, #8]
 800ee6a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	885b      	ldrh	r3, [r3, #2]
 800ee82:	fb02 f303 	mul.w	r3, r2, r3
 800ee86:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ee8c:	e010      	b.n	800eeb0 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee90:	1d1a      	adds	r2, r3, #4
 800ee92:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee94:	ed93 7a00 	vldr	s14, [r3]
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	1d1a      	adds	r2, r3, #4
 800ee9c:	623a      	str	r2, [r7, #32]
 800ee9e:	edd7 7a02 	vldr	s15, [r7, #8]
 800eea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eea6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1eb      	bne.n	800ee8e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800eeba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	372c      	adds	r7, #44	@ 0x2c
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
	...

0800eecc <malloc>:
 800eecc:	4b02      	ldr	r3, [pc, #8]	@ (800eed8 <malloc+0xc>)
 800eece:	4601      	mov	r1, r0
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	f000 b825 	b.w	800ef20 <_malloc_r>
 800eed6:	bf00      	nop
 800eed8:	20000108 	.word	0x20000108

0800eedc <sbrk_aligned>:
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	4e0f      	ldr	r6, [pc, #60]	@ (800ef1c <sbrk_aligned+0x40>)
 800eee0:	460c      	mov	r4, r1
 800eee2:	6831      	ldr	r1, [r6, #0]
 800eee4:	4605      	mov	r5, r0
 800eee6:	b911      	cbnz	r1, 800eeee <sbrk_aligned+0x12>
 800eee8:	f000 f8ae 	bl	800f048 <_sbrk_r>
 800eeec:	6030      	str	r0, [r6, #0]
 800eeee:	4621      	mov	r1, r4
 800eef0:	4628      	mov	r0, r5
 800eef2:	f000 f8a9 	bl	800f048 <_sbrk_r>
 800eef6:	1c43      	adds	r3, r0, #1
 800eef8:	d103      	bne.n	800ef02 <sbrk_aligned+0x26>
 800eefa:	f04f 34ff 	mov.w	r4, #4294967295
 800eefe:	4620      	mov	r0, r4
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
 800ef02:	1cc4      	adds	r4, r0, #3
 800ef04:	f024 0403 	bic.w	r4, r4, #3
 800ef08:	42a0      	cmp	r0, r4
 800ef0a:	d0f8      	beq.n	800eefe <sbrk_aligned+0x22>
 800ef0c:	1a21      	subs	r1, r4, r0
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f000 f89a 	bl	800f048 <_sbrk_r>
 800ef14:	3001      	adds	r0, #1
 800ef16:	d1f2      	bne.n	800eefe <sbrk_aligned+0x22>
 800ef18:	e7ef      	b.n	800eefa <sbrk_aligned+0x1e>
 800ef1a:	bf00      	nop
 800ef1c:	20002120 	.word	0x20002120

0800ef20 <_malloc_r>:
 800ef20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef24:	1ccd      	adds	r5, r1, #3
 800ef26:	f025 0503 	bic.w	r5, r5, #3
 800ef2a:	3508      	adds	r5, #8
 800ef2c:	2d0c      	cmp	r5, #12
 800ef2e:	bf38      	it	cc
 800ef30:	250c      	movcc	r5, #12
 800ef32:	2d00      	cmp	r5, #0
 800ef34:	4606      	mov	r6, r0
 800ef36:	db01      	blt.n	800ef3c <_malloc_r+0x1c>
 800ef38:	42a9      	cmp	r1, r5
 800ef3a:	d904      	bls.n	800ef46 <_malloc_r+0x26>
 800ef3c:	230c      	movs	r3, #12
 800ef3e:	6033      	str	r3, [r6, #0]
 800ef40:	2000      	movs	r0, #0
 800ef42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f01c <_malloc_r+0xfc>
 800ef4a:	f000 f869 	bl	800f020 <__malloc_lock>
 800ef4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef52:	461c      	mov	r4, r3
 800ef54:	bb44      	cbnz	r4, 800efa8 <_malloc_r+0x88>
 800ef56:	4629      	mov	r1, r5
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f7ff ffbf 	bl	800eedc <sbrk_aligned>
 800ef5e:	1c43      	adds	r3, r0, #1
 800ef60:	4604      	mov	r4, r0
 800ef62:	d158      	bne.n	800f016 <_malloc_r+0xf6>
 800ef64:	f8d8 4000 	ldr.w	r4, [r8]
 800ef68:	4627      	mov	r7, r4
 800ef6a:	2f00      	cmp	r7, #0
 800ef6c:	d143      	bne.n	800eff6 <_malloc_r+0xd6>
 800ef6e:	2c00      	cmp	r4, #0
 800ef70:	d04b      	beq.n	800f00a <_malloc_r+0xea>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	4639      	mov	r1, r7
 800ef76:	4630      	mov	r0, r6
 800ef78:	eb04 0903 	add.w	r9, r4, r3
 800ef7c:	f000 f864 	bl	800f048 <_sbrk_r>
 800ef80:	4581      	cmp	r9, r0
 800ef82:	d142      	bne.n	800f00a <_malloc_r+0xea>
 800ef84:	6821      	ldr	r1, [r4, #0]
 800ef86:	1a6d      	subs	r5, r5, r1
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	f7ff ffa6 	bl	800eedc <sbrk_aligned>
 800ef90:	3001      	adds	r0, #1
 800ef92:	d03a      	beq.n	800f00a <_malloc_r+0xea>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	442b      	add	r3, r5
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	bb62      	cbnz	r2, 800effc <_malloc_r+0xdc>
 800efa2:	f8c8 7000 	str.w	r7, [r8]
 800efa6:	e00f      	b.n	800efc8 <_malloc_r+0xa8>
 800efa8:	6822      	ldr	r2, [r4, #0]
 800efaa:	1b52      	subs	r2, r2, r5
 800efac:	d420      	bmi.n	800eff0 <_malloc_r+0xd0>
 800efae:	2a0b      	cmp	r2, #11
 800efb0:	d917      	bls.n	800efe2 <_malloc_r+0xc2>
 800efb2:	1961      	adds	r1, r4, r5
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	6025      	str	r5, [r4, #0]
 800efb8:	bf18      	it	ne
 800efba:	6059      	strne	r1, [r3, #4]
 800efbc:	6863      	ldr	r3, [r4, #4]
 800efbe:	bf08      	it	eq
 800efc0:	f8c8 1000 	streq.w	r1, [r8]
 800efc4:	5162      	str	r2, [r4, r5]
 800efc6:	604b      	str	r3, [r1, #4]
 800efc8:	4630      	mov	r0, r6
 800efca:	f000 f82f 	bl	800f02c <__malloc_unlock>
 800efce:	f104 000b 	add.w	r0, r4, #11
 800efd2:	1d23      	adds	r3, r4, #4
 800efd4:	f020 0007 	bic.w	r0, r0, #7
 800efd8:	1ac2      	subs	r2, r0, r3
 800efda:	bf1c      	itt	ne
 800efdc:	1a1b      	subne	r3, r3, r0
 800efde:	50a3      	strne	r3, [r4, r2]
 800efe0:	e7af      	b.n	800ef42 <_malloc_r+0x22>
 800efe2:	6862      	ldr	r2, [r4, #4]
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	bf0c      	ite	eq
 800efe8:	f8c8 2000 	streq.w	r2, [r8]
 800efec:	605a      	strne	r2, [r3, #4]
 800efee:	e7eb      	b.n	800efc8 <_malloc_r+0xa8>
 800eff0:	4623      	mov	r3, r4
 800eff2:	6864      	ldr	r4, [r4, #4]
 800eff4:	e7ae      	b.n	800ef54 <_malloc_r+0x34>
 800eff6:	463c      	mov	r4, r7
 800eff8:	687f      	ldr	r7, [r7, #4]
 800effa:	e7b6      	b.n	800ef6a <_malloc_r+0x4a>
 800effc:	461a      	mov	r2, r3
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	42a3      	cmp	r3, r4
 800f002:	d1fb      	bne.n	800effc <_malloc_r+0xdc>
 800f004:	2300      	movs	r3, #0
 800f006:	6053      	str	r3, [r2, #4]
 800f008:	e7de      	b.n	800efc8 <_malloc_r+0xa8>
 800f00a:	230c      	movs	r3, #12
 800f00c:	6033      	str	r3, [r6, #0]
 800f00e:	4630      	mov	r0, r6
 800f010:	f000 f80c 	bl	800f02c <__malloc_unlock>
 800f014:	e794      	b.n	800ef40 <_malloc_r+0x20>
 800f016:	6005      	str	r5, [r0, #0]
 800f018:	e7d6      	b.n	800efc8 <_malloc_r+0xa8>
 800f01a:	bf00      	nop
 800f01c:	20002124 	.word	0x20002124

0800f020 <__malloc_lock>:
 800f020:	4801      	ldr	r0, [pc, #4]	@ (800f028 <__malloc_lock+0x8>)
 800f022:	f000 b84b 	b.w	800f0bc <__retarget_lock_acquire_recursive>
 800f026:	bf00      	nop
 800f028:	20002264 	.word	0x20002264

0800f02c <__malloc_unlock>:
 800f02c:	4801      	ldr	r0, [pc, #4]	@ (800f034 <__malloc_unlock+0x8>)
 800f02e:	f000 b846 	b.w	800f0be <__retarget_lock_release_recursive>
 800f032:	bf00      	nop
 800f034:	20002264 	.word	0x20002264

0800f038 <memset>:
 800f038:	4402      	add	r2, r0
 800f03a:	4603      	mov	r3, r0
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d100      	bne.n	800f042 <memset+0xa>
 800f040:	4770      	bx	lr
 800f042:	f803 1b01 	strb.w	r1, [r3], #1
 800f046:	e7f9      	b.n	800f03c <memset+0x4>

0800f048 <_sbrk_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4d06      	ldr	r5, [pc, #24]	@ (800f064 <_sbrk_r+0x1c>)
 800f04c:	2300      	movs	r3, #0
 800f04e:	4604      	mov	r4, r0
 800f050:	4608      	mov	r0, r1
 800f052:	602b      	str	r3, [r5, #0]
 800f054:	f7f7 fd3c 	bl	8006ad0 <_sbrk>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_sbrk_r+0x1a>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_sbrk_r+0x1a>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	20002260 	.word	0x20002260

0800f068 <__errno>:
 800f068:	4b01      	ldr	r3, [pc, #4]	@ (800f070 <__errno+0x8>)
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	20000108 	.word	0x20000108

0800f074 <__libc_init_array>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	4d0d      	ldr	r5, [pc, #52]	@ (800f0ac <__libc_init_array+0x38>)
 800f078:	4c0d      	ldr	r4, [pc, #52]	@ (800f0b0 <__libc_init_array+0x3c>)
 800f07a:	1b64      	subs	r4, r4, r5
 800f07c:	10a4      	asrs	r4, r4, #2
 800f07e:	2600      	movs	r6, #0
 800f080:	42a6      	cmp	r6, r4
 800f082:	d109      	bne.n	800f098 <__libc_init_array+0x24>
 800f084:	4d0b      	ldr	r5, [pc, #44]	@ (800f0b4 <__libc_init_array+0x40>)
 800f086:	4c0c      	ldr	r4, [pc, #48]	@ (800f0b8 <__libc_init_array+0x44>)
 800f088:	f001 ff32 	bl	8010ef0 <_init>
 800f08c:	1b64      	subs	r4, r4, r5
 800f08e:	10a4      	asrs	r4, r4, #2
 800f090:	2600      	movs	r6, #0
 800f092:	42a6      	cmp	r6, r4
 800f094:	d105      	bne.n	800f0a2 <__libc_init_array+0x2e>
 800f096:	bd70      	pop	{r4, r5, r6, pc}
 800f098:	f855 3b04 	ldr.w	r3, [r5], #4
 800f09c:	4798      	blx	r3
 800f09e:	3601      	adds	r6, #1
 800f0a0:	e7ee      	b.n	800f080 <__libc_init_array+0xc>
 800f0a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0a6:	4798      	blx	r3
 800f0a8:	3601      	adds	r6, #1
 800f0aa:	e7f2      	b.n	800f092 <__libc_init_array+0x1e>
 800f0ac:	08011520 	.word	0x08011520
 800f0b0:	08011520 	.word	0x08011520
 800f0b4:	08011520 	.word	0x08011520
 800f0b8:	08011524 	.word	0x08011524

0800f0bc <__retarget_lock_acquire_recursive>:
 800f0bc:	4770      	bx	lr

0800f0be <__retarget_lock_release_recursive>:
 800f0be:	4770      	bx	lr

0800f0c0 <memcpy>:
 800f0c0:	440a      	add	r2, r1
 800f0c2:	4291      	cmp	r1, r2
 800f0c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0c8:	d100      	bne.n	800f0cc <memcpy+0xc>
 800f0ca:	4770      	bx	lr
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0d6:	4291      	cmp	r1, r2
 800f0d8:	d1f9      	bne.n	800f0ce <memcpy+0xe>
 800f0da:	bd10      	pop	{r4, pc}
 800f0dc:	0000      	movs	r0, r0
	...

0800f0e0 <cos>:
 800f0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0e2:	ec53 2b10 	vmov	r2, r3, d0
 800f0e6:	4826      	ldr	r0, [pc, #152]	@ (800f180 <cos+0xa0>)
 800f0e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f0ec:	4281      	cmp	r1, r0
 800f0ee:	d806      	bhi.n	800f0fe <cos+0x1e>
 800f0f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f178 <cos+0x98>
 800f0f4:	b005      	add	sp, #20
 800f0f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0fa:	f000 b9bd 	b.w	800f478 <__kernel_cos>
 800f0fe:	4821      	ldr	r0, [pc, #132]	@ (800f184 <cos+0xa4>)
 800f100:	4281      	cmp	r1, r0
 800f102:	d908      	bls.n	800f116 <cos+0x36>
 800f104:	4610      	mov	r0, r2
 800f106:	4619      	mov	r1, r3
 800f108:	f7f1 f88a 	bl	8000220 <__aeabi_dsub>
 800f10c:	ec41 0b10 	vmov	d0, r0, r1
 800f110:	b005      	add	sp, #20
 800f112:	f85d fb04 	ldr.w	pc, [sp], #4
 800f116:	4668      	mov	r0, sp
 800f118:	f000 fb32 	bl	800f780 <__ieee754_rem_pio2>
 800f11c:	f000 0003 	and.w	r0, r0, #3
 800f120:	2801      	cmp	r0, #1
 800f122:	d00b      	beq.n	800f13c <cos+0x5c>
 800f124:	2802      	cmp	r0, #2
 800f126:	d015      	beq.n	800f154 <cos+0x74>
 800f128:	b9d8      	cbnz	r0, 800f162 <cos+0x82>
 800f12a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f12e:	ed9d 0b00 	vldr	d0, [sp]
 800f132:	f000 f9a1 	bl	800f478 <__kernel_cos>
 800f136:	ec51 0b10 	vmov	r0, r1, d0
 800f13a:	e7e7      	b.n	800f10c <cos+0x2c>
 800f13c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f140:	ed9d 0b00 	vldr	d0, [sp]
 800f144:	f000 fa60 	bl	800f608 <__kernel_sin>
 800f148:	ec53 2b10 	vmov	r2, r3, d0
 800f14c:	4610      	mov	r0, r2
 800f14e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f152:	e7db      	b.n	800f10c <cos+0x2c>
 800f154:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f158:	ed9d 0b00 	vldr	d0, [sp]
 800f15c:	f000 f98c 	bl	800f478 <__kernel_cos>
 800f160:	e7f2      	b.n	800f148 <cos+0x68>
 800f162:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f166:	ed9d 0b00 	vldr	d0, [sp]
 800f16a:	2001      	movs	r0, #1
 800f16c:	f000 fa4c 	bl	800f608 <__kernel_sin>
 800f170:	e7e1      	b.n	800f136 <cos+0x56>
 800f172:	bf00      	nop
 800f174:	f3af 8000 	nop.w
	...
 800f180:	3fe921fb 	.word	0x3fe921fb
 800f184:	7fefffff 	.word	0x7fefffff

0800f188 <sin>:
 800f188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f18a:	ec53 2b10 	vmov	r2, r3, d0
 800f18e:	4826      	ldr	r0, [pc, #152]	@ (800f228 <sin+0xa0>)
 800f190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f194:	4281      	cmp	r1, r0
 800f196:	d807      	bhi.n	800f1a8 <sin+0x20>
 800f198:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f220 <sin+0x98>
 800f19c:	2000      	movs	r0, #0
 800f19e:	b005      	add	sp, #20
 800f1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1a4:	f000 ba30 	b.w	800f608 <__kernel_sin>
 800f1a8:	4820      	ldr	r0, [pc, #128]	@ (800f22c <sin+0xa4>)
 800f1aa:	4281      	cmp	r1, r0
 800f1ac:	d908      	bls.n	800f1c0 <sin+0x38>
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	f7f1 f835 	bl	8000220 <__aeabi_dsub>
 800f1b6:	ec41 0b10 	vmov	d0, r0, r1
 800f1ba:	b005      	add	sp, #20
 800f1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1c0:	4668      	mov	r0, sp
 800f1c2:	f000 fadd 	bl	800f780 <__ieee754_rem_pio2>
 800f1c6:	f000 0003 	and.w	r0, r0, #3
 800f1ca:	2801      	cmp	r0, #1
 800f1cc:	d00c      	beq.n	800f1e8 <sin+0x60>
 800f1ce:	2802      	cmp	r0, #2
 800f1d0:	d011      	beq.n	800f1f6 <sin+0x6e>
 800f1d2:	b9e8      	cbnz	r0, 800f210 <sin+0x88>
 800f1d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1d8:	ed9d 0b00 	vldr	d0, [sp]
 800f1dc:	2001      	movs	r0, #1
 800f1de:	f000 fa13 	bl	800f608 <__kernel_sin>
 800f1e2:	ec51 0b10 	vmov	r0, r1, d0
 800f1e6:	e7e6      	b.n	800f1b6 <sin+0x2e>
 800f1e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1ec:	ed9d 0b00 	vldr	d0, [sp]
 800f1f0:	f000 f942 	bl	800f478 <__kernel_cos>
 800f1f4:	e7f5      	b.n	800f1e2 <sin+0x5a>
 800f1f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1fa:	ed9d 0b00 	vldr	d0, [sp]
 800f1fe:	2001      	movs	r0, #1
 800f200:	f000 fa02 	bl	800f608 <__kernel_sin>
 800f204:	ec53 2b10 	vmov	r2, r3, d0
 800f208:	4610      	mov	r0, r2
 800f20a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f20e:	e7d2      	b.n	800f1b6 <sin+0x2e>
 800f210:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f214:	ed9d 0b00 	vldr	d0, [sp]
 800f218:	f000 f92e 	bl	800f478 <__kernel_cos>
 800f21c:	e7f2      	b.n	800f204 <sin+0x7c>
 800f21e:	bf00      	nop
	...
 800f228:	3fe921fb 	.word	0x3fe921fb
 800f22c:	7fefffff 	.word	0x7fefffff

0800f230 <fmodf>:
 800f230:	b508      	push	{r3, lr}
 800f232:	ed2d 8b02 	vpush	{d8}
 800f236:	eef0 8a40 	vmov.f32	s17, s0
 800f23a:	eeb0 8a60 	vmov.f32	s16, s1
 800f23e:	f000 fd43 	bl	800fcc8 <__ieee754_fmodf>
 800f242:	eef4 8a48 	vcmp.f32	s17, s16
 800f246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24a:	d60c      	bvs.n	800f266 <fmodf+0x36>
 800f24c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f26c <fmodf+0x3c>
 800f250:	eeb4 8a68 	vcmp.f32	s16, s17
 800f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f258:	d105      	bne.n	800f266 <fmodf+0x36>
 800f25a:	f7ff ff05 	bl	800f068 <__errno>
 800f25e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f262:	2321      	movs	r3, #33	@ 0x21
 800f264:	6003      	str	r3, [r0, #0]
 800f266:	ecbd 8b02 	vpop	{d8}
 800f26a:	bd08      	pop	{r3, pc}
 800f26c:	00000000 	.word	0x00000000

0800f270 <sqrtf>:
 800f270:	b508      	push	{r3, lr}
 800f272:	ed2d 8b02 	vpush	{d8}
 800f276:	eeb0 8a40 	vmov.f32	s16, s0
 800f27a:	f000 f8f7 	bl	800f46c <__ieee754_sqrtf>
 800f27e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f286:	d60c      	bvs.n	800f2a2 <sqrtf+0x32>
 800f288:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f2a8 <sqrtf+0x38>
 800f28c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	d505      	bpl.n	800f2a2 <sqrtf+0x32>
 800f296:	f7ff fee7 	bl	800f068 <__errno>
 800f29a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f29e:	2321      	movs	r3, #33	@ 0x21
 800f2a0:	6003      	str	r3, [r0, #0]
 800f2a2:	ecbd 8b02 	vpop	{d8}
 800f2a6:	bd08      	pop	{r3, pc}
 800f2a8:	00000000 	.word	0x00000000

0800f2ac <cosf>:
 800f2ac:	ee10 3a10 	vmov	r3, s0
 800f2b0:	b507      	push	{r0, r1, r2, lr}
 800f2b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f32c <cosf+0x80>)
 800f2b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d806      	bhi.n	800f2ca <cosf+0x1e>
 800f2bc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f330 <cosf+0x84>
 800f2c0:	b003      	add	sp, #12
 800f2c2:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c6:	f000 bc5f 	b.w	800fb88 <__kernel_cosf>
 800f2ca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f2ce:	d304      	bcc.n	800f2da <cosf+0x2e>
 800f2d0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f2d4:	b003      	add	sp, #12
 800f2d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2da:	4668      	mov	r0, sp
 800f2dc:	f000 fd76 	bl	800fdcc <__ieee754_rem_pio2f>
 800f2e0:	f000 0003 	and.w	r0, r0, #3
 800f2e4:	2801      	cmp	r0, #1
 800f2e6:	d009      	beq.n	800f2fc <cosf+0x50>
 800f2e8:	2802      	cmp	r0, #2
 800f2ea:	d010      	beq.n	800f30e <cosf+0x62>
 800f2ec:	b9b0      	cbnz	r0, 800f31c <cosf+0x70>
 800f2ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2f2:	ed9d 0a00 	vldr	s0, [sp]
 800f2f6:	f000 fc47 	bl	800fb88 <__kernel_cosf>
 800f2fa:	e7eb      	b.n	800f2d4 <cosf+0x28>
 800f2fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f300:	ed9d 0a00 	vldr	s0, [sp]
 800f304:	f000 fc98 	bl	800fc38 <__kernel_sinf>
 800f308:	eeb1 0a40 	vneg.f32	s0, s0
 800f30c:	e7e2      	b.n	800f2d4 <cosf+0x28>
 800f30e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f312:	ed9d 0a00 	vldr	s0, [sp]
 800f316:	f000 fc37 	bl	800fb88 <__kernel_cosf>
 800f31a:	e7f5      	b.n	800f308 <cosf+0x5c>
 800f31c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f320:	ed9d 0a00 	vldr	s0, [sp]
 800f324:	2001      	movs	r0, #1
 800f326:	f000 fc87 	bl	800fc38 <__kernel_sinf>
 800f32a:	e7d3      	b.n	800f2d4 <cosf+0x28>
 800f32c:	3f490fd8 	.word	0x3f490fd8
 800f330:	00000000 	.word	0x00000000

0800f334 <sinf>:
 800f334:	ee10 3a10 	vmov	r3, s0
 800f338:	b507      	push	{r0, r1, r2, lr}
 800f33a:	4a1f      	ldr	r2, [pc, #124]	@ (800f3b8 <sinf+0x84>)
 800f33c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f340:	4293      	cmp	r3, r2
 800f342:	d807      	bhi.n	800f354 <sinf+0x20>
 800f344:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f3bc <sinf+0x88>
 800f348:	2000      	movs	r0, #0
 800f34a:	b003      	add	sp, #12
 800f34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f350:	f000 bc72 	b.w	800fc38 <__kernel_sinf>
 800f354:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f358:	d304      	bcc.n	800f364 <sinf+0x30>
 800f35a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f35e:	b003      	add	sp, #12
 800f360:	f85d fb04 	ldr.w	pc, [sp], #4
 800f364:	4668      	mov	r0, sp
 800f366:	f000 fd31 	bl	800fdcc <__ieee754_rem_pio2f>
 800f36a:	f000 0003 	and.w	r0, r0, #3
 800f36e:	2801      	cmp	r0, #1
 800f370:	d00a      	beq.n	800f388 <sinf+0x54>
 800f372:	2802      	cmp	r0, #2
 800f374:	d00f      	beq.n	800f396 <sinf+0x62>
 800f376:	b9c0      	cbnz	r0, 800f3aa <sinf+0x76>
 800f378:	eddd 0a01 	vldr	s1, [sp, #4]
 800f37c:	ed9d 0a00 	vldr	s0, [sp]
 800f380:	2001      	movs	r0, #1
 800f382:	f000 fc59 	bl	800fc38 <__kernel_sinf>
 800f386:	e7ea      	b.n	800f35e <sinf+0x2a>
 800f388:	eddd 0a01 	vldr	s1, [sp, #4]
 800f38c:	ed9d 0a00 	vldr	s0, [sp]
 800f390:	f000 fbfa 	bl	800fb88 <__kernel_cosf>
 800f394:	e7e3      	b.n	800f35e <sinf+0x2a>
 800f396:	eddd 0a01 	vldr	s1, [sp, #4]
 800f39a:	ed9d 0a00 	vldr	s0, [sp]
 800f39e:	2001      	movs	r0, #1
 800f3a0:	f000 fc4a 	bl	800fc38 <__kernel_sinf>
 800f3a4:	eeb1 0a40 	vneg.f32	s0, s0
 800f3a8:	e7d9      	b.n	800f35e <sinf+0x2a>
 800f3aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800f3ae:	ed9d 0a00 	vldr	s0, [sp]
 800f3b2:	f000 fbe9 	bl	800fb88 <__kernel_cosf>
 800f3b6:	e7f5      	b.n	800f3a4 <sinf+0x70>
 800f3b8:	3f490fd8 	.word	0x3f490fd8
 800f3bc:	00000000 	.word	0x00000000

0800f3c0 <fmaxf>:
 800f3c0:	b508      	push	{r3, lr}
 800f3c2:	ed2d 8b02 	vpush	{d8}
 800f3c6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ca:	eef0 8a60 	vmov.f32	s17, s1
 800f3ce:	f000 f831 	bl	800f434 <__fpclassifyf>
 800f3d2:	b930      	cbnz	r0, 800f3e2 <fmaxf+0x22>
 800f3d4:	eeb0 8a68 	vmov.f32	s16, s17
 800f3d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f3dc:	ecbd 8b02 	vpop	{d8}
 800f3e0:	bd08      	pop	{r3, pc}
 800f3e2:	eeb0 0a68 	vmov.f32	s0, s17
 800f3e6:	f000 f825 	bl	800f434 <__fpclassifyf>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	d0f4      	beq.n	800f3d8 <fmaxf+0x18>
 800f3ee:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	dded      	ble.n	800f3d4 <fmaxf+0x14>
 800f3f8:	e7ee      	b.n	800f3d8 <fmaxf+0x18>

0800f3fa <fminf>:
 800f3fa:	b508      	push	{r3, lr}
 800f3fc:	ed2d 8b02 	vpush	{d8}
 800f400:	eeb0 8a40 	vmov.f32	s16, s0
 800f404:	eef0 8a60 	vmov.f32	s17, s1
 800f408:	f000 f814 	bl	800f434 <__fpclassifyf>
 800f40c:	b930      	cbnz	r0, 800f41c <fminf+0x22>
 800f40e:	eeb0 8a68 	vmov.f32	s16, s17
 800f412:	eeb0 0a48 	vmov.f32	s0, s16
 800f416:	ecbd 8b02 	vpop	{d8}
 800f41a:	bd08      	pop	{r3, pc}
 800f41c:	eeb0 0a68 	vmov.f32	s0, s17
 800f420:	f000 f808 	bl	800f434 <__fpclassifyf>
 800f424:	2800      	cmp	r0, #0
 800f426:	d0f4      	beq.n	800f412 <fminf+0x18>
 800f428:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f430:	d5ed      	bpl.n	800f40e <fminf+0x14>
 800f432:	e7ee      	b.n	800f412 <fminf+0x18>

0800f434 <__fpclassifyf>:
 800f434:	ee10 3a10 	vmov	r3, s0
 800f438:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f43c:	d00d      	beq.n	800f45a <__fpclassifyf+0x26>
 800f43e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f442:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f446:	d30a      	bcc.n	800f45e <__fpclassifyf+0x2a>
 800f448:	4b07      	ldr	r3, [pc, #28]	@ (800f468 <__fpclassifyf+0x34>)
 800f44a:	1e42      	subs	r2, r0, #1
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d908      	bls.n	800f462 <__fpclassifyf+0x2e>
 800f450:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f454:	4258      	negs	r0, r3
 800f456:	4158      	adcs	r0, r3
 800f458:	4770      	bx	lr
 800f45a:	2002      	movs	r0, #2
 800f45c:	4770      	bx	lr
 800f45e:	2004      	movs	r0, #4
 800f460:	4770      	bx	lr
 800f462:	2003      	movs	r0, #3
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	007ffffe 	.word	0x007ffffe

0800f46c <__ieee754_sqrtf>:
 800f46c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f470:	4770      	bx	lr
 800f472:	0000      	movs	r0, r0
 800f474:	0000      	movs	r0, r0
	...

0800f478 <__kernel_cos>:
 800f478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f47c:	ec57 6b10 	vmov	r6, r7, d0
 800f480:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f484:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f488:	ed8d 1b00 	vstr	d1, [sp]
 800f48c:	d206      	bcs.n	800f49c <__kernel_cos+0x24>
 800f48e:	4630      	mov	r0, r6
 800f490:	4639      	mov	r1, r7
 800f492:	f7f1 fb17 	bl	8000ac4 <__aeabi_d2iz>
 800f496:	2800      	cmp	r0, #0
 800f498:	f000 8088 	beq.w	800f5ac <__kernel_cos+0x134>
 800f49c:	4632      	mov	r2, r6
 800f49e:	463b      	mov	r3, r7
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	4639      	mov	r1, r7
 800f4a4:	f7f1 f874 	bl	8000590 <__aeabi_dmul>
 800f4a8:	4b51      	ldr	r3, [pc, #324]	@ (800f5f0 <__kernel_cos+0x178>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	460d      	mov	r5, r1
 800f4b0:	f7f1 f86e 	bl	8000590 <__aeabi_dmul>
 800f4b4:	a340      	add	r3, pc, #256	@ (adr r3, 800f5b8 <__kernel_cos+0x140>)
 800f4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ba:	4682      	mov	sl, r0
 800f4bc:	468b      	mov	fp, r1
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f1 f865 	bl	8000590 <__aeabi_dmul>
 800f4c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800f5c0 <__kernel_cos+0x148>)
 800f4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4cc:	f7f0 feaa 	bl	8000224 <__adddf3>
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	462b      	mov	r3, r5
 800f4d4:	f7f1 f85c 	bl	8000590 <__aeabi_dmul>
 800f4d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f5c8 <__kernel_cos+0x150>)
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	f7f0 fe9f 	bl	8000220 <__aeabi_dsub>
 800f4e2:	4622      	mov	r2, r4
 800f4e4:	462b      	mov	r3, r5
 800f4e6:	f7f1 f853 	bl	8000590 <__aeabi_dmul>
 800f4ea:	a339      	add	r3, pc, #228	@ (adr r3, 800f5d0 <__kernel_cos+0x158>)
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	f7f0 fe98 	bl	8000224 <__adddf3>
 800f4f4:	4622      	mov	r2, r4
 800f4f6:	462b      	mov	r3, r5
 800f4f8:	f7f1 f84a 	bl	8000590 <__aeabi_dmul>
 800f4fc:	a336      	add	r3, pc, #216	@ (adr r3, 800f5d8 <__kernel_cos+0x160>)
 800f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f502:	f7f0 fe8d 	bl	8000220 <__aeabi_dsub>
 800f506:	4622      	mov	r2, r4
 800f508:	462b      	mov	r3, r5
 800f50a:	f7f1 f841 	bl	8000590 <__aeabi_dmul>
 800f50e:	a334      	add	r3, pc, #208	@ (adr r3, 800f5e0 <__kernel_cos+0x168>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	f7f0 fe86 	bl	8000224 <__adddf3>
 800f518:	4622      	mov	r2, r4
 800f51a:	462b      	mov	r3, r5
 800f51c:	f7f1 f838 	bl	8000590 <__aeabi_dmul>
 800f520:	4622      	mov	r2, r4
 800f522:	462b      	mov	r3, r5
 800f524:	f7f1 f834 	bl	8000590 <__aeabi_dmul>
 800f528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f52c:	4604      	mov	r4, r0
 800f52e:	460d      	mov	r5, r1
 800f530:	4630      	mov	r0, r6
 800f532:	4639      	mov	r1, r7
 800f534:	f7f1 f82c 	bl	8000590 <__aeabi_dmul>
 800f538:	460b      	mov	r3, r1
 800f53a:	4602      	mov	r2, r0
 800f53c:	4629      	mov	r1, r5
 800f53e:	4620      	mov	r0, r4
 800f540:	f7f0 fe6e 	bl	8000220 <__aeabi_dsub>
 800f544:	4b2b      	ldr	r3, [pc, #172]	@ (800f5f4 <__kernel_cos+0x17c>)
 800f546:	4598      	cmp	r8, r3
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	d810      	bhi.n	800f570 <__kernel_cos+0xf8>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	4650      	mov	r0, sl
 800f554:	4659      	mov	r1, fp
 800f556:	f7f0 fe63 	bl	8000220 <__aeabi_dsub>
 800f55a:	460b      	mov	r3, r1
 800f55c:	4926      	ldr	r1, [pc, #152]	@ (800f5f8 <__kernel_cos+0x180>)
 800f55e:	4602      	mov	r2, r0
 800f560:	2000      	movs	r0, #0
 800f562:	f7f0 fe5d 	bl	8000220 <__aeabi_dsub>
 800f566:	ec41 0b10 	vmov	d0, r0, r1
 800f56a:	b003      	add	sp, #12
 800f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f570:	4b22      	ldr	r3, [pc, #136]	@ (800f5fc <__kernel_cos+0x184>)
 800f572:	4921      	ldr	r1, [pc, #132]	@ (800f5f8 <__kernel_cos+0x180>)
 800f574:	4598      	cmp	r8, r3
 800f576:	bf8c      	ite	hi
 800f578:	4d21      	ldrhi	r5, [pc, #132]	@ (800f600 <__kernel_cos+0x188>)
 800f57a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f57e:	2400      	movs	r4, #0
 800f580:	4622      	mov	r2, r4
 800f582:	462b      	mov	r3, r5
 800f584:	2000      	movs	r0, #0
 800f586:	f7f0 fe4b 	bl	8000220 <__aeabi_dsub>
 800f58a:	4622      	mov	r2, r4
 800f58c:	4680      	mov	r8, r0
 800f58e:	4689      	mov	r9, r1
 800f590:	462b      	mov	r3, r5
 800f592:	4650      	mov	r0, sl
 800f594:	4659      	mov	r1, fp
 800f596:	f7f0 fe43 	bl	8000220 <__aeabi_dsub>
 800f59a:	4632      	mov	r2, r6
 800f59c:	463b      	mov	r3, r7
 800f59e:	f7f0 fe3f 	bl	8000220 <__aeabi_dsub>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	e7da      	b.n	800f562 <__kernel_cos+0xea>
 800f5ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f5e8 <__kernel_cos+0x170>
 800f5b0:	e7db      	b.n	800f56a <__kernel_cos+0xf2>
 800f5b2:	bf00      	nop
 800f5b4:	f3af 8000 	nop.w
 800f5b8:	be8838d4 	.word	0xbe8838d4
 800f5bc:	bda8fae9 	.word	0xbda8fae9
 800f5c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f5c4:	3e21ee9e 	.word	0x3e21ee9e
 800f5c8:	809c52ad 	.word	0x809c52ad
 800f5cc:	3e927e4f 	.word	0x3e927e4f
 800f5d0:	19cb1590 	.word	0x19cb1590
 800f5d4:	3efa01a0 	.word	0x3efa01a0
 800f5d8:	16c15177 	.word	0x16c15177
 800f5dc:	3f56c16c 	.word	0x3f56c16c
 800f5e0:	5555554c 	.word	0x5555554c
 800f5e4:	3fa55555 	.word	0x3fa55555
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	3ff00000 	.word	0x3ff00000
 800f5f0:	3fe00000 	.word	0x3fe00000
 800f5f4:	3fd33332 	.word	0x3fd33332
 800f5f8:	3ff00000 	.word	0x3ff00000
 800f5fc:	3fe90000 	.word	0x3fe90000
 800f600:	3fd20000 	.word	0x3fd20000
 800f604:	00000000 	.word	0x00000000

0800f608 <__kernel_sin>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	ec55 4b10 	vmov	r4, r5, d0
 800f610:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f614:	b085      	sub	sp, #20
 800f616:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f61a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f61e:	4680      	mov	r8, r0
 800f620:	d205      	bcs.n	800f62e <__kernel_sin+0x26>
 800f622:	4620      	mov	r0, r4
 800f624:	4629      	mov	r1, r5
 800f626:	f7f1 fa4d 	bl	8000ac4 <__aeabi_d2iz>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d052      	beq.n	800f6d4 <__kernel_sin+0xcc>
 800f62e:	4622      	mov	r2, r4
 800f630:	462b      	mov	r3, r5
 800f632:	4620      	mov	r0, r4
 800f634:	4629      	mov	r1, r5
 800f636:	f7f0 ffab 	bl	8000590 <__aeabi_dmul>
 800f63a:	4682      	mov	sl, r0
 800f63c:	468b      	mov	fp, r1
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4620      	mov	r0, r4
 800f644:	4629      	mov	r1, r5
 800f646:	f7f0 ffa3 	bl	8000590 <__aeabi_dmul>
 800f64a:	a342      	add	r3, pc, #264	@ (adr r3, 800f754 <__kernel_sin+0x14c>)
 800f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f650:	e9cd 0100 	strd	r0, r1, [sp]
 800f654:	4650      	mov	r0, sl
 800f656:	4659      	mov	r1, fp
 800f658:	f7f0 ff9a 	bl	8000590 <__aeabi_dmul>
 800f65c:	a33f      	add	r3, pc, #252	@ (adr r3, 800f75c <__kernel_sin+0x154>)
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	f7f0 fddd 	bl	8000220 <__aeabi_dsub>
 800f666:	4652      	mov	r2, sl
 800f668:	465b      	mov	r3, fp
 800f66a:	f7f0 ff91 	bl	8000590 <__aeabi_dmul>
 800f66e:	a33d      	add	r3, pc, #244	@ (adr r3, 800f764 <__kernel_sin+0x15c>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f0 fdd6 	bl	8000224 <__adddf3>
 800f678:	4652      	mov	r2, sl
 800f67a:	465b      	mov	r3, fp
 800f67c:	f7f0 ff88 	bl	8000590 <__aeabi_dmul>
 800f680:	a33a      	add	r3, pc, #232	@ (adr r3, 800f76c <__kernel_sin+0x164>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 fdcb 	bl	8000220 <__aeabi_dsub>
 800f68a:	4652      	mov	r2, sl
 800f68c:	465b      	mov	r3, fp
 800f68e:	f7f0 ff7f 	bl	8000590 <__aeabi_dmul>
 800f692:	a338      	add	r3, pc, #224	@ (adr r3, 800f774 <__kernel_sin+0x16c>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	f7f0 fdc4 	bl	8000224 <__adddf3>
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	f1b8 0f00 	cmp.w	r8, #0
 800f6a4:	d11b      	bne.n	800f6de <__kernel_sin+0xd6>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4650      	mov	r0, sl
 800f6ac:	4659      	mov	r1, fp
 800f6ae:	f7f0 ff6f 	bl	8000590 <__aeabi_dmul>
 800f6b2:	a325      	add	r3, pc, #148	@ (adr r3, 800f748 <__kernel_sin+0x140>)
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	f7f0 fdb2 	bl	8000220 <__aeabi_dsub>
 800f6bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6c0:	f7f0 ff66 	bl	8000590 <__aeabi_dmul>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	f7f0 fdaa 	bl	8000224 <__adddf3>
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	ec45 4b10 	vmov	d0, r4, r5
 800f6d8:	b005      	add	sp, #20
 800f6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f750 <__kernel_sin+0x148>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f7f0 ff53 	bl	8000590 <__aeabi_dmul>
 800f6ea:	4632      	mov	r2, r6
 800f6ec:	4680      	mov	r8, r0
 800f6ee:	4689      	mov	r9, r1
 800f6f0:	463b      	mov	r3, r7
 800f6f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6f6:	f7f0 ff4b 	bl	8000590 <__aeabi_dmul>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4640      	mov	r0, r8
 800f700:	4649      	mov	r1, r9
 800f702:	f7f0 fd8d 	bl	8000220 <__aeabi_dsub>
 800f706:	4652      	mov	r2, sl
 800f708:	465b      	mov	r3, fp
 800f70a:	f7f0 ff41 	bl	8000590 <__aeabi_dmul>
 800f70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f712:	f7f0 fd85 	bl	8000220 <__aeabi_dsub>
 800f716:	a30c      	add	r3, pc, #48	@ (adr r3, 800f748 <__kernel_sin+0x140>)
 800f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71c:	4606      	mov	r6, r0
 800f71e:	460f      	mov	r7, r1
 800f720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f724:	f7f0 ff34 	bl	8000590 <__aeabi_dmul>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	4630      	mov	r0, r6
 800f72e:	4639      	mov	r1, r7
 800f730:	f7f0 fd78 	bl	8000224 <__adddf3>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4620      	mov	r0, r4
 800f73a:	4629      	mov	r1, r5
 800f73c:	f7f0 fd70 	bl	8000220 <__aeabi_dsub>
 800f740:	e7c6      	b.n	800f6d0 <__kernel_sin+0xc8>
 800f742:	bf00      	nop
 800f744:	f3af 8000 	nop.w
 800f748:	55555549 	.word	0x55555549
 800f74c:	3fc55555 	.word	0x3fc55555
 800f750:	3fe00000 	.word	0x3fe00000
 800f754:	5acfd57c 	.word	0x5acfd57c
 800f758:	3de5d93a 	.word	0x3de5d93a
 800f75c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f760:	3e5ae5e6 	.word	0x3e5ae5e6
 800f764:	57b1fe7d 	.word	0x57b1fe7d
 800f768:	3ec71de3 	.word	0x3ec71de3
 800f76c:	19c161d5 	.word	0x19c161d5
 800f770:	3f2a01a0 	.word	0x3f2a01a0
 800f774:	1110f8a6 	.word	0x1110f8a6
 800f778:	3f811111 	.word	0x3f811111
 800f77c:	00000000 	.word	0x00000000

0800f780 <__ieee754_rem_pio2>:
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	ec57 6b10 	vmov	r6, r7, d0
 800f788:	4bc5      	ldr	r3, [pc, #788]	@ (800faa0 <__ieee754_rem_pio2+0x320>)
 800f78a:	b08d      	sub	sp, #52	@ 0x34
 800f78c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f790:	4598      	cmp	r8, r3
 800f792:	4604      	mov	r4, r0
 800f794:	9704      	str	r7, [sp, #16]
 800f796:	d807      	bhi.n	800f7a8 <__ieee754_rem_pio2+0x28>
 800f798:	2200      	movs	r2, #0
 800f79a:	2300      	movs	r3, #0
 800f79c:	ed80 0b00 	vstr	d0, [r0]
 800f7a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f7a4:	2500      	movs	r5, #0
 800f7a6:	e028      	b.n	800f7fa <__ieee754_rem_pio2+0x7a>
 800f7a8:	4bbe      	ldr	r3, [pc, #760]	@ (800faa4 <__ieee754_rem_pio2+0x324>)
 800f7aa:	4598      	cmp	r8, r3
 800f7ac:	d878      	bhi.n	800f8a0 <__ieee754_rem_pio2+0x120>
 800f7ae:	9b04      	ldr	r3, [sp, #16]
 800f7b0:	4dbd      	ldr	r5, [pc, #756]	@ (800faa8 <__ieee754_rem_pio2+0x328>)
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fa68 <__ieee754_rem_pio2+0x2e8>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	4639      	mov	r1, r7
 800f7be:	dd38      	ble.n	800f832 <__ieee754_rem_pio2+0xb2>
 800f7c0:	f7f0 fd2e 	bl	8000220 <__aeabi_dsub>
 800f7c4:	45a8      	cmp	r8, r5
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	460f      	mov	r7, r1
 800f7ca:	d01a      	beq.n	800f802 <__ieee754_rem_pio2+0x82>
 800f7cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800fa70 <__ieee754_rem_pio2+0x2f0>)
 800f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d2:	f7f0 fd25 	bl	8000220 <__aeabi_dsub>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4680      	mov	r8, r0
 800f7dc:	4689      	mov	r9, r1
 800f7de:	4630      	mov	r0, r6
 800f7e0:	4639      	mov	r1, r7
 800f7e2:	f7f0 fd1d 	bl	8000220 <__aeabi_dsub>
 800f7e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800fa70 <__ieee754_rem_pio2+0x2f0>)
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f7f0 fd18 	bl	8000220 <__aeabi_dsub>
 800f7f0:	e9c4 8900 	strd	r8, r9, [r4]
 800f7f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f7f8:	2501      	movs	r5, #1
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	b00d      	add	sp, #52	@ 0x34
 800f7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f802:	a39d      	add	r3, pc, #628	@ (adr r3, 800fa78 <__ieee754_rem_pio2+0x2f8>)
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	f7f0 fd0a 	bl	8000220 <__aeabi_dsub>
 800f80c:	a39c      	add	r3, pc, #624	@ (adr r3, 800fa80 <__ieee754_rem_pio2+0x300>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	4606      	mov	r6, r0
 800f814:	460f      	mov	r7, r1
 800f816:	f7f0 fd03 	bl	8000220 <__aeabi_dsub>
 800f81a:	4602      	mov	r2, r0
 800f81c:	460b      	mov	r3, r1
 800f81e:	4680      	mov	r8, r0
 800f820:	4689      	mov	r9, r1
 800f822:	4630      	mov	r0, r6
 800f824:	4639      	mov	r1, r7
 800f826:	f7f0 fcfb 	bl	8000220 <__aeabi_dsub>
 800f82a:	a395      	add	r3, pc, #596	@ (adr r3, 800fa80 <__ieee754_rem_pio2+0x300>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	e7dc      	b.n	800f7ec <__ieee754_rem_pio2+0x6c>
 800f832:	f7f0 fcf7 	bl	8000224 <__adddf3>
 800f836:	45a8      	cmp	r8, r5
 800f838:	4606      	mov	r6, r0
 800f83a:	460f      	mov	r7, r1
 800f83c:	d018      	beq.n	800f870 <__ieee754_rem_pio2+0xf0>
 800f83e:	a38c      	add	r3, pc, #560	@ (adr r3, 800fa70 <__ieee754_rem_pio2+0x2f0>)
 800f840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f844:	f7f0 fcee 	bl	8000224 <__adddf3>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f0 fce4 	bl	8000220 <__aeabi_dsub>
 800f858:	a385      	add	r3, pc, #532	@ (adr r3, 800fa70 <__ieee754_rem_pio2+0x2f0>)
 800f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85e:	f7f0 fce1 	bl	8000224 <__adddf3>
 800f862:	f04f 35ff 	mov.w	r5, #4294967295
 800f866:	e9c4 8900 	strd	r8, r9, [r4]
 800f86a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f86e:	e7c4      	b.n	800f7fa <__ieee754_rem_pio2+0x7a>
 800f870:	a381      	add	r3, pc, #516	@ (adr r3, 800fa78 <__ieee754_rem_pio2+0x2f8>)
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f7f0 fcd5 	bl	8000224 <__adddf3>
 800f87a:	a381      	add	r3, pc, #516	@ (adr r3, 800fa80 <__ieee754_rem_pio2+0x300>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	f7f0 fcce 	bl	8000224 <__adddf3>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4680      	mov	r8, r0
 800f88e:	4689      	mov	r9, r1
 800f890:	4630      	mov	r0, r6
 800f892:	4639      	mov	r1, r7
 800f894:	f7f0 fcc4 	bl	8000220 <__aeabi_dsub>
 800f898:	a379      	add	r3, pc, #484	@ (adr r3, 800fa80 <__ieee754_rem_pio2+0x300>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	e7de      	b.n	800f85e <__ieee754_rem_pio2+0xde>
 800f8a0:	4b82      	ldr	r3, [pc, #520]	@ (800faac <__ieee754_rem_pio2+0x32c>)
 800f8a2:	4598      	cmp	r8, r3
 800f8a4:	f200 80d1 	bhi.w	800fa4a <__ieee754_rem_pio2+0x2ca>
 800f8a8:	f000 f966 	bl	800fb78 <fabs>
 800f8ac:	ec57 6b10 	vmov	r6, r7, d0
 800f8b0:	a375      	add	r3, pc, #468	@ (adr r3, 800fa88 <__ieee754_rem_pio2+0x308>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	f7f0 fe69 	bl	8000590 <__aeabi_dmul>
 800f8be:	4b7c      	ldr	r3, [pc, #496]	@ (800fab0 <__ieee754_rem_pio2+0x330>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f7f0 fcaf 	bl	8000224 <__adddf3>
 800f8c6:	f7f1 f8fd 	bl	8000ac4 <__aeabi_d2iz>
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	f7f0 fdf6 	bl	80004bc <__aeabi_i2d>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8d8:	a363      	add	r3, pc, #396	@ (adr r3, 800fa68 <__ieee754_rem_pio2+0x2e8>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f0 fe57 	bl	8000590 <__aeabi_dmul>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	f7f0 fc99 	bl	8000220 <__aeabi_dsub>
 800f8ee:	a360      	add	r3, pc, #384	@ (adr r3, 800fa70 <__ieee754_rem_pio2+0x2f0>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	4682      	mov	sl, r0
 800f8f6:	468b      	mov	fp, r1
 800f8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8fc:	f7f0 fe48 	bl	8000590 <__aeabi_dmul>
 800f900:	2d1f      	cmp	r5, #31
 800f902:	4606      	mov	r6, r0
 800f904:	460f      	mov	r7, r1
 800f906:	dc0c      	bgt.n	800f922 <__ieee754_rem_pio2+0x1a2>
 800f908:	4b6a      	ldr	r3, [pc, #424]	@ (800fab4 <__ieee754_rem_pio2+0x334>)
 800f90a:	1e6a      	subs	r2, r5, #1
 800f90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f910:	4543      	cmp	r3, r8
 800f912:	d006      	beq.n	800f922 <__ieee754_rem_pio2+0x1a2>
 800f914:	4632      	mov	r2, r6
 800f916:	463b      	mov	r3, r7
 800f918:	4650      	mov	r0, sl
 800f91a:	4659      	mov	r1, fp
 800f91c:	f7f0 fc80 	bl	8000220 <__aeabi_dsub>
 800f920:	e00e      	b.n	800f940 <__ieee754_rem_pio2+0x1c0>
 800f922:	463b      	mov	r3, r7
 800f924:	4632      	mov	r2, r6
 800f926:	4650      	mov	r0, sl
 800f928:	4659      	mov	r1, fp
 800f92a:	f7f0 fc79 	bl	8000220 <__aeabi_dsub>
 800f92e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f938:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f93c:	2b10      	cmp	r3, #16
 800f93e:	dc02      	bgt.n	800f946 <__ieee754_rem_pio2+0x1c6>
 800f940:	e9c4 0100 	strd	r0, r1, [r4]
 800f944:	e039      	b.n	800f9ba <__ieee754_rem_pio2+0x23a>
 800f946:	a34c      	add	r3, pc, #304	@ (adr r3, 800fa78 <__ieee754_rem_pio2+0x2f8>)
 800f948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f950:	f7f0 fe1e 	bl	8000590 <__aeabi_dmul>
 800f954:	4606      	mov	r6, r0
 800f956:	460f      	mov	r7, r1
 800f958:	4602      	mov	r2, r0
 800f95a:	460b      	mov	r3, r1
 800f95c:	4650      	mov	r0, sl
 800f95e:	4659      	mov	r1, fp
 800f960:	f7f0 fc5e 	bl	8000220 <__aeabi_dsub>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4680      	mov	r8, r0
 800f96a:	4689      	mov	r9, r1
 800f96c:	4650      	mov	r0, sl
 800f96e:	4659      	mov	r1, fp
 800f970:	f7f0 fc56 	bl	8000220 <__aeabi_dsub>
 800f974:	4632      	mov	r2, r6
 800f976:	463b      	mov	r3, r7
 800f978:	f7f0 fc52 	bl	8000220 <__aeabi_dsub>
 800f97c:	a340      	add	r3, pc, #256	@ (adr r3, 800fa80 <__ieee754_rem_pio2+0x300>)
 800f97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f982:	4606      	mov	r6, r0
 800f984:	460f      	mov	r7, r1
 800f986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f98a:	f7f0 fe01 	bl	8000590 <__aeabi_dmul>
 800f98e:	4632      	mov	r2, r6
 800f990:	463b      	mov	r3, r7
 800f992:	f7f0 fc45 	bl	8000220 <__aeabi_dsub>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4606      	mov	r6, r0
 800f99c:	460f      	mov	r7, r1
 800f99e:	4640      	mov	r0, r8
 800f9a0:	4649      	mov	r1, r9
 800f9a2:	f7f0 fc3d 	bl	8000220 <__aeabi_dsub>
 800f9a6:	9a05      	ldr	r2, [sp, #20]
 800f9a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b31      	cmp	r3, #49	@ 0x31
 800f9b0:	dc20      	bgt.n	800f9f4 <__ieee754_rem_pio2+0x274>
 800f9b2:	e9c4 0100 	strd	r0, r1, [r4]
 800f9b6:	46c2      	mov	sl, r8
 800f9b8:	46cb      	mov	fp, r9
 800f9ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f9be:	4650      	mov	r0, sl
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	464b      	mov	r3, r9
 800f9c4:	4659      	mov	r1, fp
 800f9c6:	f7f0 fc2b 	bl	8000220 <__aeabi_dsub>
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4632      	mov	r2, r6
 800f9ce:	f7f0 fc27 	bl	8000220 <__aeabi_dsub>
 800f9d2:	9b04      	ldr	r3, [sp, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f9da:	f6bf af0e 	bge.w	800f7fa <__ieee754_rem_pio2+0x7a>
 800f9de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f9e2:	6063      	str	r3, [r4, #4]
 800f9e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9e8:	f8c4 8000 	str.w	r8, [r4]
 800f9ec:	60a0      	str	r0, [r4, #8]
 800f9ee:	60e3      	str	r3, [r4, #12]
 800f9f0:	426d      	negs	r5, r5
 800f9f2:	e702      	b.n	800f7fa <__ieee754_rem_pio2+0x7a>
 800f9f4:	a326      	add	r3, pc, #152	@ (adr r3, 800fa90 <__ieee754_rem_pio2+0x310>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9fe:	f7f0 fdc7 	bl	8000590 <__aeabi_dmul>
 800fa02:	4606      	mov	r6, r0
 800fa04:	460f      	mov	r7, r1
 800fa06:	4602      	mov	r2, r0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	4640      	mov	r0, r8
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	f7f0 fc07 	bl	8000220 <__aeabi_dsub>
 800fa12:	4602      	mov	r2, r0
 800fa14:	460b      	mov	r3, r1
 800fa16:	4682      	mov	sl, r0
 800fa18:	468b      	mov	fp, r1
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	f7f0 fbff 	bl	8000220 <__aeabi_dsub>
 800fa22:	4632      	mov	r2, r6
 800fa24:	463b      	mov	r3, r7
 800fa26:	f7f0 fbfb 	bl	8000220 <__aeabi_dsub>
 800fa2a:	a31b      	add	r3, pc, #108	@ (adr r3, 800fa98 <__ieee754_rem_pio2+0x318>)
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	4606      	mov	r6, r0
 800fa32:	460f      	mov	r7, r1
 800fa34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa38:	f7f0 fdaa 	bl	8000590 <__aeabi_dmul>
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	463b      	mov	r3, r7
 800fa40:	f7f0 fbee 	bl	8000220 <__aeabi_dsub>
 800fa44:	4606      	mov	r6, r0
 800fa46:	460f      	mov	r7, r1
 800fa48:	e764      	b.n	800f914 <__ieee754_rem_pio2+0x194>
 800fa4a:	4b1b      	ldr	r3, [pc, #108]	@ (800fab8 <__ieee754_rem_pio2+0x338>)
 800fa4c:	4598      	cmp	r8, r3
 800fa4e:	d935      	bls.n	800fabc <__ieee754_rem_pio2+0x33c>
 800fa50:	4632      	mov	r2, r6
 800fa52:	463b      	mov	r3, r7
 800fa54:	4630      	mov	r0, r6
 800fa56:	4639      	mov	r1, r7
 800fa58:	f7f0 fbe2 	bl	8000220 <__aeabi_dsub>
 800fa5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa60:	e9c4 0100 	strd	r0, r1, [r4]
 800fa64:	e69e      	b.n	800f7a4 <__ieee754_rem_pio2+0x24>
 800fa66:	bf00      	nop
 800fa68:	54400000 	.word	0x54400000
 800fa6c:	3ff921fb 	.word	0x3ff921fb
 800fa70:	1a626331 	.word	0x1a626331
 800fa74:	3dd0b461 	.word	0x3dd0b461
 800fa78:	1a600000 	.word	0x1a600000
 800fa7c:	3dd0b461 	.word	0x3dd0b461
 800fa80:	2e037073 	.word	0x2e037073
 800fa84:	3ba3198a 	.word	0x3ba3198a
 800fa88:	6dc9c883 	.word	0x6dc9c883
 800fa8c:	3fe45f30 	.word	0x3fe45f30
 800fa90:	2e000000 	.word	0x2e000000
 800fa94:	3ba3198a 	.word	0x3ba3198a
 800fa98:	252049c1 	.word	0x252049c1
 800fa9c:	397b839a 	.word	0x397b839a
 800faa0:	3fe921fb 	.word	0x3fe921fb
 800faa4:	4002d97b 	.word	0x4002d97b
 800faa8:	3ff921fb 	.word	0x3ff921fb
 800faac:	413921fb 	.word	0x413921fb
 800fab0:	3fe00000 	.word	0x3fe00000
 800fab4:	08010f68 	.word	0x08010f68
 800fab8:	7fefffff 	.word	0x7fefffff
 800fabc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800fac0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800fac4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800fac8:	4630      	mov	r0, r6
 800faca:	460f      	mov	r7, r1
 800facc:	f7f0 fffa 	bl	8000ac4 <__aeabi_d2iz>
 800fad0:	f7f0 fcf4 	bl	80004bc <__aeabi_i2d>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4630      	mov	r0, r6
 800fada:	4639      	mov	r1, r7
 800fadc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fae0:	f7f0 fb9e 	bl	8000220 <__aeabi_dsub>
 800fae4:	4b22      	ldr	r3, [pc, #136]	@ (800fb70 <__ieee754_rem_pio2+0x3f0>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	f7f0 fd52 	bl	8000590 <__aeabi_dmul>
 800faec:	460f      	mov	r7, r1
 800faee:	4606      	mov	r6, r0
 800faf0:	f7f0 ffe8 	bl	8000ac4 <__aeabi_d2iz>
 800faf4:	f7f0 fce2 	bl	80004bc <__aeabi_i2d>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4630      	mov	r0, r6
 800fafe:	4639      	mov	r1, r7
 800fb00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb04:	f7f0 fb8c 	bl	8000220 <__aeabi_dsub>
 800fb08:	4b19      	ldr	r3, [pc, #100]	@ (800fb70 <__ieee754_rem_pio2+0x3f0>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f7f0 fd40 	bl	8000590 <__aeabi_dmul>
 800fb10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800fb14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800fb18:	f04f 0803 	mov.w	r8, #3
 800fb1c:	2600      	movs	r6, #0
 800fb1e:	2700      	movs	r7, #0
 800fb20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800fb24:	4632      	mov	r2, r6
 800fb26:	463b      	mov	r3, r7
 800fb28:	46c2      	mov	sl, r8
 800fb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb2e:	f7f0 ff97 	bl	8000a60 <__aeabi_dcmpeq>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1f4      	bne.n	800fb20 <__ieee754_rem_pio2+0x3a0>
 800fb36:	4b0f      	ldr	r3, [pc, #60]	@ (800fb74 <__ieee754_rem_pio2+0x3f4>)
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	462a      	mov	r2, r5
 800fb40:	4653      	mov	r3, sl
 800fb42:	4621      	mov	r1, r4
 800fb44:	a806      	add	r0, sp, #24
 800fb46:	f000 fb5b 	bl	8010200 <__kernel_rem_pio2>
 800fb4a:	9b04      	ldr	r3, [sp, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	4605      	mov	r5, r0
 800fb50:	f6bf ae53 	bge.w	800f7fa <__ieee754_rem_pio2+0x7a>
 800fb54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800fb58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb5c:	e9c4 2300 	strd	r2, r3, [r4]
 800fb60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800fb64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fb6c:	e740      	b.n	800f9f0 <__ieee754_rem_pio2+0x270>
 800fb6e:	bf00      	nop
 800fb70:	41700000 	.word	0x41700000
 800fb74:	08010fe8 	.word	0x08010fe8

0800fb78 <fabs>:
 800fb78:	ec51 0b10 	vmov	r0, r1, d0
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fb82:	ec43 2b10 	vmov	d0, r2, r3
 800fb86:	4770      	bx	lr

0800fb88 <__kernel_cosf>:
 800fb88:	ee10 3a10 	vmov	r3, s0
 800fb8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fb94:	eef0 6a40 	vmov.f32	s13, s0
 800fb98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fb9c:	d204      	bcs.n	800fba8 <__kernel_cosf+0x20>
 800fb9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fba2:	ee17 2a90 	vmov	r2, s15
 800fba6:	b342      	cbz	r2, 800fbfa <__kernel_cosf+0x72>
 800fba8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fbac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fc18 <__kernel_cosf+0x90>
 800fbb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fc1c <__kernel_cosf+0x94>
 800fbb4:	4a1a      	ldr	r2, [pc, #104]	@ (800fc20 <__kernel_cosf+0x98>)
 800fbb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fc24 <__kernel_cosf+0x9c>
 800fbc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fbc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fc28 <__kernel_cosf+0xa0>
 800fbc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fbcc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fc2c <__kernel_cosf+0xa4>
 800fbd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fbd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fc30 <__kernel_cosf+0xa8>
 800fbd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fbdc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fbe0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fbe4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fbe8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fbec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf0:	d804      	bhi.n	800fbfc <__kernel_cosf+0x74>
 800fbf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fbf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fbfa:	4770      	bx	lr
 800fbfc:	4a0d      	ldr	r2, [pc, #52]	@ (800fc34 <__kernel_cosf+0xac>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	bf9a      	itte	ls
 800fc02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fc06:	ee07 3a10 	vmovls	s14, r3
 800fc0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800fc0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc16:	e7ec      	b.n	800fbf2 <__kernel_cosf+0x6a>
 800fc18:	ad47d74e 	.word	0xad47d74e
 800fc1c:	310f74f6 	.word	0x310f74f6
 800fc20:	3e999999 	.word	0x3e999999
 800fc24:	b493f27c 	.word	0xb493f27c
 800fc28:	37d00d01 	.word	0x37d00d01
 800fc2c:	bab60b61 	.word	0xbab60b61
 800fc30:	3d2aaaab 	.word	0x3d2aaaab
 800fc34:	3f480000 	.word	0x3f480000

0800fc38 <__kernel_sinf>:
 800fc38:	ee10 3a10 	vmov	r3, s0
 800fc3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fc44:	d204      	bcs.n	800fc50 <__kernel_sinf+0x18>
 800fc46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fc4a:	ee17 3a90 	vmov	r3, s15
 800fc4e:	b35b      	cbz	r3, 800fca8 <__kernel_sinf+0x70>
 800fc50:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fc54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fcac <__kernel_sinf+0x74>
 800fc58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fcb0 <__kernel_sinf+0x78>
 800fc5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fc60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fcb4 <__kernel_sinf+0x7c>
 800fc64:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fcb8 <__kernel_sinf+0x80>
 800fc6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fc70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fcbc <__kernel_sinf+0x84>
 800fc74:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fc78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc7c:	b930      	cbnz	r0, 800fc8c <__kernel_sinf+0x54>
 800fc7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fcc0 <__kernel_sinf+0x88>
 800fc82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fc86:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fc8a:	4770      	bx	lr
 800fc8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fc90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fc94:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fc98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fc9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fcc4 <__kernel_sinf+0x8c>
 800fca0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fca4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	2f2ec9d3 	.word	0x2f2ec9d3
 800fcb0:	b2d72f34 	.word	0xb2d72f34
 800fcb4:	3638ef1b 	.word	0x3638ef1b
 800fcb8:	b9500d01 	.word	0xb9500d01
 800fcbc:	3c088889 	.word	0x3c088889
 800fcc0:	be2aaaab 	.word	0xbe2aaaab
 800fcc4:	3e2aaaab 	.word	0x3e2aaaab

0800fcc8 <__ieee754_fmodf>:
 800fcc8:	b570      	push	{r4, r5, r6, lr}
 800fcca:	ee10 6a90 	vmov	r6, s1
 800fcce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fcd2:	1e5a      	subs	r2, r3, #1
 800fcd4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fcd8:	d206      	bcs.n	800fce8 <__ieee754_fmodf+0x20>
 800fcda:	ee10 4a10 	vmov	r4, s0
 800fcde:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800fce2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fce6:	d304      	bcc.n	800fcf2 <__ieee754_fmodf+0x2a>
 800fce8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800fcec:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800fcf0:	bd70      	pop	{r4, r5, r6, pc}
 800fcf2:	4299      	cmp	r1, r3
 800fcf4:	dbfc      	blt.n	800fcf0 <__ieee754_fmodf+0x28>
 800fcf6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800fcfa:	d105      	bne.n	800fd08 <__ieee754_fmodf+0x40>
 800fcfc:	4b32      	ldr	r3, [pc, #200]	@ (800fdc8 <__ieee754_fmodf+0x100>)
 800fcfe:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800fd02:	ed93 0a00 	vldr	s0, [r3]
 800fd06:	e7f3      	b.n	800fcf0 <__ieee754_fmodf+0x28>
 800fd08:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800fd0c:	d146      	bne.n	800fd9c <__ieee754_fmodf+0xd4>
 800fd0e:	020a      	lsls	r2, r1, #8
 800fd10:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	dc3e      	bgt.n	800fd96 <__ieee754_fmodf+0xce>
 800fd18:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800fd1c:	bf01      	itttt	eq
 800fd1e:	021a      	lsleq	r2, r3, #8
 800fd20:	fab2 f282 	clzeq	r2, r2
 800fd24:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800fd28:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800fd2c:	bf16      	itet	ne
 800fd2e:	15da      	asrne	r2, r3, #23
 800fd30:	3282      	addeq	r2, #130	@ 0x82
 800fd32:	3a7f      	subne	r2, #127	@ 0x7f
 800fd34:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800fd38:	bfbb      	ittet	lt
 800fd3a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800fd3e:	1a24      	sublt	r4, r4, r0
 800fd40:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800fd44:	40a1      	lsllt	r1, r4
 800fd46:	bfa8      	it	ge
 800fd48:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800fd4c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800fd50:	bfb5      	itete	lt
 800fd52:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800fd56:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800fd5a:	1aa4      	sublt	r4, r4, r2
 800fd5c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800fd60:	bfb8      	it	lt
 800fd62:	fa03 f404 	lsllt.w	r4, r3, r4
 800fd66:	1a80      	subs	r0, r0, r2
 800fd68:	1b0b      	subs	r3, r1, r4
 800fd6a:	b9d0      	cbnz	r0, 800fda2 <__ieee754_fmodf+0xda>
 800fd6c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800fd70:	bf28      	it	cs
 800fd72:	460b      	movcs	r3, r1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d0c1      	beq.n	800fcfc <__ieee754_fmodf+0x34>
 800fd78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fd7c:	db19      	blt.n	800fdb2 <__ieee754_fmodf+0xea>
 800fd7e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800fd82:	db19      	blt.n	800fdb8 <__ieee754_fmodf+0xf0>
 800fd84:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800fd88:	327f      	adds	r2, #127	@ 0x7f
 800fd8a:	432b      	orrs	r3, r5
 800fd8c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fd90:	ee00 3a10 	vmov	s0, r3
 800fd94:	e7ac      	b.n	800fcf0 <__ieee754_fmodf+0x28>
 800fd96:	3801      	subs	r0, #1
 800fd98:	0052      	lsls	r2, r2, #1
 800fd9a:	e7bb      	b.n	800fd14 <__ieee754_fmodf+0x4c>
 800fd9c:	15c8      	asrs	r0, r1, #23
 800fd9e:	387f      	subs	r0, #127	@ 0x7f
 800fda0:	e7ba      	b.n	800fd18 <__ieee754_fmodf+0x50>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	da02      	bge.n	800fdac <__ieee754_fmodf+0xe4>
 800fda6:	0049      	lsls	r1, r1, #1
 800fda8:	3801      	subs	r0, #1
 800fdaa:	e7dd      	b.n	800fd68 <__ieee754_fmodf+0xa0>
 800fdac:	d0a6      	beq.n	800fcfc <__ieee754_fmodf+0x34>
 800fdae:	0059      	lsls	r1, r3, #1
 800fdb0:	e7fa      	b.n	800fda8 <__ieee754_fmodf+0xe0>
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	3a01      	subs	r2, #1
 800fdb6:	e7df      	b.n	800fd78 <__ieee754_fmodf+0xb0>
 800fdb8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800fdbc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800fdc0:	3282      	adds	r2, #130	@ 0x82
 800fdc2:	4113      	asrs	r3, r2
 800fdc4:	432b      	orrs	r3, r5
 800fdc6:	e7e3      	b.n	800fd90 <__ieee754_fmodf+0xc8>
 800fdc8:	080110f0 	.word	0x080110f0

0800fdcc <__ieee754_rem_pio2f>:
 800fdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdce:	ee10 6a10 	vmov	r6, s0
 800fdd2:	4b88      	ldr	r3, [pc, #544]	@ (800fff4 <__ieee754_rem_pio2f+0x228>)
 800fdd4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fdd8:	429d      	cmp	r5, r3
 800fdda:	b087      	sub	sp, #28
 800fddc:	4604      	mov	r4, r0
 800fdde:	d805      	bhi.n	800fdec <__ieee754_rem_pio2f+0x20>
 800fde0:	2300      	movs	r3, #0
 800fde2:	ed80 0a00 	vstr	s0, [r0]
 800fde6:	6043      	str	r3, [r0, #4]
 800fde8:	2000      	movs	r0, #0
 800fdea:	e022      	b.n	800fe32 <__ieee754_rem_pio2f+0x66>
 800fdec:	4b82      	ldr	r3, [pc, #520]	@ (800fff8 <__ieee754_rem_pio2f+0x22c>)
 800fdee:	429d      	cmp	r5, r3
 800fdf0:	d83a      	bhi.n	800fe68 <__ieee754_rem_pio2f+0x9c>
 800fdf2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fdf6:	2e00      	cmp	r6, #0
 800fdf8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fffc <__ieee754_rem_pio2f+0x230>
 800fdfc:	4a80      	ldr	r2, [pc, #512]	@ (8010000 <__ieee754_rem_pio2f+0x234>)
 800fdfe:	f023 030f 	bic.w	r3, r3, #15
 800fe02:	dd18      	ble.n	800fe36 <__ieee754_rem_pio2f+0x6a>
 800fe04:	4293      	cmp	r3, r2
 800fe06:	ee70 7a47 	vsub.f32	s15, s0, s14
 800fe0a:	bf09      	itett	eq
 800fe0c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010004 <__ieee754_rem_pio2f+0x238>
 800fe10:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010008 <__ieee754_rem_pio2f+0x23c>
 800fe14:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801000c <__ieee754_rem_pio2f+0x240>
 800fe18:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800fe1c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fe20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe24:	ed80 7a00 	vstr	s14, [r0]
 800fe28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fe2c:	edc0 7a01 	vstr	s15, [r0, #4]
 800fe30:	2001      	movs	r0, #1
 800fe32:	b007      	add	sp, #28
 800fe34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe36:	4293      	cmp	r3, r2
 800fe38:	ee70 7a07 	vadd.f32	s15, s0, s14
 800fe3c:	bf09      	itett	eq
 800fe3e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010004 <__ieee754_rem_pio2f+0x238>
 800fe42:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010008 <__ieee754_rem_pio2f+0x23c>
 800fe46:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801000c <__ieee754_rem_pio2f+0x240>
 800fe4a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fe4e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fe52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe56:	ed80 7a00 	vstr	s14, [r0]
 800fe5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe5e:	edc0 7a01 	vstr	s15, [r0, #4]
 800fe62:	f04f 30ff 	mov.w	r0, #4294967295
 800fe66:	e7e4      	b.n	800fe32 <__ieee754_rem_pio2f+0x66>
 800fe68:	4b69      	ldr	r3, [pc, #420]	@ (8010010 <__ieee754_rem_pio2f+0x244>)
 800fe6a:	429d      	cmp	r5, r3
 800fe6c:	d873      	bhi.n	800ff56 <__ieee754_rem_pio2f+0x18a>
 800fe6e:	f000 f8dd 	bl	801002c <fabsf>
 800fe72:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010014 <__ieee754_rem_pio2f+0x248>
 800fe76:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fe7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fe7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fe86:	ee17 0a90 	vmov	r0, s15
 800fe8a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fffc <__ieee754_rem_pio2f+0x230>
 800fe8e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fe92:	281f      	cmp	r0, #31
 800fe94:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010008 <__ieee754_rem_pio2f+0x23c>
 800fe98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe9c:	eeb1 6a47 	vneg.f32	s12, s14
 800fea0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fea4:	ee16 1a90 	vmov	r1, s13
 800fea8:	dc09      	bgt.n	800febe <__ieee754_rem_pio2f+0xf2>
 800feaa:	4a5b      	ldr	r2, [pc, #364]	@ (8010018 <__ieee754_rem_pio2f+0x24c>)
 800feac:	1e47      	subs	r7, r0, #1
 800feae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800feb2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800feb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800feba:	4293      	cmp	r3, r2
 800febc:	d107      	bne.n	800fece <__ieee754_rem_pio2f+0x102>
 800febe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fec2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fec6:	2a08      	cmp	r2, #8
 800fec8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fecc:	dc14      	bgt.n	800fef8 <__ieee754_rem_pio2f+0x12c>
 800fece:	6021      	str	r1, [r4, #0]
 800fed0:	ed94 7a00 	vldr	s14, [r4]
 800fed4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fed8:	2e00      	cmp	r6, #0
 800feda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fede:	ed84 0a01 	vstr	s0, [r4, #4]
 800fee2:	daa6      	bge.n	800fe32 <__ieee754_rem_pio2f+0x66>
 800fee4:	eeb1 7a47 	vneg.f32	s14, s14
 800fee8:	eeb1 0a40 	vneg.f32	s0, s0
 800feec:	ed84 7a00 	vstr	s14, [r4]
 800fef0:	ed84 0a01 	vstr	s0, [r4, #4]
 800fef4:	4240      	negs	r0, r0
 800fef6:	e79c      	b.n	800fe32 <__ieee754_rem_pio2f+0x66>
 800fef8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010004 <__ieee754_rem_pio2f+0x238>
 800fefc:	eef0 6a40 	vmov.f32	s13, s0
 800ff00:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ff04:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ff08:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ff0c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801000c <__ieee754_rem_pio2f+0x240>
 800ff10:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ff14:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ff18:	ee15 2a90 	vmov	r2, s11
 800ff1c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ff20:	1a5b      	subs	r3, r3, r1
 800ff22:	2b19      	cmp	r3, #25
 800ff24:	dc04      	bgt.n	800ff30 <__ieee754_rem_pio2f+0x164>
 800ff26:	edc4 5a00 	vstr	s11, [r4]
 800ff2a:	eeb0 0a66 	vmov.f32	s0, s13
 800ff2e:	e7cf      	b.n	800fed0 <__ieee754_rem_pio2f+0x104>
 800ff30:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801001c <__ieee754_rem_pio2f+0x250>
 800ff34:	eeb0 0a66 	vmov.f32	s0, s13
 800ff38:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ff3c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ff40:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010020 <__ieee754_rem_pio2f+0x254>
 800ff44:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ff48:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ff4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ff50:	ed84 7a00 	vstr	s14, [r4]
 800ff54:	e7bc      	b.n	800fed0 <__ieee754_rem_pio2f+0x104>
 800ff56:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ff5a:	d306      	bcc.n	800ff6a <__ieee754_rem_pio2f+0x19e>
 800ff5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ff60:	edc0 7a01 	vstr	s15, [r0, #4]
 800ff64:	edc0 7a00 	vstr	s15, [r0]
 800ff68:	e73e      	b.n	800fde8 <__ieee754_rem_pio2f+0x1c>
 800ff6a:	15ea      	asrs	r2, r5, #23
 800ff6c:	3a86      	subs	r2, #134	@ 0x86
 800ff6e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ff72:	ee07 3a90 	vmov	s15, r3
 800ff76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ff7a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010024 <__ieee754_rem_pio2f+0x258>
 800ff7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff86:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ff8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ff92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff9a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ff9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ffa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ffa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffaa:	edcd 7a05 	vstr	s15, [sp, #20]
 800ffae:	d11e      	bne.n	800ffee <__ieee754_rem_pio2f+0x222>
 800ffb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ffb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb8:	bf0c      	ite	eq
 800ffba:	2301      	moveq	r3, #1
 800ffbc:	2302      	movne	r3, #2
 800ffbe:	491a      	ldr	r1, [pc, #104]	@ (8010028 <__ieee754_rem_pio2f+0x25c>)
 800ffc0:	9101      	str	r1, [sp, #4]
 800ffc2:	2102      	movs	r1, #2
 800ffc4:	9100      	str	r1, [sp, #0]
 800ffc6:	a803      	add	r0, sp, #12
 800ffc8:	4621      	mov	r1, r4
 800ffca:	f000 fc69 	bl	80108a0 <__kernel_rem_pio2f>
 800ffce:	2e00      	cmp	r6, #0
 800ffd0:	f6bf af2f 	bge.w	800fe32 <__ieee754_rem_pio2f+0x66>
 800ffd4:	edd4 7a00 	vldr	s15, [r4]
 800ffd8:	eef1 7a67 	vneg.f32	s15, s15
 800ffdc:	edc4 7a00 	vstr	s15, [r4]
 800ffe0:	edd4 7a01 	vldr	s15, [r4, #4]
 800ffe4:	eef1 7a67 	vneg.f32	s15, s15
 800ffe8:	edc4 7a01 	vstr	s15, [r4, #4]
 800ffec:	e782      	b.n	800fef4 <__ieee754_rem_pio2f+0x128>
 800ffee:	2303      	movs	r3, #3
 800fff0:	e7e5      	b.n	800ffbe <__ieee754_rem_pio2f+0x1f2>
 800fff2:	bf00      	nop
 800fff4:	3f490fd8 	.word	0x3f490fd8
 800fff8:	4016cbe3 	.word	0x4016cbe3
 800fffc:	3fc90f80 	.word	0x3fc90f80
 8010000:	3fc90fd0 	.word	0x3fc90fd0
 8010004:	37354400 	.word	0x37354400
 8010008:	37354443 	.word	0x37354443
 801000c:	2e85a308 	.word	0x2e85a308
 8010010:	43490f80 	.word	0x43490f80
 8010014:	3f22f984 	.word	0x3f22f984
 8010018:	080110f8 	.word	0x080110f8
 801001c:	2e85a300 	.word	0x2e85a300
 8010020:	248d3132 	.word	0x248d3132
 8010024:	43800000 	.word	0x43800000
 8010028:	08011178 	.word	0x08011178

0801002c <fabsf>:
 801002c:	ee10 3a10 	vmov	r3, s0
 8010030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010034:	ee00 3a10 	vmov	s0, r3
 8010038:	4770      	bx	lr
 801003a:	0000      	movs	r0, r0
 801003c:	0000      	movs	r0, r0
	...

08010040 <scalbn>:
 8010040:	b570      	push	{r4, r5, r6, lr}
 8010042:	ec55 4b10 	vmov	r4, r5, d0
 8010046:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801004a:	4606      	mov	r6, r0
 801004c:	462b      	mov	r3, r5
 801004e:	b991      	cbnz	r1, 8010076 <scalbn+0x36>
 8010050:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010054:	4323      	orrs	r3, r4
 8010056:	d03b      	beq.n	80100d0 <scalbn+0x90>
 8010058:	4b33      	ldr	r3, [pc, #204]	@ (8010128 <scalbn+0xe8>)
 801005a:	4620      	mov	r0, r4
 801005c:	4629      	mov	r1, r5
 801005e:	2200      	movs	r2, #0
 8010060:	f7f0 fa96 	bl	8000590 <__aeabi_dmul>
 8010064:	4b31      	ldr	r3, [pc, #196]	@ (801012c <scalbn+0xec>)
 8010066:	429e      	cmp	r6, r3
 8010068:	4604      	mov	r4, r0
 801006a:	460d      	mov	r5, r1
 801006c:	da0f      	bge.n	801008e <scalbn+0x4e>
 801006e:	a326      	add	r3, pc, #152	@ (adr r3, 8010108 <scalbn+0xc8>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	e01e      	b.n	80100b4 <scalbn+0x74>
 8010076:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801007a:	4291      	cmp	r1, r2
 801007c:	d10b      	bne.n	8010096 <scalbn+0x56>
 801007e:	4622      	mov	r2, r4
 8010080:	4620      	mov	r0, r4
 8010082:	4629      	mov	r1, r5
 8010084:	f7f0 f8ce 	bl	8000224 <__adddf3>
 8010088:	4604      	mov	r4, r0
 801008a:	460d      	mov	r5, r1
 801008c:	e020      	b.n	80100d0 <scalbn+0x90>
 801008e:	460b      	mov	r3, r1
 8010090:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010094:	3936      	subs	r1, #54	@ 0x36
 8010096:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801009a:	4296      	cmp	r6, r2
 801009c:	dd0d      	ble.n	80100ba <scalbn+0x7a>
 801009e:	2d00      	cmp	r5, #0
 80100a0:	a11b      	add	r1, pc, #108	@ (adr r1, 8010110 <scalbn+0xd0>)
 80100a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a6:	da02      	bge.n	80100ae <scalbn+0x6e>
 80100a8:	a11b      	add	r1, pc, #108	@ (adr r1, 8010118 <scalbn+0xd8>)
 80100aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ae:	a318      	add	r3, pc, #96	@ (adr r3, 8010110 <scalbn+0xd0>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	f7f0 fa6c 	bl	8000590 <__aeabi_dmul>
 80100b8:	e7e6      	b.n	8010088 <scalbn+0x48>
 80100ba:	1872      	adds	r2, r6, r1
 80100bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80100c0:	428a      	cmp	r2, r1
 80100c2:	dcec      	bgt.n	801009e <scalbn+0x5e>
 80100c4:	2a00      	cmp	r2, #0
 80100c6:	dd06      	ble.n	80100d6 <scalbn+0x96>
 80100c8:	f36f 531e 	bfc	r3, #20, #11
 80100cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100d0:	ec45 4b10 	vmov	d0, r4, r5
 80100d4:	bd70      	pop	{r4, r5, r6, pc}
 80100d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80100da:	da08      	bge.n	80100ee <scalbn+0xae>
 80100dc:	2d00      	cmp	r5, #0
 80100de:	a10a      	add	r1, pc, #40	@ (adr r1, 8010108 <scalbn+0xc8>)
 80100e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100e4:	dac3      	bge.n	801006e <scalbn+0x2e>
 80100e6:	a10e      	add	r1, pc, #56	@ (adr r1, 8010120 <scalbn+0xe0>)
 80100e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ec:	e7bf      	b.n	801006e <scalbn+0x2e>
 80100ee:	3236      	adds	r2, #54	@ 0x36
 80100f0:	f36f 531e 	bfc	r3, #20, #11
 80100f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100f8:	4620      	mov	r0, r4
 80100fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010130 <scalbn+0xf0>)
 80100fc:	4629      	mov	r1, r5
 80100fe:	2200      	movs	r2, #0
 8010100:	e7d8      	b.n	80100b4 <scalbn+0x74>
 8010102:	bf00      	nop
 8010104:	f3af 8000 	nop.w
 8010108:	c2f8f359 	.word	0xc2f8f359
 801010c:	01a56e1f 	.word	0x01a56e1f
 8010110:	8800759c 	.word	0x8800759c
 8010114:	7e37e43c 	.word	0x7e37e43c
 8010118:	8800759c 	.word	0x8800759c
 801011c:	fe37e43c 	.word	0xfe37e43c
 8010120:	c2f8f359 	.word	0xc2f8f359
 8010124:	81a56e1f 	.word	0x81a56e1f
 8010128:	43500000 	.word	0x43500000
 801012c:	ffff3cb0 	.word	0xffff3cb0
 8010130:	3c900000 	.word	0x3c900000

08010134 <scalbnf>:
 8010134:	ee10 3a10 	vmov	r3, s0
 8010138:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801013c:	d02b      	beq.n	8010196 <scalbnf+0x62>
 801013e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010142:	d302      	bcc.n	801014a <scalbnf+0x16>
 8010144:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010148:	4770      	bx	lr
 801014a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801014e:	d123      	bne.n	8010198 <scalbnf+0x64>
 8010150:	4b24      	ldr	r3, [pc, #144]	@ (80101e4 <scalbnf+0xb0>)
 8010152:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80101e8 <scalbnf+0xb4>
 8010156:	4298      	cmp	r0, r3
 8010158:	ee20 0a27 	vmul.f32	s0, s0, s15
 801015c:	db17      	blt.n	801018e <scalbnf+0x5a>
 801015e:	ee10 3a10 	vmov	r3, s0
 8010162:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010166:	3a19      	subs	r2, #25
 8010168:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801016c:	4288      	cmp	r0, r1
 801016e:	dd15      	ble.n	801019c <scalbnf+0x68>
 8010170:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80101ec <scalbnf+0xb8>
 8010174:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80101f0 <scalbnf+0xbc>
 8010178:	ee10 3a10 	vmov	r3, s0
 801017c:	eeb0 7a67 	vmov.f32	s14, s15
 8010180:	2b00      	cmp	r3, #0
 8010182:	bfb8      	it	lt
 8010184:	eef0 7a66 	vmovlt.f32	s15, s13
 8010188:	ee27 0a87 	vmul.f32	s0, s15, s14
 801018c:	4770      	bx	lr
 801018e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80101f4 <scalbnf+0xc0>
 8010192:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010196:	4770      	bx	lr
 8010198:	0dd2      	lsrs	r2, r2, #23
 801019a:	e7e5      	b.n	8010168 <scalbnf+0x34>
 801019c:	4410      	add	r0, r2
 801019e:	28fe      	cmp	r0, #254	@ 0xfe
 80101a0:	dce6      	bgt.n	8010170 <scalbnf+0x3c>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	dd06      	ble.n	80101b4 <scalbnf+0x80>
 80101a6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80101aa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80101ae:	ee00 3a10 	vmov	s0, r3
 80101b2:	4770      	bx	lr
 80101b4:	f110 0f16 	cmn.w	r0, #22
 80101b8:	da09      	bge.n	80101ce <scalbnf+0x9a>
 80101ba:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80101f4 <scalbnf+0xc0>
 80101be:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80101f8 <scalbnf+0xc4>
 80101c2:	ee10 3a10 	vmov	r3, s0
 80101c6:	eeb0 7a67 	vmov.f32	s14, s15
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	e7d9      	b.n	8010182 <scalbnf+0x4e>
 80101ce:	3019      	adds	r0, #25
 80101d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80101d4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80101d8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80101fc <scalbnf+0xc8>
 80101dc:	ee07 3a90 	vmov	s15, r3
 80101e0:	e7d7      	b.n	8010192 <scalbnf+0x5e>
 80101e2:	bf00      	nop
 80101e4:	ffff3cb0 	.word	0xffff3cb0
 80101e8:	4c000000 	.word	0x4c000000
 80101ec:	7149f2ca 	.word	0x7149f2ca
 80101f0:	f149f2ca 	.word	0xf149f2ca
 80101f4:	0da24260 	.word	0x0da24260
 80101f8:	8da24260 	.word	0x8da24260
 80101fc:	33000000 	.word	0x33000000

08010200 <__kernel_rem_pio2>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ed2d 8b02 	vpush	{d8}
 8010208:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801020c:	f112 0f14 	cmn.w	r2, #20
 8010210:	9306      	str	r3, [sp, #24]
 8010212:	9104      	str	r1, [sp, #16]
 8010214:	4bc2      	ldr	r3, [pc, #776]	@ (8010520 <__kernel_rem_pio2+0x320>)
 8010216:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010218:	9008      	str	r0, [sp, #32]
 801021a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	9b06      	ldr	r3, [sp, #24]
 8010222:	f103 33ff 	add.w	r3, r3, #4294967295
 8010226:	bfa8      	it	ge
 8010228:	1ed4      	subge	r4, r2, #3
 801022a:	9305      	str	r3, [sp, #20]
 801022c:	bfb2      	itee	lt
 801022e:	2400      	movlt	r4, #0
 8010230:	2318      	movge	r3, #24
 8010232:	fb94 f4f3 	sdivge	r4, r4, r3
 8010236:	f06f 0317 	mvn.w	r3, #23
 801023a:	fb04 3303 	mla	r3, r4, r3, r3
 801023e:	eb03 0b02 	add.w	fp, r3, r2
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	9a05      	ldr	r2, [sp, #20]
 8010246:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8010510 <__kernel_rem_pio2+0x310>
 801024a:	eb03 0802 	add.w	r8, r3, r2
 801024e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010250:	1aa7      	subs	r7, r4, r2
 8010252:	ae20      	add	r6, sp, #128	@ 0x80
 8010254:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010258:	2500      	movs	r5, #0
 801025a:	4545      	cmp	r5, r8
 801025c:	dd12      	ble.n	8010284 <__kernel_rem_pio2+0x84>
 801025e:	9b06      	ldr	r3, [sp, #24]
 8010260:	aa20      	add	r2, sp, #128	@ 0x80
 8010262:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010266:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801026a:	2700      	movs	r7, #0
 801026c:	9b00      	ldr	r3, [sp, #0]
 801026e:	429f      	cmp	r7, r3
 8010270:	dc2e      	bgt.n	80102d0 <__kernel_rem_pio2+0xd0>
 8010272:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8010510 <__kernel_rem_pio2+0x310>
 8010276:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801027a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801027e:	46a8      	mov	r8, r5
 8010280:	2600      	movs	r6, #0
 8010282:	e01b      	b.n	80102bc <__kernel_rem_pio2+0xbc>
 8010284:	42ef      	cmn	r7, r5
 8010286:	d407      	bmi.n	8010298 <__kernel_rem_pio2+0x98>
 8010288:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801028c:	f7f0 f916 	bl	80004bc <__aeabi_i2d>
 8010290:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010294:	3501      	adds	r5, #1
 8010296:	e7e0      	b.n	801025a <__kernel_rem_pio2+0x5a>
 8010298:	ec51 0b18 	vmov	r0, r1, d8
 801029c:	e7f8      	b.n	8010290 <__kernel_rem_pio2+0x90>
 801029e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80102a2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80102a6:	f7f0 f973 	bl	8000590 <__aeabi_dmul>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102b2:	f7ef ffb7 	bl	8000224 <__adddf3>
 80102b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102ba:	3601      	adds	r6, #1
 80102bc:	9b05      	ldr	r3, [sp, #20]
 80102be:	429e      	cmp	r6, r3
 80102c0:	dded      	ble.n	801029e <__kernel_rem_pio2+0x9e>
 80102c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102c6:	3701      	adds	r7, #1
 80102c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80102cc:	3508      	adds	r5, #8
 80102ce:	e7cd      	b.n	801026c <__kernel_rem_pio2+0x6c>
 80102d0:	9b00      	ldr	r3, [sp, #0]
 80102d2:	f8dd 8000 	ldr.w	r8, [sp]
 80102d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80102d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80102de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80102e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80102e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80102e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80102ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102ec:	ab98      	add	r3, sp, #608	@ 0x260
 80102ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80102f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80102f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80102fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80102fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010302:	46a1      	mov	r9, r4
 8010304:	46c2      	mov	sl, r8
 8010306:	f1ba 0f00 	cmp.w	sl, #0
 801030a:	dc77      	bgt.n	80103fc <__kernel_rem_pio2+0x1fc>
 801030c:	4658      	mov	r0, fp
 801030e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010312:	f7ff fe95 	bl	8010040 <scalbn>
 8010316:	ec57 6b10 	vmov	r6, r7, d0
 801031a:	2200      	movs	r2, #0
 801031c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010320:	4630      	mov	r0, r6
 8010322:	4639      	mov	r1, r7
 8010324:	f7f0 f934 	bl	8000590 <__aeabi_dmul>
 8010328:	ec41 0b10 	vmov	d0, r0, r1
 801032c:	f000 fd20 	bl	8010d70 <floor>
 8010330:	4b7c      	ldr	r3, [pc, #496]	@ (8010524 <__kernel_rem_pio2+0x324>)
 8010332:	ec51 0b10 	vmov	r0, r1, d0
 8010336:	2200      	movs	r2, #0
 8010338:	f7f0 f92a 	bl	8000590 <__aeabi_dmul>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	4630      	mov	r0, r6
 8010342:	4639      	mov	r1, r7
 8010344:	f7ef ff6c 	bl	8000220 <__aeabi_dsub>
 8010348:	460f      	mov	r7, r1
 801034a:	4606      	mov	r6, r0
 801034c:	f7f0 fbba 	bl	8000ac4 <__aeabi_d2iz>
 8010350:	9002      	str	r0, [sp, #8]
 8010352:	f7f0 f8b3 	bl	80004bc <__aeabi_i2d>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4630      	mov	r0, r6
 801035c:	4639      	mov	r1, r7
 801035e:	f7ef ff5f 	bl	8000220 <__aeabi_dsub>
 8010362:	f1bb 0f00 	cmp.w	fp, #0
 8010366:	4606      	mov	r6, r0
 8010368:	460f      	mov	r7, r1
 801036a:	dd6c      	ble.n	8010446 <__kernel_rem_pio2+0x246>
 801036c:	f108 31ff 	add.w	r1, r8, #4294967295
 8010370:	ab0c      	add	r3, sp, #48	@ 0x30
 8010372:	9d02      	ldr	r5, [sp, #8]
 8010374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010378:	f1cb 0018 	rsb	r0, fp, #24
 801037c:	fa43 f200 	asr.w	r2, r3, r0
 8010380:	4415      	add	r5, r2
 8010382:	4082      	lsls	r2, r0
 8010384:	1a9b      	subs	r3, r3, r2
 8010386:	aa0c      	add	r2, sp, #48	@ 0x30
 8010388:	9502      	str	r5, [sp, #8]
 801038a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801038e:	f1cb 0217 	rsb	r2, fp, #23
 8010392:	fa43 f902 	asr.w	r9, r3, r2
 8010396:	f1b9 0f00 	cmp.w	r9, #0
 801039a:	dd64      	ble.n	8010466 <__kernel_rem_pio2+0x266>
 801039c:	9b02      	ldr	r3, [sp, #8]
 801039e:	2200      	movs	r2, #0
 80103a0:	3301      	adds	r3, #1
 80103a2:	9302      	str	r3, [sp, #8]
 80103a4:	4615      	mov	r5, r2
 80103a6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80103aa:	4590      	cmp	r8, r2
 80103ac:	f300 80a1 	bgt.w	80104f2 <__kernel_rem_pio2+0x2f2>
 80103b0:	f1bb 0f00 	cmp.w	fp, #0
 80103b4:	dd07      	ble.n	80103c6 <__kernel_rem_pio2+0x1c6>
 80103b6:	f1bb 0f01 	cmp.w	fp, #1
 80103ba:	f000 80c1 	beq.w	8010540 <__kernel_rem_pio2+0x340>
 80103be:	f1bb 0f02 	cmp.w	fp, #2
 80103c2:	f000 80c8 	beq.w	8010556 <__kernel_rem_pio2+0x356>
 80103c6:	f1b9 0f02 	cmp.w	r9, #2
 80103ca:	d14c      	bne.n	8010466 <__kernel_rem_pio2+0x266>
 80103cc:	4632      	mov	r2, r6
 80103ce:	463b      	mov	r3, r7
 80103d0:	4955      	ldr	r1, [pc, #340]	@ (8010528 <__kernel_rem_pio2+0x328>)
 80103d2:	2000      	movs	r0, #0
 80103d4:	f7ef ff24 	bl	8000220 <__aeabi_dsub>
 80103d8:	4606      	mov	r6, r0
 80103da:	460f      	mov	r7, r1
 80103dc:	2d00      	cmp	r5, #0
 80103de:	d042      	beq.n	8010466 <__kernel_rem_pio2+0x266>
 80103e0:	4658      	mov	r0, fp
 80103e2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8010518 <__kernel_rem_pio2+0x318>
 80103e6:	f7ff fe2b 	bl	8010040 <scalbn>
 80103ea:	4630      	mov	r0, r6
 80103ec:	4639      	mov	r1, r7
 80103ee:	ec53 2b10 	vmov	r2, r3, d0
 80103f2:	f7ef ff15 	bl	8000220 <__aeabi_dsub>
 80103f6:	4606      	mov	r6, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	e034      	b.n	8010466 <__kernel_rem_pio2+0x266>
 80103fc:	4b4b      	ldr	r3, [pc, #300]	@ (801052c <__kernel_rem_pio2+0x32c>)
 80103fe:	2200      	movs	r2, #0
 8010400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010404:	f7f0 f8c4 	bl	8000590 <__aeabi_dmul>
 8010408:	f7f0 fb5c 	bl	8000ac4 <__aeabi_d2iz>
 801040c:	f7f0 f856 	bl	80004bc <__aeabi_i2d>
 8010410:	4b47      	ldr	r3, [pc, #284]	@ (8010530 <__kernel_rem_pio2+0x330>)
 8010412:	2200      	movs	r2, #0
 8010414:	4606      	mov	r6, r0
 8010416:	460f      	mov	r7, r1
 8010418:	f7f0 f8ba 	bl	8000590 <__aeabi_dmul>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010424:	f7ef fefc 	bl	8000220 <__aeabi_dsub>
 8010428:	f7f0 fb4c 	bl	8000ac4 <__aeabi_d2iz>
 801042c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010430:	f849 0b04 	str.w	r0, [r9], #4
 8010434:	4639      	mov	r1, r7
 8010436:	4630      	mov	r0, r6
 8010438:	f7ef fef4 	bl	8000224 <__adddf3>
 801043c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010444:	e75f      	b.n	8010306 <__kernel_rem_pio2+0x106>
 8010446:	d107      	bne.n	8010458 <__kernel_rem_pio2+0x258>
 8010448:	f108 33ff 	add.w	r3, r8, #4294967295
 801044c:	aa0c      	add	r2, sp, #48	@ 0x30
 801044e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010452:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010456:	e79e      	b.n	8010396 <__kernel_rem_pio2+0x196>
 8010458:	4b36      	ldr	r3, [pc, #216]	@ (8010534 <__kernel_rem_pio2+0x334>)
 801045a:	2200      	movs	r2, #0
 801045c:	f7f0 fb1e 	bl	8000a9c <__aeabi_dcmpge>
 8010460:	2800      	cmp	r0, #0
 8010462:	d143      	bne.n	80104ec <__kernel_rem_pio2+0x2ec>
 8010464:	4681      	mov	r9, r0
 8010466:	2200      	movs	r2, #0
 8010468:	2300      	movs	r3, #0
 801046a:	4630      	mov	r0, r6
 801046c:	4639      	mov	r1, r7
 801046e:	f7f0 faf7 	bl	8000a60 <__aeabi_dcmpeq>
 8010472:	2800      	cmp	r0, #0
 8010474:	f000 80c1 	beq.w	80105fa <__kernel_rem_pio2+0x3fa>
 8010478:	f108 33ff 	add.w	r3, r8, #4294967295
 801047c:	2200      	movs	r2, #0
 801047e:	9900      	ldr	r1, [sp, #0]
 8010480:	428b      	cmp	r3, r1
 8010482:	da70      	bge.n	8010566 <__kernel_rem_pio2+0x366>
 8010484:	2a00      	cmp	r2, #0
 8010486:	f000 808b 	beq.w	80105a0 <__kernel_rem_pio2+0x3a0>
 801048a:	f108 38ff 	add.w	r8, r8, #4294967295
 801048e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010490:	f1ab 0b18 	sub.w	fp, fp, #24
 8010494:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d0f6      	beq.n	801048a <__kernel_rem_pio2+0x28a>
 801049c:	4658      	mov	r0, fp
 801049e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8010518 <__kernel_rem_pio2+0x318>
 80104a2:	f7ff fdcd 	bl	8010040 <scalbn>
 80104a6:	f108 0301 	add.w	r3, r8, #1
 80104aa:	00da      	lsls	r2, r3, #3
 80104ac:	9205      	str	r2, [sp, #20]
 80104ae:	ec55 4b10 	vmov	r4, r5, d0
 80104b2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80104b4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801052c <__kernel_rem_pio2+0x32c>
 80104b8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80104bc:	4646      	mov	r6, r8
 80104be:	f04f 0a00 	mov.w	sl, #0
 80104c2:	2e00      	cmp	r6, #0
 80104c4:	f280 80d1 	bge.w	801066a <__kernel_rem_pio2+0x46a>
 80104c8:	4644      	mov	r4, r8
 80104ca:	2c00      	cmp	r4, #0
 80104cc:	f2c0 80ff 	blt.w	80106ce <__kernel_rem_pio2+0x4ce>
 80104d0:	4b19      	ldr	r3, [pc, #100]	@ (8010538 <__kernel_rem_pio2+0x338>)
 80104d2:	461f      	mov	r7, r3
 80104d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80104d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80104da:	9306      	str	r3, [sp, #24]
 80104dc:	f04f 0a00 	mov.w	sl, #0
 80104e0:	f04f 0b00 	mov.w	fp, #0
 80104e4:	2600      	movs	r6, #0
 80104e6:	eba8 0504 	sub.w	r5, r8, r4
 80104ea:	e0e4      	b.n	80106b6 <__kernel_rem_pio2+0x4b6>
 80104ec:	f04f 0902 	mov.w	r9, #2
 80104f0:	e754      	b.n	801039c <__kernel_rem_pio2+0x19c>
 80104f2:	f854 3b04 	ldr.w	r3, [r4], #4
 80104f6:	bb0d      	cbnz	r5, 801053c <__kernel_rem_pio2+0x33c>
 80104f8:	b123      	cbz	r3, 8010504 <__kernel_rem_pio2+0x304>
 80104fa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80104fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010502:	2301      	movs	r3, #1
 8010504:	3201      	adds	r2, #1
 8010506:	461d      	mov	r5, r3
 8010508:	e74f      	b.n	80103aa <__kernel_rem_pio2+0x1aa>
 801050a:	bf00      	nop
 801050c:	f3af 8000 	nop.w
	...
 801051c:	3ff00000 	.word	0x3ff00000
 8010520:	080114d0 	.word	0x080114d0
 8010524:	40200000 	.word	0x40200000
 8010528:	3ff00000 	.word	0x3ff00000
 801052c:	3e700000 	.word	0x3e700000
 8010530:	41700000 	.word	0x41700000
 8010534:	3fe00000 	.word	0x3fe00000
 8010538:	08011490 	.word	0x08011490
 801053c:	1acb      	subs	r3, r1, r3
 801053e:	e7de      	b.n	80104fe <__kernel_rem_pio2+0x2fe>
 8010540:	f108 32ff 	add.w	r2, r8, #4294967295
 8010544:	ab0c      	add	r3, sp, #48	@ 0x30
 8010546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801054a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801054e:	a90c      	add	r1, sp, #48	@ 0x30
 8010550:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010554:	e737      	b.n	80103c6 <__kernel_rem_pio2+0x1c6>
 8010556:	f108 32ff 	add.w	r2, r8, #4294967295
 801055a:	ab0c      	add	r3, sp, #48	@ 0x30
 801055c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010560:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010564:	e7f3      	b.n	801054e <__kernel_rem_pio2+0x34e>
 8010566:	a90c      	add	r1, sp, #48	@ 0x30
 8010568:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801056c:	3b01      	subs	r3, #1
 801056e:	430a      	orrs	r2, r1
 8010570:	e785      	b.n	801047e <__kernel_rem_pio2+0x27e>
 8010572:	3401      	adds	r4, #1
 8010574:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010578:	2a00      	cmp	r2, #0
 801057a:	d0fa      	beq.n	8010572 <__kernel_rem_pio2+0x372>
 801057c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801057e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010582:	eb0d 0503 	add.w	r5, sp, r3
 8010586:	9b06      	ldr	r3, [sp, #24]
 8010588:	aa20      	add	r2, sp, #128	@ 0x80
 801058a:	4443      	add	r3, r8
 801058c:	f108 0701 	add.w	r7, r8, #1
 8010590:	3d98      	subs	r5, #152	@ 0x98
 8010592:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010596:	4444      	add	r4, r8
 8010598:	42bc      	cmp	r4, r7
 801059a:	da04      	bge.n	80105a6 <__kernel_rem_pio2+0x3a6>
 801059c:	46a0      	mov	r8, r4
 801059e:	e6a2      	b.n	80102e6 <__kernel_rem_pio2+0xe6>
 80105a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105a2:	2401      	movs	r4, #1
 80105a4:	e7e6      	b.n	8010574 <__kernel_rem_pio2+0x374>
 80105a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80105ac:	f7ef ff86 	bl	80004bc <__aeabi_i2d>
 80105b0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010870 <__kernel_rem_pio2+0x670>
 80105b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80105b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105c0:	46b2      	mov	sl, r6
 80105c2:	f04f 0800 	mov.w	r8, #0
 80105c6:	9b05      	ldr	r3, [sp, #20]
 80105c8:	4598      	cmp	r8, r3
 80105ca:	dd05      	ble.n	80105d8 <__kernel_rem_pio2+0x3d8>
 80105cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105d0:	3701      	adds	r7, #1
 80105d2:	eca5 7b02 	vstmia	r5!, {d7}
 80105d6:	e7df      	b.n	8010598 <__kernel_rem_pio2+0x398>
 80105d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80105dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80105e0:	f7ef ffd6 	bl	8000590 <__aeabi_dmul>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ec:	f7ef fe1a 	bl	8000224 <__adddf3>
 80105f0:	f108 0801 	add.w	r8, r8, #1
 80105f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105f8:	e7e5      	b.n	80105c6 <__kernel_rem_pio2+0x3c6>
 80105fa:	f1cb 0000 	rsb	r0, fp, #0
 80105fe:	ec47 6b10 	vmov	d0, r6, r7
 8010602:	f7ff fd1d 	bl	8010040 <scalbn>
 8010606:	ec55 4b10 	vmov	r4, r5, d0
 801060a:	4b9b      	ldr	r3, [pc, #620]	@ (8010878 <__kernel_rem_pio2+0x678>)
 801060c:	2200      	movs	r2, #0
 801060e:	4620      	mov	r0, r4
 8010610:	4629      	mov	r1, r5
 8010612:	f7f0 fa43 	bl	8000a9c <__aeabi_dcmpge>
 8010616:	b300      	cbz	r0, 801065a <__kernel_rem_pio2+0x45a>
 8010618:	4b98      	ldr	r3, [pc, #608]	@ (801087c <__kernel_rem_pio2+0x67c>)
 801061a:	2200      	movs	r2, #0
 801061c:	4620      	mov	r0, r4
 801061e:	4629      	mov	r1, r5
 8010620:	f7ef ffb6 	bl	8000590 <__aeabi_dmul>
 8010624:	f7f0 fa4e 	bl	8000ac4 <__aeabi_d2iz>
 8010628:	4606      	mov	r6, r0
 801062a:	f7ef ff47 	bl	80004bc <__aeabi_i2d>
 801062e:	4b92      	ldr	r3, [pc, #584]	@ (8010878 <__kernel_rem_pio2+0x678>)
 8010630:	2200      	movs	r2, #0
 8010632:	f7ef ffad 	bl	8000590 <__aeabi_dmul>
 8010636:	460b      	mov	r3, r1
 8010638:	4602      	mov	r2, r0
 801063a:	4629      	mov	r1, r5
 801063c:	4620      	mov	r0, r4
 801063e:	f7ef fdef 	bl	8000220 <__aeabi_dsub>
 8010642:	f7f0 fa3f 	bl	8000ac4 <__aeabi_d2iz>
 8010646:	ab0c      	add	r3, sp, #48	@ 0x30
 8010648:	f10b 0b18 	add.w	fp, fp, #24
 801064c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010650:	f108 0801 	add.w	r8, r8, #1
 8010654:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010658:	e720      	b.n	801049c <__kernel_rem_pio2+0x29c>
 801065a:	4620      	mov	r0, r4
 801065c:	4629      	mov	r1, r5
 801065e:	f7f0 fa31 	bl	8000ac4 <__aeabi_d2iz>
 8010662:	ab0c      	add	r3, sp, #48	@ 0x30
 8010664:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010668:	e718      	b.n	801049c <__kernel_rem_pio2+0x29c>
 801066a:	ab0c      	add	r3, sp, #48	@ 0x30
 801066c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010670:	f7ef ff24 	bl	80004bc <__aeabi_i2d>
 8010674:	4622      	mov	r2, r4
 8010676:	462b      	mov	r3, r5
 8010678:	f7ef ff8a 	bl	8000590 <__aeabi_dmul>
 801067c:	4652      	mov	r2, sl
 801067e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010682:	465b      	mov	r3, fp
 8010684:	4620      	mov	r0, r4
 8010686:	4629      	mov	r1, r5
 8010688:	f7ef ff82 	bl	8000590 <__aeabi_dmul>
 801068c:	3e01      	subs	r6, #1
 801068e:	4604      	mov	r4, r0
 8010690:	460d      	mov	r5, r1
 8010692:	e716      	b.n	80104c2 <__kernel_rem_pio2+0x2c2>
 8010694:	9906      	ldr	r1, [sp, #24]
 8010696:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801069a:	9106      	str	r1, [sp, #24]
 801069c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80106a0:	f7ef ff76 	bl	8000590 <__aeabi_dmul>
 80106a4:	4602      	mov	r2, r0
 80106a6:	460b      	mov	r3, r1
 80106a8:	4650      	mov	r0, sl
 80106aa:	4659      	mov	r1, fp
 80106ac:	f7ef fdba 	bl	8000224 <__adddf3>
 80106b0:	3601      	adds	r6, #1
 80106b2:	4682      	mov	sl, r0
 80106b4:	468b      	mov	fp, r1
 80106b6:	9b00      	ldr	r3, [sp, #0]
 80106b8:	429e      	cmp	r6, r3
 80106ba:	dc01      	bgt.n	80106c0 <__kernel_rem_pio2+0x4c0>
 80106bc:	42ae      	cmp	r6, r5
 80106be:	dde9      	ble.n	8010694 <__kernel_rem_pio2+0x494>
 80106c0:	ab48      	add	r3, sp, #288	@ 0x120
 80106c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80106c6:	e9c5 ab00 	strd	sl, fp, [r5]
 80106ca:	3c01      	subs	r4, #1
 80106cc:	e6fd      	b.n	80104ca <__kernel_rem_pio2+0x2ca>
 80106ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	dc0b      	bgt.n	80106ec <__kernel_rem_pio2+0x4ec>
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	dc35      	bgt.n	8010744 <__kernel_rem_pio2+0x544>
 80106d8:	d059      	beq.n	801078e <__kernel_rem_pio2+0x58e>
 80106da:	9b02      	ldr	r3, [sp, #8]
 80106dc:	f003 0007 	and.w	r0, r3, #7
 80106e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80106e4:	ecbd 8b02 	vpop	{d8}
 80106e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80106ee:	2b03      	cmp	r3, #3
 80106f0:	d1f3      	bne.n	80106da <__kernel_rem_pio2+0x4da>
 80106f2:	9b05      	ldr	r3, [sp, #20]
 80106f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80106f8:	eb0d 0403 	add.w	r4, sp, r3
 80106fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010700:	4625      	mov	r5, r4
 8010702:	46c2      	mov	sl, r8
 8010704:	f1ba 0f00 	cmp.w	sl, #0
 8010708:	dc69      	bgt.n	80107de <__kernel_rem_pio2+0x5de>
 801070a:	4645      	mov	r5, r8
 801070c:	2d01      	cmp	r5, #1
 801070e:	f300 8087 	bgt.w	8010820 <__kernel_rem_pio2+0x620>
 8010712:	9c05      	ldr	r4, [sp, #20]
 8010714:	ab48      	add	r3, sp, #288	@ 0x120
 8010716:	441c      	add	r4, r3
 8010718:	2000      	movs	r0, #0
 801071a:	2100      	movs	r1, #0
 801071c:	f1b8 0f01 	cmp.w	r8, #1
 8010720:	f300 809c 	bgt.w	801085c <__kernel_rem_pio2+0x65c>
 8010724:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010728:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801072c:	f1b9 0f00 	cmp.w	r9, #0
 8010730:	f040 80a6 	bne.w	8010880 <__kernel_rem_pio2+0x680>
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	e9c3 5600 	strd	r5, r6, [r3]
 801073a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801073e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010742:	e7ca      	b.n	80106da <__kernel_rem_pio2+0x4da>
 8010744:	9d05      	ldr	r5, [sp, #20]
 8010746:	ab48      	add	r3, sp, #288	@ 0x120
 8010748:	441d      	add	r5, r3
 801074a:	4644      	mov	r4, r8
 801074c:	2000      	movs	r0, #0
 801074e:	2100      	movs	r1, #0
 8010750:	2c00      	cmp	r4, #0
 8010752:	da35      	bge.n	80107c0 <__kernel_rem_pio2+0x5c0>
 8010754:	f1b9 0f00 	cmp.w	r9, #0
 8010758:	d038      	beq.n	80107cc <__kernel_rem_pio2+0x5cc>
 801075a:	4602      	mov	r2, r0
 801075c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010760:	9c04      	ldr	r4, [sp, #16]
 8010762:	e9c4 2300 	strd	r2, r3, [r4]
 8010766:	4602      	mov	r2, r0
 8010768:	460b      	mov	r3, r1
 801076a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801076e:	f7ef fd57 	bl	8000220 <__aeabi_dsub>
 8010772:	ad4a      	add	r5, sp, #296	@ 0x128
 8010774:	2401      	movs	r4, #1
 8010776:	45a0      	cmp	r8, r4
 8010778:	da2b      	bge.n	80107d2 <__kernel_rem_pio2+0x5d2>
 801077a:	f1b9 0f00 	cmp.w	r9, #0
 801077e:	d002      	beq.n	8010786 <__kernel_rem_pio2+0x586>
 8010780:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010784:	4619      	mov	r1, r3
 8010786:	9b04      	ldr	r3, [sp, #16]
 8010788:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801078c:	e7a5      	b.n	80106da <__kernel_rem_pio2+0x4da>
 801078e:	9c05      	ldr	r4, [sp, #20]
 8010790:	ab48      	add	r3, sp, #288	@ 0x120
 8010792:	441c      	add	r4, r3
 8010794:	2000      	movs	r0, #0
 8010796:	2100      	movs	r1, #0
 8010798:	f1b8 0f00 	cmp.w	r8, #0
 801079c:	da09      	bge.n	80107b2 <__kernel_rem_pio2+0x5b2>
 801079e:	f1b9 0f00 	cmp.w	r9, #0
 80107a2:	d002      	beq.n	80107aa <__kernel_rem_pio2+0x5aa>
 80107a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107a8:	4619      	mov	r1, r3
 80107aa:	9b04      	ldr	r3, [sp, #16]
 80107ac:	e9c3 0100 	strd	r0, r1, [r3]
 80107b0:	e793      	b.n	80106da <__kernel_rem_pio2+0x4da>
 80107b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80107b6:	f7ef fd35 	bl	8000224 <__adddf3>
 80107ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80107be:	e7eb      	b.n	8010798 <__kernel_rem_pio2+0x598>
 80107c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80107c4:	f7ef fd2e 	bl	8000224 <__adddf3>
 80107c8:	3c01      	subs	r4, #1
 80107ca:	e7c1      	b.n	8010750 <__kernel_rem_pio2+0x550>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	e7c6      	b.n	8010760 <__kernel_rem_pio2+0x560>
 80107d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80107d6:	f7ef fd25 	bl	8000224 <__adddf3>
 80107da:	3401      	adds	r4, #1
 80107dc:	e7cb      	b.n	8010776 <__kernel_rem_pio2+0x576>
 80107de:	ed35 7b02 	vldmdb	r5!, {d7}
 80107e2:	ed8d 7b00 	vstr	d7, [sp]
 80107e6:	ed95 7b02 	vldr	d7, [r5, #8]
 80107ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107ee:	ec53 2b17 	vmov	r2, r3, d7
 80107f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107f6:	f7ef fd15 	bl	8000224 <__adddf3>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	4606      	mov	r6, r0
 8010800:	460f      	mov	r7, r1
 8010802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010806:	f7ef fd0b 	bl	8000220 <__aeabi_dsub>
 801080a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801080e:	f7ef fd09 	bl	8000224 <__adddf3>
 8010812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010816:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801081a:	e9c5 6700 	strd	r6, r7, [r5]
 801081e:	e771      	b.n	8010704 <__kernel_rem_pio2+0x504>
 8010820:	ed34 7b02 	vldmdb	r4!, {d7}
 8010824:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010828:	ec51 0b17 	vmov	r0, r1, d7
 801082c:	4652      	mov	r2, sl
 801082e:	465b      	mov	r3, fp
 8010830:	ed8d 7b00 	vstr	d7, [sp]
 8010834:	f7ef fcf6 	bl	8000224 <__adddf3>
 8010838:	4602      	mov	r2, r0
 801083a:	460b      	mov	r3, r1
 801083c:	4606      	mov	r6, r0
 801083e:	460f      	mov	r7, r1
 8010840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010844:	f7ef fcec 	bl	8000220 <__aeabi_dsub>
 8010848:	4652      	mov	r2, sl
 801084a:	465b      	mov	r3, fp
 801084c:	f7ef fcea 	bl	8000224 <__adddf3>
 8010850:	3d01      	subs	r5, #1
 8010852:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010856:	e9c4 6700 	strd	r6, r7, [r4]
 801085a:	e757      	b.n	801070c <__kernel_rem_pio2+0x50c>
 801085c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010860:	f7ef fce0 	bl	8000224 <__adddf3>
 8010864:	f108 38ff 	add.w	r8, r8, #4294967295
 8010868:	e758      	b.n	801071c <__kernel_rem_pio2+0x51c>
 801086a:	bf00      	nop
 801086c:	f3af 8000 	nop.w
	...
 8010878:	41700000 	.word	0x41700000
 801087c:	3e700000 	.word	0x3e700000
 8010880:	9b04      	ldr	r3, [sp, #16]
 8010882:	9a04      	ldr	r2, [sp, #16]
 8010884:	601d      	str	r5, [r3, #0]
 8010886:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801088a:	605c      	str	r4, [r3, #4]
 801088c:	609f      	str	r7, [r3, #8]
 801088e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8010892:	60d3      	str	r3, [r2, #12]
 8010894:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010898:	6110      	str	r0, [r2, #16]
 801089a:	6153      	str	r3, [r2, #20]
 801089c:	e71d      	b.n	80106da <__kernel_rem_pio2+0x4da>
 801089e:	bf00      	nop

080108a0 <__kernel_rem_pio2f>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	ed2d 8b04 	vpush	{d8-d9}
 80108a8:	b0d9      	sub	sp, #356	@ 0x164
 80108aa:	4690      	mov	r8, r2
 80108ac:	9001      	str	r0, [sp, #4]
 80108ae:	4ab6      	ldr	r2, [pc, #728]	@ (8010b88 <__kernel_rem_pio2f+0x2e8>)
 80108b0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80108b2:	f118 0f04 	cmn.w	r8, #4
 80108b6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80108ba:	460f      	mov	r7, r1
 80108bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80108c0:	db26      	blt.n	8010910 <__kernel_rem_pio2f+0x70>
 80108c2:	f1b8 0203 	subs.w	r2, r8, #3
 80108c6:	bf48      	it	mi
 80108c8:	f108 0204 	addmi.w	r2, r8, #4
 80108cc:	10d2      	asrs	r2, r2, #3
 80108ce:	1c55      	adds	r5, r2, #1
 80108d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80108d2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 80108d6:	00e8      	lsls	r0, r5, #3
 80108d8:	eba2 060b 	sub.w	r6, r2, fp
 80108dc:	9002      	str	r0, [sp, #8]
 80108de:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80108e2:	eb0a 0c0b 	add.w	ip, sl, fp
 80108e6:	ac1c      	add	r4, sp, #112	@ 0x70
 80108e8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80108ec:	2000      	movs	r0, #0
 80108ee:	4560      	cmp	r0, ip
 80108f0:	dd10      	ble.n	8010914 <__kernel_rem_pio2f+0x74>
 80108f2:	a91c      	add	r1, sp, #112	@ 0x70
 80108f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80108f8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80108fc:	2600      	movs	r6, #0
 80108fe:	4556      	cmp	r6, sl
 8010900:	dc24      	bgt.n	801094c <__kernel_rem_pio2f+0xac>
 8010902:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010906:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 801090a:	4684      	mov	ip, r0
 801090c:	2400      	movs	r4, #0
 801090e:	e016      	b.n	801093e <__kernel_rem_pio2f+0x9e>
 8010910:	2200      	movs	r2, #0
 8010912:	e7dc      	b.n	80108ce <__kernel_rem_pio2f+0x2e>
 8010914:	42c6      	cmn	r6, r0
 8010916:	bf5d      	ittte	pl
 8010918:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801091c:	ee07 1a90 	vmovpl	s15, r1
 8010920:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010924:	eef0 7a47 	vmovmi.f32	s15, s14
 8010928:	ece4 7a01 	vstmia	r4!, {s15}
 801092c:	3001      	adds	r0, #1
 801092e:	e7de      	b.n	80108ee <__kernel_rem_pio2f+0x4e>
 8010930:	ecfe 6a01 	vldmia	lr!, {s13}
 8010934:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010938:	eee6 7a87 	vfma.f32	s15, s13, s14
 801093c:	3401      	adds	r4, #1
 801093e:	455c      	cmp	r4, fp
 8010940:	ddf6      	ble.n	8010930 <__kernel_rem_pio2f+0x90>
 8010942:	ece9 7a01 	vstmia	r9!, {s15}
 8010946:	3601      	adds	r6, #1
 8010948:	3004      	adds	r0, #4
 801094a:	e7d8      	b.n	80108fe <__kernel_rem_pio2f+0x5e>
 801094c:	a908      	add	r1, sp, #32
 801094e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010952:	9104      	str	r1, [sp, #16]
 8010954:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010956:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8010b94 <__kernel_rem_pio2f+0x2f4>
 801095a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010b90 <__kernel_rem_pio2f+0x2f0>
 801095e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010962:	9203      	str	r2, [sp, #12]
 8010964:	4654      	mov	r4, sl
 8010966:	00a2      	lsls	r2, r4, #2
 8010968:	9205      	str	r2, [sp, #20]
 801096a:	aa58      	add	r2, sp, #352	@ 0x160
 801096c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010970:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010974:	a944      	add	r1, sp, #272	@ 0x110
 8010976:	aa08      	add	r2, sp, #32
 8010978:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801097c:	4694      	mov	ip, r2
 801097e:	4626      	mov	r6, r4
 8010980:	2e00      	cmp	r6, #0
 8010982:	dc4c      	bgt.n	8010a1e <__kernel_rem_pio2f+0x17e>
 8010984:	4628      	mov	r0, r5
 8010986:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801098a:	f7ff fbd3 	bl	8010134 <scalbnf>
 801098e:	eeb0 8a40 	vmov.f32	s16, s0
 8010992:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010996:	ee28 0a00 	vmul.f32	s0, s16, s0
 801099a:	f000 fa65 	bl	8010e68 <floorf>
 801099e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80109a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80109a6:	2d00      	cmp	r5, #0
 80109a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80109b0:	ee17 9a90 	vmov	r9, s15
 80109b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109b8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80109bc:	dd41      	ble.n	8010a42 <__kernel_rem_pio2f+0x1a2>
 80109be:	f104 3cff 	add.w	ip, r4, #4294967295
 80109c2:	a908      	add	r1, sp, #32
 80109c4:	f1c5 0e08 	rsb	lr, r5, #8
 80109c8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80109cc:	fa46 f00e 	asr.w	r0, r6, lr
 80109d0:	4481      	add	r9, r0
 80109d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80109d6:	1a36      	subs	r6, r6, r0
 80109d8:	f1c5 0007 	rsb	r0, r5, #7
 80109dc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80109e0:	4106      	asrs	r6, r0
 80109e2:	2e00      	cmp	r6, #0
 80109e4:	dd3c      	ble.n	8010a60 <__kernel_rem_pio2f+0x1c0>
 80109e6:	f04f 0e00 	mov.w	lr, #0
 80109ea:	f109 0901 	add.w	r9, r9, #1
 80109ee:	4670      	mov	r0, lr
 80109f0:	4574      	cmp	r4, lr
 80109f2:	dc68      	bgt.n	8010ac6 <__kernel_rem_pio2f+0x226>
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	dd03      	ble.n	8010a00 <__kernel_rem_pio2f+0x160>
 80109f8:	2d01      	cmp	r5, #1
 80109fa:	d074      	beq.n	8010ae6 <__kernel_rem_pio2f+0x246>
 80109fc:	2d02      	cmp	r5, #2
 80109fe:	d07d      	beq.n	8010afc <__kernel_rem_pio2f+0x25c>
 8010a00:	2e02      	cmp	r6, #2
 8010a02:	d12d      	bne.n	8010a60 <__kernel_rem_pio2f+0x1c0>
 8010a04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a08:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010a0c:	b340      	cbz	r0, 8010a60 <__kernel_rem_pio2f+0x1c0>
 8010a0e:	4628      	mov	r0, r5
 8010a10:	9306      	str	r3, [sp, #24]
 8010a12:	f7ff fb8f 	bl	8010134 <scalbnf>
 8010a16:	9b06      	ldr	r3, [sp, #24]
 8010a18:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010a1c:	e020      	b.n	8010a60 <__kernel_rem_pio2f+0x1c0>
 8010a1e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010a22:	3e01      	subs	r6, #1
 8010a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a2c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010a30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a34:	ecac 0a01 	vstmia	ip!, {s0}
 8010a38:	ed30 0a01 	vldmdb	r0!, {s0}
 8010a3c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010a40:	e79e      	b.n	8010980 <__kernel_rem_pio2f+0xe0>
 8010a42:	d105      	bne.n	8010a50 <__kernel_rem_pio2f+0x1b0>
 8010a44:	1e60      	subs	r0, r4, #1
 8010a46:	a908      	add	r1, sp, #32
 8010a48:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010a4c:	11f6      	asrs	r6, r6, #7
 8010a4e:	e7c8      	b.n	80109e2 <__kernel_rem_pio2f+0x142>
 8010a50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5c:	da31      	bge.n	8010ac2 <__kernel_rem_pio2f+0x222>
 8010a5e:	2600      	movs	r6, #0
 8010a60:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a68:	f040 8098 	bne.w	8010b9c <__kernel_rem_pio2f+0x2fc>
 8010a6c:	1e60      	subs	r0, r4, #1
 8010a6e:	2200      	movs	r2, #0
 8010a70:	4550      	cmp	r0, sl
 8010a72:	da4b      	bge.n	8010b0c <__kernel_rem_pio2f+0x26c>
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	d065      	beq.n	8010b44 <__kernel_rem_pio2f+0x2a4>
 8010a78:	3c01      	subs	r4, #1
 8010a7a:	ab08      	add	r3, sp, #32
 8010a7c:	3d08      	subs	r5, #8
 8010a7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0f8      	beq.n	8010a78 <__kernel_rem_pio2f+0x1d8>
 8010a86:	4628      	mov	r0, r5
 8010a88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a8c:	f7ff fb52 	bl	8010134 <scalbnf>
 8010a90:	1c63      	adds	r3, r4, #1
 8010a92:	aa44      	add	r2, sp, #272	@ 0x110
 8010a94:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010b94 <__kernel_rem_pio2f+0x2f4>
 8010a98:	0099      	lsls	r1, r3, #2
 8010a9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a9e:	4623      	mov	r3, r4
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f280 80a9 	bge.w	8010bf8 <__kernel_rem_pio2f+0x358>
 8010aa6:	4623      	mov	r3, r4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f2c0 80c7 	blt.w	8010c3c <__kernel_rem_pio2f+0x39c>
 8010aae:	aa44      	add	r2, sp, #272	@ 0x110
 8010ab0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010ab4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010b8c <__kernel_rem_pio2f+0x2ec>
 8010ab8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 8010abc:	2000      	movs	r0, #0
 8010abe:	1ae2      	subs	r2, r4, r3
 8010ac0:	e0b1      	b.n	8010c26 <__kernel_rem_pio2f+0x386>
 8010ac2:	2602      	movs	r6, #2
 8010ac4:	e78f      	b.n	80109e6 <__kernel_rem_pio2f+0x146>
 8010ac6:	f852 1b04 	ldr.w	r1, [r2], #4
 8010aca:	b948      	cbnz	r0, 8010ae0 <__kernel_rem_pio2f+0x240>
 8010acc:	b121      	cbz	r1, 8010ad8 <__kernel_rem_pio2f+0x238>
 8010ace:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010ad2:	f842 1c04 	str.w	r1, [r2, #-4]
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	f10e 0e01 	add.w	lr, lr, #1
 8010adc:	4608      	mov	r0, r1
 8010ade:	e787      	b.n	80109f0 <__kernel_rem_pio2f+0x150>
 8010ae0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010ae4:	e7f5      	b.n	8010ad2 <__kernel_rem_pio2f+0x232>
 8010ae6:	f104 3cff 	add.w	ip, r4, #4294967295
 8010aea:	aa08      	add	r2, sp, #32
 8010aec:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010af4:	a908      	add	r1, sp, #32
 8010af6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010afa:	e781      	b.n	8010a00 <__kernel_rem_pio2f+0x160>
 8010afc:	f104 3cff 	add.w	ip, r4, #4294967295
 8010b00:	aa08      	add	r2, sp, #32
 8010b02:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010b06:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010b0a:	e7f3      	b.n	8010af4 <__kernel_rem_pio2f+0x254>
 8010b0c:	a908      	add	r1, sp, #32
 8010b0e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010b12:	3801      	subs	r0, #1
 8010b14:	430a      	orrs	r2, r1
 8010b16:	e7ab      	b.n	8010a70 <__kernel_rem_pio2f+0x1d0>
 8010b18:	3201      	adds	r2, #1
 8010b1a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010b1e:	2e00      	cmp	r6, #0
 8010b20:	d0fa      	beq.n	8010b18 <__kernel_rem_pio2f+0x278>
 8010b22:	9905      	ldr	r1, [sp, #20]
 8010b24:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010b28:	eb0d 0001 	add.w	r0, sp, r1
 8010b2c:	18e6      	adds	r6, r4, r3
 8010b2e:	a91c      	add	r1, sp, #112	@ 0x70
 8010b30:	f104 0c01 	add.w	ip, r4, #1
 8010b34:	384c      	subs	r0, #76	@ 0x4c
 8010b36:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010b3a:	4422      	add	r2, r4
 8010b3c:	4562      	cmp	r2, ip
 8010b3e:	da04      	bge.n	8010b4a <__kernel_rem_pio2f+0x2aa>
 8010b40:	4614      	mov	r4, r2
 8010b42:	e710      	b.n	8010966 <__kernel_rem_pio2f+0xc6>
 8010b44:	9804      	ldr	r0, [sp, #16]
 8010b46:	2201      	movs	r2, #1
 8010b48:	e7e7      	b.n	8010b1a <__kernel_rem_pio2f+0x27a>
 8010b4a:	9903      	ldr	r1, [sp, #12]
 8010b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b50:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010b54:	9105      	str	r1, [sp, #20]
 8010b56:	ee07 1a90 	vmov	s15, r1
 8010b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b5e:	2400      	movs	r4, #0
 8010b60:	ece6 7a01 	vstmia	r6!, {s15}
 8010b64:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 8010b68:	46b1      	mov	r9, r6
 8010b6a:	455c      	cmp	r4, fp
 8010b6c:	dd04      	ble.n	8010b78 <__kernel_rem_pio2f+0x2d8>
 8010b6e:	ece0 7a01 	vstmia	r0!, {s15}
 8010b72:	f10c 0c01 	add.w	ip, ip, #1
 8010b76:	e7e1      	b.n	8010b3c <__kernel_rem_pio2f+0x29c>
 8010b78:	ecfe 6a01 	vldmia	lr!, {s13}
 8010b7c:	ed39 7a01 	vldmdb	r9!, {s14}
 8010b80:	3401      	adds	r4, #1
 8010b82:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b86:	e7f0      	b.n	8010b6a <__kernel_rem_pio2f+0x2ca>
 8010b88:	0801150c 	.word	0x0801150c
 8010b8c:	080114e0 	.word	0x080114e0
 8010b90:	43800000 	.word	0x43800000
 8010b94:	3b800000 	.word	0x3b800000
 8010b98:	00000000 	.word	0x00000000
 8010b9c:	9b02      	ldr	r3, [sp, #8]
 8010b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8010ba2:	eba3 0008 	sub.w	r0, r3, r8
 8010ba6:	f7ff fac5 	bl	8010134 <scalbnf>
 8010baa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010b90 <__kernel_rem_pio2f+0x2f0>
 8010bae:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb6:	db19      	blt.n	8010bec <__kernel_rem_pio2f+0x34c>
 8010bb8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010b94 <__kernel_rem_pio2f+0x2f4>
 8010bbc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010bc0:	aa08      	add	r2, sp, #32
 8010bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bc6:	3508      	adds	r5, #8
 8010bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bcc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bd8:	ee10 3a10 	vmov	r3, s0
 8010bdc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010be0:	ee17 3a90 	vmov	r3, s15
 8010be4:	3401      	adds	r4, #1
 8010be6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010bea:	e74c      	b.n	8010a86 <__kernel_rem_pio2f+0x1e6>
 8010bec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bf0:	aa08      	add	r2, sp, #32
 8010bf2:	ee10 3a10 	vmov	r3, s0
 8010bf6:	e7f6      	b.n	8010be6 <__kernel_rem_pio2f+0x346>
 8010bf8:	a808      	add	r0, sp, #32
 8010bfa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010bfe:	9001      	str	r0, [sp, #4]
 8010c00:	ee07 0a90 	vmov	s15, r0
 8010c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010c0e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010c12:	ed62 7a01 	vstmdb	r2!, {s15}
 8010c16:	e743      	b.n	8010aa0 <__kernel_rem_pio2f+0x200>
 8010c18:	ecfc 6a01 	vldmia	ip!, {s13}
 8010c1c:	ecb5 7a01 	vldmia	r5!, {s14}
 8010c20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010c24:	3001      	adds	r0, #1
 8010c26:	4550      	cmp	r0, sl
 8010c28:	dc01      	bgt.n	8010c2e <__kernel_rem_pio2f+0x38e>
 8010c2a:	4290      	cmp	r0, r2
 8010c2c:	ddf4      	ble.n	8010c18 <__kernel_rem_pio2f+0x378>
 8010c2e:	a858      	add	r0, sp, #352	@ 0x160
 8010c30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010c34:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	e735      	b.n	8010aa8 <__kernel_rem_pio2f+0x208>
 8010c3c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	dc09      	bgt.n	8010c56 <__kernel_rem_pio2f+0x3b6>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	dc27      	bgt.n	8010c96 <__kernel_rem_pio2f+0x3f6>
 8010c46:	d040      	beq.n	8010cca <__kernel_rem_pio2f+0x42a>
 8010c48:	f009 0007 	and.w	r0, r9, #7
 8010c4c:	b059      	add	sp, #356	@ 0x164
 8010c4e:	ecbd 8b04 	vpop	{d8-d9}
 8010c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c56:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c58:	2b03      	cmp	r3, #3
 8010c5a:	d1f5      	bne.n	8010c48 <__kernel_rem_pio2f+0x3a8>
 8010c5c:	aa30      	add	r2, sp, #192	@ 0xc0
 8010c5e:	1f0b      	subs	r3, r1, #4
 8010c60:	4413      	add	r3, r2
 8010c62:	461a      	mov	r2, r3
 8010c64:	4620      	mov	r0, r4
 8010c66:	2800      	cmp	r0, #0
 8010c68:	dc50      	bgt.n	8010d0c <__kernel_rem_pio2f+0x46c>
 8010c6a:	4622      	mov	r2, r4
 8010c6c:	2a01      	cmp	r2, #1
 8010c6e:	dc5d      	bgt.n	8010d2c <__kernel_rem_pio2f+0x48c>
 8010c70:	ab30      	add	r3, sp, #192	@ 0xc0
 8010c72:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 8010c76:	440b      	add	r3, r1
 8010c78:	2c01      	cmp	r4, #1
 8010c7a:	dc67      	bgt.n	8010d4c <__kernel_rem_pio2f+0x4ac>
 8010c7c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010c80:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010c84:	2e00      	cmp	r6, #0
 8010c86:	d167      	bne.n	8010d58 <__kernel_rem_pio2f+0x4b8>
 8010c88:	edc7 6a00 	vstr	s13, [r7]
 8010c8c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010c90:	edc7 7a02 	vstr	s15, [r7, #8]
 8010c94:	e7d8      	b.n	8010c48 <__kernel_rem_pio2f+0x3a8>
 8010c96:	ab30      	add	r3, sp, #192	@ 0xc0
 8010c98:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 8010c9c:	440b      	add	r3, r1
 8010c9e:	4622      	mov	r2, r4
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	da24      	bge.n	8010cee <__kernel_rem_pio2f+0x44e>
 8010ca4:	b34e      	cbz	r6, 8010cfa <__kernel_rem_pio2f+0x45a>
 8010ca6:	eef1 7a47 	vneg.f32	s15, s14
 8010caa:	edc7 7a00 	vstr	s15, [r7]
 8010cae:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cb6:	aa31      	add	r2, sp, #196	@ 0xc4
 8010cb8:	2301      	movs	r3, #1
 8010cba:	429c      	cmp	r4, r3
 8010cbc:	da20      	bge.n	8010d00 <__kernel_rem_pio2f+0x460>
 8010cbe:	b10e      	cbz	r6, 8010cc4 <__kernel_rem_pio2f+0x424>
 8010cc0:	eef1 7a67 	vneg.f32	s15, s15
 8010cc4:	edc7 7a01 	vstr	s15, [r7, #4]
 8010cc8:	e7be      	b.n	8010c48 <__kernel_rem_pio2f+0x3a8>
 8010cca:	ab30      	add	r3, sp, #192	@ 0xc0
 8010ccc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8010b98 <__kernel_rem_pio2f+0x2f8>
 8010cd0:	440b      	add	r3, r1
 8010cd2:	2c00      	cmp	r4, #0
 8010cd4:	da05      	bge.n	8010ce2 <__kernel_rem_pio2f+0x442>
 8010cd6:	b10e      	cbz	r6, 8010cdc <__kernel_rem_pio2f+0x43c>
 8010cd8:	eef1 7a67 	vneg.f32	s15, s15
 8010cdc:	edc7 7a00 	vstr	s15, [r7]
 8010ce0:	e7b2      	b.n	8010c48 <__kernel_rem_pio2f+0x3a8>
 8010ce2:	ed33 7a01 	vldmdb	r3!, {s14}
 8010ce6:	3c01      	subs	r4, #1
 8010ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cec:	e7f1      	b.n	8010cd2 <__kernel_rem_pio2f+0x432>
 8010cee:	ed73 7a01 	vldmdb	r3!, {s15}
 8010cf2:	3a01      	subs	r2, #1
 8010cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cf8:	e7d2      	b.n	8010ca0 <__kernel_rem_pio2f+0x400>
 8010cfa:	eef0 7a47 	vmov.f32	s15, s14
 8010cfe:	e7d4      	b.n	8010caa <__kernel_rem_pio2f+0x40a>
 8010d00:	ecb2 7a01 	vldmia	r2!, {s14}
 8010d04:	3301      	adds	r3, #1
 8010d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d0a:	e7d6      	b.n	8010cba <__kernel_rem_pio2f+0x41a>
 8010d0c:	ed72 7a01 	vldmdb	r2!, {s15}
 8010d10:	edd2 6a01 	vldr	s13, [r2, #4]
 8010d14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d18:	3801      	subs	r0, #1
 8010d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d1e:	ed82 7a00 	vstr	s14, [r2]
 8010d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d26:	edc2 7a01 	vstr	s15, [r2, #4]
 8010d2a:	e79c      	b.n	8010c66 <__kernel_rem_pio2f+0x3c6>
 8010d2c:	ed73 7a01 	vldmdb	r3!, {s15}
 8010d30:	edd3 6a01 	vldr	s13, [r3, #4]
 8010d34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d38:	3a01      	subs	r2, #1
 8010d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d3e:	ed83 7a00 	vstr	s14, [r3]
 8010d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d46:	edc3 7a01 	vstr	s15, [r3, #4]
 8010d4a:	e78f      	b.n	8010c6c <__kernel_rem_pio2f+0x3cc>
 8010d4c:	ed33 7a01 	vldmdb	r3!, {s14}
 8010d50:	3c01      	subs	r4, #1
 8010d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d56:	e78f      	b.n	8010c78 <__kernel_rem_pio2f+0x3d8>
 8010d58:	eef1 6a66 	vneg.f32	s13, s13
 8010d5c:	eeb1 7a47 	vneg.f32	s14, s14
 8010d60:	edc7 6a00 	vstr	s13, [r7]
 8010d64:	ed87 7a01 	vstr	s14, [r7, #4]
 8010d68:	eef1 7a67 	vneg.f32	s15, s15
 8010d6c:	e790      	b.n	8010c90 <__kernel_rem_pio2f+0x3f0>
 8010d6e:	bf00      	nop

08010d70 <floor>:
 8010d70:	ec51 0b10 	vmov	r0, r1, d0
 8010d74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010d80:	2e13      	cmp	r6, #19
 8010d82:	460c      	mov	r4, r1
 8010d84:	4605      	mov	r5, r0
 8010d86:	4680      	mov	r8, r0
 8010d88:	dc34      	bgt.n	8010df4 <floor+0x84>
 8010d8a:	2e00      	cmp	r6, #0
 8010d8c:	da17      	bge.n	8010dbe <floor+0x4e>
 8010d8e:	a332      	add	r3, pc, #200	@ (adr r3, 8010e58 <floor+0xe8>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	f7ef fa46 	bl	8000224 <__adddf3>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	f7ef fe88 	bl	8000ab0 <__aeabi_dcmpgt>
 8010da0:	b150      	cbz	r0, 8010db8 <floor+0x48>
 8010da2:	2c00      	cmp	r4, #0
 8010da4:	da55      	bge.n	8010e52 <floor+0xe2>
 8010da6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010daa:	432c      	orrs	r4, r5
 8010dac:	2500      	movs	r5, #0
 8010dae:	42ac      	cmp	r4, r5
 8010db0:	4c2b      	ldr	r4, [pc, #172]	@ (8010e60 <floor+0xf0>)
 8010db2:	bf08      	it	eq
 8010db4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010db8:	4621      	mov	r1, r4
 8010dba:	4628      	mov	r0, r5
 8010dbc:	e023      	b.n	8010e06 <floor+0x96>
 8010dbe:	4f29      	ldr	r7, [pc, #164]	@ (8010e64 <floor+0xf4>)
 8010dc0:	4137      	asrs	r7, r6
 8010dc2:	ea01 0307 	and.w	r3, r1, r7
 8010dc6:	4303      	orrs	r3, r0
 8010dc8:	d01d      	beq.n	8010e06 <floor+0x96>
 8010dca:	a323      	add	r3, pc, #140	@ (adr r3, 8010e58 <floor+0xe8>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ef fa28 	bl	8000224 <__adddf3>
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	f7ef fe6a 	bl	8000ab0 <__aeabi_dcmpgt>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d0eb      	beq.n	8010db8 <floor+0x48>
 8010de0:	2c00      	cmp	r4, #0
 8010de2:	bfbe      	ittt	lt
 8010de4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010de8:	4133      	asrlt	r3, r6
 8010dea:	18e4      	addlt	r4, r4, r3
 8010dec:	ea24 0407 	bic.w	r4, r4, r7
 8010df0:	2500      	movs	r5, #0
 8010df2:	e7e1      	b.n	8010db8 <floor+0x48>
 8010df4:	2e33      	cmp	r6, #51	@ 0x33
 8010df6:	dd0a      	ble.n	8010e0e <floor+0x9e>
 8010df8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010dfc:	d103      	bne.n	8010e06 <floor+0x96>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	460b      	mov	r3, r1
 8010e02:	f7ef fa0f 	bl	8000224 <__adddf3>
 8010e06:	ec41 0b10 	vmov	d0, r0, r1
 8010e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010e12:	f04f 37ff 	mov.w	r7, #4294967295
 8010e16:	40df      	lsrs	r7, r3
 8010e18:	4207      	tst	r7, r0
 8010e1a:	d0f4      	beq.n	8010e06 <floor+0x96>
 8010e1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e58 <floor+0xe8>)
 8010e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e22:	f7ef f9ff 	bl	8000224 <__adddf3>
 8010e26:	2200      	movs	r2, #0
 8010e28:	2300      	movs	r3, #0
 8010e2a:	f7ef fe41 	bl	8000ab0 <__aeabi_dcmpgt>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0c2      	beq.n	8010db8 <floor+0x48>
 8010e32:	2c00      	cmp	r4, #0
 8010e34:	da0a      	bge.n	8010e4c <floor+0xdc>
 8010e36:	2e14      	cmp	r6, #20
 8010e38:	d101      	bne.n	8010e3e <floor+0xce>
 8010e3a:	3401      	adds	r4, #1
 8010e3c:	e006      	b.n	8010e4c <floor+0xdc>
 8010e3e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010e42:	2301      	movs	r3, #1
 8010e44:	40b3      	lsls	r3, r6
 8010e46:	441d      	add	r5, r3
 8010e48:	4545      	cmp	r5, r8
 8010e4a:	d3f6      	bcc.n	8010e3a <floor+0xca>
 8010e4c:	ea25 0507 	bic.w	r5, r5, r7
 8010e50:	e7b2      	b.n	8010db8 <floor+0x48>
 8010e52:	2500      	movs	r5, #0
 8010e54:	462c      	mov	r4, r5
 8010e56:	e7af      	b.n	8010db8 <floor+0x48>
 8010e58:	8800759c 	.word	0x8800759c
 8010e5c:	7e37e43c 	.word	0x7e37e43c
 8010e60:	bff00000 	.word	0xbff00000
 8010e64:	000fffff 	.word	0x000fffff

08010e68 <floorf>:
 8010e68:	ee10 3a10 	vmov	r3, s0
 8010e6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010e70:	3a7f      	subs	r2, #127	@ 0x7f
 8010e72:	2a16      	cmp	r2, #22
 8010e74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010e78:	dc2b      	bgt.n	8010ed2 <floorf+0x6a>
 8010e7a:	2a00      	cmp	r2, #0
 8010e7c:	da12      	bge.n	8010ea4 <floorf+0x3c>
 8010e7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010ee4 <floorf+0x7c>
 8010e82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010e86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	dd06      	ble.n	8010e9e <floorf+0x36>
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	da24      	bge.n	8010ede <floorf+0x76>
 8010e94:	2900      	cmp	r1, #0
 8010e96:	4b14      	ldr	r3, [pc, #80]	@ (8010ee8 <floorf+0x80>)
 8010e98:	bf08      	it	eq
 8010e9a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010e9e:	ee00 3a10 	vmov	s0, r3
 8010ea2:	4770      	bx	lr
 8010ea4:	4911      	ldr	r1, [pc, #68]	@ (8010eec <floorf+0x84>)
 8010ea6:	4111      	asrs	r1, r2
 8010ea8:	420b      	tst	r3, r1
 8010eaa:	d0fa      	beq.n	8010ea2 <floorf+0x3a>
 8010eac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010ee4 <floorf+0x7c>
 8010eb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010eb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebc:	ddef      	ble.n	8010e9e <floorf+0x36>
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfbe      	ittt	lt
 8010ec2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010ec6:	fa40 f202 	asrlt.w	r2, r0, r2
 8010eca:	189b      	addlt	r3, r3, r2
 8010ecc:	ea23 0301 	bic.w	r3, r3, r1
 8010ed0:	e7e5      	b.n	8010e9e <floorf+0x36>
 8010ed2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010ed6:	d3e4      	bcc.n	8010ea2 <floorf+0x3a>
 8010ed8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010edc:	4770      	bx	lr
 8010ede:	2300      	movs	r3, #0
 8010ee0:	e7dd      	b.n	8010e9e <floorf+0x36>
 8010ee2:	bf00      	nop
 8010ee4:	7149f2ca 	.word	0x7149f2ca
 8010ee8:	bf800000 	.word	0xbf800000
 8010eec:	007fffff 	.word	0x007fffff

08010ef0 <_init>:
 8010ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef2:	bf00      	nop
 8010ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ef6:	bc08      	pop	{r3}
 8010ef8:	469e      	mov	lr, r3
 8010efa:	4770      	bx	lr

08010efc <_fini>:
 8010efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efe:	bf00      	nop
 8010f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f02:	bc08      	pop	{r3}
 8010f04:	469e      	mov	lr, r3
 8010f06:	4770      	bx	lr
