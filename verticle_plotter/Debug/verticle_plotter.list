
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08014498  08014498  00015498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014af8  08014af8  00016394  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014af8  08014af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b00  08014b00  00016394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b00  08014b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014b04  08014b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08014b08  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20000394  08014e9c  00016394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002570  08014e9c  00016570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c52b  00000000  00000000  000163c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055c1  00000000  00000000  000428ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00047eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a9  00000000  00000000  00049bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db9c  00000000  00000000  0004b269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd3c  00000000  00000000  00078e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a13f  00000000  00000000  000a4b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bec80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084bc  00000000  00000000  001becc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001c7180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014480 	.word	0x08014480

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	08014480 	.word	0x08014480

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fd8e 	bl	800bb00 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 fe77 	bl	800ace4 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe12 	bl	8001d64 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fa71 	bl	800388c <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fb6b 	bl	8003ad8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fb62 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fb4e 	bl	8003ad8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fb45 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fb33 	bl	8003ad8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fb26 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00b fa60 	bl	800c98c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fafd 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00b fa43 	bl	800c98c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fae0 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00b fa28 	bl	800c98c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fac1 	bl	8003ad8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb6e 	bl	8001d64 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f011 f80a 	bl	8012718 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 ffcd 	bl	8012718 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fa7f 	bl	8001d64 <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	ed2d 8b02 	vpush	{d8}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b4:	f7fe fe6c 	bl	8000590 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe fe5e 	bl	8000590 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f0:	f7fe ff78 	bl	80007e4 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f92a 	bl	8000b54 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001904:	ed97 7a00 	vldr	s14, [r7]
 8001908:	edd7 7a03 	vldr	s15, [r7, #12]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f918 	bl	8000b54 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb1 8a67 	vneg.f32	s16, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f90b 	bl	8000b54 <__aeabi_d2f>
 800193e:	4604      	mov	r4, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f902 	bl	8000b54 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef1 8a67 	vneg.f32	s17, s15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8f5 	bl	8000b54 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee02 3a10 	vmov	s4, r3
 8001970:	eef0 1a68 	vmov.f32	s3, s17
 8001974:	ee01 4a10 	vmov	s2, r4
 8001978:	eef0 0a48 	vmov.f32	s1, s16
 800197c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001980:	f000 f9f0 	bl	8001d64 <mapf>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ba:	b5b0      	push	{r4, r5, r7, lr}
 80019bc:	ed2d 8b02 	vpush	{d8}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ce:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fd74 	bl	80004e0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f010 fe36 	bl	8012670 <cos>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fdc0 	bl	8000590 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f89c 	bl	8000b54 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ed97 7a00 	vldr	s14, [r7]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd44 	bl	80004e0 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f868 	bl	8000b54 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f852 	bl	8000b54 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb1 8a67 	vneg.f32	s16, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f845 	bl	8000b54 <__aeabi_d2f>
 8001aca:	4604      	mov	r4, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f83c 	bl	8000b54 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef1 8a67 	vneg.f32	s17, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	ee02 3a10 	vmov	s4, r3
 8001afc:	eef0 1a68 	vmov.f32	s3, s17
 8001b00:	ee01 4a10 	vmov	s2, r4
 8001b04:	eef0 0a48 	vmov.f32	s1, s16
 8001b08:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0c:	f000 f92a 	bl	8001d64 <mapf>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	ed2d 8b02 	vpush	{d8}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
 8001b3a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <FIR_init+0x2a>
        numTaps += 1;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f010 fc7c 	bl	801245c <malloc>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 fc73 	bl	801245c <malloc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e0 	beq.w	8001d48 <FIR_init+0x224>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80db 	beq.w	8001d48 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b96:	e00a      	b.n	8001bae <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f0      	bcc.n	8001b98 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bba:	ed97 7a00 	vldr	s14, [r7]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bd2:	e077      	b.n	8001cc4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10c      	bne.n	8001bfa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
 8001bf8:	e02c      	b.n	8001c54 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <FIR_init+0x230>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f010 fe4e 	bl	80128c4 <sinf>
 8001c28:	eef0 6a40 	vmov.f32	s13, s0
 8001c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d58 <FIR_init+0x234>
 8001c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 8a00 	vldr	s16, [r3]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d54 <FIR_init+0x230>
 8001c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	f010 fdd6 	bl	801283c <cosf>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d5c <FIR_init+0x238>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d60 <FIR_init+0x23c>
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	db82      	blt.n	8001bd4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	83fb      	strh	r3, [r7, #30]
 8001cd8:	e00f      	b.n	8001cfa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3eb      	bcc.n	8001cda <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d01b      	beq.n	8001d48 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	e014      	b.n	8001d40 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	8bbb      	ldrh	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	8bba      	ldrh	r2, [r7, #28]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e6      	bcc.n	8001d16 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	ecbd 8b02 	vpop	{d8}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40c90fdb 	.word	0x40c90fdb
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	3eeb851f 	.word	0x3eeb851f
 8001d60:	3f0a3d71 	.word	0x3f0a3d71

08001d64 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d72:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d76:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d7a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	ee07 3a90 	vmov	s15, r3
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200003b0 	.word	0x200003b0

08001e14 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <modbus_3t5_Timeout+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	755a      	strb	r2, [r3, #21]

}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200003b0 	.word	0x200003b0

08001e34 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00e fcf3 	bl	8010828 <HAL_UART_GetError>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d101      	bne.n	8001e4c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e48:	f7ff ffc4 	bl	8001dd4 <modbus_1t5_Timeout>

	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e62:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <Modbus_init+0xc4>)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <Modbus_init+0xc4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <Modbus_init+0xc4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <Modbus_init+0xc4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <Modbus_init+0xc4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	7e3a      	ldrb	r2, [r7, #24]
 8001e86:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <Modbus_init+0xc8>)
 8001e96:	210e      	movs	r1, #14
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00c fee9 	bl	800ec70 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00e fc69 	bl	801077c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00e fc80 	bl	80107b4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <Modbus_init+0xcc>)
 8001eba:	2104      	movs	r1, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00d ff27 	bl	800fd10 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <Modbus_init+0xc4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <Modbus_init+0xc4>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <Modbus_init+0xc4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ed4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001ed8:	4413      	add	r3, r2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f00e f84f 	bl	800ff84 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <Modbus_init+0xc4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <Modbus_init+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00b fe93 	bl	800dc28 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <Modbus_init+0xc4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00c f8e2 	bl	800e0d4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200003b0 	.word	0x200003b0
 8001f1c:	08001e15 	.word	0x08001e15
 8001f20:	08001e35 	.word	0x08001e35

08001f24 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001f30:	23ff      	movs	r3, #255	@ 0xff
 8001f32:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001f34:	23ff      	movs	r3, #255	@ 0xff
 8001f36:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001f38:	e013      	b.n	8001f62 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	4053      	eors	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <CRC16+0x68>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	4053      	eors	r3, r2
 8001f56:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <CRC16+0x6c>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001f62:	883b      	ldrh	r3, [r7, #0]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	803a      	strh	r2, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e6      	bne.n	8001f3a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	b29b      	uxth	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000218 	.word	0x20000218
 8001f90:	20000118 	.word	0x20000118

08001f94 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	7ddb      	ldrb	r3, [r3, #23]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d80a      	bhi.n	8001fbc <Modbus_Protocal_Worker+0x28>
 8001fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fac <Modbus_Protocal_Worker+0x18>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fc7 	.word	0x08001fc7
 8001fb0:	0800215b 	.word	0x0800215b
 8001fb4:	08002053 	.word	0x08002053
 8001fb8:	08002097 	.word	0x08002097
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001fbc:	4b75      	ldr	r3, [pc, #468]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	75da      	strb	r2, [r3, #23]
		break;
 8001fc4:	e0e1      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001fc6:	4b73      	ldr	r3, [pc, #460]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001fd2:	4b70      	ldr	r3, [pc, #448]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001fda:	f000 f9cd 	bl	8002378 <Modbus_Emission>
 8001fde:	e018      	b.n	8002012 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001fea:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d00b      	beq.n	8002012 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001ffa:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002002:	4b64      	ldr	r3, [pc, #400]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800200a:	4b62      	ldr	r3, [pc, #392]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2203      	movs	r2, #3
 8002010:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002012:	4b60      	ldr	r3, [pc, #384]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201c:	2b20      	cmp	r3, #32
 800201e:	f040 80ad 	bne.w	800217c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002022:	4b5c      	ldr	r3, [pc, #368]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800202c:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002032:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b57      	ldr	r3, [pc, #348]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800203e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002042:	4413      	add	r3, r2
 8002044:	3302      	adds	r3, #2
 8002046:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800204a:	4619      	mov	r1, r3
 800204c:	f00d ff9a 	bl	800ff84 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8002050:	e094      	b.n	800217c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002052:	4b50      	ldr	r3, [pc, #320]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	7d1b      	ldrb	r3, [r3, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8091 	beq.w	8002180 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800205e:	4b4d      	ldr	r3, [pc, #308]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	22fe      	movs	r2, #254	@ 0xfe
 8002064:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002066:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8002070:	4b48      	ldr	r3, [pc, #288]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002080:	4b44      	ldr	r3, [pc, #272]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002082:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002084:	1a8a      	subs	r2, r1, r2
 8002086:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002088:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2204      	movs	r2, #4
 8002092:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002094:	e074      	b.n	8002180 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002096:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800209e:	f113 0f02 	cmn.w	r3, #2
 80020a2:	d150      	bne.n	8002146 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80020a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80020ac:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80020b4:	4b37      	ldr	r3, [pc, #220]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80020bc:	3b02      	subs	r3, #2
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7ff ff2f 	bl	8001f24 <CRC16>
 80020c6:	4603      	mov	r3, r0
 80020c8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80020ca:	793a      	ldrb	r2, [r7, #4]
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80020d8:	3b02      	subs	r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10c      	bne.n	80020fe <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80020e4:	797a      	ldrb	r2, [r7, #5]
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80020f2:	3b01      	subs	r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d004      	beq.n	8002108 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	759a      	strb	r2, [r3, #22]
				break;
 8002106:	e040      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002108:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002110:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d113      	bne.n	8002142 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800212a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002134:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002136:	461a      	mov	r2, r3
 8002138:	f010 fa8a 	bl	8012650 <memcpy>

			//execute command
			Modbus_frame_response();
 800213c:	f000 f904 	bl	8002348 <Modbus_frame_response>
 8002140:	e001      	b.n	8002146 <Modbus_Protocal_Worker+0x1b2>
				break;
 8002142:	bf00      	nop
					}
		break;


	}
}
 8002144:	e021      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	7d5b      	ldrb	r3, [r3, #21]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002150:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	75da      	strb	r2, [r3, #23]
		break;
 8002158:	e014      	b.n	8002184 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	2b20      	cmp	r3, #32
 8002166:	d10f      	bne.n	8002188 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <Modbus_Protocal_Worker+0x200>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	75da      	strb	r2, [r3, #23]
		break;
 800217a:	e005      	b.n	8002188 <Modbus_Protocal_Worker+0x1f4>
		break;
 800217c:	bf00      	nop
 800217e:	e004      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
		break;
 8002180:	bf00      	nop
 8002182:	e002      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
		break;
 8002184:	bf00      	nop
 8002186:	e000      	b.n	800218a <Modbus_Protocal_Worker+0x1f6>
		break;
 8002188:	bf00      	nop
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200003b0 	.word	0x200003b0

08002198 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	7e5b      	ldrb	r3, [r3, #25]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	7e92      	ldrb	r2, [r2, #26]
 80021ae:	4413      	add	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d903      	bls.n	80021c6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80021be:	2002      	movs	r0, #2
 80021c0:	f000 f8a0 	bl	8002304 <ModbusErrorReply>
			 return;
 80021c4:	e023      	b.n	800220e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	7ed2      	ldrb	r2, [r2, #27]
 80021d8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	440b      	add	r3, r1
 80021ea:	7f12      	ldrb	r2, [r2, #28]
 80021ec:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <modbusWrite1Register+0x7c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80021fc:	2208      	movs	r2, #8
 80021fe:	4619      	mov	r1, r3
 8002200:	f010 fa26 	bl	8012650 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <modbusWrite1Register+0x7c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2205      	movs	r2, #5
 800220a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200003b0 	.word	0x200003b0

08002218 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800221e:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <modbusRead1Register+0xe8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	7edb      	ldrb	r3, [r3, #27]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b29b      	uxth	r3, r3
 8002228:	4a35      	ldr	r2, [pc, #212]	@ (8002300 <modbusRead1Register+0xe8>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	7f12      	ldrb	r2, [r2, #28]
 800222e:	4413      	add	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002232:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <modbusRead1Register+0xe8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	7e5b      	ldrb	r3, [r3, #25]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b29b      	uxth	r3, r3
 800223c:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <modbusRead1Register+0xe8>)
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	7e92      	ldrb	r2, [r2, #26]
 8002242:	4413      	add	r3, r2
 8002244:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <modbusRead1Register+0x3a>
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002250:	d903      	bls.n	800225a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002252:	2003      	movs	r0, #3
 8002254:	f000 f856 	bl	8002304 <ModbusErrorReply>
		 return;
 8002258:	e04e      	b.n	80022f8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800225a:	88ba      	ldrh	r2, [r7, #4]
 800225c:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <modbusRead1Register+0xe8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d808      	bhi.n	8002278 <modbusRead1Register+0x60>
 8002266:	88ba      	ldrh	r2, [r7, #4]
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <modbusRead1Register+0xe8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d903      	bls.n	8002280 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002278:	2002      	movs	r0, #2
 800227a:	f000 f843 	bl	8002304 <ModbusErrorReply>
		 return;
 800227e:	e03b      	b.n	80022f8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <modbusRead1Register+0xe8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <modbusRead1Register+0xe8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800229a:	2400      	movs	r4, #0
 800229c:	e020      	b.n	80022e0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <modbusRead1Register+0xe8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	4423      	add	r3, r4
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	18d1      	adds	r1, r2, r3
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <modbusRead1Register+0xe8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	1c63      	adds	r3, r4, #1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	7849      	ldrb	r1, [r1, #1]
 80022b6:	4413      	add	r3, r2
 80022b8:	460a      	mov	r2, r1
 80022ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <modbusRead1Register+0xe8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	88bb      	ldrh	r3, [r7, #4]
 80022c6:	4423      	add	r3, r4
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	18d1      	adds	r1, r2, r3
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <modbusRead1Register+0xe8>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	0063      	lsls	r3, r4, #1
 80022d2:	3303      	adds	r3, #3
 80022d4:	7809      	ldrb	r1, [r1, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	460a      	mov	r2, r1
 80022da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80022de:	3401      	adds	r4, #1
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	429c      	cmp	r4, r3
 80022e4:	dbdb      	blt.n	800229e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	3301      	adds	r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <modbusRead1Register+0xe8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0052      	lsls	r2, r2, #1
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	200003b0 	.word	0x200003b0

08002304 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <ModbusErrorReply+0x40>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	7e1a      	ldrb	r2, [r3, #24]
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <ModbusErrorReply+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <ModbusErrorReply+0x40>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	79fa      	ldrb	r2, [r7, #7]
 8002328:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <ModbusErrorReply+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200003b0 	.word	0x200003b0

08002348 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <Modbus_frame_response+0x2c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	7e1b      	ldrb	r3, [r3, #24]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d004      	beq.n	8002360 <Modbus_frame_response+0x18>
 8002356:	2b06      	cmp	r3, #6
 8002358:	d105      	bne.n	8002366 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800235a:	f7ff ff1d 	bl	8002198 <modbusWrite1Register>
		break;
 800235e:	e006      	b.n	800236e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002360:	f7ff ff5a 	bl	8002218 <modbusRead1Register>
		break;
 8002364:	e003      	b.n	800236e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff ffcc 	bl	8002304 <ModbusErrorReply>
		break;
 800236c:	bf00      	nop

	}
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003b0 	.word	0x200003b0

08002378 <Modbus_Emission>:

void Modbus_Emission()
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800237e:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <Modbus_Emission+0xe8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	2b20      	cmp	r3, #32
 800238a:	d15d      	bne.n	8002448 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <Modbus_Emission+0xe8>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <Modbus_Emission+0xe8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800239a:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <Modbus_Emission+0xe8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80023a2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80023a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002460 <Modbus_Emission+0xe8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80023ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <Modbus_Emission+0xe8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80023b4:	461a      	mov	r2, r3
 80023b6:	f010 f94b 	bl	8012650 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80023ba:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <Modbus_Emission+0xe8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <Modbus_Emission+0xe8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3203      	adds	r2, #3
 80023ca:	b292      	uxth	r2, r2
 80023cc:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80023d0:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <Modbus_Emission+0xe8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <Modbus_Emission+0xe8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80023e0:	3b02      	subs	r3, #2
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff fd9d 	bl	8001f24 <CRC16>
 80023ea:	4603      	mov	r3, r0
 80023ec:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80023ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002460 <Modbus_Emission+0xe8>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <Modbus_Emission+0xe8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80023fa:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80023fc:	7939      	ldrb	r1, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	460a      	mov	r2, r1
 8002402:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <Modbus_Emission+0xe8>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <Modbus_Emission+0xe8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002412:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002414:	7979      	ldrb	r1, [r7, #5]
 8002416:	4413      	add	r3, r2
 8002418:	460a      	mov	r2, r1
 800241a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <Modbus_Emission+0xe8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002428:	2b20      	cmp	r3, #32
 800242a:	d10d      	bne.n	8002448 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <Modbus_Emission+0xe8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <Modbus_Emission+0xe8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <Modbus_Emission+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800243e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002442:	461a      	mov	r2, r3
 8002444:	f00d fd1e 	bl	800fe84 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <Modbus_Emission+0xe8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <Modbus_Emission+0xe8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	755a      	strb	r2, [r3, #21]

}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200003b0 	.word	0x200003b0

08002464 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	@ 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6278      	str	r0, [r7, #36]	@ 0x24
 800246c:	ed87 0a08 	vstr	s0, [r7, #32]
 8002470:	edc7 0a07 	vstr	s1, [r7, #28]
 8002474:	ed87 1a06 	vstr	s2, [r7, #24]
 8002478:	edc7 1a05 	vstr	s3, [r7, #20]
 800247c:	ed87 2a04 	vstr	s4, [r7, #16]
 8002480:	edc7 2a03 	vstr	s5, [r7, #12]
 8002484:	ed87 3a02 	vstr	s6, [r7, #8]
 8002488:	edc7 3a01 	vstr	s7, [r7, #4]
 800248c:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	6a3a      	ldr	r2, [r7, #32]
 8002494:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	2210      	movs	r2, #16
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f010 f87a 	bl	80125c8 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	3310      	adds	r3, #16
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f010 f873 	bl	80125c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e6:	e00c      	b.n	8002502 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80024e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f2:	3304      	adds	r3, #4
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	4a79      	ldr	r2, [pc, #484]	@ (80026e0 <MotorKalman_Init+0x27c>)
 80024fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fe:	3301      	adds	r3, #1
 8002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	2b03      	cmp	r3, #3
 8002506:	ddef      	ble.n	80024e8 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f010 f858 	bl	80125c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251c:	e00d      	b.n	800253a <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800251e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002528:	33be      	adds	r3, #190	@ 0xbe
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002532:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	3301      	adds	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	2b03      	cmp	r3, #3
 800253e:	ddee      	ble.n	800251e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	33f0      	adds	r3, #240	@ 0xf0
 8002544:	2210      	movs	r2, #16
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f010 f83d 	bl	80125c8 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002554:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800255e:	2210      	movs	r2, #16
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f010 f830 	bl	80125c8 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800256e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002572:	ed97 0a01 	vldr	s0, [r7, #4]
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f000 f922 	bl	80027c0 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 800257c:	ed97 0a00 	vldr	s0, [r7]
 8002580:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002582:	f000 f94d 	bl	8002820 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	2201      	movs	r2, #1
 8002590:	2104      	movs	r1, #4
 8002592:	f00f faa8 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	3310      	adds	r3, #16
 80025a0:	2204      	movs	r2, #4
 80025a2:	2104      	movs	r1, #4
 80025a4:	f00f fa9f 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80025b4:	2204      	movs	r2, #4
 80025b6:	2104      	movs	r1, #4
 80025b8:	f00f fa95 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80025c8:	2201      	movs	r2, #1
 80025ca:	2101      	movs	r1, #1
 80025cc:	f00f fa8b 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80025dc:	2201      	movs	r2, #1
 80025de:	2101      	movs	r1, #1
 80025e0:	f00f fa81 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80025f0:	2201      	movs	r2, #1
 80025f2:	2101      	movs	r1, #1
 80025f4:	f00f fa77 	bl	8011ae6 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002604:	2204      	movs	r2, #4
 8002606:	2104      	movs	r1, #4
 8002608:	f00f fa6d 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002618:	2201      	movs	r2, #1
 800261a:	2104      	movs	r1, #4
 800261c:	f00f fa63 	bl	8011ae6 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800262c:	2201      	movs	r2, #1
 800262e:	2104      	movs	r1, #4
 8002630:	f00f fa59 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002640:	2204      	movs	r2, #4
 8002642:	2104      	movs	r1, #4
 8002644:	f00f fa4f 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002654:	2204      	movs	r2, #4
 8002656:	2101      	movs	r1, #1
 8002658:	f00f fa45 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002668:	2201      	movs	r2, #1
 800266a:	2101      	movs	r1, #1
 800266c:	f00f fa3b 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800267c:	2201      	movs	r2, #1
 800267e:	2104      	movs	r1, #4
 8002680:	f00f fa31 	bl	8011ae6 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002686:	f000 f82d 	bl	80026e4 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	3390      	adds	r3, #144	@ 0x90
 8002694:	2204      	movs	r2, #4
 8002696:	2104      	movs	r1, #4
 8002698:	f00f fa25 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	33e0      	adds	r3, #224	@ 0xe0
 80026a6:	2201      	movs	r2, #1
 80026a8:	2104      	movs	r1, #4
 80026aa:	f00f fa1c 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ba:	2204      	movs	r2, #4
 80026bc:	2104      	movs	r1, #4
 80026be:	f00f fa12 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80026ce:	2201      	movs	r2, #1
 80026d0:	2104      	movs	r1, #4
 80026d2:	f00f fa08 	bl	8011ae6 <arm_mat_init_f32>
}
 80026d6:	bf00      	nop
 80026d8:	3730      	adds	r7, #48	@ 0x30
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	42c80000 	.word	0x42c80000

080026e4 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	eeb0 3a64 	vmov.f32	s6, s9
 8002728:	eef0 2a45 	vmov.f32	s5, s10
 800272c:	eeb0 2a65 	vmov.f32	s4, s11
 8002730:	eef0 1a46 	vmov.f32	s3, s12
 8002734:	eeb0 1a66 	vmov.f32	s2, s13
 8002738:	eef0 0a47 	vmov.f32	s1, s14
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f001 f83c 	bl	80037bc <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f00f ff3a 	bl	80125c8 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800275a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80027b8 <MotorKalman_DiscretizeModel+0xd4>
 800275e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800278e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80027bc <MotorKalman_DiscretizeModel+0xd8>
 8002792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80027a2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80027b8 <MotorKalman_DiscretizeModel+0xd4>
 80027a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	3c23d70a 	.word	0x3c23d70a
 80027bc:	3dcccccd 	.word	0x3dcccccd

080027c0 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00f fef6 	bl	80125c8 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80027dc:	edd7 7a00 	vldr	s15, [r7]
 80027e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80027f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002800:	d107      	bne.n	8002812 <MotorKalman_SetProcessNoise+0x52>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002808:	eef5 7a40 	vcmp.f32	s15, #0.0
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d002      	beq.n	8002818 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ff66 	bl	80026e4 <MotorKalman_DiscretizeModel>
    }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 800282c:	ed97 0a00 	vldr	s0, [r7]
 8002830:	f00f ffe6 	bl	8012800 <sqrtf>
 8002834:	eef0 7a40 	vmov.f32	s15, s0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b0b2      	sub	sp, #200	@ 0xc8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002862:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002876:	e041      	b.n	80028fc <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	33c8      	adds	r3, #200	@ 0xc8
 8002880:	443b      	add	r3, r7
 8002882:	3b3c      	subs	r3, #60	@ 0x3c
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002890:	e02b      	b.n	80028ea <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	33c8      	adds	r3, #200	@ 0xc8
 800289a:	443b      	add	r3, r7
 800289c:	3b3c      	subs	r3, #60	@ 0x3c
 800289e:	ed93 7a00 	vldr	s14, [r3]
 80028a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ac:	4413      	add	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	3324      	adds	r3, #36	@ 0x24
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	33c8      	adds	r3, #200	@ 0xc8
 80028d8:	443b      	add	r3, r7
 80028da:	3b3c      	subs	r3, #60	@ 0x3c
 80028dc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e4:	3301      	adds	r3, #1
 80028e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	ddcf      	ble.n	8002892 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f6:	3301      	adds	r3, #1
 80028f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002900:	2b03      	cmp	r3, #3
 8002902:	ddb9      	ble.n	8002878 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800290a:	e021      	b.n	8002950 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 800290c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	33c8      	adds	r3, #200	@ 0xc8
 8002914:	443b      	add	r3, r7
 8002916:	3b3c      	subs	r3, #60	@ 0x3c
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002922:	3338      	adds	r3, #56	@ 0x38
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	edd3 6a00 	vldr	s13, [r3]
 800292c:	edd7 7a00 	vldr	s15, [r7]
 8002930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800294a:	3301      	adds	r3, #1
 800294c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002954:	2b03      	cmp	r3, #3
 8002956:	ddd9      	ble.n	800290c <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002958:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f00f fe31 	bl	80125c8 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2240      	movs	r2, #64	@ 0x40
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f00f fe2a 	bl	80125c8 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800297a:	e05f      	b.n	8002a3c <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002982:	e052      	b.n	8002a2a <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	33c8      	adds	r3, #200	@ 0xc8
 8002994:	443b      	add	r3, r7
 8002996:	3b7c      	subs	r3, #124	@ 0x7c
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029a4:	e038      	b.n	8002a18 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80029a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	33c8      	adds	r3, #200	@ 0xc8
 80029b6:	443b      	add	r3, r7
 80029b8:	3b7c      	subs	r3, #124	@ 0x7c
 80029ba:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 80029be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029c8:	4413      	add	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	3324      	adds	r3, #36	@ 0x24
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	edd3 6a00 	vldr	s13, [r3]
 80029d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029da:	009a      	lsls	r2, r3, #2
 80029dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029e0:	4413      	add	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80029f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029f6:	009a      	lsls	r2, r3, #2
 80029f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029fc:	4413      	add	r3, r2
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	33c8      	adds	r3, #200	@ 0xc8
 8002a06:	443b      	add	r3, r7
 8002a08:	3b7c      	subs	r3, #124	@ 0x7c
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a12:	3301      	adds	r3, #1
 8002a14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	ddc2      	ble.n	80029a6 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a24:	3301      	adds	r3, #1
 8002a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	dda8      	ble.n	8002984 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a36:	3301      	adds	r3, #1
 8002a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	dd9b      	ble.n	800297c <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a4a:	e05f      	b.n	8002b0c <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a52:	e052      	b.n	8002afa <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	33c8      	adds	r3, #200	@ 0xc8
 8002a64:	443b      	add	r3, r7
 8002a66:	3bbc      	subs	r3, #188	@ 0xbc
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002a74:	e038      	b.n	8002ae8 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	33c8      	adds	r3, #200	@ 0xc8
 8002a86:	443b      	add	r3, r7
 8002a88:	3bbc      	subs	r3, #188	@ 0xbc
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a92:	009a      	lsls	r2, r3, #2
 8002a94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	33c8      	adds	r3, #200	@ 0xc8
 8002a9e:	443b      	add	r3, r7
 8002aa0:	3b7c      	subs	r3, #124	@ 0x7c
 8002aa2:	edd3 6a00 	vldr	s13, [r3]
 8002aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	3324      	adds	r3, #36	@ 0x24
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002acc:	4413      	add	r3, r2
 8002ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	33c8      	adds	r3, #200	@ 0xc8
 8002ad6:	443b      	add	r3, r7
 8002ad8:	3bbc      	subs	r3, #188	@ 0xbc
 8002ada:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	ddc2      	ble.n	8002a76 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002af4:	3301      	adds	r3, #1
 8002af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	dda8      	ble.n	8002a54 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	dd9b      	ble.n	8002a4c <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b1a:	e037      	b.n	8002b8c <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b22:	e02a      	b.n	8002b7a <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b28:	009a      	lsls	r2, r3, #2
 8002b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	33c8      	adds	r3, #200	@ 0xc8
 8002b34:	443b      	add	r3, r7
 8002b36:	3bbc      	subs	r3, #188	@ 0xbc
 8002b38:	ed93 7a00 	vldr	s14, [r3]
 8002b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b46:	4413      	add	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	3354      	adds	r3, #84	@ 0x54
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002b54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b5e:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b74:	3301      	adds	r3, #1
 8002b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	ddd0      	ble.n	8002b24 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b86:	3301      	adds	r3, #1
 8002b88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	ddc3      	ble.n	8002b1c <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	f00e ff8d 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	2104      	movs	r1, #4
 8002bda:	f00e ff84 	bl	8011ae6 <arm_mat_init_f32>
}
 8002bde:	bf00      	nop
 8002be0:	37c8      	adds	r7, #200	@ 0xc8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0d0      	sub	sp, #320	@ 0x140
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bf2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bf6:	6018      	str	r0, [r3, #0]
 8002bf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bfc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c00:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002c04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c12:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002c1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002c2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002c4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c4e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002c60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002c6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002c80:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002c84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002c92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002cac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc0:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002cc4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002cd8:	e04d      	b.n	8002d76 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002cda:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ce4:	443b      	add	r3, r7
 8002ce6:	3b58      	subs	r3, #88	@ 0x58
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002cf4:	e036      	b.n	8002d64 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002cf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d00:	443b      	add	r3, r7
 8002d02:	3b58      	subs	r3, #88	@ 0x58
 8002d04:	ed93 7a00 	vldr	s14, [r3]
 8002d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d16:	333c      	adds	r3, #60	@ 0x3c
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	edd3 6a00 	vldr	s13, [r3]
 8002d20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d24:	009a      	lsls	r2, r3, #2
 8002d26:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d30:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	3304      	adds	r3, #4
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d52:	443b      	add	r3, r7
 8002d54:	3b58      	subs	r3, #88	@ 0x58
 8002d56:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002d5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002d64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	ddc4      	ble.n	8002cf6 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d70:	3301      	adds	r3, #1
 8002d72:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d76:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	ddad      	ble.n	8002cda <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002d8c:	e021      	b.n	8002dd2 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d98:	443b      	add	r3, r7
 8002d9a:	3b58      	subs	r3, #88	@ 0x58
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002da4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dae:	333c      	adds	r3, #60	@ 0x3c
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc4:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002dc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	ddd9      	ble.n	8002d8e <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002dda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dde:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002de8:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002df4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002e08:	e04d      	b.n	8002ea6 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e14:	443b      	add	r3, r7
 8002e16:	3b68      	subs	r3, #104	@ 0x68
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e24:	e036      	b.n	8002e94 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e30:	443b      	add	r3, r7
 8002e32:	3b68      	subs	r3, #104	@ 0x68
 8002e34:	ed93 7a00 	vldr	s14, [r3]
 8002e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e42:	4413      	add	r3, r2
 8002e44:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002e48:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	edd3 6a00 	vldr	s13, [r3]
 8002e58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e66:	333c      	adds	r3, #60	@ 0x3c
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e82:	443b      	add	r3, r7
 8002e84:	3b68      	subs	r3, #104	@ 0x68
 8002e86:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	ddc4      	ble.n	8002e26 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	ddad      	ble.n	8002e0a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002eae:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ec2:	e01a      	b.n	8002efa <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ece:	443b      	add	r3, r7
 8002ed0:	3b68      	subs	r3, #104	@ 0x68
 8002ed2:	edd3 6a00 	vldr	s13, [r3]
 8002ed6:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ede:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ee8:	443b      	add	r3, r7
 8002eea:	3b78      	subs	r3, #120	@ 0x78
 8002eec:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ef0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002efa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	dde0      	ble.n	8002ec4 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f08:	e029      	b.n	8002f5e <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002f0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f2a:	443b      	add	r3, r7
 8002f2c:	3b78      	subs	r3, #120	@ 0x78
 8002f2e:	edd3 6a00 	vldr	s13, [r3]
 8002f32:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	ddd1      	ble.n	8002f0a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002f66:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002f6a:	2240      	movs	r2, #64	@ 0x40
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00f fb2a 	bl	80125c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f7a:	e035      	b.n	8002fe8 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002f82:	e028      	b.n	8002fd6 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f8e:	443b      	add	r3, r7
 8002f90:	3b78      	subs	r3, #120	@ 0x78
 8002f92:	ed93 7a00 	vldr	s14, [r3]
 8002f96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fa4:	333c      	adds	r3, #60	@ 0x3c
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fb8:	4413      	add	r3, r2
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fc4:	443b      	add	r3, r7
 8002fc6:	3bb8      	subs	r3, #184	@ 0xb8
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002fcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002fd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	ddd2      	ble.n	8002f84 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	ddc5      	ble.n	8002f7c <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ff0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ff4:	2240      	movs	r2, #64	@ 0x40
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00f fae5 	bl	80125c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003004:	e038      	b.n	8003078 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800300c:	e02b      	b.n	8003066 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 800300e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003012:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003016:	429a      	cmp	r2, r3
 8003018:	d102      	bne.n	8003020 <MotorKalman_Update+0x438>
 800301a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800301e:	e001      	b.n	8003024 <MotorKalman_Update+0x43c>
 8003020:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800323c <MotorKalman_Update+0x654>
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	009a      	lsls	r2, r3, #2
 800302a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003036:	443b      	add	r3, r7
 8003038:	3bb8      	subs	r3, #184	@ 0xb8
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003042:	009a      	lsls	r2, r3, #2
 8003044:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003048:	4413      	add	r3, r2
 800304a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003054:	443b      	add	r3, r7
 8003056:	3bf8      	subs	r3, #248	@ 0xf8
 8003058:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800305c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003060:	3301      	adds	r3, #1
 8003062:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003066:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800306a:	2b03      	cmp	r3, #3
 800306c:	ddcf      	ble.n	800300e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003072:	3301      	adds	r3, #1
 8003074:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	2b03      	cmp	r3, #3
 800307e:	ddc2      	ble.n	8003006 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8003080:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003084:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f103 0110 	add.w	r1, r3, #16
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	2240      	movs	r2, #64	@ 0x40
 8003094:	4618      	mov	r0, r3
 8003096:	f00f fadb 	bl	8012650 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80030a0:	e06e      	b.n	8003180 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80030a8:	e061      	b.n	800316e <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80030aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030ae:	009a      	lsls	r2, r3, #2
 80030b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030b4:	4413      	add	r3, r2
 80030b6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80030ba:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030d2:	e043      	b.n	800315c <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030d8:	009a      	lsls	r2, r3, #2
 80030da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030de:	4413      	add	r3, r2
 80030e0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80030e4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	3304      	adds	r3, #4
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80030f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030f8:	009a      	lsls	r2, r3, #2
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003106:	443b      	add	r3, r7
 8003108:	3bf8      	subs	r3, #248	@ 0xf8
 800310a:	edd3 6a00 	vldr	s13, [r3]
 800310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003118:	4413      	add	r3, r2
 800311a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800311e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003138:	4413      	add	r3, r2
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003142:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003156:	3301      	adds	r3, #1
 8003158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800315c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003160:	2b03      	cmp	r3, #3
 8003162:	ddb7      	ble.n	80030d4 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003164:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003168:	3301      	adds	r3, #1
 800316a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800316e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003172:	2b03      	cmp	r3, #3
 8003174:	dd99      	ble.n	80030aa <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800317a:	3301      	adds	r3, #1
 800317c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003184:	2b03      	cmp	r3, #3
 8003186:	dd8c      	ble.n	80030a2 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8003188:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800318c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003198:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80031a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80031bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80031d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80031f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80031fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003202:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	2104      	movs	r1, #4
 800320c:	f00e fc6b 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8003210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003214:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800321e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003222:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3310      	adds	r3, #16
 800322a:	2204      	movs	r2, #4
 800322c:	2104      	movs	r1, #4
 800322e:	f00e fc5a 	bl	8011ae6 <arm_mat_init_f32>
}
 8003232:	bf00      	nop
 8003234:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00000000 	.word	0x00000000

08003240 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	ed87 0a02 	vstr	s0, [r7, #8]
 800324c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8003250:	ed97 0a02 	vldr	s0, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff fafa 	bl	800284e <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800325a:	ed97 0a01 	vldr	s0, [r7, #4]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fcc2 	bl	8002be8 <MotorKalman_Update>

    return filter->velocity;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800326a:	ee07 3a90 	vmov	s15, r3
}
 800326e:	eeb0 0a67 	vmov.f32	s0, s15
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e00c      	b.n	80032a4 <matrix_copy+0x2c>
        dst[i] = src[i];
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	441a      	add	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	440b      	add	r3, r1
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dbee      	blt.n	800328a <matrix_copy+0x12>
    }
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80032c8:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80032cc:	6020      	str	r0, [r4, #0]
 80032ce:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80032d2:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 80032d6:	6001      	str	r1, [r0, #0]
 80032d8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80032dc:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 80032e0:	ed81 0a00 	vstr	s0, [r1]
 80032e4:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80032e8:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80032ec:	600a      	str	r2, [r1, #0]
 80032ee:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80032f2:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80032f6:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80032f8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032fc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8003300:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2204      	movs	r2, #4
 8003308:	2104      	movs	r1, #4
 800330a:	f00e fbec 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 800330e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003312:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003316:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2204      	movs	r2, #4
 800331e:	2104      	movs	r1, #4
 8003320:	f00e fbe1 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8003324:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003328:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800332c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2201      	movs	r2, #1
 8003334:	2104      	movs	r1, #4
 8003336:	f00e fbd6 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800333a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800333e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003342:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	2104      	movs	r1, #4
 800334c:	f00e fbcb 	bl	8011ae6 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8003350:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003354:	2240      	movs	r2, #64	@ 0x40
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f00f f935 	bl	80125c8 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800335e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003362:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8003366:	2204      	movs	r2, #4
 8003368:	2104      	movs	r1, #4
 800336a:	f00e fbbc 	bl	8011ae6 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003374:	e011      	b.n	800339a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8003376:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8003386:	443b      	add	r3, r7
 8003388:	3b6c      	subs	r3, #108	@ 0x6c
 800338a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800338e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8003390:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003394:	3301      	adds	r3, #1
 8003396:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800339a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800339e:	2b03      	cmp	r3, #3
 80033a0:	dde9      	ble.n	8003376 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80033a2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80033a6:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80033aa:	2204      	movs	r2, #4
 80033ac:	2104      	movs	r1, #4
 80033ae:	f00e fb9a 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80033b2:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80033b6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033ba:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80033be:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80033c2:	ed93 0a00 	vldr	s0, [r3]
 80033c6:	4610      	mov	r0, r2
 80033c8:	f00e ff96 	bl	80122f8 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80033cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033d0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80033d4:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80033d8:	2210      	movs	r2, #16
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	f7ff ff4c 	bl	8003278 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 80033e0:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80033e4:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80033e8:	2204      	movs	r2, #4
 80033ea:	2104      	movs	r1, #4
 80033ec:	f00e fb7b 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80033f0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80033f4:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80033f8:	2204      	movs	r2, #4
 80033fa:	2104      	movs	r1, #4
 80033fc:	f00e fb73 	bl	8011ae6 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8003400:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003404:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003408:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800340c:	4618      	mov	r0, r3
 800340e:	f00e fb2f 	bl	8011a70 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8003412:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003416:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800341a:	2210      	movs	r2, #16
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff2b 	bl	8003278 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8003422:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003426:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800342a:	2302      	movs	r3, #2
 800342c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003430:	e03a      	b.n	80034a8 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8003432:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343e:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800344a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800344e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003452:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003456:	4618      	mov	r0, r3
 8003458:	f00e fed4 	bl	8012204 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 800345c:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003460:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003464:	2210      	movs	r2, #16
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff06 	bl	8003278 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 800346c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003470:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003478:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800347c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003480:	4611      	mov	r1, r2
 8003482:	eeb0 0a47 	vmov.f32	s0, s14
 8003486:	4618      	mov	r0, r3
 8003488:	f00e ff36 	bl	80122f8 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 800348c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003490:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003494:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003498:	4618      	mov	r0, r3
 800349a:	f00e fae9 	bl	8011a70 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800349e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034a2:	3301      	adds	r3, #1
 80034a4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80034a8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034ac:	2b0a      	cmp	r3, #10
 80034ae:	ddc0      	ble.n	8003432 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80034b0:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80034b4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034b8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034bc:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80034c0:	ed93 0a00 	vldr	s0, [r3]
 80034c4:	4610      	mov	r0, r2
 80034c6:	f00e ff17 	bl	80122f8 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80034ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034ce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80034d2:	461a      	mov	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	6053      	str	r3, [r2, #4]
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80034de:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80034e2:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80034e6:	2201      	movs	r2, #1
 80034e8:	2104      	movs	r1, #4
 80034ea:	f00e fafc 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80034ee:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80034f2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80034f6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80034fa:	4618      	mov	r0, r3
 80034fc:	f00e fe82 	bl	8012204 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003500:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003504:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8003508:	2201      	movs	r2, #1
 800350a:	2104      	movs	r1, #4
 800350c:	f00e faeb 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003510:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003514:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003520:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003524:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003528:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800352c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003530:	4611      	mov	r1, r2
 8003532:	eeb0 0a47 	vmov.f32	s0, s14
 8003536:	4618      	mov	r0, r3
 8003538:	f00e fede 	bl	80122f8 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800353c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003540:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003544:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003548:	4618      	mov	r0, r3
 800354a:	f00e fa91 	bl	8011a70 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800354e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003552:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003556:	4618      	mov	r0, r3
 8003558:	2340      	movs	r3, #64	@ 0x40
 800355a:	461a      	mov	r2, r3
 800355c:	2100      	movs	r1, #0
 800355e:	f00f f833 	bl	80125c8 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003562:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003566:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800356a:	2204      	movs	r2, #4
 800356c:	2104      	movs	r1, #4
 800356e:	f00e faba 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003572:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003576:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800357a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800357e:	4618      	mov	r0, r3
 8003580:	f00e fe40 	bl	8012204 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003584:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003588:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800358c:	461a      	mov	r2, r3
 800358e:	2300      	movs	r3, #0
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	6053      	str	r3, [r2, #4]
 8003594:	6093      	str	r3, [r2, #8]
 8003596:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003598:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800359c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80035a0:	2201      	movs	r2, #1
 80035a2:	2104      	movs	r1, #4
 80035a4:	f00e fa9f 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80035a8:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80035ac:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f00e fe25 	bl	8012204 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80035ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80035de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035e2:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80035e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035ea:	4611      	mov	r1, r2
 80035ec:	eeb0 0a47 	vmov.f32	s0, s14
 80035f0:	4618      	mov	r0, r3
 80035f2:	f00e fe81 	bl	80122f8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035f6:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035fa:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80035fe:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003602:	4618      	mov	r0, r3
 8003604:	f00e fa34 	bl	8011a70 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003608:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800360c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003610:	4618      	mov	r0, r3
 8003612:	2340      	movs	r3, #64	@ 0x40
 8003614:	461a      	mov	r2, r3
 8003616:	2100      	movs	r1, #0
 8003618:	f00e ffd6 	bl	80125c8 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 800361c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003620:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003624:	2204      	movs	r2, #4
 8003626:	2104      	movs	r1, #4
 8003628:	f00e fa5d 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 800362c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003630:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003634:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003638:	4618      	mov	r0, r3
 800363a:	f00e fde3 	bl	8012204 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 800363e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003642:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003646:	461a      	mov	r2, r3
 8003648:	2300      	movs	r3, #0
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	6053      	str	r3, [r2, #4]
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003652:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003656:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800365a:	2201      	movs	r2, #1
 800365c:	2104      	movs	r1, #4
 800365e:	f00e fa42 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003662:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003666:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800366a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800366e:	4618      	mov	r0, r3
 8003670:	f00e fdc8 	bl	8012204 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003674:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003678:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003684:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003688:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003694:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003698:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80036a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ac:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80036b4:	4611      	mov	r1, r2
 80036b6:	eeb0 0a47 	vmov.f32	s0, s14
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00e fe1c 	bl	80122f8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036c0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036c4:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80036c8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80036cc:	4618      	mov	r0, r3
 80036ce:	f00e f9cf 	bl	8011a70 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80036d2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036d6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80036da:	4618      	mov	r0, r3
 80036dc:	2340      	movs	r3, #64	@ 0x40
 80036de:	461a      	mov	r2, r3
 80036e0:	2100      	movs	r1, #0
 80036e2:	f00e ff71 	bl	80125c8 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80036e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80036ea:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80036ee:	2204      	movs	r2, #4
 80036f0:	2104      	movs	r1, #4
 80036f2:	f00e f9f8 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80036f6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80036fa:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003702:	4618      	mov	r0, r3
 8003704:	f00e fd7e 	bl	8012204 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003708:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800370c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	6053      	str	r3, [r2, #4]
 8003718:	6093      	str	r3, [r2, #8]
 800371a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 800371c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003720:	f107 001c 	add.w	r0, r7, #28
 8003724:	2201      	movs	r2, #1
 8003726:	2104      	movs	r1, #4
 8003728:	f00e f9dd 	bl	8011ae6 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 800372c:	f107 021c 	add.w	r2, r7, #28
 8003730:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003734:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003738:	4618      	mov	r0, r3
 800373a:	f00e fd63 	bl	8012204 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 800373e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003742:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800374e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003752:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003762:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003772:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80037b8 <discretize_system_with_arm+0x4fc>
 8003782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003786:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	4611      	mov	r1, r2
 8003790:	eeb0 0a47 	vmov.f32	s0, s14
 8003794:	4618      	mov	r0, r3
 8003796:	f00e fdaf 	bl	80122f8 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800379a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800379e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80037a2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00e f962 	bl	8011a70 <arm_mat_add_f32>
}
 80037ac:	bf00      	nop
 80037ae:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	42f00000 	.word	0x42f00000

080037bc <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b09e      	sub	sp, #120	@ 0x78
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80037c6:	edc7 0a08 	vstr	s1, [r7, #32]
 80037ca:	ed87 1a07 	vstr	s2, [r7, #28]
 80037ce:	edc7 1a06 	vstr	s3, [r7, #24]
 80037d2:	ed87 2a05 	vstr	s4, [r7, #20]
 80037d6:	edc7 2a04 	vstr	s5, [r7, #16]
 80037da:	ed87 3a03 	vstr	s6, [r7, #12]
 80037de:	60b8      	str	r0, [r7, #8]
 80037e0:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80037e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00e feec 	bl	80125c8 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80037f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80037fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003802:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003804:	edd7 7a06 	vldr	s15, [r7, #24]
 8003808:	eef1 6a67 	vneg.f32	s13, s15
 800380c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003814:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003818:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800381c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003824:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003828:	edd7 6a04 	vldr	s13, [r7, #16]
 800382c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003834:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8003838:	edd7 7a05 	vldr	s15, [r7, #20]
 800383c:	eef1 6a67 	vneg.f32	s13, s15
 8003840:	ed97 7a08 	vldr	s14, [r7, #32]
 8003844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003848:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 800384c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003850:	eef1 6a67 	vneg.f32	s13, s15
 8003854:	ed97 7a08 	vldr	s14, [r7, #32]
 8003858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003864:	ed97 7a08 	vldr	s14, [r7, #32]
 8003868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003870:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003874:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003880:	f7ff fd1c 	bl	80032bc <discretize_system_with_arm>
}
 8003884:	bf00      	nop
 8003886:	3778      	adds	r7, #120	@ 0x78
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a0b      	ldr	r2, [pc, #44]	@ (80038cc <PWM_init+0x40>)
 800389e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f00a f948 	bl	800db48 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	4619      	mov	r1, r3
 80038bc:	68b8      	ldr	r0, [r7, #8]
 80038be:	f00a fa8f 	bl	800dde0 <HAL_TIM_PWM_Start>
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	0a21fe80 	.word	0x0a21fe80

080038d0 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038dc:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80038e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	d137      	bne.n	800395e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	889b      	ldrh	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <PWM_write_duty+0x32>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003900:	e0e1      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	889b      	ldrh	r3, [r3, #4]
 8003906:	2b04      	cmp	r3, #4
 8003908:	d105      	bne.n	8003916 <PWM_write_duty+0x46>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	6393      	str	r3, [r2, #56]	@ 0x38
 8003914:	e0d7      	b.n	8003ac6 <PWM_write_duty+0x1f6>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d105      	bne.n	800392a <PWM_write_duty+0x5a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003928:	e0cd      	b.n	8003ac6 <PWM_write_duty+0x1f6>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	889b      	ldrh	r3, [r3, #4]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d105      	bne.n	800393e <PWM_write_duty+0x6e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	6413      	str	r3, [r2, #64]	@ 0x40
 800393c:	e0c3      	b.n	8003ac6 <PWM_write_duty+0x1f6>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	889b      	ldrh	r3, [r3, #4]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d105      	bne.n	8003952 <PWM_write_duty+0x82>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003950:	e0b9      	b.n	8003ac6 <PWM_write_duty+0x1f6>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800395c:	e0b3      	b.n	8003ac6 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 7a02 	vldr	s14, [r7, #8]
 800396e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003976:	ee17 2a90 	vmov	r2, s15
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003986:	33fe      	adds	r3, #254	@ 0xfe
 8003988:	4a51      	ldr	r2, [pc, #324]	@ (8003ad0 <PWM_write_duty+0x200>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0bdb      	lsrs	r3, r3, #15
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	899b      	ldrh	r3, [r3, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80039bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039cc:	ee17 3a90 	vmov	r3, s15
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	89db      	ldrh	r3, [r3, #14]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fd6e 	bl	80004bc <__aeabi_i2d>
 80039e0:	4604      	mov	r4, r0
 80039e2:	460d      	mov	r5, r1
 80039e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80039e8:	eef0 7ae7 	vabs.f32	s15, s15
 80039ec:	ee17 0a90 	vmov	r0, s15
 80039f0:	f7fc fd76 	bl	80004e0 <__aeabi_f2d>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4620      	mov	r0, r4
 80039fa:	4629      	mov	r1, r5
 80039fc:	f7fc fdc8 	bl	8000590 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <PWM_write_duty+0x204>)
 8003a0e:	f7fc fee9 	bl	80007e4 <__aeabi_ddiv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f87b 	bl	8000b14 <__aeabi_d2uiz>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	899a      	ldrh	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	89da      	ldrh	r2, [r3, #14]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	89da      	ldrh	r2, [r3, #14]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	889b      	ldrh	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <PWM_write_duty+0x190>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6952      	ldr	r2, [r2, #20]
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003a5e:	e032      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	889b      	ldrh	r3, [r3, #4]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d106      	bne.n	8003a76 <PWM_write_duty+0x1a6>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a74:	e027      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	889b      	ldrh	r3, [r3, #4]
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d106      	bne.n	8003a8c <PWM_write_duty+0x1bc>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003a8a:	e01c      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	889b      	ldrh	r3, [r3, #4]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d106      	bne.n	8003aa2 <PWM_write_duty+0x1d2>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003aa0:	e011      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	889b      	ldrh	r3, [r3, #4]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d106      	bne.n	8003ab8 <PWM_write_duty+0x1e8>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003ab6:	e006      	b.n	8003ac6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003ac4:	e7ff      	b.n	8003ac6 <PWM_write_duty+0x1f6>
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	80008001 	.word	0x80008001
 8003ad4:	40590000 	.word	0x40590000

08003ad8 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ae4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003ae8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	d137      	bne.n	8003b66 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	889b      	ldrh	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <PWM_write_range+0x32>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003b08:	e0e1      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	889b      	ldrh	r3, [r3, #4]
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d105      	bne.n	8003b1e <PWM_write_range+0x46>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6393      	str	r3, [r2, #56]	@ 0x38
 8003b1c:	e0d7      	b.n	8003cce <PWM_write_range+0x1f6>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	889b      	ldrh	r3, [r3, #4]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d105      	bne.n	8003b32 <PWM_write_range+0x5a>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003b30:	e0cd      	b.n	8003cce <PWM_write_range+0x1f6>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d105      	bne.n	8003b46 <PWM_write_range+0x6e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b44:	e0c3      	b.n	8003cce <PWM_write_range+0x1f6>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	889b      	ldrh	r3, [r3, #4]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d105      	bne.n	8003b5a <PWM_write_range+0x82>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b58:	e0b9      	b.n	8003cce <PWM_write_range+0x1f6>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b64:	e0b3      	b.n	8003cce <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7e:	ee17 2a90 	vmov	r2, s15
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003b8e:	33fe      	adds	r3, #254	@ 0xfe
 8003b90:	4a53      	ldr	r2, [pc, #332]	@ (8003ce0 <PWM_write_range+0x208>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0bdb      	lsrs	r3, r3, #15
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	899b      	ldrh	r3, [r3, #12]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd4:	ee17 3a90 	vmov	r3, s15
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	89db      	ldrh	r3, [r3, #14]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fc6a 	bl	80004bc <__aeabi_i2d>
 8003be8:	4604      	mov	r4, r0
 8003bea:	460d      	mov	r5, r1
 8003bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bf0:	eef0 7ae7 	vabs.f32	s15, s15
 8003bf4:	ee17 0a90 	vmov	r0, s15
 8003bf8:	f7fc fc72 	bl	80004e0 <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc fcc4 	bl	8000590 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	a331      	add	r3, pc, #196	@ (adr r3, 8003cd8 <PWM_write_range+0x200>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fde5 	bl	80007e4 <__aeabi_ddiv>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ff77 	bl	8000b14 <__aeabi_d2uiz>
 8003c26:	4603      	mov	r3, r0
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	899a      	ldrh	r2, [r3, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	89da      	ldrh	r2, [r3, #14]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	89da      	ldrh	r2, [r3, #14]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	889b      	ldrh	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <PWM_write_range+0x190>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6952      	ldr	r2, [r2, #20]
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c66:	e032      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	889b      	ldrh	r3, [r3, #4]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d106      	bne.n	8003c7e <PWM_write_range+0x1a6>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003c7c:	e027      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	889b      	ldrh	r3, [r3, #4]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d106      	bne.n	8003c94 <PWM_write_range+0x1bc>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003c92:	e01c      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d106      	bne.n	8003caa <PWM_write_range+0x1d2>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ca8:	e011      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d106      	bne.n	8003cc0 <PWM_write_range+0x1e8>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003cbe:	e006      	b.n	8003cce <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003ccc:	e7ff      	b.n	8003cce <PWM_write_range+0x1f6>
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	40efffe0 	.word	0x40efffe0
 8003ce0:	80008001 	.word	0x80008001

08003ce4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6178      	str	r0, [r7, #20]
 8003cec:	6139      	str	r1, [r7, #16]
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003cf6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003d44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	fb01 f202 	mul.w	r2, r1, r2
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003db2:	213c      	movs	r1, #60	@ 0x3c
 8003db4:	6938      	ldr	r0, [r7, #16]
 8003db6:	f00a facf 	bl	800e358 <HAL_TIM_Encoder_Start>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	0000      	movs	r0, r0
 8003dc4:	0000      	movs	r0, r0
	...

08003dc8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	0fda      	lsrs	r2, r3, #31
 8003df0:	4413      	add	r3, r2
 8003df2:	105b      	asrs	r3, r3, #1
 8003df4:	461a      	mov	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	dd05      	ble.n	8003e08 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e00e      	b.n	8003e26 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	0fda      	lsrs	r2, r3, #31
 8003e0e:	4413      	add	r3, r2
 8003e10:	105b      	asrs	r3, r3, #1
 8003e12:	425b      	negs	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	da04      	bge.n	8003e26 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e58:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fb33 	bl	80004e0 <__aeabi_f2d>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	460d      	mov	r5, r1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e9e:	ee17 0a90 	vmov	r0, s15
 8003ea2:	f7fc fb1d 	bl	80004e0 <__aeabi_f2d>
 8003ea6:	a33c      	add	r3, pc, #240	@ (adr r3, 8003f98 <QEI_get_diff_count+0x1d0>)
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f7fc fb70 	bl	8000590 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4690      	mov	r8, r2
 8003eb6:	4699      	mov	r9, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb0f 	bl	80004e0 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	4649      	mov	r1, r9
 8003eca:	f7fc fb61 	bl	8000590 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	f7fc f9a5 	bl	8000224 <__adddf3>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fe37 	bl	8000b54 <__aeabi_d2f>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc faf5 	bl	80004e0 <__aeabi_f2d>
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	460d      	mov	r5, r1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f16:	ee16 0a90 	vmov	r0, s13
 8003f1a:	f7fc fae1 	bl	80004e0 <__aeabi_f2d>
 8003f1e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003f98 <QEI_get_diff_count+0x1d0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fb34 	bl	8000590 <__aeabi_dmul>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4690      	mov	r8, r2
 8003f2e:	4699      	mov	r9, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fad3 	bl	80004e0 <__aeabi_f2d>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc fb25 	bl	8000590 <__aeabi_dmul>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fac4 	bl	80004e0 <__aeabi_f2d>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	4649      	mov	r1, r9
 8003f60:	f7fc fb16 	bl	8000590 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc f95a 	bl	8000224 <__adddf3>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	f7fc fdec 	bl	8000b54 <__aeabi_d2f>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f94:	f3af 8000 	nop.w
 8003f98:	54442d18 	.word	0x54442d18
 8003f9c:	400921fb 	.word	0x400921fb

08003fa0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fa8a 	bl	80004e0 <__aeabi_f2d>
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	4b83      	ldr	r3, [pc, #524]	@ (80041e0 <QEI_compute_data+0x240>)
 8003fd2:	f7fc fadd 	bl	8000590 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4614      	mov	r4, r2
 8003fdc:	461d      	mov	r5, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fea:	ee17 0a90 	vmov	r0, s15
 8003fee:	f7fc fa77 	bl	80004e0 <__aeabi_f2d>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	f7fc fbf3 	bl	80007e4 <__aeabi_ddiv>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4614      	mov	r4, r2
 8004004:	461d      	mov	r5, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fa68 	bl	80004e0 <__aeabi_f2d>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc faba 	bl	8000590 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f7fc fd96 	bl	8000b54 <__aeabi_d2f>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004038:	ee17 0a90 	vmov	r0, s15
 800403c:	f7fc fa50 	bl	80004e0 <__aeabi_f2d>
 8004040:	a365      	add	r3, pc, #404	@ (adr r3, 80041d8 <QEI_compute_data+0x238>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc faa3 	bl	8000590 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4614      	mov	r4, r2
 8004050:	461d      	mov	r5, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800405e:	ee17 0a90 	vmov	r0, s15
 8004062:	f7fc fa3d 	bl	80004e0 <__aeabi_f2d>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4620      	mov	r0, r4
 800406c:	4629      	mov	r1, r5
 800406e:	f7fc fbb9 	bl	80007e4 <__aeabi_ddiv>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4614      	mov	r4, r2
 8004078:	461d      	mov	r5, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa2e 	bl	80004e0 <__aeabi_f2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc fa80 	bl	8000590 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	f7fc fd5c 	bl	8000b54 <__aeabi_d2f>
 800409c:	4602      	mov	r2, r0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fa1a 	bl	80004e0 <__aeabi_f2d>
 80040ac:	a34a      	add	r3, pc, #296	@ (adr r3, 80041d8 <QEI_compute_data+0x238>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc fa6d 	bl	8000590 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4614      	mov	r4, r2
 80040bc:	461d      	mov	r5, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fa0c 	bl	80004e0 <__aeabi_f2d>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	f7fc fa5e 	bl	8000590 <__aeabi_dmul>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4614      	mov	r4, r2
 80040da:	461d      	mov	r5, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e8:	ee17 0a90 	vmov	r0, s15
 80040ec:	f7fc f9f8 	bl	80004e0 <__aeabi_f2d>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4620      	mov	r0, r4
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc fb74 	bl	80007e4 <__aeabi_ddiv>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc f9e9 	bl	80004e0 <__aeabi_f2d>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc fa3b 	bl	8000590 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd17 	bl	8000b54 <__aeabi_d2f>
 8004126:	4602      	mov	r2, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	edd3 7a03 	vldr	s15, [r3, #12]
 8004148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004150:	edd7 7a03 	vldr	s15, [r7, #12]
 8004154:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	d00a      	beq.n	8004174 <QEI_compute_data+0x1d4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800416a:	edd7 7a03 	vldr	s15, [r7, #12]
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	e001      	b.n	8004178 <QEI_compute_data+0x1d8>
 8004174:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80041e4 <QEI_compute_data+0x244>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	ed93 7a04 	vldr	s14, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	edd3 7a05 	vldr	s15, [r3, #20]
 800418a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004192:	edd7 7a02 	vldr	s15, [r7, #8]
 8004196:	eef5 7a40 	vcmp.f32	s15, #0.0
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	d00a      	beq.n	80041b6 <QEI_compute_data+0x216>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80041b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b4:	e001      	b.n	80041ba <QEI_compute_data+0x21a>
 80041b6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80041e4 <QEI_compute_data+0x244>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	615a      	str	r2, [r3, #20]
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bdb0      	pop	{r4, r5, r7, pc}
 80041d8:	54442d18 	.word	0x54442d18
 80041dc:	400921fb 	.word	0x400921fb
 80041e0:	404e0000 	.word	0x404e0000
 80041e4:	00000000 	.word	0x00000000

080041e8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	615a      	str	r2, [r3, #20]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	@ 0x38
 8004258:	af00      	add	r7, sp, #0
 800425a:	6178      	str	r0, [r7, #20]
 800425c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004260:	edc7 0a03 	vstr	s1, [r7, #12]
 8004264:	ed87 1a02 	vstr	s2, [r7, #8]
 8004268:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2200      	movs	r2, #0
 8004270:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004292:	ed97 7a03 	vldr	s14, [r7, #12]
 8004296:	edd7 7a04 	vldr	s15, [r7, #16]
 800429a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429e:	eef0 7ae7 	vabs.f32	s15, s15
 80042a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80042a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80042aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	d503      	bpl.n	80042c4 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	22ff      	movs	r2, #255	@ 0xff
 80042c0:	741a      	strb	r2, [r3, #16]
 80042c2:	e002      	b.n	80042ca <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2201      	movs	r2, #1
 80042c8:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80042ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80042ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d006      	beq.n	80042e6 <Trapezoidal_Generator+0x92>
 80042d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d104      	bne.n	80042f0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
        return;
 80042ee:	e06f      	b.n	80043d0 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80042f0:	edd7 6a02 	vldr	s13, [r7, #8]
 80042f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80042f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8004300:	edd7 7a01 	vldr	s15, [r7, #4]
 8004304:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800430c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8004324:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004328:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800432c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004330:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8004334:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004338:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800433c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	db27      	blt.n	8004396 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8004346:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800434a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800434e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004352:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8004356:	edd7 6a07 	vldr	s13, [r7, #28]
 800435a:	ed97 7a02 	vldr	s14, [r7, #8]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800436a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800436c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004370:	edd7 7a06 	vldr	s15, [r7, #24]
 8004374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800437e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004382:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004386:	edd7 7a06 	vldr	s15, [r7, #24]
 800438a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	edc3 7a02 	vstr	s15, [r3, #8]
 8004394:	e018      	b.n	80043c8 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004396:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800439a:	edd7 7a01 	vldr	s15, [r7, #4]
 800439e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043a2:	eeb0 0a66 	vmov.f32	s0, s13
 80043a6:	f00e fa2b 	bl	8012800 <sqrtf>
 80043aa:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80043ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80043be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	60da      	str	r2, [r3, #12]
}
 80043d0:	3738      	adds	r7, #56	@ 0x38
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80043d8:	b480      	push	{r7}
 80043da:	b08d      	sub	sp, #52	@ 0x34
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6178      	str	r0, [r7, #20]
 80043e0:	6139      	str	r1, [r7, #16]
 80043e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80043e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80043ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80043ee:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80043f8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800467c <Trapezoidal_Evaluated+0x2a4>
 80043fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	ed93 7a03 	vldr	s14, [r3, #12]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	f200 811b 	bhi.w	8004654 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2200      	movs	r2, #0
 8004422:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	7c1b      	ldrb	r3, [r3, #16]
 8004428:	b25b      	sxtb	r3, r3
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004432:	ed97 7a00 	vldr	s14, [r7]
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	ed93 7a00 	vldr	s14, [r3]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	edd3 7a01 	vldr	s15, [r3, #4]
 800444a:	eeb4 7a67 	vcmp.f32	s14, s15
 800444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004452:	d109      	bne.n	8004468 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004466:	e00c      	b.n	8004482 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	7c1b      	ldrb	r3, [r3, #16]
 800446c:	b25b      	sxtb	r3, r3
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004476:	ed97 7a01 	vldr	s14, [r7, #4]
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	ed93 7a03 	vldr	s14, [r3, #12]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	d824      	bhi.n	80044e2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004498:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800449c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80044aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80044b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044de:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80044e0:	e0c6      	b.n	8004670 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80044ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f6:	d830      	bhi.n	800455a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80044f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004500:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	edd3 7a00 	vldr	s15, [r3]
 8004514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004518:	ed97 7a03 	vldr	s14, [r7, #12]
 800451c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004520:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	ed93 7a03 	vldr	s14, [r3, #12]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004534:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800453c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800454e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	e08a      	b.n	8004670 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	edd3 7a02 	vldr	s15, [r3, #8]
 8004566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456e:	d900      	bls.n	8004572 <Trapezoidal_Evaluated+0x19a>
}
 8004570:	e07e      	b.n	8004670 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004572:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004576:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800457a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	edd3 7a00 	vldr	s15, [r3]
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	ed97 7a03 	vldr	s14, [r7, #12]
 8004596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	edd3 7a00 	vldr	s15, [r3]
 80045ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	dd11      	ble.n	80045dc <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	edd3 7a00 	vldr	s15, [r3]
 80045c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	ed93 7a03 	vldr	s14, [r3, #12]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80045e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ec:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80045f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80045f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80045f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004604:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004608:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800460c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004610:	edd7 7a07 	vldr	s15, [r7, #28]
 8004614:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004618:	edd7 7a07 	vldr	s15, [r7, #28]
 800461c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800462a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800462e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800463a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004644:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004648:	eef1 7a67 	vneg.f32	s15, s15
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004652:	e00d      	b.n	8004670 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2201      	movs	r2, #1
 8004658:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3734      	adds	r7, #52	@ 0x34
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	3a83126f 	.word	0x3a83126f

08004680 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	ed87 0a01 	vstr	s0, [r7, #4]
 800468a:	4603      	mov	r3, r0
 800468c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b1a      	cmp	r3, #26
 8004692:	d018      	beq.n	80046c6 <temperature_to_base+0x46>
 8004694:	2b1a      	cmp	r3, #26
 8004696:	dc1d      	bgt.n	80046d4 <temperature_to_base+0x54>
 8004698:	2b18      	cmp	r3, #24
 800469a:	d002      	beq.n	80046a2 <temperature_to_base+0x22>
 800469c:	2b19      	cmp	r3, #25
 800469e:	d003      	beq.n	80046a8 <temperature_to_base+0x28>
 80046a0:	e018      	b.n	80046d4 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80046a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046a6:	e017      	b.n	80046d8 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80046a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ac:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80046e8 <temperature_to_base+0x68>
 80046b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046b4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80046b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046bc:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80046c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046c4:	e008      	b.n	80046d8 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80046c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ca:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80046ec <temperature_to_base+0x6c>
 80046ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046d2:	e001      	b.n	80046d8 <temperature_to_base+0x58>
        default:
            return value;
 80046d4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80046d8:	eeb0 0a67 	vmov.f32	s0, s15
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	42000000 	.word	0x42000000
 80046ec:	43889333 	.word	0x43889333

080046f0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80046fa:	4603      	mov	r3, r0
 80046fc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b1a      	cmp	r3, #26
 8004702:	d018      	beq.n	8004736 <temperature_from_base+0x46>
 8004704:	2b1a      	cmp	r3, #26
 8004706:	dc1d      	bgt.n	8004744 <temperature_from_base+0x54>
 8004708:	2b18      	cmp	r3, #24
 800470a:	d002      	beq.n	8004712 <temperature_from_base+0x22>
 800470c:	2b19      	cmp	r3, #25
 800470e:	d003      	beq.n	8004718 <temperature_from_base+0x28>
 8004710:	e018      	b.n	8004744 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004712:	edd7 7a01 	vldr	s15, [r7, #4]
 8004716:	e017      	b.n	8004748 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004718:	edd7 7a01 	vldr	s15, [r7, #4]
 800471c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004724:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800472c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004758 <temperature_from_base+0x68>
 8004730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004734:	e008      	b.n	8004748 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8004736:	edd7 7a01 	vldr	s15, [r7, #4]
 800473a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800475c <temperature_from_base+0x6c>
 800473e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004742:	e001      	b.n	8004748 <temperature_from_base+0x58>
        default:
            return value;
 8004744:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004748:	eeb0 0a67 	vmov.f32	s0, s15
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	42000000 	.word	0x42000000
 800475c:	43889333 	.word	0x43889333

08004760 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e00a      	b.n	8004790 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	3304      	adds	r3, #4
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b1a      	cmp	r3, #26
 8004794:	ddf1      	ble.n	800477a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a11      	ldr	r2, [pc, #68]	@ (80047e0 <init_length_converter+0x80>)
 800479a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <init_length_converter+0x84>)
 80047a0:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80047a8:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	@ (80047e8 <init_length_converter+0x88>)
 80047ae:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0e      	ldr	r2, [pc, #56]	@ (80047ec <init_length_converter+0x8c>)
 80047b4:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <init_length_converter+0x90>)
 80047ba:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <init_length_converter+0x94>)
 80047c0:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0c      	ldr	r2, [pc, #48]	@ (80047f8 <init_length_converter+0x98>)
 80047c6:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	3a83126f 	.word	0x3a83126f
 80047e4:	3c23d70a 	.word	0x3c23d70a
 80047e8:	447a0000 	.word	0x447a0000
 80047ec:	3cd013a9 	.word	0x3cd013a9
 80047f0:	3e9c0ebf 	.word	0x3e9c0ebf
 80047f4:	3f6a161e 	.word	0x3f6a161e
 80047f8:	44c92b02 	.word	0x44c92b02

080047fc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	220a      	movs	r2, #10
 800480e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e00a      	b.n	800482c <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	3304      	adds	r3, #4
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b1a      	cmp	r3, #26
 8004830:	ddf1      	ble.n	8004816 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a0e      	ldr	r2, [pc, #56]	@ (8004870 <init_mass_converter+0x74>)
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0e      	ldr	r2, [pc, #56]	@ (8004874 <init_mass_converter+0x78>)
 800483c:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a0b      	ldr	r2, [pc, #44]	@ (8004878 <init_mass_converter+0x7c>)
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0b      	ldr	r2, [pc, #44]	@ (800487c <init_mass_converter+0x80>)
 8004850:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <init_mass_converter+0x84>)
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	358637bd 	.word	0x358637bd
 8004874:	3a83126f 	.word	0x3a83126f
 8004878:	447a0000 	.word	0x447a0000
 800487c:	3ce83d36 	.word	0x3ce83d36
 8004880:	3ee83d36 	.word	0x3ee83d36

08004884 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	220f      	movs	r2, #15
 8004896:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e00a      	b.n	80048b4 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b1a      	cmp	r3, #26
 80048b8:	ddf1      	ble.n	800489e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <init_angle_converter+0x64>)
 80048be:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <init_angle_converter+0x68>)
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	3c8efa35 	.word	0x3c8efa35
 80048ec:	3c80adfd 	.word	0x3c80adfd

080048f0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2203      	movs	r2, #3
 80048fc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2214      	movs	r2, #20
 8004902:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e00a      	b.n	8004920 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	3304      	adds	r3, #4
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3301      	adds	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b1a      	cmp	r3, #26
 8004924:	ddf1      	ble.n	800490a <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <init_time_converter+0x7c>)
 800492a:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a10      	ldr	r2, [pc, #64]	@ (8004970 <init_time_converter+0x80>)
 8004930:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0f      	ldr	r2, [pc, #60]	@ (8004974 <init_time_converter+0x84>)
 8004936:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800493e:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0d      	ldr	r2, [pc, #52]	@ (8004978 <init_time_converter+0x88>)
 8004944:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a0c      	ldr	r2, [pc, #48]	@ (800497c <init_time_converter+0x8c>)
 800494a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <init_time_converter+0x90>)
 8004950:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	3089705f 	.word	0x3089705f
 8004970:	358637bd 	.word	0x358637bd
 8004974:	3a83126f 	.word	0x3a83126f
 8004978:	42700000 	.word	0x42700000
 800497c:	45610000 	.word	0x45610000
 8004980:	47a8c000 	.word	0x47a8c000

08004984 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2204      	movs	r2, #4
 8004990:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2218      	movs	r2, #24
 8004996:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e00a      	b.n	80049b4 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	3304      	adds	r3, #4
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b1a      	cmp	r3, #26
 80049b8:	ddf1      	ble.n	800499e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a05      	ldr	r2, [pc, #20]	@ (80049d4 <init_temperature_converter+0x50>)
 80049be:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a05      	ldr	r2, [pc, #20]	@ (80049d8 <init_temperature_converter+0x54>)
 80049c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	08004681 	.word	0x08004681
 80049d8:	080046f1 	.word	0x080046f1

080049dc <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff feba 	bl	8004760 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3378      	adds	r3, #120	@ 0x78
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff03 	bl	80047fc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	33f0      	adds	r3, #240	@ 0xf0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff ff42 	bl	8004884 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff72 	bl	80048f0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ffb6 	bl	8004984 <init_temperature_converter>
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b1a      	cmp	r3, #26
 8004a2e:	d803      	bhi.n	8004a38 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	4a05      	ldr	r2, [pc, #20]	@ (8004a48 <UnitConverter_get_unit_type+0x28>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	e000      	b.n	8004a3a <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000318 	.word	0x20000318

08004a4c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	71fb      	strb	r3, [r7, #7]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffdc 	bl	8004a20 <UnitConverter_get_unit_type>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004a6c:	79bb      	ldrb	r3, [r7, #6]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ffd6 	bl	8004a20 <UnitConverter_get_unit_type>
 8004a74:	4603      	mov	r3, r0
 8004a76:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004a78:	7efa      	ldrb	r2, [r7, #27]
 8004a7a:	7ebb      	ldrb	r3, [r7, #26]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d002      	beq.n	8004a86 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a84:	e03b      	b.n	8004afe <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004a86:	7efa      	ldrb	r2, [r7, #27]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	79fa      	ldrb	r2, [r7, #7]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	ed97 0a02 	vldr	s0, [r7, #8]
 8004aaa:	4798      	blx	r3
 8004aac:	ed87 0a07 	vstr	s0, [r7, #28]
 8004ab0:	e00c      	b.n	8004acc <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	3304      	adds	r3, #4
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad8:	79ba      	ldrb	r2, [r7, #6]
 8004ada:	4610      	mov	r0, r2
 8004adc:	ed97 0a07 	vldr	s0, [r7, #28]
 8004ae0:	4798      	blx	r3
 8004ae2:	eef0 7a40 	vmov.f32	s15, s0
 8004ae6:	e00a      	b.n	8004afe <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004ae8:	79bb      	ldrb	r3, [r7, #6]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	ed93 7a00 	vldr	s14, [r3]
 8004af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004afe:	eeb0 0a67 	vmov.f32	s0, s15
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b14:	460b      	mov	r3, r1
 8004b16:	71fb      	strb	r3, [r7, #7]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff7e 	bl	8004a20 <UnitConverter_get_unit_type>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d111      	bne.n	8004b4e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004b2a:	79bb      	ldrb	r3, [r7, #6]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff77 	bl	8004a20 <UnitConverter_get_unit_type>
 8004b32:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d10a      	bne.n	8004b4e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004b38:	79ba      	ldrb	r2, [r7, #6]
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ff82 	bl	8004a4c <UnitConverter_convert>
 8004b48:	eef0 7a40 	vmov.f32	s15, s0
 8004b4c:	e001      	b.n	8004b52 <UnitConverter_angle+0x4a>
    }
    return value;
 8004b4e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004b52:	eeb0 0a67 	vmov.f32	s0, s15
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	@ 0x30
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	2220      	movs	r2, #32
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f00d fd27 	bl	80125c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004b80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b8a:	4b35      	ldr	r3, [pc, #212]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b90:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004b96:	4b32      	ldr	r3, [pc, #200]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b9c:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004bae:	4b2c      	ldr	r3, [pc, #176]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004bba:	4b29      	ldr	r3, [pc, #164]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bc2:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004bce:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004bd6:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004bdc:	4b20      	ldr	r3, [pc, #128]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004be4:	481e      	ldr	r0, [pc, #120]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004be6:	f005 fec1 	bl	800a96c <HAL_ADC_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004bf0:	f003 ff18 	bl	8008a24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4818      	ldr	r0, [pc, #96]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004c00:	f006 ffe0 	bl	800bbc4 <HAL_ADCEx_MultiModeConfigChannel>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004c0a:	f003 ff0b 	bl	8008a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <MX_ADC1_Init+0x108>)
 8004c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c12:	2306      	movs	r3, #6
 8004c14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004c16:	2307      	movs	r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004c1a:	237f      	movs	r3, #127	@ 0x7f
 8004c1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004c1e:	2304      	movs	r3, #4
 8004c20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	480d      	ldr	r0, [pc, #52]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004c2c:	f006 f94c 	bl	800aec8 <HAL_ADC_ConfigChannel>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004c36:	f003 fef5 	bl	8008a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <MX_ADC1_Init+0x10c>)
 8004c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004c3e:	230c      	movs	r3, #12
 8004c40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4806      	ldr	r0, [pc, #24]	@ (8004c60 <MX_ADC1_Init+0x104>)
 8004c48:	f006 f93e 	bl	800aec8 <HAL_ADC_ConfigChannel>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004c52:	f003 fee7 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004c56:	bf00      	nop
 8004c58:	3730      	adds	r7, #48	@ 0x30
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	200003b4 	.word	0x200003b4
 8004c64:	19200040 	.word	0x19200040
 8004c68:	1d500080 	.word	0x1d500080

08004c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b09e      	sub	sp, #120	@ 0x78
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	2254      	movs	r2, #84	@ 0x54
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f00d fc9b 	bl	80125c8 <memset>
  if(adcHandle->Instance==ADC1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c9a:	d15e      	bne.n	8004d5a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ca2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004ca6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ca8:	f107 0310 	add.w	r3, r7, #16
 8004cac:	4618      	mov	r0, r3
 8004cae:	f008 fc99 	bl	800d5e4 <HAL_RCCEx_PeriphCLKConfig>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004cb8:	f003 feb4 	bl	8008a24 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004cbc:	4b29      	ldr	r3, [pc, #164]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc0:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004cc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cc8:	4b26      	ldr	r3, [pc, #152]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd4:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd8:	4a22      	ldr	r2, [pc, #136]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ce0:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_ADC_MspInit+0xf8>)
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cec:	2303      	movs	r3, #3
 8004cee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	481a      	ldr	r0, [pc, #104]	@ (8004d68 <HAL_ADC_MspInit+0xfc>)
 8004d00:	f007 fcaa 	bl	800c658 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004d04:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_ADC_MspInit+0x104>)
 8004d08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d0a:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d10:	4b16      	ldr	r3, [pc, #88]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d1e:	2280      	movs	r2, #128	@ 0x80
 8004d20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d32:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d34:	2220      	movs	r2, #32
 8004d36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d3e:	480b      	ldr	r0, [pc, #44]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d40:	f007 f958 	bl	800bff4 <HAL_DMA_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004d4a:	f003 fe6b 	bl	8008a24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a06      	ldr	r2, [pc, #24]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d52:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d54:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <HAL_ADC_MspInit+0x100>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3778      	adds	r7, #120	@ 0x78
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	48000800 	.word	0x48000800
 8004d6c:	20000420 	.word	0x20000420
 8004d70:	40020008 	.word	0x40020008

08004d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7e:	4a21      	ldr	r2, [pc, #132]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d86:	4b1f      	ldr	r3, [pc, #124]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d92:	4b1c      	ldr	r3, [pc, #112]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d96:	4a1b      	ldr	r2, [pc, #108]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d9e:	4b19      	ldr	r3, [pc, #100]	@ (8004e04 <MX_DMA_Init+0x90>)
 8004da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2100      	movs	r1, #0
 8004dae:	200b      	movs	r0, #11
 8004db0:	f007 f8eb 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004db4:	200b      	movs	r0, #11
 8004db6:	f007 f902 	bl	800bfbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	200c      	movs	r0, #12
 8004dc0:	f007 f8e3 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004dc4:	200c      	movs	r0, #12
 8004dc6:	f007 f8fa 	bl	800bfbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	200d      	movs	r0, #13
 8004dd0:	f007 f8db 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004dd4:	200d      	movs	r0, #13
 8004dd6:	f007 f8f2 	bl	800bfbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	200e      	movs	r0, #14
 8004de0:	f007 f8d3 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004de4:	200e      	movs	r0, #14
 8004de6:	f007 f8ea 	bl	800bfbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004dea:	2200      	movs	r2, #0
 8004dec:	2100      	movs	r1, #0
 8004dee:	200f      	movs	r0, #15
 8004df0:	f007 f8cb 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004df4:	200f      	movs	r0, #15
 8004df6:	f007 f8e2 	bl	800bfbe <HAL_NVIC_EnableIRQ>

}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000

08004e08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	@ 0x28
 8004e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	60da      	str	r2, [r3, #12]
 8004e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1e:	4b75      	ldr	r3, [pc, #468]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e22:	4a74      	ldr	r2, [pc, #464]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e24:	f043 0304 	orr.w	r3, r3, #4
 8004e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e2a:	4b72      	ldr	r3, [pc, #456]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e36:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e42:	4b6c      	ldr	r3, [pc, #432]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4e:	4b69      	ldr	r3, [pc, #420]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e52:	4a68      	ldr	r2, [pc, #416]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e5a:	4b66      	ldr	r3, [pc, #408]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e66:	4b63      	ldr	r3, [pc, #396]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6a:	4a62      	ldr	r2, [pc, #392]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e72:	4b60      	ldr	r3, [pc, #384]	@ (8004ff4 <MX_GPIO_Init+0x1ec>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e88:	f007 fd80 	bl	800c98c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e92:	4859      	ldr	r0, [pc, #356]	@ (8004ff8 <MX_GPIO_Init+0x1f0>)
 8004e94:	f007 fd7a 	bl	800c98c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	4619      	mov	r1, r3
 8004eae:	4852      	ldr	r0, [pc, #328]	@ (8004ff8 <MX_GPIO_Init+0x1f0>)
 8004eb0:	f007 fbd2 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004eb4:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ed0:	f007 fbc2 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004ed4:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004eda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4844      	ldr	r0, [pc, #272]	@ (8004ffc <MX_GPIO_Init+0x1f4>)
 8004eec:	f007 fbb4 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ef0:	2306      	movs	r3, #6
 8004ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	4619      	mov	r1, r3
 8004f02:	483e      	ldr	r0, [pc, #248]	@ (8004ffc <MX_GPIO_Init+0x1f4>)
 8004f04:	f007 fba8 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	2300      	movs	r3, #0
 8004f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4835      	ldr	r0, [pc, #212]	@ (8004ff8 <MX_GPIO_Init+0x1f0>)
 8004f22:	f007 fb99 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004f26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f32:	2302      	movs	r3, #2
 8004f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	482e      	ldr	r0, [pc, #184]	@ (8004ff8 <MX_GPIO_Init+0x1f0>)
 8004f3e:	f007 fb8b 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4619      	mov	r1, r3
 8004f56:	4828      	ldr	r0, [pc, #160]	@ (8004ff8 <MX_GPIO_Init+0x1f0>)
 8004f58:	f007 fb7e 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4822      	ldr	r0, [pc, #136]	@ (8004ffc <MX_GPIO_Init+0x1f4>)
 8004f72:	f007 fb71 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004f76:	2340      	movs	r3, #64	@ 0x40
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f80:	2301      	movs	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	481c      	ldr	r0, [pc, #112]	@ (8004ffc <MX_GPIO_Init+0x1f4>)
 8004f8c:	f007 fb64 	bl	800c658 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4815      	ldr	r0, [pc, #84]	@ (8004ffc <MX_GPIO_Init+0x1f4>)
 8004fa6:	f007 fb57 	bl	800c658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	2006      	movs	r0, #6
 8004fb0:	f006 ffeb 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004fb4:	2006      	movs	r0, #6
 8004fb6:	f007 f802 	bl	800bfbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	200a      	movs	r0, #10
 8004fc0:	f006 ffe3 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004fc4:	200a      	movs	r0, #10
 8004fc6:	f006 fffa 	bl	800bfbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	2017      	movs	r0, #23
 8004fd0:	f006 ffdb 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004fd4:	2017      	movs	r0, #23
 8004fd6:	f006 fff2 	bl	800bfbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2028      	movs	r0, #40	@ 0x28
 8004fe0:	f006 ffd3 	bl	800bf8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fe4:	2028      	movs	r0, #40	@ 0x28
 8004fe6:	f006 ffea 	bl	800bfbe <HAL_NVIC_EnableIRQ>

}
 8004fea:	bf00      	nop
 8004fec:	3728      	adds	r7, #40	@ 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	48000800 	.word	0x48000800
 8004ffc:	48000400 	.word	0x48000400

08005000 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8005000:	b580      	push	{r7, lr}
 8005002:	b096      	sub	sp, #88	@ 0x58
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	ed87 0a02 	vstr	s0, [r7, #8]
 800500c:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	2201      	movs	r2, #1
 800501a:	2101      	movs	r1, #1
 800501c:	f00c fd63 	bl	8011ae6 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f00d f9d3 	bl	80123da <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f00d f9c9 	bl	80123da <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f00d f9bf 	bl	80123da <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005068:	4619      	mov	r1, r3
 800506a:	ed97 0a02 	vldr	s0, [r7, #8]
 800506e:	4610      	mov	r0, r2
 8005070:	f00d f942 	bl	80122f8 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005086:	461a      	mov	r2, r3
 8005088:	f00d f8bc 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800509e:	461a      	mov	r2, r3
 80050a0:	f00c fce6 	bl	8011a70 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80050b6:	461a      	mov	r2, r3
 80050b8:	f00d f8a4 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80050ce:	461a      	mov	r2, r3
 80050d0:	f00d f898 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80050e6:	461a      	mov	r2, r3
 80050e8:	f00d f88c 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80050fe:	4619      	mov	r1, r3
 8005100:	eeb0 0a67 	vmov.f32	s0, s15
 8005104:	4610      	mov	r0, r2
 8005106:	f00d f8f7 	bl	80122f8 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800511c:	461a      	mov	r2, r3
 800511e:	f00c fca7 	bl	8011a70 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8005134:	461a      	mov	r2, r3
 8005136:	f00d f865 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800514c:	461a      	mov	r2, r3
 800514e:	f00d f859 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005164:	461a      	mov	r2, r3
 8005166:	f00c fc83 	bl	8011a70 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f00c fccc 	bl	8011b16 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005190:	461a      	mov	r2, r3
 8005192:	f00d f837 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80051a8:	461a      	mov	r2, r3
 80051aa:	f00d f82b 	bl	8012204 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80051c0:	461a      	mov	r2, r3
 80051c2:	f00d f81f 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80051d8:	461a      	mov	r2, r3
 80051da:	f00d f8c3 	bl	8012364 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80051f0:	461a      	mov	r2, r3
 80051f2:	f00d f807 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8005208:	461a      	mov	r2, r3
 800520a:	f00c fc31 	bl	8011a70 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8005220:	461a      	mov	r2, r3
 8005222:	f00c ffef 	bl	8012204 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8005226:	f107 0310 	add.w	r3, r7, #16
 800522a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800522e:	2204      	movs	r2, #4
 8005230:	2104      	movs	r1, #4
 8005232:	f00c fc58 	bl	8011ae6 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8005242:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005246:	4619      	mov	r1, r3
 8005248:	f00c ffdc 	bl	8012204 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8005252:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005256:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800525a:	4618      	mov	r0, r3
 800525c:	f00d f882 	bl	8012364 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 800526c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005270:	4618      	mov	r0, r3
 8005272:	f00c ffc7 	bl	8012204 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005286:	ee07 3a90 	vmov	s15, r3
}
 800528a:	eeb0 0a67 	vmov.f32	s0, s15
 800528e:	3758      	adds	r7, #88	@ 0x58
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b0a4      	sub	sp, #144	@ 0x90
 8005298:	af00      	add	r7, sp, #0
 800529a:	6178      	str	r0, [r7, #20]
 800529c:	6139      	str	r1, [r7, #16]
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80052b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80052bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80052e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80052ee:	4bc6      	ldr	r3, [pc, #792]	@ (8005608 <Kalman_Start+0x374>)
 80052f0:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80052f4:	461d      	mov	r5, r3
 80052f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005302:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800530a:	f107 031c 	add.w	r3, r7, #28
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005328:	e028      	b.n	800537c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 800532a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	6979      	ldr	r1, [r7, #20]
 8005338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800533c:	3314      	adds	r3, #20
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8005344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3390      	adds	r3, #144	@ 0x90
 800534c:	443b      	add	r3, r7
 800534e:	3b64      	subs	r3, #100	@ 0x64
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	6979      	ldr	r1, [r7, #20]
 8005354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005358:	3398      	adds	r3, #152	@ 0x98
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005366:	3304      	adds	r3, #4
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8005372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005376:	3301      	adds	r3, #1
 8005378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800537c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005380:	2b0f      	cmp	r3, #15
 8005382:	ddd2      	ble.n	800532a <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800538a:	e03a      	b.n	8005402 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 800538c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	3390      	adds	r3, #144	@ 0x90
 8005394:	443b      	add	r3, r7
 8005396:	3b74      	subs	r3, #116	@ 0x74
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	6979      	ldr	r1, [r7, #20]
 800539c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80053a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053b8:	3324      	adds	r3, #36	@ 0x24
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80053c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3390      	adds	r3, #144	@ 0x90
 80053c8:	443b      	add	r3, r7
 80053ca:	3b14      	subs	r3, #20
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d4:	3328      	adds	r3, #40	@ 0x28
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80053dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3390      	adds	r3, #144	@ 0x90
 80053e4:	443b      	add	r3, r7
 80053e6:	3b24      	subs	r3, #36	@ 0x24
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f0:	332c      	adds	r3, #44	@ 0x2c
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80053f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053fc:	3301      	adds	r3, #1
 80053fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005406:	2b03      	cmp	r3, #3
 8005408:	ddc0      	ble.n	800538c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2201      	movs	r2, #1
 8005414:	2104      	movs	r1, #4
 8005416:	f00c fb66 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3310      	adds	r3, #16
 8005424:	2204      	movs	r2, #4
 8005426:	2104      	movs	r1, #4
 8005428:	f00c fb5d 	bl	8011ae6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3350      	adds	r3, #80	@ 0x50
 8005436:	2204      	movs	r2, #4
 8005438:	2104      	movs	r1, #4
 800543a:	f00c fb54 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	3390      	adds	r3, #144	@ 0x90
 8005448:	2201      	movs	r2, #1
 800544a:	2104      	movs	r1, #4
 800544c:	f00c fb4b 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	33a0      	adds	r3, #160	@ 0xa0
 800545a:	2204      	movs	r2, #4
 800545c:	2101      	movs	r1, #1
 800545e:	f00c fb42 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	33b0      	adds	r3, #176	@ 0xb0
 800546c:	2201      	movs	r2, #1
 800546e:	2104      	movs	r1, #4
 8005470:	f00c fb39 	bl	8011ae6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	33c8      	adds	r3, #200	@ 0xc8
 800547e:	2204      	movs	r2, #4
 8005480:	2104      	movs	r1, #4
 8005482:	f00c fb30 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005492:	2201      	movs	r2, #1
 8005494:	2104      	movs	r1, #4
 8005496:	f00c fb26 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80054a6:	2204      	movs	r2, #4
 80054a8:	2101      	movs	r1, #1
 80054aa:	f00c fb1c 	bl	8011ae6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80054ba:	2204      	movs	r2, #4
 80054bc:	2104      	movs	r1, #4
 80054be:	f00c fb12 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80054ce:	2204      	movs	r2, #4
 80054d0:	2104      	movs	r1, #4
 80054d2:	f00c fb08 	bl	8011ae6 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80054e2:	2201      	movs	r2, #1
 80054e4:	2104      	movs	r1, #4
 80054e6:	f00c fafe 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80054f6:	2201      	movs	r2, #1
 80054f8:	2104      	movs	r1, #4
 80054fa:	f00c faf4 	bl	8011ae6 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800550a:	2204      	movs	r2, #4
 800550c:	2101      	movs	r1, #1
 800550e:	f00c faea 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800551e:	2201      	movs	r2, #1
 8005520:	2101      	movs	r1, #1
 8005522:	f00c fae0 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8005532:	2201      	movs	r2, #1
 8005534:	2101      	movs	r1, #1
 8005536:	f00c fad6 	bl	8011ae6 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005546:	2201      	movs	r2, #1
 8005548:	2104      	movs	r1, #4
 800554a:	f00c facc 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800555a:	2201      	movs	r2, #1
 800555c:	2104      	movs	r1, #4
 800555e:	f00c fac2 	bl	8011ae6 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800556e:	2201      	movs	r2, #1
 8005570:	2101      	movs	r1, #1
 8005572:	f00c fab8 	bl	8011ae6 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005582:	2201      	movs	r2, #1
 8005584:	2101      	movs	r1, #1
 8005586:	f00c faae 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005596:	2201      	movs	r2, #1
 8005598:	2101      	movs	r1, #1
 800559a:	f00c faa4 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80055aa:	2201      	movs	r2, #1
 80055ac:	2104      	movs	r1, #4
 80055ae:	f00c fa9a 	bl	8011ae6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80055be:	2201      	movs	r2, #1
 80055c0:	2101      	movs	r1, #1
 80055c2:	f00c fa90 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80055d2:	2204      	movs	r2, #4
 80055d4:	2104      	movs	r1, #4
 80055d6:	f00c fa86 	bl	8011ae6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	33c4      	adds	r3, #196	@ 0xc4
 80055e4:	2201      	movs	r2, #1
 80055e6:	2101      	movs	r1, #1
 80055e8:	f00c fa7d 	bl	8011ae6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80055f8:	2201      	movs	r2, #1
 80055fa:	2101      	movs	r1, #1
 80055fc:	f00c fa73 	bl	8011ae6 <arm_mat_init_f32>
}
 8005600:	bf00      	nop
 8005602:	3790      	adds	r7, #144	@ 0x90
 8005604:	46bd      	mov	sp, r7
 8005606:	bdb0      	pop	{r4, r5, r7, pc}
 8005608:	08014498 	.word	0x08014498

0800560c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005610:	f3bf 8f4f 	dsb	sy
}
 8005614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005616:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <__NVIC_SystemReset+0x24>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800561e:	4904      	ldr	r1, [pc, #16]	@ (8005630 <__NVIC_SystemReset+0x24>)
 8005620:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <__NVIC_SystemReset+0x28>)
 8005622:	4313      	orrs	r3, r2
 8005624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005626:	f3bf 8f4f 	dsb	sy
}
 800562a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <__NVIC_SystemReset+0x20>
 8005630:	e000ed00 	.word	0xe000ed00
 8005634:	05fa0004 	.word	0x05fa0004

08005638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800563e:	f004 fee0 	bl	800a402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005642:	f000 f88d 	bl	8005760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005646:	f7ff fbdf 	bl	8004e08 <MX_GPIO_Init>
  MX_DMA_Init();
 800564a:	f7ff fb93 	bl	8004d74 <MX_DMA_Init>
  MX_ADC1_Init();
 800564e:	f7ff fa85 	bl	8004b5c <MX_ADC1_Init>
  MX_TIM2_Init();
 8005652:	f004 f8eb 	bl	800982c <MX_TIM2_Init>
  MX_TIM3_Init();
 8005656:	f004 f937 	bl	80098c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800565a:	f004 f98b 	bl	8009974 <MX_TIM4_Init>
  MX_TIM5_Init();
 800565e:	f004 f9df 	bl	8009a20 <MX_TIM5_Init>
  MX_TIM8_Init();
 8005662:	f004 fa33 	bl	8009acc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005666:	f004 fcf5 	bl	800a054 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800566a:	f004 faed 	bl	8009c48 <MX_TIM16_Init>
  MX_TIM1_Init();
 800566e:	f004 f849 	bl	8009704 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8005672:	f004 fca5 	bl	8009fc0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	plotter_begin();
 8005676:	f003 f9db 	bl	8008a30 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 800567a:	4b28      	ldr	r3, [pc, #160]	@ (800571c <main+0xe4>)
 800567c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567e:	4a28      	ldr	r2, [pc, #160]	@ (8005720 <main+0xe8>)
 8005680:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005682:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <main+0xec>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	4a28      	ldr	r2, [pc, #160]	@ (8005728 <main+0xf0>)
 8005688:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800568a:	4b28      	ldr	r3, [pc, #160]	@ (800572c <main+0xf4>)
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005690:	4b27      	ldr	r3, [pc, #156]	@ (8005730 <main+0xf8>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005696:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <main+0xfc>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800569c:	4b26      	ldr	r3, [pc, #152]	@ (8005738 <main+0x100>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 80056a2:	4b26      	ldr	r3, [pc, #152]	@ (800573c <main+0x104>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <main+0x108>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d032      	beq.n	8005716 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80056b0:	2101      	movs	r1, #1
 80056b2:	4824      	ldr	r0, [pc, #144]	@ (8005744 <main+0x10c>)
 80056b4:	f007 f952 	bl	800c95c <HAL_GPIO_ReadPin>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80056c4:	2140      	movs	r1, #64	@ 0x40
 80056c6:	481f      	ldr	r0, [pc, #124]	@ (8005744 <main+0x10c>)
 80056c8:	f007 f948 	bl	800c95c <HAL_GPIO_ReadPin>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf14      	ite	ne
 80056d2:	2301      	movne	r3, #1
 80056d4:	2300      	moveq	r3, #0
 80056d6:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d018      	beq.n	8005710 <main+0xd8>
 80056de:	79bb      	ldrb	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d015      	beq.n	8005710 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80056e4:	4b16      	ldr	r3, [pc, #88]	@ (8005740 <main+0x108>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80056ea:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <main+0x110>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80056f0:	4b16      	ldr	r3, [pc, #88]	@ (800574c <main+0x114>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80056f6:	4b16      	ldr	r3, [pc, #88]	@ (8005750 <main+0x118>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80056fc:	4b15      	ldr	r3, [pc, #84]	@ (8005754 <main+0x11c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005702:	4b15      	ldr	r3, [pc, #84]	@ (8005758 <main+0x120>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005708:	4b14      	ldr	r3, [pc, #80]	@ (800575c <main+0x124>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e002      	b.n	8005716 <main+0xde>

		} else {
			start_homing_sequence(true);
 8005710:	2001      	movs	r0, #1
 8005712:	f000 f871 	bl	80057f8 <start_homing_sequence>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 8005716:	f002 fe25 	bl	8008364 <handle_b2_button_polling>
 800571a:	e7fc      	b.n	8005716 <main+0xde>
 800571c:	200006ac 	.word	0x200006ac
 8005720:	20000480 	.word	0x20000480
 8005724:	20000708 	.word	0x20000708
 8005728:	200004c0 	.word	0x200004c0
 800572c:	20000564 	.word	0x20000564
 8005730:	2000056d 	.word	0x2000056d
 8005734:	2000056c 	.word	0x2000056c
 8005738:	20000568 	.word	0x20000568
 800573c:	200005a0 	.word	0x200005a0
 8005740:	20000333 	.word	0x20000333
 8005744:	48000400 	.word	0x48000400
 8005748:	20000563 	.word	0x20000563
 800574c:	20000562 	.word	0x20000562
 8005750:	20000560 	.word	0x20000560
 8005754:	20000561 	.word	0x20000561
 8005758:	2000055c 	.word	0x2000055c
 800575c:	20000500 	.word	0x20000500

08005760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b094      	sub	sp, #80	@ 0x50
 8005764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005766:	f107 0318 	add.w	r3, r7, #24
 800576a:	2238      	movs	r2, #56	@ 0x38
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f00c ff2a 	bl	80125c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005782:	2000      	movs	r0, #0
 8005784:	f007 f94c 	bl	800ca20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005788:	2302      	movs	r3, #2
 800578a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800578c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005792:	2340      	movs	r3, #64	@ 0x40
 8005794:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005796:	2302      	movs	r3, #2
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800579a:	2302      	movs	r3, #2
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800579e:	2304      	movs	r3, #4
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80057a2:	2355      	movs	r3, #85	@ 0x55
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057a6:	2302      	movs	r3, #2
 80057a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80057aa:	2302      	movs	r3, #2
 80057ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80057ae:	2302      	movs	r3, #2
 80057b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f007 f9e6 	bl	800cb88 <HAL_RCC_OscConfig>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80057c2:	f003 f92f 	bl	8008a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057c6:	230f      	movs	r3, #15
 80057c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057ca:	2303      	movs	r3, #3
 80057cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	2104      	movs	r1, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f007 fce4 	bl	800d1ac <HAL_RCC_ClockConfig>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80057ea:	f003 f91b 	bl	8008a24 <Error_Handler>
  }
}
 80057ee:	bf00      	nop
 80057f0:	3750      	adds	r7, #80	@ 0x50
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
	registerFrame[R_Theta_Status].U16 = 1;
 8005802:	4b52      	ldr	r3, [pc, #328]	@ (800594c <start_homing_sequence+0x154>)
 8005804:	2201      	movs	r2, #1
 8005806:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 8005808:	4b51      	ldr	r3, [pc, #324]	@ (8005950 <start_homing_sequence+0x158>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 8098 	bne.w	8005942 <start_homing_sequence+0x14a>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005812:	2101      	movs	r1, #1
 8005814:	484f      	ldr	r0, [pc, #316]	@ (8005954 <start_homing_sequence+0x15c>)
 8005816:	f007 f8a1 	bl	800c95c <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005826:	2140      	movs	r1, #64	@ 0x40
 8005828:	484a      	ldr	r0, [pc, #296]	@ (8005954 <start_homing_sequence+0x15c>)
 800582a:	f007 f897 	bl	800c95c <HAL_GPIO_ReadPin>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <start_homing_sequence+0x50>
 8005840:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <start_homing_sequence+0x160>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02e      	beq.n	80058a6 <start_homing_sequence+0xae>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <start_homing_sequence+0x88>
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <start_homing_sequence+0x88>
			// Already at home position - no need to home
			homing_active = false;
 8005854:	4b3e      	ldr	r3, [pc, #248]	@ (8005950 <start_homing_sequence+0x158>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800585a:	4b40      	ldr	r3, [pc, #256]	@ (800595c <start_homing_sequence+0x164>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005860:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <start_homing_sequence+0x160>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005866:	4b3e      	ldr	r3, [pc, #248]	@ (8005960 <start_homing_sequence+0x168>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800586c:	4b3d      	ldr	r3, [pc, #244]	@ (8005964 <start_homing_sequence+0x16c>)
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005872:	4b3d      	ldr	r3, [pc, #244]	@ (8005968 <start_homing_sequence+0x170>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005878:	4b3c      	ldr	r3, [pc, #240]	@ (800596c <start_homing_sequence+0x174>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
			return;
 800587e:	e061      	b.n	8005944 <start_homing_sequence+0x14c>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005880:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <start_homing_sequence+0x158>)
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005886:	4b39      	ldr	r3, [pc, #228]	@ (800596c <start_homing_sequence+0x174>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 800588c:	4b36      	ldr	r3, [pc, #216]	@ (8005968 <start_homing_sequence+0x170>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005892:	4b33      	ldr	r3, [pc, #204]	@ (8005960 <start_homing_sequence+0x168>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005898:	4b32      	ldr	r3, [pc, #200]	@ (8005964 <start_homing_sequence+0x16c>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 800589e:	4b2f      	ldr	r3, [pc, #188]	@ (800595c <start_homing_sequence+0x164>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e04e      	b.n	8005944 <start_homing_sequence+0x14c>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <start_homing_sequence+0xe6>
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <start_homing_sequence+0xe6>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 80058b2:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <start_homing_sequence+0x158>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80058b8:	4b28      	ldr	r3, [pc, #160]	@ (800595c <start_homing_sequence+0x164>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80058be:	4b26      	ldr	r3, [pc, #152]	@ (8005958 <start_homing_sequence+0x160>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80058c4:	4b26      	ldr	r3, [pc, #152]	@ (8005960 <start_homing_sequence+0x168>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80058ca:	4b26      	ldr	r3, [pc, #152]	@ (8005964 <start_homing_sequence+0x16c>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80058d0:	4b25      	ldr	r3, [pc, #148]	@ (8005968 <start_homing_sequence+0x170>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80058d6:	4b25      	ldr	r3, [pc, #148]	@ (800596c <start_homing_sequence+0x174>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
			return;
 80058dc:	e032      	b.n	8005944 <start_homing_sequence+0x14c>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <start_homing_sequence+0x124>
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	f083 0301 	eor.w	r3, r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <start_homing_sequence+0x124>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80058f0:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <start_homing_sequence+0x158>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80058f6:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <start_homing_sequence+0x174>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80058fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <start_homing_sequence+0x170>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005902:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <start_homing_sequence+0x168>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005908:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <start_homing_sequence+0x16c>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 800590e:	4b13      	ldr	r3, [pc, #76]	@ (800595c <start_homing_sequence+0x164>)
 8005910:	2207      	movs	r2, #7
 8005912:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 8005914:	4b16      	ldr	r3, [pc, #88]	@ (8005970 <start_homing_sequence+0x178>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e013      	b.n	8005944 <start_homing_sequence+0x14c>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <start_homing_sequence+0x158>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <start_homing_sequence+0x174>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005928:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <start_homing_sequence+0x170>)
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
			up_photo = false;
 800592e:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <start_homing_sequence+0x168>)
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005934:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <start_homing_sequence+0x16c>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 800593a:	4b08      	ldr	r3, [pc, #32]	@ (800595c <start_homing_sequence+0x164>)
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e000      	b.n	8005944 <start_homing_sequence+0x14c>
		return;
 8005942:	bf00      	nop
		}
	}
}
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20001288 	.word	0x20001288
 8005950:	20000563 	.word	0x20000563
 8005954:	48000400 	.word	0x48000400
 8005958:	20000333 	.word	0x20000333
 800595c:	20000562 	.word	0x20000562
 8005960:	20000560 	.word	0x20000560
 8005964:	20000561 	.word	0x20000561
 8005968:	2000055c 	.word	0x2000055c
 800596c:	20000500 	.word	0x20000500
 8005970:	2000056e 	.word	0x2000056e

08005974 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	ed2d 8b02 	vpush	{d8}
 800597c:	b095      	sub	sp, #84	@ 0x54
 800597e:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005980:	4b97      	ldr	r3, [pc, #604]	@ (8005be0 <update_homing_sequence+0x26c>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f083 0301 	eor.w	r3, r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 851b 	bne.w	80063c6 <update_homing_sequence+0xa52>
		return;

	switch (homing_state) {
 8005990:	4b94      	ldr	r3, [pc, #592]	@ (8005be4 <update_homing_sequence+0x270>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	2b0a      	cmp	r3, #10
 8005998:	f200 8517 	bhi.w	80063ca <update_homing_sequence+0xa56>
 800599c:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <update_homing_sequence+0x30>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	08005a65 	.word	0x08005a65
 80059b0:	08005bb3 	.word	0x08005bb3
 80059b4:	08005c25 	.word	0x08005c25
 80059b8:	08005d6b 	.word	0x08005d6b
 80059bc:	08005e31 	.word	0x08005e31
 80059c0:	080061fd 	.word	0x080061fd
 80059c4:	08006263 	.word	0x08006263
 80059c8:	08006397 	.word	0x08006397
 80059cc:	080063c3 	.word	0x080063c3
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 80059d0:	f003 fc84 	bl	80092dc <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 80059d4:	4b84      	ldr	r3, [pc, #528]	@ (8005be8 <update_homing_sequence+0x274>)
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80059dc:	4b83      	ldr	r3, [pc, #524]	@ (8005bec <update_homing_sequence+0x278>)
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 80059e4:	4b82      	ldr	r3, [pc, #520]	@ (8005bf0 <update_homing_sequence+0x27c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 80059ea:	4b7e      	ldr	r3, [pc, #504]	@ (8005be4 <update_homing_sequence+0x270>)
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]
		break;
 80059f0:	f000 bcfe 	b.w	80063f0 <update_homing_sequence+0xa7c>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80059f4:	4b7c      	ldr	r3, [pc, #496]	@ (8005be8 <update_homing_sequence+0x274>)
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80059fc:	4b7b      	ldr	r3, [pc, #492]	@ (8005bec <update_homing_sequence+0x278>)
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005a04:	4b7a      	ldr	r3, [pc, #488]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a79      	ldr	r2, [pc, #484]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005a0c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005a0e:	4b78      	ldr	r3, [pc, #480]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005a16:	f0c0 84da 	bcc.w	80063ce <update_homing_sequence+0xa5a>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a1e:	4875      	ldr	r0, [pc, #468]	@ (8005bf4 <update_homing_sequence+0x280>)
 8005a20:	f006 ff9c 	bl	800c95c <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	4b71      	ldr	r3, [pc, #452]	@ (8005bf8 <update_homing_sequence+0x284>)
 8005a32:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005a34:	4b70      	ldr	r3, [pc, #448]	@ (8005bf8 <update_homing_sequence+0x284>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <update_homing_sequence+0xe6>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005a44:	4b67      	ldr	r3, [pc, #412]	@ (8005be4 <update_homing_sequence+0x270>)
 8005a46:	2204      	movs	r2, #4
 8005a48:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <update_homing_sequence+0x284>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005a50:	4b6a      	ldr	r3, [pc, #424]	@ (8005bfc <update_homing_sequence+0x288>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005a56:	f000 bcba 	b.w	80063ce <update_homing_sequence+0xa5a>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005a5a:	4b62      	ldr	r3, [pc, #392]	@ (8005be4 <update_homing_sequence+0x270>)
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	701a      	strb	r2, [r3, #0]
		break;
 8005a60:	f000 bcb5 	b.w	80063ce <update_homing_sequence+0xa5a>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005a64:	4b60      	ldr	r3, [pc, #384]	@ (8005be8 <update_homing_sequence+0x274>)
 8005a66:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a6a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005c00 <update_homing_sequence+0x28c>
 8005a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005a72:	4b5d      	ldr	r3, [pc, #372]	@ (8005be8 <update_homing_sequence+0x274>)
 8005a74:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005a78:	4b5b      	ldr	r3, [pc, #364]	@ (8005be8 <update_homing_sequence+0x274>)
 8005a7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a82:	4860      	ldr	r0, [pc, #384]	@ (8005c04 <update_homing_sequence+0x290>)
 8005a84:	f7fb fbc8 	bl	8001218 <PID_CONTROLLER_Compute>
 8005a88:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005c08 <update_homing_sequence+0x294>)
 8005a8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fb f815 	bl	8000ac4 <__aeabi_d2iz>
 8005a9a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c08 <update_homing_sequence+0x294>)
 8005a9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005aa4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 8005aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005aae:	f7fb f809 	bl	8000ac4 <__aeabi_d2iz>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	eeb0 0a48 	vmov.f32	s0, s16
 8005abc:	f7fb fb4a 	bl	8001154 <PWM_Satuation>
 8005ac0:	ee07 0a90 	vmov	s15, r0
 8005ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac8:	4b47      	ldr	r3, [pc, #284]	@ (8005be8 <update_homing_sequence+0x274>)
 8005aca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005ace:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005ad2:	484e      	ldr	r0, [pc, #312]	@ (8005c0c <update_homing_sequence+0x298>)
 8005ad4:	f7fb fede 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8005ad8:	eef0 7a40 	vmov.f32	s15, s0
 8005adc:	4b42      	ldr	r3, [pc, #264]	@ (8005be8 <update_homing_sequence+0x274>)
 8005ade:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c10 <update_homing_sequence+0x29c>)
 8005ae4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8005c14 <update_homing_sequence+0x2a0>)
 8005aea:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005aee:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8005c18 <update_homing_sequence+0x2a4>
 8005af2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005af6:	eeb0 1a66 	vmov.f32	s2, s13
 8005afa:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8005c1c <update_homing_sequence+0x2a8>
 8005afe:	eeb0 0a47 	vmov.f32	s0, s14
 8005b02:	4847      	ldr	r0, [pc, #284]	@ (8005c20 <update_homing_sequence+0x2ac>)
 8005b04:	f7fb ff59 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8005b08:	eef0 7a40 	vmov.f32	s15, s0
 8005b0c:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b0e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005b12:	4b35      	ldr	r3, [pc, #212]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b14:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005b18:	4b33      	ldr	r3, [pc, #204]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b1a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005b1e:	4b32      	ldr	r3, [pc, #200]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b20:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b2e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b32:	4b2d      	ldr	r3, [pc, #180]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b34:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005b38:	4b33      	ldr	r3, [pc, #204]	@ (8005c08 <update_homing_sequence+0x294>)
 8005b3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	f7fa ffbf 	bl	8000ac4 <__aeabi_d2iz>
 8005b46:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b48:	4b2f      	ldr	r3, [pc, #188]	@ (8005c08 <update_homing_sequence+0x294>)
 8005b4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b4e:	623a      	str	r2, [r7, #32]
 8005b50:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b5a:	f7fa ffb3 	bl	8000ac4 <__aeabi_d2iz>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4619      	mov	r1, r3
 8005b62:	4620      	mov	r0, r4
 8005b64:	eeb0 0a48 	vmov.f32	s0, s16
 8005b68:	f7fb faf4 	bl	8001154 <PWM_Satuation>
 8005b6c:	ee07 0a90 	vmov	s15, r0
 8005b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b74:	4b1c      	ldr	r3, [pc, #112]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b76:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <update_homing_sequence+0x284>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8426 	beq.w	80063d2 <update_homing_sequence+0xa5e>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005b86:	4b18      	ldr	r3, [pc, #96]	@ (8005be8 <update_homing_sequence+0x274>)
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005b8e:	4b17      	ldr	r3, [pc, #92]	@ (8005bec <update_homing_sequence+0x278>)
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005b96:	4b16      	ldr	r3, [pc, #88]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b9c:	4b11      	ldr	r3, [pc, #68]	@ (8005be4 <update_homing_sequence+0x270>)
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005ba2:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <update_homing_sequence+0x284>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005ba8:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <update_homing_sequence+0x288>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bae:	f000 bc10 	b.w	80063d2 <update_homing_sequence+0xa5e>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <update_homing_sequence+0x274>)
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005bba:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <update_homing_sequence+0x278>)
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a09      	ldr	r2, [pc, #36]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005bca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005bcc:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <update_homing_sequence+0x27c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005bd4:	f0c0 83ff 	bcc.w	80063d6 <update_homing_sequence+0xa62>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <update_homing_sequence+0x270>)
 8005bda:	2205      	movs	r2, #5
 8005bdc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bde:	e3fa      	b.n	80063d6 <update_homing_sequence+0xa62>
 8005be0:	20000563 	.word	0x20000563
 8005be4:	20000562 	.word	0x20000562
 8005be8:	20000480 	.word	0x20000480
 8005bec:	200004c0 	.word	0x200004c0
 8005bf0:	20000558 	.word	0x20000558
 8005bf4:	48000400 	.word	0x48000400
 8005bf8:	20000561 	.word	0x20000561
 8005bfc:	20000560 	.word	0x20000560
 8005c00:	437a0000 	.word	0x437a0000
 8005c04:	2000078c 	.word	0x2000078c
 8005c08:	20000080 	.word	0x20000080
 8005c0c:	20000804 	.word	0x20000804
 8005c10:	20000708 	.word	0x20000708
 8005c14:	200006ac 	.word	0x200006ac
 8005c18:	447a0000 	.word	0x447a0000
 8005c1c:	00000000 	.word	0x00000000
 8005c20:	20000808 	.word	0x20000808

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005c24:	4b70      	ldr	r3, [pc, #448]	@ (8005de8 <update_homing_sequence+0x474>)
 8005c26:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c2a:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8005dec <update_homing_sequence+0x478>
 8005c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005c32:	4b6d      	ldr	r3, [pc, #436]	@ (8005de8 <update_homing_sequence+0x474>)
 8005c34:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005c38:	4b6b      	ldr	r3, [pc, #428]	@ (8005de8 <update_homing_sequence+0x474>)
 8005c3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c42:	486b      	ldr	r0, [pc, #428]	@ (8005df0 <update_homing_sequence+0x47c>)
 8005c44:	f7fb fae8 	bl	8001218 <PID_CONTROLLER_Compute>
 8005c48:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005c4c:	4b69      	ldr	r3, [pc, #420]	@ (8005df4 <update_homing_sequence+0x480>)
 8005c4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	f7fa ff35 	bl	8000ac4 <__aeabi_d2iz>
 8005c5a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c5c:	4b65      	ldr	r3, [pc, #404]	@ (8005df4 <update_homing_sequence+0x480>)
 8005c5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c62:	61ba      	str	r2, [r7, #24]
 8005c64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c68:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 8005c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c6e:	f7fa ff29 	bl	8000ac4 <__aeabi_d2iz>
 8005c72:	4603      	mov	r3, r0
 8005c74:	4619      	mov	r1, r3
 8005c76:	4620      	mov	r0, r4
 8005c78:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7c:	f7fb fa6a 	bl	8001154 <PWM_Satuation>
 8005c80:	ee07 0a90 	vmov	s15, r0
 8005c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c88:	4b57      	ldr	r3, [pc, #348]	@ (8005de8 <update_homing_sequence+0x474>)
 8005c8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005c8e:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005c92:	4859      	ldr	r0, [pc, #356]	@ (8005df8 <update_homing_sequence+0x484>)
 8005c94:	f7fb fdfe 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8005c98:	eef0 7a40 	vmov.f32	s15, s0
 8005c9c:	4b52      	ldr	r3, [pc, #328]	@ (8005de8 <update_homing_sequence+0x474>)
 8005c9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005ca2:	4b56      	ldr	r3, [pc, #344]	@ (8005dfc <update_homing_sequence+0x488>)
 8005ca4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005ca8:	4b55      	ldr	r3, [pc, #340]	@ (8005e00 <update_homing_sequence+0x48c>)
 8005caa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005cae:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8005e04 <update_homing_sequence+0x490>
 8005cb2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005cb6:	eeb0 1a66 	vmov.f32	s2, s13
 8005cba:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8005e08 <update_homing_sequence+0x494>
 8005cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005cc2:	4852      	ldr	r0, [pc, #328]	@ (8005e0c <update_homing_sequence+0x498>)
 8005cc4:	f7fb fe79 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8005cc8:	eef0 7a40 	vmov.f32	s15, s0
 8005ccc:	4b46      	ldr	r3, [pc, #280]	@ (8005de8 <update_homing_sequence+0x474>)
 8005cce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005cd2:	4b45      	ldr	r3, [pc, #276]	@ (8005de8 <update_homing_sequence+0x474>)
 8005cd4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005cd8:	4b43      	ldr	r3, [pc, #268]	@ (8005de8 <update_homing_sequence+0x474>)
 8005cda:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005cde:	4b42      	ldr	r3, [pc, #264]	@ (8005de8 <update_homing_sequence+0x474>)
 8005ce0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cec:	4b3e      	ldr	r3, [pc, #248]	@ (8005de8 <update_homing_sequence+0x474>)
 8005cee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005de8 <update_homing_sequence+0x474>)
 8005cf4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005df4 <update_homing_sequence+0x480>)
 8005cfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	f7fa fedf 	bl	8000ac4 <__aeabi_d2iz>
 8005d06:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d08:	4b3a      	ldr	r3, [pc, #232]	@ (8005df4 <update_homing_sequence+0x480>)
 8005d0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d0e:	613a      	str	r2, [r7, #16]
 8005d10:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d14:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005d16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d1a:	f7fa fed3 	bl	8000ac4 <__aeabi_d2iz>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4619      	mov	r1, r3
 8005d22:	4620      	mov	r0, r4
 8005d24:	eeb0 0a48 	vmov.f32	s0, s16
 8005d28:	f7fb fa14 	bl	8001154 <PWM_Satuation>
 8005d2c:	ee07 0a90 	vmov	s15, r0
 8005d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d34:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <update_homing_sequence+0x474>)
 8005d36:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005d3a:	4b35      	ldr	r3, [pc, #212]	@ (8005e10 <update_homing_sequence+0x49c>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 834a 	beq.w	80063da <update_homing_sequence+0xa66>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005d46:	4b28      	ldr	r3, [pc, #160]	@ (8005de8 <update_homing_sequence+0x474>)
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	@ (8005e14 <update_homing_sequence+0x4a0>)
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005d56:	4b30      	ldr	r3, [pc, #192]	@ (8005e18 <update_homing_sequence+0x4a4>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e1c <update_homing_sequence+0x4a8>)
 8005d5e:	2206      	movs	r2, #6
 8005d60:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005d62:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <update_homing_sequence+0x49c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005d68:	e337      	b.n	80063da <update_homing_sequence+0xa66>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005de8 <update_homing_sequence+0x474>)
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005d72:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <update_homing_sequence+0x4a0>)
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005d7a:	4b27      	ldr	r3, [pc, #156]	@ (8005e18 <update_homing_sequence+0x4a4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4a25      	ldr	r2, [pc, #148]	@ (8005e18 <update_homing_sequence+0x4a4>)
 8005d82:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005d84:	4b24      	ldr	r3, [pc, #144]	@ (8005e18 <update_homing_sequence+0x4a4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005d8c:	f0c0 8327 	bcc.w	80063de <update_homing_sequence+0xa6a>
			if (first_startup) {
 8005d90:	4b23      	ldr	r3, [pc, #140]	@ (8005e20 <update_homing_sequence+0x4ac>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01f      	beq.n	8005dd8 <update_homing_sequence+0x464>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005d98:	2140      	movs	r1, #64	@ 0x40
 8005d9a:	4822      	ldr	r0, [pc, #136]	@ (8005e24 <update_homing_sequence+0x4b0>)
 8005d9c:	f006 fdde 	bl	800c95c <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	bf14      	ite	ne
 8005da6:	2301      	movne	r3, #1
 8005da8:	2300      	moveq	r3, #0
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

				if (prox_detected) {
 8005dae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <update_homing_sequence+0x456>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005db6:	4b18      	ldr	r3, [pc, #96]	@ (8005e18 <update_homing_sequence+0x4a4>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005dbc:	4b17      	ldr	r3, [pc, #92]	@ (8005e1c <update_homing_sequence+0x4a8>)
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005dc2:	4b19      	ldr	r3, [pc, #100]	@ (8005e28 <update_homing_sequence+0x4b4>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005dc8:	e309      	b.n	80063de <update_homing_sequence+0xa6a>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005dca:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <update_homing_sequence+0x4a8>)
 8005dcc:	2209      	movs	r2, #9
 8005dce:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005dd0:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <update_homing_sequence+0x4b4>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
		break;
 8005dd6:	e302      	b.n	80063de <update_homing_sequence+0xa6a>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005dd8:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <update_homing_sequence+0x4a8>)
 8005dda:	2207      	movs	r2, #7
 8005ddc:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005dde:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <update_homing_sequence+0x4b8>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
		break;
 8005de4:	e2fb      	b.n	80063de <update_homing_sequence+0xa6a>
 8005de6:	bf00      	nop
 8005de8:	20000480 	.word	0x20000480
 8005dec:	c37a0000 	.word	0xc37a0000
 8005df0:	2000078c 	.word	0x2000078c
 8005df4:	20000080 	.word	0x20000080
 8005df8:	20000804 	.word	0x20000804
 8005dfc:	20000708 	.word	0x20000708
 8005e00:	200006ac 	.word	0x200006ac
 8005e04:	447a0000 	.word	0x447a0000
 8005e08:	00000000 	.word	0x00000000
 8005e0c:	20000808 	.word	0x20000808
 8005e10:	20000560 	.word	0x20000560
 8005e14:	200004c0 	.word	0x200004c0
 8005e18:	20000558 	.word	0x20000558
 8005e1c:	20000562 	.word	0x20000562
 8005e20:	20000333 	.word	0x20000333
 8005e24:	48000400 	.word	0x48000400
 8005e28:	2000055c 	.word	0x2000055c
 8005e2c:	2000056e 	.word	0x2000056e

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005e30:	4bc4      	ldr	r3, [pc, #784]	@ (8006144 <update_homing_sequence+0x7d0>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f083 0301 	eor.w	r3, r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d06c      	beq.n	8005f18 <update_homing_sequence+0x5a4>
			// Clear/initialize the static structures
			memset(&revZeroEva, 0, sizeof(Trapezoidal_EvaStruct));
 8005e3e:	2214      	movs	r2, #20
 8005e40:	2100      	movs	r1, #0
 8005e42:	48c1      	ldr	r0, [pc, #772]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005e44:	f00c fbc0 	bl	80125c8 <memset>
			memset(&revZeroGen, 0, sizeof(Trapezoidal_GenStruct));
 8005e48:	2214      	movs	r2, #20
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	48bf      	ldr	r0, [pc, #764]	@ (800614c <update_homing_sequence+0x7d8>)
 8005e4e:	f00c fbbb 	bl	80125c8 <memset>

			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 8005e52:	4bbf      	ldr	r3, [pc, #764]	@ (8006150 <update_homing_sequence+0x7dc>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	64bb      	str	r3, [r7, #72]	@ 0x48
			float normalized_current = normalize_angle(current_rev_pos);
 8005e58:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8005e5c:	f000 faec 	bl	8006438 <normalize_angle>
 8005e60:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
			float current_deg = normalized_current * 180.0f / PI;
 8005e64:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005e68:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8006154 <update_homing_sequence+0x7e0>
 8005e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e70:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8006158 <update_homing_sequence+0x7e4>
 8005e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e78:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float movement_deg = calculate_movement_deg(current_deg,
 8005e82:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8005e86:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8005e8a:	f000 fafb 	bl	8006484 <calculate_movement_deg>
 8005e8e:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 8005e92:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e96:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8006158 <update_homing_sequence+0x7e4>
 8005e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e9e:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8006154 <update_homing_sequence+0x7e0>
 8005ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ea6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 8005eaa:	4aac      	ldr	r2, [pc, #688]	@ (800615c <update_homing_sequence+0x7e8>)
 8005eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eae:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005eb0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005eb4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8006160 <update_homing_sequence+0x7ec>)
 8005ebe:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800615c <update_homing_sequence+0x7e8>)
 8005ec4:	ed93 8a00 	vldr	s16, [r3]
 8005ec8:	4ba5      	ldr	r3, [pc, #660]	@ (8006160 <update_homing_sequence+0x7ec>)
 8005eca:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005ece:	4ba5      	ldr	r3, [pc, #660]	@ (8006164 <update_homing_sequence+0x7f0>)
 8005ed0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f7fa fe3c 	bl	8000b54 <__aeabi_d2f>
 8005edc:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005ede:	4ba1      	ldr	r3, [pc, #644]	@ (8006164 <update_homing_sequence+0x7f0>)
 8005ee0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	f7fa fe34 	bl	8000b54 <__aeabi_d2f>
 8005eec:	4603      	mov	r3, r0
 8005eee:	ee01 3a90 	vmov	s3, r3
 8005ef2:	ee01 4a10 	vmov	s2, r4
 8005ef6:	eef0 0a68 	vmov.f32	s1, s17
 8005efa:	eeb0 0a48 	vmov.f32	s0, s16
 8005efe:	4893      	ldr	r0, [pc, #588]	@ (800614c <update_homing_sequence+0x7d8>)
 8005f00:	f7fe f9a8 	bl	8004254 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 8005f04:	4b90      	ldr	r3, [pc, #576]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 8005f0c:	4b8e      	ldr	r3, [pc, #568]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 8005f12:	4b8c      	ldr	r3, [pc, #560]	@ (8006144 <update_homing_sequence+0x7d0>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 8005f18:	4b8b      	ldr	r3, [pc, #556]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f1a:	7c1b      	ldrb	r3, [r3, #16]
 8005f1c:	f083 0301 	eor.w	r3, r3, #1
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 825d 	beq.w	80063e2 <update_homing_sequence+0xa6e>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005f28:	4b8c      	ldr	r3, [pc, #560]	@ (800615c <update_homing_sequence+0x7e8>)
 8005f2a:	ed93 8a00 	vldr	s16, [r3]
 8005f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8006160 <update_homing_sequence+0x7ec>)
 8005f30:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005f34:	4b8b      	ldr	r3, [pc, #556]	@ (8006164 <update_homing_sequence+0x7f0>)
 8005f36:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fa fe09 	bl	8000b54 <__aeabi_d2f>
 8005f42:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005f44:	4b87      	ldr	r3, [pc, #540]	@ (8006164 <update_homing_sequence+0x7f0>)
 8005f46:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f7fa fe01 	bl	8000b54 <__aeabi_d2f>
 8005f52:	4603      	mov	r3, r0
 8005f54:	ee01 3a90 	vmov	s3, r3
 8005f58:	ee01 4a10 	vmov	s2, r4
 8005f5c:	eef0 0a68 	vmov.f32	s1, s17
 8005f60:	eeb0 0a48 	vmov.f32	s0, s16
 8005f64:	4978      	ldr	r1, [pc, #480]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f66:	4879      	ldr	r0, [pc, #484]	@ (800614c <update_homing_sequence+0x7d8>)
 8005f68:	f7fe fa36 	bl	80043d8 <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 8005f6c:	4b76      	ldr	r3, [pc, #472]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7d      	ldr	r2, [pc, #500]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005f72:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 8005f74:	4b74      	ldr	r3, [pc, #464]	@ (8006148 <update_homing_sequence+0x7d4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a7b      	ldr	r2, [pc, #492]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005f7a:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 8005f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005f7e:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 8005f82:	4b73      	ldr	r3, [pc, #460]	@ (8006150 <update_homing_sequence+0x7dc>)
 8005f84:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005f88:	eeb0 0a67 	vmov.f32	s0, s15
 8005f8c:	f000 fa54 	bl	8006438 <normalize_angle>
 8005f90:	eef0 7a40 	vmov.f32	s15, s0
 8005f94:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 8005f98:	4b73      	ldr	r3, [pc, #460]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005f9a:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 8005f9e:	4b72      	ldr	r3, [pc, #456]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fa4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8006158 <update_homing_sequence+0x7e4>
 8005fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	dd09      	ble.n	8005fc6 <update_homing_sequence+0x652>
				revolute_axis.pos_error -= 2.0f * PI;
 8005fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fb8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800616c <update_homing_sequence+0x7f8>
 8005fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fc0:	4b69      	ldr	r3, [pc, #420]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fc2:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 8005fc6:	4b68      	ldr	r3, [pc, #416]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fcc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006170 <update_homing_sequence+0x7fc>
 8005fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd8:	d509      	bpl.n	8005fee <update_homing_sequence+0x67a>
				revolute_axis.pos_error += 2.0f * PI;
 8005fda:	4b63      	ldr	r3, [pc, #396]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fe0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800616c <update_homing_sequence+0x7f8>
 8005fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005fea:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005fee:	4b5e      	ldr	r3, [pc, #376]	@ (8006168 <update_homing_sequence+0x7f4>)
 8005ff0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff8:	485e      	ldr	r0, [pc, #376]	@ (8006174 <update_homing_sequence+0x800>)
 8005ffa:	f7fb f90d 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ffe:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 8006002:	4b58      	ldr	r3, [pc, #352]	@ (8006164 <update_homing_sequence+0x7f0>)
 8006004:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	f7fa fd5a 	bl	8000ac4 <__aeabi_d2iz>
 8006010:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 8006012:	4b54      	ldr	r3, [pc, #336]	@ (8006164 <update_homing_sequence+0x7f0>)
 8006014:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006018:	60ba      	str	r2, [r7, #8]
 800601a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800601e:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8006020:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006024:	f7fa fd4e 	bl	8000ac4 <__aeabi_d2iz>
 8006028:	4603      	mov	r3, r0
 800602a:	4619      	mov	r1, r3
 800602c:	4620      	mov	r0, r4
 800602e:	eeb0 0a48 	vmov.f32	s0, s16
 8006032:	f7fb f88f 	bl	8001154 <PWM_Satuation>
 8006036:	ee07 0a90 	vmov	s15, r0
 800603a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800603e:	4b4a      	ldr	r3, [pc, #296]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006040:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 8006044:	4b48      	ldr	r3, [pc, #288]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006046:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800604a:	4b47      	ldr	r3, [pc, #284]	@ (8006168 <update_homing_sequence+0x7f4>)
 800604c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006054:	4b44      	ldr	r3, [pc, #272]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006056:	edd3 7a07 	vldr	s15, [r3, #28]
 800605a:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 800605e:	4b42      	ldr	r3, [pc, #264]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006060:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 8006064:	4b40      	ldr	r3, [pc, #256]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006066:	edd3 7a06 	vldr	s15, [r3, #24]
 800606a:	eeb0 0a67 	vmov.f32	s0, s15
 800606e:	4842      	ldr	r0, [pc, #264]	@ (8006178 <update_homing_sequence+0x804>)
 8006070:	f7fb f8d2 	bl	8001218 <PID_CONTROLLER_Compute>
 8006074:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 8006078:	4b3a      	ldr	r3, [pc, #232]	@ (8006164 <update_homing_sequence+0x7f0>)
 800607a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	f7fa fd1f 	bl	8000ac4 <__aeabi_d2iz>
 8006086:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8006088:	4b36      	ldr	r3, [pc, #216]	@ (8006164 <update_homing_sequence+0x7f0>)
 800608a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800608e:	603a      	str	r2, [r7, #0]
 8006090:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006094:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(
 8006096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800609a:	f7fa fd13 	bl	8000ac4 <__aeabi_d2iz>
 800609e:	4603      	mov	r3, r0
 80060a0:	4619      	mov	r1, r3
 80060a2:	4620      	mov	r0, r4
 80060a4:	eeb0 0a48 	vmov.f32	s0, s16
 80060a8:	f7fb f854 	bl	8001154 <PWM_Satuation>
 80060ac:	ee07 0a90 	vmov	s15, r0
 80060b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006168 <update_homing_sequence+0x7f4>)
 80060b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80060ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006168 <update_homing_sequence+0x7f4>)
 80060bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	482d      	ldr	r0, [pc, #180]	@ (800617c <update_homing_sequence+0x808>)
 80060c6:	f7fb fa67 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80060ca:	eef0 7a40 	vmov.f32	s15, s0
 80060ce:	4b26      	ldr	r3, [pc, #152]	@ (8006168 <update_homing_sequence+0x7f4>)
 80060d0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80060d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006150 <update_homing_sequence+0x7dc>)
 80060d6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80060da:	4b29      	ldr	r3, [pc, #164]	@ (8006180 <update_homing_sequence+0x80c>)
 80060dc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80060e0:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8006184 <update_homing_sequence+0x810>
 80060e4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80060e8:	eef0 0a66 	vmov.f32	s1, s13
 80060ec:	eeb0 0a47 	vmov.f32	s0, s14
 80060f0:	4825      	ldr	r0, [pc, #148]	@ (8006188 <update_homing_sequence+0x814>)
 80060f2:	f7fb fae4 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80060f6:	eef0 7a40 	vmov.f32	s15, s0
 80060fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <update_homing_sequence+0x7f4>)
 80060fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8006100:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006102:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006106:	4b18      	ldr	r3, [pc, #96]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006108:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800610c:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <update_homing_sequence+0x7f4>)
 800610e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800611a:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <update_homing_sequence+0x7f4>)
 800611c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006120:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <update_homing_sequence+0x7f4>)
 8006122:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <update_homing_sequence+0x7f0>)
 8006128:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800612c:	4610      	mov	r0, r2
 800612e:	4619      	mov	r1, r3
 8006130:	f7fa fcc8 	bl	8000ac4 <__aeabi_d2iz>
 8006134:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <update_homing_sequence+0x7f0>)
 8006138:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800613c:	4615      	mov	r5, r2
 800613e:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
 8006142:	e023      	b.n	800618c <update_homing_sequence+0x818>
 8006144:	2000056e 	.word	0x2000056e
 8006148:	20000570 	.word	0x20000570
 800614c:	20000584 	.word	0x20000584
 8006150:	20000708 	.word	0x20000708
 8006154:	43340000 	.word	0x43340000
 8006158:	40490fdb 	.word	0x40490fdb
 800615c:	20000598 	.word	0x20000598
 8006160:	2000059c 	.word	0x2000059c
 8006164:	20000000 	.word	0x20000000
 8006168:	200004c0 	.word	0x200004c0
 800616c:	40c90fdb 	.word	0x40c90fdb
 8006170:	c0490fdb 	.word	0xc0490fdb
 8006174:	200007b4 	.word	0x200007b4
 8006178:	200007dc 	.word	0x200007dc
 800617c:	20000810 	.word	0x20000810
 8006180:	200006ac 	.word	0x200006ac
 8006184:	447a0000 	.word	0x447a0000
 8006188:	20000814 	.word	0x20000814
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800618c:	4628      	mov	r0, r5
 800618e:	4631      	mov	r1, r6
 8006190:	f7fa fc98 	bl	8000ac4 <__aeabi_d2iz>
 8006194:	4603      	mov	r3, r0
 8006196:	4619      	mov	r1, r3
 8006198:	4620      	mov	r0, r4
 800619a:	eeb0 0a48 	vmov.f32	s0, s16
 800619e:	f7fa ffd9 	bl	8001154 <PWM_Satuation>
 80061a2:	ee07 0a90 	vmov	s15, r0
 80061a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061aa:	4b94      	ldr	r3, [pc, #592]	@ (80063fc <update_homing_sequence+0xa88>)
 80061ac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 80061b0:	4b93      	ldr	r3, [pc, #588]	@ (8006400 <update_homing_sequence+0xa8c>)
 80061b2:	7c1b      	ldrb	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8114 	beq.w	80063e2 <update_homing_sequence+0xa6e>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 80061ba:	4b90      	ldr	r3, [pc, #576]	@ (80063fc <update_homing_sequence+0xa88>)
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 80061c2:	4b90      	ldr	r3, [pc, #576]	@ (8006404 <update_homing_sequence+0xa90>)
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 80061ca:	4b8c      	ldr	r3, [pc, #560]	@ (80063fc <update_homing_sequence+0xa88>)
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 80061d2:	4b8a      	ldr	r3, [pc, #552]	@ (80063fc <update_homing_sequence+0xa88>)
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 80061da:	4b88      	ldr	r3, [pc, #544]	@ (80063fc <update_homing_sequence+0xa88>)
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 80061e2:	4b89      	ldr	r3, [pc, #548]	@ (8006408 <update_homing_sequence+0xa94>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 80061e8:	4b88      	ldr	r3, [pc, #544]	@ (800640c <update_homing_sequence+0xa98>)
 80061ea:	2208      	movs	r2, #8
 80061ec:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 80061ee:	4b88      	ldr	r3, [pc, #544]	@ (8006410 <update_homing_sequence+0xa9c>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 80061f4:	4b87      	ldr	r3, [pc, #540]	@ (8006414 <update_homing_sequence+0xaa0>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80061fa:	e0f2      	b.n	80063e2 <update_homing_sequence+0xa6e>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80061fc:	4b81      	ldr	r3, [pc, #516]	@ (8006404 <update_homing_sequence+0xa90>)
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8006204:	4b7d      	ldr	r3, [pc, #500]	@ (80063fc <update_homing_sequence+0xa88>)
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800620c:	4b7e      	ldr	r3, [pc, #504]	@ (8006408 <update_homing_sequence+0xa94>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a7d      	ldr	r2, [pc, #500]	@ (8006408 <update_homing_sequence+0xa94>)
 8006214:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8006216:	4b7c      	ldr	r3, [pc, #496]	@ (8006408 <update_homing_sequence+0xa94>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800621e:	f0c0 80e2 	bcc.w	80063e6 <update_homing_sequence+0xa72>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8006222:	2140      	movs	r1, #64	@ 0x40
 8006224:	487c      	ldr	r0, [pc, #496]	@ (8006418 <update_homing_sequence+0xaa4>)
 8006226:	f006 fb99 	bl	800c95c <HAL_GPIO_ReadPin>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			if (prox_detected) {
 8006238:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <update_homing_sequence+0x8e0>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8006240:	4b71      	ldr	r3, [pc, #452]	@ (8006408 <update_homing_sequence+0xa94>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8006246:	4b71      	ldr	r3, [pc, #452]	@ (800640c <update_homing_sequence+0xa98>)
 8006248:	220a      	movs	r2, #10
 800624a:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 800624c:	4b70      	ldr	r3, [pc, #448]	@ (8006410 <update_homing_sequence+0xa9c>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8006252:	e0c8      	b.n	80063e6 <update_homing_sequence+0xa72>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8006254:	4b6d      	ldr	r3, [pc, #436]	@ (800640c <update_homing_sequence+0xa98>)
 8006256:	2209      	movs	r2, #9
 8006258:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 800625a:	4b6d      	ldr	r3, [pc, #436]	@ (8006410 <update_homing_sequence+0xa9c>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
		break;
 8006260:	e0c1      	b.n	80063e6 <update_homing_sequence+0xa72>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8006262:	4b66      	ldr	r3, [pc, #408]	@ (80063fc <update_homing_sequence+0xa88>)
 8006264:	edd3 7a07 	vldr	s15, [r3, #28]
 8006268:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800626c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8006270:	4b62      	ldr	r3, [pc, #392]	@ (80063fc <update_homing_sequence+0xa88>)
 8006272:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8006276:	4b61      	ldr	r3, [pc, #388]	@ (80063fc <update_homing_sequence+0xa88>)
 8006278:	edd3 7a06 	vldr	s15, [r3, #24]
 800627c:	eeb0 0a67 	vmov.f32	s0, s15
 8006280:	4866      	ldr	r0, [pc, #408]	@ (800641c <update_homing_sequence+0xaa8>)
 8006282:	f7fa ffc9 	bl	8001218 <PID_CONTROLLER_Compute>
 8006286:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 800628a:	4b65      	ldr	r3, [pc, #404]	@ (8006420 <update_homing_sequence+0xaac>)
 800628c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	f7fa fc16 	bl	8000ac4 <__aeabi_d2iz>
 8006298:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800629a:	4b61      	ldr	r3, [pc, #388]	@ (8006420 <update_homing_sequence+0xaac>)
 800629c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80062a0:	4692      	mov	sl, r2
 80062a2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 80062a6:	4650      	mov	r0, sl
 80062a8:	4659      	mov	r1, fp
 80062aa:	f7fa fc0b 	bl	8000ac4 <__aeabi_d2iz>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4619      	mov	r1, r3
 80062b2:	4620      	mov	r0, r4
 80062b4:	eeb0 0a48 	vmov.f32	s0, s16
 80062b8:	f7fa ff4c 	bl	8001154 <PWM_Satuation>
 80062bc:	ee07 0a90 	vmov	s15, r0
 80062c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c4:	4b4d      	ldr	r3, [pc, #308]	@ (80063fc <update_homing_sequence+0xa88>)
 80062c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80062ca:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80062ce:	4855      	ldr	r0, [pc, #340]	@ (8006424 <update_homing_sequence+0xab0>)
 80062d0:	f7fb f962 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80062d4:	eef0 7a40 	vmov.f32	s15, s0
 80062d8:	4b48      	ldr	r3, [pc, #288]	@ (80063fc <update_homing_sequence+0xa88>)
 80062da:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80062de:	4b52      	ldr	r3, [pc, #328]	@ (8006428 <update_homing_sequence+0xab4>)
 80062e0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80062e4:	4b51      	ldr	r3, [pc, #324]	@ (800642c <update_homing_sequence+0xab8>)
 80062e6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80062ea:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8006430 <update_homing_sequence+0xabc>
 80062ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80062f2:	eef0 0a66 	vmov.f32	s1, s13
 80062f6:	eeb0 0a47 	vmov.f32	s0, s14
 80062fa:	484e      	ldr	r0, [pc, #312]	@ (8006434 <update_homing_sequence+0xac0>)
 80062fc:	f7fb f9df 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006300:	eef0 7a40 	vmov.f32	s15, s0
 8006304:	4b3d      	ldr	r3, [pc, #244]	@ (80063fc <update_homing_sequence+0xa88>)
 8006306:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 800630a:	4b3c      	ldr	r3, [pc, #240]	@ (80063fc <update_homing_sequence+0xa88>)
 800630c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006310:	4b3a      	ldr	r3, [pc, #232]	@ (80063fc <update_homing_sequence+0xa88>)
 8006312:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006316:	4b39      	ldr	r3, [pc, #228]	@ (80063fc <update_homing_sequence+0xa88>)
 8006318:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006324:	4b35      	ldr	r3, [pc, #212]	@ (80063fc <update_homing_sequence+0xa88>)
 8006326:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800632a:	4b34      	ldr	r3, [pc, #208]	@ (80063fc <update_homing_sequence+0xa88>)
 800632c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8006330:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <update_homing_sequence+0xaac>)
 8006332:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	f7fa fbc3 	bl	8000ac4 <__aeabi_d2iz>
 800633e:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006340:	4b37      	ldr	r3, [pc, #220]	@ (8006420 <update_homing_sequence+0xaac>)
 8006342:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006346:	4690      	mov	r8, r2
 8006348:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbb8 	bl	8000ac4 <__aeabi_d2iz>
 8006354:	4603      	mov	r3, r0
 8006356:	4619      	mov	r1, r3
 8006358:	4620      	mov	r0, r4
 800635a:	eeb0 0a48 	vmov.f32	s0, s16
 800635e:	f7fa fef9 	bl	8001154 <PWM_Satuation>
 8006362:	ee07 0a90 	vmov	s15, r0
 8006366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <update_homing_sequence+0xa88>)
 800636c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8006370:	4b27      	ldr	r3, [pc, #156]	@ (8006410 <update_homing_sequence+0xa9c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d038      	beq.n	80063ea <update_homing_sequence+0xa76>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8006378:	4b22      	ldr	r3, [pc, #136]	@ (8006404 <update_homing_sequence+0xa90>)
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8006380:	4b1e      	ldr	r3, [pc, #120]	@ (80063fc <update_homing_sequence+0xa88>)
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8006388:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <update_homing_sequence+0xa94>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 800638e:	4b1f      	ldr	r3, [pc, #124]	@ (800640c <update_homing_sequence+0xa98>)
 8006390:	220a      	movs	r2, #10
 8006392:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006394:	e029      	b.n	80063ea <update_homing_sequence+0xa76>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8006396:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <update_homing_sequence+0xa90>)
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800639e:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <update_homing_sequence+0xa88>)
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80063a6:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <update_homing_sequence+0xa94>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	4a16      	ldr	r2, [pc, #88]	@ (8006408 <update_homing_sequence+0xa94>)
 80063ae:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80063b0:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <update_homing_sequence+0xa94>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80063b8:	d319      	bcc.n	80063ee <update_homing_sequence+0xa7a>
			homing_state = HOMING_COMPLETE;
 80063ba:	4b14      	ldr	r3, [pc, #80]	@ (800640c <update_homing_sequence+0xa98>)
 80063bc:	220b      	movs	r2, #11
 80063be:	701a      	strb	r2, [r3, #0]
		}
		break;
 80063c0:	e015      	b.n	80063ee <update_homing_sequence+0xa7a>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 80063c2:	f7ff f923 	bl	800560c <__NVIC_SystemReset>
		return;
 80063c6:	bf00      	nop
 80063c8:	e012      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;

	case HOMING_IDLE:
	default:
		break;
 80063ca:	bf00      	nop
 80063cc:	e010      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063ce:	bf00      	nop
 80063d0:	e00e      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063d2:	bf00      	nop
 80063d4:	e00c      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063d6:	bf00      	nop
 80063d8:	e00a      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063da:	bf00      	nop
 80063dc:	e008      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063de:	bf00      	nop
 80063e0:	e006      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <update_homing_sequence+0xa7c>
		break;
 80063ee:	bf00      	nop
	}
}
 80063f0:	3754      	adds	r7, #84	@ 0x54
 80063f2:	46bd      	mov	sp, r7
 80063f4:	ecbd 8b02 	vpop	{d8}
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	200004c0 	.word	0x200004c0
 8006400:	20000570 	.word	0x20000570
 8006404:	20000480 	.word	0x20000480
 8006408:	20000558 	.word	0x20000558
 800640c:	20000562 	.word	0x20000562
 8006410:	2000055c 	.word	0x2000055c
 8006414:	2000056e 	.word	0x2000056e
 8006418:	48000400 	.word	0x48000400
 800641c:	200007dc 	.word	0x200007dc
 8006420:	20000000 	.word	0x20000000
 8006424:	20000810 	.word	0x20000810
 8006428:	20000708 	.word	0x20000708
 800642c:	200006ac 	.word	0x200006ac
 8006430:	447a0000 	.word	0x447a0000
 8006434:	20000814 	.word	0x20000814

08006438 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006442:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8006480 <normalize_angle+0x48>
 8006446:	ed97 0a01 	vldr	s0, [r7, #4]
 800644a:	f00c f9b9 	bl	80127c0 <fmodf>
 800644e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006452:	edd7 7a03 	vldr	s15, [r7, #12]
 8006456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	d507      	bpl.n	8006470 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006460:	edd7 7a03 	vldr	s15, [r7, #12]
 8006464:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8006480 <normalize_angle+0x48>
 8006468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800646c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	ee07 3a90 	vmov	s15, r3
}
 8006476:	eeb0 0a67 	vmov.f32	s0, s15
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40c90fdb 	.word	0x40c90fdb

08006484 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	ed87 0a01 	vstr	s0, [r7, #4]
 800648e:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8006498:	edd7 7a01 	vldr	s15, [r7, #4]
 800649c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006600 <calculate_movement_deg+0x17c>
 80064a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a8:	d508      	bpl.n	80064bc <calculate_movement_deg+0x38>
 80064aa:	edd7 7a00 	vldr	s15, [r7]
 80064ae:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006600 <calculate_movement_deg+0x17c>
 80064b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ba:	d411      	bmi.n	80064e0 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80064bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80064c0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006600 <calculate_movement_deg+0x17c>
 80064c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064cc:	db33      	blt.n	8006536 <calculate_movement_deg+0xb2>
 80064ce:	edd7 7a00 	vldr	s15, [r7]
 80064d2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006600 <calculate_movement_deg+0x17c>
 80064d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064de:	db2a      	blt.n	8006536 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 80064e0:	ed97 7a00 	vldr	s14, [r7]
 80064e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80064e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ec:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 80064f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80064f4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006600 <calculate_movement_deg+0x17c>
 80064f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006500:	dd07      	ble.n	8006512 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006502:	edd7 7a03 	vldr	s15, [r7, #12]
 8006506:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006604 <calculate_movement_deg+0x180>
 800650a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800650e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006512:	edd7 7a03 	vldr	s15, [r7, #12]
 8006516:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006608 <calculate_movement_deg+0x184>
 800651a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	d562      	bpl.n	80065ea <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006524:	edd7 7a03 	vldr	s15, [r7, #12]
 8006528:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006604 <calculate_movement_deg+0x180>
 800652c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006530:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006534:	e059      	b.n	80065ea <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006536:	edd7 7a01 	vldr	s15, [r7, #4]
 800653a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006600 <calculate_movement_deg+0x17c>
 800653e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	d52a      	bpl.n	800659e <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006548:	edd7 7a00 	vldr	s15, [r7]
 800654c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006600 <calculate_movement_deg+0x17c>
 8006550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006554:	ed97 7a01 	vldr	s14, [r7, #4]
 8006558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006560:	d50e      	bpl.n	8006580 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006562:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006604 <calculate_movement_deg+0x180>
 8006566:	edd7 7a00 	vldr	s15, [r7]
 800656a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800656e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006576:	eef1 7a67 	vneg.f32	s15, s15
 800657a:	edc7 7a03 	vstr	s15, [r7, #12]
 800657e:	e034      	b.n	80065ea <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8006580:	ed97 7a01 	vldr	s14, [r7, #4]
 8006584:	edd7 7a00 	vldr	s15, [r7]
 8006588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800658c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006604 <calculate_movement_deg+0x180>
 8006590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006594:	eef1 7a67 	vneg.f32	s15, s15
 8006598:	edc7 7a03 	vstr	s15, [r7, #12]
 800659c:	e025      	b.n	80065ea <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 800659e:	edd7 7a01 	vldr	s15, [r7, #4]
 80065a2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006600 <calculate_movement_deg+0x17c>
 80065a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065aa:	ed97 7a00 	vldr	s14, [r7]
 80065ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b6:	d50c      	bpl.n	80065d2 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80065b8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006604 <calculate_movement_deg+0x180>
 80065bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065c4:	ed97 7a00 	vldr	s14, [r7]
 80065c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065cc:	edc7 7a03 	vstr	s15, [r7, #12]
 80065d0:	e00b      	b.n	80065ea <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80065d2:	ed97 7a00 	vldr	s14, [r7]
 80065d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80065da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065de:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006604 <calculate_movement_deg+0x180>
 80065e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065e6:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	ee07 3a90 	vmov	s15, r3
}
 80065f0:	eeb0 0a67 	vmov.f32	s0, s15
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	43340000 	.word	0x43340000
 8006604:	43b40000 	.word	0x43b40000
 8006608:	c3340000 	.word	0xc3340000

0800660c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	ed2d 8b02 	vpush	{d8}
 8006612:	b089      	sub	sp, #36	@ 0x24
 8006614:	af00      	add	r7, sp, #0
 8006616:	ed87 0a01 	vstr	s0, [r7, #4]
 800661a:	edc7 0a00 	vstr	s1, [r7]
	if (is_emergency_active() || homing_active) {
 800661e:	f000 feb7 	bl	8007390 <is_emergency_active>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 809e 	bne.w	8006766 <start_combined_trajectory+0x15a>
 800662a:	4b52      	ldr	r3, [pc, #328]	@ (8006774 <start_combined_trajectory+0x168>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 8099 	bne.w	8006766 <start_combined_trajectory+0x15a>
		return; // Don't start trajectory if in emergency or homing
	}

	float pris_current = prismatic_encoder.mm;
 8006634:	4b50      	ldr	r3, [pc, #320]	@ (8006778 <start_combined_trajectory+0x16c>)
 8006636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006638:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 800663a:	4b50      	ldr	r3, [pc, #320]	@ (800677c <start_combined_trajectory+0x170>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	61bb      	str	r3, [r7, #24]

	prisEva.t = 0.0f;
 8006640:	4b4f      	ldr	r3, [pc, #316]	@ (8006780 <start_combined_trajectory+0x174>)
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8006648:	4b4d      	ldr	r3, [pc, #308]	@ (8006780 <start_combined_trajectory+0x174>)
 800664a:	2200      	movs	r2, #0
 800664c:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 800664e:	4b4d      	ldr	r3, [pc, #308]	@ (8006784 <start_combined_trajectory+0x178>)
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8006656:	4b4b      	ldr	r3, [pc, #300]	@ (8006784 <start_combined_trajectory+0x178>)
 8006658:	2200      	movs	r2, #0
 800665a:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 800665c:	4a4a      	ldr	r2, [pc, #296]	@ (8006788 <start_combined_trajectory+0x17c>)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006662:	4a4a      	ldr	r2, [pc, #296]	@ (800678c <start_combined_trajectory+0x180>)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	60d3      	str	r3, [r2, #12]
	prismatic_axis.target_pos = fminf(
 8006668:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8006790 <start_combined_trajectory+0x184>
 800666c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006670:	f00c f96e 	bl	8012950 <fmaxf>
 8006674:	eef0 7a40 	vmov.f32	s15, s0
 8006678:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8006794 <start_combined_trajectory+0x188>
 800667c:	eeb0 0a67 	vmov.f32	s0, s15
 8006680:	f00c f983 	bl	801298a <fminf>
 8006684:	eef0 7a40 	vmov.f32	s15, s0
 8006688:	4b3f      	ldr	r3, [pc, #252]	@ (8006788 <start_combined_trajectory+0x17c>)
 800668a:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS),
			PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 800668e:	ed97 0a06 	vldr	s0, [r7, #24]
 8006692:	f7ff fed1 	bl	8006438 <normalize_angle>
 8006696:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_deg = normalized_current * 180.0f / PI;
 800669a:	edd7 7a05 	vldr	s15, [r7, #20]
 800669e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006798 <start_combined_trajectory+0x18c>
 80066a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800679c <start_combined_trajectory+0x190>
 80066aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ae:	edc7 7a04 	vstr	s15, [r7, #16]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 80066b2:	edd7 0a00 	vldr	s1, [r7]
 80066b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80066ba:	f7ff fee3 	bl	8006484 <calculate_movement_deg>
 80066be:	eef0 7a40 	vmov.f32	s15, s0
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <start_combined_trajectory+0x194>)
 80066c4:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 80066c8:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <start_combined_trajectory+0x194>)
 80066ca:	edd3 7a00 	vldr	s15, [r3]
 80066ce:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800679c <start_combined_trajectory+0x190>
 80066d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066d6:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8006798 <start_combined_trajectory+0x18c>
 80066da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066de:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 80066e2:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <start_combined_trajectory+0x180>)
 80066e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80066e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	4b26      	ldr	r3, [pc, #152]	@ (800678c <start_combined_trajectory+0x180>)
 80066f2:	edc3 7a04 	vstr	s15, [r3, #16]

	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066f6:	4b24      	ldr	r3, [pc, #144]	@ (8006788 <start_combined_trajectory+0x17c>)
 80066f8:	ed93 8a03 	vldr	s16, [r3, #12]
 80066fc:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <start_combined_trajectory+0x17c>)
 80066fe:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006702:	4b28      	ldr	r3, [pc, #160]	@ (80067a4 <start_combined_trajectory+0x198>)
 8006704:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	f7fa fa22 	bl	8000b54 <__aeabi_d2f>
 8006710:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006712:	4b24      	ldr	r3, [pc, #144]	@ (80067a4 <start_combined_trajectory+0x198>)
 8006714:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f7fa fa1a 	bl	8000b54 <__aeabi_d2f>
 8006720:	4603      	mov	r3, r0
 8006722:	ee01 3a90 	vmov	s3, r3
 8006726:	ee01 4a10 	vmov	s2, r4
 800672a:	eef0 0a68 	vmov.f32	s1, s17
 800672e:	eeb0 0a48 	vmov.f32	s0, s16
 8006732:	481d      	ldr	r0, [pc, #116]	@ (80067a8 <start_combined_trajectory+0x19c>)
 8006734:	f7fd fd8e 	bl	8004254 <Trapezoidal_Generator>

	prismatic_axis.trajectory_active = false;
 8006738:	4b13      	ldr	r3, [pc, #76]	@ (8006788 <start_combined_trajectory+0x17c>)
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006740:	4b12      	ldr	r3, [pc, #72]	@ (800678c <start_combined_trajectory+0x180>)
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	plotter_pen_up();
 8006748:	f002 fdc8 	bl	80092dc <plotter_pen_up>
	motion_delay_timer = 0;
 800674c:	4b17      	ldr	r3, [pc, #92]	@ (80067ac <start_combined_trajectory+0x1a0>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <start_combined_trajectory+0x1a4>)
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]

	registerFrame[BaseSystem_Status].U16 = 0;
 8006758:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <start_combined_trajectory+0x1a8>)
 800675a:	2200      	movs	r2, #0
 800675c:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <start_combined_trajectory+0x1a8>)
 8006760:	2200      	movs	r2, #0
 8006762:	841a      	strh	r2, [r3, #32]
 8006764:	e000      	b.n	8006768 <start_combined_trajectory+0x15c>
		return; // Don't start trajectory if in emergency or homing
 8006766:	bf00      	nop
}
 8006768:	3724      	adds	r7, #36	@ 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	ecbd 8b02 	vpop	{d8}
 8006770:	bd90      	pop	{r4, r7, pc}
 8006772:	bf00      	nop
 8006774:	20000563 	.word	0x20000563
 8006778:	200006ac 	.word	0x200006ac
 800677c:	20000708 	.word	0x20000708
 8006780:	2000052c 	.word	0x2000052c
 8006784:	20000540 	.word	0x20000540
 8006788:	20000480 	.word	0x20000480
 800678c:	200004c0 	.word	0x200004c0
 8006790:	00000000 	.word	0x00000000
 8006794:	43960000 	.word	0x43960000
 8006798:	43340000 	.word	0x43340000
 800679c:	40490fdb 	.word	0x40490fdb
 80067a0:	200005a8 	.word	0x200005a8
 80067a4:	20000080 	.word	0x20000080
 80067a8:	20000504 	.word	0x20000504
 80067ac:	20000558 	.word	0x20000558
 80067b0:	20000500 	.word	0x20000500
 80067b4:	20001288 	.word	0x20001288

080067b8 <update_position_control>:

void update_position_control(void) {
 80067b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067bc:	ed2d 8b02 	vpush	{d8}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80067c4:	4b50      	ldr	r3, [pc, #320]	@ (8006908 <update_position_control+0x150>)
 80067c6:	ed93 7a00 	vldr	s14, [r3]
 80067ca:	4b50      	ldr	r3, [pc, #320]	@ (800690c <update_position_control+0x154>)
 80067cc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80067d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006908 <update_position_control+0x150>)
 80067d6:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 80067da:	4b4b      	ldr	r3, [pc, #300]	@ (8006908 <update_position_control+0x150>)
 80067dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80067e0:	eeb0 0a67 	vmov.f32	s0, s15
 80067e4:	484a      	ldr	r0, [pc, #296]	@ (8006910 <update_position_control+0x158>)
 80067e6:	f7fa fd17 	bl	8001218 <PID_CONTROLLER_Compute>
 80067ea:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80067ee:	4b49      	ldr	r3, [pc, #292]	@ (8006914 <update_position_control+0x15c>)
 80067f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80067f4:	4610      	mov	r0, r2
 80067f6:	4619      	mov	r1, r3
 80067f8:	f7fa f964 	bl	8000ac4 <__aeabi_d2iz>
 80067fc:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80067fe:	4b45      	ldr	r3, [pc, #276]	@ (8006914 <update_position_control+0x15c>)
 8006800:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006804:	4690      	mov	r8, r2
 8006806:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7fa f959 	bl	8000ac4 <__aeabi_d2iz>
 8006812:	4603      	mov	r3, r0
 8006814:	4619      	mov	r1, r3
 8006816:	4630      	mov	r0, r6
 8006818:	eeb0 0a48 	vmov.f32	s0, s16
 800681c:	f7fa fc9a 	bl	8001154 <PWM_Satuation>
 8006820:	ee07 0a90 	vmov	s15, r0
 8006824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006828:	4b37      	ldr	r3, [pc, #220]	@ (8006908 <update_position_control+0x150>)
 800682a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 800682e:	4b3a      	ldr	r3, [pc, #232]	@ (8006918 <update_position_control+0x160>)
 8006830:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006834:	eeb0 0a67 	vmov.f32	s0, s15
 8006838:	f7ff fdfe 	bl	8006438 <normalize_angle>
 800683c:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006840:	4b36      	ldr	r3, [pc, #216]	@ (800691c <update_position_control+0x164>)
 8006842:	ed93 7a00 	vldr	s14, [r3]
 8006846:	edd7 7a01 	vldr	s15, [r7, #4]
 800684a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684e:	4b33      	ldr	r3, [pc, #204]	@ (800691c <update_position_control+0x164>)
 8006850:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006854:	4b31      	ldr	r3, [pc, #196]	@ (800691c <update_position_control+0x164>)
 8006856:	edd3 7a05 	vldr	s15, [r3, #20]
 800685a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006920 <update_position_control+0x168>
 800685e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006866:	dd09      	ble.n	800687c <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006868:	4b2c      	ldr	r3, [pc, #176]	@ (800691c <update_position_control+0x164>)
 800686a:	edd3 7a05 	vldr	s15, [r3, #20]
 800686e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006924 <update_position_control+0x16c>
 8006872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006876:	4b29      	ldr	r3, [pc, #164]	@ (800691c <update_position_control+0x164>)
 8006878:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 800687c:	4b27      	ldr	r3, [pc, #156]	@ (800691c <update_position_control+0x164>)
 800687e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006882:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006928 <update_position_control+0x170>
 8006886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688e:	d509      	bpl.n	80068a4 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006890:	4b22      	ldr	r3, [pc, #136]	@ (800691c <update_position_control+0x164>)
 8006892:	edd3 7a05 	vldr	s15, [r3, #20]
 8006896:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006924 <update_position_control+0x16c>
 800689a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800689e:	4b1f      	ldr	r3, [pc, #124]	@ (800691c <update_position_control+0x164>)
 80068a0:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 80068a4:	4b1d      	ldr	r3, [pc, #116]	@ (800691c <update_position_control+0x164>)
 80068a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80068aa:	eeb0 0a67 	vmov.f32	s0, s15
 80068ae:	481f      	ldr	r0, [pc, #124]	@ (800692c <update_position_control+0x174>)
 80068b0:	f7fa fcb2 	bl	8001218 <PID_CONTROLLER_Compute>
 80068b4:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 80068b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006930 <update_position_control+0x178>)
 80068ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	f7fa f8ff 	bl	8000ac4 <__aeabi_d2iz>
 80068c6:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <update_position_control+0x178>)
 80068ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80068ce:	4614      	mov	r4, r2
 80068d0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7fa f8f4 	bl	8000ac4 <__aeabi_d2iz>
 80068dc:	4603      	mov	r3, r0
 80068de:	4619      	mov	r1, r3
 80068e0:	4630      	mov	r0, r6
 80068e2:	eeb0 0a48 	vmov.f32	s0, s16
 80068e6:	f7fa fc35 	bl	8001154 <PWM_Satuation>
 80068ea:	ee07 0a90 	vmov	s15, r0
 80068ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068f2:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <update_position_control+0x164>)
 80068f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	ecbd 8b02 	vpop	{d8}
 8006902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006906:	bf00      	nop
 8006908:	20000480 	.word	0x20000480
 800690c:	200006ac 	.word	0x200006ac
 8006910:	20000764 	.word	0x20000764
 8006914:	20000080 	.word	0x20000080
 8006918:	20000708 	.word	0x20000708
 800691c:	200004c0 	.word	0x200004c0
 8006920:	40490fdb 	.word	0x40490fdb
 8006924:	40c90fdb 	.word	0x40c90fdb
 8006928:	c0490fdb 	.word	0xc0490fdb
 800692c:	200007b4 	.word	0x200007b4
 8006930:	20000000 	.word	0x20000000

08006934 <update_velocity_control>:

void update_velocity_control(void) {
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	ed2d 8b02 	vpush	{d8}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 8006940:	4b96      	ldr	r3, [pc, #600]	@ (8006b9c <update_velocity_control+0x268>)
 8006942:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006946:	2b00      	cmp	r3, #0
 8006948:	d010      	beq.n	800696c <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800694a:	4b94      	ldr	r3, [pc, #592]	@ (8006b9c <update_velocity_control+0x268>)
 800694c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006950:	4b92      	ldr	r3, [pc, #584]	@ (8006b9c <update_velocity_control+0x268>)
 8006952:	edd3 7a01 	vldr	s15, [r3, #4]
 8006956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800695a:	4b90      	ldr	r3, [pc, #576]	@ (8006b9c <update_velocity_control+0x268>)
 800695c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006960:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006964:	4b8d      	ldr	r3, [pc, #564]	@ (8006b9c <update_velocity_control+0x268>)
 8006966:	edc3 7a06 	vstr	s15, [r3, #24]
 800696a:	e00a      	b.n	8006982 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800696c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b9c <update_velocity_control+0x268>)
 800696e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006972:	4b8a      	ldr	r3, [pc, #552]	@ (8006b9c <update_velocity_control+0x268>)
 8006974:	edd3 7a07 	vldr	s15, [r3, #28]
 8006978:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800697c:	4b87      	ldr	r3, [pc, #540]	@ (8006b9c <update_velocity_control+0x268>)
 800697e:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006982:	4b86      	ldr	r3, [pc, #536]	@ (8006b9c <update_velocity_control+0x268>)
 8006984:	edd3 7a06 	vldr	s15, [r3, #24]
 8006988:	eeb0 0a67 	vmov.f32	s0, s15
 800698c:	4884      	ldr	r0, [pc, #528]	@ (8006ba0 <update_velocity_control+0x26c>)
 800698e:	f7fa fc43 	bl	8001218 <PID_CONTROLLER_Compute>
 8006992:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006996:	4b83      	ldr	r3, [pc, #524]	@ (8006ba4 <update_velocity_control+0x270>)
 8006998:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	f7fa f890 	bl	8000ac4 <__aeabi_d2iz>
 80069a4:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80069a6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba4 <update_velocity_control+0x270>)
 80069a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80069ac:	603a      	str	r2, [r7, #0]
 80069ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80069b2:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 80069b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b8:	f7fa f884 	bl	8000ac4 <__aeabi_d2iz>
 80069bc:	4603      	mov	r3, r0
 80069be:	4619      	mov	r1, r3
 80069c0:	4630      	mov	r0, r6
 80069c2:	eeb0 0a48 	vmov.f32	s0, s16
 80069c6:	f7fa fbc5 	bl	8001154 <PWM_Satuation>
 80069ca:	ee07 0a90 	vmov	s15, r0
 80069ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d2:	4b72      	ldr	r3, [pc, #456]	@ (8006b9c <update_velocity_control+0x268>)
 80069d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 80069d8:	4b70      	ldr	r3, [pc, #448]	@ (8006b9c <update_velocity_control+0x268>)
 80069da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02c      	beq.n	8006a3c <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 80069e2:	4b6e      	ldr	r3, [pc, #440]	@ (8006b9c <update_velocity_control+0x268>)
 80069e4:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80069e8:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ba8 <update_velocity_control+0x274>
 80069ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80069f0:	eeb0 0a47 	vmov.f32	s0, s14
 80069f4:	486d      	ldr	r0, [pc, #436]	@ (8006bac <update_velocity_control+0x278>)
 80069f6:	f7fa ff4d 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 80069fa:	eef0 7a40 	vmov.f32	s15, s0
 80069fe:	4b67      	ldr	r3, [pc, #412]	@ (8006b9c <update_velocity_control+0x268>)
 8006a00:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a04:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb0 <update_velocity_control+0x27c>)
 8006a06:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb4 <update_velocity_control+0x280>)
 8006a0c:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006a10:	4b69      	ldr	r3, [pc, #420]	@ (8006bb8 <update_velocity_control+0x284>)
 8006a12:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a16:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006ba8 <update_velocity_control+0x274>
 8006a1a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006a1e:	eeb0 1a46 	vmov.f32	s2, s12
 8006a22:	eef0 0a66 	vmov.f32	s1, s13
 8006a26:	eeb0 0a47 	vmov.f32	s0, s14
 8006a2a:	4864      	ldr	r0, [pc, #400]	@ (8006bbc <update_velocity_control+0x288>)
 8006a2c:	f7fa ffc5 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8006a30:	eef0 7a40 	vmov.f32	s15, s0
 8006a34:	4b59      	ldr	r3, [pc, #356]	@ (8006b9c <update_velocity_control+0x268>)
 8006a36:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006a3a:	e007      	b.n	8006a4c <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006a3c:	4b57      	ldr	r3, [pc, #348]	@ (8006b9c <update_velocity_control+0x268>)
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006a44:	4b55      	ldr	r3, [pc, #340]	@ (8006b9c <update_velocity_control+0x268>)
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006a4c:	4b53      	ldr	r3, [pc, #332]	@ (8006b9c <update_velocity_control+0x268>)
 8006a4e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006a52:	4b52      	ldr	r3, [pc, #328]	@ (8006b9c <update_velocity_control+0x268>)
 8006a54:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006a58:	4b50      	ldr	r3, [pc, #320]	@ (8006b9c <update_velocity_control+0x268>)
 8006a5a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a66:	4b4d      	ldr	r3, [pc, #308]	@ (8006b9c <update_velocity_control+0x268>)
 8006a68:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b9c <update_velocity_control+0x268>)
 8006a6e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a72:	4b4c      	ldr	r3, [pc, #304]	@ (8006ba4 <update_velocity_control+0x270>)
 8006a74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7fa f822 	bl	8000ac4 <__aeabi_d2iz>
 8006a80:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a82:	4b48      	ldr	r3, [pc, #288]	@ (8006ba4 <update_velocity_control+0x270>)
 8006a84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006a88:	4692      	mov	sl, r2
 8006a8a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a8e:	4650      	mov	r0, sl
 8006a90:	4659      	mov	r1, fp
 8006a92:	f7fa f817 	bl	8000ac4 <__aeabi_d2iz>
 8006a96:	4603      	mov	r3, r0
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa0:	f7fa fb58 	bl	8001154 <PWM_Satuation>
 8006aa4:	ee07 0a90 	vmov	s15, r0
 8006aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aac:	4b3b      	ldr	r3, [pc, #236]	@ (8006b9c <update_velocity_control+0x268>)
 8006aae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006ab2:	4b40      	ldr	r3, [pc, #256]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006abc:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb4 <update_velocity_control+0x280>)
 8006abe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006acc:	4b39      	ldr	r3, [pc, #228]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ace:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006ad6:	4b37      	ldr	r3, [pc, #220]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ad8:	edc3 7a06 	vstr	s15, [r3, #24]
 8006adc:	e00a      	b.n	8006af4 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006ade:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ae0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006ae4:	4b33      	ldr	r3, [pc, #204]	@ (8006bb4 <update_velocity_control+0x280>)
 8006ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8006aea:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006aee:	4b31      	ldr	r3, [pc, #196]	@ (8006bb4 <update_velocity_control+0x280>)
 8006af0:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006af4:	4b2f      	ldr	r3, [pc, #188]	@ (8006bb4 <update_velocity_control+0x280>)
 8006af6:	edd3 7a06 	vldr	s15, [r3, #24]
 8006afa:	eeb0 0a67 	vmov.f32	s0, s15
 8006afe:	4830      	ldr	r0, [pc, #192]	@ (8006bc0 <update_velocity_control+0x28c>)
 8006b00:	f7fa fb8a 	bl	8001218 <PID_CONTROLLER_Compute>
 8006b04:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006b08:	4b2e      	ldr	r3, [pc, #184]	@ (8006bc4 <update_velocity_control+0x290>)
 8006b0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	f7f9 ffd7 	bl	8000ac4 <__aeabi_d2iz>
 8006b16:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006b18:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc4 <update_velocity_control+0x290>)
 8006b1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b1e:	4690      	mov	r8, r2
 8006b20:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006b24:	4640      	mov	r0, r8
 8006b26:	4649      	mov	r1, r9
 8006b28:	f7f9 ffcc 	bl	8000ac4 <__aeabi_d2iz>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4630      	mov	r0, r6
 8006b32:	eeb0 0a48 	vmov.f32	s0, s16
 8006b36:	f7fa fb0d 	bl	8001154 <PWM_Satuation>
 8006b3a:	ee07 0a90 	vmov	s15, r0
 8006b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b42:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb4 <update_velocity_control+0x280>)
 8006b44:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006b48:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb4 <update_velocity_control+0x280>)
 8006b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d03e      	beq.n	8006bd0 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006b52:	4b18      	ldr	r3, [pc, #96]	@ (8006bb4 <update_velocity_control+0x280>)
 8006b54:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b58:	eeb0 0a67 	vmov.f32	s0, s15
 8006b5c:	481a      	ldr	r0, [pc, #104]	@ (8006bc8 <update_velocity_control+0x294>)
 8006b5e:	f7fa fd1b 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006b62:	eef0 7a40 	vmov.f32	s15, s0
 8006b66:	4b13      	ldr	r3, [pc, #76]	@ (8006bb4 <update_velocity_control+0x280>)
 8006b68:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b6c:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <update_velocity_control+0x27c>)
 8006b6e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006b72:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <update_velocity_control+0x284>)
 8006b74:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b78:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006ba8 <update_velocity_control+0x274>
 8006b7c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b80:	eef0 0a66 	vmov.f32	s1, s13
 8006b84:	eeb0 0a47 	vmov.f32	s0, s14
 8006b88:	4810      	ldr	r0, [pc, #64]	@ (8006bcc <update_velocity_control+0x298>)
 8006b8a:	f7fa fd98 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006b8e:	eef0 7a40 	vmov.f32	s15, s0
 8006b92:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <update_velocity_control+0x280>)
 8006b94:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006b98:	e034      	b.n	8006c04 <update_velocity_control+0x2d0>
 8006b9a:	bf00      	nop
 8006b9c:	20000480 	.word	0x20000480
 8006ba0:	2000078c 	.word	0x2000078c
 8006ba4:	20000080 	.word	0x20000080
 8006ba8:	447a0000 	.word	0x447a0000
 8006bac:	20000804 	.word	0x20000804
 8006bb0:	20000708 	.word	0x20000708
 8006bb4:	200004c0 	.word	0x200004c0
 8006bb8:	200006ac 	.word	0x200006ac
 8006bbc:	20000808 	.word	0x20000808
 8006bc0:	200007dc 	.word	0x200007dc
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	20000810 	.word	0x20000810
 8006bcc:	20000814 	.word	0x20000814
	} else {
		revolute_axis.ffd = 0.0f;
 8006bd0:	4b33      	ldr	r3, [pc, #204]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006bd8:	4b32      	ldr	r3, [pc, #200]	@ (8006ca4 <update_velocity_control+0x370>)
 8006bda:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006bde:	4b32      	ldr	r3, [pc, #200]	@ (8006ca8 <update_velocity_control+0x374>)
 8006be0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006be4:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8006cac <update_velocity_control+0x378>
 8006be8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006bec:	eef0 0a66 	vmov.f32	s1, s13
 8006bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8006bf4:	482e      	ldr	r0, [pc, #184]	@ (8006cb0 <update_velocity_control+0x37c>)
 8006bf6:	f7fa fd62 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006bfa:	eef0 7a40 	vmov.f32	s15, s0
 8006bfe:	4b28      	ldr	r3, [pc, #160]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c00:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8006c04:	4b26      	ldr	r3, [pc, #152]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c06:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006c0a:	4b25      	ldr	r3, [pc, #148]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c0c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006c10:	4b23      	ldr	r3, [pc, #140]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c26:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c2a:	4b22      	ldr	r3, [pc, #136]	@ (8006cb4 <update_velocity_control+0x380>)
 8006c2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c30:	4610      	mov	r0, r2
 8006c32:	4619      	mov	r1, r3
 8006c34:	f7f9 ff46 	bl	8000ac4 <__aeabi_d2iz>
 8006c38:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb4 <update_velocity_control+0x380>)
 8006c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c40:	4614      	mov	r4, r2
 8006c42:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 ff3b 	bl	8000ac4 <__aeabi_d2iz>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4619      	mov	r1, r3
 8006c52:	4630      	mov	r0, r6
 8006c54:	eeb0 0a48 	vmov.f32	s0, s16
 8006c58:	f7fa fa7c 	bl	8001154 <PWM_Satuation>
 8006c5c:	ee07 0a90 	vmov	s15, r0
 8006c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c66:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <update_velocity_control+0x384>)
 8006c6c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c70:	eef0 0a67 	vmov.f32	s1, s15
 8006c74:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8006cbc <update_velocity_control+0x388>
 8006c78:	4811      	ldr	r0, [pc, #68]	@ (8006cc0 <update_velocity_control+0x38c>)
 8006c7a:	f7fa fba5 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006c7e:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <update_velocity_control+0x36c>)
 8006c80:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c84:	eef0 0a67 	vmov.f32	s1, s15
 8006c88:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006cbc <update_velocity_control+0x388>
 8006c8c:	480d      	ldr	r0, [pc, #52]	@ (8006cc4 <update_velocity_control+0x390>)
 8006c8e:	f7fa fb9b 	bl	80013c8 <MDXX_set_range>
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	ecbd 8b02 	vpop	{d8}
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	200004c0 	.word	0x200004c0
 8006ca4:	20000708 	.word	0x20000708
 8006ca8:	200006ac 	.word	0x200006ac
 8006cac:	447a0000 	.word	0x447a0000
 8006cb0:	20000814 	.word	0x20000814
 8006cb4:	20000000 	.word	0x20000000
 8006cb8:	20000480 	.word	0x20000480
 8006cbc:	44fa0000 	.word	0x44fa0000
 8006cc0:	20000614 	.word	0x20000614
 8006cc4:	20000660 	.word	0x20000660

08006cc8 <update_control_loops>:

void update_control_loops(void) {
 8006cc8:	b598      	push	{r3, r4, r7, lr}
 8006cca:	ed2d 8b02 	vpush	{d8}
 8006cce:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006cd0:	4bac      	ldr	r3, [pc, #688]	@ (8006f84 <update_control_loops+0x2bc>)
 8006cd2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cda:	f7ff fbad 	bl	8006438 <normalize_angle>
 8006cde:	eef0 7a40 	vmov.f32	s15, s0
 8006ce2:	4ba9      	ldr	r3, [pc, #676]	@ (8006f88 <update_control_loops+0x2c0>)
 8006ce4:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006ce8:	f000 fb52 	bl	8007390 <is_emergency_active>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d015      	beq.n	8006d1e <update_control_loops+0x56>
		emergency_stop_all_motors();
 8006cf2:	f000 fa89 	bl	8007208 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006cf6:	4ba5      	ldr	r3, [pc, #660]	@ (8006f8c <update_control_loops+0x2c4>)
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfa:	4aa5      	ldr	r2, [pc, #660]	@ (8006f90 <update_control_loops+0x2c8>)
 8006cfc:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006cfe:	4ba2      	ldr	r3, [pc, #648]	@ (8006f88 <update_control_loops+0x2c0>)
 8006d00:	edd3 7a00 	vldr	s15, [r3]
 8006d04:	220e      	movs	r2, #14
 8006d06:	210f      	movs	r1, #15
 8006d08:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0c:	48a1      	ldr	r0, [pc, #644]	@ (8006f94 <update_control_loops+0x2cc>)
 8006d0e:	f7fd fefb 	bl	8004b08 <UnitConverter_angle>
 8006d12:	eef0 7a40 	vmov.f32	s15, s0
 8006d16:	4ba0      	ldr	r3, [pc, #640]	@ (8006f98 <update_control_loops+0x2d0>)
 8006d18:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006d1c:	e16e      	b.n	8006ffc <update_control_loops+0x334>
	}

	if (homing_active) {
 8006d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006f9c <update_control_loops+0x2d4>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d029      	beq.n	8006d7a <update_control_loops+0xb2>
		update_homing_sequence();
 8006d26:	f7fe fe25 	bl	8005974 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006d2a:	4b99      	ldr	r3, [pc, #612]	@ (8006f90 <update_control_loops+0x2c8>)
 8006d2c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d30:	eef0 0a67 	vmov.f32	s1, s15
 8006d34:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006fa0 <update_control_loops+0x2d8>
 8006d38:	489a      	ldr	r0, [pc, #616]	@ (8006fa4 <update_control_loops+0x2dc>)
 8006d3a:	f7fa fb45 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006d3e:	4b96      	ldr	r3, [pc, #600]	@ (8006f98 <update_control_loops+0x2d0>)
 8006d40:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d44:	eef0 0a67 	vmov.f32	s1, s15
 8006d48:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8006fa0 <update_control_loops+0x2d8>
 8006d4c:	4896      	ldr	r0, [pc, #600]	@ (8006fa8 <update_control_loops+0x2e0>)
 8006d4e:	f7fa fb3b 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006d52:	4b8e      	ldr	r3, [pc, #568]	@ (8006f8c <update_control_loops+0x2c4>)
 8006d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d56:	4a8e      	ldr	r2, [pc, #568]	@ (8006f90 <update_control_loops+0x2c8>)
 8006d58:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006f88 <update_control_loops+0x2c0>)
 8006d5c:	edd3 7a00 	vldr	s15, [r3]
 8006d60:	220e      	movs	r2, #14
 8006d62:	210f      	movs	r1, #15
 8006d64:	eeb0 0a67 	vmov.f32	s0, s15
 8006d68:	488a      	ldr	r0, [pc, #552]	@ (8006f94 <update_control_loops+0x2cc>)
 8006d6a:	f7fd fecd 	bl	8004b08 <UnitConverter_angle>
 8006d6e:	eef0 7a40 	vmov.f32	s15, s0
 8006d72:	4b89      	ldr	r3, [pc, #548]	@ (8006f98 <update_control_loops+0x2d0>)
 8006d74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006d78:	e140      	b.n	8006ffc <update_control_loops+0x334>
	}

	switch (motion_sequence_state) {
 8006d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8006fac <update_control_loops+0x2e4>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	f200 80f7 	bhi.w	8006f74 <update_control_loops+0x2ac>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <update_control_loops+0xc4>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da1 	.word	0x08006da1
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006ea9 	.word	0x08006ea9
 8006d98:	08006f4f 	.word	0x08006f4f
 8006d9c:	08006f6d 	.word	0x08006f6d
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006da0:	4b83      	ldr	r3, [pc, #524]	@ (8006fb0 <update_control_loops+0x2e8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a82      	ldr	r2, [pc, #520]	@ (8006fb0 <update_control_loops+0x2e8>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006dae:	4293      	cmp	r3, r2
 8006db0:	f240 80e2 	bls.w	8006f78 <update_control_loops+0x2b0>
			prismatic_axis.trajectory_active = true;
 8006db4:	4b76      	ldr	r3, [pc, #472]	@ (8006f90 <update_control_loops+0x2c8>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8006fac <update_control_loops+0x2e4>)
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006dc2:	e0d9      	b.n	8006f78 <update_control_loops+0x2b0>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006dc4:	4b72      	ldr	r3, [pc, #456]	@ (8006f90 <update_control_loops+0x2c8>)
 8006dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 80d6 	beq.w	8006f7c <update_control_loops+0x2b4>
 8006dd0:	4b78      	ldr	r3, [pc, #480]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006dd2:	7c1b      	ldrb	r3, [r3, #16]
 8006dd4:	f083 0301 	eor.w	r3, r3, #1
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80ce 	beq.w	8006f7c <update_control_loops+0x2b4>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006de0:	4b6b      	ldr	r3, [pc, #428]	@ (8006f90 <update_control_loops+0x2c8>)
 8006de2:	ed93 8a03 	vldr	s16, [r3, #12]
 8006de6:	4b6a      	ldr	r3, [pc, #424]	@ (8006f90 <update_control_loops+0x2c8>)
 8006de8:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006dec:	4b72      	ldr	r3, [pc, #456]	@ (8006fb8 <update_control_loops+0x2f0>)
 8006dee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	f7f9 fead 	bl	8000b54 <__aeabi_d2f>
 8006dfa:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006dfc:	4b6e      	ldr	r3, [pc, #440]	@ (8006fb8 <update_control_loops+0x2f0>)
 8006dfe:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	f7f9 fea5 	bl	8000b54 <__aeabi_d2f>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	ee01 3a90 	vmov	s3, r3
 8006e10:	ee01 4a10 	vmov	s2, r4
 8006e14:	eef0 0a68 	vmov.f32	s1, s17
 8006e18:	eeb0 0a48 	vmov.f32	s0, s16
 8006e1c:	4965      	ldr	r1, [pc, #404]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006e1e:	4867      	ldr	r0, [pc, #412]	@ (8006fbc <update_control_loops+0x2f4>)
 8006e20:	f7fd fada 	bl	80043d8 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 8006e24:	4b63      	ldr	r3, [pc, #396]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a59      	ldr	r2, [pc, #356]	@ (8006f90 <update_control_loops+0x2c8>)
 8006e2a:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 8006e2c:	4b61      	ldr	r3, [pc, #388]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a57      	ldr	r2, [pc, #348]	@ (8006f90 <update_control_loops+0x2c8>)
 8006e32:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 8006e34:	4b5f      	ldr	r3, [pc, #380]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006e36:	7c1b      	ldrb	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 809f 	beq.w	8006f7c <update_control_loops+0x2b4>
				prismatic_axis.trajectory_active = false;
 8006e3e:	4b54      	ldr	r3, [pc, #336]	@ (8006f90 <update_control_loops+0x2c8>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 8006e46:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb4 <update_control_loops+0x2ec>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a51      	ldr	r2, [pc, #324]	@ (8006f90 <update_control_loops+0x2c8>)
 8006e4c:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006e4e:	4b50      	ldr	r3, [pc, #320]	@ (8006f90 <update_control_loops+0x2c8>)
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006e56:	4b50      	ldr	r3, [pc, #320]	@ (8006f98 <update_control_loops+0x2d0>)
 8006e58:	ed93 8a03 	vldr	s16, [r3, #12]
 8006e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f98 <update_control_loops+0x2d0>)
 8006e5e:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006e62:	4b57      	ldr	r3, [pc, #348]	@ (8006fc0 <update_control_loops+0x2f8>)
 8006e64:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f7f9 fe72 	bl	8000b54 <__aeabi_d2f>
 8006e70:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006e72:	4b53      	ldr	r3, [pc, #332]	@ (8006fc0 <update_control_loops+0x2f8>)
 8006e74:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	f7f9 fe6a 	bl	8000b54 <__aeabi_d2f>
 8006e80:	4603      	mov	r3, r0
 8006e82:	ee01 3a90 	vmov	s3, r3
 8006e86:	ee01 4a10 	vmov	s2, r4
 8006e8a:	eef0 0a68 	vmov.f32	s1, s17
 8006e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8006e92:	484c      	ldr	r0, [pc, #304]	@ (8006fc4 <update_control_loops+0x2fc>)
 8006e94:	f7fd f9de 	bl	8004254 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 8006e98:	4b3f      	ldr	r3, [pc, #252]	@ (8006f98 <update_control_loops+0x2d0>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006ea0:	4b42      	ldr	r3, [pc, #264]	@ (8006fac <update_control_loops+0x2e4>)
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006ea6:	e069      	b.n	8006f7c <update_control_loops+0x2b4>

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8006f98 <update_control_loops+0x2d0>)
 8006eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d066      	beq.n	8006f80 <update_control_loops+0x2b8>
 8006eb2:	4b45      	ldr	r3, [pc, #276]	@ (8006fc8 <update_control_loops+0x300>)
 8006eb4:	7c1b      	ldrb	r3, [r3, #16]
 8006eb6:	f083 0301 	eor.w	r3, r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05f      	beq.n	8006f80 <update_control_loops+0x2b8>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ec0:	4b35      	ldr	r3, [pc, #212]	@ (8006f98 <update_control_loops+0x2d0>)
 8006ec2:	ed93 8a03 	vldr	s16, [r3, #12]
 8006ec6:	4b34      	ldr	r3, [pc, #208]	@ (8006f98 <update_control_loops+0x2d0>)
 8006ec8:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8006fc0 <update_control_loops+0x2f8>)
 8006ece:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	f7f9 fe3d 	bl	8000b54 <__aeabi_d2f>
 8006eda:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006edc:	4b38      	ldr	r3, [pc, #224]	@ (8006fc0 <update_control_loops+0x2f8>)
 8006ede:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7f9 fe35 	bl	8000b54 <__aeabi_d2f>
 8006eea:	4603      	mov	r3, r0
 8006eec:	ee01 3a90 	vmov	s3, r3
 8006ef0:	ee01 4a10 	vmov	s2, r4
 8006ef4:	eef0 0a68 	vmov.f32	s1, s17
 8006ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8006efc:	4932      	ldr	r1, [pc, #200]	@ (8006fc8 <update_control_loops+0x300>)
 8006efe:	4831      	ldr	r0, [pc, #196]	@ (8006fc4 <update_control_loops+0x2fc>)
 8006f00:	f7fd fa6a 	bl	80043d8 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 8006f04:	4b30      	ldr	r3, [pc, #192]	@ (8006fc8 <update_control_loops+0x300>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a23      	ldr	r2, [pc, #140]	@ (8006f98 <update_control_loops+0x2d0>)
 8006f0a:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 8006f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8006fc8 <update_control_loops+0x300>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a21      	ldr	r2, [pc, #132]	@ (8006f98 <update_control_loops+0x2d0>)
 8006f12:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 8006f14:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc8 <update_control_loops+0x300>)
 8006f16:	7c1b      	ldrb	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d031      	beq.n	8006f80 <update_control_loops+0x2b8>
				revolute_axis.trajectory_active = false;
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <update_control_loops+0x2d0>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 8006f24:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <update_control_loops+0x300>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <update_control_loops+0x2d0>)
 8006f2a:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <update_control_loops+0x2d0>)
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006f34:	4825      	ldr	r0, [pc, #148]	@ (8006fcc <update_control_loops+0x304>)
 8006f36:	f7fa fa01 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f3a:	4825      	ldr	r0, [pc, #148]	@ (8006fd0 <update_control_loops+0x308>)
 8006f3c:	f7fa f9fe 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <update_control_loops+0x2e8>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006f46:	4b19      	ldr	r3, [pc, #100]	@ (8006fac <update_control_loops+0x2e4>)
 8006f48:	2204      	movs	r2, #4
 8006f4a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006f4c:	e018      	b.n	8006f80 <update_control_loops+0x2b8>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006f4e:	4b18      	ldr	r3, [pc, #96]	@ (8006fb0 <update_control_loops+0x2e8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <update_control_loops+0x2e8>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d939      	bls.n	8006fd4 <update_control_loops+0x30c>
			plotter_pen_down();
 8006f60:	f002 f9cc 	bl	80092fc <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006f64:	4b11      	ldr	r3, [pc, #68]	@ (8006fac <update_control_loops+0x2e4>)
 8006f66:	2205      	movs	r2, #5
 8006f68:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006f6a:	e033      	b.n	8006fd4 <update_control_loops+0x30c>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <update_control_loops+0x2e4>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]
		break;
 8006f72:	e030      	b.n	8006fd6 <update_control_loops+0x30e>

	default:
		break;
 8006f74:	bf00      	nop
 8006f76:	e02e      	b.n	8006fd6 <update_control_loops+0x30e>
		break;
 8006f78:	bf00      	nop
 8006f7a:	e02c      	b.n	8006fd6 <update_control_loops+0x30e>
		break;
 8006f7c:	bf00      	nop
 8006f7e:	e02a      	b.n	8006fd6 <update_control_loops+0x30e>
		break;
 8006f80:	bf00      	nop
 8006f82:	e028      	b.n	8006fd6 <update_control_loops+0x30e>
 8006f84:	20000708 	.word	0x20000708
 8006f88:	200005a4 	.word	0x200005a4
 8006f8c:	200006ac 	.word	0x200006ac
 8006f90:	20000480 	.word	0x20000480
 8006f94:	20000a78 	.word	0x20000a78
 8006f98:	200004c0 	.word	0x200004c0
 8006f9c:	20000563 	.word	0x20000563
 8006fa0:	44fa0000 	.word	0x44fa0000
 8006fa4:	20000614 	.word	0x20000614
 8006fa8:	20000660 	.word	0x20000660
 8006fac:	20000500 	.word	0x20000500
 8006fb0:	20000558 	.word	0x20000558
 8006fb4:	2000052c 	.word	0x2000052c
 8006fb8:	20000080 	.word	0x20000080
 8006fbc:	20000504 	.word	0x20000504
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	20000518 	.word	0x20000518
 8006fc8:	20000540 	.word	0x20000540
 8006fcc:	200007b4 	.word	0x200007b4
 8006fd0:	200007dc 	.word	0x200007dc
		break;
 8006fd4:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <update_control_loops+0x33c>)
 8006fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fda:	4a0b      	ldr	r2, [pc, #44]	@ (8007008 <update_control_loops+0x340>)
 8006fdc:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <update_control_loops+0x344>)
 8006fe0:	edd3 7a00 	vldr	s15, [r3]
 8006fe4:	220e      	movs	r2, #14
 8006fe6:	210f      	movs	r1, #15
 8006fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fec:	4808      	ldr	r0, [pc, #32]	@ (8007010 <update_control_loops+0x348>)
 8006fee:	f7fd fd8b 	bl	8004b08 <UnitConverter_angle>
 8006ff2:	eef0 7a40 	vmov.f32	s15, s0
 8006ff6:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <update_control_loops+0x34c>)
 8006ff8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	ecbd 8b02 	vpop	{d8}
 8007002:	bd98      	pop	{r3, r4, r7, pc}
 8007004:	200006ac 	.word	0x200006ac
 8007008:	20000480 	.word	0x20000480
 800700c:	200005a4 	.word	0x200005a4
 8007010:	20000a78 	.word	0x20000a78
 8007014:	200004c0 	.word	0x200004c0

08007018 <check_emergency_button>:

void check_emergency_button(void) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 800701e:	2110      	movs	r1, #16
 8007020:	480c      	ldr	r0, [pc, #48]	@ (8007054 <check_emergency_button+0x3c>)
 8007022:	f005 fc9b 	bl	800c95c <HAL_GPIO_ReadPin>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	f083 0301 	eor.w	r3, r3, #1
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <check_emergency_button+0x40>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d001      	beq.n	800704a <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8007046:	f000 f877 	bl	8007138 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	48000400 	.word	0x48000400
 8007058:	20000564 	.word	0x20000564

0800705c <check_safety_conditions>:

void check_safety_conditions(void) {
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <check_safety_conditions+0x60>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d127      	bne.n	80070b8 <check_safety_conditions+0x5c>
 8007068:	4b15      	ldr	r3, [pc, #84]	@ (80070c0 <check_safety_conditions+0x64>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d123      	bne.n	80070b8 <check_safety_conditions+0x5c>
 8007070:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <check_safety_conditions+0x68>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11f      	bne.n	80070b8 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8007078:	4b13      	ldr	r3, [pc, #76]	@ (80070c8 <check_safety_conditions+0x6c>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <check_safety_conditions+0x3c>
 8007082:	4b12      	ldr	r3, [pc, #72]	@ (80070cc <check_safety_conditions+0x70>)
 8007084:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d502      	bpl.n	8007098 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8007092:	f000 f81f 	bl	80070d4 <trigger_software_emergency>
		return;
 8007096:	e010      	b.n	80070ba <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8007098:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <check_safety_conditions+0x74>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <check_safety_conditions+0x5e>
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <check_safety_conditions+0x70>)
 80070a4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80070a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b0:	dd03      	ble.n	80070ba <check_safety_conditions+0x5e>
		trigger_software_emergency();
 80070b2:	f000 f80f 	bl	80070d4 <trigger_software_emergency>
		return;
 80070b6:	e000      	b.n	80070ba <check_safety_conditions+0x5e>
		return;
 80070b8:	bf00      	nop
	}
}
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000334 	.word	0x20000334
 80070c0:	20000564 	.word	0x20000564
 80070c4:	20000563 	.word	0x20000563
 80070c8:	20000560 	.word	0x20000560
 80070cc:	20000480 	.word	0x20000480
 80070d0:	20000561 	.word	0x20000561

080070d4 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 80070d8:	4b10      	ldr	r3, [pc, #64]	@ (800711c <trigger_software_emergency+0x48>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11b      	bne.n	8007118 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 80070e0:	4b0e      	ldr	r3, [pc, #56]	@ (800711c <trigger_software_emergency+0x48>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 80070e6:	f000 f88f 	bl	8007208 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 80070ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007120 <trigger_software_emergency+0x4c>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <trigger_software_emergency+0x50>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 80070f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <trigger_software_emergency+0x54>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80070fc:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <trigger_software_emergency+0x58>)
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8007104:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <trigger_software_emergency+0x5c>)
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 800710c:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <trigger_software_emergency+0x60>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8007114:	f000 f9be 	bl	8007494 <exit_joy_mode>
		}
	}
}
 8007118:	bf00      	nop
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000564 	.word	0x20000564
 8007120:	20000568 	.word	0x20000568
 8007124:	2000056c 	.word	0x2000056c
 8007128:	20000500 	.word	0x20000500
 800712c:	20000480 	.word	0x20000480
 8007130:	200004c0 	.word	0x200004c0
 8007134:	200005ad 	.word	0x200005ad

08007138 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 800713c:	4b13      	ldr	r3, [pc, #76]	@ (800718c <trigger_hardware_emergency+0x54>)
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <trigger_hardware_emergency+0x58>)
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8007148:	f000 f85e 	bl	8007208 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 800714c:	4b11      	ldr	r3, [pc, #68]	@ (8007194 <trigger_hardware_emergency+0x5c>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8007152:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <trigger_hardware_emergency+0x60>)
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8007158:	4b10      	ldr	r3, [pc, #64]	@ (800719c <trigger_hardware_emergency+0x64>)
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 800715e:	4b10      	ldr	r3, [pc, #64]	@ (80071a0 <trigger_hardware_emergency+0x68>)
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8007164:	4b0f      	ldr	r3, [pc, #60]	@ (80071a4 <trigger_hardware_emergency+0x6c>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800716a:	4b0f      	ldr	r3, [pc, #60]	@ (80071a8 <trigger_hardware_emergency+0x70>)
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007172:	4b0e      	ldr	r3, [pc, #56]	@ (80071ac <trigger_hardware_emergency+0x74>)
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <trigger_hardware_emergency+0x78>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8007182:	f000 f987 	bl	8007494 <exit_joy_mode>
	}
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000564 	.word	0x20000564
 8007190:	2000056d 	.word	0x2000056d
 8007194:	20000568 	.word	0x20000568
 8007198:	2000056c 	.word	0x2000056c
 800719c:	20000563 	.word	0x20000563
 80071a0:	20000562 	.word	0x20000562
 80071a4:	20000500 	.word	0x20000500
 80071a8:	20000480 	.word	0x20000480
 80071ac:	200004c0 	.word	0x200004c0
 80071b0:	200005ad 	.word	0x200005ad

080071b4 <clear_emergency_state>:

void clear_emergency_state(void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 80071b8:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <clear_emergency_state+0x3c>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <clear_emergency_state+0x40>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <clear_emergency_state+0x44>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80071ca:	4b0c      	ldr	r3, [pc, #48]	@ (80071fc <clear_emergency_state+0x48>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80071d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071da:	f005 fbd7 	bl	800c98c <HAL_GPIO_WritePin>
	up_photo = false;
 80071de:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <clear_emergency_state+0x4c>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 80071e4:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <clear_emergency_state+0x50>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000564 	.word	0x20000564
 80071f4:	2000056d 	.word	0x2000056d
 80071f8:	20000568 	.word	0x20000568
 80071fc:	2000056c 	.word	0x2000056c
 8007200:	20000560 	.word	0x20000560
 8007204:	20000561 	.word	0x20000561

08007208 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 800720c:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8007264 <emergency_stop_all_motors+0x5c>
 8007210:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8007268 <emergency_stop_all_motors+0x60>
 8007214:	4815      	ldr	r0, [pc, #84]	@ (800726c <emergency_stop_all_motors+0x64>)
 8007216:	f7fa f8d7 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800721a:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8007264 <emergency_stop_all_motors+0x5c>
 800721e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8007268 <emergency_stop_all_motors+0x60>
 8007222:	4813      	ldr	r0, [pc, #76]	@ (8007270 <emergency_stop_all_motors+0x68>)
 8007224:	f7fa f8d0 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007228:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <emergency_stop_all_motors+0x6c>)
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007230:	4b11      	ldr	r3, [pc, #68]	@ (8007278 <emergency_stop_all_motors+0x70>)
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007238:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <emergency_stop_all_motors+0x6c>)
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007240:	4b0d      	ldr	r3, [pc, #52]	@ (8007278 <emergency_stop_all_motors+0x70>)
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007248:	480c      	ldr	r0, [pc, #48]	@ (800727c <emergency_stop_all_motors+0x74>)
 800724a:	f7fa f877 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 800724e:	480c      	ldr	r0, [pc, #48]	@ (8007280 <emergency_stop_all_motors+0x78>)
 8007250:	f7fa f874 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8007254:	480b      	ldr	r0, [pc, #44]	@ (8007284 <emergency_stop_all_motors+0x7c>)
 8007256:	f7fa f871 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800725a:	480b      	ldr	r0, [pc, #44]	@ (8007288 <emergency_stop_all_motors+0x80>)
 800725c:	f7fa f86e 	bl	800133c <PID_CONTROLLER_Reset>
}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}
 8007264:	00000000 	.word	0x00000000
 8007268:	44fa0000 	.word	0x44fa0000
 800726c:	20000614 	.word	0x20000614
 8007270:	20000660 	.word	0x20000660
 8007274:	20000480 	.word	0x20000480
 8007278:	200004c0 	.word	0x200004c0
 800727c:	20000764 	.word	0x20000764
 8007280:	2000078c 	.word	0x2000078c
 8007284:	200007b4 	.word	0x200007b4
 8007288:	200007dc 	.word	0x200007dc

0800728c <update_safety_system>:

void update_safety_system(void) {
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8007290:	4b3a      	ldr	r3, [pc, #232]	@ (800737c <update_safety_system+0xf0>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d16e      	bne.n	8007376 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8007298:	4b39      	ldr	r3, [pc, #228]	@ (8007380 <update_safety_system+0xf4>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d11f      	bne.n	80072e0 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80072a0:	4b38      	ldr	r3, [pc, #224]	@ (8007384 <update_safety_system+0xf8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a37      	ldr	r2, [pc, #220]	@ (8007384 <update_safety_system+0xf8>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	2bf9      	cmp	r3, #249	@ 0xf9
 80072ac:	d918      	bls.n	80072e0 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80072ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80072b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072b6:	f005 fb81 	bl	800c9bc <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 80072ba:	4b33      	ldr	r3, [pc, #204]	@ (8007388 <update_safety_system+0xfc>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f083 0301 	eor.w	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007388 <update_safety_system+0xfc>)
 80072d8:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 80072da:	4b2a      	ldr	r3, [pc, #168]	@ (8007384 <update_safety_system+0xf8>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 80072e0:	4b27      	ldr	r3, [pc, #156]	@ (8007380 <update_safety_system+0xf4>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d134      	bne.n	8007352 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 80072e8:	2110      	movs	r1, #16
 80072ea:	4828      	ldr	r0, [pc, #160]	@ (800738c <update_safety_system+0x100>)
 80072ec:	f005 fb36 	bl	800c95c <HAL_GPIO_ReadPin>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d120      	bne.n	8007338 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80072f6:	4b23      	ldr	r3, [pc, #140]	@ (8007384 <update_safety_system+0xf8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	4a21      	ldr	r2, [pc, #132]	@ (8007384 <update_safety_system+0xf8>)
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	2bf9      	cmp	r3, #249	@ 0xf9
 8007302:	d926      	bls.n	8007352 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800730c:	f005 fb56 	bl	800c9bc <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007310:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <update_safety_system+0xfc>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf14      	ite	ne
 800731a:	2301      	movne	r3, #1
 800731c:	2300      	moveq	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f083 0301 	eor.w	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	4b16      	ldr	r3, [pc, #88]	@ (8007388 <update_safety_system+0xfc>)
 800732e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007330:	4b14      	ldr	r3, [pc, #80]	@ (8007384 <update_safety_system+0xf8>)
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e00c      	b.n	8007352 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007338:	2200      	movs	r2, #0
 800733a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800733e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007342:	f005 fb23 	bl	800c98c <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007346:	4b10      	ldr	r3, [pc, #64]	@ (8007388 <update_safety_system+0xfc>)
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800734c:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <update_safety_system+0xf8>)
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007352:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <update_safety_system+0xf4>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 800735a:	2200      	movs	r2, #0
 800735c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007364:	f005 fb12 	bl	800c98c <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <update_safety_system+0xfc>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 800736e:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <update_safety_system+0xf8>)
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e000      	b.n	8007378 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8007376:	bf00      	nop
	}
}
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200005ad 	.word	0x200005ad
 8007380:	20000564 	.word	0x20000564
 8007384:	20000568 	.word	0x20000568
 8007388:	2000056c 	.word	0x2000056c
 800738c:	48000400 	.word	0x48000400

08007390 <is_emergency_active>:

bool is_emergency_active(void) {
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <is_emergency_active+0x1c>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	20000564 	.word	0x20000564

080073b0 <enter_joy_mode>:

void enter_joy_mode(void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80073b4:	f7ff ffec 	bl	8007390 <is_emergency_active>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d14c      	bne.n	8007458 <enter_joy_mode+0xa8>
 80073be:	4b27      	ldr	r3, [pc, #156]	@ (800745c <enter_joy_mode+0xac>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d148      	bne.n	8007458 <enter_joy_mode+0xa8>
 80073c6:	4b26      	ldr	r3, [pc, #152]	@ (8007460 <enter_joy_mode+0xb0>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d144      	bne.n	8007458 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 80073ce:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <enter_joy_mode+0xb0>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 80073d4:	4b23      	ldr	r3, [pc, #140]	@ (8007464 <enter_joy_mode+0xb4>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 80073da:	f000 f9a7 	bl	800772c <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80073de:	2201      	movs	r2, #1
 80073e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073e8:	f005 fad0 	bl	800c98c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 80073ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007468 <enter_joy_mode+0xb8>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80073f2:	4b1e      	ldr	r3, [pc, #120]	@ (800746c <enter_joy_mode+0xbc>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 80073f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007470 <enter_joy_mode+0xc0>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80073fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007474 <enter_joy_mode+0xc4>)
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007406:	4b1c      	ldr	r3, [pc, #112]	@ (8007478 <enter_joy_mode+0xc8>)
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 800740e:	4b1b      	ldr	r3, [pc, #108]	@ (800747c <enter_joy_mode+0xcc>)
 8007410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007412:	4a18      	ldr	r2, [pc, #96]	@ (8007474 <enter_joy_mode+0xc4>)
 8007414:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007416:	4b1a      	ldr	r3, [pc, #104]	@ (8007480 <enter_joy_mode+0xd0>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	4a17      	ldr	r2, [pc, #92]	@ (8007478 <enter_joy_mode+0xc8>)
 800741c:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 800741e:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <enter_joy_mode+0xc4>)
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007426:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <enter_joy_mode+0xc8>)
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 800742e:	4b11      	ldr	r3, [pc, #68]	@ (8007474 <enter_joy_mode+0xc4>)
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <enter_joy_mode+0xc8>)
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 800743e:	4811      	ldr	r0, [pc, #68]	@ (8007484 <enter_joy_mode+0xd4>)
 8007440:	f7f9 ff7c 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007444:	4810      	ldr	r0, [pc, #64]	@ (8007488 <enter_joy_mode+0xd8>)
 8007446:	f7f9 ff79 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800744a:	4810      	ldr	r0, [pc, #64]	@ (800748c <enter_joy_mode+0xdc>)
 800744c:	f7f9 ff76 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007450:	480f      	ldr	r0, [pc, #60]	@ (8007490 <enter_joy_mode+0xe0>)
 8007452:	f7f9 ff73 	bl	800133c <PID_CONTROLLER_Reset>
 8007456:	e000      	b.n	800745a <enter_joy_mode+0xaa>
		return;
 8007458:	bf00      	nop
}
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000563 	.word	0x20000563
 8007460:	200005ad 	.word	0x200005ad
 8007464:	200005ac 	.word	0x200005ac
 8007468:	20000608 	.word	0x20000608
 800746c:	20000604 	.word	0x20000604
 8007470:	20000500 	.word	0x20000500
 8007474:	20000480 	.word	0x20000480
 8007478:	200004c0 	.word	0x200004c0
 800747c:	200006ac 	.word	0x200006ac
 8007480:	20000708 	.word	0x20000708
 8007484:	20000764 	.word	0x20000764
 8007488:	2000078c 	.word	0x2000078c
 800748c:	200007b4 	.word	0x200007b4
 8007490:	200007dc 	.word	0x200007dc

08007494 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007498:	4b32      	ldr	r3, [pc, #200]	@ (8007564 <exit_joy_mode+0xd0>)
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 800749e:	4b32      	ldr	r3, [pc, #200]	@ (8007568 <exit_joy_mode+0xd4>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 80074a4:	f000 f942 	bl	800772c <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80074ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80074b2:	f005 fa6b 	bl	800c98c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 80074b6:	4b2d      	ldr	r3, [pc, #180]	@ (800756c <exit_joy_mode+0xd8>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80074bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007570 <exit_joy_mode+0xdc>)
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80074c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007574 <exit_joy_mode+0xe0>)
 80074c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007578 <exit_joy_mode+0xe4>)
 80074c8:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80074ca:	4b2c      	ldr	r3, [pc, #176]	@ (800757c <exit_joy_mode+0xe8>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007580 <exit_joy_mode+0xec>)
 80074d0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 80074d2:	4b29      	ldr	r3, [pc, #164]	@ (8007578 <exit_joy_mode+0xe4>)
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80074da:	4b29      	ldr	r3, [pc, #164]	@ (8007580 <exit_joy_mode+0xec>)
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 80074e2:	4b25      	ldr	r3, [pc, #148]	@ (8007578 <exit_joy_mode+0xe4>)
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 80074ea:	4b23      	ldr	r3, [pc, #140]	@ (8007578 <exit_joy_mode+0xe4>)
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 80074f2:	4b23      	ldr	r3, [pc, #140]	@ (8007580 <exit_joy_mode+0xec>)
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80074fa:	4b20      	ldr	r3, [pc, #128]	@ (800757c <exit_joy_mode+0xe8>)
 80074fc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007500:	4b1c      	ldr	r3, [pc, #112]	@ (8007574 <exit_joy_mode+0xe0>)
 8007502:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007506:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007584 <exit_joy_mode+0xf0>
 800750a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800750e:	eef0 0a66 	vmov.f32	s1, s13
 8007512:	eeb0 0a47 	vmov.f32	s0, s14
 8007516:	481c      	ldr	r0, [pc, #112]	@ (8007588 <exit_joy_mode+0xf4>)
 8007518:	f7fa f8d1 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800751c:	eef0 7a40 	vmov.f32	s15, s0
 8007520:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <exit_joy_mode+0xec>)
 8007522:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007526:	4819      	ldr	r0, [pc, #100]	@ (800758c <exit_joy_mode+0xf8>)
 8007528:	f7f9 ff08 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 800752c:	4818      	ldr	r0, [pc, #96]	@ (8007590 <exit_joy_mode+0xfc>)
 800752e:	f7f9 ff05 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8007532:	4818      	ldr	r0, [pc, #96]	@ (8007594 <exit_joy_mode+0x100>)
 8007534:	f7f9 ff02 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007538:	4817      	ldr	r0, [pc, #92]	@ (8007598 <exit_joy_mode+0x104>)
 800753a:	f7f9 feff 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 800753e:	4b17      	ldr	r3, [pc, #92]	@ (800759c <exit_joy_mode+0x108>)
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007544:	4b0c      	ldr	r3, [pc, #48]	@ (8007578 <exit_joy_mode+0xe4>)
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <exit_joy_mode+0xec>)
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	registerFrame[BaseSystem_Status].U16 = 0;
 8007554:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <exit_joy_mode+0x10c>)
 8007556:	2200      	movs	r2, #0
 8007558:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 800755a:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <exit_joy_mode+0x10c>)
 800755c:	2200      	movs	r2, #0
 800755e:	841a      	strh	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200005ad 	.word	0x200005ad
 8007568:	200005ac 	.word	0x200005ac
 800756c:	20000608 	.word	0x20000608
 8007570:	20000604 	.word	0x20000604
 8007574:	200006ac 	.word	0x200006ac
 8007578:	20000480 	.word	0x20000480
 800757c:	20000708 	.word	0x20000708
 8007580:	200004c0 	.word	0x200004c0
 8007584:	447a0000 	.word	0x447a0000
 8007588:	20000814 	.word	0x20000814
 800758c:	20000764 	.word	0x20000764
 8007590:	2000078c 	.word	0x2000078c
 8007594:	200007b4 	.word	0x200007b4
 8007598:	200007dc 	.word	0x200007dc
 800759c:	20000500 	.word	0x20000500
 80075a0:	20001288 	.word	0x20001288

080075a4 <save_current_position>:

void save_current_position(void) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 80075aa:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <save_current_position+0xdc>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d862      	bhi.n	8007678 <save_current_position+0xd4>

		float r_mm = prismatic_encoder.mm;
 80075b2:	4b34      	ldr	r3, [pc, #208]	@ (8007684 <save_current_position+0xe0>)
 80075b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b6:	60fb      	str	r3, [r7, #12]
		float t_rad = revolute_encoder.rads;
 80075b8:	4b33      	ldr	r3, [pc, #204]	@ (8007688 <save_current_position+0xe4>)
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	60bb      	str	r3, [r7, #8]

		saved_positions[saved_position_count].prismatic_pos = r_mm;
 80075be:	4b30      	ldr	r3, [pc, #192]	@ (8007680 <save_current_position+0xdc>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	4a32      	ldr	r2, [pc, #200]	@ (800768c <save_current_position+0xe8>)
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = t_rad;
 80075cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007680 <save_current_position+0xdc>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4a2e      	ldr	r2, [pc, #184]	@ (800768c <save_current_position+0xe8>)
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	3304      	adds	r3, #4
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 80075dc:	4b28      	ldr	r3, [pc, #160]	@ (8007680 <save_current_position+0xdc>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <save_current_position+0xdc>)
 80075e6:	701a      	strb	r2, [r3, #0]

		int16_t r_mm_fixed = (int16_t) (r_mm * 10); // mm → mm*10
 80075e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80075f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075f8:	ee17 3a90 	vmov	r3, s15
 80075fc:	80fb      	strh	r3, [r7, #6]
		int16_t t_deg_fixed = (int16_t) (UnitConverter_angle(&converter_system,
 80075fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8007602:	f7fe ff19 	bl	8006438 <normalize_angle>
 8007606:	eef0 7a40 	vmov.f32	s15, s0
 800760a:	220e      	movs	r2, #14
 800760c:	210f      	movs	r1, #15
 800760e:	eeb0 0a67 	vmov.f32	s0, s15
 8007612:	481f      	ldr	r0, [pc, #124]	@ (8007690 <save_current_position+0xec>)
 8007614:	f7fd fa78 	bl	8004b08 <UnitConverter_angle>
 8007618:	eef0 7a40 	vmov.f32	s15, s0
				normalize_angle(t_rad), UNIT_RADIAN, UNIT_DEGREE) * 10); // rad → deg → deg*10
 800761c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007620:	ee67 7a87 	vmul.f32	s15, s15, s14
		int16_t t_deg_fixed = (int16_t) (UnitConverter_angle(&converter_system,
 8007624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007628:	ee17 3a90 	vmov	r3, s15
 800762c:	80bb      	strh	r3, [r7, #4]

		uint8_t index = saved_position_count; // 1-based index
 800762e:	4b14      	ldr	r3, [pc, #80]	@ (8007680 <save_current_position+0xdc>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	70fb      	strb	r3, [r7, #3]
		uint8_t r_addr = 0x20 + (index - 1) * 2;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	330f      	adds	r3, #15
 8007638:	b2db      	uxtb	r3, r3
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	70bb      	strb	r3, [r7, #2]
		uint8_t t_addr = r_addr + 1;
 800763e:	78bb      	ldrb	r3, [r7, #2]
 8007640:	3301      	adds	r3, #1
 8007642:	707b      	strb	r3, [r7, #1]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007644:	78bb      	ldrb	r3, [r7, #2]
 8007646:	2b38      	cmp	r3, #56	@ 0x38
 8007648:	d80c      	bhi.n	8007664 <save_current_position+0xc0>
 800764a:	787b      	ldrb	r3, [r7, #1]
 800764c:	2b39      	cmp	r3, #57	@ 0x39
 800764e:	d809      	bhi.n	8007664 <save_current_position+0xc0>
			registerFrame[r_addr].U16 = r_mm_fixed;
 8007650:	78bb      	ldrb	r3, [r7, #2]
 8007652:	88f9      	ldrh	r1, [r7, #6]
 8007654:	4a0f      	ldr	r2, [pc, #60]	@ (8007694 <save_current_position+0xf0>)
 8007656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 800765a:	787b      	ldrb	r3, [r7, #1]
 800765c:	88b9      	ldrh	r1, [r7, #4]
 800765e:	4a0d      	ldr	r2, [pc, #52]	@ (8007694 <save_current_position+0xf0>)
 8007660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <save_current_position+0xdc>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b09      	cmp	r3, #9
 800766a:	d905      	bls.n	8007678 <save_current_position+0xd4>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 800766c:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <save_current_position+0xf4>)
 800766e:	2203      	movs	r2, #3
 8007670:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007672:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <save_current_position+0xf8>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000600 	.word	0x20000600
 8007684:	200006ac 	.word	0x200006ac
 8007688:	20000708 	.word	0x20000708
 800768c:	200005b0 	.word	0x200005b0
 8007690:	20000a78 	.word	0x20000a78
 8007694:	20001288 	.word	0x20001288
 8007698:	200005ac 	.word	0x200005ac
 800769c:	20000604 	.word	0x20000604

080076a0 <start_position_playback>:

void start_position_playback(void) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
	if (saved_position_count > 0) {
 80076a6:	4b19      	ldr	r3, [pc, #100]	@ (800770c <start_position_playback+0x6c>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02a      	beq.n	8007704 <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 80076ae:	4b18      	ldr	r3, [pc, #96]	@ (8007710 <start_position_playback+0x70>)
 80076b0:	2204      	movs	r2, #4
 80076b2:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 80076b4:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <start_position_playback+0x74>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 80076ba:	4b17      	ldr	r3, [pc, #92]	@ (8007718 <start_position_playback+0x78>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80076c0:	2201      	movs	r2, #1
 80076c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80076c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80076ca:	f005 f95f 	bl	800c98c <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 80076ce:	4b13      	ldr	r3, [pc, #76]	@ (800771c <start_position_playback+0x7c>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 80076d4:	4b12      	ldr	r3, [pc, #72]	@ (8007720 <start_position_playback+0x80>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 80076da:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <start_position_playback+0x80>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 80076e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80076e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007724 <start_position_playback+0x84>
 80076e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80076ec:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007728 <start_position_playback+0x88>
 80076f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076f4:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 80076f8:	edd7 0a01 	vldr	s1, [r7, #4]
 80076fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8007700:	f7fe ff84 	bl	800660c <start_combined_trajectory>
	}
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000600 	.word	0x20000600
 8007710:	200005ac 	.word	0x200005ac
 8007714:	20000601 	.word	0x20000601
 8007718:	2000060c 	.word	0x2000060c
 800771c:	20000608 	.word	0x20000608
 8007720:	200005b0 	.word	0x200005b0
 8007724:	43340000 	.word	0x43340000
 8007728:	40490fdb 	.word	0x40490fdb

0800772c <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007732:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <reset_joy_mode_data+0x6c>)
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007738:	4b18      	ldr	r3, [pc, #96]	@ (800779c <reset_joy_mode_data+0x70>)
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	e011      	b.n	8007768 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007744:	4a16      	ldr	r2, [pc, #88]	@ (80077a0 <reset_joy_mode_data+0x74>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4413      	add	r3, r2
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007752:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <reset_joy_mode_data+0x74>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	3304      	adds	r3, #4
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3301      	adds	r3, #1
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b09      	cmp	r3, #9
 800776c:	ddea      	ble.n	8007744 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <reset_joy_mode_data+0x78>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007774:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <reset_joy_mode_data+0x7c>)
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <reset_joy_mode_data+0x80>)
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <reset_joy_mode_data+0x84>)
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <reset_joy_mode_data+0x88>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	20000600 	.word	0x20000600
 800779c:	20000601 	.word	0x20000601
 80077a0:	200005b0 	.word	0x200005b0
 80077a4:	20000604 	.word	0x20000604
 80077a8:	20000608 	.word	0x20000608
 80077ac:	2000060c 	.word	0x2000060c
 80077b0:	20000610 	.word	0x20000610
 80077b4:	20000611 	.word	0x20000611

080077b8 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	ed2d 8b02 	vpush	{d8}
 80077c0:	b091      	sub	sp, #68	@ 0x44
 80077c2:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80077c4:	2101      	movs	r1, #1
 80077c6:	48a3      	ldr	r0, [pc, #652]	@ (8007a54 <update_joy_mode_velocity_control+0x29c>)
 80077c8:	f005 f8c8 	bl	800c95c <HAL_GPIO_ReadPin>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf14      	ite	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	2300      	moveq	r3, #0
 80077d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80077da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80077de:	489d      	ldr	r0, [pc, #628]	@ (8007a54 <update_joy_mode_velocity_control+0x29c>)
 80077e0:	f005 f8bc 	bl	800c95c <HAL_GPIO_ReadPin>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	bool pris_moving = false;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80077fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <update_joy_mode_velocity_control+0x6a>
 8007806:	4b94      	ldr	r3, [pc, #592]	@ (8007a58 <update_joy_mode_velocity_control+0x2a0>)
 8007808:	edd3 7a00 	vldr	s15, [r3]
 800780c:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8007a5c <update_joy_mode_velocity_control+0x2a4>
 8007810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007818:	dd03      	ble.n	8007822 <update_joy_mode_velocity_control+0x6a>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007820:	e04b      	b.n	80078ba <update_joy_mode_velocity_control+0x102>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007822:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00d      	beq.n	8007846 <update_joy_mode_velocity_control+0x8e>
 800782a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a58 <update_joy_mode_velocity_control+0x2a0>)
 800782c:	edd3 7a00 	vldr	s15, [r3]
 8007830:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8007a60 <update_joy_mode_velocity_control+0x2a8>
 8007834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783c:	d503      	bpl.n	8007846 <update_joy_mode_velocity_control+0x8e>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007844:	e039      	b.n	80078ba <update_joy_mode_velocity_control+0x102>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007846:	4b84      	ldr	r3, [pc, #528]	@ (8007a58 <update_joy_mode_velocity_control+0x2a0>)
 8007848:	edd3 7a00 	vldr	s15, [r3]
 800784c:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8007a60 <update_joy_mode_velocity_control+0x2a8>
 8007850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007858:	d50f      	bpl.n	800787a <update_joy_mode_velocity_control+0xc2>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 800785a:	4b82      	ldr	r3, [pc, #520]	@ (8007a64 <update_joy_mode_velocity_control+0x2ac>)
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007864:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007868:	f083 0301 	eor.w	r3, r3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d023      	beq.n	80078ba <update_joy_mode_velocity_control+0x102>
			up_photo = false;
 8007872:	4a7d      	ldr	r2, [pc, #500]	@ (8007a68 <update_joy_mode_velocity_control+0x2b0>)
 8007874:	2300      	movs	r3, #0
 8007876:	7013      	strb	r3, [r2, #0]
 8007878:	e01f      	b.n	80078ba <update_joy_mode_velocity_control+0x102>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 800787a:	4b77      	ldr	r3, [pc, #476]	@ (8007a58 <update_joy_mode_velocity_control+0x2a0>)
 800787c:	edd3 7a00 	vldr	s15, [r3]
 8007880:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8007a5c <update_joy_mode_velocity_control+0x2a4>
 8007884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788c:	dd0f      	ble.n	80078ae <update_joy_mode_velocity_control+0xf6>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 800788e:	4b77      	ldr	r3, [pc, #476]	@ (8007a6c <update_joy_mode_velocity_control+0x2b4>)
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007898:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800789c:	f083 0301 	eor.w	r3, r3, #1
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <update_joy_mode_velocity_control+0x102>
			low_photo = false;
 80078a6:	4a72      	ldr	r2, [pc, #456]	@ (8007a70 <update_joy_mode_velocity_control+0x2b8>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	7013      	strb	r3, [r2, #0]
 80078ac:	e005      	b.n	80078ba <update_joy_mode_velocity_control+0x102>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = false;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
	bool rev_moving = false;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 80078c6:	4b6b      	ldr	r3, [pc, #428]	@ (8007a74 <update_joy_mode_velocity_control+0x2bc>)
 80078c8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80078cc:	220e      	movs	r2, #14
 80078ce:	210f      	movs	r1, #15
 80078d0:	eeb0 0a67 	vmov.f32	s0, s15
 80078d4:	4868      	ldr	r0, [pc, #416]	@ (8007a78 <update_joy_mode_velocity_control+0x2c0>)
 80078d6:	f7fd f917 	bl	8004b08 <UnitConverter_angle>
 80078da:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 80078de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80078e2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8007a7c <update_joy_mode_velocity_control+0x2c4>
 80078e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	dd09      	ble.n	8007904 <update_joy_mode_velocity_control+0x14c>
 80078f0:	4b63      	ldr	r3, [pc, #396]	@ (8007a80 <update_joy_mode_velocity_control+0x2c8>)
 80078f2:	edd3 7a00 	vldr	s15, [r3]
 80078f6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007a5c <update_joy_mode_velocity_control+0x2a4>
 80078fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	dc12      	bgt.n	800792a <update_joy_mode_velocity_control+0x172>
			|| (revolute_deg < -175.0f
 8007904:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007908:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8007a84 <update_joy_mode_velocity_control+0x2cc>
 800790c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	d510      	bpl.n	8007938 <update_joy_mode_velocity_control+0x180>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007916:	4b5a      	ldr	r3, [pc, #360]	@ (8007a80 <update_joy_mode_velocity_control+0x2c8>)
 8007918:	edd3 7a00 	vldr	s15, [r3]
 800791c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8007a60 <update_joy_mode_velocity_control+0x2a8>
 8007920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	d506      	bpl.n	8007938 <update_joy_mode_velocity_control+0x180>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 8007930:	2300      	movs	r3, #0
 8007932:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007936:	e027      	b.n	8007988 <update_joy_mode_velocity_control+0x1d0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007938:	4b51      	ldr	r3, [pc, #324]	@ (8007a80 <update_joy_mode_velocity_control+0x2c8>)
 800793a:	edd3 7a00 	vldr	s15, [r3]
 800793e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007a5c <update_joy_mode_velocity_control+0x2a4>
 8007942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794a:	dd06      	ble.n	800795a <update_joy_mode_velocity_control+0x1a2>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 800794c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007958:	e016      	b.n	8007988 <update_joy_mode_velocity_control+0x1d0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 800795a:	4b49      	ldr	r3, [pc, #292]	@ (8007a80 <update_joy_mode_velocity_control+0x2c8>)
 800795c:	edd3 7a00 	vldr	s15, [r3]
 8007960:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007a60 <update_joy_mode_velocity_control+0x2a8>
 8007964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	d506      	bpl.n	800797c <update_joy_mode_velocity_control+0x1c4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 800796e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800797a:	e005      	b.n	8007988 <update_joy_mode_velocity_control+0x1d0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 8007982:	2300      	movs	r3, #0
 8007984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	}

	/* PRISMATIC AXIS CONTROL */
	if (pris_moving) {
 8007988:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 808b 	beq.w	8007aa8 <update_joy_mode_velocity_control+0x2f0>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007992:	4b3d      	ldr	r3, [pc, #244]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 8007994:	edd3 7a07 	vldr	s15, [r3, #28]
 8007998:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800799c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 80079a0:	4b39      	ldr	r3, [pc, #228]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 80079a2:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80079a6:	4b38      	ldr	r3, [pc, #224]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 80079a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80079ac:	eeb0 0a67 	vmov.f32	s0, s15
 80079b0:	4836      	ldr	r0, [pc, #216]	@ (8007a8c <update_joy_mode_velocity_control+0x2d4>)
 80079b2:	f7f9 fc31 	bl	8001218 <PID_CONTROLLER_Compute>
 80079b6:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80079ba:	4b35      	ldr	r3, [pc, #212]	@ (8007a90 <update_joy_mode_velocity_control+0x2d8>)
 80079bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f7f9 f87e 	bl	8000ac4 <__aeabi_d2iz>
 80079c8:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80079ca:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <update_joy_mode_velocity_control+0x2d8>)
 80079cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80079d0:	4690      	mov	r8, r2
 80079d2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	f7f9 f873 	bl	8000ac4 <__aeabi_d2iz>
 80079de:	4603      	mov	r3, r0
 80079e0:	4619      	mov	r1, r3
 80079e2:	4620      	mov	r0, r4
 80079e4:	eeb0 0a48 	vmov.f32	s0, s16
 80079e8:	f7f9 fbb4 	bl	8001154 <PWM_Satuation>
 80079ec:	ee07 0a90 	vmov	s15, r0
 80079f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079f4:	4b24      	ldr	r3, [pc, #144]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 80079f6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80079fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80079fe:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8007a94 <update_joy_mode_velocity_control+0x2dc>
 8007a02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a06:	eeb0 0a47 	vmov.f32	s0, s14
 8007a0a:	4823      	ldr	r0, [pc, #140]	@ (8007a98 <update_joy_mode_velocity_control+0x2e0>)
 8007a0c:	f7f9 ff42 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8007a10:	eef0 7a40 	vmov.f32	s15, s0
 8007a14:	4b1c      	ldr	r3, [pc, #112]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 8007a16:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007a1a:	4b16      	ldr	r3, [pc, #88]	@ (8007a74 <update_joy_mode_velocity_control+0x2bc>)
 8007a1c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007a20:	4b1e      	ldr	r3, [pc, #120]	@ (8007a9c <update_joy_mode_velocity_control+0x2e4>)
 8007a22:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007a26:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8007a94 <update_joy_mode_velocity_control+0x2dc>
 8007a2a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007a2e:	eeb0 1a66 	vmov.f32	s2, s13
 8007a32:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8007aa0 <update_joy_mode_velocity_control+0x2e8>
 8007a36:	eeb0 0a47 	vmov.f32	s0, s14
 8007a3a:	481a      	ldr	r0, [pc, #104]	@ (8007aa4 <update_joy_mode_velocity_control+0x2ec>)
 8007a3c:	f7f9 ffbd 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8007a40:	eef0 7a40 	vmov.f32	s15, s0
 8007a44:	4b10      	ldr	r3, [pc, #64]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 8007a46:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007a4a:	4b14      	ldr	r3, [pc, #80]	@ (8007a9c <update_joy_mode_velocity_control+0x2e4>)
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a88 <update_joy_mode_velocity_control+0x2d0>)
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	e09b      	b.n	8007b8c <update_joy_mode_velocity_control+0x3d4>
 8007a54:	48000400 	.word	0x48000400
 8007a58:	20001b54 	.word	0x20001b54
 8007a5c:	42200000 	.word	0x42200000
 8007a60:	c2200000 	.word	0xc2200000
 8007a64:	43480000 	.word	0x43480000
 8007a68:	20000560 	.word	0x20000560
 8007a6c:	c3480000 	.word	0xc3480000
 8007a70:	20000561 	.word	0x20000561
 8007a74:	20000708 	.word	0x20000708
 8007a78:	20000a78 	.word	0x20000a78
 8007a7c:	432f0000 	.word	0x432f0000
 8007a80:	20001b58 	.word	0x20001b58
 8007a84:	c32f0000 	.word	0xc32f0000
 8007a88:	20000480 	.word	0x20000480
 8007a8c:	2000078c 	.word	0x2000078c
 8007a90:	20000080 	.word	0x20000080
 8007a94:	447a0000 	.word	0x447a0000
 8007a98:	20000804 	.word	0x20000804
 8007a9c:	200006ac 	.word	0x200006ac
 8007aa0:	00000000 	.word	0x00000000
 8007aa4:	20000808 	.word	0x20000808
	} else {
		// Not moving - hold current position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007aa8:	4b81      	ldr	r3, [pc, #516]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007aaa:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007aae:	4b81      	ldr	r3, [pc, #516]	@ (8007cb4 <update_joy_mode_velocity_control+0x4fc>)
 8007ab0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007aba:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007abe:	4b7c      	ldr	r3, [pc, #496]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007ac0:	edd3 7a05 	vldr	s15, [r3, #20]
 8007ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ac8:	487b      	ldr	r0, [pc, #492]	@ (8007cb8 <update_joy_mode_velocity_control+0x500>)
 8007aca:	f7f9 fba5 	bl	8001218 <PID_CONTROLLER_Compute>
 8007ace:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007ad4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	f7f8 fff2 	bl	8000ac4 <__aeabi_d2iz>
 8007ae0:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007ae2:	4b76      	ldr	r3, [pc, #472]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007ae4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007ae8:	4692      	mov	sl, r2
 8007aea:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_vel = PWM_Satuation(
 8007aee:	4650      	mov	r0, sl
 8007af0:	4659      	mov	r1, fp
 8007af2:	f7f8 ffe7 	bl	8000ac4 <__aeabi_d2iz>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4619      	mov	r1, r3
 8007afa:	4620      	mov	r0, r4
 8007afc:	eeb0 0a48 	vmov.f32	s0, s16
 8007b00:	f7f9 fb28 	bl	8001154 <PWM_Satuation>
 8007b04:	ee07 0a90 	vmov	s15, r0
 8007b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b0c:	4b68      	ldr	r3, [pc, #416]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b0e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007b12:	4b67      	ldr	r3, [pc, #412]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b14:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007b18:	4b65      	ldr	r3, [pc, #404]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8007b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007b22:	4b63      	ldr	r3, [pc, #396]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b24:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007b28:	4b61      	ldr	r3, [pc, #388]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b32:	4863      	ldr	r0, [pc, #396]	@ (8007cc0 <update_joy_mode_velocity_control+0x508>)
 8007b34:	f7f9 fb70 	bl	8001218 <PID_CONTROLLER_Compute>
 8007b38:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f7f8 ffbd 	bl	8000ac4 <__aeabi_d2iz>
 8007b4a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007b4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007b52:	4615      	mov	r5, r2
 8007b54:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007b58:	4628      	mov	r0, r5
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	f7f8 ffb2 	bl	8000ac4 <__aeabi_d2iz>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4619      	mov	r1, r3
 8007b64:	4620      	mov	r0, r4
 8007b66:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6a:	f7f9 faf3 	bl	8001154 <PWM_Satuation>
 8007b6e:	ee07 0a90 	vmov	s15, r0
 8007b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b76:	4b4e      	ldr	r3, [pc, #312]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007b84:	4b4a      	ldr	r3, [pc, #296]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007b8c:	4b48      	ldr	r3, [pc, #288]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b8e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007b92:	4b47      	ldr	r3, [pc, #284]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b94:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007b98:	4b45      	ldr	r3, [pc, #276]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007b9a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba6:	4b42      	ldr	r3, [pc, #264]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007ba8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007bac:	4b40      	ldr	r3, [pc, #256]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007bae:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007bb2:	4b42      	ldr	r3, [pc, #264]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007bb4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	f7f8 ff82 	bl	8000ac4 <__aeabi_d2iz>
 8007bc0:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8007cbc <update_joy_mode_velocity_control+0x504>)
 8007bc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007bc8:	623a      	str	r2, [r7, #32]
 8007bca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007bd4:	f7f8 ff76 	bl	8000ac4 <__aeabi_d2iz>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4620      	mov	r0, r4
 8007bde:	eeb0 0a48 	vmov.f32	s0, s16
 8007be2:	f7f9 fab7 	bl	8001154 <PWM_Satuation>
 8007be6:	ee07 0a90 	vmov	s15, r0
 8007bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bee:	4b30      	ldr	r3, [pc, #192]	@ (8007cb0 <update_joy_mode_velocity_control+0x4f8>)
 8007bf0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL */
	if (rev_moving) {
 8007bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d071      	beq.n	8007ce0 <update_joy_mode_velocity_control+0x528>
		// Moving - use velocity control
		revolute_axis.vel_error = rev_command_vel
				- revolute_axis.kalman_velocity;
 8007bfc:	4b31      	ldr	r3, [pc, #196]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007bfe:	edd3 7a07 	vldr	s15, [r3, #28]
 8007c02:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8007c06:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = rev_command_vel
 8007c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007c0c:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8007c10:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007c12:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c16:	eeb0 0a67 	vmov.f32	s0, s15
 8007c1a:	482b      	ldr	r0, [pc, #172]	@ (8007cc8 <update_joy_mode_velocity_control+0x510>)
 8007c1c:	f7f9 fafc 	bl	8001218 <PID_CONTROLLER_Compute>
 8007c20:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8007c24:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <update_joy_mode_velocity_control+0x514>)
 8007c26:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7f8 ff49 	bl	8000ac4 <__aeabi_d2iz>
 8007c32:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8007c34:	4b25      	ldr	r3, [pc, #148]	@ (8007ccc <update_joy_mode_velocity_control+0x514>)
 8007c36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c3a:	61ba      	str	r2, [r7, #24]
 8007c3c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007c40:	61fb      	str	r3, [r7, #28]
		revolute_axis.command_pos = PWM_Satuation(
 8007c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c46:	f7f8 ff3d 	bl	8000ac4 <__aeabi_d2iz>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4620      	mov	r0, r4
 8007c50:	eeb0 0a48 	vmov.f32	s0, s16
 8007c54:	f7f9 fa7e 	bl	8001154 <PWM_Satuation>
 8007c58:	ee07 0a90 	vmov	s15, r0
 8007c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c60:	4b18      	ldr	r3, [pc, #96]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007c62:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007c66:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8007c6a:	4819      	ldr	r0, [pc, #100]	@ (8007cd0 <update_joy_mode_velocity_control+0x518>)
 8007c6c:	f7f9 fc94 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8007c70:	eef0 7a40 	vmov.f32	s15, s0
 8007c74:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007c76:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				rev_command_vel);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c7a:	4b16      	ldr	r3, [pc, #88]	@ (8007cd4 <update_joy_mode_velocity_control+0x51c>)
 8007c7c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007c80:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <update_joy_mode_velocity_control+0x4fc>)
 8007c82:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c86:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007cd8 <update_joy_mode_velocity_control+0x520>
 8007c8a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007c8e:	eef0 0a66 	vmov.f32	s1, s13
 8007c92:	eeb0 0a47 	vmov.f32	s0, s14
 8007c96:	4811      	ldr	r0, [pc, #68]	@ (8007cdc <update_joy_mode_velocity_control+0x524>)
 8007c98:	f7f9 fd11 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007c9c:	eef0 7a40 	vmov.f32	s15, s0
 8007ca0:	4b08      	ldr	r3, [pc, #32]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007ca2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		revolute_axis.position = revolute_encoder.rads;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <update_joy_mode_velocity_control+0x51c>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	4a06      	ldr	r2, [pc, #24]	@ (8007cc4 <update_joy_mode_velocity_control+0x50c>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	e0cd      	b.n	8007e4c <update_joy_mode_velocity_control+0x694>
 8007cb0:	20000480 	.word	0x20000480
 8007cb4:	200006ac 	.word	0x200006ac
 8007cb8:	20000764 	.word	0x20000764
 8007cbc:	20000080 	.word	0x20000080
 8007cc0:	2000078c 	.word	0x2000078c
 8007cc4:	200004c0 	.word	0x200004c0
 8007cc8:	200007dc 	.word	0x200007dc
 8007ccc:	20000000 	.word	0x20000000
 8007cd0:	20000810 	.word	0x20000810
 8007cd4:	20000708 	.word	0x20000708
 8007cd8:	447a0000 	.word	0x447a0000
 8007cdc:	20000814 	.word	0x20000814
	} else {
		// Not moving - hold current position with position control
		float normalized_position = normalize_angle(revolute_encoder.rads);
 8007ce0:	4b82      	ldr	r3, [pc, #520]	@ (8007eec <update_joy_mode_velocity_control+0x734>)
 8007ce2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cea:	f7fe fba5 	bl	8006438 <normalize_angle>
 8007cee:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8007cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007cf4:	ed93 7a00 	vldr	s14, [r3]
 8007cf8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d00:	4b7b      	ldr	r3, [pc, #492]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d02:	edc3 7a05 	vstr	s15, [r3, #20]

		// Handle angle wrapping for position error
		if (revolute_axis.pos_error > PI)
 8007d06:	4b7a      	ldr	r3, [pc, #488]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d08:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d0c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8007ef4 <update_joy_mode_velocity_control+0x73c>
 8007d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d18:	dd09      	ble.n	8007d2e <update_joy_mode_velocity_control+0x576>
			revolute_axis.pos_error -= 2.0f * PI;
 8007d1a:	4b75      	ldr	r3, [pc, #468]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d20:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8007ef8 <update_joy_mode_velocity_control+0x740>
 8007d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d28:	4b71      	ldr	r3, [pc, #452]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d2a:	edc3 7a05 	vstr	s15, [r3, #20]
		if (revolute_axis.pos_error < -PI)
 8007d2e:	4b70      	ldr	r3, [pc, #448]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d30:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d34:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8007efc <update_joy_mode_velocity_control+0x744>
 8007d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d40:	d509      	bpl.n	8007d56 <update_joy_mode_velocity_control+0x59e>
			revolute_axis.pos_error += 2.0f * PI;
 8007d42:	4b6b      	ldr	r3, [pc, #428]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d44:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d48:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8007ef8 <update_joy_mode_velocity_control+0x740>
 8007d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d50:	4b67      	ldr	r3, [pc, #412]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d52:	edc3 7a05 	vstr	s15, [r3, #20]

		revolute_axis.command_vel = PWM_Satuation(
 8007d56:	4b66      	ldr	r3, [pc, #408]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007d58:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d60:	4867      	ldr	r0, [pc, #412]	@ (8007f00 <update_joy_mode_velocity_control+0x748>)
 8007d62:	f7f9 fa59 	bl	8001218 <PID_CONTROLLER_Compute>
 8007d66:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_position_pid,
						revolute_axis.pos_error),
				ZGX45RGG_150RPM_Constant.qd_max,
 8007d6a:	4b66      	ldr	r3, [pc, #408]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007d6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		revolute_axis.command_vel = PWM_Satuation(
 8007d70:	4610      	mov	r0, r2
 8007d72:	4619      	mov	r1, r3
 8007d74:	f7f8 fea6 	bl	8000ac4 <__aeabi_d2iz>
 8007d78:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.qd_max);
 8007d7a:	4b62      	ldr	r3, [pc, #392]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007d7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007d80:	613a      	str	r2, [r7, #16]
 8007d82:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d86:	617b      	str	r3, [r7, #20]
		revolute_axis.command_vel = PWM_Satuation(
 8007d88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d8c:	f7f8 fe9a 	bl	8000ac4 <__aeabi_d2iz>
 8007d90:	4603      	mov	r3, r0
 8007d92:	4619      	mov	r1, r3
 8007d94:	4620      	mov	r0, r4
 8007d96:	eeb0 0a48 	vmov.f32	s0, s16
 8007d9a:	f7f9 f9db 	bl	8001154 <PWM_Satuation>
 8007d9e:	ee07 0a90 	vmov	s15, r0
 8007da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007da6:	4b52      	ldr	r3, [pc, #328]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007da8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		revolute_axis.vel_error = revolute_axis.command_vel
 8007dac:	4b50      	ldr	r3, [pc, #320]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007dae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8007db2:	4b4f      	ldr	r3, [pc, #316]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007db4:	edd3 7a07 	vldr	s15, [r3, #28]
 8007db8:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8007dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007dbe:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8007dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007dc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8007dcc:	484e      	ldr	r0, [pc, #312]	@ (8007f08 <update_joy_mode_velocity_control+0x750>)
 8007dce:	f7f9 fa23 	bl	8001218 <PID_CONTROLLER_Compute>
 8007dd2:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8007dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007dd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7f8 fe70 	bl	8000ac4 <__aeabi_d2iz>
 8007de4:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8007de6:	4b47      	ldr	r3, [pc, #284]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007de8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007dec:	60ba      	str	r2, [r7, #8]
 8007dee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007df2:	60fb      	str	r3, [r7, #12]
		revolute_axis.command_pos = PWM_Satuation(
 8007df4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007df8:	f7f8 fe64 	bl	8000ac4 <__aeabi_d2iz>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4620      	mov	r0, r4
 8007e02:	eeb0 0a48 	vmov.f32	s0, s16
 8007e06:	f7f9 f9a5 	bl	8001154 <PWM_Satuation>
 8007e0a:	ee07 0a90 	vmov	s15, r0
 8007e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e12:	4b37      	ldr	r3, [pc, #220]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e14:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Always include DFD for gravity compensation, but no FFD when holding
		revolute_axis.ffd = 0.0f;
 8007e18:	4b35      	ldr	r3, [pc, #212]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007e20:	4b32      	ldr	r3, [pc, #200]	@ (8007eec <update_joy_mode_velocity_control+0x734>)
 8007e22:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007e26:	4b39      	ldr	r3, [pc, #228]	@ (8007f0c <update_joy_mode_velocity_control+0x754>)
 8007e28:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007e2c:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8007f10 <update_joy_mode_velocity_control+0x758>
 8007e30:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007e34:	eef0 0a66 	vmov.f32	s1, s13
 8007e38:	eeb0 0a47 	vmov.f32	s0, s14
 8007e3c:	4835      	ldr	r0, [pc, #212]	@ (8007f14 <update_joy_mode_velocity_control+0x75c>)
 8007e3e:	f7f9 fc3e 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007e42:	eef0 7a40 	vmov.f32	s15, s0
 8007e46:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e48:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8007e4c:	4b28      	ldr	r3, [pc, #160]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e4e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007e52:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e54:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007e58:	4b25      	ldr	r3, [pc, #148]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e5a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e66:	4b22      	ldr	r3, [pc, #136]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e68:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007e6c:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007e6e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007e72:	4b24      	ldr	r3, [pc, #144]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007e74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f7f8 fe22 	bl	8000ac4 <__aeabi_d2iz>
 8007e80:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007e82:	4b20      	ldr	r3, [pc, #128]	@ (8007f04 <update_joy_mode_velocity_control+0x74c>)
 8007e84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007e88:	603a      	str	r2, [r7, #0]
 8007e8a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007e8e:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e94:	f7f8 fe16 	bl	8000ac4 <__aeabi_d2iz>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8007ea2:	f7f9 f957 	bl	8001154 <PWM_Satuation>
 8007ea6:	ee07 0a90 	vmov	s15, r0
 8007eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007eb0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007eb4:	4b18      	ldr	r3, [pc, #96]	@ (8007f18 <update_joy_mode_velocity_control+0x760>)
 8007eb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007eba:	eef0 0a67 	vmov.f32	s1, s15
 8007ebe:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007f1c <update_joy_mode_velocity_control+0x764>
 8007ec2:	4817      	ldr	r0, [pc, #92]	@ (8007f20 <update_joy_mode_velocity_control+0x768>)
 8007ec4:	f7f9 fa80 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8007ec8:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <update_joy_mode_velocity_control+0x738>)
 8007eca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007ece:	eef0 0a67 	vmov.f32	s1, s15
 8007ed2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8007f1c <update_joy_mode_velocity_control+0x764>
 8007ed6:	4813      	ldr	r0, [pc, #76]	@ (8007f24 <update_joy_mode_velocity_control+0x76c>)
 8007ed8:	f7f9 fa76 	bl	80013c8 <MDXX_set_range>
}
 8007edc:	bf00      	nop
 8007ede:	3744      	adds	r7, #68	@ 0x44
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	ecbd 8b02 	vpop	{d8}
 8007ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eea:	bf00      	nop
 8007eec:	20000708 	.word	0x20000708
 8007ef0:	200004c0 	.word	0x200004c0
 8007ef4:	40490fdb 	.word	0x40490fdb
 8007ef8:	40c90fdb 	.word	0x40c90fdb
 8007efc:	c0490fdb 	.word	0xc0490fdb
 8007f00:	200007b4 	.word	0x200007b4
 8007f04:	20000000 	.word	0x20000000
 8007f08:	200007dc 	.word	0x200007dc
 8007f0c:	200006ac 	.word	0x200006ac
 8007f10:	447a0000 	.word	0x447a0000
 8007f14:	20000814 	.word	0x20000814
 8007f18:	20000480 	.word	0x20000480
 8007f1c:	44fa0000 	.word	0x44fa0000
 8007f20:	20000614 	.word	0x20000614
 8007f24:	20000660 	.word	0x20000660

08007f28 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007f2c:	4b14      	ldr	r3, [pc, #80]	@ (8007f80 <update_joy_mode_pilot_light+0x58>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d122      	bne.n	8007f7a <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8007f34:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <update_joy_mode_pilot_light+0x5c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	4a12      	ldr	r2, [pc, #72]	@ (8007f84 <update_joy_mode_pilot_light+0x5c>)
 8007f3c:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8007f3e:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <update_joy_mode_pilot_light+0x5c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f46:	d318      	bcc.n	8007f7a <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007f48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f50:	f004 fd34 	bl	800c9bc <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <update_joy_mode_pilot_light+0x60>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bf14      	ite	ne
 8007f5e:	2301      	movne	r3, #1
 8007f60:	2300      	moveq	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f083 0301 	eor.w	r3, r3, #1
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <update_joy_mode_pilot_light+0x60>)
 8007f72:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007f74:	4b03      	ldr	r3, [pc, #12]	@ (8007f84 <update_joy_mode_pilot_light+0x5c>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200005ac 	.word	0x200005ac
 8007f84:	20000604 	.word	0x20000604
 8007f88:	20000608 	.word	0x20000608

08007f8c <update_joy_mode>:

void update_joy_mode(void) {
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	ed2d 8b02 	vpush	{d8}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8007f96:	4b8f      	ldr	r3, [pc, #572]	@ (80081d4 <update_joy_mode+0x248>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f083 0301 	eor.w	r3, r3, #1
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f040 81c2 	bne.w	800832a <update_joy_mode+0x39e>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8007fa6:	4b8c      	ldr	r3, [pc, #560]	@ (80081d8 <update_joy_mode+0x24c>)
 8007fa8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007fac:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb0:	f7fe fa42 	bl	8006438 <normalize_angle>
 8007fb4:	eef0 7a40 	vmov.f32	s15, s0
 8007fb8:	4b88      	ldr	r3, [pc, #544]	@ (80081dc <update_joy_mode+0x250>)
 8007fba:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8007fbe:	4b88      	ldr	r3, [pc, #544]	@ (80081e0 <update_joy_mode+0x254>)
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc2:	4a88      	ldr	r2, [pc, #544]	@ (80081e4 <update_joy_mode+0x258>)
 8007fc4:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007fc6:	4b85      	ldr	r3, [pc, #532]	@ (80081dc <update_joy_mode+0x250>)
 8007fc8:	edd3 7a00 	vldr	s15, [r3]
 8007fcc:	220e      	movs	r2, #14
 8007fce:	210f      	movs	r1, #15
 8007fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fd4:	4884      	ldr	r0, [pc, #528]	@ (80081e8 <update_joy_mode+0x25c>)
 8007fd6:	f7fc fd97 	bl	8004b08 <UnitConverter_angle>
 8007fda:	eef0 7a40 	vmov.f32	s15, s0
 8007fde:	4b83      	ldr	r3, [pc, #524]	@ (80081ec <update_joy_mode+0x260>)
 8007fe0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8007fe4:	4b82      	ldr	r3, [pc, #520]	@ (80081f0 <update_joy_mode+0x264>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	f200 819f 	bhi.w	800832e <update_joy_mode+0x3a2>
 8007ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <update_joy_mode+0x6c>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	0800800d 	.word	0x0800800d
 8007ffc:	08008013 	.word	0x08008013
 8008000:	08008019 	.word	0x08008019
 8008004:	0800801f 	.word	0x0800801f
 8008008:	08008325 	.word	0x08008325
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 800800c:	f7ff fbd4 	bl	80077b8 <update_joy_mode_velocity_control>
		break;
 8008010:	e190      	b.n	8008334 <update_joy_mode+0x3a8>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8008012:	f7ff fbd1 	bl	80077b8 <update_joy_mode_velocity_control>
		break;
 8008016:	e18d      	b.n	8008334 <update_joy_mode+0x3a8>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8008018:	f7ff ff86 	bl	8007f28 <update_joy_mode_pilot_light>
		break;
 800801c:	e18a      	b.n	8008334 <update_joy_mode+0x3a8>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 800801e:	4b75      	ldr	r3, [pc, #468]	@ (80081f4 <update_joy_mode+0x268>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b05      	cmp	r3, #5
 8008024:	f200 8166 	bhi.w	80082f4 <update_joy_mode+0x368>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <update_joy_mode+0xa4>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	08008049 	.word	0x08008049
 8008034:	080080cd 	.word	0x080080cd
 8008038:	080080f1 	.word	0x080080f1
 800803c:	08008229 	.word	0x08008229
 8008040:	080082cf 	.word	0x080082cf
 8008044:	080082ed 	.word	0x080082ed
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 8008048:	4b6b      	ldr	r3, [pc, #428]	@ (80081f8 <update_joy_mode+0x26c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a6a      	ldr	r2, [pc, #424]	@ (80081f8 <update_joy_mode+0x26c>)
 8008050:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8008052:	4b69      	ldr	r3, [pc, #420]	@ (80081f8 <update_joy_mode+0x26c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800805a:	f0c0 814d 	bcc.w	80082f8 <update_joy_mode+0x36c>
				playback_position_index++;
 800805e:	4b67      	ldr	r3, [pc, #412]	@ (80081fc <update_joy_mode+0x270>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	b2da      	uxtb	r2, r3
 8008066:	4b65      	ldr	r3, [pc, #404]	@ (80081fc <update_joy_mode+0x270>)
 8008068:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 800806a:	4b64      	ldr	r3, [pc, #400]	@ (80081fc <update_joy_mode+0x270>)
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	4b64      	ldr	r3, [pc, #400]	@ (8008200 <update_joy_mode+0x274>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d224      	bcs.n	80080c0 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8008076:	4b61      	ldr	r3, [pc, #388]	@ (80081fc <update_joy_mode+0x270>)
 8008078:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 800807a:	4a62      	ldr	r2, [pc, #392]	@ (8008204 <update_joy_mode+0x278>)
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8008084:	4b5d      	ldr	r3, [pc, #372]	@ (80081fc <update_joy_mode+0x270>)
 8008086:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8008088:	4a5e      	ldr	r2, [pc, #376]	@ (8008204 <update_joy_mode+0x278>)
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8008094:	edd7 7a02 	vldr	s15, [r7, #8]
 8008098:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8008208 <update_joy_mode+0x27c>
 800809c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80080a0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800820c <update_joy_mode+0x280>
 80080a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080a8:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 80080ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80080b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80080b4:	f7fe faaa 	bl	800660c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 80080b8:	4b4f      	ldr	r3, [pc, #316]	@ (80081f8 <update_joy_mode+0x26c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

					// Start homing sequence after a short delay
					start_homing_sequence(false); // false = manual homing (not startup)
				}
			}
			break;
 80080be:	e11b      	b.n	80082f8 <update_joy_mode+0x36c>
					exit_joy_mode();
 80080c0:	f7ff f9e8 	bl	8007494 <exit_joy_mode>
					start_homing_sequence(false); // false = manual homing (not startup)
 80080c4:	2000      	movs	r0, #0
 80080c6:	f7fd fb97 	bl	80057f8 <start_homing_sequence>
			break;
 80080ca:	e115      	b.n	80082f8 <update_joy_mode+0x36c>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 80080cc:	4b50      	ldr	r3, [pc, #320]	@ (8008210 <update_joy_mode+0x284>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a4f      	ldr	r2, [pc, #316]	@ (8008210 <update_joy_mode+0x284>)
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80080da:	4293      	cmp	r3, r2
 80080dc:	f240 810e 	bls.w	80082fc <update_joy_mode+0x370>
				prismatic_axis.trajectory_active = true;
 80080e0:	4b40      	ldr	r3, [pc, #256]	@ (80081e4 <update_joy_mode+0x258>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 80080e8:	4b42      	ldr	r3, [pc, #264]	@ (80081f4 <update_joy_mode+0x268>)
 80080ea:	2202      	movs	r2, #2
 80080ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80080ee:	e105      	b.n	80082fc <update_joy_mode+0x370>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80080f0:	4b3c      	ldr	r3, [pc, #240]	@ (80081e4 <update_joy_mode+0x258>)
 80080f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8102 	beq.w	8008300 <update_joy_mode+0x374>
 80080fc:	4b45      	ldr	r3, [pc, #276]	@ (8008214 <update_joy_mode+0x288>)
 80080fe:	7c1b      	ldrb	r3, [r3, #16]
 8008100:	f083 0301 	eor.w	r3, r3, #1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80fa 	beq.w	8008300 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800810c:	4b35      	ldr	r3, [pc, #212]	@ (80081e4 <update_joy_mode+0x258>)
 800810e:	ed93 8a03 	vldr	s16, [r3, #12]
 8008112:	4b34      	ldr	r3, [pc, #208]	@ (80081e4 <update_joy_mode+0x258>)
 8008114:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8008118:	4b3f      	ldr	r3, [pc, #252]	@ (8008218 <update_joy_mode+0x28c>)
 800811a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	f7f8 fd17 	bl	8000b54 <__aeabi_d2f>
 8008126:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8008128:	4b3b      	ldr	r3, [pc, #236]	@ (8008218 <update_joy_mode+0x28c>)
 800812a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800812e:	4610      	mov	r0, r2
 8008130:	4619      	mov	r1, r3
 8008132:	f7f8 fd0f 	bl	8000b54 <__aeabi_d2f>
 8008136:	4603      	mov	r3, r0
 8008138:	ee01 3a90 	vmov	s3, r3
 800813c:	ee01 4a10 	vmov	s2, r4
 8008140:	eef0 0a68 	vmov.f32	s1, s17
 8008144:	eeb0 0a48 	vmov.f32	s0, s16
 8008148:	4932      	ldr	r1, [pc, #200]	@ (8008214 <update_joy_mode+0x288>)
 800814a:	4834      	ldr	r0, [pc, #208]	@ (800821c <update_joy_mode+0x290>)
 800814c:	f7fc f944 	bl	80043d8 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8008150:	4b30      	ldr	r3, [pc, #192]	@ (8008214 <update_joy_mode+0x288>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a23      	ldr	r2, [pc, #140]	@ (80081e4 <update_joy_mode+0x258>)
 8008156:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8008158:	4b2e      	ldr	r3, [pc, #184]	@ (8008214 <update_joy_mode+0x288>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4a21      	ldr	r2, [pc, #132]	@ (80081e4 <update_joy_mode+0x258>)
 800815e:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8008160:	4b2c      	ldr	r3, [pc, #176]	@ (8008214 <update_joy_mode+0x288>)
 8008162:	7c1b      	ldrb	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 80cb 	beq.w	8008300 <update_joy_mode+0x374>
					prismatic_axis.trajectory_active = false;
 800816a:	4b1e      	ldr	r3, [pc, #120]	@ (80081e4 <update_joy_mode+0x258>)
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 8008172:	4b28      	ldr	r3, [pc, #160]	@ (8008214 <update_joy_mode+0x288>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1b      	ldr	r2, [pc, #108]	@ (80081e4 <update_joy_mode+0x258>)
 8008178:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 800817a:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <update_joy_mode+0x258>)
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008182:	4b1a      	ldr	r3, [pc, #104]	@ (80081ec <update_joy_mode+0x260>)
 8008184:	ed93 8a03 	vldr	s16, [r3, #12]
 8008188:	4b18      	ldr	r3, [pc, #96]	@ (80081ec <update_joy_mode+0x260>)
 800818a:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 800818e:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <update_joy_mode+0x294>)
 8008190:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008194:	4610      	mov	r0, r2
 8008196:	4619      	mov	r1, r3
 8008198:	f7f8 fcdc 	bl	8000b54 <__aeabi_d2f>
 800819c:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <update_joy_mode+0x294>)
 80081a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	f7f8 fcd4 	bl	8000b54 <__aeabi_d2f>
 80081ac:	4603      	mov	r3, r0
 80081ae:	ee01 3a90 	vmov	s3, r3
 80081b2:	ee01 4a10 	vmov	s2, r4
 80081b6:	eef0 0a68 	vmov.f32	s1, s17
 80081ba:	eeb0 0a48 	vmov.f32	s0, s16
 80081be:	4819      	ldr	r0, [pc, #100]	@ (8008224 <update_joy_mode+0x298>)
 80081c0:	f7fc f848 	bl	8004254 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 80081c4:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <update_joy_mode+0x260>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 80081cc:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <update_joy_mode+0x268>)
 80081ce:	2203      	movs	r2, #3
 80081d0:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80081d2:	e095      	b.n	8008300 <update_joy_mode+0x374>
 80081d4:	200005ad 	.word	0x200005ad
 80081d8:	20000708 	.word	0x20000708
 80081dc:	200005a4 	.word	0x200005a4
 80081e0:	200006ac 	.word	0x200006ac
 80081e4:	20000480 	.word	0x20000480
 80081e8:	20000a78 	.word	0x20000a78
 80081ec:	200004c0 	.word	0x200004c0
 80081f0:	200005ac 	.word	0x200005ac
 80081f4:	20000500 	.word	0x20000500
 80081f8:	2000060c 	.word	0x2000060c
 80081fc:	20000601 	.word	0x20000601
 8008200:	20000600 	.word	0x20000600
 8008204:	200005b0 	.word	0x200005b0
 8008208:	43340000 	.word	0x43340000
 800820c:	40490fdb 	.word	0x40490fdb
 8008210:	20000558 	.word	0x20000558
 8008214:	2000052c 	.word	0x2000052c
 8008218:	20000080 	.word	0x20000080
 800821c:	20000504 	.word	0x20000504
 8008220:	20000000 	.word	0x20000000
 8008224:	20000518 	.word	0x20000518

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8008228:	4b45      	ldr	r3, [pc, #276]	@ (8008340 <update_joy_mode+0x3b4>)
 800822a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800822e:	2b00      	cmp	r3, #0
 8008230:	d068      	beq.n	8008304 <update_joy_mode+0x378>
 8008232:	4b44      	ldr	r3, [pc, #272]	@ (8008344 <update_joy_mode+0x3b8>)
 8008234:	7c1b      	ldrb	r3, [r3, #16]
 8008236:	f083 0301 	eor.w	r3, r3, #1
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d061      	beq.n	8008304 <update_joy_mode+0x378>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8008240:	4b3f      	ldr	r3, [pc, #252]	@ (8008340 <update_joy_mode+0x3b4>)
 8008242:	ed93 8a03 	vldr	s16, [r3, #12]
 8008246:	4b3e      	ldr	r3, [pc, #248]	@ (8008340 <update_joy_mode+0x3b4>)
 8008248:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 800824c:	4b3e      	ldr	r3, [pc, #248]	@ (8008348 <update_joy_mode+0x3bc>)
 800824e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8008252:	4610      	mov	r0, r2
 8008254:	4619      	mov	r1, r3
 8008256:	f7f8 fc7d 	bl	8000b54 <__aeabi_d2f>
 800825a:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800825c:	4b3a      	ldr	r3, [pc, #232]	@ (8008348 <update_joy_mode+0x3bc>)
 800825e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8008262:	4610      	mov	r0, r2
 8008264:	4619      	mov	r1, r3
 8008266:	f7f8 fc75 	bl	8000b54 <__aeabi_d2f>
 800826a:	4603      	mov	r3, r0
 800826c:	ee01 3a90 	vmov	s3, r3
 8008270:	ee01 4a10 	vmov	s2, r4
 8008274:	eef0 0a68 	vmov.f32	s1, s17
 8008278:	eeb0 0a48 	vmov.f32	s0, s16
 800827c:	4931      	ldr	r1, [pc, #196]	@ (8008344 <update_joy_mode+0x3b8>)
 800827e:	4833      	ldr	r0, [pc, #204]	@ (800834c <update_joy_mode+0x3c0>)
 8008280:	f7fc f8aa 	bl	80043d8 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8008284:	4b2f      	ldr	r3, [pc, #188]	@ (8008344 <update_joy_mode+0x3b8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2d      	ldr	r2, [pc, #180]	@ (8008340 <update_joy_mode+0x3b4>)
 800828a:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 800828c:	4b2d      	ldr	r3, [pc, #180]	@ (8008344 <update_joy_mode+0x3b8>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a2b      	ldr	r2, [pc, #172]	@ (8008340 <update_joy_mode+0x3b4>)
 8008292:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8008294:	4b2b      	ldr	r3, [pc, #172]	@ (8008344 <update_joy_mode+0x3b8>)
 8008296:	7c1b      	ldrb	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d033      	beq.n	8008304 <update_joy_mode+0x378>
					revolute_axis.trajectory_active = false;
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <update_joy_mode+0x3b4>)
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 80082a4:	4b27      	ldr	r3, [pc, #156]	@ (8008344 <update_joy_mode+0x3b8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a25      	ldr	r2, [pc, #148]	@ (8008340 <update_joy_mode+0x3b4>)
 80082aa:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 80082ac:	4b24      	ldr	r3, [pc, #144]	@ (8008340 <update_joy_mode+0x3b4>)
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 80082b4:	4826      	ldr	r0, [pc, #152]	@ (8008350 <update_joy_mode+0x3c4>)
 80082b6:	f7f9 f841 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80082ba:	4826      	ldr	r0, [pc, #152]	@ (8008354 <update_joy_mode+0x3c8>)
 80082bc:	f7f9 f83e 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 80082c0:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <update_joy_mode+0x3cc>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80082c6:	4b25      	ldr	r3, [pc, #148]	@ (800835c <update_joy_mode+0x3d0>)
 80082c8:	2204      	movs	r2, #4
 80082ca:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80082cc:	e01a      	b.n	8008304 <update_joy_mode+0x378>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 80082ce:	4b22      	ldr	r3, [pc, #136]	@ (8008358 <update_joy_mode+0x3cc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	4a20      	ldr	r2, [pc, #128]	@ (8008358 <update_joy_mode+0x3cc>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80082dc:	4293      	cmp	r3, r2
 80082de:	d913      	bls.n	8008308 <update_joy_mode+0x37c>
				plotter_pen_down();
 80082e0:	f001 f80c 	bl	80092fc <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 80082e4:	4b1d      	ldr	r3, [pc, #116]	@ (800835c <update_joy_mode+0x3d0>)
 80082e6:	2205      	movs	r2, #5
 80082e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80082ea:	e00d      	b.n	8008308 <update_joy_mode+0x37c>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 80082ec:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <update_joy_mode+0x3d0>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
			break;
 80082f2:	e00a      	b.n	800830a <update_joy_mode+0x37e>

		default:
			break;
 80082f4:	bf00      	nop
 80082f6:	e008      	b.n	800830a <update_joy_mode+0x37e>
			break;
 80082f8:	bf00      	nop
 80082fa:	e006      	b.n	800830a <update_joy_mode+0x37e>
			break;
 80082fc:	bf00      	nop
 80082fe:	e004      	b.n	800830a <update_joy_mode+0x37e>
			break;
 8008300:	bf00      	nop
 8008302:	e002      	b.n	800830a <update_joy_mode+0x37e>
			break;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <update_joy_mode+0x37e>
			break;
 8008308:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 800830a:	4b14      	ldr	r3, [pc, #80]	@ (800835c <update_joy_mode+0x3d0>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00f      	beq.n	8008332 <update_joy_mode+0x3a6>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008312:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <update_joy_mode+0x3d4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b09      	cmp	r3, #9
 8008318:	d901      	bls.n	800831e <update_joy_mode+0x392>
				update_position_control();
 800831a:	f7fe fa4d 	bl	80067b8 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 800831e:	f7fe fb09 	bl	8006934 <update_velocity_control>
		}
		break;
 8008322:	e006      	b.n	8008332 <update_joy_mode+0x3a6>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8008324:	f7ff f8b6 	bl	8007494 <exit_joy_mode>
		break;
 8008328:	e004      	b.n	8008334 <update_joy_mode+0x3a8>
		return;
 800832a:	bf00      	nop
 800832c:	e002      	b.n	8008334 <update_joy_mode+0x3a8>

	default:
		break;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <update_joy_mode+0x3a8>
		break;
 8008332:	bf00      	nop
	}
}
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	ecbd 8b02 	vpop	{d8}
 800833c:	bd90      	pop	{r4, r7, pc}
 800833e:	bf00      	nop
 8008340:	200004c0 	.word	0x200004c0
 8008344:	20000540 	.word	0x20000540
 8008348:	20000000 	.word	0x20000000
 800834c:	20000518 	.word	0x20000518
 8008350:	200007b4 	.word	0x200007b4
 8008354:	200007dc 	.word	0x200007dc
 8008358:	20000558 	.word	0x20000558
 800835c:	20000500 	.word	0x20000500
 8008360:	200005a0 	.word	0x200005a0

08008364 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800836a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800836e:	4827      	ldr	r0, [pc, #156]	@ (800840c <handle_b2_button_polling+0xa8>)
 8008370:	f004 faf4 	bl	800c95c <HAL_GPIO_ReadPin>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf0c      	ite	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	2300      	movne	r3, #0
 800837e:	71fb      	strb	r3, [r7, #7]

	// Simple edge detection without debounce timer here
	if (b2_current_state && !joy_mode_b2_last_state) {
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d031      	beq.n	80083ea <handle_b2_button_polling+0x86>
 8008386:	4b22      	ldr	r3, [pc, #136]	@ (8008410 <handle_b2_button_polling+0xac>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f083 0301 	eor.w	r3, r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02a      	beq.n	80083ea <handle_b2_button_polling+0x86>
		// Button just pressed - trigger action immediately
		joy_mode_b2_pressed = true;
 8008394:	4b1f      	ldr	r3, [pc, #124]	@ (8008414 <handle_b2_button_polling+0xb0>)
 8008396:	2201      	movs	r2, #1
 8008398:	701a      	strb	r2, [r3, #0]
		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 800839a:	f7fe fff9 	bl	8007390 <is_emergency_active>
 800839e:	4603      	mov	r3, r0
 80083a0:	f083 0301 	eor.w	r3, r3, #1
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01f      	beq.n	80083ea <handle_b2_button_polling+0x86>
 80083aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008418 <handle_b2_button_polling+0xb4>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f083 0301 	eor.w	r3, r3, #1
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d018      	beq.n	80083ea <handle_b2_button_polling+0x86>
				&& motion_sequence_state == MOTION_IDLE) {
 80083b8:	4b18      	ldr	r3, [pc, #96]	@ (800841c <handle_b2_button_polling+0xb8>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d114      	bne.n	80083ea <handle_b2_button_polling+0x86>
			// Joy mode is active, handle button press based on current state
			if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 80083c0:	4b17      	ldr	r3, [pc, #92]	@ (8008420 <handle_b2_button_polling+0xbc>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d103      	bne.n	80083d0 <handle_b2_button_polling+0x6c>
				// First B2 press in joy mode - start position saving mode
				joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <handle_b2_button_polling+0xbc>)
 80083ca:	2202      	movs	r2, #2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e00c      	b.n	80083ea <handle_b2_button_polling+0x86>
			} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 80083d0:	4b13      	ldr	r3, [pc, #76]	@ (8008420 <handle_b2_button_polling+0xbc>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d102      	bne.n	80083de <handle_b2_button_polling+0x7a>
				// Save current position
				save_current_position();
 80083d8:	f7ff f8e4 	bl	80075a4 <save_current_position>
 80083dc:	e005      	b.n	80083ea <handle_b2_button_polling+0x86>
			} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 80083de:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <handle_b2_button_polling+0xbc>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d101      	bne.n	80083ea <handle_b2_button_polling+0x86>
				// Start playback of saved positions
				start_position_playback();
 80083e6:	f7ff f95b 	bl	80076a0 <start_position_playback>

		}
	}

	// Update last state
	joy_mode_b2_last_state = b2_current_state;
 80083ea:	4a09      	ldr	r2, [pc, #36]	@ (8008410 <handle_b2_button_polling+0xac>)
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	7013      	strb	r3, [r2, #0]

	// Reset pressed flag when button is released
	if (!b2_current_state) {
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	f083 0301 	eor.w	r3, r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <handle_b2_button_polling+0x9e>
		joy_mode_b2_pressed = false;
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <handle_b2_button_polling+0xb0>)
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
	}
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	48000800 	.word	0x48000800
 8008410:	20000611 	.word	0x20000611
 8008414:	20000610 	.word	0x20000610
 8008418:	20000563 	.word	0x20000563
 800841c:	20000500 	.word	0x20000500
 8008420:	200005ac 	.word	0x200005ac

08008424 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2b40      	cmp	r3, #64	@ 0x40
 8008432:	d105      	bne.n	8008440 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8008434:	4b4e      	ldr	r3, [pc, #312]	@ (8008570 <HAL_GPIO_EXTI_Callback+0x14c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	4a4d      	ldr	r2, [pc, #308]	@ (8008570 <HAL_GPIO_EXTI_Callback+0x14c>)
 800843c:	6013      	str	r3, [r2, #0]
		return;
 800843e:	e093      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d103      	bne.n	800844e <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8008446:	4b4b      	ldr	r3, [pc, #300]	@ (8008574 <HAL_GPIO_EXTI_Callback+0x150>)
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
		return;
 800844c:	e08c      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008454:	d103      	bne.n	800845e <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8008456:	4b48      	ldr	r3, [pc, #288]	@ (8008578 <HAL_GPIO_EXTI_Callback+0x154>)
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
		return;
 800845c:	e084      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	2b10      	cmp	r3, #16
 8008462:	d102      	bne.n	800846a <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8008464:	f7fe fe68 	bl	8007138 <trigger_hardware_emergency>
		return;
 8008468:	e07e      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	2b80      	cmp	r3, #128	@ 0x80
 800846e:	d145      	bne.n	80084fc <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008470:	f7fe ff8e 	bl	8007390 <is_emergency_active>
 8008474:	4603      	mov	r3, r0
 8008476:	f083 0301 	eor.w	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d06e      	beq.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
 8008480:	4b3e      	ldr	r3, [pc, #248]	@ (800857c <HAL_GPIO_EXTI_Callback+0x158>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f083 0301 	eor.w	r3, r3, #1
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d067      	beq.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
 800848e:	4b3c      	ldr	r3, [pc, #240]	@ (8008580 <HAL_GPIO_EXTI_Callback+0x15c>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f083 0301 	eor.w	r3, r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d060      	beq.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 800849c:	4b39      	ldr	r3, [pc, #228]	@ (8008584 <HAL_GPIO_EXTI_Callback+0x160>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d15c      	bne.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
 80084a4:	4b38      	ldr	r3, [pc, #224]	@ (8008588 <HAL_GPIO_EXTI_Callback+0x164>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f083 0301 	eor.w	r3, r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d055      	beq.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 80084b2:	4b36      	ldr	r3, [pc, #216]	@ (800858c <HAL_GPIO_EXTI_Callback+0x168>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 80084b6:	4a36      	ldr	r2, [pc, #216]	@ (8008590 <HAL_GPIO_EXTI_Callback+0x16c>)
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 80084c0:	4b32      	ldr	r3, [pc, #200]	@ (800858c <HAL_GPIO_EXTI_Callback+0x168>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 80084c4:	4a33      	ldr	r2, [pc, #204]	@ (8008594 <HAL_GPIO_EXTI_Callback+0x170>)
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 80084ce:	eef0 0a47 	vmov.f32	s1, s14
 80084d2:	eeb0 0a67 	vmov.f32	s0, s15
 80084d6:	f7fe f899 	bl	800660c <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 80084da:	4b2c      	ldr	r3, [pc, #176]	@ (800858c <HAL_GPIO_EXTI_Callback+0x168>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 80084e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008598 <HAL_GPIO_EXTI_Callback+0x174>)
 80084e2:	fb83 3102 	smull	r3, r1, r3, r2
 80084e6:	17d3      	asrs	r3, r2, #31
 80084e8:	1ac9      	subs	r1, r1, r3
 80084ea:	460b      	mov	r3, r1
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	440b      	add	r3, r1
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 80084f4:	b2ca      	uxtb	r2, r1
 80084f6:	4b25      	ldr	r3, [pc, #148]	@ (800858c <HAL_GPIO_EXTI_Callback+0x168>)
 80084f8:	701a      	strb	r2, [r3, #0]

		}
		return;
 80084fa:	e030      	b.n	800855e <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008502:	d116      	bne.n	8008532 <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8008504:	f7fe ff44 	bl	8007390 <is_emergency_active>
 8008508:	4603      	mov	r3, r0
 800850a:	f083 0301 	eor.w	r3, r3, #1
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d026      	beq.n	8008562 <HAL_GPIO_EXTI_Callback+0x13e>
 8008514:	4b1a      	ldr	r3, [pc, #104]	@ (8008580 <HAL_GPIO_EXTI_Callback+0x15c>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f083 0301 	eor.w	r3, r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01f      	beq.n	8008562 <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 8008522:	4b18      	ldr	r3, [pc, #96]	@ (8008584 <HAL_GPIO_EXTI_Callback+0x160>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d11b      	bne.n	8008562 <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 800852a:	2000      	movs	r0, #0
 800852c:	f7fd f964 	bl	80057f8 <start_homing_sequence>

		}
		return;
 8008530:	e017      	b.n	8008562 <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008538:	d116      	bne.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 800853a:	4b11      	ldr	r3, [pc, #68]	@ (8008580 <HAL_GPIO_EXTI_Callback+0x15c>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008542:	f7fe ffa7 	bl	8007494 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8008546:	e00e      	b.n	8008566 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 8008548:	f7fe ff22 	bl	8007390 <is_emergency_active>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 8008552:	f7fe fe2f 	bl	80071b4 <clear_emergency_state>
			start_homing_sequence(true);
 8008556:	2001      	movs	r0, #1
 8008558:	f7fd f94e 	bl	80057f8 <start_homing_sequence>
		return;
 800855c:	e003      	b.n	8008566 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 800855e:	bf00      	nop
 8008560:	e002      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8008562:	bf00      	nop
 8008564:	e000      	b.n	8008568 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8008566:	bf00      	nop
	}
}
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	2000055c 	.word	0x2000055c
 8008574:	20000560 	.word	0x20000560
 8008578:	20000561 	.word	0x20000561
 800857c:	20000563 	.word	0x20000563
 8008580:	200005ad 	.word	0x200005ad
 8008584:	20000500 	.word	0x20000500
 8008588:	20000333 	.word	0x20000333
 800858c:	20000554 	.word	0x20000554
 8008590:	080144d8 	.word	0x080144d8
 8008594:	080144f0 	.word	0x080144f0
 8008598:	2aaaaaab 	.word	0x2aaaaaab

0800859c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a8e      	ldr	r2, [pc, #568]	@ (80087e0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	f040 8115 	bne.w	80087d8 <HAL_TIM_PeriodElapsedCallback+0x23c>
		Modbus_Protocal_Worker();
 80085ae:	f7f9 fcf1 	bl	8001f94 <Modbus_Protocal_Worker>
		modbus_working();
 80085b2:	f000 f939 	bl	8008828 <modbus_working>
		plotter_update_sensors();
 80085b6:	f000 fdff 	bl	80091b8 <plotter_update_sensors>

		check_emergency_button();
 80085ba:	f7fe fd2d 	bl	8007018 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 80085be:	4889      	ldr	r0, [pc, #548]	@ (80087e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80085c0:	f7fb fc02 	bl	8003dc8 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 80085c4:	4887      	ldr	r0, [pc, #540]	@ (80087e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80085c6:	f7fb fceb 	bl	8003fa0 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 80085ca:	4887      	ldr	r0, [pc, #540]	@ (80087e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80085cc:	f7fb fbfc 	bl	8003dc8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 80085d0:	4885      	ldr	r0, [pc, #532]	@ (80087e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80085d2:	f7fb fce5 	bl	8003fa0 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80085d6:	4b85      	ldr	r3, [pc, #532]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 80085d8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80085dc:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80085e0:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80085e4:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 80087f0 <HAL_TIM_PeriodElapsedCallback+0x254>
 80085e8:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80087f4 <HAL_TIM_PeriodElapsedCallback+0x258>
 80085ec:	eeb0 0a67 	vmov.f32	s0, s15
 80085f0:	f7f9 fbb8 	bl	8001d64 <mapf>
 80085f4:	eef0 7a40 	vmov.f32	s15, s0
 80085f8:	4b7c      	ldr	r3, [pc, #496]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 80085fa:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 80085fe:	4b7b      	ldr	r3, [pc, #492]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 8008600:	edd3 7a08 	vldr	s15, [r3, #32]
 8008604:	4b78      	ldr	r3, [pc, #480]	@ (80087e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8008606:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800860a:	eef0 0a47 	vmov.f32	s1, s14
 800860e:	eeb0 0a67 	vmov.f32	s0, s15
 8008612:	4879      	ldr	r0, [pc, #484]	@ (80087f8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8008614:	f7fc fcf4 	bl	8005000 <SteadyStateKalmanFilter>
 8008618:	eef0 7a40 	vmov.f32	s15, s0
 800861c:	4b73      	ldr	r3, [pc, #460]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 800861e:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008622:	4b72      	ldr	r3, [pc, #456]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 8008624:	edd3 7a07 	vldr	s15, [r3, #28]
 8008628:	eef4 7a67 	vcmp.f32	s15, s15
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d703      	bvc.n	800863a <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008632:	4b6e      	ldr	r3, [pc, #440]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 800863a:	4b70      	ldr	r3, [pc, #448]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 800863c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008640:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008644:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008648:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 80087f0 <HAL_TIM_PeriodElapsedCallback+0x254>
 800864c:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80087f4 <HAL_TIM_PeriodElapsedCallback+0x258>
 8008650:	eeb0 0a67 	vmov.f32	s0, s15
 8008654:	f7f9 fb86 	bl	8001d64 <mapf>
 8008658:	eef0 7a40 	vmov.f32	s15, s0
 800865c:	4b67      	ldr	r3, [pc, #412]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 800865e:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008662:	4b66      	ldr	r3, [pc, #408]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8008664:	edd3 7a08 	vldr	s15, [r3, #32]
 8008668:	4b5e      	ldr	r3, [pc, #376]	@ (80087e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800866a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800866e:	eef0 0a47 	vmov.f32	s1, s14
 8008672:	eeb0 0a67 	vmov.f32	s0, s15
 8008676:	4862      	ldr	r0, [pc, #392]	@ (8008800 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8008678:	f7fa fde2 	bl	8003240 <MotorKalman_Estimate>
 800867c:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008680:	4b60      	ldr	r3, [pc, #384]	@ (8008804 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8008682:	edd3 7a04 	vldr	s15, [r3, #16]
 8008686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8008808 <HAL_TIM_PeriodElapsedCallback+0x26c>
 800868e:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008692:	4b5a      	ldr	r3, [pc, #360]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8008694:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008698:	4b58      	ldr	r3, [pc, #352]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 800869a:	edd3 7a07 	vldr	s15, [r3, #28]
 800869e:	eef4 7a67 	vcmp.f32	s15, s15
 80086a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a6:	d703      	bvc.n	80086b0 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 80086a8:	4b54      	ldr	r3, [pc, #336]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	61da      	str	r2, [r3, #28]
		}

		// Position control update - ONLY exclude joy mode manual states from NORMAL control
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 80086b0:	4b56      	ldr	r3, [pc, #344]	@ (800880c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a55      	ldr	r2, [pc, #340]	@ (800880c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d926      	bls.n	800870c <HAL_TIM_PeriodElapsedCallback+0x170>
			position_control_tick = 0;
 80086be:	4b53      	ldr	r3, [pc, #332]	@ (800880c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]

			if (!homing_active
 80086c4:	4b52      	ldr	r3, [pc, #328]	@ (8008810 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f083 0301 	eor.w	r3, r3, #1
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01c      	beq.n	800870c <HAL_TIM_PeriodElapsedCallback+0x170>
					&& (!joy_mode_active
 80086d2:	4b50      	ldr	r3, [pc, #320]	@ (8008814 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f083 0301 	eor.w	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d107      	bne.n	80086f0 <HAL_TIM_PeriodElapsedCallback+0x154>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80086e0:	4b4d      	ldr	r3, [pc, #308]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d011      	beq.n	800870c <HAL_TIM_PeriodElapsedCallback+0x170>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL))
 80086e8:	4b4b      	ldr	r3, [pc, #300]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d00d      	beq.n	800870c <HAL_TIM_PeriodElapsedCallback+0x170>
					&& (!is_emergency_active() || tuning_mode)) {
 80086f0:	f7fe fe4e 	bl	8007390 <is_emergency_active>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f083 0301 	eor.w	r3, r3, #1
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8008700:	4b46      	ldr	r3, [pc, #280]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_TIM_PeriodElapsedCallback+0x170>
				update_position_control();
 8008708:	f7fe f856 	bl	80067b8 <update_position_control>
			}
		}

		// Velocity control update - ONLY exclude joy mode manual states from NORMAL control
		if (!homing_active
 800870c:	4b40      	ldr	r3, [pc, #256]	@ (8008810 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f083 0301 	eor.w	r3, r3, #1
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01c      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1b8>
				&& (!joy_mode_active
 800871a:	4b3e      	ldr	r3, [pc, #248]	@ (8008814 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f083 0301 	eor.w	r3, r3, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d107      	bne.n	8008738 <HAL_TIM_PeriodElapsedCallback+0x19c>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008728:	4b3b      	ldr	r3, [pc, #236]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d011      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1b8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8008730:	4b39      	ldr	r3, [pc, #228]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d00d      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1b8>
				&& (!is_emergency_active() || tuning_mode)) {
 8008738:	f7fe fe2a 	bl	8007390 <is_emergency_active>
 800873c:	4603      	mov	r3, r0
 800873e:	f083 0301 	eor.w	r3, r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8008748:	4b34      	ldr	r3, [pc, #208]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			update_velocity_control();
 8008750:	f7fe f8f0 	bl	8006934 <update_velocity_control>
		}

		update_safety_system();
 8008754:	f7fe fd9a 	bl	800728c <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8008758:	f7fe fe1a 	bl	8007390 <is_emergency_active>
 800875c:	4603      	mov	r3, r0
 800875e:	f083 0301 	eor.w	r3, r3, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8008768:	4b2c      	ldr	r3, [pc, #176]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			check_safety_conditions();
 8008770:	f7fe fc74 	bl	800705c <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008774:	4b27      	ldr	r3, [pc, #156]	@ (8008814 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f083 0301 	eor.w	r3, r3, #1
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			update_control_loops();
 8008782:	f7fe faa1 	bl	8006cc8 <update_control_loops>
 8008786:	e001      	b.n	800878c <HAL_TIM_PeriodElapsedCallback+0x1f0>
		} else {
			update_joy_mode();
 8008788:	f7ff fc00 	bl	8007f8c <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 800878c:	4b21      	ldr	r3, [pc, #132]	@ (8008814 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f083 0301 	eor.w	r3, r3, #1
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01e      	beq.n	80087d8 <HAL_TIM_PeriodElapsedCallback+0x23c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 800879a:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800879c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80087a0:	eeb0 0a67 	vmov.f32	s0, s15
 80087a4:	f7fd fe48 	bl	8006438 <normalize_angle>
 80087a8:	eef0 7a40 	vmov.f32	s15, s0
 80087ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80087ae:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 80087b2:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80087b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b6:	4a11      	ldr	r2, [pc, #68]	@ (80087fc <HAL_TIM_PeriodElapsedCallback+0x260>)
 80087b8:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 80087ba:	4b19      	ldr	r3, [pc, #100]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80087bc:	edd3 7a00 	vldr	s15, [r3]
 80087c0:	220e      	movs	r2, #14
 80087c2:	210f      	movs	r1, #15
 80087c4:	eeb0 0a67 	vmov.f32	s0, s15
 80087c8:	4816      	ldr	r0, [pc, #88]	@ (8008824 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80087ca:	f7fc f99d 	bl	8004b08 <UnitConverter_angle>
 80087ce:	eef0 7a40 	vmov.f32	s15, s0
 80087d2:	4b06      	ldr	r3, [pc, #24]	@ (80087ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 80087d4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()
	}
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20001c44 	.word	0x20001c44
 80087e4:	200006ac 	.word	0x200006ac
 80087e8:	20000708 	.word	0x20000708
 80087ec:	200004c0 	.word	0x200004c0
 80087f0:	477fff00 	.word	0x477fff00
 80087f4:	c77fff00 	.word	0xc77fff00
 80087f8:	20001784 	.word	0x20001784
 80087fc:	20000480 	.word	0x20000480
 8008800:	20001418 	.word	0x20001418
 8008804:	20000100 	.word	0x20000100
 8008808:	447a0000 	.word	0x447a0000
 800880c:	200005a0 	.word	0x200005a0
 8008810:	20000563 	.word	0x20000563
 8008814:	200005ad 	.word	0x200005ad
 8008818:	200005ac 	.word	0x200005ac
 800881c:	20000334 	.word	0x20000334
 8008820:	200005a4 	.word	0x200005a4
 8008824:	20000a78 	.word	0x20000a78

08008828 <modbus_working>:

void modbus_working(void) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
	uint16_t limit_switch_status = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	81fb      	strh	r3, [r7, #14]
	//heartbeat
		registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008832:	4b73      	ldr	r3, [pc, #460]	@ (8008a00 <modbus_working+0x1d8>)
 8008834:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008838:	801a      	strh	r2, [r3, #0]
	//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 800883a:	4b71      	ldr	r3, [pc, #452]	@ (8008a00 <modbus_working+0x1d8>)
 800883c:	891b      	ldrh	r3, [r3, #8]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d102      	bne.n	8008848 <modbus_working+0x20>
		plotter_pen_up();
 8008842:	f000 fd4b 	bl	80092dc <plotter_pen_up>
 8008846:	e005      	b.n	8008854 <modbus_working+0x2c>
	}
	else if(registerFrame[Servo_Down].U16 == 1)
 8008848:	4b6d      	ldr	r3, [pc, #436]	@ (8008a00 <modbus_working+0x1d8>)
 800884a:	895b      	ldrh	r3, [r3, #10]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <modbus_working+0x2c>
	{
		plotter_pen_down();
 8008850:	f000 fd54 	bl	80092fc <plotter_pen_down>
	}

	//limitSW
	if (up_lim == 1) {
 8008854:	4b6b      	ldr	r3, [pc, #428]	@ (8008a04 <modbus_working+0x1dc>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d103      	bne.n	8008864 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 800885c:	89fb      	ldrh	r3, [r7, #14]
 800885e:	f043 0302 	orr.w	r3, r3, #2
 8008862:	81fb      	strh	r3, [r7, #14]
	}
	if (low_lim == 1) {
 8008864:	4b68      	ldr	r3, [pc, #416]	@ (8008a08 <modbus_working+0x1e0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d103      	bne.n	8008874 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 800886c:	89fb      	ldrh	r3, [r7, #14]
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	81fb      	strh	r3, [r7, #14]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008874:	4a62      	ldr	r2, [pc, #392]	@ (8008a00 <modbus_working+0x1d8>)
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 800887a:	4b61      	ldr	r3, [pc, #388]	@ (8008a00 <modbus_working+0x1d8>)
 800887c:	885b      	ldrh	r3, [r3, #2]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d105      	bne.n	800888e <modbus_working+0x66>
		exit_joy_mode();
 8008882:	f7fe fe07 	bl	8007494 <exit_joy_mode>
		start_homing_sequence(true);
 8008886:	2001      	movs	r0, #1
 8008888:	f7fc ffb6 	bl	80057f8 <start_homing_sequence>
 800888c:	e036      	b.n	80088fc <modbus_working+0xd4>
	}else if (registerFrame[BaseSystem_Status].U16 == 2) {
 800888e:	4b5c      	ldr	r3, [pc, #368]	@ (8008a00 <modbus_working+0x1d8>)
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d105      	bne.n	80088a2 <modbus_working+0x7a>
		registerFrame[R_Theta_Status].U16 = 2;
 8008896:	4b5a      	ldr	r3, [pc, #360]	@ (8008a00 <modbus_working+0x1d8>)
 8008898:	2202      	movs	r2, #2
 800889a:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 800889c:	f7fe fd88 	bl	80073b0 <enter_joy_mode>
 80088a0:	e02c      	b.n	80088fc <modbus_working+0xd4>
	}else if (registerFrame[BaseSystem_Status].U16 == 4) {
 80088a2:	4b57      	ldr	r3, [pc, #348]	@ (8008a00 <modbus_working+0x1d8>)
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d105      	bne.n	80088b6 <modbus_working+0x8e>
		registerFrame[R_Theta_Status].U16 = 4;
 80088aa:	4b55      	ldr	r3, [pc, #340]	@ (8008a00 <modbus_working+0x1d8>)
 80088ac:	2204      	movs	r2, #4
 80088ae:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 80088b0:	f7fe fdf0 	bl	8007494 <exit_joy_mode>
 80088b4:	e022      	b.n	80088fc <modbus_working+0xd4>
	}else if (registerFrame[BaseSystem_Status].U16 == 8) {
 80088b6:	4b52      	ldr	r3, [pc, #328]	@ (8008a00 <modbus_working+0x1d8>)
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d11e      	bne.n	80088fc <modbus_working+0xd4>
		registerFrame[R_Theta_Status].U16 = 8;
 80088be:	4b50      	ldr	r3, [pc, #320]	@ (8008a00 <modbus_working+0x1d8>)
 80088c0:	2208      	movs	r2, #8
 80088c2:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 80088c4:	f7fe fde6 	bl	8007494 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16;
 80088c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008a00 <modbus_working+0x1d8>)
 80088ca:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80088ce:	b21b      	sxth	r3, r3
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088d8:	edc7 7a02 	vstr	s15, [r7, #8]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16;
 80088dc:	4b48      	ldr	r3, [pc, #288]	@ (8008a00 <modbus_working+0x1d8>)
 80088de:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80088e2:	b21b      	sxth	r3, r3
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ec:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 80088f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80088f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80088f8:	f7fd fe88 	bl	800660c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0 ;
 80088fc:	4b43      	ldr	r3, [pc, #268]	@ (8008a0c <modbus_working+0x1e4>)
 80088fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008900:	4618      	mov	r0, r3
 8008902:	f7f7 fded 	bl	80004e0 <__aeabi_f2d>
 8008906:	f04f 0200 	mov.w	r2, #0
 800890a:	4b41      	ldr	r3, [pc, #260]	@ (8008a10 <modbus_working+0x1e8>)
 800890c:	f7f7 fe40 	bl	8000590 <__aeabi_dmul>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4610      	mov	r0, r2
 8008916:	4619      	mov	r1, r3
 8008918:	f7f8 f8fc 	bl	8000b14 <__aeabi_d2uiz>
 800891c:	4603      	mov	r3, r0
 800891e:	b29a      	uxth	r2, r3
 8008920:	4b37      	ldr	r3, [pc, #220]	@ (8008a00 <modbus_working+0x1d8>)
 8008922:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity * 10.0;
 8008924:	4b3b      	ldr	r3, [pc, #236]	@ (8008a14 <modbus_working+0x1ec>)
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fdd9 	bl	80004e0 <__aeabi_f2d>
 800892e:	f04f 0200 	mov.w	r2, #0
 8008932:	4b37      	ldr	r3, [pc, #220]	@ (8008a10 <modbus_working+0x1e8>)
 8008934:	f7f7 fe2c 	bl	8000590 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4610      	mov	r0, r2
 800893e:	4619      	mov	r1, r3
 8008940:	f7f8 f8e8 	bl	8000b14 <__aeabi_d2uiz>
 8008944:	4603      	mov	r3, r0
 8008946:	b29a      	uxth	r2, r3
 8008948:	4b2d      	ldr	r3, [pc, #180]	@ (8008a00 <modbus_working+0x1d8>)
 800894a:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[R_Axis_Acceleration].U16 = prismatic_encoder.mmpss * 10.0 ;
 800894c:	4b2f      	ldr	r3, [pc, #188]	@ (8008a0c <modbus_working+0x1e4>)
 800894e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008950:	4618      	mov	r0, r3
 8008952:	f7f7 fdc5 	bl	80004e0 <__aeabi_f2d>
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a10 <modbus_working+0x1e8>)
 800895c:	f7f7 fe18 	bl	8000590 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4610      	mov	r0, r2
 8008966:	4619      	mov	r1, r3
 8008968:	f7f8 f8d4 	bl	8000b14 <__aeabi_d2uiz>
 800896c:	4603      	mov	r3, r0
 800896e:	b29a      	uxth	r2, r3
 8008970:	4b23      	ldr	r3, [pc, #140]	@ (8008a00 <modbus_working+0x1d8>)
 8008972:	855a      	strh	r2, [r3, #42]	@ 0x2a
	float theta_degpss = UnitConverter_angle(&converter_system,
 8008974:	4b28      	ldr	r3, [pc, #160]	@ (8008a18 <modbus_working+0x1f0>)
 8008976:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800897a:	220e      	movs	r2, #14
 800897c:	210f      	movs	r1, #15
 800897e:	eeb0 0a67 	vmov.f32	s0, s15
 8008982:	4826      	ldr	r0, [pc, #152]	@ (8008a1c <modbus_working+0x1f4>)
 8008984:	f7fc f8c0 	bl	8004b08 <UnitConverter_angle>
 8008988:	ed87 0a00 	vstr	s0, [r7]
	                     revolute_encoder.radpss,
	                     UNIT_RADIAN, UNIT_DEGREE);

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg* 10.0;
 800898c:	4b24      	ldr	r3, [pc, #144]	@ (8008a20 <modbus_working+0x1f8>)
 800898e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fda5 	bl	80004e0 <__aeabi_f2d>
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	4b1d      	ldr	r3, [pc, #116]	@ (8008a10 <modbus_working+0x1e8>)
 800899c:	f7f7 fdf8 	bl	8000590 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4610      	mov	r0, r2
 80089a6:	4619      	mov	r1, r3
 80089a8:	f7f8 f8b4 	bl	8000b14 <__aeabi_d2uiz>
 80089ac:	4603      	mov	r3, r0
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	4b13      	ldr	r3, [pc, #76]	@ (8008a00 <modbus_working+0x1d8>)
 80089b2:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[Theta_Axis_Actual_Speed].U16 = revolute_axis.kalman_velocity * 10.0;
 80089b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a20 <modbus_working+0x1f8>)
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7f7 fd91 	bl	80004e0 <__aeabi_f2d>
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	4b13      	ldr	r3, [pc, #76]	@ (8008a10 <modbus_working+0x1e8>)
 80089c4:	f7f7 fde4 	bl	8000590 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4610      	mov	r0, r2
 80089ce:	4619      	mov	r1, r3
 80089d0:	f7f8 f8a0 	bl	8000b14 <__aeabi_d2uiz>
 80089d4:	4603      	mov	r3, r0
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	4b09      	ldr	r3, [pc, #36]	@ (8008a00 <modbus_working+0x1d8>)
 80089da:	851a      	strh	r2, [r3, #40]	@ 0x28
	registerFrame[Theta_Axis_Acceleration].U16 = (int16_t)(theta_degpss * 10.0f);
 80089dc:	edd7 7a00 	vldr	s15, [r7]
 80089e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80089e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ec:	ee17 3a90 	vmov	r3, s15
 80089f0:	b21b      	sxth	r3, r3
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	4b02      	ldr	r3, [pc, #8]	@ (8008a00 <modbus_working+0x1d8>)
 80089f6:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20001288 	.word	0x20001288
 8008a04:	20001b5c 	.word	0x20001b5c
 8008a08:	20001b60 	.word	0x20001b60
 8008a0c:	200006ac 	.word	0x200006ac
 8008a10:	40240000 	.word	0x40240000
 8008a14:	20000480 	.word	0x20000480
 8008a18:	20000708 	.word	0x20000708
 8008a1c:	20000a78 	.word	0x20000a78
 8008a20:	200004c0 	.word	0x200004c0

08008a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008a28:	b672      	cpsid	i
}
 8008a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <Error_Handler+0x8>

08008a30 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a34:	ed2d 8b02 	vpush	{d8}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008a3c:	4bc4      	ldr	r3, [pc, #784]	@ (8008d50 <plotter_begin+0x320>)
 8008a3e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8008a42:	4bc4      	ldr	r3, [pc, #784]	@ (8008d54 <plotter_begin+0x324>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f7 fd4a 	bl	80004e0 <__aeabi_f2d>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fd9c 	bl	8000590 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4619      	mov	r1, r3
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	4bbc      	ldr	r3, [pc, #752]	@ (8008d58 <plotter_begin+0x328>)
 8008a66:	f7f7 fd93 	bl	8000590 <__aeabi_dmul>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008a6e:	49b8      	ldr	r1, [pc, #736]	@ (8008d50 <plotter_begin+0x320>)
 8008a70:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8008a74:	4bb6      	ldr	r3, [pc, #728]	@ (8008d50 <plotter_begin+0x320>)
 8008a76:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	f7f7 fbd1 	bl	8000224 <__adddf3>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	49b2      	ldr	r1, [pc, #712]	@ (8008d50 <plotter_begin+0x320>)
 8008a88:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008a8c:	49b0      	ldr	r1, [pc, #704]	@ (8008d50 <plotter_begin+0x320>)
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	4bb2      	ldr	r3, [pc, #712]	@ (8008d5c <plotter_begin+0x32c>)
 8008a94:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008a98:	49ad      	ldr	r1, [pc, #692]	@ (8008d50 <plotter_begin+0x320>)
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	4bae      	ldr	r3, [pc, #696]	@ (8008d58 <plotter_begin+0x328>)
 8008aa0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008aa4:	4bae      	ldr	r3, [pc, #696]	@ (8008d60 <plotter_begin+0x330>)
 8008aa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008aaa:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008d48 <plotter_begin+0x318>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fd6e 	bl	8000590 <__aeabi_dmul>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008ab8:	49a9      	ldr	r1, [pc, #676]	@ (8008d60 <plotter_begin+0x330>)
 8008aba:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008abe:	49a8      	ldr	r1, [pc, #672]	@ (8008d60 <plotter_begin+0x330>)
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	4ba7      	ldr	r3, [pc, #668]	@ (8008d64 <plotter_begin+0x334>)
 8008ac6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 10.0;
 8008aca:	49a5      	ldr	r1, [pc, #660]	@ (8008d60 <plotter_begin+0x330>)
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	4ba5      	ldr	r3, [pc, #660]	@ (8008d68 <plotter_begin+0x338>)
 8008ad2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	48a4      	ldr	r0, [pc, #656]	@ (8008d6c <plotter_begin+0x33c>)
 8008ada:	f000 fc1f 	bl	800931c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8008ade:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8008d70 <plotter_begin+0x340>
 8008ae2:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008d74 <plotter_begin+0x344>
 8008ae6:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008dac <plotter_begin+0x37c>
 8008aea:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008dac <plotter_begin+0x37c>
 8008aee:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008d78 <plotter_begin+0x348>
 8008af2:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008d70 <plotter_begin+0x340>
 8008af6:	489d      	ldr	r0, [pc, #628]	@ (8008d6c <plotter_begin+0x33c>)
 8008af8:	f000 fc6e 	bl	80093d8 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8008afc:	2102      	movs	r1, #2
 8008afe:	489f      	ldr	r0, [pc, #636]	@ (8008d7c <plotter_begin+0x34c>)
 8008b00:	f000 fc0c 	bl	800931c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8008b04:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 8008d70 <plotter_begin+0x340>
 8008b08:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8008d74 <plotter_begin+0x344>
 8008b0c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 8008dac <plotter_begin+0x37c>
 8008b10:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 8008dac <plotter_begin+0x37c>
 8008b14:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008b18:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8008d78 <plotter_begin+0x348>
 8008b1c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8008d70 <plotter_begin+0x340>
 8008b20:	4896      	ldr	r0, [pc, #600]	@ (8008d7c <plotter_begin+0x34c>)
 8008b22:	f000 fc84 	bl	800942e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008b26:	2100      	movs	r1, #0
 8008b28:	4895      	ldr	r0, [pc, #596]	@ (8008d80 <plotter_begin+0x350>)
 8008b2a:	f000 fbf7 	bl	800931c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008b2e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008d84 <plotter_begin+0x354>
 8008b32:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008d88 <plotter_begin+0x358>
 8008b36:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008dac <plotter_begin+0x37c>
 8008b3a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008dac <plotter_begin+0x37c>
 8008b3e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008d78 <plotter_begin+0x348>
 8008b42:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008d84 <plotter_begin+0x354>
 8008b46:	488e      	ldr	r0, [pc, #568]	@ (8008d80 <plotter_begin+0x350>)
 8008b48:	f000 fc46 	bl	80093d8 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	488f      	ldr	r0, [pc, #572]	@ (8008d8c <plotter_begin+0x35c>)
 8008b50:	f000 fbe4 	bl	800931c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8008b54:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008b58:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008b5c:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 8008dac <plotter_begin+0x37c>
 8008b60:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8008dac <plotter_begin+0x37c>
 8008b64:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008b68:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8008d78 <plotter_begin+0x348>
 8008b6c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008b70:	4886      	ldr	r0, [pc, #536]	@ (8008d8c <plotter_begin+0x35c>)
 8008b72:	f000 fc5c 	bl	800942e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008b76:	2100      	movs	r1, #0
 8008b78:	4885      	ldr	r0, [pc, #532]	@ (8008d90 <plotter_begin+0x360>)
 8008b7a:	f000 fbcf 	bl	800931c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008b7e:	4b74      	ldr	r3, [pc, #464]	@ (8008d50 <plotter_begin+0x320>)
 8008b80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7f7 ffe4 	bl	8000b54 <__aeabi_d2f>
 8008b8c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008b8e:	4b70      	ldr	r3, [pc, #448]	@ (8008d50 <plotter_begin+0x320>)
 8008b90:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	f7f7 ffdc 	bl	8000b54 <__aeabi_d2f>
 8008b9c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8008d50 <plotter_begin+0x320>)
 8008ba8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008bac:	4610      	mov	r0, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f7f7 ffd0 	bl	8000b54 <__aeabi_d2f>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	ee02 3a90 	vmov	s5, r3
 8008bba:	eeb0 2a48 	vmov.f32	s4, s16
 8008bbe:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008dac <plotter_begin+0x37c>
 8008bc2:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008dac <plotter_begin+0x37c>
 8008bc6:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008d78 <plotter_begin+0x348>
 8008bca:	ee00 4a10 	vmov	s0, r4
 8008bce:	4870      	ldr	r0, [pc, #448]	@ (8008d90 <plotter_begin+0x360>)
 8008bd0:	f000 fc02 	bl	80093d8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	486f      	ldr	r0, [pc, #444]	@ (8008d94 <plotter_begin+0x364>)
 8008bd8:	f000 fba0 	bl	800931c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d50 <plotter_begin+0x320>)
 8008bde:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008be2:	4610      	mov	r0, r2
 8008be4:	4619      	mov	r1, r3
 8008be6:	f7f7 ffb5 	bl	8000b54 <__aeabi_d2f>
 8008bea:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008bec:	4b58      	ldr	r3, [pc, #352]	@ (8008d50 <plotter_begin+0x320>)
 8008bee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f7f7 ffad 	bl	8000b54 <__aeabi_d2f>
 8008bfa:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008c04:	4b52      	ldr	r3, [pc, #328]	@ (8008d50 <plotter_begin+0x320>)
 8008c06:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f7f7 ffa1 	bl	8000b54 <__aeabi_d2f>
 8008c12:	4603      	mov	r3, r0
 8008c14:	ee03 3a10 	vmov	s6, r3
 8008c18:	eef0 2a48 	vmov.f32	s5, s16
 8008c1c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8008dac <plotter_begin+0x37c>
 8008c20:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8008dac <plotter_begin+0x37c>
 8008c24:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008c28:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8008d78 <plotter_begin+0x348>
 8008c2c:	ee00 4a10 	vmov	s0, r4
 8008c30:	4858      	ldr	r0, [pc, #352]	@ (8008d94 <plotter_begin+0x364>)
 8008c32:	f000 fbfc 	bl	800942e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008c36:	2100      	movs	r1, #0
 8008c38:	4857      	ldr	r0, [pc, #348]	@ (8008d98 <plotter_begin+0x368>)
 8008c3a:	f000 fb6f 	bl	800931c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c3e:	4b48      	ldr	r3, [pc, #288]	@ (8008d60 <plotter_begin+0x330>)
 8008c40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	f7f7 ff84 	bl	8000b54 <__aeabi_d2f>
 8008c4c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008c4e:	4b44      	ldr	r3, [pc, #272]	@ (8008d60 <plotter_begin+0x330>)
 8008c50:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c54:	4610      	mov	r0, r2
 8008c56:	4619      	mov	r1, r3
 8008c58:	f7f7 ff7c 	bl	8000b54 <__aeabi_d2f>
 8008c5c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008c66:	4b3e      	ldr	r3, [pc, #248]	@ (8008d60 <plotter_begin+0x330>)
 8008c68:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	f7f7 ff70 	bl	8000b54 <__aeabi_d2f>
 8008c74:	4603      	mov	r3, r0
 8008c76:	ee02 3a90 	vmov	s5, r3
 8008c7a:	eeb0 2a48 	vmov.f32	s4, s16
 8008c7e:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008dac <plotter_begin+0x37c>
 8008c82:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008dac <plotter_begin+0x37c>
 8008c86:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008d78 <plotter_begin+0x348>
 8008c8a:	ee00 4a10 	vmov	s0, r4
 8008c8e:	4842      	ldr	r0, [pc, #264]	@ (8008d98 <plotter_begin+0x368>)
 8008c90:	f000 fba2 	bl	80093d8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8008c94:	2102      	movs	r1, #2
 8008c96:	4841      	ldr	r0, [pc, #260]	@ (8008d9c <plotter_begin+0x36c>)
 8008c98:	f000 fb40 	bl	800931c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c9c:	4b30      	ldr	r3, [pc, #192]	@ (8008d60 <plotter_begin+0x330>)
 8008c9e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f7f7 ff55 	bl	8000b54 <__aeabi_d2f>
 8008caa:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008cac:	4b2c      	ldr	r3, [pc, #176]	@ (8008d60 <plotter_begin+0x330>)
 8008cae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7f7 ff4d 	bl	8000b54 <__aeabi_d2f>
 8008cba:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008cc4:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <plotter_begin+0x330>)
 8008cc6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7f7 ff41 	bl	8000b54 <__aeabi_d2f>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	ee03 3a10 	vmov	s6, r3
 8008cd8:	eef0 2a48 	vmov.f32	s5, s16
 8008cdc:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8008dac <plotter_begin+0x37c>
 8008ce0:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8008dac <plotter_begin+0x37c>
 8008ce4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008ce8:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8008d78 <plotter_begin+0x348>
 8008cec:	ee00 4a10 	vmov	s0, r4
 8008cf0:	482a      	ldr	r0, [pc, #168]	@ (8008d9c <plotter_begin+0x36c>)
 8008cf2:	f000 fb9c 	bl	800942e <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008cf6:	482a      	ldr	r0, [pc, #168]	@ (8008da0 <plotter_begin+0x370>)
 8008cf8:	f7fb fe70 	bl	80049dc <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8008cfc:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <plotter_begin+0x324>)
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fbed 	bl	80004e0 <__aeabi_f2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	f7f7 fa8b 	bl	8000224 <__adddf3>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4610      	mov	r0, r2
 8008d14:	4619      	mov	r1, r3
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d58 <plotter_begin+0x328>)
 8008d1c:	f7f7 fc38 	bl	8000590 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	f7f7 ff14 	bl	8000b54 <__aeabi_d2f>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	ee00 3a90 	vmov	s1, r3
 8008d32:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008d3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d3e:	4919      	ldr	r1, [pc, #100]	@ (8008da4 <plotter_begin+0x374>)
 8008d40:	4819      	ldr	r0, [pc, #100]	@ (8008da8 <plotter_begin+0x378>)
 8008d42:	f7fa ffcf 	bl	8003ce4 <QEI_init>
 8008d46:	e033      	b.n	8008db0 <plotter_begin+0x380>
 8008d48:	55555555 	.word	0x55555555
 8008d4c:	3fe55555 	.word	0x3fe55555
 8008d50:	20000080 	.word	0x20000080
 8008d54:	20000100 	.word	0x20000100
 8008d58:	408f4000 	.word	0x408f4000
 8008d5c:	407f4000 	.word	0x407f4000
 8008d60:	20000000 	.word	0x20000000
 8008d64:	40140000 	.word	0x40140000
 8008d68:	40240000 	.word	0x40240000
 8008d6c:	20000858 	.word	0x20000858
 8008d70:	477fff00 	.word	0x477fff00
 8008d74:	c77fff00 	.word	0xc77fff00
 8008d78:	3dcccccd 	.word	0x3dcccccd
 8008d7c:	2000089c 	.word	0x2000089c
 8008d80:	200008e0 	.word	0x200008e0
 8008d84:	43480000 	.word	0x43480000
 8008d88:	c3480000 	.word	0xc3480000
 8008d8c:	20000924 	.word	0x20000924
 8008d90:	20000968 	.word	0x20000968
 8008d94:	200009ac 	.word	0x200009ac
 8008d98:	200009f0 	.word	0x200009f0
 8008d9c:	20000a34 	.word	0x20000a34
 8008da0:	20000a78 	.word	0x20000a78
 8008da4:	20001ea8 	.word	0x20001ea8
 8008da8:	200006ac 	.word	0x200006ac
 8008dac:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8008db0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008dac <plotter_begin+0x37c>
 8008db4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008db8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008dc0:	49af      	ldr	r1, [pc, #700]	@ (8009080 <plotter_begin+0x650>)
 8008dc2:	48b0      	ldr	r0, [pc, #704]	@ (8009084 <plotter_begin+0x654>)
 8008dc4:	f7fa ff8e 	bl	8003ce4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8008dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	49ac      	ldr	r1, [pc, #688]	@ (8009088 <plotter_begin+0x658>)
 8008dd6:	48ad      	ldr	r0, [pc, #692]	@ (800908c <plotter_begin+0x65c>)
 8008dd8:	f7f8 fad2 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8008ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	4bab      	ldr	r3, [pc, #684]	@ (8009090 <plotter_begin+0x660>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	49a8      	ldr	r1, [pc, #672]	@ (8009088 <plotter_begin+0x658>)
 8008de8:	48aa      	ldr	r0, [pc, #680]	@ (8009094 <plotter_begin+0x664>)
 8008dea:	f7f8 fac9 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8008dee:	220c      	movs	r2, #12
 8008df0:	49a9      	ldr	r1, [pc, #676]	@ (8009098 <plotter_begin+0x668>)
 8008df2:	48aa      	ldr	r0, [pc, #680]	@ (800909c <plotter_begin+0x66c>)
 8008df4:	f7fa fd4a 	bl	800388c <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8008df8:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80090a0 <plotter_begin+0x670>
 8008dfc:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80090a4 <plotter_begin+0x674>
 8008e00:	48a2      	ldr	r0, [pc, #648]	@ (800908c <plotter_begin+0x65c>)
 8008e02:	f7f8 fae1 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8008e06:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 80090a0 <plotter_begin+0x670>
 8008e0a:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80090a4 <plotter_begin+0x674>
 8008e0e:	48a1      	ldr	r0, [pc, #644]	@ (8009094 <plotter_begin+0x664>)
 8008e10:	f7f8 fada 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8008e14:	4ba4      	ldr	r3, [pc, #656]	@ (80090a8 <plotter_begin+0x678>)
 8008e16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f7f7 fe99 	bl	8000b54 <__aeabi_d2f>
 8008e22:	4603      	mov	r3, r0
 8008e24:	ee01 3a90 	vmov	s3, r3
 8008e28:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 80090ac <plotter_begin+0x67c>
 8008e2c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 80090b0 <plotter_begin+0x680>
 8008e30:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 80090b4 <plotter_begin+0x684>
 8008e34:	48a0      	ldr	r0, [pc, #640]	@ (80090b8 <plotter_begin+0x688>)
 8008e36:	f7f8 f9bc 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008e3a:	4b9b      	ldr	r3, [pc, #620]	@ (80090a8 <plotter_begin+0x678>)
 8008e3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8008e40:	4610      	mov	r0, r2
 8008e42:	4619      	mov	r1, r3
 8008e44:	f7f7 fe86 	bl	8000b54 <__aeabi_d2f>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	ee01 3a90 	vmov	s3, r3
 8008e4e:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 80090a0 <plotter_begin+0x670>
 8008e52:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 80090bc <plotter_begin+0x68c>
 8008e56:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80090c0 <plotter_begin+0x690>
 8008e5a:	489a      	ldr	r0, [pc, #616]	@ (80090c4 <plotter_begin+0x694>)
 8008e5c:	f7f8 f9a9 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 0, 72.5,
			ZGX45RGG_150RPM_Constant.qd_max);
 8008e60:	4b99      	ldr	r3, [pc, #612]	@ (80090c8 <plotter_begin+0x698>)
 8008e62:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 0, 72.5,
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7f7 fe73 	bl	8000b54 <__aeabi_d2f>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	ee01 3a90 	vmov	s3, r3
 8008e74:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80090cc <plotter_begin+0x69c>
 8008e78:	eddf 0a89 	vldr	s1, [pc, #548]	@ 80090a0 <plotter_begin+0x670>
 8008e7c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008e80:	4893      	ldr	r0, [pc, #588]	@ (80090d0 <plotter_begin+0x6a0>)
 8008e82:	f7f8 f996 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008e86:	4b90      	ldr	r3, [pc, #576]	@ (80090c8 <plotter_begin+0x698>)
 8008e88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 100, 2000,
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f7f7 fe60 	bl	8000b54 <__aeabi_d2f>
 8008e94:	4603      	mov	r3, r0
 8008e96:	ee01 3a90 	vmov	s3, r3
 8008e9a:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 80090a4 <plotter_begin+0x674>
 8008e9e:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 80090d4 <plotter_begin+0x6a4>
 8008ea2:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 80090d8 <plotter_begin+0x6a8>
 8008ea6:	488d      	ldr	r0, [pc, #564]	@ (80090dc <plotter_begin+0x6ac>)
 8008ea8:	f7f8 f983 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8008eac:	4986      	ldr	r1, [pc, #536]	@ (80090c8 <plotter_begin+0x698>)
 8008eae:	488c      	ldr	r0, [pc, #560]	@ (80090e0 <plotter_begin+0x6b0>)
 8008eb0:	f7f8 fb64 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8008eb4:	497c      	ldr	r1, [pc, #496]	@ (80090a8 <plotter_begin+0x678>)
 8008eb6:	488b      	ldr	r0, [pc, #556]	@ (80090e4 <plotter_begin+0x6b4>)
 8008eb8:	f7f8 fcde 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8008ebc:	4a8a      	ldr	r2, [pc, #552]	@ (80090e8 <plotter_begin+0x6b8>)
 8008ebe:	4982      	ldr	r1, [pc, #520]	@ (80090c8 <plotter_begin+0x698>)
 8008ec0:	488a      	ldr	r0, [pc, #552]	@ (80090ec <plotter_begin+0x6bc>)
 8008ec2:	f7f8 fbea 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8008ec6:	4a88      	ldr	r2, [pc, #544]	@ (80090e8 <plotter_begin+0x6b8>)
 8008ec8:	4977      	ldr	r1, [pc, #476]	@ (80090a8 <plotter_begin+0x678>)
 8008eca:	4889      	ldr	r0, [pc, #548]	@ (80090f0 <plotter_begin+0x6c0>)
 8008ecc:	f7f8 fd63 	bl	8001996 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80090f4 <plotter_begin+0x6c4>
 8008ed8:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 80090f8 <plotter_begin+0x6c8>
 8008edc:	2364      	movs	r3, #100	@ 0x64
 8008ede:	4a87      	ldr	r2, [pc, #540]	@ (80090fc <plotter_begin+0x6cc>)
 8008ee0:	4987      	ldr	r1, [pc, #540]	@ (8009100 <plotter_begin+0x6d0>)
 8008ee2:	4888      	ldr	r0, [pc, #544]	@ (8009104 <plotter_begin+0x6d4>)
 8008ee4:	f7f8 f81c 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8008ee8:	2105      	movs	r1, #5
 8008eea:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8009108 <plotter_begin+0x6d8>
 8008eee:	4885      	ldr	r0, [pc, #532]	@ (8009104 <plotter_begin+0x6d4>)
 8008ef0:	f7f8 f8c8 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8008ef4:	4883      	ldr	r0, [pc, #524]	@ (8009104 <plotter_begin+0x6d4>)
 8008ef6:	f7f8 f86b 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008efa:	eddf 0a84 	vldr	s1, [pc, #528]	@ 800910c <plotter_begin+0x6dc>
 8008efe:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008f02:	211f      	movs	r1, #31
 8008f04:	4882      	ldr	r0, [pc, #520]	@ (8009110 <plotter_begin+0x6e0>)
 8008f06:	f7f8 fe0d 	bl	8001b24 <FIR_init>
	FIR_init(&acceleration_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008f0a:	eddf 0a80 	vldr	s1, [pc, #512]	@ 800910c <plotter_begin+0x6dc>
 8008f0e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008f12:	211f      	movs	r1, #31
 8008f14:	487f      	ldr	r0, [pc, #508]	@ (8009114 <plotter_begin+0x6e4>)
 8008f16:	f7f8 fe05 	bl	8001b24 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f1a:	4b63      	ldr	r3, [pc, #396]	@ (80090a8 <plotter_begin+0x678>)
 8008f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f20:	4610      	mov	r0, r2
 8008f22:	4619      	mov	r1, r3
 8008f24:	f7f7 fe16 	bl	8000b54 <__aeabi_d2f>
 8008f28:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80090a8 <plotter_begin+0x678>)
 8008f2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	f7f7 fe0e 	bl	8000b54 <__aeabi_d2f>
 8008f38:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80090a8 <plotter_begin+0x678>)
 8008f3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f40:	4610      	mov	r0, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	f7f7 fe06 	bl	8000b54 <__aeabi_d2f>
 8008f48:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008f4a:	4b57      	ldr	r3, [pc, #348]	@ (80090a8 <plotter_begin+0x678>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f50:	4610      	mov	r0, r2
 8008f52:	4619      	mov	r1, r3
 8008f54:	f7f7 fdfe 	bl	8000b54 <__aeabi_d2f>
 8008f58:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008f5a:	4b53      	ldr	r3, [pc, #332]	@ (80090a8 <plotter_begin+0x678>)
 8008f5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f7f7 fdf6 	bl	8000b54 <__aeabi_d2f>
 8008f68:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80090a8 <plotter_begin+0x678>)
 8008f6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f70:	4610      	mov	r0, r2
 8008f72:	4619      	mov	r1, r3
 8008f74:	f7f7 fdee 	bl	8000b54 <__aeabi_d2f>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008f7e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008f82:	ee03 3a10 	vmov	s6, r3
 8008f86:	ee02 9a90 	vmov	s5, r9
 8008f8a:	ee02 8a10 	vmov	s4, r8
 8008f8e:	ee01 6a90 	vmov	s3, r6
 8008f92:	ee01 5a10 	vmov	s2, r5
 8008f96:	ee00 4a90 	vmov	s1, r4
 8008f9a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8009118 <plotter_begin+0x6e8>
 8008f9e:	485f      	ldr	r0, [pc, #380]	@ (800911c <plotter_begin+0x6ec>)
 8008fa0:	f7f9 fa60 	bl	8002464 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008fa4:	4b48      	ldr	r3, [pc, #288]	@ (80090c8 <plotter_begin+0x698>)
 8008fa6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008faa:	4610      	mov	r0, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	f7f7 fdd1 	bl	8000b54 <__aeabi_d2f>
 8008fb2:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008fb4:	4b44      	ldr	r3, [pc, #272]	@ (80090c8 <plotter_begin+0x698>)
 8008fb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f7f7 fdc9 	bl	8000b54 <__aeabi_d2f>
 8008fc2:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008fc4:	4b40      	ldr	r3, [pc, #256]	@ (80090c8 <plotter_begin+0x698>)
 8008fc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7f7 fdc1 	bl	8000b54 <__aeabi_d2f>
 8008fd2:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80090c8 <plotter_begin+0x698>)
 8008fd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008fda:	a327      	add	r3, pc, #156	@ (adr r3, 8009078 <plotter_begin+0x648>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 fad6 	bl	8000590 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4619      	mov	r1, r3
 8008fec:	f7f7 fdb2 	bl	8000b54 <__aeabi_d2f>
 8008ff0:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008ff2:	4b35      	ldr	r3, [pc, #212]	@ (80090c8 <plotter_begin+0x698>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f7f7 fdaa 	bl	8000b54 <__aeabi_d2f>
 8009000:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009002:	4b31      	ldr	r3, [pc, #196]	@ (80090c8 <plotter_begin+0x698>)
 8009004:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009008:	4610      	mov	r0, r2
 800900a:	4619      	mov	r1, r3
 800900c:	f7f7 fda2 	bl	8000b54 <__aeabi_d2f>
 8009010:	4603      	mov	r3, r0
 8009012:	4943      	ldr	r1, [pc, #268]	@ (8009120 <plotter_begin+0x6f0>)
 8009014:	4843      	ldr	r0, [pc, #268]	@ (8009124 <plotter_begin+0x6f4>)
 8009016:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 8009118 <plotter_begin+0x6e8>
 800901a:	ee02 3a90 	vmov	s5, r3
 800901e:	ee02 9a10 	vmov	s4, r9
 8009022:	ee01 8a90 	vmov	s3, r8
 8009026:	ee01 6a10 	vmov	s2, r6
 800902a:	ee00 5a90 	vmov	s1, r5
 800902e:	ee00 4a10 	vmov	s0, r4
 8009032:	f7fa fbc3 	bl	80037bc <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009036:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009128 <plotter_begin+0x6f8>
 800903a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800903e:	4a38      	ldr	r2, [pc, #224]	@ (8009120 <plotter_begin+0x6f0>)
 8009040:	4938      	ldr	r1, [pc, #224]	@ (8009124 <plotter_begin+0x6f4>)
 8009042:	483a      	ldr	r0, [pc, #232]	@ (800912c <plotter_begin+0x6fc>)
 8009044:	f7fc f926 	bl	8005294 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8009048:	23c8      	movs	r3, #200	@ 0xc8
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	2315      	movs	r3, #21
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	4b37      	ldr	r3, [pc, #220]	@ (8009130 <plotter_begin+0x700>)
 8009052:	4a38      	ldr	r2, [pc, #224]	@ (8009134 <plotter_begin+0x704>)
 8009054:	4938      	ldr	r1, [pc, #224]	@ (8009138 <plotter_begin+0x708>)
 8009056:	4839      	ldr	r0, [pc, #228]	@ (800913c <plotter_begin+0x70c>)
 8009058:	f7f8 fefc 	bl	8001e54 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800905c:	4838      	ldr	r0, [pc, #224]	@ (8009140 <plotter_begin+0x710>)
 800905e:	f004 fde3 	bl	800dc28 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8009062:	f000 f86f 	bl	8009144 <plotter_reset>
}
 8009066:	bf00      	nop
 8009068:	3704      	adds	r7, #4
 800906a:	46bd      	mov	sp, r7
 800906c:	ecbd 8b02 	vpop	{d8}
 8009070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009074:	f3af 8000 	nop.w
 8009078:	9999999a 	.word	0x9999999a
 800907c:	40019999 	.word	0x40019999
 8009080:	20001ddc 	.word	0x20001ddc
 8009084:	20000708 	.word	0x20000708
 8009088:	20001f74 	.word	0x20001f74
 800908c:	20000614 	.word	0x20000614
 8009090:	48000800 	.word	0x48000800
 8009094:	20000660 	.word	0x20000660
 8009098:	20001b78 	.word	0x20001b78
 800909c:	2000081c 	.word	0x2000081c
 80090a0:	00000000 	.word	0x00000000
 80090a4:	44fa0000 	.word	0x44fa0000
 80090a8:	20000080 	.word	0x20000080
 80090ac:	42f00000 	.word	0x42f00000
 80090b0:	2edbe6ff 	.word	0x2edbe6ff
 80090b4:	42960000 	.word	0x42960000
 80090b8:	20000764 	.word	0x20000764
 80090bc:	3727c5ac 	.word	0x3727c5ac
 80090c0:	43160000 	.word	0x43160000
 80090c4:	2000078c 	.word	0x2000078c
 80090c8:	20000000 	.word	0x20000000
 80090cc:	42910000 	.word	0x42910000
 80090d0:	200007b4 	.word	0x200007b4
 80090d4:	42c80000 	.word	0x42c80000
 80090d8:	45ea6000 	.word	0x45ea6000
 80090dc:	200007dc 	.word	0x200007dc
 80090e0:	20000810 	.word	0x20000810
 80090e4:	20000804 	.word	0x20000804
 80090e8:	20000100 	.word	0x20000100
 80090ec:	20000814 	.word	0x20000814
 80090f0:	20000808 	.word	0x20000808
 80090f4:	457ff000 	.word	0x457ff000
 80090f8:	40533333 	.word	0x40533333
 80090fc:	20000ce8 	.word	0x20000ce8
 8009100:	200003b4 	.word	0x200003b4
 8009104:	20000834 	.word	0x20000834
 8009108:	45000000 	.word	0x45000000
 800910c:	447a0000 	.word	0x447a0000
 8009110:	20000cd0 	.word	0x20000cd0
 8009114:	20000cdc 	.word	0x20000cdc
 8009118:	3a83126f 	.word	0x3a83126f
 800911c:	20001418 	.word	0x20001418
 8009120:	20001b44 	.word	0x20001b44
 8009124:	20001b04 	.word	0x20001b04
 8009128:	3d4ccccd 	.word	0x3d4ccccd
 800912c:	20001784 	.word	0x20001784
 8009130:	20001288 	.word	0x20001288
 8009134:	20002040 	.word	0x20002040
 8009138:	200021d8 	.word	0x200021d8
 800913c:	20000db0 	.word	0x20000db0
 8009140:	20001c44 	.word	0x20001c44

08009144 <plotter_reset>:

void plotter_reset() {
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009148:	4819      	ldr	r0, [pc, #100]	@ (80091b0 <plotter_reset+0x6c>)
 800914a:	f7fb f84d 	bl	80041e8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 800914e:	4818      	ldr	r0, [pc, #96]	@ (80091b0 <plotter_reset+0x6c>)
 8009150:	f7fb f84a 	bl	80041e8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009154:	4b16      	ldr	r3, [pc, #88]	@ (80091b0 <plotter_reset+0x6c>)
 8009156:	2200      	movs	r2, #0
 8009158:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 800915a:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <plotter_reset+0x6c>)
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <plotter_reset+0x6c>)
 8009164:	2200      	movs	r2, #0
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8009168:	4b11      	ldr	r3, [pc, #68]	@ (80091b0 <plotter_reset+0x6c>)
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8009170:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <plotter_reset+0x6c>)
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8009178:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <plotter_reset+0x6c>)
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8009180:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <plotter_reset+0x70>)
 8009182:	2200      	movs	r2, #0
 8009184:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009186:	4b0b      	ldr	r3, [pc, #44]	@ (80091b4 <plotter_reset+0x70>)
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <plotter_reset+0x70>)
 8009190:	2200      	movs	r2, #0
 8009192:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009194:	4b07      	ldr	r3, [pc, #28]	@ (80091b4 <plotter_reset+0x70>)
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 800919c:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <plotter_reset+0x70>)
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80091a4:	4b03      	ldr	r3, [pc, #12]	@ (80091b4 <plotter_reset+0x70>)
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80091ac:	bf00      	nop
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200006ac 	.word	0x200006ac
 80091b4:	20000708 	.word	0x20000708

080091b8 <plotter_update_sensors>:

void plotter_update_sensors() {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80091bc:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80092a4 <plotter_update_sensors+0xec>
 80091c0:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 80092a8 <plotter_update_sensors+0xf0>
 80091c4:	2106      	movs	r1, #6
 80091c6:	4839      	ldr	r0, [pc, #228]	@ (80092ac <plotter_update_sensors+0xf4>)
 80091c8:	f7f7 ff86 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80091cc:	eef0 7a40 	vmov.f32	s15, s0
 80091d0:	4b37      	ldr	r3, [pc, #220]	@ (80092b0 <plotter_update_sensors+0xf8>)
 80091d2:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 80091d6:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80092a4 <plotter_update_sensors+0xec>
 80091da:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80092a8 <plotter_update_sensors+0xf0>
 80091de:	2107      	movs	r1, #7
 80091e0:	4832      	ldr	r0, [pc, #200]	@ (80092ac <plotter_update_sensors+0xf4>)
 80091e2:	f7f7 ff79 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80091e6:	eef0 7a40 	vmov.f32	s15, s0
 80091ea:	4b32      	ldr	r3, [pc, #200]	@ (80092b4 <plotter_update_sensors+0xfc>)
 80091ec:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 80091f0:	2180      	movs	r1, #128	@ 0x80
 80091f2:	4831      	ldr	r0, [pc, #196]	@ (80092b8 <plotter_update_sensors+0x100>)
 80091f4:	f003 fbb2 	bl	800c95c <HAL_GPIO_ReadPin>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bf0c      	ite	eq
 80091fe:	2301      	moveq	r3, #1
 8009200:	2300      	movne	r3, #0
 8009202:	b2db      	uxtb	r3, r3
 8009204:	461a      	mov	r2, r3
 8009206:	4b2d      	ldr	r3, [pc, #180]	@ (80092bc <plotter_update_sensors+0x104>)
 8009208:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800920a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800920e:	482c      	ldr	r0, [pc, #176]	@ (80092c0 <plotter_update_sensors+0x108>)
 8009210:	f003 fba4 	bl	800c95c <HAL_GPIO_ReadPin>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	bf0c      	ite	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	2300      	movne	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	4b28      	ldr	r3, [pc, #160]	@ (80092c4 <plotter_update_sensors+0x10c>)
 8009224:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800922a:	4825      	ldr	r0, [pc, #148]	@ (80092c0 <plotter_update_sensors+0x108>)
 800922c:	f003 fb96 	bl	800c95c <HAL_GPIO_ReadPin>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	4b22      	ldr	r3, [pc, #136]	@ (80092c8 <plotter_update_sensors+0x110>)
 8009240:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8009242:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009246:	481e      	ldr	r0, [pc, #120]	@ (80092c0 <plotter_update_sensors+0x108>)
 8009248:	f003 fb88 	bl	800c95c <HAL_GPIO_ReadPin>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	bf0c      	ite	eq
 8009252:	2301      	moveq	r3, #1
 8009254:	2300      	movne	r3, #0
 8009256:	b2db      	uxtb	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	4b1c      	ldr	r3, [pc, #112]	@ (80092cc <plotter_update_sensors+0x114>)
 800925c:	601a      	str	r2, [r3, #0]
//	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
//	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);


	extern bool homing_active;
	if (!homing_active) {
 800925e:	4b1c      	ldr	r3, [pc, #112]	@ (80092d0 <plotter_update_sensors+0x118>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f083 0301 	eor.w	r3, r3, #1
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d018      	beq.n	800929e <plotter_update_sensors+0xe6>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800926c:	2101      	movs	r1, #1
 800926e:	4812      	ldr	r0, [pc, #72]	@ (80092b8 <plotter_update_sensors+0x100>)
 8009270:	f003 fb74 	bl	800c95c <HAL_GPIO_ReadPin>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf14      	ite	ne
 800927a:	2301      	movne	r3, #1
 800927c:	2300      	moveq	r3, #0
 800927e:	b2da      	uxtb	r2, r3
 8009280:	4b14      	ldr	r3, [pc, #80]	@ (80092d4 <plotter_update_sensors+0x11c>)
 8009282:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009288:	480b      	ldr	r0, [pc, #44]	@ (80092b8 <plotter_update_sensors+0x100>)
 800928a:	f003 fb67 	bl	800c95c <HAL_GPIO_ReadPin>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	bf14      	ite	ne
 8009294:	2301      	movne	r3, #1
 8009296:	2300      	moveq	r3, #0
 8009298:	b2da      	uxtb	r2, r3
 800929a:	4b0f      	ldr	r3, [pc, #60]	@ (80092d8 <plotter_update_sensors+0x120>)
 800929c:	701a      	strb	r2, [r3, #0]
	}
}
 800929e:	bf00      	nop
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	42480000 	.word	0x42480000
 80092a8:	c2480000 	.word	0xc2480000
 80092ac:	20000834 	.word	0x20000834
 80092b0:	20001b54 	.word	0x20001b54
 80092b4:	20001b58 	.word	0x20001b58
 80092b8:	48000400 	.word	0x48000400
 80092bc:	20001b64 	.word	0x20001b64
 80092c0:	48000800 	.word	0x48000800
 80092c4:	20001b68 	.word	0x20001b68
 80092c8:	20001b6c 	.word	0x20001b6c
 80092cc:	20001b70 	.word	0x20001b70
 80092d0:	20000563 	.word	0x20000563
 80092d4:	20000560 	.word	0x20000560
 80092d8:	20000561 	.word	0x20000561

080092dc <plotter_pen_up>:

void plotter_pen_up() {
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80092e0:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80092e4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80092f4 <plotter_pen_up+0x18>
 80092e8:	4803      	ldr	r0, [pc, #12]	@ (80092f8 <plotter_pen_up+0x1c>)
 80092ea:	f7fa faf1 	bl	80038d0 <PWM_write_duty>

}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	42480000 	.word	0x42480000
 80092f8:	2000081c 	.word	0x2000081c

080092fc <plotter_pen_down>:

void plotter_pen_down() {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8009300:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8009304:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009314 <plotter_pen_down+0x18>
 8009308:	4803      	ldr	r0, [pc, #12]	@ (8009318 <plotter_pen_down+0x1c>)
 800930a:	f7fa fae1 	bl	80038d0 <PWM_write_duty>
}
 800930e:	bf00      	nop
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	42480000 	.word	0x42480000
 8009318:	2000081c 	.word	0x2000081c

0800931c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009334:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800933c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a1b      	ldr	r2, [pc, #108]	@ (80093d0 <SIGNAL_init+0xb4>)
 8009362:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800936a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	2b03      	cmp	r3, #3
 8009370:	d828      	bhi.n	80093c4 <SIGNAL_init+0xa8>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <SIGNAL_init+0x5c>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093c3 	.word	0x080093c3
 800937c:	08009389 	.word	0x08009389
 8009380:	080093a7 	.word	0x080093a7
 8009384:	080093b1 	.word	0x080093b1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009394:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a0e      	ldr	r2, [pc, #56]	@ (80093d4 <SIGNAL_init+0xb8>)
 800939a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80093a2:	621a      	str	r2, [r3, #32]
            break;
 80093a4:	e00e      	b.n	80093c4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80093ac:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80093ae:	e009      	b.n	80093c4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80093be:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80093c0:	e000      	b.n	80093c4 <SIGNAL_init+0xa8>
            break;
 80093c2:	bf00      	nop
    }
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	bf800000 	.word	0xbf800000
 80093d4:	41200000 	.word	0x41200000

080093d8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80093d8:	b480      	push	{r7}
 80093da:	b089      	sub	sp, #36	@ 0x24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	61f8      	str	r0, [r7, #28]
 80093e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80093e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80093e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80093ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80093f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80093f4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009422:	bf00      	nop
 8009424:	3724      	adds	r7, #36	@ 0x24
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800942e:	b480      	push	{r7}
 8009430:	b089      	sub	sp, #36	@ 0x24
 8009432:	af00      	add	r7, sp, #0
 8009434:	61f8      	str	r0, [r7, #28]
 8009436:	ed87 0a06 	vstr	s0, [r7, #24]
 800943a:	edc7 0a05 	vstr	s1, [r7, #20]
 800943e:	ed87 1a04 	vstr	s2, [r7, #16]
 8009442:	edc7 1a03 	vstr	s3, [r7, #12]
 8009446:	ed87 2a02 	vstr	s4, [r7, #8]
 800944a:	edc7 2a01 	vstr	s5, [r7, #4]
 800944e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	2202      	movs	r2, #2
 8009456:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009482:	bf00      	nop
 8009484:	3724      	adds	r7, #36	@ 0x24
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009496:	4b0f      	ldr	r3, [pc, #60]	@ (80094d4 <HAL_MspInit+0x44>)
 8009498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949a:	4a0e      	ldr	r2, [pc, #56]	@ (80094d4 <HAL_MspInit+0x44>)
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80094a2:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <HAL_MspInit+0x44>)
 80094a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <HAL_MspInit+0x44>)
 80094b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b2:	4a08      	ldr	r2, [pc, #32]	@ (80094d4 <HAL_MspInit+0x44>)
 80094b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ba:	4b06      	ldr	r3, [pc, #24]	@ (80094d4 <HAL_MspInit+0x44>)
 80094bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80094c6:	f003 fb4f 	bl	800cb68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40021000 	.word	0x40021000

080094d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094d8:	b480      	push	{r7}
 80094da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80094dc:	bf00      	nop
 80094de:	e7fd      	b.n	80094dc <NMI_Handler+0x4>

080094e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <HardFault_Handler+0x4>

080094e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80094ec:	bf00      	nop
 80094ee:	e7fd      	b.n	80094ec <MemManage_Handler+0x4>

080094f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094f4:	bf00      	nop
 80094f6:	e7fd      	b.n	80094f4 <BusFault_Handler+0x4>

080094f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <UsageFault_Handler+0x4>

08009500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800950e:	b480      	push	{r7}
 8009510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009512:	bf00      	nop
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800952e:	f000 ffbb 	bl	800a4a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}

08009536 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800953a:	2001      	movs	r0, #1
 800953c:	f003 fa58 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009540:	bf00      	nop
 8009542:	bd80      	pop	{r7, pc}

08009544 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8009548:	2010      	movs	r0, #16
 800954a:	f003 fa51 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800954e:	bf00      	nop
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009558:	4802      	ldr	r0, [pc, #8]	@ (8009564 <DMA1_Channel1_IRQHandler+0x10>)
 800955a:	f002 ff2e 	bl	800c3ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800955e:	bf00      	nop
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000420 	.word	0x20000420

08009568 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800956c:	4802      	ldr	r0, [pc, #8]	@ (8009578 <DMA1_Channel2_IRQHandler+0x10>)
 800956e:	f002 ff24 	bl	800c3ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009572:	bf00      	nop
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20002364 	.word	0x20002364

0800957c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009580:	4802      	ldr	r0, [pc, #8]	@ (800958c <DMA1_Channel3_IRQHandler+0x10>)
 8009582:	f002 ff1a 	bl	800c3ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009586:	bf00      	nop
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	200023c4 	.word	0x200023c4

08009590 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8009594:	4802      	ldr	r0, [pc, #8]	@ (80095a0 <DMA1_Channel4_IRQHandler+0x10>)
 8009596:	f002 ff10 	bl	800c3ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800959a:	bf00      	nop
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200022a4 	.word	0x200022a4

080095a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80095a8:	4802      	ldr	r0, [pc, #8]	@ (80095b4 <DMA1_Channel5_IRQHandler+0x10>)
 80095aa:	f002 ff06 	bl	800c3ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80095ae:	bf00      	nop
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20002304 	.word	0x20002304

080095b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 80095bc:	2040      	movs	r0, #64	@ 0x40
 80095be:	f003 fa17 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 80095c2:	2080      	movs	r0, #128	@ 0x80
 80095c4:	f003 fa14 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80095c8:	bf00      	nop
 80095ca:	bd80      	pop	{r7, pc}

080095cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095d0:	4803      	ldr	r0, [pc, #12]	@ (80095e0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80095d2:	f004 ff4f 	bl	800e474 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80095d6:	4803      	ldr	r0, [pc, #12]	@ (80095e4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80095d8:	f004 ff4c 	bl	800e474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20001b78 	.word	0x20001b78
 80095e4:	20002040 	.word	0x20002040

080095e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80095ec:	4802      	ldr	r0, [pc, #8]	@ (80095f8 <TIM2_IRQHandler+0x10>)
 80095ee:	f004 ff41 	bl	800e474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20001c44 	.word	0x20001c44

080095fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009600:	4802      	ldr	r0, [pc, #8]	@ (800960c <TIM3_IRQHandler+0x10>)
 8009602:	f004 ff37 	bl	800e474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009606:	bf00      	nop
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20001d10 	.word	0x20001d10

08009610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009614:	4802      	ldr	r0, [pc, #8]	@ (8009620 <TIM4_IRQHandler+0x10>)
 8009616:	f004 ff2d 	bl	800e474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20001ddc 	.word	0x20001ddc

08009624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009628:	4802      	ldr	r0, [pc, #8]	@ (8009634 <USART2_IRQHandler+0x10>)
 800962a:	f006 fcf7 	bl	801001c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200021d8 	.word	0x200021d8

08009638 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 800963c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009640:	f003 f9d6 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8009644:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009648:	f003 f9d2 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800964c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009650:	f003 f9ce 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009654:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009658:	f003 f9ca 	bl	800c9f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800965c:	bf00      	nop
 800965e:	bd80      	pop	{r7, pc}

08009660 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009664:	4802      	ldr	r0, [pc, #8]	@ (8009670 <LPUART1_IRQHandler+0x10>)
 8009666:	f006 fcd9 	bl	801001c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800966a:	bf00      	nop
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2000210c 	.word	0x2000210c

08009674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800967c:	4a14      	ldr	r2, [pc, #80]	@ (80096d0 <_sbrk+0x5c>)
 800967e:	4b15      	ldr	r3, [pc, #84]	@ (80096d4 <_sbrk+0x60>)
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009688:	4b13      	ldr	r3, [pc, #76]	@ (80096d8 <_sbrk+0x64>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009690:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <_sbrk+0x64>)
 8009692:	4a12      	ldr	r2, [pc, #72]	@ (80096dc <_sbrk+0x68>)
 8009694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009696:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <_sbrk+0x64>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4413      	add	r3, r2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d207      	bcs.n	80096b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80096a4:	f008 ffa8 	bl	80125f8 <__errno>
 80096a8:	4603      	mov	r3, r0
 80096aa:	220c      	movs	r2, #12
 80096ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295
 80096b2:	e009      	b.n	80096c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80096b4:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <_sbrk+0x64>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80096ba:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <_sbrk+0x64>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4413      	add	r3, r2
 80096c2:	4a05      	ldr	r2, [pc, #20]	@ (80096d8 <_sbrk+0x64>)
 80096c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096c6:	68fb      	ldr	r3, [r7, #12]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20020000 	.word	0x20020000
 80096d4:	00000400 	.word	0x00000400
 80096d8:	20001b74 	.word	0x20001b74
 80096dc:	20002570 	.word	0x20002570

080096e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80096e4:	4b06      	ldr	r3, [pc, #24]	@ (8009700 <SystemInit+0x20>)
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ea:	4a05      	ldr	r2, [pc, #20]	@ (8009700 <SystemInit+0x20>)
 80096ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80096f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	e000ed00 	.word	0xe000ed00

08009704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b098      	sub	sp, #96	@ 0x60
 8009708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800970a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	605a      	str	r2, [r3, #4]
 8009714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	605a      	str	r2, [r3, #4]
 8009720:	609a      	str	r2, [r3, #8]
 8009722:	60da      	str	r2, [r3, #12]
 8009724:	611a      	str	r2, [r3, #16]
 8009726:	615a      	str	r2, [r3, #20]
 8009728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	2234      	movs	r2, #52	@ 0x34
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f008 ff49 	bl	80125c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009736:	4b3b      	ldr	r3, [pc, #236]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009738:	4a3b      	ldr	r2, [pc, #236]	@ (8009828 <MX_TIM1_Init+0x124>)
 800973a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800973c:	4b39      	ldr	r3, [pc, #228]	@ (8009824 <MX_TIM1_Init+0x120>)
 800973e:	2200      	movs	r2, #0
 8009740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009742:	4b38      	ldr	r3, [pc, #224]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009744:	2200      	movs	r2, #0
 8009746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009748:	4b36      	ldr	r3, [pc, #216]	@ (8009824 <MX_TIM1_Init+0x120>)
 800974a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800974e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009750:	4b34      	ldr	r3, [pc, #208]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009756:	4b33      	ldr	r3, [pc, #204]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009758:	2200      	movs	r2, #0
 800975a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800975c:	4b31      	ldr	r3, [pc, #196]	@ (8009824 <MX_TIM1_Init+0x120>)
 800975e:	2200      	movs	r2, #0
 8009760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009762:	4830      	ldr	r0, [pc, #192]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009764:	f004 fad8 	bl	800dd18 <HAL_TIM_PWM_Init>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800976e:	f7ff f959 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009772:	2300      	movs	r3, #0
 8009774:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009776:	2300      	movs	r3, #0
 8009778:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800977a:	2300      	movs	r3, #0
 800977c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800977e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009782:	4619      	mov	r1, r3
 8009784:	4827      	ldr	r0, [pc, #156]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009786:	f006 f8e9 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009790:	f7ff f948 	bl	8008a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009794:	2360      	movs	r3, #96	@ 0x60
 8009796:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800979c:	2300      	movs	r3, #0
 800979e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80097a0:	2300      	movs	r3, #0
 80097a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80097a8:	2300      	movs	r3, #0
 80097aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80097ac:	2300      	movs	r3, #0
 80097ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80097b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80097b4:	220c      	movs	r2, #12
 80097b6:	4619      	mov	r1, r3
 80097b8:	481a      	ldr	r0, [pc, #104]	@ (8009824 <MX_TIM1_Init+0x120>)
 80097ba:	f004 ffd5 	bl	800e768 <HAL_TIM_PWM_ConfigChannel>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80097c4:	f7ff f92e 	bl	8008a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80097dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80097e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80097e6:	2300      	movs	r3, #0
 80097e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80097ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80097f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80097f8:	2300      	movs	r3, #0
 80097fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009800:	1d3b      	adds	r3, r7, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4807      	ldr	r0, [pc, #28]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009806:	f006 f93f 	bl	800fa88 <HAL_TIMEx_ConfigBreakDeadTime>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009810:	f7ff f908 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009814:	4803      	ldr	r0, [pc, #12]	@ (8009824 <MX_TIM1_Init+0x120>)
 8009816:	f000 fb77 	bl	8009f08 <HAL_TIM_MspPostInit>

}
 800981a:	bf00      	nop
 800981c:	3760      	adds	r7, #96	@ 0x60
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20001b78 	.word	0x20001b78
 8009828:	40012c00 	.word	0x40012c00

0800982c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009832:	f107 0310 	add.w	r3, r7, #16
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	605a      	str	r2, [r3, #4]
 800983c:	609a      	str	r2, [r3, #8]
 800983e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	605a      	str	r2, [r3, #4]
 8009848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800984a:	4b1e      	ldr	r3, [pc, #120]	@ (80098c4 <MX_TIM2_Init+0x98>)
 800984c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8009852:	4b1c      	ldr	r3, [pc, #112]	@ (80098c4 <MX_TIM2_Init+0x98>)
 8009854:	22a9      	movs	r2, #169	@ 0xa9
 8009856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009858:	4b1a      	ldr	r3, [pc, #104]	@ (80098c4 <MX_TIM2_Init+0x98>)
 800985a:	2200      	movs	r2, #0
 800985c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800985e:	4b19      	ldr	r3, [pc, #100]	@ (80098c4 <MX_TIM2_Init+0x98>)
 8009860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009866:	4b17      	ldr	r3, [pc, #92]	@ (80098c4 <MX_TIM2_Init+0x98>)
 8009868:	2200      	movs	r2, #0
 800986a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800986c:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <MX_TIM2_Init+0x98>)
 800986e:	2200      	movs	r2, #0
 8009870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009872:	4814      	ldr	r0, [pc, #80]	@ (80098c4 <MX_TIM2_Init+0x98>)
 8009874:	f004 f904 	bl	800da80 <HAL_TIM_Base_Init>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800987e:	f7ff f8d1 	bl	8008a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009888:	f107 0310 	add.w	r3, r7, #16
 800988c:	4619      	mov	r1, r3
 800988e:	480d      	ldr	r0, [pc, #52]	@ (80098c4 <MX_TIM2_Init+0x98>)
 8009890:	f005 f87e 	bl	800e990 <HAL_TIM_ConfigClockSource>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800989a:	f7ff f8c3 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800989e:	2300      	movs	r3, #0
 80098a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80098a6:	1d3b      	adds	r3, r7, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4806      	ldr	r0, [pc, #24]	@ (80098c4 <MX_TIM2_Init+0x98>)
 80098ac:	f006 f856 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80098b6:	f7ff f8b5 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80098ba:	bf00      	nop
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20001c44 	.word	0x20001c44

080098c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08c      	sub	sp, #48	@ 0x30
 80098cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80098ce:	f107 030c 	add.w	r3, r7, #12
 80098d2:	2224      	movs	r2, #36	@ 0x24
 80098d4:	2100      	movs	r1, #0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f008 fe76 	bl	80125c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098dc:	463b      	mov	r3, r7
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	605a      	str	r2, [r3, #4]
 80098e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80098e6:	4b21      	ldr	r3, [pc, #132]	@ (800996c <MX_TIM3_Init+0xa4>)
 80098e8:	4a21      	ldr	r2, [pc, #132]	@ (8009970 <MX_TIM3_Init+0xa8>)
 80098ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80098ec:	4b1f      	ldr	r3, [pc, #124]	@ (800996c <MX_TIM3_Init+0xa4>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098f2:	4b1e      	ldr	r3, [pc, #120]	@ (800996c <MX_TIM3_Init+0xa4>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80098f8:	4b1c      	ldr	r3, [pc, #112]	@ (800996c <MX_TIM3_Init+0xa4>)
 80098fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009900:	4b1a      	ldr	r3, [pc, #104]	@ (800996c <MX_TIM3_Init+0xa4>)
 8009902:	2200      	movs	r2, #0
 8009904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009906:	4b19      	ldr	r3, [pc, #100]	@ (800996c <MX_TIM3_Init+0xa4>)
 8009908:	2200      	movs	r2, #0
 800990a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800990c:	2303      	movs	r3, #3
 800990e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009910:	2300      	movs	r3, #0
 8009912:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009918:	2300      	movs	r3, #0
 800991a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009920:	2300      	movs	r3, #0
 8009922:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009924:	2301      	movs	r3, #1
 8009926:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009928:	2300      	movs	r3, #0
 800992a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4619      	mov	r1, r3
 8009936:	480d      	ldr	r0, [pc, #52]	@ (800996c <MX_TIM3_Init+0xa4>)
 8009938:	f004 fc5a 	bl	800e1f0 <HAL_TIM_Encoder_Init>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009942:	f7ff f86f 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009946:	2300      	movs	r3, #0
 8009948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800994e:	463b      	mov	r3, r7
 8009950:	4619      	mov	r1, r3
 8009952:	4806      	ldr	r0, [pc, #24]	@ (800996c <MX_TIM3_Init+0xa4>)
 8009954:	f006 f802 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800995e:	f7ff f861 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009962:	bf00      	nop
 8009964:	3730      	adds	r7, #48	@ 0x30
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20001d10 	.word	0x20001d10
 8009970:	40000400 	.word	0x40000400

08009974 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	@ 0x30
 8009978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	2224      	movs	r2, #36	@ 0x24
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f008 fe20 	bl	80125c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009988:	463b      	mov	r3, r7
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	605a      	str	r2, [r3, #4]
 8009990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009992:	4b21      	ldr	r3, [pc, #132]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 8009994:	4a21      	ldr	r2, [pc, #132]	@ (8009a1c <MX_TIM4_Init+0xa8>)
 8009996:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009998:	4b1f      	ldr	r3, [pc, #124]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800999e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80099a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 80099a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099b2:	4b19      	ldr	r3, [pc, #100]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80099b8:	2303      	movs	r3, #3
 80099ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80099c0:	2301      	movs	r3, #1
 80099c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80099cc:	2300      	movs	r3, #0
 80099ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80099d0:	2301      	movs	r3, #1
 80099d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80099d4:	2300      	movs	r3, #0
 80099d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80099dc:	f107 030c 	add.w	r3, r7, #12
 80099e0:	4619      	mov	r1, r3
 80099e2:	480d      	ldr	r0, [pc, #52]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 80099e4:	f004 fc04 	bl	800e1f0 <HAL_TIM_Encoder_Init>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80099ee:	f7ff f819 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099f2:	2300      	movs	r3, #0
 80099f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80099fa:	463b      	mov	r3, r7
 80099fc:	4619      	mov	r1, r3
 80099fe:	4806      	ldr	r0, [pc, #24]	@ (8009a18 <MX_TIM4_Init+0xa4>)
 8009a00:	f005 ffac 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8009a0a:	f7ff f80b 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009a0e:	bf00      	nop
 8009a10:	3730      	adds	r7, #48	@ 0x30
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20001ddc 	.word	0x20001ddc
 8009a1c:	40000800 	.word	0x40000800

08009a20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08c      	sub	sp, #48	@ 0x30
 8009a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009a26:	f107 030c 	add.w	r3, r7, #12
 8009a2a:	2224      	movs	r2, #36	@ 0x24
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f008 fdca 	bl	80125c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a34:	463b      	mov	r3, r7
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	605a      	str	r2, [r3, #4]
 8009a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009a3e:	4b21      	ldr	r3, [pc, #132]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a40:	4a21      	ldr	r2, [pc, #132]	@ (8009ac8 <MX_TIM5_Init+0xa8>)
 8009a42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009a44:	4b1f      	ldr	r3, [pc, #124]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009a50:	4b1c      	ldr	r3, [pc, #112]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a58:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a5e:	4b19      	ldr	r3, [pc, #100]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009a64:	2303      	movs	r3, #3
 8009a66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009a80:	2300      	movs	r3, #0
 8009a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	480d      	ldr	r0, [pc, #52]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009a90:	f004 fbae 	bl	800e1f0 <HAL_TIM_Encoder_Init>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8009a9a:	f7fe ffc3 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4806      	ldr	r0, [pc, #24]	@ (8009ac4 <MX_TIM5_Init+0xa4>)
 8009aac:	f005 ff56 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8009ab6:	f7fe ffb5 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009aba:	bf00      	nop
 8009abc:	3730      	adds	r7, #48	@ 0x30
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001ea8 	.word	0x20001ea8
 8009ac8:	40000c00 	.word	0x40000c00

08009acc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b09c      	sub	sp, #112	@ 0x70
 8009ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ad2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	605a      	str	r2, [r3, #4]
 8009adc:	609a      	str	r2, [r3, #8]
 8009ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ae0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	605a      	str	r2, [r3, #4]
 8009aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	605a      	str	r2, [r3, #4]
 8009af6:	609a      	str	r2, [r3, #8]
 8009af8:	60da      	str	r2, [r3, #12]
 8009afa:	611a      	str	r2, [r3, #16]
 8009afc:	615a      	str	r2, [r3, #20]
 8009afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009b00:	1d3b      	adds	r3, r7, #4
 8009b02:	2234      	movs	r2, #52	@ 0x34
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f008 fd5e 	bl	80125c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8009c44 <MX_TIM8_Init+0x178>)
 8009b10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009b12:	4b4b      	ldr	r3, [pc, #300]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b18:	4b49      	ldr	r3, [pc, #292]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009b1e:	4b48      	ldr	r3, [pc, #288]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009b26:	4b46      	ldr	r3, [pc, #280]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009b2e:	4b44      	ldr	r3, [pc, #272]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b34:	4b42      	ldr	r3, [pc, #264]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009b3a:	4841      	ldr	r0, [pc, #260]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b3c:	f003 ffa0 	bl	800da80 <HAL_TIM_Base_Init>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009b46:	f7fe ff6d 	bl	8008a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009b50:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009b54:	4619      	mov	r1, r3
 8009b56:	483a      	ldr	r0, [pc, #232]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b58:	f004 ff1a 	bl	800e990 <HAL_TIM_ConfigClockSource>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009b62:	f7fe ff5f 	bl	8008a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009b66:	4836      	ldr	r0, [pc, #216]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b68:	f004 f8d6 	bl	800dd18 <HAL_TIM_PWM_Init>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009b72:	f7fe ff57 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b76:	2300      	movs	r3, #0
 8009b78:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009b82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009b86:	4619      	mov	r1, r3
 8009b88:	482d      	ldr	r0, [pc, #180]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009b8a:	f005 fee7 	bl	800f95c <HAL_TIMEx_MasterConfigSynchronization>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009b94:	f7fe ff46 	bl	8008a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b98:	2360      	movs	r3, #96	@ 0x60
 8009b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009bac:	2300      	movs	r3, #0
 8009bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009bb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4820      	ldr	r0, [pc, #128]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009bbe:	f004 fdd3 	bl	800e768 <HAL_TIM_PWM_ConfigChannel>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009bc8:	f7fe ff2c 	bl	8008a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009bcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	481a      	ldr	r0, [pc, #104]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009bd6:	f004 fdc7 	bl	800e768 <HAL_TIM_PWM_ConfigChannel>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009be0:	f7fe ff20 	bl	8008a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009be4:	2300      	movs	r3, #0
 8009be6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009bfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009c02:	2300      	movs	r3, #0
 8009c04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009c14:	2300      	movs	r3, #0
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009c1c:	1d3b      	adds	r3, r7, #4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4807      	ldr	r0, [pc, #28]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009c22:	f005 ff31 	bl	800fa88 <HAL_TIMEx_ConfigBreakDeadTime>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009c2c:	f7fe fefa 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009c30:	4803      	ldr	r0, [pc, #12]	@ (8009c40 <MX_TIM8_Init+0x174>)
 8009c32:	f000 f969 	bl	8009f08 <HAL_TIM_MspPostInit>

}
 8009c36:	bf00      	nop
 8009c38:	3770      	adds	r7, #112	@ 0x70
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20001f74 	.word	0x20001f74
 8009c44:	40013400 	.word	0x40013400

08009c48 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009c4c:	4b14      	ldr	r3, [pc, #80]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c4e:	4a15      	ldr	r2, [pc, #84]	@ (8009ca4 <MX_TIM16_Init+0x5c>)
 8009c50:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009c52:	4b13      	ldr	r3, [pc, #76]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c54:	22a9      	movs	r2, #169	@ 0xa9
 8009c56:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009c5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c60:	f240 4279 	movw	r2, #1145	@ 0x479
 8009c64:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c72:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009c78:	4809      	ldr	r0, [pc, #36]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c7a:	f003 ff01 	bl	800da80 <HAL_TIM_Base_Init>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009c84:	f7fe fece 	bl	8008a24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009c88:	2108      	movs	r1, #8
 8009c8a:	4805      	ldr	r0, [pc, #20]	@ (8009ca0 <MX_TIM16_Init+0x58>)
 8009c8c:	f004 f9ba 	bl	800e004 <HAL_TIM_OnePulse_Init>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009c96:	f7fe fec5 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009c9a:	bf00      	nop
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20002040 	.word	0x20002040
 8009ca4:	40014400 	.word	0x40014400

08009ca8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8009cec <HAL_TIM_PWM_MspInit+0x44>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d113      	bne.n	8009ce2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009cba:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8009cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8009cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8009cc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	2019      	movs	r0, #25
 8009cd8:	f002 f957 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009cdc:	2019      	movs	r0, #25
 8009cde:	f002 f96e 	bl	800bfbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	40012c00 	.word	0x40012c00
 8009cf0:	40021000 	.word	0x40021000

08009cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d04:	d114      	bne.n	8009d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009d06:	4b22      	ldr	r3, [pc, #136]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d0a:	4a21      	ldr	r2, [pc, #132]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d12:	4b1f      	ldr	r3, [pc, #124]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2100      	movs	r1, #0
 8009d22:	201c      	movs	r0, #28
 8009d24:	f002 f931 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009d28:	201c      	movs	r0, #28
 8009d2a:	f002 f948 	bl	800bfbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009d2e:	e02a      	b.n	8009d86 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a17      	ldr	r2, [pc, #92]	@ (8009d94 <HAL_TIM_Base_MspInit+0xa0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d10c      	bne.n	8009d54 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009d3a:	4b15      	ldr	r3, [pc, #84]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d3e:	4a14      	ldr	r2, [pc, #80]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8009d46:	4b12      	ldr	r3, [pc, #72]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	693b      	ldr	r3, [r7, #16]
}
 8009d52:	e018      	b.n	8009d86 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a0f      	ldr	r2, [pc, #60]	@ (8009d98 <HAL_TIM_Base_MspInit+0xa4>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d113      	bne.n	8009d86 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d62:	4a0b      	ldr	r2, [pc, #44]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8009d6a:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <HAL_TIM_Base_MspInit+0x9c>)
 8009d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009d76:	2200      	movs	r2, #0
 8009d78:	2100      	movs	r1, #0
 8009d7a:	2019      	movs	r0, #25
 8009d7c:	f002 f905 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009d80:	2019      	movs	r0, #25
 8009d82:	f002 f91c 	bl	800bfbe <HAL_NVIC_EnableIRQ>
}
 8009d86:	bf00      	nop
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40021000 	.word	0x40021000
 8009d94:	40013400 	.word	0x40013400
 8009d98:	40014400 	.word	0x40014400

08009d9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08e      	sub	sp, #56	@ 0x38
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	60da      	str	r2, [r3, #12]
 8009db2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a4f      	ldr	r2, [pc, #316]	@ (8009ef8 <HAL_TIM_Encoder_MspInit+0x15c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d131      	bne.n	8009e22 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dca:	4b4c      	ldr	r3, [pc, #304]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	623b      	str	r3, [r7, #32]
 8009dd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd6:	4b49      	ldr	r3, [pc, #292]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dda:	4a48      	ldr	r2, [pc, #288]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009de2:	4b46      	ldr	r3, [pc, #280]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009dee:	23c0      	movs	r3, #192	@ 0xc0
 8009df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df2:	2302      	movs	r3, #2
 8009df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e06:	4619      	mov	r1, r3
 8009e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e0c:	f002 fc24 	bl	800c658 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009e10:	2200      	movs	r2, #0
 8009e12:	2100      	movs	r1, #0
 8009e14:	201d      	movs	r0, #29
 8009e16:	f002 f8b8 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009e1a:	201d      	movs	r0, #29
 8009e1c:	f002 f8cf 	bl	800bfbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009e20:	e065      	b.n	8009eee <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a36      	ldr	r2, [pc, #216]	@ (8009f00 <HAL_TIM_Encoder_MspInit+0x164>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d132      	bne.n	8009e92 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009e2c:	4b33      	ldr	r3, [pc, #204]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e30:	4a32      	ldr	r2, [pc, #200]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e32:	f043 0304 	orr.w	r3, r3, #4
 8009e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e38:	4b30      	ldr	r3, [pc, #192]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e44:	4b2d      	ldr	r3, [pc, #180]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e48:	4a2c      	ldr	r2, [pc, #176]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e50:	4b2a      	ldr	r3, [pc, #168]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e62:	2302      	movs	r3, #2
 8009e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8009e6e:	230a      	movs	r3, #10
 8009e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e76:	4619      	mov	r1, r3
 8009e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e7c:	f002 fbec 	bl	800c658 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009e80:	2200      	movs	r2, #0
 8009e82:	2100      	movs	r1, #0
 8009e84:	201e      	movs	r0, #30
 8009e86:	f002 f880 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009e8a:	201e      	movs	r0, #30
 8009e8c:	f002 f897 	bl	800bfbe <HAL_NVIC_EnableIRQ>
}
 8009e90:	e02d      	b.n	8009eee <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1b      	ldr	r2, [pc, #108]	@ (8009f04 <HAL_TIM_Encoder_MspInit+0x168>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d128      	bne.n	8009eee <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009e9c:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ea0:	4a16      	ldr	r2, [pc, #88]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009ea2:	f043 0308 	orr.w	r3, r3, #8
 8009ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea8:	4b14      	ldr	r3, [pc, #80]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eb4:	4b11      	ldr	r3, [pc, #68]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eb8:	4a10      	ldr	r2, [pc, #64]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009eba:	f043 0301 	orr.w	r3, r3, #1
 8009ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8009efc <HAL_TIM_Encoder_MspInit+0x160>)
 8009ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009edc:	2302      	movs	r3, #2
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009eea:	f002 fbb5 	bl	800c658 <HAL_GPIO_Init>
}
 8009eee:	bf00      	nop
 8009ef0:	3738      	adds	r7, #56	@ 0x38
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40000400 	.word	0x40000400
 8009efc:	40021000 	.word	0x40021000
 8009f00:	40000800 	.word	0x40000800
 8009f04:	40000c00 	.word	0x40000c00

08009f08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	@ 0x28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	605a      	str	r2, [r3, #4]
 8009f1a:	609a      	str	r2, [r3, #8]
 8009f1c:	60da      	str	r2, [r3, #12]
 8009f1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a22      	ldr	r2, [pc, #136]	@ (8009fb0 <HAL_TIM_MspPostInit+0xa8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d11c      	bne.n	8009f64 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f2a:	4b22      	ldr	r3, [pc, #136]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f2e:	4a21      	ldr	r2, [pc, #132]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f30:	f043 0304 	orr.w	r3, r3, #4
 8009f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f36:	4b1f      	ldr	r3, [pc, #124]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	613b      	str	r3, [r7, #16]
 8009f40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009f42:	2308      	movs	r3, #8
 8009f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f46:	2302      	movs	r3, #2
 8009f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009f52:	2302      	movs	r3, #2
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f56:	f107 0314 	add.w	r3, r7, #20
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4816      	ldr	r0, [pc, #88]	@ (8009fb8 <HAL_TIM_MspPostInit+0xb0>)
 8009f5e:	f002 fb7b 	bl	800c658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009f62:	e020      	b.n	8009fa6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a14      	ldr	r2, [pc, #80]	@ (8009fbc <HAL_TIM_MspPostInit+0xb4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d11b      	bne.n	8009fa6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f6e:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f72:	4a10      	ldr	r2, [pc, #64]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f74:	f043 0304 	orr.w	r3, r3, #4
 8009f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <HAL_TIM_MspPostInit+0xac>)
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009f86:	23c0      	movs	r3, #192	@ 0xc0
 8009f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f92:	2300      	movs	r3, #0
 8009f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009f96:	2304      	movs	r3, #4
 8009f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f9a:	f107 0314 	add.w	r3, r7, #20
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4805      	ldr	r0, [pc, #20]	@ (8009fb8 <HAL_TIM_MspPostInit+0xb0>)
 8009fa2:	f002 fb59 	bl	800c658 <HAL_GPIO_Init>
}
 8009fa6:	bf00      	nop
 8009fa8:	3728      	adds	r7, #40	@ 0x28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40021000 	.word	0x40021000
 8009fb8:	48000800 	.word	0x48000800
 8009fbc:	40013400 	.word	0x40013400

08009fc0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009fc4:	4b20      	ldr	r3, [pc, #128]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fc6:	4a21      	ldr	r2, [pc, #132]	@ (800a04c <MX_LPUART1_UART_Init+0x8c>)
 8009fc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8009fca:	4b1f      	ldr	r3, [pc, #124]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fcc:	4a20      	ldr	r2, [pc, #128]	@ (800a050 <MX_LPUART1_UART_Init+0x90>)
 8009fce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009fd0:	4b1d      	ldr	r3, [pc, #116]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009fd6:	4b1c      	ldr	r3, [pc, #112]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009fe2:	4b19      	ldr	r3, [pc, #100]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fe4:	220c      	movs	r2, #12
 8009fe6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fe8:	4b17      	ldr	r3, [pc, #92]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fee:	4b16      	ldr	r3, [pc, #88]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009ff4:	4b14      	ldr	r3, [pc, #80]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009ffa:	4b13      	ldr	r3, [pc, #76]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a000:	4811      	ldr	r0, [pc, #68]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 800a002:	f005 fe25 	bl	800fc50 <HAL_UART_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800a00c:	f7fe fd0a 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a010:	2100      	movs	r1, #0
 800a012:	480d      	ldr	r0, [pc, #52]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 800a014:	f007 fc61 	bl	80118da <HAL_UARTEx_SetTxFifoThreshold>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800a01e:	f7fe fd01 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a022:	2100      	movs	r1, #0
 800a024:	4808      	ldr	r0, [pc, #32]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 800a026:	f007 fc96 	bl	8011956 <HAL_UARTEx_SetRxFifoThreshold>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800a030:	f7fe fcf8 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a034:	4804      	ldr	r0, [pc, #16]	@ (800a048 <MX_LPUART1_UART_Init+0x88>)
 800a036:	f007 fc17 	bl	8011868 <HAL_UARTEx_DisableFifoMode>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800a040:	f7fe fcf0 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	2000210c 	.word	0x2000210c
 800a04c:	40008000 	.word	0x40008000
 800a050:	001e8480 	.word	0x001e8480

0800a054 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a058:	4b23      	ldr	r3, [pc, #140]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a05a:	4a24      	ldr	r2, [pc, #144]	@ (800a0ec <MX_USART2_UART_Init+0x98>)
 800a05c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a05e:	4b22      	ldr	r3, [pc, #136]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800a066:	4b20      	ldr	r3, [pc, #128]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a068:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a06c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a070:	2200      	movs	r2, #0
 800a072:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800a074:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a07a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a07c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a07e:	220c      	movs	r2, #12
 800a080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a082:	4b19      	ldr	r3, [pc, #100]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a084:	2200      	movs	r2, #0
 800a086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a088:	4b17      	ldr	r3, [pc, #92]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a08e:	4b16      	ldr	r3, [pc, #88]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a090:	2200      	movs	r2, #0
 800a092:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a094:	4b14      	ldr	r3, [pc, #80]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a096:	2200      	movs	r2, #0
 800a098:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a09a:	4b13      	ldr	r3, [pc, #76]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a0a0:	4811      	ldr	r0, [pc, #68]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a0a2:	f005 fdd5 	bl	800fc50 <HAL_UART_Init>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800a0ac:	f7fe fcba 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	480d      	ldr	r0, [pc, #52]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a0b4:	f007 fc11 	bl	80118da <HAL_UARTEx_SetTxFifoThreshold>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800a0be:	f7fe fcb1 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4808      	ldr	r0, [pc, #32]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a0c6:	f007 fc46 	bl	8011956 <HAL_UARTEx_SetRxFifoThreshold>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800a0d0:	f7fe fca8 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a0d4:	4804      	ldr	r0, [pc, #16]	@ (800a0e8 <MX_USART2_UART_Init+0x94>)
 800a0d6:	f007 fbc7 	bl	8011868 <HAL_UARTEx_DisableFifoMode>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a0e0:	f7fe fca0 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a0e4:	bf00      	nop
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	200021d8 	.word	0x200021d8
 800a0ec:	40004400 	.word	0x40004400

0800a0f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b0a0      	sub	sp, #128	@ 0x80
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	605a      	str	r2, [r3, #4]
 800a102:	609a      	str	r2, [r3, #8]
 800a104:	60da      	str	r2, [r3, #12]
 800a106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a108:	f107 0318 	add.w	r3, r7, #24
 800a10c:	2254      	movs	r2, #84	@ 0x54
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f008 fa59 	bl	80125c8 <memset>
  if(uartHandle->Instance==LPUART1)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a99      	ldr	r2, [pc, #612]	@ (800a380 <HAL_UART_MspInit+0x290>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	f040 8093 	bne.w	800a248 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a122:	2320      	movs	r3, #32
 800a124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a126:	2300      	movs	r3, #0
 800a128:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a12a:	f107 0318 	add.w	r3, r7, #24
 800a12e:	4618      	mov	r0, r3
 800a130:	f003 fa58 	bl	800d5e4 <HAL_RCCEx_PeriphCLKConfig>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a13a:	f7fe fc73 	bl	8008a24 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a13e:	4b91      	ldr	r3, [pc, #580]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a142:	4a90      	ldr	r2, [pc, #576]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a14a:	4b8e      	ldr	r3, [pc, #568]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a14c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a156:	4b8b      	ldr	r3, [pc, #556]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a15a:	4a8a      	ldr	r2, [pc, #552]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a15c:	f043 0302 	orr.w	r3, r3, #2
 800a160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a162:	4b88      	ldr	r3, [pc, #544]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a16e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a172:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a174:	2302      	movs	r3, #2
 800a176:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a17c:	2300      	movs	r3, #0
 800a17e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a180:	2308      	movs	r3, #8
 800a182:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a184:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a188:	4619      	mov	r1, r3
 800a18a:	487f      	ldr	r0, [pc, #508]	@ (800a388 <HAL_UART_MspInit+0x298>)
 800a18c:	f002 fa64 	bl	800c658 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a190:	4b7e      	ldr	r3, [pc, #504]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a192:	4a7f      	ldr	r2, [pc, #508]	@ (800a390 <HAL_UART_MspInit+0x2a0>)
 800a194:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a196:	4b7d      	ldr	r3, [pc, #500]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a198:	2222      	movs	r2, #34	@ 0x22
 800a19a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a19c:	4b7b      	ldr	r3, [pc, #492]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1a2:	4b7a      	ldr	r3, [pc, #488]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a1a8:	4b78      	ldr	r3, [pc, #480]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1aa:	2280      	movs	r2, #128	@ 0x80
 800a1ac:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a1ae:	4b77      	ldr	r3, [pc, #476]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a1b4:	4b75      	ldr	r3, [pc, #468]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a1ba:	4b74      	ldr	r3, [pc, #464]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a1c0:	4b72      	ldr	r3, [pc, #456]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a1c6:	4871      	ldr	r0, [pc, #452]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1c8:	f001 ff14 	bl	800bff4 <HAL_DMA_Init>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a1d2:	f7fe fc27 	bl	8008a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a6c      	ldr	r2, [pc, #432]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a1de:	4a6b      	ldr	r2, [pc, #428]	@ (800a38c <HAL_UART_MspInit+0x29c>)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a1e4:	4b6b      	ldr	r3, [pc, #428]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a1e6:	4a6c      	ldr	r2, [pc, #432]	@ (800a398 <HAL_UART_MspInit+0x2a8>)
 800a1e8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a1ea:	4b6a      	ldr	r3, [pc, #424]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a1ec:	2223      	movs	r2, #35	@ 0x23
 800a1ee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a1f0:	4b68      	ldr	r3, [pc, #416]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a1f2:	2210      	movs	r2, #16
 800a1f4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1f6:	4b67      	ldr	r3, [pc, #412]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a1fc:	4b65      	ldr	r3, [pc, #404]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a1fe:	2280      	movs	r2, #128	@ 0x80
 800a200:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a202:	4b64      	ldr	r3, [pc, #400]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a204:	2200      	movs	r2, #0
 800a206:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a208:	4b62      	ldr	r3, [pc, #392]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a20e:	4b61      	ldr	r3, [pc, #388]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a210:	2200      	movs	r2, #0
 800a212:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a214:	4b5f      	ldr	r3, [pc, #380]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a216:	2200      	movs	r2, #0
 800a218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a21a:	485e      	ldr	r0, [pc, #376]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a21c:	f001 feea 	bl	800bff4 <HAL_DMA_Init>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a226:	f7fe fbfd 	bl	8008a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a59      	ldr	r2, [pc, #356]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a22e:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a230:	4a58      	ldr	r2, [pc, #352]	@ (800a394 <HAL_UART_MspInit+0x2a4>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	205b      	movs	r0, #91	@ 0x5b
 800a23c:	f001 fea5 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a240:	205b      	movs	r0, #91	@ 0x5b
 800a242:	f001 febc 	bl	800bfbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a246:	e097      	b.n	800a378 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a53      	ldr	r2, [pc, #332]	@ (800a39c <HAL_UART_MspInit+0x2ac>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	f040 8092 	bne.w	800a378 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a254:	2302      	movs	r3, #2
 800a256:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a258:	2300      	movs	r3, #0
 800a25a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a25c:	f107 0318 	add.w	r3, r7, #24
 800a260:	4618      	mov	r0, r3
 800a262:	f003 f9bf 	bl	800d5e4 <HAL_RCCEx_PeriphCLKConfig>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800a26c:	f7fe fbda 	bl	8008a24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a270:	4b44      	ldr	r3, [pc, #272]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a274:	4a43      	ldr	r2, [pc, #268]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a27a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a27c:	4b41      	ldr	r3, [pc, #260]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a27e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a288:	4b3e      	ldr	r3, [pc, #248]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a28a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a28c:	4a3d      	ldr	r2, [pc, #244]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <HAL_UART_MspInit+0x294>)
 800a296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	60bb      	str	r3, [r7, #8]
 800a29e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a2a0:	230c      	movs	r3, #12
 800a2a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a2b0:	2307      	movs	r3, #7
 800a2b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a2be:	f002 f9cb 	bl	800c658 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800a2c2:	4b37      	ldr	r3, [pc, #220]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2c4:	4a37      	ldr	r2, [pc, #220]	@ (800a3a4 <HAL_UART_MspInit+0x2b4>)
 800a2c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800a2c8:	4b35      	ldr	r3, [pc, #212]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2ca:	221a      	movs	r2, #26
 800a2cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2ce:	4b34      	ldr	r3, [pc, #208]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2d4:	4b32      	ldr	r3, [pc, #200]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a2da:	4b31      	ldr	r3, [pc, #196]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2dc:	2280      	movs	r2, #128	@ 0x80
 800a2de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2e6:	4b2e      	ldr	r3, [pc, #184]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a2f2:	4b2b      	ldr	r3, [pc, #172]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a2f8:	4829      	ldr	r0, [pc, #164]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a2fa:	f001 fe7b 	bl	800bff4 <HAL_DMA_Init>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a304:	f7fe fb8e 	bl	8008a24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a25      	ldr	r2, [pc, #148]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a30c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a310:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <HAL_UART_MspInit+0x2b0>)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800a316:	4b24      	ldr	r3, [pc, #144]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a318:	4a24      	ldr	r2, [pc, #144]	@ (800a3ac <HAL_UART_MspInit+0x2bc>)
 800a31a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800a31c:	4b22      	ldr	r3, [pc, #136]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a31e:	221b      	movs	r2, #27
 800a320:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a322:	4b21      	ldr	r3, [pc, #132]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a324:	2210      	movs	r2, #16
 800a326:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a328:	4b1f      	ldr	r3, [pc, #124]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a32e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a330:	2280      	movs	r2, #128	@ 0x80
 800a332:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a334:	4b1c      	ldr	r3, [pc, #112]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a336:	2200      	movs	r2, #0
 800a338:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a33a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a340:	4b19      	ldr	r3, [pc, #100]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a342:	2200      	movs	r2, #0
 800a344:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a346:	4b18      	ldr	r3, [pc, #96]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a34c:	4816      	ldr	r0, [pc, #88]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a34e:	f001 fe51 	bl	800bff4 <HAL_DMA_Init>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800a358:	f7fe fb64 	bl	8008a24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a12      	ldr	r2, [pc, #72]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a360:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a362:	4a11      	ldr	r2, [pc, #68]	@ (800a3a8 <HAL_UART_MspInit+0x2b8>)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a368:	2200      	movs	r2, #0
 800a36a:	2100      	movs	r1, #0
 800a36c:	2026      	movs	r0, #38	@ 0x26
 800a36e:	f001 fe0c 	bl	800bf8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a372:	2026      	movs	r0, #38	@ 0x26
 800a374:	f001 fe23 	bl	800bfbe <HAL_NVIC_EnableIRQ>
}
 800a378:	bf00      	nop
 800a37a:	3780      	adds	r7, #128	@ 0x80
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	40008000 	.word	0x40008000
 800a384:	40021000 	.word	0x40021000
 800a388:	48000400 	.word	0x48000400
 800a38c:	200022a4 	.word	0x200022a4
 800a390:	40020044 	.word	0x40020044
 800a394:	20002304 	.word	0x20002304
 800a398:	40020058 	.word	0x40020058
 800a39c:	40004400 	.word	0x40004400
 800a3a0:	20002364 	.word	0x20002364
 800a3a4:	4002001c 	.word	0x4002001c
 800a3a8:	200023c4 	.word	0x200023c4
 800a3ac:	40020030 	.word	0x40020030

0800a3b0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800a3b0:	480d      	ldr	r0, [pc, #52]	@ (800a3e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a3b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800a3b4:	f7ff f994 	bl	80096e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a3b8:	480c      	ldr	r0, [pc, #48]	@ (800a3ec <LoopForever+0x6>)
  ldr r1, =_edata
 800a3ba:	490d      	ldr	r1, [pc, #52]	@ (800a3f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a3bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f4 <LoopForever+0xe>)
  movs r3, #0
 800a3be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a3c0:	e002      	b.n	800a3c8 <LoopCopyDataInit>

0800a3c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a3c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a3c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a3c6:	3304      	adds	r3, #4

0800a3c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3cc:	d3f9      	bcc.n	800a3c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a3f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a3d0:	4c0a      	ldr	r4, [pc, #40]	@ (800a3fc <LoopForever+0x16>)
  movs r3, #0
 800a3d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3d4:	e001      	b.n	800a3da <LoopFillZerobss>

0800a3d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3d8:	3204      	adds	r2, #4

0800a3da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3dc:	d3fb      	bcc.n	800a3d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a3de:	f008 f911 	bl	8012604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a3e2:	f7fb f929 	bl	8005638 <main>

0800a3e6 <LoopForever>:

LoopForever:
    b LoopForever
 800a3e6:	e7fe      	b.n	800a3e6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800a3e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a3ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3f0:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 800a3f4:	08014b08 	.word	0x08014b08
  ldr r2, =_sbss
 800a3f8:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 800a3fc:	20002570 	.word	0x20002570

0800a400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a400:	e7fe      	b.n	800a400 <ADC1_2_IRQHandler>

0800a402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a40c:	2003      	movs	r0, #3
 800a40e:	f001 fdb1 	bl	800bf74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a412:	2000      	movs	r0, #0
 800a414:	f000 f80e 	bl	800a434 <HAL_InitTick>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	71fb      	strb	r3, [r7, #7]
 800a422:	e001      	b.n	800a428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a424:	f7ff f834 	bl	8009490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a428:	79fb      	ldrb	r3, [r7, #7]

}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a440:	4b16      	ldr	r3, [pc, #88]	@ (800a49c <HAL_InitTick+0x68>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d022      	beq.n	800a48e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a448:	4b15      	ldr	r3, [pc, #84]	@ (800a4a0 <HAL_InitTick+0x6c>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	4b13      	ldr	r3, [pc, #76]	@ (800a49c <HAL_InitTick+0x68>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a454:	fbb1 f3f3 	udiv	r3, r1, r3
 800a458:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45c:	4618      	mov	r0, r3
 800a45e:	f001 fdbc 	bl	800bfda <HAL_SYSTICK_Config>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10f      	bne.n	800a488 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	d809      	bhi.n	800a482 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a46e:	2200      	movs	r2, #0
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	f04f 30ff 	mov.w	r0, #4294967295
 800a476:	f001 fd88 	bl	800bf8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a47a:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a4 <HAL_InitTick+0x70>)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	e007      	b.n	800a492 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	e004      	b.n	800a492 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
 800a48c:	e001      	b.n	800a492 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20000340 	.word	0x20000340
 800a4a0:	20000338 	.word	0x20000338
 800a4a4:	2000033c 	.word	0x2000033c

0800a4a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4ac:	4b05      	ldr	r3, [pc, #20]	@ (800a4c4 <HAL_IncTick+0x1c>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <HAL_IncTick+0x20>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	4a03      	ldr	r2, [pc, #12]	@ (800a4c4 <HAL_IncTick+0x1c>)
 800a4b8:	6013      	str	r3, [r2, #0]
}
 800a4ba:	bf00      	nop
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	20002424 	.word	0x20002424
 800a4c8:	20000340 	.word	0x20000340

0800a4cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
  return uwTick;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	@ (800a4e0 <HAL_GetTick+0x14>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20002424 	.word	0x20002424

0800a4e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	609a      	str	r2, [r3, #8]
}
 800a4fe:	bf00      	nop
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3360      	adds	r3, #96	@ 0x60
 800a55e:	461a      	mov	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	4b08      	ldr	r3, [pc, #32]	@ (800a590 <LL_ADC_SetOffset+0x44>)
 800a56e:	4013      	ands	r3, r2
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	4313      	orrs	r3, r2
 800a57c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	03fff000 	.word	0x03fff000

0800a594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3360      	adds	r3, #96	@ 0x60
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	3360      	adds	r3, #96	@ 0x60
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3360      	adds	r3, #96	@ 0x60
 800a606:	461a      	mov	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800a620:	bf00      	nop
 800a622:	371c      	adds	r7, #28
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3360      	adds	r3, #96	@ 0x60
 800a63c:	461a      	mov	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	431a      	orrs	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800a656:	bf00      	nop
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	615a      	str	r2, [r3, #20]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b087      	sub	sp, #28
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3330      	adds	r3, #48	@ 0x30
 800a6be:	461a      	mov	r2, r3
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	f003 030c 	and.w	r3, r3, #12
 800a6ca:	4413      	add	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f003 031f 	and.w	r3, r3, #31
 800a6d8:	211f      	movs	r1, #31
 800a6da:	fa01 f303 	lsl.w	r3, r1, r3
 800a6de:	43db      	mvns	r3, r3
 800a6e0:	401a      	ands	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	0e9b      	lsrs	r3, r3, #26
 800a6e6:	f003 011f 	and.w	r1, r3, #31
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f003 031f 	and.w	r3, r3, #31
 800a6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a6fa:	bf00      	nop
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a706:	b480      	push	{r7}
 800a708:	b087      	sub	sp, #28
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3314      	adds	r3, #20
 800a716:	461a      	mov	r2, r3
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	0e5b      	lsrs	r3, r3, #25
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	4413      	add	r3, r2
 800a724:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	0d1b      	lsrs	r3, r3, #20
 800a72e:	f003 031f 	and.w	r3, r3, #31
 800a732:	2107      	movs	r1, #7
 800a734:	fa01 f303 	lsl.w	r3, r1, r3
 800a738:	43db      	mvns	r3, r3
 800a73a:	401a      	ands	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	0d1b      	lsrs	r3, r3, #20
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	fa01 f303 	lsl.w	r3, r1, r3
 800a74a:	431a      	orrs	r2, r3
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a750:	bf00      	nop
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a774:	43db      	mvns	r3, r3
 800a776:	401a      	ands	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f003 0318 	and.w	r3, r3, #24
 800a77e:	4908      	ldr	r1, [pc, #32]	@ (800a7a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a780:	40d9      	lsrs	r1, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	400b      	ands	r3, r1
 800a786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a78a:	431a      	orrs	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	0007ffff 	.word	0x0007ffff

0800a7a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f003 031f 	and.w	r3, r3, #31
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a7d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6093      	str	r3, [r2, #8]
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f8:	d101      	bne.n	800a7fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e000      	b.n	800a800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a81c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a820:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a848:	d101      	bne.n	800a84e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a86c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a870:	f043 0201 	orr.w	r2, r3, #1
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a898:	f043 0202 	orr.w	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d101      	bne.n	800a8c4 <LL_ADC_IsEnabled+0x18>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e000      	b.n	800a8c6 <LL_ADC_IsEnabled+0x1a>
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d101      	bne.n	800a8ea <LL_ADC_IsDisableOngoing+0x18>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <LL_ADC_IsDisableOngoing+0x1a>
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a90c:	f043 0204 	orr.w	r2, r3, #4
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f003 0304 	and.w	r3, r3, #4
 800a930:	2b04      	cmp	r3, #4
 800a932:	d101      	bne.n	800a938 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b08      	cmp	r3, #8
 800a958:	d101      	bne.n	800a95e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a96c:	b590      	push	{r4, r7, lr}
 800a96e:	b089      	sub	sp, #36	@ 0x24
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e1a9      	b.n	800acda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a990:	2b00      	cmp	r3, #0
 800a992:	d109      	bne.n	800a9a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fa f969 	bl	8004c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ff19 	bl	800a7e4 <LL_ADC_IsDeepPowerDownEnabled>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff feff 	bl	800a7c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff ff34 	bl	800a834 <LL_ADC_IsInternalRegulatorEnabled>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d115      	bne.n	800a9fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ff18 	bl	800a80c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a9dc:	4b9c      	ldr	r3, [pc, #624]	@ (800ac50 <HAL_ADC_Init+0x2e4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	099b      	lsrs	r3, r3, #6
 800a9e2:	4a9c      	ldr	r2, [pc, #624]	@ (800ac54 <HAL_ADC_Init+0x2e8>)
 800a9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e8:	099b      	lsrs	r3, r3, #6
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a9f0:	e002      	b.n	800a9f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f9      	bne.n	800a9f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff ff16 	bl	800a834 <LL_ADC_IsInternalRegulatorEnabled>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10d      	bne.n	800aa2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa12:	f043 0210 	orr.w	r2, r3, #16
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa1e:	f043 0201 	orr.w	r2, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff ff76 	bl	800a920 <LL_ADC_REG_IsConversionOngoing>
 800aa34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa3a:	f003 0310 	and.w	r3, r3, #16
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 8142 	bne.w	800acc8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f040 813e 	bne.w	800acc8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800aa54:	f043 0202 	orr.w	r2, r3, #2
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff ff23 	bl	800a8ac <LL_ADC_IsEnabled>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d141      	bne.n	800aaf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa74:	d004      	beq.n	800aa80 <HAL_ADC_Init+0x114>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a77      	ldr	r2, [pc, #476]	@ (800ac58 <HAL_ADC_Init+0x2ec>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10f      	bne.n	800aaa0 <HAL_ADC_Init+0x134>
 800aa80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800aa84:	f7ff ff12 	bl	800a8ac <LL_ADC_IsEnabled>
 800aa88:	4604      	mov	r4, r0
 800aa8a:	4873      	ldr	r0, [pc, #460]	@ (800ac58 <HAL_ADC_Init+0x2ec>)
 800aa8c:	f7ff ff0e 	bl	800a8ac <LL_ADC_IsEnabled>
 800aa90:	4603      	mov	r3, r0
 800aa92:	4323      	orrs	r3, r4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bf0c      	ite	eq
 800aa98:	2301      	moveq	r3, #1
 800aa9a:	2300      	movne	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	e012      	b.n	800aac6 <HAL_ADC_Init+0x15a>
 800aaa0:	486e      	ldr	r0, [pc, #440]	@ (800ac5c <HAL_ADC_Init+0x2f0>)
 800aaa2:	f7ff ff03 	bl	800a8ac <LL_ADC_IsEnabled>
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	486d      	ldr	r0, [pc, #436]	@ (800ac60 <HAL_ADC_Init+0x2f4>)
 800aaaa:	f7ff feff 	bl	800a8ac <LL_ADC_IsEnabled>
 800aaae:	4603      	mov	r3, r0
 800aab0:	431c      	orrs	r4, r3
 800aab2:	486c      	ldr	r0, [pc, #432]	@ (800ac64 <HAL_ADC_Init+0x2f8>)
 800aab4:	f7ff fefa 	bl	800a8ac <LL_ADC_IsEnabled>
 800aab8:	4603      	mov	r3, r0
 800aaba:	4323      	orrs	r3, r4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf0c      	ite	eq
 800aac0:	2301      	moveq	r3, #1
 800aac2:	2300      	movne	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d012      	beq.n	800aaf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aad2:	d004      	beq.n	800aade <HAL_ADC_Init+0x172>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a5f      	ldr	r2, [pc, #380]	@ (800ac58 <HAL_ADC_Init+0x2ec>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d101      	bne.n	800aae2 <HAL_ADC_Init+0x176>
 800aade:	4a62      	ldr	r2, [pc, #392]	@ (800ac68 <HAL_ADC_Init+0x2fc>)
 800aae0:	e000      	b.n	800aae4 <HAL_ADC_Init+0x178>
 800aae2:	4a62      	ldr	r2, [pc, #392]	@ (800ac6c <HAL_ADC_Init+0x300>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4619      	mov	r1, r3
 800aaea:	4610      	mov	r0, r2
 800aaec:	f7ff fcfa 	bl	800a4e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7f5b      	ldrb	r3, [r3, #29]
 800aaf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aafa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800ab00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800ab06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ab10:	4313      	orrs	r3, r2
 800ab12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d106      	bne.n	800ab2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab22:	3b01      	subs	r3, #1
 800ab24:	045b      	lsls	r3, r3, #17
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	4b48      	ldr	r3, [pc, #288]	@ (800ac70 <HAL_ADC_Init+0x304>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	69b9      	ldr	r1, [r7, #24]
 800ab58:	430b      	orrs	r3, r1
 800ab5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fee5 	bl	800a946 <LL_ADC_INJ_IsConversionOngoing>
 800ab7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d17f      	bne.n	800ac84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d17c      	bne.n	800ac84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ab8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aba6:	f023 0302 	bic.w	r3, r3, #2
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6812      	ldr	r2, [r2, #0]
 800abae:	69b9      	ldr	r1, [r7, #24]
 800abb0:	430b      	orrs	r3, r1
 800abb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d017      	beq.n	800abec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800abca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800abd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800abd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6911      	ldr	r1, [r2, #16]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6812      	ldr	r2, [r2, #0]
 800abe4:	430b      	orrs	r3, r1
 800abe6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800abea:	e013      	b.n	800ac14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691a      	ldr	r2, [r3, #16]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800abfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	6812      	ldr	r2, [r2, #0]
 800ac08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ac0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d12a      	bne.n	800ac74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ac28:	f023 0304 	bic.w	r3, r3, #4
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac34:	4311      	orrs	r1, r2
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ac3a:	4311      	orrs	r1, r2
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ac40:	430a      	orrs	r2, r1
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0201 	orr.w	r2, r2, #1
 800ac4c:	611a      	str	r2, [r3, #16]
 800ac4e:	e019      	b.n	800ac84 <HAL_ADC_Init+0x318>
 800ac50:	20000338 	.word	0x20000338
 800ac54:	053e2d63 	.word	0x053e2d63
 800ac58:	50000100 	.word	0x50000100
 800ac5c:	50000400 	.word	0x50000400
 800ac60:	50000500 	.word	0x50000500
 800ac64:	50000600 	.word	0x50000600
 800ac68:	50000300 	.word	0x50000300
 800ac6c:	50000700 	.word	0x50000700
 800ac70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0201 	bic.w	r2, r2, #1
 800ac82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d10c      	bne.n	800aca6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac92:	f023 010f 	bic.w	r1, r3, #15
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	1e5a      	subs	r2, r3, #1
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aca4:	e007      	b.n	800acb6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 020f 	bic.w	r2, r2, #15
 800acb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	f043 0201 	orr.w	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800acc6:	e007      	b.n	800acd8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800accc:	f043 0210 	orr.w	r2, r3, #16
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800acd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3724      	adds	r7, #36	@ 0x24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd90      	pop	{r4, r7, pc}
 800ace2:	bf00      	nop

0800ace4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acf8:	d004      	beq.n	800ad04 <HAL_ADC_Start_DMA+0x20>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a5a      	ldr	r2, [pc, #360]	@ (800ae68 <HAL_ADC_Start_DMA+0x184>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d101      	bne.n	800ad08 <HAL_ADC_Start_DMA+0x24>
 800ad04:	4b59      	ldr	r3, [pc, #356]	@ (800ae6c <HAL_ADC_Start_DMA+0x188>)
 800ad06:	e000      	b.n	800ad0a <HAL_ADC_Start_DMA+0x26>
 800ad08:	4b59      	ldr	r3, [pc, #356]	@ (800ae70 <HAL_ADC_Start_DMA+0x18c>)
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff fd4a 	bl	800a7a4 <LL_ADC_GetMultimode>
 800ad10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff fe02 	bl	800a920 <LL_ADC_REG_IsConversionOngoing>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f040 809b 	bne.w	800ae5a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_ADC_Start_DMA+0x4e>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e096      	b.n	800ae60 <HAL_ADC_Start_DMA+0x17c>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a4d      	ldr	r2, [pc, #308]	@ (800ae74 <HAL_ADC_Start_DMA+0x190>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d008      	beq.n	800ad56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	2b05      	cmp	r3, #5
 800ad4e:	d002      	beq.n	800ad56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d17a      	bne.n	800ae4c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fcf6 	bl	800b748 <ADC_Enable>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800ad60:	7dfb      	ldrb	r3, [r7, #23]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d16d      	bne.n	800ae42 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ad6e:	f023 0301 	bic.w	r3, r3, #1
 800ad72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a3a      	ldr	r2, [pc, #232]	@ (800ae68 <HAL_ADC_Start_DMA+0x184>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d009      	beq.n	800ad98 <HAL_ADC_Start_DMA+0xb4>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3b      	ldr	r2, [pc, #236]	@ (800ae78 <HAL_ADC_Start_DMA+0x194>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d002      	beq.n	800ad94 <HAL_ADC_Start_DMA+0xb0>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	e003      	b.n	800ad9c <HAL_ADC_Start_DMA+0xb8>
 800ad94:	4b39      	ldr	r3, [pc, #228]	@ (800ae7c <HAL_ADC_Start_DMA+0x198>)
 800ad96:	e001      	b.n	800ad9c <HAL_ADC_Start_DMA+0xb8>
 800ad98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	6812      	ldr	r2, [r2, #0]
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d002      	beq.n	800adaa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d006      	beq.n	800add0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adc6:	f023 0206 	bic.w	r2, r3, #6
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	661a      	str	r2, [r3, #96]	@ 0x60
 800adce:	e002      	b.n	800add6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adda:	4a29      	ldr	r2, [pc, #164]	@ (800ae80 <HAL_ADC_Start_DMA+0x19c>)
 800addc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade2:	4a28      	ldr	r2, [pc, #160]	@ (800ae84 <HAL_ADC_Start_DMA+0x1a0>)
 800ade4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adea:	4a27      	ldr	r2, [pc, #156]	@ (800ae88 <HAL_ADC_Start_DMA+0x1a4>)
 800adec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	221c      	movs	r2, #28
 800adf4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0210 	orr.w	r2, r2, #16
 800ae0c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0201 	orr.w	r2, r2, #1
 800ae1c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3340      	adds	r3, #64	@ 0x40
 800ae28:	4619      	mov	r1, r3
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f001 f989 	bl	800c144 <HAL_DMA_Start_IT>
 800ae32:	4603      	mov	r3, r0
 800ae34:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff fd5c 	bl	800a8f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800ae40:	e00d      	b.n	800ae5e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800ae4a:	e008      	b.n	800ae5e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800ae58:	e001      	b.n	800ae5e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	50000100 	.word	0x50000100
 800ae6c:	50000300 	.word	0x50000300
 800ae70:	50000700 	.word	0x50000700
 800ae74:	50000600 	.word	0x50000600
 800ae78:	50000500 	.word	0x50000500
 800ae7c:	50000400 	.word	0x50000400
 800ae80:	0800b933 	.word	0x0800b933
 800ae84:	0800ba0b 	.word	0x0800ba0b
 800ae88:	0800ba27 	.word	0x0800ba27

0800ae8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b0b6      	sub	sp, #216	@ 0xd8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d102      	bne.n	800aeec <HAL_ADC_ConfigChannel+0x24>
 800aee6:	2302      	movs	r3, #2
 800aee8:	f000 bc13 	b.w	800b712 <HAL_ADC_ConfigChannel+0x84a>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fd11 	bl	800a920 <LL_ADC_REG_IsConversionOngoing>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 83f3 	bne.w	800b6ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7ff fbcb 	bl	800a6ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fcff 	bl	800a920 <LL_ADC_REG_IsConversionOngoing>
 800af22:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff fd0b 	bl	800a946 <LL_ADC_INJ_IsConversionOngoing>
 800af30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800af34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f040 81d9 	bne.w	800b2f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800af3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 81d4 	bne.w	800b2f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af50:	d10f      	bne.n	800af72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2200      	movs	r2, #0
 800af5c:	4619      	mov	r1, r3
 800af5e:	f7ff fbd2 	bl	800a706 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fb79 	bl	800a662 <LL_ADC_SetSamplingTimeCommonConfig>
 800af70:	e00e      	b.n	800af90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6819      	ldr	r1, [r3, #0]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	461a      	mov	r2, r3
 800af80:	f7ff fbc1 	bl	800a706 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2100      	movs	r1, #0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff fb69 	bl	800a662 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	695a      	ldr	r2, [r3, #20]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	08db      	lsrs	r3, r3, #3
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d022      	beq.n	800aff8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6919      	ldr	r1, [r3, #16]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800afc2:	f7ff fac3 	bl	800a54c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6818      	ldr	r0, [r3, #0]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	6919      	ldr	r1, [r3, #16]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	461a      	mov	r2, r3
 800afd4:	f7ff fb0f 	bl	800a5f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d102      	bne.n	800afee <HAL_ADC_ConfigChannel+0x126>
 800afe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800afec:	e000      	b.n	800aff0 <HAL_ADC_ConfigChannel+0x128>
 800afee:	2300      	movs	r3, #0
 800aff0:	461a      	mov	r2, r3
 800aff2:	f7ff fb1b 	bl	800a62c <LL_ADC_SetOffsetSaturation>
 800aff6:	e17b      	b.n	800b2f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2100      	movs	r1, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fac8 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b004:	4603      	mov	r3, r0
 800b006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <HAL_ADC_ConfigChannel+0x15c>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2100      	movs	r1, #0
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fabd 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b01a:	4603      	mov	r3, r0
 800b01c:	0e9b      	lsrs	r3, r3, #26
 800b01e:	f003 021f 	and.w	r2, r3, #31
 800b022:	e01e      	b.n	800b062 <HAL_ADC_ConfigChannel+0x19a>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fab2 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b030:	4603      	mov	r3, r0
 800b032:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b03a:	fa93 f3a3 	rbit	r3, r3
 800b03e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b046:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b04a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800b052:	2320      	movs	r3, #32
 800b054:	e004      	b.n	800b060 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800b056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b05a:	fab3 f383 	clz	r3, r3
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <HAL_ADC_ConfigChannel+0x1b2>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	0e9b      	lsrs	r3, r3, #26
 800b074:	f003 031f 	and.w	r3, r3, #31
 800b078:	e018      	b.n	800b0ac <HAL_ADC_ConfigChannel+0x1e4>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b086:	fa93 f3a3 	rbit	r3, r3
 800b08a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800b09e:	2320      	movs	r3, #32
 800b0a0:	e004      	b.n	800b0ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800b0a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0a6:	fab3 f383 	clz	r3, r3
 800b0aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d106      	bne.n	800b0be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fa81 	bl	800a5c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fa65 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <HAL_ADC_ConfigChannel+0x222>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2101      	movs	r1, #1
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff fa5a 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	0e9b      	lsrs	r3, r3, #26
 800b0e4:	f003 021f 	and.w	r2, r3, #31
 800b0e8:	e01e      	b.n	800b128 <HAL_ADC_ConfigChannel+0x260>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fa4f 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b100:	fa93 f3a3 	rbit	r3, r3
 800b104:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b10c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b118:	2320      	movs	r3, #32
 800b11a:	e004      	b.n	800b126 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b11c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b120:	fab3 f383 	clz	r3, r3
 800b124:	b2db      	uxtb	r3, r3
 800b126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <HAL_ADC_ConfigChannel+0x278>
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	0e9b      	lsrs	r3, r3, #26
 800b13a:	f003 031f 	and.w	r3, r3, #31
 800b13e:	e018      	b.n	800b172 <HAL_ADC_ConfigChannel+0x2aa>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b14c:	fa93 f3a3 	rbit	r3, r3
 800b150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b15c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b164:	2320      	movs	r3, #32
 800b166:	e004      	b.n	800b172 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b16c:	fab3 f383 	clz	r3, r3
 800b170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b172:	429a      	cmp	r2, r3
 800b174:	d106      	bne.n	800b184 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	2101      	movs	r1, #1
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fa1e 	bl	800a5c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2102      	movs	r1, #2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fa02 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b190:	4603      	mov	r3, r0
 800b192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10a      	bne.n	800b1b0 <HAL_ADC_ConfigChannel+0x2e8>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2102      	movs	r1, #2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff f9f7 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	0e9b      	lsrs	r3, r3, #26
 800b1aa:	f003 021f 	and.w	r2, r3, #31
 800b1ae:	e01e      	b.n	800b1ee <HAL_ADC_ConfigChannel+0x326>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2102      	movs	r1, #2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff f9ec 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1c6:	fa93 f3a3 	rbit	r3, r3
 800b1ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b1ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b1d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b1de:	2320      	movs	r3, #32
 800b1e0:	e004      	b.n	800b1ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1e6:	fab3 f383 	clz	r3, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <HAL_ADC_ConfigChannel+0x33e>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	0e9b      	lsrs	r3, r3, #26
 800b200:	f003 031f 	and.w	r3, r3, #31
 800b204:	e016      	b.n	800b234 <HAL_ADC_ConfigChannel+0x36c>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b20e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b212:	fa93 f3a3 	rbit	r3, r3
 800b216:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b218:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b21a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b21e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b226:	2320      	movs	r3, #32
 800b228:	e004      	b.n	800b234 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b22a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b22e:	fab3 f383 	clz	r3, r3
 800b232:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b234:	429a      	cmp	r2, r3
 800b236:	d106      	bne.n	800b246 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2200      	movs	r2, #0
 800b23e:	2102      	movs	r1, #2
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff f9bd 	bl	800a5c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2103      	movs	r1, #3
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff f9a1 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b252:	4603      	mov	r3, r0
 800b254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <HAL_ADC_ConfigChannel+0x3aa>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2103      	movs	r1, #3
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff f996 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b268:	4603      	mov	r3, r0
 800b26a:	0e9b      	lsrs	r3, r3, #26
 800b26c:	f003 021f 	and.w	r2, r3, #31
 800b270:	e017      	b.n	800b2a2 <HAL_ADC_ConfigChannel+0x3da>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2103      	movs	r1, #3
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff f98b 	bl	800a594 <LL_ADC_GetOffsetChannel>
 800b27e:	4603      	mov	r3, r0
 800b280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b284:	fa93 f3a3 	rbit	r3, r3
 800b288:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b28a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b28c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b28e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800b294:	2320      	movs	r3, #32
 800b296:	e003      	b.n	800b2a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800b298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b29a:	fab3 f383 	clz	r3, r3
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d105      	bne.n	800b2ba <HAL_ADC_ConfigChannel+0x3f2>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	0e9b      	lsrs	r3, r3, #26
 800b2b4:	f003 031f 	and.w	r3, r3, #31
 800b2b8:	e011      	b.n	800b2de <HAL_ADC_ConfigChannel+0x416>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2c2:	fa93 f3a3 	rbit	r3, r3
 800b2c6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b2c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b2cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800b2d2:	2320      	movs	r3, #32
 800b2d4:	e003      	b.n	800b2de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800b2d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2d8:	fab3 f383 	clz	r3, r3
 800b2dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d106      	bne.n	800b2f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2103      	movs	r1, #3
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff f968 	bl	800a5c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fad9 	bl	800a8ac <LL_ADC_IsEnabled>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 813d 	bne.w	800b57c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	461a      	mov	r2, r3
 800b310:	f7ff fa24 	bl	800a75c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4aa2      	ldr	r2, [pc, #648]	@ (800b5a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	f040 812e 	bne.w	800b57c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <HAL_ADC_ConfigChannel+0x480>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	0e9b      	lsrs	r3, r3, #26
 800b336:	3301      	adds	r3, #1
 800b338:	f003 031f 	and.w	r3, r3, #31
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	bf94      	ite	ls
 800b340:	2301      	movls	r3, #1
 800b342:	2300      	movhi	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	e019      	b.n	800b37c <HAL_ADC_ConfigChannel+0x4b4>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b350:	fa93 f3a3 	rbit	r3, r3
 800b354:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b358:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b35a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800b360:	2320      	movs	r3, #32
 800b362:	e003      	b.n	800b36c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800b364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b366:	fab3 f383 	clz	r3, r3
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	3301      	adds	r3, #1
 800b36e:	f003 031f 	and.w	r3, r3, #31
 800b372:	2b09      	cmp	r3, #9
 800b374:	bf94      	ite	ls
 800b376:	2301      	movls	r3, #1
 800b378:	2300      	movhi	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d079      	beq.n	800b474 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d107      	bne.n	800b39c <HAL_ADC_ConfigChannel+0x4d4>
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	0e9b      	lsrs	r3, r3, #26
 800b392:	3301      	adds	r3, #1
 800b394:	069b      	lsls	r3, r3, #26
 800b396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b39a:	e015      	b.n	800b3c8 <HAL_ADC_ConfigChannel+0x500>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3a4:	fa93 f3a3 	rbit	r3, r3
 800b3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800b3b4:	2320      	movs	r3, #32
 800b3b6:	e003      	b.n	800b3c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800b3b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ba:	fab3 f383 	clz	r3, r3
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	069b      	lsls	r3, r3, #26
 800b3c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d109      	bne.n	800b3e8 <HAL_ADC_ConfigChannel+0x520>
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	0e9b      	lsrs	r3, r3, #26
 800b3da:	3301      	adds	r3, #1
 800b3dc:	f003 031f 	and.w	r3, r3, #31
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e6:	e017      	b.n	800b418 <HAL_ADC_ConfigChannel+0x550>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f0:	fa93 f3a3 	rbit	r3, r3
 800b3f4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b3fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800b400:	2320      	movs	r3, #32
 800b402:	e003      	b.n	800b40c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800b404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b406:	fab3 f383 	clz	r3, r3
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	3301      	adds	r3, #1
 800b40e:	f003 031f 	and.w	r3, r3, #31
 800b412:	2101      	movs	r1, #1
 800b414:	fa01 f303 	lsl.w	r3, r1, r3
 800b418:	ea42 0103 	orr.w	r1, r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <HAL_ADC_ConfigChannel+0x576>
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	0e9b      	lsrs	r3, r3, #26
 800b42e:	3301      	adds	r3, #1
 800b430:	f003 021f 	and.w	r2, r3, #31
 800b434:	4613      	mov	r3, r2
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	4413      	add	r3, r2
 800b43a:	051b      	lsls	r3, r3, #20
 800b43c:	e018      	b.n	800b470 <HAL_ADC_ConfigChannel+0x5a8>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b446:	fa93 f3a3 	rbit	r3, r3
 800b44a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800b456:	2320      	movs	r3, #32
 800b458:	e003      	b.n	800b462 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800b45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45c:	fab3 f383 	clz	r3, r3
 800b460:	b2db      	uxtb	r3, r3
 800b462:	3301      	adds	r3, #1
 800b464:	f003 021f 	and.w	r2, r3, #31
 800b468:	4613      	mov	r3, r2
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b470:	430b      	orrs	r3, r1
 800b472:	e07e      	b.n	800b572 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d107      	bne.n	800b490 <HAL_ADC_ConfigChannel+0x5c8>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	0e9b      	lsrs	r3, r3, #26
 800b486:	3301      	adds	r3, #1
 800b488:	069b      	lsls	r3, r3, #26
 800b48a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b48e:	e015      	b.n	800b4bc <HAL_ADC_ConfigChannel+0x5f4>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b498:	fa93 f3a3 	rbit	r3, r3
 800b49c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	e003      	b.n	800b4b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	fab3 f383 	clz	r3, r3
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	069b      	lsls	r3, r3, #26
 800b4b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d109      	bne.n	800b4dc <HAL_ADC_ConfigChannel+0x614>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	0e9b      	lsrs	r3, r3, #26
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	f003 031f 	and.w	r3, r3, #31
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4da:	e017      	b.n	800b50c <HAL_ADC_ConfigChannel+0x644>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	fa93 f3a3 	rbit	r3, r3
 800b4e8:	61fb      	str	r3, [r7, #28]
  return result;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	e003      	b.n	800b500 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	fab3 f383 	clz	r3, r3
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	3301      	adds	r3, #1
 800b502:	f003 031f 	and.w	r3, r3, #31
 800b506:	2101      	movs	r1, #1
 800b508:	fa01 f303 	lsl.w	r3, r1, r3
 800b50c:	ea42 0103 	orr.w	r1, r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10d      	bne.n	800b538 <HAL_ADC_ConfigChannel+0x670>
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	0e9b      	lsrs	r3, r3, #26
 800b522:	3301      	adds	r3, #1
 800b524:	f003 021f 	and.w	r2, r3, #31
 800b528:	4613      	mov	r3, r2
 800b52a:	005b      	lsls	r3, r3, #1
 800b52c:	4413      	add	r3, r2
 800b52e:	3b1e      	subs	r3, #30
 800b530:	051b      	lsls	r3, r3, #20
 800b532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b536:	e01b      	b.n	800b570 <HAL_ADC_ConfigChannel+0x6a8>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	fa93 f3a3 	rbit	r3, r3
 800b544:	613b      	str	r3, [r7, #16]
  return result;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800b550:	2320      	movs	r3, #32
 800b552:	e003      	b.n	800b55c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	fab3 f383 	clz	r3, r3
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	3301      	adds	r3, #1
 800b55e:	f003 021f 	and.w	r2, r3, #31
 800b562:	4613      	mov	r3, r2
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	4413      	add	r3, r2
 800b568:	3b1e      	subs	r3, #30
 800b56a:	051b      	lsls	r3, r3, #20
 800b56c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b570:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b576:	4619      	mov	r1, r3
 800b578:	f7ff f8c5 	bl	800a706 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <HAL_ADC_ConfigChannel+0x6e0>)
 800b582:	4013      	ands	r3, r2
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80be 	beq.w	800b706 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b592:	d004      	beq.n	800b59e <HAL_ADC_ConfigChannel+0x6d6>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a04      	ldr	r2, [pc, #16]	@ (800b5ac <HAL_ADC_ConfigChannel+0x6e4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d10a      	bne.n	800b5b4 <HAL_ADC_ConfigChannel+0x6ec>
 800b59e:	4b04      	ldr	r3, [pc, #16]	@ (800b5b0 <HAL_ADC_ConfigChannel+0x6e8>)
 800b5a0:	e009      	b.n	800b5b6 <HAL_ADC_ConfigChannel+0x6ee>
 800b5a2:	bf00      	nop
 800b5a4:	407f0000 	.word	0x407f0000
 800b5a8:	80080000 	.word	0x80080000
 800b5ac:	50000100 	.word	0x50000100
 800b5b0:	50000300 	.word	0x50000300
 800b5b4:	4b59      	ldr	r3, [pc, #356]	@ (800b71c <HAL_ADC_ConfigChannel+0x854>)
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe ffba 	bl	800a530 <LL_ADC_GetCommonPathInternalCh>
 800b5bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a56      	ldr	r2, [pc, #344]	@ (800b720 <HAL_ADC_ConfigChannel+0x858>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d004      	beq.n	800b5d4 <HAL_ADC_ConfigChannel+0x70c>
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a55      	ldr	r2, [pc, #340]	@ (800b724 <HAL_ADC_ConfigChannel+0x85c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d13a      	bne.n	800b64a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b5d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d134      	bne.n	800b64a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5e8:	d005      	beq.n	800b5f6 <HAL_ADC_ConfigChannel+0x72e>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a4e      	ldr	r2, [pc, #312]	@ (800b728 <HAL_ADC_ConfigChannel+0x860>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	f040 8085 	bne.w	800b700 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5fe:	d004      	beq.n	800b60a <HAL_ADC_ConfigChannel+0x742>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a49      	ldr	r2, [pc, #292]	@ (800b72c <HAL_ADC_ConfigChannel+0x864>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d101      	bne.n	800b60e <HAL_ADC_ConfigChannel+0x746>
 800b60a:	4a49      	ldr	r2, [pc, #292]	@ (800b730 <HAL_ADC_ConfigChannel+0x868>)
 800b60c:	e000      	b.n	800b610 <HAL_ADC_ConfigChannel+0x748>
 800b60e:	4a43      	ldr	r2, [pc, #268]	@ (800b71c <HAL_ADC_ConfigChannel+0x854>)
 800b610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b614:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe ff75 	bl	800a50a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b620:	4b44      	ldr	r3, [pc, #272]	@ (800b734 <HAL_ADC_ConfigChannel+0x86c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	099b      	lsrs	r3, r3, #6
 800b626:	4a44      	ldr	r2, [pc, #272]	@ (800b738 <HAL_ADC_ConfigChannel+0x870>)
 800b628:	fba2 2303 	umull	r2, r3, r2, r3
 800b62c:	099b      	lsrs	r3, r3, #6
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	4613      	mov	r3, r2
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b63a:	e002      	b.n	800b642 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3b01      	subs	r3, #1
 800b640:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f9      	bne.n	800b63c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b648:	e05a      	b.n	800b700 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a3b      	ldr	r2, [pc, #236]	@ (800b73c <HAL_ADC_ConfigChannel+0x874>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d125      	bne.n	800b6a0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11f      	bne.n	800b6a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a31      	ldr	r2, [pc, #196]	@ (800b72c <HAL_ADC_ConfigChannel+0x864>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d104      	bne.n	800b674 <HAL_ADC_ConfigChannel+0x7ac>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a34      	ldr	r2, [pc, #208]	@ (800b740 <HAL_ADC_ConfigChannel+0x878>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d047      	beq.n	800b704 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b67c:	d004      	beq.n	800b688 <HAL_ADC_ConfigChannel+0x7c0>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a2a      	ldr	r2, [pc, #168]	@ (800b72c <HAL_ADC_ConfigChannel+0x864>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d101      	bne.n	800b68c <HAL_ADC_ConfigChannel+0x7c4>
 800b688:	4a29      	ldr	r2, [pc, #164]	@ (800b730 <HAL_ADC_ConfigChannel+0x868>)
 800b68a:	e000      	b.n	800b68e <HAL_ADC_ConfigChannel+0x7c6>
 800b68c:	4a23      	ldr	r2, [pc, #140]	@ (800b71c <HAL_ADC_ConfigChannel+0x854>)
 800b68e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fe ff36 	bl	800a50a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b69e:	e031      	b.n	800b704 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a27      	ldr	r2, [pc, #156]	@ (800b744 <HAL_ADC_ConfigChannel+0x87c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d12d      	bne.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b6aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d127      	bne.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b72c <HAL_ADC_ConfigChannel+0x864>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d022      	beq.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6c8:	d004      	beq.n	800b6d4 <HAL_ADC_ConfigChannel+0x80c>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a17      	ldr	r2, [pc, #92]	@ (800b72c <HAL_ADC_ConfigChannel+0x864>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d101      	bne.n	800b6d8 <HAL_ADC_ConfigChannel+0x810>
 800b6d4:	4a16      	ldr	r2, [pc, #88]	@ (800b730 <HAL_ADC_ConfigChannel+0x868>)
 800b6d6:	e000      	b.n	800b6da <HAL_ADC_ConfigChannel+0x812>
 800b6d8:	4a10      	ldr	r2, [pc, #64]	@ (800b71c <HAL_ADC_ConfigChannel+0x854>)
 800b6da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fe ff10 	bl	800a50a <LL_ADC_SetCommonPathInternalCh>
 800b6ea:	e00c      	b.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6f0:	f043 0220 	orr.w	r2, r3, #32
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b6fe:	e002      	b.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b700:	bf00      	nop
 800b702:	e000      	b.n	800b706 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b704:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b70e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b712:	4618      	mov	r0, r3
 800b714:	37d8      	adds	r7, #216	@ 0xd8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	50000700 	.word	0x50000700
 800b720:	c3210000 	.word	0xc3210000
 800b724:	90c00010 	.word	0x90c00010
 800b728:	50000600 	.word	0x50000600
 800b72c:	50000100 	.word	0x50000100
 800b730:	50000300 	.word	0x50000300
 800b734:	20000338 	.word	0x20000338
 800b738:	053e2d63 	.word	0x053e2d63
 800b73c:	c7520000 	.word	0xc7520000
 800b740:	50000500 	.word	0x50000500
 800b744:	cb840000 	.word	0xcb840000

0800b748 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b750:	2300      	movs	r3, #0
 800b752:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff f8a7 	bl	800a8ac <LL_ADC_IsEnabled>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d176      	bne.n	800b852 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689a      	ldr	r2, [r3, #8]
 800b76a:	4b3c      	ldr	r3, [pc, #240]	@ (800b85c <ADC_Enable+0x114>)
 800b76c:	4013      	ands	r3, r2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00d      	beq.n	800b78e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b776:	f043 0210 	orr.w	r2, r3, #16
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b782:	f043 0201 	orr.w	r2, r3, #1
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e062      	b.n	800b854 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff f862 	bl	800a85c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7a0:	d004      	beq.n	800b7ac <ADC_Enable+0x64>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a2e      	ldr	r2, [pc, #184]	@ (800b860 <ADC_Enable+0x118>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d101      	bne.n	800b7b0 <ADC_Enable+0x68>
 800b7ac:	4b2d      	ldr	r3, [pc, #180]	@ (800b864 <ADC_Enable+0x11c>)
 800b7ae:	e000      	b.n	800b7b2 <ADC_Enable+0x6a>
 800b7b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b868 <ADC_Enable+0x120>)
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe febc 	bl	800a530 <LL_ADC_GetCommonPathInternalCh>
 800b7b8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b7ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b7c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b86c <ADC_Enable+0x124>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	099b      	lsrs	r3, r3, #6
 800b7c8:	4a29      	ldr	r2, [pc, #164]	@ (800b870 <ADC_Enable+0x128>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	099b      	lsrs	r3, r3, #6
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b7dc:	e002      	b.n	800b7e4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f9      	bne.n	800b7de <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b7ea:	f7fe fe6f 	bl	800a4cc <HAL_GetTick>
 800b7ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b7f0:	e028      	b.n	800b844 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff f858 	bl	800a8ac <LL_ADC_IsEnabled>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d104      	bne.n	800b80c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff f828 	bl	800a85c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b80c:	f7fe fe5e 	bl	800a4cc <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	2b02      	cmp	r3, #2
 800b818:	d914      	bls.n	800b844 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	2b01      	cmp	r3, #1
 800b826:	d00d      	beq.n	800b844 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b82c:	f043 0210 	orr.w	r2, r3, #16
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b838:	f043 0201 	orr.w	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e007      	b.n	800b854 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d1cf      	bne.n	800b7f2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	8000003f 	.word	0x8000003f
 800b860:	50000100 	.word	0x50000100
 800b864:	50000300 	.word	0x50000300
 800b868:	50000700 	.word	0x50000700
 800b86c:	20000338 	.word	0x20000338
 800b870:	053e2d63 	.word	0x053e2d63

0800b874 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff f826 	bl	800a8d2 <LL_ADC_IsDisableOngoing>
 800b886:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff f80d 	bl	800a8ac <LL_ADC_IsEnabled>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d047      	beq.n	800b928 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d144      	bne.n	800b928 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f003 030d 	and.w	r3, r3, #13
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d10c      	bne.n	800b8c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe ffe7 	bl	800a884 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b8be:	f7fe fe05 	bl	800a4cc <HAL_GetTick>
 800b8c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b8c4:	e029      	b.n	800b91a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ca:	f043 0210 	orr.w	r2, r3, #16
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d6:	f043 0201 	orr.w	r2, r3, #1
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e023      	b.n	800b92a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b8e2:	f7fe fdf3 	bl	800a4cc <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d914      	bls.n	800b91a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00d      	beq.n	800b91a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b902:	f043 0210 	orr.w	r2, r3, #16
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b90e:	f043 0201 	orr.w	r2, r3, #1
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e007      	b.n	800b92a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1dc      	bne.n	800b8e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b944:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d14b      	bne.n	800b9e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b950:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 0308 	and.w	r3, r3, #8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d021      	beq.n	800b9aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fe8c 	bl	800a688 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d032      	beq.n	800b9dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d12b      	bne.n	800b9dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11f      	bne.n	800b9dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9a0:	f043 0201 	orr.w	r2, r3, #1
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b9a8:	e018      	b.n	800b9dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d111      	bne.n	800b9dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d105      	bne.n	800b9dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9d4:	f043 0201 	orr.w	r2, r3, #1
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7ff fa55 	bl	800ae8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b9e2:	e00e      	b.n	800ba02 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e8:	f003 0310 	and.w	r3, r3, #16
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f7ff fa5f 	bl	800aeb4 <HAL_ADC_ErrorCallback>
}
 800b9f6:	e004      	b.n	800ba02 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	4798      	blx	r3
}
 800ba02:	bf00      	nop
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7ff fa41 	bl	800aea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba44:	f043 0204 	orr.w	r2, r3, #4
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7ff fa31 	bl	800aeb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <LL_ADC_IsEnabled>:
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d101      	bne.n	800ba72 <LL_ADC_IsEnabled+0x18>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e000      	b.n	800ba74 <LL_ADC_IsEnabled+0x1a>
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <LL_ADC_StartCalibration>:
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ba92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	609a      	str	r2, [r3, #8]
}
 800baa6:	bf00      	nop
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <LL_ADC_IsCalibrationOnGoing>:
{
 800bab2:	b480      	push	{r7}
 800bab4:	b083      	sub	sp, #12
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bac6:	d101      	bne.n	800bacc <LL_ADC_IsCalibrationOnGoing+0x1a>
 800bac8:	2301      	movs	r3, #1
 800baca:	e000      	b.n	800bace <LL_ADC_IsCalibrationOnGoing+0x1c>
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <LL_ADC_REG_IsConversionOngoing>:
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f003 0304 	and.w	r3, r3, #4
 800baea:	2b04      	cmp	r3, #4
 800baec:	d101      	bne.n	800baf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800baee:	2301      	movs	r3, #1
 800baf0:	e000      	b.n	800baf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_ADCEx_Calibration_Start+0x1c>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e04d      	b.n	800bbb8 <HAL_ADCEx_Calibration_Start+0xb8>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff fea5 	bl	800b874 <ADC_Disable>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d136      	bne.n	800bba2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bb3c:	f023 0302 	bic.w	r3, r3, #2
 800bb40:	f043 0202 	orr.w	r2, r3, #2
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff ff96 	bl	800ba80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bb54:	e014      	b.n	800bb80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	4a18      	ldr	r2, [pc, #96]	@ (800bbc0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d90d      	bls.n	800bb80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb68:	f023 0312 	bic.w	r3, r3, #18
 800bb6c:	f043 0210 	orr.w	r2, r3, #16
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e01b      	b.n	800bbb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff ff94 	bl	800bab2 <LL_ADC_IsCalibrationOnGoing>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e2      	bne.n	800bb56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb94:	f023 0303 	bic.w	r3, r3, #3
 800bb98:	f043 0201 	orr.w	r2, r3, #1
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bba0:	e005      	b.n	800bbae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bba6:	f043 0210 	orr.w	r2, r3, #16
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	0004de01 	.word	0x0004de01

0800bbc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b0a1      	sub	sp, #132	@ 0x84
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d101      	bne.n	800bbe2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	e0e7      	b.n	800bdb2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800bbea:	2300      	movs	r3, #0
 800bbec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800bbee:	2300      	movs	r3, #0
 800bbf0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbfa:	d102      	bne.n	800bc02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bbfc:	4b6f      	ldr	r3, [pc, #444]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bbfe:	60bb      	str	r3, [r7, #8]
 800bc00:	e009      	b.n	800bc16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a6e      	ldr	r2, [pc, #440]	@ (800bdc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d102      	bne.n	800bc12 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800bc0c:	4b6d      	ldr	r3, [pc, #436]	@ (800bdc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bc0e:	60bb      	str	r3, [r7, #8]
 800bc10:	e001      	b.n	800bc16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bc12:	2300      	movs	r3, #0
 800bc14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc20:	f043 0220 	orr.w	r2, r3, #32
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e0be      	b.n	800bdb2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff ff4f 	bl	800bada <LL_ADC_REG_IsConversionOngoing>
 800bc3c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff ff49 	bl	800bada <LL_ADC_REG_IsConversionOngoing>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f040 80a0 	bne.w	800bd90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800bc50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f040 809c 	bne.w	800bd90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc60:	d004      	beq.n	800bc6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a55      	ldr	r2, [pc, #340]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d101      	bne.n	800bc70 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800bc6c:	4b56      	ldr	r3, [pc, #344]	@ (800bdc8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800bc6e:	e000      	b.n	800bc72 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800bc70:	4b56      	ldr	r3, [pc, #344]	@ (800bdcc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800bc72:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d04b      	beq.n	800bd14 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bc7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	6859      	ldr	r1, [r3, #4]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc8e:	035b      	lsls	r3, r3, #13
 800bc90:	430b      	orrs	r3, r1
 800bc92:	431a      	orrs	r2, r3
 800bc94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bca0:	d004      	beq.n	800bcac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a45      	ldr	r2, [pc, #276]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d10f      	bne.n	800bccc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800bcac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bcb0:	f7ff fed3 	bl	800ba5a <LL_ADC_IsEnabled>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4841      	ldr	r0, [pc, #260]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bcb8:	f7ff fecf 	bl	800ba5a <LL_ADC_IsEnabled>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	4323      	orrs	r3, r4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bf0c      	ite	eq
 800bcc4:	2301      	moveq	r3, #1
 800bcc6:	2300      	movne	r3, #0
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	e012      	b.n	800bcf2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800bccc:	483c      	ldr	r0, [pc, #240]	@ (800bdc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bcce:	f7ff fec4 	bl	800ba5a <LL_ADC_IsEnabled>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	483b      	ldr	r0, [pc, #236]	@ (800bdc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bcd6:	f7ff fec0 	bl	800ba5a <LL_ADC_IsEnabled>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	431c      	orrs	r4, r3
 800bcde:	483c      	ldr	r0, [pc, #240]	@ (800bdd0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800bce0:	f7ff febb 	bl	800ba5a <LL_ADC_IsEnabled>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4323      	orrs	r3, r4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bf0c      	ite	eq
 800bcec:	2301      	moveq	r3, #1
 800bcee:	2300      	movne	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d056      	beq.n	800bda4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bcf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800bcfe:	f023 030f 	bic.w	r3, r3, #15
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6811      	ldr	r1, [r2, #0]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6892      	ldr	r2, [r2, #8]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd10:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bd12:	e047      	b.n	800bda4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bd14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bd1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd28:	d004      	beq.n	800bd34 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a23      	ldr	r2, [pc, #140]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d10f      	bne.n	800bd54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800bd34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bd38:	f7ff fe8f 	bl	800ba5a <LL_ADC_IsEnabled>
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	481f      	ldr	r0, [pc, #124]	@ (800bdbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bd40:	f7ff fe8b 	bl	800ba5a <LL_ADC_IsEnabled>
 800bd44:	4603      	mov	r3, r0
 800bd46:	4323      	orrs	r3, r4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	bf0c      	ite	eq
 800bd4c:	2301      	moveq	r3, #1
 800bd4e:	2300      	movne	r3, #0
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	e012      	b.n	800bd7a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800bd54:	481a      	ldr	r0, [pc, #104]	@ (800bdc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bd56:	f7ff fe80 	bl	800ba5a <LL_ADC_IsEnabled>
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4819      	ldr	r0, [pc, #100]	@ (800bdc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bd5e:	f7ff fe7c 	bl	800ba5a <LL_ADC_IsEnabled>
 800bd62:	4603      	mov	r3, r0
 800bd64:	431c      	orrs	r4, r3
 800bd66:	481a      	ldr	r0, [pc, #104]	@ (800bdd0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800bd68:	f7ff fe77 	bl	800ba5a <LL_ADC_IsEnabled>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	4323      	orrs	r3, r4
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bf0c      	ite	eq
 800bd74:	2301      	moveq	r3, #1
 800bd76:	2300      	movne	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d012      	beq.n	800bda4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bd7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800bd86:	f023 030f 	bic.w	r3, r3, #15
 800bd8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bd8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bd8e:	e009      	b.n	800bda4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd94:	f043 0220 	orr.w	r2, r3, #32
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800bda2:	e000      	b.n	800bda6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bda4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bdae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3784      	adds	r7, #132	@ 0x84
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd90      	pop	{r4, r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	50000100 	.word	0x50000100
 800bdc0:	50000400 	.word	0x50000400
 800bdc4:	50000500 	.word	0x50000500
 800bdc8:	50000300 	.word	0x50000300
 800bdcc:	50000700 	.word	0x50000700
 800bdd0:	50000600 	.word	0x50000600

0800bdd4 <__NVIC_SetPriorityGrouping>:
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bde4:	4b0c      	ldr	r3, [pc, #48]	@ (800be18 <__NVIC_SetPriorityGrouping+0x44>)
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bdfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800be00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800be06:	4a04      	ldr	r2, [pc, #16]	@ (800be18 <__NVIC_SetPriorityGrouping+0x44>)
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	60d3      	str	r3, [r2, #12]
}
 800be0c:	bf00      	nop
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <__NVIC_GetPriorityGrouping>:
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be20:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <__NVIC_GetPriorityGrouping+0x18>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	0a1b      	lsrs	r3, r3, #8
 800be26:	f003 0307 	and.w	r3, r3, #7
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	e000ed00 	.word	0xe000ed00

0800be38 <__NVIC_EnableIRQ>:
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	db0b      	blt.n	800be62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	f003 021f 	and.w	r2, r3, #31
 800be50:	4907      	ldr	r1, [pc, #28]	@ (800be70 <__NVIC_EnableIRQ+0x38>)
 800be52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be56:	095b      	lsrs	r3, r3, #5
 800be58:	2001      	movs	r0, #1
 800be5a:	fa00 f202 	lsl.w	r2, r0, r2
 800be5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	e000e100 	.word	0xe000e100

0800be74 <__NVIC_SetPriority>:
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be84:	2b00      	cmp	r3, #0
 800be86:	db0a      	blt.n	800be9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	490c      	ldr	r1, [pc, #48]	@ (800bec0 <__NVIC_SetPriority+0x4c>)
 800be8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be92:	0112      	lsls	r2, r2, #4
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	440b      	add	r3, r1
 800be98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be9c:	e00a      	b.n	800beb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4908      	ldr	r1, [pc, #32]	@ (800bec4 <__NVIC_SetPriority+0x50>)
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	f003 030f 	and.w	r3, r3, #15
 800beaa:	3b04      	subs	r3, #4
 800beac:	0112      	lsls	r2, r2, #4
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	440b      	add	r3, r1
 800beb2:	761a      	strb	r2, [r3, #24]
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	e000e100 	.word	0xe000e100
 800bec4:	e000ed00 	.word	0xe000ed00

0800bec8 <NVIC_EncodePriority>:
{
 800bec8:	b480      	push	{r7}
 800beca:	b089      	sub	sp, #36	@ 0x24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f003 0307 	and.w	r3, r3, #7
 800beda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f1c3 0307 	rsb	r3, r3, #7
 800bee2:	2b04      	cmp	r3, #4
 800bee4:	bf28      	it	cs
 800bee6:	2304      	movcs	r3, #4
 800bee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	3304      	adds	r3, #4
 800beee:	2b06      	cmp	r3, #6
 800bef0:	d902      	bls.n	800bef8 <NVIC_EncodePriority+0x30>
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	3b03      	subs	r3, #3
 800bef6:	e000      	b.n	800befa <NVIC_EncodePriority+0x32>
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800befc:	f04f 32ff 	mov.w	r2, #4294967295
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	fa02 f303 	lsl.w	r3, r2, r3
 800bf06:	43da      	mvns	r2, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	401a      	ands	r2, r3
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bf10:	f04f 31ff 	mov.w	r1, #4294967295
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	fa01 f303 	lsl.w	r3, r1, r3
 800bf1a:	43d9      	mvns	r1, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf20:	4313      	orrs	r3, r2
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3724      	adds	r7, #36	@ 0x24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf40:	d301      	bcc.n	800bf46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bf42:	2301      	movs	r3, #1
 800bf44:	e00f      	b.n	800bf66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bf46:	4a0a      	ldr	r2, [pc, #40]	@ (800bf70 <SysTick_Config+0x40>)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bf4e:	210f      	movs	r1, #15
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	f7ff ff8e 	bl	800be74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bf58:	4b05      	ldr	r3, [pc, #20]	@ (800bf70 <SysTick_Config+0x40>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bf5e:	4b04      	ldr	r3, [pc, #16]	@ (800bf70 <SysTick_Config+0x40>)
 800bf60:	2207      	movs	r2, #7
 800bf62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	e000e010 	.word	0xe000e010

0800bf74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff ff29 	bl	800bdd4 <__NVIC_SetPriorityGrouping>
}
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b086      	sub	sp, #24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	4603      	mov	r3, r0
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
 800bf96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bf98:	f7ff ff40 	bl	800be1c <__NVIC_GetPriorityGrouping>
 800bf9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	6978      	ldr	r0, [r7, #20]
 800bfa4:	f7ff ff90 	bl	800bec8 <NVIC_EncodePriority>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff ff5f 	bl	800be74 <__NVIC_SetPriority>
}
 800bfb6:	bf00      	nop
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bfc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff ff33 	bl	800be38 <__NVIC_EnableIRQ>
}
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff ffa4 	bl	800bf30 <SysTick_Config>
 800bfe8:	4603      	mov	r3, r0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e08d      	b.n	800c122 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	4b47      	ldr	r3, [pc, #284]	@ (800c12c <HAL_DMA_Init+0x138>)
 800c00e:	429a      	cmp	r2, r3
 800c010:	d80f      	bhi.n	800c032 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	4b45      	ldr	r3, [pc, #276]	@ (800c130 <HAL_DMA_Init+0x13c>)
 800c01a:	4413      	add	r3, r2
 800c01c:	4a45      	ldr	r2, [pc, #276]	@ (800c134 <HAL_DMA_Init+0x140>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	091b      	lsrs	r3, r3, #4
 800c024:	009a      	lsls	r2, r3, #2
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a42      	ldr	r2, [pc, #264]	@ (800c138 <HAL_DMA_Init+0x144>)
 800c02e:	641a      	str	r2, [r3, #64]	@ 0x40
 800c030:	e00e      	b.n	800c050 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	4b40      	ldr	r3, [pc, #256]	@ (800c13c <HAL_DMA_Init+0x148>)
 800c03a:	4413      	add	r3, r2
 800c03c:	4a3d      	ldr	r2, [pc, #244]	@ (800c134 <HAL_DMA_Init+0x140>)
 800c03e:	fba2 2303 	umull	r2, r3, r2, r3
 800c042:	091b      	lsrs	r3, r3, #4
 800c044:	009a      	lsls	r2, r3, #2
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a3c      	ldr	r2, [pc, #240]	@ (800c140 <HAL_DMA_Init+0x14c>)
 800c04e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c06a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c08c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fa76 	bl	800c594 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0b0:	d102      	bne.n	800c0b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0c0:	b2d2      	uxtb	r2, r2
 800c0c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c0cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d010      	beq.n	800c0f8 <HAL_DMA_Init+0x104>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d80c      	bhi.n	800c0f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fa96 	bl	800c610 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c0f4:	605a      	str	r2, [r3, #4]
 800c0f6:	e008      	b.n	800c10a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	40020407 	.word	0x40020407
 800c130:	bffdfff8 	.word	0xbffdfff8
 800c134:	cccccccd 	.word	0xcccccccd
 800c138:	40020000 	.word	0x40020000
 800c13c:	bffdfbf8 	.word	0xbffdfbf8
 800c140:	40020400 	.word	0x40020400

0800c144 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d101      	bne.n	800c164 <HAL_DMA_Start_IT+0x20>
 800c160:	2302      	movs	r3, #2
 800c162:	e066      	b.n	800c232 <HAL_DMA_Start_IT+0xee>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b01      	cmp	r3, #1
 800c176:	d155      	bne.n	800c224 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f022 0201 	bic.w	r2, r2, #1
 800c194:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 f9bb 	bl	800c518 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d008      	beq.n	800c1bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f042 020e 	orr.w	r2, r2, #14
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e00f      	b.n	800c1dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0204 	bic.w	r2, r2, #4
 800c1ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 020a 	orr.w	r2, r2, #10
 800c1da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d007      	beq.n	800c212 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c210:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f042 0201 	orr.w	r2, r2, #1
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	e005      	b.n	800c230 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c22c:	2302      	movs	r3, #2
 800c22e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c230:	7dfb      	ldrb	r3, [r7, #23]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b085      	sub	sp, #20
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d005      	beq.n	800c25e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2204      	movs	r2, #4
 800c256:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
 800c25c:	e037      	b.n	800c2ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f022 020e 	bic.w	r2, r2, #14
 800c26c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c27c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f022 0201 	bic.w	r2, r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c292:	f003 021f 	and.w	r2, r3, #31
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29a:	2101      	movs	r1, #1
 800c29c:	fa01 f202 	lsl.w	r2, r1, r2
 800c2a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c2aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00c      	beq.n	800c2ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c2cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d00d      	beq.n	800c320 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2204      	movs	r2, #4
 800c308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	73fb      	strb	r3, [r7, #15]
 800c31e:	e047      	b.n	800c3b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f022 020e 	bic.w	r2, r2, #14
 800c32e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0201 	bic.w	r2, r2, #1
 800c33e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c34a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c34e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c354:	f003 021f 	and.w	r2, r3, #31
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c35c:	2101      	movs	r1, #1
 800c35e:	fa01 f202 	lsl.w	r2, r1, r2
 800c362:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c36c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00c      	beq.n	800c390 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c384:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c38e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	4798      	blx	r3
    }
  }
  return status;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d6:	f003 031f 	and.w	r3, r3, #31
 800c3da:	2204      	movs	r2, #4
 800c3dc:	409a      	lsls	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d026      	beq.n	800c434 <HAL_DMA_IRQHandler+0x7a>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f003 0304 	and.w	r3, r3, #4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d021      	beq.n	800c434 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0320 	and.w	r3, r3, #32
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d107      	bne.n	800c40e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0204 	bic.w	r2, r2, #4
 800c40c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c412:	f003 021f 	and.w	r2, r3, #31
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c41a:	2104      	movs	r1, #4
 800c41c:	fa01 f202 	lsl.w	r2, r1, r2
 800c420:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c426:	2b00      	cmp	r3, #0
 800c428:	d071      	beq.n	800c50e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c432:	e06c      	b.n	800c50e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c438:	f003 031f 	and.w	r3, r3, #31
 800c43c:	2202      	movs	r2, #2
 800c43e:	409a      	lsls	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4013      	ands	r3, r2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d02e      	beq.n	800c4a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d029      	beq.n	800c4a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0320 	and.w	r3, r3, #32
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10b      	bne.n	800c478 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 020a 	bic.w	r2, r2, #10
 800c46e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c47c:	f003 021f 	and.w	r2, r3, #31
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c484:	2102      	movs	r1, #2
 800c486:	fa01 f202 	lsl.w	r2, r1, r2
 800c48a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d038      	beq.n	800c50e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c4a4:	e033      	b.n	800c50e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4aa:	f003 031f 	and.w	r3, r3, #31
 800c4ae:	2208      	movs	r2, #8
 800c4b0:	409a      	lsls	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d02a      	beq.n	800c510 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d025      	beq.n	800c510 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 020e 	bic.w	r2, r2, #14
 800c4d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d8:	f003 021f 	and.w	r2, r3, #31
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	fa01 f202 	lsl.w	r2, r1, r2
 800c4e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c50e:	bf00      	nop
 800c510:	bf00      	nop
}
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c52e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c540:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	f003 021f 	and.w	r2, r3, #31
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54e:	2101      	movs	r1, #1
 800c550:	fa01 f202 	lsl.w	r2, r1, r2
 800c554:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	2b10      	cmp	r3, #16
 800c564:	d108      	bne.n	800c578 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c576:	e007      	b.n	800c588 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	60da      	str	r2, [r3, #12]
}
 800c588:	bf00      	nop
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c594:	b480      	push	{r7}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4b16      	ldr	r3, [pc, #88]	@ (800c5fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d802      	bhi.n	800c5ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c5a8:	4b15      	ldr	r3, [pc, #84]	@ (800c600 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e001      	b.n	800c5b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c5ae:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c5b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	3b08      	subs	r3, #8
 800c5be:	4a12      	ldr	r2, [pc, #72]	@ (800c608 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c4:	091b      	lsrs	r3, r3, #4
 800c5c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5cc:	089b      	lsrs	r3, r3, #2
 800c5ce:	009a      	lsls	r2, r3, #2
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a0b      	ldr	r2, [pc, #44]	@ (800c60c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c5de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f003 031f 	and.w	r3, r3, #31
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	409a      	lsls	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c5ee:	bf00      	nop
 800c5f0:	371c      	adds	r7, #28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	40020407 	.word	0x40020407
 800c600:	40020800 	.word	0x40020800
 800c604:	40020820 	.word	0x40020820
 800c608:	cccccccd 	.word	0xcccccccd
 800c60c:	40020880 	.word	0x40020880

0800c610 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4b0b      	ldr	r3, [pc, #44]	@ (800c650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	461a      	mov	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a08      	ldr	r2, [pc, #32]	@ (800c654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c632:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3b01      	subs	r3, #1
 800c638:	f003 031f 	and.w	r3, r3, #31
 800c63c:	2201      	movs	r2, #1
 800c63e:	409a      	lsls	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c644:	bf00      	nop
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	1000823f 	.word	0x1000823f
 800c654:	40020940 	.word	0x40020940

0800c658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c666:	e15a      	b.n	800c91e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	2101      	movs	r1, #1
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	fa01 f303 	lsl.w	r3, r1, r3
 800c674:	4013      	ands	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 814c 	beq.w	800c918 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f003 0303 	and.w	r3, r3, #3
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d005      	beq.n	800c698 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c694:	2b02      	cmp	r3, #2
 800c696:	d130      	bne.n	800c6fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a8:	43db      	mvns	r3, r3
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	68da      	ldr	r2, [r3, #12]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d6:	43db      	mvns	r3, r3
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	4013      	ands	r3, r2
 800c6dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	091b      	lsrs	r3, r3, #4
 800c6e4:	f003 0201 	and.w	r2, r3, #1
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	2b03      	cmp	r3, #3
 800c704:	d017      	beq.n	800c736 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	2203      	movs	r2, #3
 800c712:	fa02 f303 	lsl.w	r3, r2, r3
 800c716:	43db      	mvns	r3, r3
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	4013      	ands	r3, r2
 800c71c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	689a      	ldr	r2, [r3, #8]
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	fa02 f303 	lsl.w	r3, r2, r3
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	f003 0303 	and.w	r3, r3, #3
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d123      	bne.n	800c78a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	08da      	lsrs	r2, r3, #3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3208      	adds	r2, #8
 800c74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	220f      	movs	r2, #15
 800c75a:	fa02 f303 	lsl.w	r3, r2, r3
 800c75e:	43db      	mvns	r3, r3
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	4013      	ands	r3, r2
 800c764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	691a      	ldr	r2, [r3, #16]
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f003 0307 	and.w	r3, r3, #7
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	fa02 f303 	lsl.w	r3, r2, r3
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	4313      	orrs	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	08da      	lsrs	r2, r3, #3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3208      	adds	r2, #8
 800c784:	6939      	ldr	r1, [r7, #16]
 800c786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	2203      	movs	r2, #3
 800c796:	fa02 f303 	lsl.w	r3, r2, r3
 800c79a:	43db      	mvns	r3, r3
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f003 0203 	and.w	r2, r3, #3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80a6 	beq.w	800c918 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7cc:	4b5b      	ldr	r3, [pc, #364]	@ (800c93c <HAL_GPIO_Init+0x2e4>)
 800c7ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7d0:	4a5a      	ldr	r2, [pc, #360]	@ (800c93c <HAL_GPIO_Init+0x2e4>)
 800c7d2:	f043 0301 	orr.w	r3, r3, #1
 800c7d6:	6613      	str	r3, [r2, #96]	@ 0x60
 800c7d8:	4b58      	ldr	r3, [pc, #352]	@ (800c93c <HAL_GPIO_Init+0x2e4>)
 800c7da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c7e4:	4a56      	ldr	r2, [pc, #344]	@ (800c940 <HAL_GPIO_Init+0x2e8>)
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	089b      	lsrs	r3, r3, #2
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f003 0303 	and.w	r3, r3, #3
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	220f      	movs	r2, #15
 800c7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c800:	43db      	mvns	r3, r3
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	4013      	ands	r3, r2
 800c806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c80e:	d01f      	beq.n	800c850 <HAL_GPIO_Init+0x1f8>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a4c      	ldr	r2, [pc, #304]	@ (800c944 <HAL_GPIO_Init+0x2ec>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d019      	beq.n	800c84c <HAL_GPIO_Init+0x1f4>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a4b      	ldr	r2, [pc, #300]	@ (800c948 <HAL_GPIO_Init+0x2f0>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d013      	beq.n	800c848 <HAL_GPIO_Init+0x1f0>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a4a      	ldr	r2, [pc, #296]	@ (800c94c <HAL_GPIO_Init+0x2f4>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d00d      	beq.n	800c844 <HAL_GPIO_Init+0x1ec>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a49      	ldr	r2, [pc, #292]	@ (800c950 <HAL_GPIO_Init+0x2f8>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d007      	beq.n	800c840 <HAL_GPIO_Init+0x1e8>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a48      	ldr	r2, [pc, #288]	@ (800c954 <HAL_GPIO_Init+0x2fc>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d101      	bne.n	800c83c <HAL_GPIO_Init+0x1e4>
 800c838:	2305      	movs	r3, #5
 800c83a:	e00a      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c83c:	2306      	movs	r3, #6
 800c83e:	e008      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c840:	2304      	movs	r3, #4
 800c842:	e006      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c844:	2303      	movs	r3, #3
 800c846:	e004      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c848:	2302      	movs	r3, #2
 800c84a:	e002      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e000      	b.n	800c852 <HAL_GPIO_Init+0x1fa>
 800c850:	2300      	movs	r3, #0
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	f002 0203 	and.w	r2, r2, #3
 800c858:	0092      	lsls	r2, r2, #2
 800c85a:	4093      	lsls	r3, r2
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	4313      	orrs	r3, r2
 800c860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c862:	4937      	ldr	r1, [pc, #220]	@ (800c940 <HAL_GPIO_Init+0x2e8>)
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	089b      	lsrs	r3, r3, #2
 800c868:	3302      	adds	r3, #2
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c870:	4b39      	ldr	r3, [pc, #228]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	43db      	mvns	r3, r3
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	4013      	ands	r3, r2
 800c87e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4313      	orrs	r3, r2
 800c892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c894:	4a30      	ldr	r2, [pc, #192]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c89a:	4b2f      	ldr	r3, [pc, #188]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	43db      	mvns	r3, r3
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c8b6:	693a      	ldr	r2, [r7, #16]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c8be:	4a26      	ldr	r2, [pc, #152]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c8c4:	4b24      	ldr	r3, [pc, #144]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	43db      	mvns	r3, r3
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c8e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	43db      	mvns	r3, r3
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4313      	orrs	r3, r2
 800c910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c912:	4a11      	ldr	r2, [pc, #68]	@ (800c958 <HAL_GPIO_Init+0x300>)
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	3301      	adds	r3, #1
 800c91c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	fa22 f303 	lsr.w	r3, r2, r3
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f47f ae9d 	bne.w	800c668 <HAL_GPIO_Init+0x10>
  }
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	371c      	adds	r7, #28
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	40021000 	.word	0x40021000
 800c940:	40010000 	.word	0x40010000
 800c944:	48000400 	.word	0x48000400
 800c948:	48000800 	.word	0x48000800
 800c94c:	48000c00 	.word	0x48000c00
 800c950:	48001000 	.word	0x48001000
 800c954:	48001400 	.word	0x48001400
 800c958:	40010400 	.word	0x40010400

0800c95c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	460b      	mov	r3, r1
 800c966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691a      	ldr	r2, [r3, #16]
 800c96c:	887b      	ldrh	r3, [r7, #2]
 800c96e:	4013      	ands	r3, r2
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
 800c978:	e001      	b.n	800c97e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c97a:	2300      	movs	r3, #0
 800c97c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	807b      	strh	r3, [r7, #2]
 800c998:	4613      	mov	r3, r2
 800c99a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c99c:	787b      	ldrb	r3, [r7, #1]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d003      	beq.n	800c9aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c9a2:	887a      	ldrh	r2, [r7, #2]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c9a8:	e002      	b.n	800c9b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c9aa:	887a      	ldrh	r2, [r7, #2]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c9ce:	887a      	ldrh	r2, [r7, #2]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	041a      	lsls	r2, r3, #16
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	43d9      	mvns	r1, r3
 800c9da:	887b      	ldrh	r3, [r7, #2]
 800c9dc:	400b      	ands	r3, r1
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	619a      	str	r2, [r3, #24]
}
 800c9e4:	bf00      	nop
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c9fa:	4b08      	ldr	r3, [pc, #32]	@ (800ca1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c9fc:	695a      	ldr	r2, [r3, #20]
 800c9fe:	88fb      	ldrh	r3, [r7, #6]
 800ca00:	4013      	ands	r3, r2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d006      	beq.n	800ca14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ca06:	4a05      	ldr	r2, [pc, #20]	@ (800ca1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca08:	88fb      	ldrh	r3, [r7, #6]
 800ca0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fb fd08 	bl	8008424 <HAL_GPIO_EXTI_Callback>
  }
}
 800ca14:	bf00      	nop
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	40010400 	.word	0x40010400

0800ca20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d141      	bne.n	800cab2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ca2e:	4b4b      	ldr	r3, [pc, #300]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ca36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca3a:	d131      	bne.n	800caa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ca3c:	4b47      	ldr	r3, [pc, #284]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca42:	4a46      	ldr	r2, [pc, #280]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca4c:	4b43      	ldr	r3, [pc, #268]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ca54:	4a41      	ldr	r2, [pc, #260]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ca5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ca5c:	4b40      	ldr	r3, [pc, #256]	@ (800cb60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2232      	movs	r2, #50	@ 0x32
 800ca62:	fb02 f303 	mul.w	r3, r2, r3
 800ca66:	4a3f      	ldr	r2, [pc, #252]	@ (800cb64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ca68:	fba2 2303 	umull	r2, r3, r2, r3
 800ca6c:	0c9b      	lsrs	r3, r3, #18
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca72:	e002      	b.n	800ca7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca7a:	4b38      	ldr	r3, [pc, #224]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca86:	d102      	bne.n	800ca8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1f2      	bne.n	800ca74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ca8e:	4b33      	ldr	r3, [pc, #204]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca9a:	d158      	bne.n	800cb4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e057      	b.n	800cb50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800caa0:	4b2e      	ldr	r3, [pc, #184]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa6:	4a2d      	ldr	r2, [pc, #180]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800caac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cab0:	e04d      	b.n	800cb4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cab8:	d141      	bne.n	800cb3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800caba:	4b28      	ldr	r3, [pc, #160]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cac6:	d131      	bne.n	800cb2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cac8:	4b24      	ldr	r3, [pc, #144]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cace:	4a23      	ldr	r2, [pc, #140]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cad8:	4b20      	ldr	r3, [pc, #128]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cae0:	4a1e      	ldr	r2, [pc, #120]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cae8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2232      	movs	r2, #50	@ 0x32
 800caee:	fb02 f303 	mul.w	r3, r2, r3
 800caf2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800caf4:	fba2 2303 	umull	r2, r3, r2, r3
 800caf8:	0c9b      	lsrs	r3, r3, #18
 800cafa:	3301      	adds	r3, #1
 800cafc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cafe:	e002      	b.n	800cb06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb06:	4b15      	ldr	r3, [pc, #84]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb12:	d102      	bne.n	800cb1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1f2      	bne.n	800cb00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cb1a:	4b10      	ldr	r3, [pc, #64]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb26:	d112      	bne.n	800cb4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e011      	b.n	800cb50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb32:	4a0a      	ldr	r2, [pc, #40]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cb3c:	e007      	b.n	800cb4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cb3e:	4b07      	ldr	r3, [pc, #28]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cb46:	4a05      	ldr	r2, [pc, #20]	@ (800cb5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cb4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	40007000 	.word	0x40007000
 800cb60:	20000338 	.word	0x20000338
 800cb64:	431bde83 	.word	0x431bde83

0800cb68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800cb6c:	4b05      	ldr	r3, [pc, #20]	@ (800cb84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	4a04      	ldr	r2, [pc, #16]	@ (800cb84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cb72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb76:	6093      	str	r3, [r2, #8]
}
 800cb78:	bf00      	nop
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	40007000 	.word	0x40007000

0800cb88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e2fe      	b.n	800d198 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d075      	beq.n	800cc92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cba6:	4b97      	ldr	r3, [pc, #604]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f003 030c 	and.w	r3, r3, #12
 800cbae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cbb0:	4b94      	ldr	r3, [pc, #592]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	2b0c      	cmp	r3, #12
 800cbbe:	d102      	bne.n	800cbc6 <HAL_RCC_OscConfig+0x3e>
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d002      	beq.n	800cbcc <HAL_RCC_OscConfig+0x44>
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d10b      	bne.n	800cbe4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbcc:	4b8d      	ldr	r3, [pc, #564]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d05b      	beq.n	800cc90 <HAL_RCC_OscConfig+0x108>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d157      	bne.n	800cc90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e2d9      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbec:	d106      	bne.n	800cbfc <HAL_RCC_OscConfig+0x74>
 800cbee:	4b85      	ldr	r3, [pc, #532]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a84      	ldr	r2, [pc, #528]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cbf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	e01d      	b.n	800cc38 <HAL_RCC_OscConfig+0xb0>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cc04:	d10c      	bne.n	800cc20 <HAL_RCC_OscConfig+0x98>
 800cc06:	4b7f      	ldr	r3, [pc, #508]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a7e      	ldr	r2, [pc, #504]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	4b7c      	ldr	r3, [pc, #496]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a7b      	ldr	r2, [pc, #492]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	e00b      	b.n	800cc38 <HAL_RCC_OscConfig+0xb0>
 800cc20:	4b78      	ldr	r3, [pc, #480]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a77      	ldr	r2, [pc, #476]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	4b75      	ldr	r3, [pc, #468]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a74      	ldr	r2, [pc, #464]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d013      	beq.n	800cc68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc40:	f7fd fc44 	bl	800a4cc <HAL_GetTick>
 800cc44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc46:	e008      	b.n	800cc5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc48:	f7fd fc40 	bl	800a4cc <HAL_GetTick>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	2b64      	cmp	r3, #100	@ 0x64
 800cc54:	d901      	bls.n	800cc5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e29e      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc5a:	4b6a      	ldr	r3, [pc, #424]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0f0      	beq.n	800cc48 <HAL_RCC_OscConfig+0xc0>
 800cc66:	e014      	b.n	800cc92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc68:	f7fd fc30 	bl	800a4cc <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc6e:	e008      	b.n	800cc82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc70:	f7fd fc2c 	bl	800a4cc <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b64      	cmp	r3, #100	@ 0x64
 800cc7c:	d901      	bls.n	800cc82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e28a      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc82:	4b60      	ldr	r3, [pc, #384]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1f0      	bne.n	800cc70 <HAL_RCC_OscConfig+0xe8>
 800cc8e:	e000      	b.n	800cc92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 0302 	and.w	r3, r3, #2
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d075      	beq.n	800cd8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc9e:	4b59      	ldr	r3, [pc, #356]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f003 030c 	and.w	r3, r3, #12
 800cca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cca8:	4b56      	ldr	r3, [pc, #344]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	f003 0303 	and.w	r3, r3, #3
 800ccb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2b0c      	cmp	r3, #12
 800ccb6:	d102      	bne.n	800ccbe <HAL_RCC_OscConfig+0x136>
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d002      	beq.n	800ccc4 <HAL_RCC_OscConfig+0x13c>
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	2b04      	cmp	r3, #4
 800ccc2:	d11f      	bne.n	800cd04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ccc4:	4b4f      	ldr	r3, [pc, #316]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <HAL_RCC_OscConfig+0x154>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e25d      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccdc:	4b49      	ldr	r3, [pc, #292]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	061b      	lsls	r3, r3, #24
 800ccea:	4946      	ldr	r1, [pc, #280]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800ccec:	4313      	orrs	r3, r2
 800ccee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ccf0:	4b45      	ldr	r3, [pc, #276]	@ (800ce08 <HAL_RCC_OscConfig+0x280>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fd fb9d 	bl	800a434 <HAL_InitTick>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d043      	beq.n	800cd88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e249      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d023      	beq.n	800cd54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a3c      	ldr	r2, [pc, #240]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd18:	f7fd fbd8 	bl	800a4cc <HAL_GetTick>
 800cd1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd1e:	e008      	b.n	800cd32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd20:	f7fd fbd4 	bl	800a4cc <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d901      	bls.n	800cd32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e232      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd32:	4b34      	ldr	r3, [pc, #208]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0f0      	beq.n	800cd20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd3e:	4b31      	ldr	r3, [pc, #196]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	061b      	lsls	r3, r3, #24
 800cd4c:	492d      	ldr	r1, [pc, #180]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	604b      	str	r3, [r1, #4]
 800cd52:	e01a      	b.n	800cd8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd54:	4b2b      	ldr	r3, [pc, #172]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a2a      	ldr	r2, [pc, #168]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd60:	f7fd fbb4 	bl	800a4cc <HAL_GetTick>
 800cd64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd66:	e008      	b.n	800cd7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd68:	f7fd fbb0 	bl	800a4cc <HAL_GetTick>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e20e      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd7a:	4b22      	ldr	r3, [pc, #136]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1f0      	bne.n	800cd68 <HAL_RCC_OscConfig+0x1e0>
 800cd86:	e000      	b.n	800cd8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0308 	and.w	r3, r3, #8
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d041      	beq.n	800ce1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d01c      	beq.n	800cdd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd9e:	4b19      	ldr	r3, [pc, #100]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cda0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cda4:	4a17      	ldr	r2, [pc, #92]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cda6:	f043 0301 	orr.w	r3, r3, #1
 800cdaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdae:	f7fd fb8d 	bl	800a4cc <HAL_GetTick>
 800cdb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdb4:	e008      	b.n	800cdc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdb6:	f7fd fb89 	bl	800a4cc <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d901      	bls.n	800cdc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e1e7      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cdca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0ef      	beq.n	800cdb6 <HAL_RCC_OscConfig+0x22e>
 800cdd6:	e020      	b.n	800ce1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cdda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdde:	4a09      	ldr	r2, [pc, #36]	@ (800ce04 <HAL_RCC_OscConfig+0x27c>)
 800cde0:	f023 0301 	bic.w	r3, r3, #1
 800cde4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cde8:	f7fd fb70 	bl	800a4cc <HAL_GetTick>
 800cdec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cdee:	e00d      	b.n	800ce0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdf0:	f7fd fb6c 	bl	800a4cc <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d906      	bls.n	800ce0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e1ca      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
 800ce02:	bf00      	nop
 800ce04:	40021000 	.word	0x40021000
 800ce08:	2000033c 	.word	0x2000033c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce0c:	4b8c      	ldr	r3, [pc, #560]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ce0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1ea      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 0304 	and.w	r3, r3, #4
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 80a6 	beq.w	800cf74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ce2c:	4b84      	ldr	r3, [pc, #528]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ce2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <HAL_RCC_OscConfig+0x2b4>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e000      	b.n	800ce3e <HAL_RCC_OscConfig+0x2b6>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00d      	beq.n	800ce5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce42:	4b7f      	ldr	r3, [pc, #508]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ce44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce46:	4a7e      	ldr	r2, [pc, #504]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ce48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce4c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce4e:	4b7c      	ldr	r3, [pc, #496]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ce50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce5e:	4b79      	ldr	r3, [pc, #484]	@ (800d044 <HAL_RCC_OscConfig+0x4bc>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d118      	bne.n	800ce9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce6a:	4b76      	ldr	r3, [pc, #472]	@ (800d044 <HAL_RCC_OscConfig+0x4bc>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a75      	ldr	r2, [pc, #468]	@ (800d044 <HAL_RCC_OscConfig+0x4bc>)
 800ce70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce76:	f7fd fb29 	bl	800a4cc <HAL_GetTick>
 800ce7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce7c:	e008      	b.n	800ce90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce7e:	f7fd fb25 	bl	800a4cc <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e183      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce90:	4b6c      	ldr	r3, [pc, #432]	@ (800d044 <HAL_RCC_OscConfig+0x4bc>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f0      	beq.n	800ce7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d108      	bne.n	800ceb6 <HAL_RCC_OscConfig+0x32e>
 800cea4:	4b66      	ldr	r3, [pc, #408]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceaa:	4a65      	ldr	r2, [pc, #404]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ceac:	f043 0301 	orr.w	r3, r3, #1
 800ceb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ceb4:	e024      	b.n	800cf00 <HAL_RCC_OscConfig+0x378>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	2b05      	cmp	r3, #5
 800cebc:	d110      	bne.n	800cee0 <HAL_RCC_OscConfig+0x358>
 800cebe:	4b60      	ldr	r3, [pc, #384]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec4:	4a5e      	ldr	r2, [pc, #376]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cec6:	f043 0304 	orr.w	r3, r3, #4
 800ceca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cece:	4b5c      	ldr	r3, [pc, #368]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ced0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ced4:	4a5a      	ldr	r2, [pc, #360]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800ced6:	f043 0301 	orr.w	r3, r3, #1
 800ceda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cede:	e00f      	b.n	800cf00 <HAL_RCC_OscConfig+0x378>
 800cee0:	4b57      	ldr	r3, [pc, #348]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cee6:	4a56      	ldr	r2, [pc, #344]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cef0:	4b53      	ldr	r3, [pc, #332]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cef6:	4a52      	ldr	r2, [pc, #328]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cef8:	f023 0304 	bic.w	r3, r3, #4
 800cefc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d016      	beq.n	800cf36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf08:	f7fd fae0 	bl	800a4cc <HAL_GetTick>
 800cf0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf0e:	e00a      	b.n	800cf26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf10:	f7fd fadc 	bl	800a4cc <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d901      	bls.n	800cf26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e138      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf26:	4b46      	ldr	r3, [pc, #280]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf2c:	f003 0302 	and.w	r3, r3, #2
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d0ed      	beq.n	800cf10 <HAL_RCC_OscConfig+0x388>
 800cf34:	e015      	b.n	800cf62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf36:	f7fd fac9 	bl	800a4cc <HAL_GetTick>
 800cf3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf3c:	e00a      	b.n	800cf54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf3e:	f7fd fac5 	bl	800a4cc <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d901      	bls.n	800cf54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e121      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf54:	4b3a      	ldr	r3, [pc, #232]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf5a:	f003 0302 	and.w	r3, r3, #2
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1ed      	bne.n	800cf3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cf62:	7ffb      	ldrb	r3, [r7, #31]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d105      	bne.n	800cf74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf68:	4b35      	ldr	r3, [pc, #212]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf6c:	4a34      	ldr	r2, [pc, #208]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d03c      	beq.n	800cffa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01c      	beq.n	800cfc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cf88:	4b2d      	ldr	r3, [pc, #180]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf8e:	4a2c      	ldr	r2, [pc, #176]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cf90:	f043 0301 	orr.w	r3, r3, #1
 800cf94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf98:	f7fd fa98 	bl	800a4cc <HAL_GetTick>
 800cf9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cf9e:	e008      	b.n	800cfb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cfa0:	f7fd fa94 	bl	800a4cc <HAL_GetTick>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d901      	bls.n	800cfb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e0f2      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cfb2:	4b23      	ldr	r3, [pc, #140]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cfb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0ef      	beq.n	800cfa0 <HAL_RCC_OscConfig+0x418>
 800cfc0:	e01b      	b.n	800cffa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cfc2:	4b1f      	ldr	r3, [pc, #124]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cfc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cfc8:	4a1d      	ldr	r2, [pc, #116]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cfca:	f023 0301 	bic.w	r3, r3, #1
 800cfce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfd2:	f7fd fa7b 	bl	800a4cc <HAL_GetTick>
 800cfd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cfd8:	e008      	b.n	800cfec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cfda:	f7fd fa77 	bl	800a4cc <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d901      	bls.n	800cfec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e0d5      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cfec:	4b14      	ldr	r3, [pc, #80]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800cfee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cff2:	f003 0302 	and.w	r3, r3, #2
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1ef      	bne.n	800cfda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	69db      	ldr	r3, [r3, #28]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 80c9 	beq.w	800d196 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d004:	4b0e      	ldr	r3, [pc, #56]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f003 030c 	and.w	r3, r3, #12
 800d00c:	2b0c      	cmp	r3, #12
 800d00e:	f000 8083 	beq.w	800d118 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	69db      	ldr	r3, [r3, #28]
 800d016:	2b02      	cmp	r3, #2
 800d018:	d15e      	bne.n	800d0d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d01a:	4b09      	ldr	r3, [pc, #36]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a08      	ldr	r2, [pc, #32]	@ (800d040 <HAL_RCC_OscConfig+0x4b8>)
 800d020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d026:	f7fd fa51 	bl	800a4cc <HAL_GetTick>
 800d02a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d02c:	e00c      	b.n	800d048 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d02e:	f7fd fa4d 	bl	800a4cc <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d905      	bls.n	800d048 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e0ab      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
 800d040:	40021000 	.word	0x40021000
 800d044:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d048:	4b55      	ldr	r3, [pc, #340]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1ec      	bne.n	800d02e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d054:	4b52      	ldr	r3, [pc, #328]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	4b52      	ldr	r3, [pc, #328]	@ (800d1a4 <HAL_RCC_OscConfig+0x61c>)
 800d05a:	4013      	ands	r3, r2
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6a11      	ldr	r1, [r2, #32]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d064:	3a01      	subs	r2, #1
 800d066:	0112      	lsls	r2, r2, #4
 800d068:	4311      	orrs	r1, r2
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d06e:	0212      	lsls	r2, r2, #8
 800d070:	4311      	orrs	r1, r2
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d076:	0852      	lsrs	r2, r2, #1
 800d078:	3a01      	subs	r2, #1
 800d07a:	0552      	lsls	r2, r2, #21
 800d07c:	4311      	orrs	r1, r2
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d082:	0852      	lsrs	r2, r2, #1
 800d084:	3a01      	subs	r2, #1
 800d086:	0652      	lsls	r2, r2, #25
 800d088:	4311      	orrs	r1, r2
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d08e:	06d2      	lsls	r2, r2, #27
 800d090:	430a      	orrs	r2, r1
 800d092:	4943      	ldr	r1, [pc, #268]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d094:	4313      	orrs	r3, r2
 800d096:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d098:	4b41      	ldr	r3, [pc, #260]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a40      	ldr	r2, [pc, #256]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d09e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d0a4:	4b3e      	ldr	r3, [pc, #248]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	4a3d      	ldr	r2, [pc, #244]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d0aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0b0:	f7fd fa0c 	bl	800a4cc <HAL_GetTick>
 800d0b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0b6:	e008      	b.n	800d0ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0b8:	f7fd fa08 	bl	800a4cc <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d901      	bls.n	800d0ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e066      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0ca:	4b35      	ldr	r3, [pc, #212]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0f0      	beq.n	800d0b8 <HAL_RCC_OscConfig+0x530>
 800d0d6:	e05e      	b.n	800d196 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0d8:	4b31      	ldr	r3, [pc, #196]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a30      	ldr	r2, [pc, #192]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d0de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d0e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0e4:	f7fd f9f2 	bl	800a4cc <HAL_GetTick>
 800d0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0ea:	e008      	b.n	800d0fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0ec:	f7fd f9ee 	bl	800a4cc <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e04c      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0fe:	4b28      	ldr	r3, [pc, #160]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1f0      	bne.n	800d0ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d10a:	4b25      	ldr	r3, [pc, #148]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	4924      	ldr	r1, [pc, #144]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d110:	4b25      	ldr	r3, [pc, #148]	@ (800d1a8 <HAL_RCC_OscConfig+0x620>)
 800d112:	4013      	ands	r3, r2
 800d114:	60cb      	str	r3, [r1, #12]
 800d116:	e03e      	b.n	800d196 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	69db      	ldr	r3, [r3, #28]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d101      	bne.n	800d124 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e039      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d124:	4b1e      	ldr	r3, [pc, #120]	@ (800d1a0 <HAL_RCC_OscConfig+0x618>)
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f003 0203 	and.w	r2, r3, #3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	429a      	cmp	r2, r3
 800d136:	d12c      	bne.n	800d192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d142:	3b01      	subs	r3, #1
 800d144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d146:	429a      	cmp	r2, r3
 800d148:	d123      	bne.n	800d192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d154:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d156:	429a      	cmp	r2, r3
 800d158:	d11b      	bne.n	800d192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d164:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d166:	429a      	cmp	r2, r3
 800d168:	d113      	bne.n	800d192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d174:	085b      	lsrs	r3, r3, #1
 800d176:	3b01      	subs	r3, #1
 800d178:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d109      	bne.n	800d192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d188:	085b      	lsrs	r3, r3, #1
 800d18a:	3b01      	subs	r3, #1
 800d18c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d18e:	429a      	cmp	r2, r3
 800d190:	d001      	beq.n	800d196 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e000      	b.n	800d198 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3720      	adds	r7, #32
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	40021000 	.word	0x40021000
 800d1a4:	019f800c 	.word	0x019f800c
 800d1a8:	feeefffc 	.word	0xfeeefffc

0800d1ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e11e      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d1c4:	4b91      	ldr	r3, [pc, #580]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 030f 	and.w	r3, r3, #15
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d910      	bls.n	800d1f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1d2:	4b8e      	ldr	r3, [pc, #568]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f023 020f 	bic.w	r2, r3, #15
 800d1da:	498c      	ldr	r1, [pc, #560]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1e2:	4b8a      	ldr	r3, [pc, #552]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d001      	beq.n	800d1f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e106      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d073      	beq.n	800d2e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	2b03      	cmp	r3, #3
 800d206:	d129      	bne.n	800d25c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d208:	4b81      	ldr	r3, [pc, #516]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	e0f4      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d218:	f000 f99e 	bl	800d558 <RCC_GetSysClockFreqFromPLLSource>
 800d21c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	4a7c      	ldr	r2, [pc, #496]	@ (800d414 <HAL_RCC_ClockConfig+0x268>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d93f      	bls.n	800d2a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d226:	4b7a      	ldr	r3, [pc, #488]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d009      	beq.n	800d246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d033      	beq.n	800d2a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d242:	2b00      	cmp	r3, #0
 800d244:	d12f      	bne.n	800d2a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d246:	4b72      	ldr	r3, [pc, #456]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d24e:	4a70      	ldr	r2, [pc, #448]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d256:	2380      	movs	r3, #128	@ 0x80
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	e024      	b.n	800d2a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	2b02      	cmp	r3, #2
 800d262:	d107      	bne.n	800d274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d264:	4b6a      	ldr	r3, [pc, #424]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d109      	bne.n	800d284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e0c6      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d274:	4b66      	ldr	r3, [pc, #408]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e0be      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d284:	f000 f8ce 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 800d288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	4a61      	ldr	r2, [pc, #388]	@ (800d414 <HAL_RCC_ClockConfig+0x268>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d909      	bls.n	800d2a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d292:	4b5f      	ldr	r3, [pc, #380]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d29a:	4a5d      	ldr	r2, [pc, #372]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d29c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d2a2:	2380      	movs	r3, #128	@ 0x80
 800d2a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2a6:	4b5a      	ldr	r3, [pc, #360]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	f023 0203 	bic.w	r2, r3, #3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	4957      	ldr	r1, [pc, #348]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2b8:	f7fd f908 	bl	800a4cc <HAL_GetTick>
 800d2bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2be:	e00a      	b.n	800d2d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2c0:	f7fd f904 	bl	800a4cc <HAL_GetTick>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d901      	bls.n	800d2d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	e095      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2d6:	4b4e      	ldr	r3, [pc, #312]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	f003 020c 	and.w	r2, r3, #12
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d1eb      	bne.n	800d2c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d023      	beq.n	800d33c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 0304 	and.w	r3, r3, #4
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d005      	beq.n	800d30c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d300:	4b43      	ldr	r3, [pc, #268]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	4a42      	ldr	r2, [pc, #264]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d30a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 0308 	and.w	r3, r3, #8
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d318:	4b3d      	ldr	r3, [pc, #244]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d320:	4a3b      	ldr	r2, [pc, #236]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d328:	4b39      	ldr	r3, [pc, #228]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	4936      	ldr	r1, [pc, #216]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d336:	4313      	orrs	r3, r2
 800d338:	608b      	str	r3, [r1, #8]
 800d33a:	e008      	b.n	800d34e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2b80      	cmp	r3, #128	@ 0x80
 800d340:	d105      	bne.n	800d34e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d342:	4b33      	ldr	r3, [pc, #204]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	4a32      	ldr	r2, [pc, #200]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d34c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d34e:	4b2f      	ldr	r3, [pc, #188]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d21d      	bcs.n	800d398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d35c:	4b2b      	ldr	r3, [pc, #172]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f023 020f 	bic.w	r2, r3, #15
 800d364:	4929      	ldr	r1, [pc, #164]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	4313      	orrs	r3, r2
 800d36a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d36c:	f7fd f8ae 	bl	800a4cc <HAL_GetTick>
 800d370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d372:	e00a      	b.n	800d38a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d374:	f7fd f8aa 	bl	800a4cc <HAL_GetTick>
 800d378:	4602      	mov	r2, r0
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d382:	4293      	cmp	r3, r2
 800d384:	d901      	bls.n	800d38a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e03b      	b.n	800d402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d38a:	4b20      	ldr	r3, [pc, #128]	@ (800d40c <HAL_RCC_ClockConfig+0x260>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 030f 	and.w	r3, r3, #15
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d1ed      	bne.n	800d374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d008      	beq.n	800d3b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	4917      	ldr	r1, [pc, #92]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f003 0308 	and.w	r3, r3, #8
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d009      	beq.n	800d3d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d3c2:	4b13      	ldr	r3, [pc, #76]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	490f      	ldr	r1, [pc, #60]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d3d6:	f000 f825 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d410 <HAL_RCC_ClockConfig+0x264>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	091b      	lsrs	r3, r3, #4
 800d3e2:	f003 030f 	and.w	r3, r3, #15
 800d3e6:	490c      	ldr	r1, [pc, #48]	@ (800d418 <HAL_RCC_ClockConfig+0x26c>)
 800d3e8:	5ccb      	ldrb	r3, [r1, r3]
 800d3ea:	f003 031f 	and.w	r3, r3, #31
 800d3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f2:	4a0a      	ldr	r2, [pc, #40]	@ (800d41c <HAL_RCC_ClockConfig+0x270>)
 800d3f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d420 <HAL_RCC_ClockConfig+0x274>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd f81a 	bl	800a434 <HAL_InitTick>
 800d400:	4603      	mov	r3, r0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	40022000 	.word	0x40022000
 800d410:	40021000 	.word	0x40021000
 800d414:	04c4b400 	.word	0x04c4b400
 800d418:	08014508 	.word	0x08014508
 800d41c:	20000338 	.word	0x20000338
 800d420:	2000033c 	.word	0x2000033c

0800d424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d42a:	4b2c      	ldr	r3, [pc, #176]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f003 030c 	and.w	r3, r3, #12
 800d432:	2b04      	cmp	r3, #4
 800d434:	d102      	bne.n	800d43c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d436:	4b2a      	ldr	r3, [pc, #168]	@ (800d4e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d438:	613b      	str	r3, [r7, #16]
 800d43a:	e047      	b.n	800d4cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d43c:	4b27      	ldr	r3, [pc, #156]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	f003 030c 	and.w	r3, r3, #12
 800d444:	2b08      	cmp	r3, #8
 800d446:	d102      	bne.n	800d44e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d448:	4b26      	ldr	r3, [pc, #152]	@ (800d4e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d44a:	613b      	str	r3, [r7, #16]
 800d44c:	e03e      	b.n	800d4cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d44e:	4b23      	ldr	r3, [pc, #140]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f003 030c 	and.w	r3, r3, #12
 800d456:	2b0c      	cmp	r3, #12
 800d458:	d136      	bne.n	800d4c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d45a:	4b20      	ldr	r3, [pc, #128]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d464:	4b1d      	ldr	r3, [pc, #116]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	091b      	lsrs	r3, r3, #4
 800d46a:	f003 030f 	and.w	r3, r3, #15
 800d46e:	3301      	adds	r3, #1
 800d470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b03      	cmp	r3, #3
 800d476:	d10c      	bne.n	800d492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d478:	4a1a      	ldr	r2, [pc, #104]	@ (800d4e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d480:	4a16      	ldr	r2, [pc, #88]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d482:	68d2      	ldr	r2, [r2, #12]
 800d484:	0a12      	lsrs	r2, r2, #8
 800d486:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d48a:	fb02 f303 	mul.w	r3, r2, r3
 800d48e:	617b      	str	r3, [r7, #20]
      break;
 800d490:	e00c      	b.n	800d4ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d492:	4a13      	ldr	r2, [pc, #76]	@ (800d4e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49a:	4a10      	ldr	r2, [pc, #64]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d49c:	68d2      	ldr	r2, [r2, #12]
 800d49e:	0a12      	lsrs	r2, r2, #8
 800d4a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4a4:	fb02 f303 	mul.w	r3, r2, r3
 800d4a8:	617b      	str	r3, [r7, #20]
      break;
 800d4aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d4dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	0e5b      	lsrs	r3, r3, #25
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c4:	613b      	str	r3, [r7, #16]
 800d4c6:	e001      	b.n	800d4cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d4cc:	693b      	ldr	r3, [r7, #16]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	40021000 	.word	0x40021000
 800d4e0:	00f42400 	.word	0x00f42400
 800d4e4:	016e3600 	.word	0x016e3600

0800d4e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d4ec:	4b03      	ldr	r3, [pc, #12]	@ (800d4fc <HAL_RCC_GetHCLKFreq+0x14>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20000338 	.word	0x20000338

0800d500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d504:	f7ff fff0 	bl	800d4e8 <HAL_RCC_GetHCLKFreq>
 800d508:	4602      	mov	r2, r0
 800d50a:	4b06      	ldr	r3, [pc, #24]	@ (800d524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	0a1b      	lsrs	r3, r3, #8
 800d510:	f003 0307 	and.w	r3, r3, #7
 800d514:	4904      	ldr	r1, [pc, #16]	@ (800d528 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d516:	5ccb      	ldrb	r3, [r1, r3]
 800d518:	f003 031f 	and.w	r3, r3, #31
 800d51c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d520:	4618      	mov	r0, r3
 800d522:	bd80      	pop	{r7, pc}
 800d524:	40021000 	.word	0x40021000
 800d528:	08014518 	.word	0x08014518

0800d52c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d530:	f7ff ffda 	bl	800d4e8 <HAL_RCC_GetHCLKFreq>
 800d534:	4602      	mov	r2, r0
 800d536:	4b06      	ldr	r3, [pc, #24]	@ (800d550 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	0adb      	lsrs	r3, r3, #11
 800d53c:	f003 0307 	and.w	r3, r3, #7
 800d540:	4904      	ldr	r1, [pc, #16]	@ (800d554 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d542:	5ccb      	ldrb	r3, [r1, r3]
 800d544:	f003 031f 	and.w	r3, r3, #31
 800d548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	40021000 	.word	0x40021000
 800d554:	08014518 	.word	0x08014518

0800d558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d55e:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	f003 0303 	and.w	r3, r3, #3
 800d566:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d568:	4b1b      	ldr	r3, [pc, #108]	@ (800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	091b      	lsrs	r3, r3, #4
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	3301      	adds	r3, #1
 800d574:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d10c      	bne.n	800d596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d57c:	4a17      	ldr	r2, [pc, #92]	@ (800d5dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	fbb2 f3f3 	udiv	r3, r2, r3
 800d584:	4a14      	ldr	r2, [pc, #80]	@ (800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d586:	68d2      	ldr	r2, [r2, #12]
 800d588:	0a12      	lsrs	r2, r2, #8
 800d58a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d58e:	fb02 f303 	mul.w	r3, r2, r3
 800d592:	617b      	str	r3, [r7, #20]
    break;
 800d594:	e00c      	b.n	800d5b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d596:	4a12      	ldr	r2, [pc, #72]	@ (800d5e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59e:	4a0e      	ldr	r2, [pc, #56]	@ (800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5a0:	68d2      	ldr	r2, [r2, #12]
 800d5a2:	0a12      	lsrs	r2, r2, #8
 800d5a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d5a8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ac:	617b      	str	r3, [r7, #20]
    break;
 800d5ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d5b0:	4b09      	ldr	r3, [pc, #36]	@ (800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	0e5b      	lsrs	r3, r3, #25
 800d5b6:	f003 0303 	and.w	r3, r3, #3
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d5ca:	687b      	ldr	r3, [r7, #4]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	371c      	adds	r7, #28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	40021000 	.word	0x40021000
 800d5dc:	016e3600 	.word	0x016e3600
 800d5e0:	00f42400 	.word	0x00f42400

0800d5e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 8098 	beq.w	800d732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d602:	2300      	movs	r3, #0
 800d604:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d606:	4b43      	ldr	r3, [pc, #268]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d60a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d612:	4b40      	ldr	r3, [pc, #256]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d616:	4a3f      	ldr	r2, [pc, #252]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d61c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d61e:	4b3d      	ldr	r3, [pc, #244]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d626:	60bb      	str	r3, [r7, #8]
 800d628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d62a:	2301      	movs	r3, #1
 800d62c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d62e:	4b3a      	ldr	r3, [pc, #232]	@ (800d718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a39      	ldr	r2, [pc, #228]	@ (800d718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d63a:	f7fc ff47 	bl	800a4cc <HAL_GetTick>
 800d63e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d640:	e009      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d642:	f7fc ff43 	bl	800a4cc <HAL_GetTick>
 800d646:	4602      	mov	r2, r0
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d902      	bls.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	74fb      	strb	r3, [r7, #19]
        break;
 800d654:	e005      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d656:	4b30      	ldr	r3, [pc, #192]	@ (800d718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0ef      	beq.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d662:	7cfb      	ldrb	r3, [r7, #19]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d159      	bne.n	800d71c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d668:	4b2a      	ldr	r3, [pc, #168]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d66e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d672:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01e      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	429a      	cmp	r2, r3
 800d682:	d019      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d684:	4b23      	ldr	r3, [pc, #140]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d68a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d68e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d690:	4b20      	ldr	r3, [pc, #128]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d696:	4a1f      	ldr	r2, [pc, #124]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d69c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d6a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6a6:	4a1b      	ldr	r2, [pc, #108]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d6ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d6b0:	4a18      	ldr	r2, [pc, #96]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d016      	beq.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6c2:	f7fc ff03 	bl	800a4cc <HAL_GetTick>
 800d6c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6c8:	e00b      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6ca:	f7fc feff 	bl	800a4cc <HAL_GetTick>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d902      	bls.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	74fb      	strb	r3, [r7, #19]
            break;
 800d6e0:	e006      	b.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6e8:	f003 0302 	and.w	r3, r3, #2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0ec      	beq.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d6f0:	7cfb      	ldrb	r3, [r7, #19]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10b      	bne.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d6f6:	4b07      	ldr	r3, [pc, #28]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d704:	4903      	ldr	r1, [pc, #12]	@ (800d714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d706:	4313      	orrs	r3, r2
 800d708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d70c:	e008      	b.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d70e:	7cfb      	ldrb	r3, [r7, #19]
 800d710:	74bb      	strb	r3, [r7, #18]
 800d712:	e005      	b.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d714:	40021000 	.word	0x40021000
 800d718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d71c:	7cfb      	ldrb	r3, [r7, #19]
 800d71e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d720:	7c7b      	ldrb	r3, [r7, #17]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d105      	bne.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d726:	4ba7      	ldr	r3, [pc, #668]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d72a:	4aa6      	ldr	r2, [pc, #664]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d72c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d730:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00a      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d73e:	4ba1      	ldr	r3, [pc, #644]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d744:	f023 0203 	bic.w	r2, r3, #3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	499d      	ldr	r1, [pc, #628]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 0302 	and.w	r3, r3, #2
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00a      	beq.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d760:	4b98      	ldr	r3, [pc, #608]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d766:	f023 020c 	bic.w	r2, r3, #12
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	4995      	ldr	r1, [pc, #596]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d770:	4313      	orrs	r3, r2
 800d772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00a      	beq.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d782:	4b90      	ldr	r3, [pc, #576]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d788:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	498c      	ldr	r1, [pc, #560]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d792:	4313      	orrs	r3, r2
 800d794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 0308 	and.w	r3, r3, #8
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00a      	beq.n	800d7ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d7a4:	4b87      	ldr	r3, [pc, #540]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	4984      	ldr	r1, [pc, #528]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f003 0310 	and.w	r3, r3, #16
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00a      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d7c6:	4b7f      	ldr	r3, [pc, #508]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	497b      	ldr	r1, [pc, #492]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f003 0320 	and.w	r3, r3, #32
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00a      	beq.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d7e8:	4b76      	ldr	r3, [pc, #472]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	4973      	ldr	r1, [pc, #460]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d80a:	4b6e      	ldr	r3, [pc, #440]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d810:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	69db      	ldr	r3, [r3, #28]
 800d818:	496a      	ldr	r1, [pc, #424]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00a      	beq.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d82c:	4b65      	ldr	r3, [pc, #404]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d832:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a1b      	ldr	r3, [r3, #32]
 800d83a:	4962      	ldr	r1, [pc, #392]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d83c:	4313      	orrs	r3, r2
 800d83e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00a      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d84e:	4b5d      	ldr	r3, [pc, #372]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85c:	4959      	ldr	r1, [pc, #356]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d85e:	4313      	orrs	r3, r2
 800d860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00a      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d870:	4b54      	ldr	r3, [pc, #336]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d876:	f023 0203 	bic.w	r2, r3, #3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d87e:	4951      	ldr	r1, [pc, #324]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d880:	4313      	orrs	r3, r2
 800d882:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00a      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d892:	4b4c      	ldr	r3, [pc, #304]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a0:	4948      	ldr	r1, [pc, #288]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d015      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8b4:	4b43      	ldr	r3, [pc, #268]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8c2:	4940      	ldr	r1, [pc, #256]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8d2:	d105      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8d4:	4b3b      	ldr	r3, [pc, #236]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	4a3a      	ldr	r2, [pc, #232]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d015      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d8ec:	4b35      	ldr	r3, [pc, #212]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8fa:	4932      	ldr	r1, [pc, #200]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d90a:	d105      	bne.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d90c:	4b2d      	ldr	r3, [pc, #180]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	4a2c      	ldr	r2, [pc, #176]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d916:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d015      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d924:	4b27      	ldr	r3, [pc, #156]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d92a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d932:	4924      	ldr	r1, [pc, #144]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d934:	4313      	orrs	r3, r2
 800d936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d93e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d942:	d105      	bne.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d944:	4b1f      	ldr	r3, [pc, #124]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	4a1e      	ldr	r2, [pc, #120]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d94a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d94e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d015      	beq.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d95c:	4b19      	ldr	r3, [pc, #100]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d96a:	4916      	ldr	r1, [pc, #88]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d97a:	d105      	bne.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d97c:	4b11      	ldr	r3, [pc, #68]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	4a10      	ldr	r2, [pc, #64]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d990:	2b00      	cmp	r3, #0
 800d992:	d019      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d994:	4b0b      	ldr	r3, [pc, #44]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d99a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a2:	4908      	ldr	r1, [pc, #32]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9b2:	d109      	bne.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9b4:	4b03      	ldr	r3, [pc, #12]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	4a02      	ldr	r2, [pc, #8]	@ (800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9be:	60d3      	str	r3, [r2, #12]
 800d9c0:	e002      	b.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d9c2:	bf00      	nop
 800d9c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d015      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d9d4:	4b29      	ldr	r3, [pc, #164]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9e2:	4926      	ldr	r1, [pc, #152]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9f2:	d105      	bne.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d9f4:	4b21      	ldr	r3, [pc, #132]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	4a20      	ldr	r2, [pc, #128]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d015      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800da0c:	4b1b      	ldr	r3, [pc, #108]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da1a:	4918      	ldr	r1, [pc, #96]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da1c:	4313      	orrs	r3, r2
 800da1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da2a:	d105      	bne.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800da2c:	4b13      	ldr	r3, [pc, #76]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	4a12      	ldr	r2, [pc, #72]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d015      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800da44:	4b0d      	ldr	r3, [pc, #52]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da52:	490a      	ldr	r1, [pc, #40]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da54:	4313      	orrs	r3, r2
 800da56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da62:	d105      	bne.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da64:	4b05      	ldr	r3, [pc, #20]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	4a04      	ldr	r2, [pc, #16]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800da70:	7cbb      	ldrb	r3, [r7, #18]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	40021000 	.word	0x40021000

0800da80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	e054      	b.n	800db3c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d111      	bne.n	800dac2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f001 fee2 	bl	800f870 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d102      	bne.n	800daba <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a23      	ldr	r2, [pc, #140]	@ (800db44 <HAL_TIM_Base_Init+0xc4>)
 800dab8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2202      	movs	r2, #2
 800dac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3304      	adds	r3, #4
 800dad2:	4619      	mov	r1, r3
 800dad4:	4610      	mov	r0, r2
 800dad6:	f001 fa2b 	bl	800ef30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	08009cf5 	.word	0x08009cf5

0800db48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d001      	beq.n	800db60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e04c      	b.n	800dbfa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a26      	ldr	r2, [pc, #152]	@ (800dc08 <HAL_TIM_Base_Start+0xc0>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d022      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db7a:	d01d      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a22      	ldr	r2, [pc, #136]	@ (800dc0c <HAL_TIM_Base_Start+0xc4>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d018      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a21      	ldr	r2, [pc, #132]	@ (800dc10 <HAL_TIM_Base_Start+0xc8>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d013      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a1f      	ldr	r2, [pc, #124]	@ (800dc14 <HAL_TIM_Base_Start+0xcc>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d00e      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a1e      	ldr	r2, [pc, #120]	@ (800dc18 <HAL_TIM_Base_Start+0xd0>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d009      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1c      	ldr	r2, [pc, #112]	@ (800dc1c <HAL_TIM_Base_Start+0xd4>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d004      	beq.n	800dbb8 <HAL_TIM_Base_Start+0x70>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a1b      	ldr	r2, [pc, #108]	@ (800dc20 <HAL_TIM_Base_Start+0xd8>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d115      	bne.n	800dbe4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	4b19      	ldr	r3, [pc, #100]	@ (800dc24 <HAL_TIM_Base_Start+0xdc>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b06      	cmp	r3, #6
 800dbc8:	d015      	beq.n	800dbf6 <HAL_TIM_Base_Start+0xae>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbd0:	d011      	beq.n	800dbf6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f042 0201 	orr.w	r2, r2, #1
 800dbe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbe2:	e008      	b.n	800dbf6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f042 0201 	orr.w	r2, r2, #1
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	e000      	b.n	800dbf8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	40012c00 	.word	0x40012c00
 800dc0c:	40000400 	.word	0x40000400
 800dc10:	40000800 	.word	0x40000800
 800dc14:	40000c00 	.word	0x40000c00
 800dc18:	40013400 	.word	0x40013400
 800dc1c:	40014000 	.word	0x40014000
 800dc20:	40015000 	.word	0x40015000
 800dc24:	00010007 	.word	0x00010007

0800dc28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d001      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e054      	b.n	800dcea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f042 0201 	orr.w	r2, r2, #1
 800dc56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a26      	ldr	r2, [pc, #152]	@ (800dcf8 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d022      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc6a:	d01d      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a22      	ldr	r2, [pc, #136]	@ (800dcfc <HAL_TIM_Base_Start_IT+0xd4>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d018      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a21      	ldr	r2, [pc, #132]	@ (800dd00 <HAL_TIM_Base_Start_IT+0xd8>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d013      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a1f      	ldr	r2, [pc, #124]	@ (800dd04 <HAL_TIM_Base_Start_IT+0xdc>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d00e      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a1e      	ldr	r2, [pc, #120]	@ (800dd08 <HAL_TIM_Base_Start_IT+0xe0>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d009      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a1c      	ldr	r2, [pc, #112]	@ (800dd0c <HAL_TIM_Base_Start_IT+0xe4>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d004      	beq.n	800dca8 <HAL_TIM_Base_Start_IT+0x80>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a1b      	ldr	r2, [pc, #108]	@ (800dd10 <HAL_TIM_Base_Start_IT+0xe8>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d115      	bne.n	800dcd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	689a      	ldr	r2, [r3, #8]
 800dcae:	4b19      	ldr	r3, [pc, #100]	@ (800dd14 <HAL_TIM_Base_Start_IT+0xec>)
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b06      	cmp	r3, #6
 800dcb8:	d015      	beq.n	800dce6 <HAL_TIM_Base_Start_IT+0xbe>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcc0:	d011      	beq.n	800dce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0201 	orr.w	r2, r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcd2:	e008      	b.n	800dce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f042 0201 	orr.w	r2, r2, #1
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	e000      	b.n	800dce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	40012c00 	.word	0x40012c00
 800dcfc:	40000400 	.word	0x40000400
 800dd00:	40000800 	.word	0x40000800
 800dd04:	40000c00 	.word	0x40000c00
 800dd08:	40013400 	.word	0x40013400
 800dd0c:	40014000 	.word	0x40014000
 800dd10:	40015000 	.word	0x40015000
 800dd14:	00010007 	.word	0x00010007

0800dd18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e054      	b.n	800ddd4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d111      	bne.n	800dd5a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f001 fd96 	bl	800f870 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a23      	ldr	r2, [pc, #140]	@ (800dddc <HAL_TIM_PWM_Init+0xc4>)
 800dd50:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f001 f8df 	bl	800ef30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	08009ca9 	.word	0x08009ca9

0800dde0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d109      	bne.n	800de04 <HAL_TIM_PWM_Start+0x24>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	bf14      	ite	ne
 800ddfc:	2301      	movne	r3, #1
 800ddfe:	2300      	moveq	r3, #0
 800de00:	b2db      	uxtb	r3, r3
 800de02:	e03c      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b04      	cmp	r3, #4
 800de08:	d109      	bne.n	800de1e <HAL_TIM_PWM_Start+0x3e>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	bf14      	ite	ne
 800de16:	2301      	movne	r3, #1
 800de18:	2300      	moveq	r3, #0
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	e02f      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	2b08      	cmp	r3, #8
 800de22:	d109      	bne.n	800de38 <HAL_TIM_PWM_Start+0x58>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	bf14      	ite	ne
 800de30:	2301      	movne	r3, #1
 800de32:	2300      	moveq	r3, #0
 800de34:	b2db      	uxtb	r3, r3
 800de36:	e022      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	2b0c      	cmp	r3, #12
 800de3c:	d109      	bne.n	800de52 <HAL_TIM_PWM_Start+0x72>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b01      	cmp	r3, #1
 800de48:	bf14      	ite	ne
 800de4a:	2301      	movne	r3, #1
 800de4c:	2300      	moveq	r3, #0
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	e015      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2b10      	cmp	r3, #16
 800de56:	d109      	bne.n	800de6c <HAL_TIM_PWM_Start+0x8c>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b01      	cmp	r3, #1
 800de62:	bf14      	ite	ne
 800de64:	2301      	movne	r3, #1
 800de66:	2300      	moveq	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	e008      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b01      	cmp	r3, #1
 800de76:	bf14      	ite	ne
 800de78:	2301      	movne	r3, #1
 800de7a:	2300      	moveq	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e0a6      	b.n	800dfd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d104      	bne.n	800de96 <HAL_TIM_PWM_Start+0xb6>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de94:	e023      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b04      	cmp	r3, #4
 800de9a:	d104      	bne.n	800dea6 <HAL_TIM_PWM_Start+0xc6>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2202      	movs	r2, #2
 800dea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dea4:	e01b      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b08      	cmp	r3, #8
 800deaa:	d104      	bne.n	800deb6 <HAL_TIM_PWM_Start+0xd6>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2202      	movs	r2, #2
 800deb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800deb4:	e013      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b0c      	cmp	r3, #12
 800deba:	d104      	bne.n	800dec6 <HAL_TIM_PWM_Start+0xe6>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dec4:	e00b      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	2b10      	cmp	r3, #16
 800deca:	d104      	bne.n	800ded6 <HAL_TIM_PWM_Start+0xf6>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ded4:	e003      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2202      	movs	r2, #2
 800deda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2201      	movs	r2, #1
 800dee4:	6839      	ldr	r1, [r7, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f001 fc9c 	bl	800f824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a3a      	ldr	r2, [pc, #232]	@ (800dfdc <HAL_TIM_PWM_Start+0x1fc>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d018      	beq.n	800df28 <HAL_TIM_PWM_Start+0x148>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a39      	ldr	r2, [pc, #228]	@ (800dfe0 <HAL_TIM_PWM_Start+0x200>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d013      	beq.n	800df28 <HAL_TIM_PWM_Start+0x148>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a37      	ldr	r2, [pc, #220]	@ (800dfe4 <HAL_TIM_PWM_Start+0x204>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d00e      	beq.n	800df28 <HAL_TIM_PWM_Start+0x148>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a36      	ldr	r2, [pc, #216]	@ (800dfe8 <HAL_TIM_PWM_Start+0x208>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d009      	beq.n	800df28 <HAL_TIM_PWM_Start+0x148>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a34      	ldr	r2, [pc, #208]	@ (800dfec <HAL_TIM_PWM_Start+0x20c>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d004      	beq.n	800df28 <HAL_TIM_PWM_Start+0x148>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a33      	ldr	r2, [pc, #204]	@ (800dff0 <HAL_TIM_PWM_Start+0x210>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d101      	bne.n	800df2c <HAL_TIM_PWM_Start+0x14c>
 800df28:	2301      	movs	r3, #1
 800df2a:	e000      	b.n	800df2e <HAL_TIM_PWM_Start+0x14e>
 800df2c:	2300      	movs	r3, #0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d007      	beq.n	800df42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a25      	ldr	r2, [pc, #148]	@ (800dfdc <HAL_TIM_PWM_Start+0x1fc>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d022      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df54:	d01d      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a26      	ldr	r2, [pc, #152]	@ (800dff4 <HAL_TIM_PWM_Start+0x214>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d018      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a24      	ldr	r2, [pc, #144]	@ (800dff8 <HAL_TIM_PWM_Start+0x218>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d013      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a23      	ldr	r2, [pc, #140]	@ (800dffc <HAL_TIM_PWM_Start+0x21c>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d00e      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a19      	ldr	r2, [pc, #100]	@ (800dfe0 <HAL_TIM_PWM_Start+0x200>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d009      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a18      	ldr	r2, [pc, #96]	@ (800dfe4 <HAL_TIM_PWM_Start+0x204>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d004      	beq.n	800df92 <HAL_TIM_PWM_Start+0x1b2>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a18      	ldr	r2, [pc, #96]	@ (800dff0 <HAL_TIM_PWM_Start+0x210>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d115      	bne.n	800dfbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	4b19      	ldr	r3, [pc, #100]	@ (800e000 <HAL_TIM_PWM_Start+0x220>)
 800df9a:	4013      	ands	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2b06      	cmp	r3, #6
 800dfa2:	d015      	beq.n	800dfd0 <HAL_TIM_PWM_Start+0x1f0>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfaa:	d011      	beq.n	800dfd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f042 0201 	orr.w	r2, r2, #1
 800dfba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfbc:	e008      	b.n	800dfd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f042 0201 	orr.w	r2, r2, #1
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e000      	b.n	800dfd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	40012c00 	.word	0x40012c00
 800dfe0:	40013400 	.word	0x40013400
 800dfe4:	40014000 	.word	0x40014000
 800dfe8:	40014400 	.word	0x40014400
 800dfec:	40014800 	.word	0x40014800
 800dff0:	40015000 	.word	0x40015000
 800dff4:	40000400 	.word	0x40000400
 800dff8:	40000800 	.word	0x40000800
 800dffc:	40000c00 	.word	0x40000c00
 800e000:	00010007 	.word	0x00010007

0800e004 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e014:	2301      	movs	r3, #1
 800e016:	e04c      	b.n	800e0b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b00      	cmp	r3, #0
 800e022:	d111      	bne.n	800e048 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f001 fc1f 	bl	800f870 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d102      	bne.n	800e040 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a1f      	ldr	r2, [pc, #124]	@ (800e0bc <HAL_TIM_OnePulse_Init+0xb8>)
 800e03e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2202      	movs	r2, #2
 800e04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	3304      	adds	r3, #4
 800e058:	4619      	mov	r1, r3
 800e05a:	4610      	mov	r0, r2
 800e05c:	f000 ff68 	bl	800ef30 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f022 0208 	bic.w	r2, r2, #8
 800e06e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6819      	ldr	r1, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	0800e0c1 	.word	0x0800e0c1

0800e0c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e0e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e0ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0fc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d108      	bne.n	800e116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d105      	bne.n	800e116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e10a:	7b7b      	ldrb	r3, [r7, #13]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d102      	bne.n	800e116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e110:	7b3b      	ldrb	r3, [r7, #12]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d001      	beq.n	800e11a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e059      	b.n	800e1ce <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2202      	movs	r2, #2
 800e11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2202      	movs	r2, #2
 800e126:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2202      	movs	r2, #2
 800e12e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2202      	movs	r2, #2
 800e136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68da      	ldr	r2, [r3, #12]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f042 0202 	orr.w	r2, r2, #2
 800e148:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68da      	ldr	r2, [r3, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f042 0204 	orr.w	r2, r2, #4
 800e158:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2201      	movs	r2, #1
 800e160:	2100      	movs	r1, #0
 800e162:	4618      	mov	r0, r3
 800e164:	f001 fb5e 	bl	800f824 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2201      	movs	r2, #1
 800e16e:	2104      	movs	r1, #4
 800e170:	4618      	mov	r0, r3
 800e172:	f001 fb57 	bl	800f824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a17      	ldr	r2, [pc, #92]	@ (800e1d8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d018      	beq.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a15      	ldr	r2, [pc, #84]	@ (800e1dc <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d013      	beq.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a14      	ldr	r2, [pc, #80]	@ (800e1e0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d00e      	beq.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a12      	ldr	r2, [pc, #72]	@ (800e1e4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d009      	beq.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a11      	ldr	r2, [pc, #68]	@ (800e1e8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d004      	beq.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a0f      	ldr	r2, [pc, #60]	@ (800e1ec <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d101      	bne.n	800e1b6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e000      	b.n	800e1b8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e1ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	40012c00 	.word	0x40012c00
 800e1dc:	40013400 	.word	0x40013400
 800e1e0:	40014000 	.word	0x40014000
 800e1e4:	40014400 	.word	0x40014400
 800e1e8:	40014800 	.word	0x40014800
 800e1ec:	40015000 	.word	0x40015000

0800e1f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e0a2      	b.n	800e34a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d111      	bne.n	800e234 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f001 fb29 	bl	800f870 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a4a      	ldr	r2, [pc, #296]	@ (800e354 <HAL_TIM_Encoder_Init+0x164>)
 800e22a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2202      	movs	r2, #2
 800e238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e24a:	f023 0307 	bic.w	r3, r3, #7
 800e24e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3304      	adds	r3, #4
 800e258:	4619      	mov	r1, r3
 800e25a:	4610      	mov	r0, r2
 800e25c:	f000 fe68 	bl	800ef30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	4313      	orrs	r3, r2
 800e280:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e288:	f023 0303 	bic.w	r3, r3, #3
 800e28c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	689a      	ldr	r2, [r3, #8]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	021b      	lsls	r3, r3, #8
 800e298:	4313      	orrs	r3, r2
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e2a6:	f023 030c 	bic.w	r3, r3, #12
 800e2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e2b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	68da      	ldr	r2, [r3, #12]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	021b      	lsls	r3, r3, #8
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	011a      	lsls	r2, r3, #4
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	6a1b      	ldr	r3, [r3, #32]
 800e2d4:	031b      	lsls	r3, r3, #12
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	693a      	ldr	r2, [r7, #16]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e2e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e2ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	011b      	lsls	r3, r3, #4
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	693a      	ldr	r2, [r7, #16]
 800e30e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	08009d9d 	.word	0x08009d9d

0800e358 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e368:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e370:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e378:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e380:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d110      	bne.n	800e3aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e388:	7bfb      	ldrb	r3, [r7, #15]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d102      	bne.n	800e394 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e38e:	7b7b      	ldrb	r3, [r7, #13]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d001      	beq.n	800e398 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	e069      	b.n	800e46c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2202      	movs	r2, #2
 800e39c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3a8:	e031      	b.n	800e40e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b04      	cmp	r3, #4
 800e3ae:	d110      	bne.n	800e3d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d102      	bne.n	800e3bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e3b6:	7b3b      	ldrb	r3, [r7, #12]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d001      	beq.n	800e3c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e055      	b.n	800e46c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2202      	movs	r2, #2
 800e3c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3d0:	e01d      	b.n	800e40e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d108      	bne.n	800e3ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d105      	bne.n	800e3ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e3de:	7b7b      	ldrb	r3, [r7, #13]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d102      	bne.n	800e3ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e3e4:	7b3b      	ldrb	r3, [r7, #12]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d001      	beq.n	800e3ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e03e      	b.n	800e46c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2202      	movs	r2, #2
 800e402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2202      	movs	r2, #2
 800e40a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d003      	beq.n	800e41c <HAL_TIM_Encoder_Start+0xc4>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b04      	cmp	r3, #4
 800e418:	d008      	beq.n	800e42c <HAL_TIM_Encoder_Start+0xd4>
 800e41a:	e00f      	b.n	800e43c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2201      	movs	r2, #1
 800e422:	2100      	movs	r1, #0
 800e424:	4618      	mov	r0, r3
 800e426:	f001 f9fd 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800e42a:	e016      	b.n	800e45a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2201      	movs	r2, #1
 800e432:	2104      	movs	r1, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f001 f9f5 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800e43a:	e00e      	b.n	800e45a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2201      	movs	r2, #1
 800e442:	2100      	movs	r1, #0
 800e444:	4618      	mov	r0, r3
 800e446:	f001 f9ed 	bl	800f824 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2201      	movs	r2, #1
 800e450:	2104      	movs	r1, #4
 800e452:	4618      	mov	r0, r3
 800e454:	f001 f9e6 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800e458:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f042 0201 	orr.w	r2, r2, #1
 800e468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	f003 0302 	and.w	r3, r3, #2
 800e492:	2b00      	cmp	r3, #0
 800e494:	d026      	beq.n	800e4e4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f003 0302 	and.w	r3, r3, #2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d021      	beq.n	800e4e4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f06f 0202 	mvn.w	r2, #2
 800e4a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	f003 0303 	and.w	r3, r3, #3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d005      	beq.n	800e4ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	4798      	blx	r3
 800e4c8:	e009      	b.n	800e4de <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d026      	beq.n	800e53c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f003 0304 	and.w	r3, r3, #4
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d021      	beq.n	800e53c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f06f 0204 	mvn.w	r2, #4
 800e500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2202      	movs	r2, #2
 800e506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	699b      	ldr	r3, [r3, #24]
 800e50e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e512:	2b00      	cmp	r3, #0
 800e514:	d005      	beq.n	800e522 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	4798      	blx	r3
 800e520:	e009      	b.n	800e536 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	f003 0308 	and.w	r3, r3, #8
 800e542:	2b00      	cmp	r3, #0
 800e544:	d026      	beq.n	800e594 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f003 0308 	and.w	r3, r3, #8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d021      	beq.n	800e594 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f06f 0208 	mvn.w	r2, #8
 800e558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2204      	movs	r2, #4
 800e55e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	f003 0303 	and.w	r3, r3, #3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	4798      	blx	r3
 800e578:	e009      	b.n	800e58e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	f003 0310 	and.w	r3, r3, #16
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d026      	beq.n	800e5ec <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f003 0310 	and.w	r3, r3, #16
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d021      	beq.n	800e5ec <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f06f 0210 	mvn.w	r2, #16
 800e5b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	69db      	ldr	r3, [r3, #28]
 800e5be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d005      	beq.n	800e5d2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	4798      	blx	r3
 800e5d0:	e009      	b.n	800e5e6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d009      	beq.n	800e614 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f06f 0201 	mvn.w	r2, #1
 800e608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d104      	bne.n	800e628 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00e      	beq.n	800e646 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d009      	beq.n	800e646 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00e      	beq.n	800e66e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e656:	2b00      	cmp	r3, #0
 800e658:	d009      	beq.n	800e66e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00e      	beq.n	800e696 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d009      	beq.n	800e696 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e68a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	f003 0320 	and.w	r3, r3, #32
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00e      	beq.n	800e6be <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f003 0320 	and.w	r3, r3, #32
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d009      	beq.n	800e6be <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f06f 0220 	mvn.w	r2, #32
 800e6b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00e      	beq.n	800e6e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d009      	beq.n	800e6e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e6da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00e      	beq.n	800e70e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00e      	beq.n	800e736 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d009      	beq.n	800e736 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00e      	beq.n	800e75e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d009      	beq.n	800e75e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e75e:	bf00      	nop
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
	...

0800e768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e782:	2302      	movs	r3, #2
 800e784:	e0ff      	b.n	800e986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b14      	cmp	r3, #20
 800e792:	f200 80f0 	bhi.w	800e976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e796:	a201      	add	r2, pc, #4	@ (adr r2, 800e79c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e7f1 	.word	0x0800e7f1
 800e7a0:	0800e977 	.word	0x0800e977
 800e7a4:	0800e977 	.word	0x0800e977
 800e7a8:	0800e977 	.word	0x0800e977
 800e7ac:	0800e831 	.word	0x0800e831
 800e7b0:	0800e977 	.word	0x0800e977
 800e7b4:	0800e977 	.word	0x0800e977
 800e7b8:	0800e977 	.word	0x0800e977
 800e7bc:	0800e873 	.word	0x0800e873
 800e7c0:	0800e977 	.word	0x0800e977
 800e7c4:	0800e977 	.word	0x0800e977
 800e7c8:	0800e977 	.word	0x0800e977
 800e7cc:	0800e8b3 	.word	0x0800e8b3
 800e7d0:	0800e977 	.word	0x0800e977
 800e7d4:	0800e977 	.word	0x0800e977
 800e7d8:	0800e977 	.word	0x0800e977
 800e7dc:	0800e8f5 	.word	0x0800e8f5
 800e7e0:	0800e977 	.word	0x0800e977
 800e7e4:	0800e977 	.word	0x0800e977
 800e7e8:	0800e977 	.word	0x0800e977
 800e7ec:	0800e935 	.word	0x0800e935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68b9      	ldr	r1, [r7, #8]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 fc4e 	bl	800f098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	699a      	ldr	r2, [r3, #24]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f042 0208 	orr.w	r2, r2, #8
 800e80a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f022 0204 	bic.w	r2, r2, #4
 800e81a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6999      	ldr	r1, [r3, #24]
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	691a      	ldr	r2, [r3, #16]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	619a      	str	r2, [r3, #24]
      break;
 800e82e:	e0a5      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	4618      	mov	r0, r3
 800e838:	f000 fcc8 	bl	800f1cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	699a      	ldr	r2, [r3, #24]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e84a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699a      	ldr	r2, [r3, #24]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e85a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6999      	ldr	r1, [r3, #24]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	021a      	lsls	r2, r3, #8
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	430a      	orrs	r2, r1
 800e86e:	619a      	str	r2, [r3, #24]
      break;
 800e870:	e084      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68b9      	ldr	r1, [r7, #8]
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 fd3b 	bl	800f2f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	69da      	ldr	r2, [r3, #28]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f042 0208 	orr.w	r2, r2, #8
 800e88c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	69da      	ldr	r2, [r3, #28]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0204 	bic.w	r2, r2, #4
 800e89c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69d9      	ldr	r1, [r3, #28]
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	691a      	ldr	r2, [r3, #16]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	430a      	orrs	r2, r1
 800e8ae:	61da      	str	r2, [r3, #28]
      break;
 800e8b0:	e064      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f000 fdad 	bl	800f418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	69da      	ldr	r2, [r3, #28]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	69da      	ldr	r2, [r3, #28]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	69d9      	ldr	r1, [r3, #28]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	021a      	lsls	r2, r3, #8
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	61da      	str	r2, [r3, #28]
      break;
 800e8f2:	e043      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68b9      	ldr	r1, [r7, #8]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f000 fe20 	bl	800f540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f042 0208 	orr.w	r2, r2, #8
 800e90e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f022 0204 	bic.w	r2, r2, #4
 800e91e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	691a      	ldr	r2, [r3, #16]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	430a      	orrs	r2, r1
 800e930:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e932:	e023      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68b9      	ldr	r1, [r7, #8]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 fe6a 	bl	800f614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e94e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e95e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	021a      	lsls	r2, r3, #8
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	430a      	orrs	r2, r1
 800e972:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e974:	e002      	b.n	800e97c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	75fb      	strb	r3, [r7, #23]
      break;
 800e97a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e984:	7dfb      	ldrb	r3, [r7, #23]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop

0800e990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d101      	bne.n	800e9ac <HAL_TIM_ConfigClockSource+0x1c>
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	e0f6      	b.n	800eb9a <HAL_TIM_ConfigClockSource+0x20a>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e9ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e9ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a6f      	ldr	r2, [pc, #444]	@ (800eba4 <HAL_TIM_ConfigClockSource+0x214>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	f000 80c1 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800e9ec:	4a6d      	ldr	r2, [pc, #436]	@ (800eba4 <HAL_TIM_ConfigClockSource+0x214>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	f200 80c6 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9f4:	4a6c      	ldr	r2, [pc, #432]	@ (800eba8 <HAL_TIM_ConfigClockSource+0x218>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	f000 80b9 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800e9fc:	4a6a      	ldr	r2, [pc, #424]	@ (800eba8 <HAL_TIM_ConfigClockSource+0x218>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	f200 80be 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea04:	4a69      	ldr	r2, [pc, #420]	@ (800ebac <HAL_TIM_ConfigClockSource+0x21c>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	f000 80b1 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea0c:	4a67      	ldr	r2, [pc, #412]	@ (800ebac <HAL_TIM_ConfigClockSource+0x21c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	f200 80b6 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea14:	4a66      	ldr	r2, [pc, #408]	@ (800ebb0 <HAL_TIM_ConfigClockSource+0x220>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	f000 80a9 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea1c:	4a64      	ldr	r2, [pc, #400]	@ (800ebb0 <HAL_TIM_ConfigClockSource+0x220>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	f200 80ae 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea24:	4a63      	ldr	r2, [pc, #396]	@ (800ebb4 <HAL_TIM_ConfigClockSource+0x224>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	f000 80a1 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea2c:	4a61      	ldr	r2, [pc, #388]	@ (800ebb4 <HAL_TIM_ConfigClockSource+0x224>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	f200 80a6 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea34:	4a60      	ldr	r2, [pc, #384]	@ (800ebb8 <HAL_TIM_ConfigClockSource+0x228>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	f000 8099 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea3c:	4a5e      	ldr	r2, [pc, #376]	@ (800ebb8 <HAL_TIM_ConfigClockSource+0x228>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	f200 809e 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea48:	f000 8091 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea50:	f200 8096 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea58:	f000 8089 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800ea5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea60:	f200 808e 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea68:	d03e      	beq.n	800eae8 <HAL_TIM_ConfigClockSource+0x158>
 800ea6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea6e:	f200 8087 	bhi.w	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea76:	f000 8086 	beq.w	800eb86 <HAL_TIM_ConfigClockSource+0x1f6>
 800ea7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea7e:	d87f      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea80:	2b70      	cmp	r3, #112	@ 0x70
 800ea82:	d01a      	beq.n	800eaba <HAL_TIM_ConfigClockSource+0x12a>
 800ea84:	2b70      	cmp	r3, #112	@ 0x70
 800ea86:	d87b      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea88:	2b60      	cmp	r3, #96	@ 0x60
 800ea8a:	d050      	beq.n	800eb2e <HAL_TIM_ConfigClockSource+0x19e>
 800ea8c:	2b60      	cmp	r3, #96	@ 0x60
 800ea8e:	d877      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea90:	2b50      	cmp	r3, #80	@ 0x50
 800ea92:	d03c      	beq.n	800eb0e <HAL_TIM_ConfigClockSource+0x17e>
 800ea94:	2b50      	cmp	r3, #80	@ 0x50
 800ea96:	d873      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ea98:	2b40      	cmp	r3, #64	@ 0x40
 800ea9a:	d058      	beq.n	800eb4e <HAL_TIM_ConfigClockSource+0x1be>
 800ea9c:	2b40      	cmp	r3, #64	@ 0x40
 800ea9e:	d86f      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800eaa0:	2b30      	cmp	r3, #48	@ 0x30
 800eaa2:	d064      	beq.n	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800eaa4:	2b30      	cmp	r3, #48	@ 0x30
 800eaa6:	d86b      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800eaa8:	2b20      	cmp	r3, #32
 800eaaa:	d060      	beq.n	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d867      	bhi.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d05c      	beq.n	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800eab4:	2b10      	cmp	r3, #16
 800eab6:	d05a      	beq.n	800eb6e <HAL_TIM_ConfigClockSource+0x1de>
 800eab8:	e062      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eaca:	f000 fe8b 	bl	800f7e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eadc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	609a      	str	r2, [r3, #8]
      break;
 800eae6:	e04f      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eaf8:	f000 fe74 	bl	800f7e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	689a      	ldr	r2, [r3, #8]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb0a:	609a      	str	r2, [r3, #8]
      break;
 800eb0c:	e03c      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f000 fde6 	bl	800f6ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2150      	movs	r1, #80	@ 0x50
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 fe3f 	bl	800f7aa <TIM_ITRx_SetConfig>
      break;
 800eb2c:	e02c      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f000 fe05 	bl	800f74a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2160      	movs	r1, #96	@ 0x60
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fe2f 	bl	800f7aa <TIM_ITRx_SetConfig>
      break;
 800eb4c:	e01c      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	f000 fdc6 	bl	800f6ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2140      	movs	r1, #64	@ 0x40
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 fe1f 	bl	800f7aa <TIM_ITRx_SetConfig>
      break;
 800eb6c:	e00c      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4619      	mov	r1, r3
 800eb78:	4610      	mov	r0, r2
 800eb7a:	f000 fe16 	bl	800f7aa <TIM_ITRx_SetConfig>
      break;
 800eb7e:	e003      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	73fb      	strb	r3, [r7, #15]
      break;
 800eb84:	e000      	b.n	800eb88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800eb86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	00100070 	.word	0x00100070
 800eba8:	00100060 	.word	0x00100060
 800ebac:	00100050 	.word	0x00100050
 800ebb0:	00100040 	.word	0x00100040
 800ebb4:	00100030 	.word	0x00100030
 800ebb8:	00100020 	.word	0x00100020

0800ebbc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b087      	sub	sp, #28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e14a      	b.n	800ef22 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	f040 80dd 	bne.w	800ee54 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	2b1f      	cmp	r3, #31
 800ec9e:	f200 80d6 	bhi.w	800ee4e <HAL_TIM_RegisterCallback+0x1de>
 800eca2:	a201      	add	r2, pc, #4	@ (adr r2, 800eca8 <HAL_TIM_RegisterCallback+0x38>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800ed29 	.word	0x0800ed29
 800ecac:	0800ed31 	.word	0x0800ed31
 800ecb0:	0800ed39 	.word	0x0800ed39
 800ecb4:	0800ed41 	.word	0x0800ed41
 800ecb8:	0800ed49 	.word	0x0800ed49
 800ecbc:	0800ed51 	.word	0x0800ed51
 800ecc0:	0800ed59 	.word	0x0800ed59
 800ecc4:	0800ed61 	.word	0x0800ed61
 800ecc8:	0800ed69 	.word	0x0800ed69
 800eccc:	0800ed71 	.word	0x0800ed71
 800ecd0:	0800ed79 	.word	0x0800ed79
 800ecd4:	0800ed81 	.word	0x0800ed81
 800ecd8:	0800ed89 	.word	0x0800ed89
 800ecdc:	0800ed91 	.word	0x0800ed91
 800ece0:	0800ed9b 	.word	0x0800ed9b
 800ece4:	0800eda5 	.word	0x0800eda5
 800ece8:	0800edaf 	.word	0x0800edaf
 800ecec:	0800edb9 	.word	0x0800edb9
 800ecf0:	0800edc3 	.word	0x0800edc3
 800ecf4:	0800edcd 	.word	0x0800edcd
 800ecf8:	0800edd7 	.word	0x0800edd7
 800ecfc:	0800ede1 	.word	0x0800ede1
 800ed00:	0800edeb 	.word	0x0800edeb
 800ed04:	0800edf5 	.word	0x0800edf5
 800ed08:	0800edff 	.word	0x0800edff
 800ed0c:	0800ee09 	.word	0x0800ee09
 800ed10:	0800ee13 	.word	0x0800ee13
 800ed14:	0800ee1d 	.word	0x0800ee1d
 800ed18:	0800ee27 	.word	0x0800ee27
 800ed1c:	0800ee31 	.word	0x0800ee31
 800ed20:	0800ee3b 	.word	0x0800ee3b
 800ed24:	0800ee45 	.word	0x0800ee45
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ed2e:	e0f7      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ed36:	e0f3      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ed3e:	e0ef      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ed46:	e0eb      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ed4e:	e0e7      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ed56:	e0e3      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ed5e:	e0df      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ed66:	e0db      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ed6e:	e0d7      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ed76:	e0d3      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ed7e:	e0cf      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ed86:	e0cb      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ed8e:	e0c7      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ed98:	e0c2      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800eda2:	e0bd      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800edac:	e0b8      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800edb6:	e0b3      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800edc0:	e0ae      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800edca:	e0a9      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800edd4:	e0a4      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800edde:	e09f      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ede8:	e09a      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800edf2:	e095      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800edfc:	e090      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ee06:	e08b      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ee10:	e086      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ee1a:	e081      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ee24:	e07c      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ee2e:	e077      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800ee38:	e072      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ee42:	e06d      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ee4c:	e068      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	75fb      	strb	r3, [r7, #23]
        break;
 800ee52:	e065      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d15d      	bne.n	800ef1c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800ee60:	7afb      	ldrb	r3, [r7, #11]
 800ee62:	2b0d      	cmp	r3, #13
 800ee64:	d857      	bhi.n	800ef16 <HAL_TIM_RegisterCallback+0x2a6>
 800ee66:	a201      	add	r2, pc, #4	@ (adr r2, 800ee6c <HAL_TIM_RegisterCallback+0x1fc>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800eea5 	.word	0x0800eea5
 800ee70:	0800eead 	.word	0x0800eead
 800ee74:	0800eeb5 	.word	0x0800eeb5
 800ee78:	0800eebd 	.word	0x0800eebd
 800ee7c:	0800eec5 	.word	0x0800eec5
 800ee80:	0800eecd 	.word	0x0800eecd
 800ee84:	0800eed5 	.word	0x0800eed5
 800ee88:	0800eedd 	.word	0x0800eedd
 800ee8c:	0800eee5 	.word	0x0800eee5
 800ee90:	0800eeed 	.word	0x0800eeed
 800ee94:	0800eef5 	.word	0x0800eef5
 800ee98:	0800eefd 	.word	0x0800eefd
 800ee9c:	0800ef05 	.word	0x0800ef05
 800eea0:	0800ef0d 	.word	0x0800ef0d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800eeaa:	e039      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800eeb2:	e035      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800eeba:	e031      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800eec2:	e02d      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800eeca:	e029      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800eed2:	e025      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800eeda:	e021      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800eee2:	e01d      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800eeea:	e019      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800eef2:	e015      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800eefa:	e011      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ef02:	e00d      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ef0a:	e009      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ef14:	e004      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	75fb      	strb	r3, [r7, #23]
        break;
 800ef1a:	e001      	b.n	800ef20 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	371c      	adds	r7, #28
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop

0800ef30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a4c      	ldr	r2, [pc, #304]	@ (800f074 <TIM_Base_SetConfig+0x144>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d017      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef4e:	d013      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a49      	ldr	r2, [pc, #292]	@ (800f078 <TIM_Base_SetConfig+0x148>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00f      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a48      	ldr	r2, [pc, #288]	@ (800f07c <TIM_Base_SetConfig+0x14c>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d00b      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a47      	ldr	r2, [pc, #284]	@ (800f080 <TIM_Base_SetConfig+0x150>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d007      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a46      	ldr	r2, [pc, #280]	@ (800f084 <TIM_Base_SetConfig+0x154>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d003      	beq.n	800ef78 <TIM_Base_SetConfig+0x48>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a45      	ldr	r2, [pc, #276]	@ (800f088 <TIM_Base_SetConfig+0x158>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d108      	bne.n	800ef8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a39      	ldr	r2, [pc, #228]	@ (800f074 <TIM_Base_SetConfig+0x144>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d023      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef98:	d01f      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a36      	ldr	r2, [pc, #216]	@ (800f078 <TIM_Base_SetConfig+0x148>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d01b      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a35      	ldr	r2, [pc, #212]	@ (800f07c <TIM_Base_SetConfig+0x14c>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d017      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a34      	ldr	r2, [pc, #208]	@ (800f080 <TIM_Base_SetConfig+0x150>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d013      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a33      	ldr	r2, [pc, #204]	@ (800f084 <TIM_Base_SetConfig+0x154>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d00f      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a33      	ldr	r2, [pc, #204]	@ (800f08c <TIM_Base_SetConfig+0x15c>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d00b      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a32      	ldr	r2, [pc, #200]	@ (800f090 <TIM_Base_SetConfig+0x160>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d007      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a31      	ldr	r2, [pc, #196]	@ (800f094 <TIM_Base_SetConfig+0x164>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d003      	beq.n	800efda <TIM_Base_SetConfig+0xaa>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a2c      	ldr	r2, [pc, #176]	@ (800f088 <TIM_Base_SetConfig+0x158>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d108      	bne.n	800efec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800efe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	4313      	orrs	r3, r2
 800efea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	695b      	ldr	r3, [r3, #20]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a18      	ldr	r2, [pc, #96]	@ (800f074 <TIM_Base_SetConfig+0x144>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d013      	beq.n	800f040 <TIM_Base_SetConfig+0x110>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a1a      	ldr	r2, [pc, #104]	@ (800f084 <TIM_Base_SetConfig+0x154>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00f      	beq.n	800f040 <TIM_Base_SetConfig+0x110>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a1a      	ldr	r2, [pc, #104]	@ (800f08c <TIM_Base_SetConfig+0x15c>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d00b      	beq.n	800f040 <TIM_Base_SetConfig+0x110>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a19      	ldr	r2, [pc, #100]	@ (800f090 <TIM_Base_SetConfig+0x160>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d007      	beq.n	800f040 <TIM_Base_SetConfig+0x110>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a18      	ldr	r2, [pc, #96]	@ (800f094 <TIM_Base_SetConfig+0x164>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d003      	beq.n	800f040 <TIM_Base_SetConfig+0x110>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a13      	ldr	r2, [pc, #76]	@ (800f088 <TIM_Base_SetConfig+0x158>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d103      	bne.n	800f048 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	691a      	ldr	r2, [r3, #16]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	2b01      	cmp	r3, #1
 800f058:	d105      	bne.n	800f066 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	f023 0201 	bic.w	r2, r3, #1
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	611a      	str	r2, [r3, #16]
  }
}
 800f066:	bf00      	nop
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	40012c00 	.word	0x40012c00
 800f078:	40000400 	.word	0x40000400
 800f07c:	40000800 	.word	0x40000800
 800f080:	40000c00 	.word	0x40000c00
 800f084:	40013400 	.word	0x40013400
 800f088:	40015000 	.word	0x40015000
 800f08c:	40014000 	.word	0x40014000
 800f090:	40014400 	.word	0x40014400
 800f094:	40014800 	.word	0x40014800

0800f098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f098:	b480      	push	{r7}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a1b      	ldr	r3, [r3, #32]
 800f0a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6a1b      	ldr	r3, [r3, #32]
 800f0ac:	f023 0201 	bic.w	r2, r3, #1
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f023 0303 	bic.w	r3, r3, #3
 800f0d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68fa      	ldr	r2, [r7, #12]
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	f023 0302 	bic.w	r3, r3, #2
 800f0e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	697a      	ldr	r2, [r7, #20]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a30      	ldr	r2, [pc, #192]	@ (800f1b4 <TIM_OC1_SetConfig+0x11c>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d013      	beq.n	800f120 <TIM_OC1_SetConfig+0x88>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	4a2f      	ldr	r2, [pc, #188]	@ (800f1b8 <TIM_OC1_SetConfig+0x120>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d00f      	beq.n	800f120 <TIM_OC1_SetConfig+0x88>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	4a2e      	ldr	r2, [pc, #184]	@ (800f1bc <TIM_OC1_SetConfig+0x124>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d00b      	beq.n	800f120 <TIM_OC1_SetConfig+0x88>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4a2d      	ldr	r2, [pc, #180]	@ (800f1c0 <TIM_OC1_SetConfig+0x128>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d007      	beq.n	800f120 <TIM_OC1_SetConfig+0x88>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a2c      	ldr	r2, [pc, #176]	@ (800f1c4 <TIM_OC1_SetConfig+0x12c>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d003      	beq.n	800f120 <TIM_OC1_SetConfig+0x88>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a2b      	ldr	r2, [pc, #172]	@ (800f1c8 <TIM_OC1_SetConfig+0x130>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d10c      	bne.n	800f13a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f023 0308 	bic.w	r3, r3, #8
 800f126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f023 0304 	bic.w	r3, r3, #4
 800f138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a1d      	ldr	r2, [pc, #116]	@ (800f1b4 <TIM_OC1_SetConfig+0x11c>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d013      	beq.n	800f16a <TIM_OC1_SetConfig+0xd2>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a1c      	ldr	r2, [pc, #112]	@ (800f1b8 <TIM_OC1_SetConfig+0x120>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00f      	beq.n	800f16a <TIM_OC1_SetConfig+0xd2>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a1b      	ldr	r2, [pc, #108]	@ (800f1bc <TIM_OC1_SetConfig+0x124>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d00b      	beq.n	800f16a <TIM_OC1_SetConfig+0xd2>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a1a      	ldr	r2, [pc, #104]	@ (800f1c0 <TIM_OC1_SetConfig+0x128>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d007      	beq.n	800f16a <TIM_OC1_SetConfig+0xd2>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a19      	ldr	r2, [pc, #100]	@ (800f1c4 <TIM_OC1_SetConfig+0x12c>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d003      	beq.n	800f16a <TIM_OC1_SetConfig+0xd2>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a18      	ldr	r2, [pc, #96]	@ (800f1c8 <TIM_OC1_SetConfig+0x130>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d111      	bne.n	800f18e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	4313      	orrs	r3, r2
 800f182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	693a      	ldr	r2, [r7, #16]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	693a      	ldr	r2, [r7, #16]
 800f192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	685a      	ldr	r2, [r3, #4]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	697a      	ldr	r2, [r7, #20]
 800f1a6:	621a      	str	r2, [r3, #32]
}
 800f1a8:	bf00      	nop
 800f1aa:	371c      	adds	r7, #28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	40012c00 	.word	0x40012c00
 800f1b8:	40013400 	.word	0x40013400
 800f1bc:	40014000 	.word	0x40014000
 800f1c0:	40014400 	.word	0x40014400
 800f1c4:	40014800 	.word	0x40014800
 800f1c8:	40015000 	.word	0x40015000

0800f1cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a1b      	ldr	r3, [r3, #32]
 800f1e0:	f023 0210 	bic.w	r2, r3, #16
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f1fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	021b      	lsls	r3, r3, #8
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	4313      	orrs	r3, r2
 800f212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f023 0320 	bic.w	r3, r3, #32
 800f21a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	011b      	lsls	r3, r3, #4
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	4313      	orrs	r3, r2
 800f226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4a2c      	ldr	r2, [pc, #176]	@ (800f2dc <TIM_OC2_SetConfig+0x110>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d007      	beq.n	800f240 <TIM_OC2_SetConfig+0x74>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a2b      	ldr	r2, [pc, #172]	@ (800f2e0 <TIM_OC2_SetConfig+0x114>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d003      	beq.n	800f240 <TIM_OC2_SetConfig+0x74>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a2a      	ldr	r2, [pc, #168]	@ (800f2e4 <TIM_OC2_SetConfig+0x118>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d10d      	bne.n	800f25c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	011b      	lsls	r3, r3, #4
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	4313      	orrs	r3, r2
 800f252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f25a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2dc <TIM_OC2_SetConfig+0x110>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d013      	beq.n	800f28c <TIM_OC2_SetConfig+0xc0>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a1e      	ldr	r2, [pc, #120]	@ (800f2e0 <TIM_OC2_SetConfig+0x114>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00f      	beq.n	800f28c <TIM_OC2_SetConfig+0xc0>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a1e      	ldr	r2, [pc, #120]	@ (800f2e8 <TIM_OC2_SetConfig+0x11c>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d00b      	beq.n	800f28c <TIM_OC2_SetConfig+0xc0>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a1d      	ldr	r2, [pc, #116]	@ (800f2ec <TIM_OC2_SetConfig+0x120>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d007      	beq.n	800f28c <TIM_OC2_SetConfig+0xc0>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a1c      	ldr	r2, [pc, #112]	@ (800f2f0 <TIM_OC2_SetConfig+0x124>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d003      	beq.n	800f28c <TIM_OC2_SetConfig+0xc0>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a17      	ldr	r2, [pc, #92]	@ (800f2e4 <TIM_OC2_SetConfig+0x118>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d113      	bne.n	800f2b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f29a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	621a      	str	r2, [r3, #32]
}
 800f2ce:	bf00      	nop
 800f2d0:	371c      	adds	r7, #28
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	40012c00 	.word	0x40012c00
 800f2e0:	40013400 	.word	0x40013400
 800f2e4:	40015000 	.word	0x40015000
 800f2e8:	40014000 	.word	0x40014000
 800f2ec:	40014400 	.word	0x40014400
 800f2f0:	40014800 	.word	0x40014800

0800f2f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a1b      	ldr	r3, [r3, #32]
 800f308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f023 0303 	bic.w	r3, r3, #3
 800f32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	4313      	orrs	r3, r2
 800f338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a2b      	ldr	r2, [pc, #172]	@ (800f400 <TIM_OC3_SetConfig+0x10c>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d007      	beq.n	800f366 <TIM_OC3_SetConfig+0x72>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a2a      	ldr	r2, [pc, #168]	@ (800f404 <TIM_OC3_SetConfig+0x110>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d003      	beq.n	800f366 <TIM_OC3_SetConfig+0x72>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a29      	ldr	r2, [pc, #164]	@ (800f408 <TIM_OC3_SetConfig+0x114>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d10d      	bne.n	800f382 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f36c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	021b      	lsls	r3, r3, #8
 800f374:	697a      	ldr	r2, [r7, #20]
 800f376:	4313      	orrs	r3, r2
 800f378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a1e      	ldr	r2, [pc, #120]	@ (800f400 <TIM_OC3_SetConfig+0x10c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d013      	beq.n	800f3b2 <TIM_OC3_SetConfig+0xbe>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a1d      	ldr	r2, [pc, #116]	@ (800f404 <TIM_OC3_SetConfig+0x110>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d00f      	beq.n	800f3b2 <TIM_OC3_SetConfig+0xbe>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a1d      	ldr	r2, [pc, #116]	@ (800f40c <TIM_OC3_SetConfig+0x118>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d00b      	beq.n	800f3b2 <TIM_OC3_SetConfig+0xbe>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a1c      	ldr	r2, [pc, #112]	@ (800f410 <TIM_OC3_SetConfig+0x11c>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d007      	beq.n	800f3b2 <TIM_OC3_SetConfig+0xbe>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f414 <TIM_OC3_SetConfig+0x120>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d003      	beq.n	800f3b2 <TIM_OC3_SetConfig+0xbe>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4a16      	ldr	r2, [pc, #88]	@ (800f408 <TIM_OC3_SetConfig+0x114>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d113      	bne.n	800f3da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f3c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	695b      	ldr	r3, [r3, #20]
 800f3c6:	011b      	lsls	r3, r3, #4
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	699b      	ldr	r3, [r3, #24]
 800f3d2:	011b      	lsls	r3, r3, #4
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	693a      	ldr	r2, [r7, #16]
 800f3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	685a      	ldr	r2, [r3, #4]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	621a      	str	r2, [r3, #32]
}
 800f3f4:	bf00      	nop
 800f3f6:	371c      	adds	r7, #28
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	40012c00 	.word	0x40012c00
 800f404:	40013400 	.word	0x40013400
 800f408:	40015000 	.word	0x40015000
 800f40c:	40014000 	.word	0x40014000
 800f410:	40014400 	.word	0x40014400
 800f414:	40014800 	.word	0x40014800

0800f418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f418:	b480      	push	{r7}
 800f41a:	b087      	sub	sp, #28
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a1b      	ldr	r3, [r3, #32]
 800f42c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	021b      	lsls	r3, r3, #8
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	031b      	lsls	r3, r3, #12
 800f46e:	697a      	ldr	r2, [r7, #20]
 800f470:	4313      	orrs	r3, r2
 800f472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a2c      	ldr	r2, [pc, #176]	@ (800f528 <TIM_OC4_SetConfig+0x110>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d007      	beq.n	800f48c <TIM_OC4_SetConfig+0x74>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a2b      	ldr	r2, [pc, #172]	@ (800f52c <TIM_OC4_SetConfig+0x114>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d003      	beq.n	800f48c <TIM_OC4_SetConfig+0x74>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a2a      	ldr	r2, [pc, #168]	@ (800f530 <TIM_OC4_SetConfig+0x118>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d10d      	bne.n	800f4a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	031b      	lsls	r3, r3, #12
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a1f      	ldr	r2, [pc, #124]	@ (800f528 <TIM_OC4_SetConfig+0x110>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d013      	beq.n	800f4d8 <TIM_OC4_SetConfig+0xc0>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f52c <TIM_OC4_SetConfig+0x114>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d00f      	beq.n	800f4d8 <TIM_OC4_SetConfig+0xc0>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f534 <TIM_OC4_SetConfig+0x11c>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d00b      	beq.n	800f4d8 <TIM_OC4_SetConfig+0xc0>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a1d      	ldr	r2, [pc, #116]	@ (800f538 <TIM_OC4_SetConfig+0x120>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d007      	beq.n	800f4d8 <TIM_OC4_SetConfig+0xc0>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a1c      	ldr	r2, [pc, #112]	@ (800f53c <TIM_OC4_SetConfig+0x124>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d003      	beq.n	800f4d8 <TIM_OC4_SetConfig+0xc0>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a17      	ldr	r2, [pc, #92]	@ (800f530 <TIM_OC4_SetConfig+0x118>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d113      	bne.n	800f500 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f4e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	695b      	ldr	r3, [r3, #20]
 800f4ec:	019b      	lsls	r3, r3, #6
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	019b      	lsls	r3, r3, #6
 800f4fa:	693a      	ldr	r2, [r7, #16]
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	693a      	ldr	r2, [r7, #16]
 800f504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	621a      	str	r2, [r3, #32]
}
 800f51a:	bf00      	nop
 800f51c:	371c      	adds	r7, #28
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	40012c00 	.word	0x40012c00
 800f52c:	40013400 	.word	0x40013400
 800f530:	40015000 	.word	0x40015000
 800f534:	40014000 	.word	0x40014000
 800f538:	40014400 	.word	0x40014400
 800f53c:	40014800 	.word	0x40014800

0800f540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f540:	b480      	push	{r7}
 800f542:	b087      	sub	sp, #28
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f56e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	041b      	lsls	r3, r3, #16
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	4313      	orrs	r3, r2
 800f590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4a19      	ldr	r2, [pc, #100]	@ (800f5fc <TIM_OC5_SetConfig+0xbc>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <TIM_OC5_SetConfig+0x82>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a18      	ldr	r2, [pc, #96]	@ (800f600 <TIM_OC5_SetConfig+0xc0>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d00f      	beq.n	800f5c2 <TIM_OC5_SetConfig+0x82>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a17      	ldr	r2, [pc, #92]	@ (800f604 <TIM_OC5_SetConfig+0xc4>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d00b      	beq.n	800f5c2 <TIM_OC5_SetConfig+0x82>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a16      	ldr	r2, [pc, #88]	@ (800f608 <TIM_OC5_SetConfig+0xc8>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d007      	beq.n	800f5c2 <TIM_OC5_SetConfig+0x82>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a15      	ldr	r2, [pc, #84]	@ (800f60c <TIM_OC5_SetConfig+0xcc>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d003      	beq.n	800f5c2 <TIM_OC5_SetConfig+0x82>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a14      	ldr	r2, [pc, #80]	@ (800f610 <TIM_OC5_SetConfig+0xd0>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d109      	bne.n	800f5d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	021b      	lsls	r3, r3, #8
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	697a      	ldr	r2, [r7, #20]
 800f5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	621a      	str	r2, [r3, #32]
}
 800f5f0:	bf00      	nop
 800f5f2:	371c      	adds	r7, #28
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	40012c00 	.word	0x40012c00
 800f600:	40013400 	.word	0x40013400
 800f604:	40014000 	.word	0x40014000
 800f608:	40014400 	.word	0x40014400
 800f60c:	40014800 	.word	0x40014800
 800f610:	40015000 	.word	0x40015000

0800f614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f614:	b480      	push	{r7}
 800f616:	b087      	sub	sp, #28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6a1b      	ldr	r3, [r3, #32]
 800f628:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	021b      	lsls	r3, r3, #8
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	4313      	orrs	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f65a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	051b      	lsls	r3, r3, #20
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	4313      	orrs	r3, r2
 800f666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a1a      	ldr	r2, [pc, #104]	@ (800f6d4 <TIM_OC6_SetConfig+0xc0>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d013      	beq.n	800f698 <TIM_OC6_SetConfig+0x84>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a19      	ldr	r2, [pc, #100]	@ (800f6d8 <TIM_OC6_SetConfig+0xc4>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d00f      	beq.n	800f698 <TIM_OC6_SetConfig+0x84>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a18      	ldr	r2, [pc, #96]	@ (800f6dc <TIM_OC6_SetConfig+0xc8>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d00b      	beq.n	800f698 <TIM_OC6_SetConfig+0x84>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a17      	ldr	r2, [pc, #92]	@ (800f6e0 <TIM_OC6_SetConfig+0xcc>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d007      	beq.n	800f698 <TIM_OC6_SetConfig+0x84>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a16      	ldr	r2, [pc, #88]	@ (800f6e4 <TIM_OC6_SetConfig+0xd0>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d003      	beq.n	800f698 <TIM_OC6_SetConfig+0x84>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a15      	ldr	r2, [pc, #84]	@ (800f6e8 <TIM_OC6_SetConfig+0xd4>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d109      	bne.n	800f6ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f69e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	029b      	lsls	r3, r3, #10
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	621a      	str	r2, [r3, #32]
}
 800f6c6:	bf00      	nop
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	40012c00 	.word	0x40012c00
 800f6d8:	40013400 	.word	0x40013400
 800f6dc:	40014000 	.word	0x40014000
 800f6e0:	40014400 	.word	0x40014400
 800f6e4:	40014800 	.word	0x40014800
 800f6e8:	40015000 	.word	0x40015000

0800f6ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b087      	sub	sp, #28
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6a1b      	ldr	r3, [r3, #32]
 800f6fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	f023 0201 	bic.w	r2, r3, #1
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	4313      	orrs	r3, r2
 800f720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f023 030a 	bic.w	r3, r3, #10
 800f728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	621a      	str	r2, [r3, #32]
}
 800f73e:	bf00      	nop
 800f740:	371c      	adds	r7, #28
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b087      	sub	sp, #28
 800f74e:	af00      	add	r7, sp, #0
 800f750:	60f8      	str	r0, [r7, #12]
 800f752:	60b9      	str	r1, [r7, #8]
 800f754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	f023 0210 	bic.w	r2, r3, #16
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	031b      	lsls	r3, r3, #12
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	011b      	lsls	r3, r3, #4
 800f78c:	697a      	ldr	r2, [r7, #20]
 800f78e:	4313      	orrs	r3, r2
 800f790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	693a      	ldr	r2, [r7, #16]
 800f796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	697a      	ldr	r2, [r7, #20]
 800f79c:	621a      	str	r2, [r3, #32]
}
 800f79e:	bf00      	nop
 800f7a0:	371c      	adds	r7, #28
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7aa:	b480      	push	{r7}
 800f7ac:	b085      	sub	sp, #20
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f7c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	f043 0307 	orr.w	r3, r3, #7
 800f7d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	609a      	str	r2, [r3, #8]
}
 800f7d8:	bf00      	nop
 800f7da:	3714      	adds	r7, #20
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
 800f7f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f7fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	021a      	lsls	r2, r3, #8
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	431a      	orrs	r2, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	4313      	orrs	r3, r2
 800f810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	609a      	str	r2, [r3, #8]
}
 800f818:	bf00      	nop
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f003 031f 	and.w	r3, r3, #31
 800f836:	2201      	movs	r2, #1
 800f838:	fa02 f303 	lsl.w	r3, r2, r3
 800f83c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a1a      	ldr	r2, [r3, #32]
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	43db      	mvns	r3, r3
 800f846:	401a      	ands	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6a1a      	ldr	r2, [r3, #32]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f003 031f 	and.w	r3, r3, #31
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	fa01 f303 	lsl.w	r3, r1, r3
 800f85c:	431a      	orrs	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	621a      	str	r2, [r3, #32]
}
 800f862:	bf00      	nop
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
	...

0800f870 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a26      	ldr	r2, [pc, #152]	@ (800f914 <TIM_ResetCallback+0xa4>)
 800f87c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a25      	ldr	r2, [pc, #148]	@ (800f918 <TIM_ResetCallback+0xa8>)
 800f884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a24      	ldr	r2, [pc, #144]	@ (800f91c <TIM_ResetCallback+0xac>)
 800f88c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a23      	ldr	r2, [pc, #140]	@ (800f920 <TIM_ResetCallback+0xb0>)
 800f894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a22      	ldr	r2, [pc, #136]	@ (800f924 <TIM_ResetCallback+0xb4>)
 800f89c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a21      	ldr	r2, [pc, #132]	@ (800f928 <TIM_ResetCallback+0xb8>)
 800f8a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a20      	ldr	r2, [pc, #128]	@ (800f92c <TIM_ResetCallback+0xbc>)
 800f8ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a1f      	ldr	r2, [pc, #124]	@ (800f930 <TIM_ResetCallback+0xc0>)
 800f8b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f934 <TIM_ResetCallback+0xc4>)
 800f8bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a1d      	ldr	r2, [pc, #116]	@ (800f938 <TIM_ResetCallback+0xc8>)
 800f8c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a1c      	ldr	r2, [pc, #112]	@ (800f93c <TIM_ResetCallback+0xcc>)
 800f8cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a1b      	ldr	r2, [pc, #108]	@ (800f940 <TIM_ResetCallback+0xd0>)
 800f8d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a1a      	ldr	r2, [pc, #104]	@ (800f944 <TIM_ResetCallback+0xd4>)
 800f8dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a19      	ldr	r2, [pc, #100]	@ (800f948 <TIM_ResetCallback+0xd8>)
 800f8e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a18      	ldr	r2, [pc, #96]	@ (800f94c <TIM_ResetCallback+0xdc>)
 800f8ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a17      	ldr	r2, [pc, #92]	@ (800f950 <TIM_ResetCallback+0xe0>)
 800f8f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a16      	ldr	r2, [pc, #88]	@ (800f954 <TIM_ResetCallback+0xe4>)
 800f8fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a15      	ldr	r2, [pc, #84]	@ (800f958 <TIM_ResetCallback+0xe8>)
 800f904:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	0800859d 	.word	0x0800859d
 800f918:	0800ebbd 	.word	0x0800ebbd
 800f91c:	0800ec35 	.word	0x0800ec35
 800f920:	0800ec49 	.word	0x0800ec49
 800f924:	0800ebe5 	.word	0x0800ebe5
 800f928:	0800ebf9 	.word	0x0800ebf9
 800f92c:	0800ebd1 	.word	0x0800ebd1
 800f930:	0800ec0d 	.word	0x0800ec0d
 800f934:	0800ec21 	.word	0x0800ec21
 800f938:	0800ec5d 	.word	0x0800ec5d
 800f93c:	0800fbb1 	.word	0x0800fbb1
 800f940:	0800fbc5 	.word	0x0800fbc5
 800f944:	0800fbd9 	.word	0x0800fbd9
 800f948:	0800fbed 	.word	0x0800fbed
 800f94c:	0800fc01 	.word	0x0800fc01
 800f950:	0800fc15 	.word	0x0800fc15
 800f954:	0800fc29 	.word	0x0800fc29
 800f958:	0800fc3d 	.word	0x0800fc3d

0800f95c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d101      	bne.n	800f974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f970:	2302      	movs	r3, #2
 800f972:	e074      	b.n	800fa5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a34      	ldr	r2, [pc, #208]	@ (800fa6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d009      	beq.n	800f9b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a33      	ldr	r2, [pc, #204]	@ (800fa70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d004      	beq.n	800f9b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a31      	ldr	r2, [pc, #196]	@ (800fa74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d108      	bne.n	800f9c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f9b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a21      	ldr	r2, [pc, #132]	@ (800fa6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d022      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9f4:	d01d      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a1f      	ldr	r2, [pc, #124]	@ (800fa78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d018      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a1d      	ldr	r2, [pc, #116]	@ (800fa7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d013      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4a1c      	ldr	r2, [pc, #112]	@ (800fa80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d00e      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a15      	ldr	r2, [pc, #84]	@ (800fa70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d009      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a18      	ldr	r2, [pc, #96]	@ (800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d004      	beq.n	800fa32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a11      	ldr	r2, [pc, #68]	@ (800fa74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d10c      	bne.n	800fa4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	4313      	orrs	r3, r2
 800fa42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	40012c00 	.word	0x40012c00
 800fa70:	40013400 	.word	0x40013400
 800fa74:	40015000 	.word	0x40015000
 800fa78:	40000400 	.word	0x40000400
 800fa7c:	40000800 	.word	0x40000800
 800fa80:	40000c00 	.word	0x40000c00
 800fa84:	40014000 	.word	0x40014000

0800fa88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fa92:	2300      	movs	r3, #0
 800fa94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d101      	bne.n	800faa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800faa0:	2302      	movs	r3, #2
 800faa2:	e078      	b.n	800fb96 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	4313      	orrs	r3, r2
 800fab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	695b      	ldr	r3, [r3, #20]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	699b      	ldr	r3, [r3, #24]
 800fb18:	041b      	lsls	r3, r3, #16
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a1c      	ldr	r2, [pc, #112]	@ (800fba4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d009      	beq.n	800fb4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a1b      	ldr	r2, [pc, #108]	@ (800fba8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d004      	beq.n	800fb4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a19      	ldr	r2, [pc, #100]	@ (800fbac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d11c      	bne.n	800fb84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb54:	051b      	lsls	r3, r3, #20
 800fb56:	4313      	orrs	r3, r2
 800fb58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	6a1b      	ldr	r3, [r3, #32]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb80:	4313      	orrs	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3714      	adds	r7, #20
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	40012c00 	.word	0x40012c00
 800fba8:	40013400 	.word	0x40013400
 800fbac:	40015000 	.word	0x40015000

0800fbb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fbb8:	bf00      	nop
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800fbcc:	bf00      	nop
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fbe0:	bf00      	nop
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fbf4:	bf00      	nop
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fc1c:	bf00      	nop
 800fc1e:	370c      	adds	r7, #12
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fc30:	bf00      	nop
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fc44:	bf00      	nop
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e050      	b.n	800fd04 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d114      	bne.n	800fc96 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fde5 	bl	8010844 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a21      	ldr	r2, [pc, #132]	@ (800fd0c <HAL_UART_Init+0xbc>)
 800fc88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2224      	movs	r2, #36	@ 0x24
 800fc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f022 0201 	bic.w	r2, r2, #1
 800fcac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d002      	beq.n	800fcbc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f001 f912 	bl	8010ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fe13 	bl	80108e8 <UART_SetConfig>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d101      	bne.n	800fccc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e01b      	b.n	800fd04 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fcda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	689a      	ldr	r2, [r3, #8]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fcea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f042 0201 	orr.w	r2, r2, #1
 800fcfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f001 f991 	bl	8011024 <UART_CheckIdleState>
 800fd02:	4603      	mov	r3, r0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	0800a0f1 	.word	0x0800a0f1

0800fd10 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b087      	sub	sp, #28
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	460b      	mov	r3, r1
 800fd1a:	607a      	str	r2, [r7, #4]
 800fd1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d109      	bne.n	800fd3c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	e09c      	b.n	800fe76 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd42:	2b20      	cmp	r3, #32
 800fd44:	d16c      	bne.n	800fe20 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800fd46:	7afb      	ldrb	r3, [r7, #11]
 800fd48:	2b0c      	cmp	r3, #12
 800fd4a:	d85e      	bhi.n	800fe0a <HAL_UART_RegisterCallback+0xfa>
 800fd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd54 <HAL_UART_RegisterCallback+0x44>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fd89 	.word	0x0800fd89
 800fd58:	0800fd93 	.word	0x0800fd93
 800fd5c:	0800fd9d 	.word	0x0800fd9d
 800fd60:	0800fda7 	.word	0x0800fda7
 800fd64:	0800fdb1 	.word	0x0800fdb1
 800fd68:	0800fdbb 	.word	0x0800fdbb
 800fd6c:	0800fdc5 	.word	0x0800fdc5
 800fd70:	0800fdcf 	.word	0x0800fdcf
 800fd74:	0800fdd9 	.word	0x0800fdd9
 800fd78:	0800fde3 	.word	0x0800fde3
 800fd7c:	0800fded 	.word	0x0800fded
 800fd80:	0800fdf7 	.word	0x0800fdf7
 800fd84:	0800fe01 	.word	0x0800fe01
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800fd90:	e070      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800fd9a:	e06b      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800fda4:	e066      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800fdae:	e061      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800fdb8:	e05c      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800fdc2:	e057      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800fdcc:	e052      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800fdd6:	e04d      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800fde0:	e048      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800fdea:	e043      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800fdf4:	e03e      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800fdfe:	e039      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fe08:	e034      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	75fb      	strb	r3, [r7, #23]
        break;
 800fe1e:	e029      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d11a      	bne.n	800fe60 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800fe2a:	7afb      	ldrb	r3, [r7, #11]
 800fe2c:	2b0b      	cmp	r3, #11
 800fe2e:	d002      	beq.n	800fe36 <HAL_UART_RegisterCallback+0x126>
 800fe30:	2b0c      	cmp	r3, #12
 800fe32:	d005      	beq.n	800fe40 <HAL_UART_RegisterCallback+0x130>
 800fe34:	e009      	b.n	800fe4a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800fe3e:	e019      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fe48:	e014      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	75fb      	strb	r3, [r7, #23]
        break;
 800fe5e:	e009      	b.n	800fe74 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800fe70:	2301      	movs	r3, #1
 800fe72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fe74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	371c      	adds	r7, #28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop

0800fe84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08a      	sub	sp, #40	@ 0x28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe98:	2b20      	cmp	r3, #32
 800fe9a:	d167      	bne.n	800ff6c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d002      	beq.n	800fea8 <HAL_UART_Transmit_DMA+0x24>
 800fea2:	88fb      	ldrh	r3, [r7, #6]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fea8:	2301      	movs	r3, #1
 800feaa:	e060      	b.n	800ff6e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	88fa      	ldrh	r2, [r7, #6]
 800feb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	88fa      	ldrh	r2, [r7, #6]
 800febe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2221      	movs	r2, #33	@ 0x21
 800fece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d028      	beq.n	800ff2c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fede:	4a26      	ldr	r2, [pc, #152]	@ (800ff78 <HAL_UART_Transmit_DMA+0xf4>)
 800fee0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fee6:	4a25      	ldr	r2, [pc, #148]	@ (800ff7c <HAL_UART_Transmit_DMA+0xf8>)
 800fee8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800feee:	4a24      	ldr	r2, [pc, #144]	@ (800ff80 <HAL_UART_Transmit_DMA+0xfc>)
 800fef0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fef6:	2200      	movs	r2, #0
 800fef8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff02:	4619      	mov	r1, r3
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3328      	adds	r3, #40	@ 0x28
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	88fb      	ldrh	r3, [r7, #6]
 800ff0e:	f7fc f919 	bl	800c144 <HAL_DMA_Start_IT>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d009      	beq.n	800ff2c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2210      	movs	r2, #16
 800ff1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e020      	b.n	800ff6e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2240      	movs	r2, #64	@ 0x40
 800ff32:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3308      	adds	r3, #8
 800ff3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	e853 3f00 	ldrex	r3, [r3]
 800ff42:	613b      	str	r3, [r7, #16]
   return(result);
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3308      	adds	r3, #8
 800ff52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff54:	623a      	str	r2, [r7, #32]
 800ff56:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff58:	69f9      	ldr	r1, [r7, #28]
 800ff5a:	6a3a      	ldr	r2, [r7, #32]
 800ff5c:	e841 2300 	strex	r3, r2, [r1]
 800ff60:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e5      	bne.n	800ff34 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	e000      	b.n	800ff6e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ff6c:	2302      	movs	r3, #2
  }
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3728      	adds	r7, #40	@ 0x28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	080114ef 	.word	0x080114ef
 800ff7c:	0801158d 	.word	0x0801158d
 800ff80:	08011727 	.word	0x08011727

0800ff84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b08a      	sub	sp, #40	@ 0x28
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	4613      	mov	r3, r2
 800ff90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff98:	2b20      	cmp	r3, #32
 800ff9a:	d137      	bne.n	801000c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d002      	beq.n	800ffa8 <HAL_UART_Receive_DMA+0x24>
 800ffa2:	88fb      	ldrh	r3, [r7, #6]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e030      	b.n	801000e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a18      	ldr	r2, [pc, #96]	@ (8010018 <HAL_UART_Receive_DMA+0x94>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d01f      	beq.n	800fffc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d018      	beq.n	800fffc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	e853 3f00 	ldrex	r3, [r3]
 800ffd6:	613b      	str	r3, [r7, #16]
   return(result);
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ffde:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe8:	623b      	str	r3, [r7, #32]
 800ffea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffec:	69f9      	ldr	r1, [r7, #28]
 800ffee:	6a3a      	ldr	r2, [r7, #32]
 800fff0:	e841 2300 	strex	r3, r2, [r1]
 800fff4:	61bb      	str	r3, [r7, #24]
   return(result);
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1e6      	bne.n	800ffca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fffc:	88fb      	ldrh	r3, [r7, #6]
 800fffe:	461a      	mov	r2, r3
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f001 f926 	bl	8011254 <UART_Start_Receive_DMA>
 8010008:	4603      	mov	r3, r0
 801000a:	e000      	b.n	801000e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801000c:	2302      	movs	r3, #2
  }
}
 801000e:	4618      	mov	r0, r3
 8010010:	3728      	adds	r7, #40	@ 0x28
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	40008000 	.word	0x40008000

0801001c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b0ba      	sub	sp, #232	@ 0xe8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	69db      	ldr	r3, [r3, #28]
 801002a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010046:	f640 030f 	movw	r3, #2063	@ 0x80f
 801004a:	4013      	ands	r3, r2
 801004c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010054:	2b00      	cmp	r3, #0
 8010056:	d11b      	bne.n	8010090 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801005c:	f003 0320 	and.w	r3, r3, #32
 8010060:	2b00      	cmp	r3, #0
 8010062:	d015      	beq.n	8010090 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010068:	f003 0320 	and.w	r3, r3, #32
 801006c:	2b00      	cmp	r3, #0
 801006e:	d105      	bne.n	801007c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010078:	2b00      	cmp	r3, #0
 801007a:	d009      	beq.n	8010090 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010080:	2b00      	cmp	r3, #0
 8010082:	f000 8312 	beq.w	80106aa <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	4798      	blx	r3
      }
      return;
 801008e:	e30c      	b.n	80106aa <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 8129 	beq.w	80102ec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801009a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801009e:	4b90      	ldr	r3, [pc, #576]	@ (80102e0 <HAL_UART_IRQHandler+0x2c4>)
 80100a0:	4013      	ands	r3, r2
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d106      	bne.n	80100b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80100a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80100aa:	4b8e      	ldr	r3, [pc, #568]	@ (80102e4 <HAL_UART_IRQHandler+0x2c8>)
 80100ac:	4013      	ands	r3, r2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 811c 	beq.w	80102ec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d011      	beq.n	80100e4 <HAL_UART_IRQHandler+0xc8>
 80100c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2201      	movs	r2, #1
 80100d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100da:	f043 0201 	orr.w	r2, r3, #1
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e8:	f003 0302 	and.w	r3, r3, #2
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d011      	beq.n	8010114 <HAL_UART_IRQHandler+0xf8>
 80100f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100f4:	f003 0301 	and.w	r3, r3, #1
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00b      	beq.n	8010114 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2202      	movs	r2, #2
 8010102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801010a:	f043 0204 	orr.w	r2, r3, #4
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010118:	f003 0304 	and.w	r3, r3, #4
 801011c:	2b00      	cmp	r3, #0
 801011e:	d011      	beq.n	8010144 <HAL_UART_IRQHandler+0x128>
 8010120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00b      	beq.n	8010144 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2204      	movs	r2, #4
 8010132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801013a:	f043 0202 	orr.w	r2, r3, #2
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010148:	f003 0308 	and.w	r3, r3, #8
 801014c:	2b00      	cmp	r3, #0
 801014e:	d017      	beq.n	8010180 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010154:	f003 0320 	and.w	r3, r3, #32
 8010158:	2b00      	cmp	r3, #0
 801015a:	d105      	bne.n	8010168 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801015c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010160:	4b5f      	ldr	r3, [pc, #380]	@ (80102e0 <HAL_UART_IRQHandler+0x2c4>)
 8010162:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00b      	beq.n	8010180 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2208      	movs	r2, #8
 801016e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010176:	f043 0208 	orr.w	r2, r3, #8
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010188:	2b00      	cmp	r3, #0
 801018a:	d012      	beq.n	80101b2 <HAL_UART_IRQHandler+0x196>
 801018c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010190:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00c      	beq.n	80101b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80101a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101a8:	f043 0220 	orr.w	r2, r3, #32
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 8278 	beq.w	80106ae <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101c2:	f003 0320 	and.w	r3, r3, #32
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d013      	beq.n	80101f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101ce:	f003 0320 	and.w	r3, r3, #32
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d105      	bne.n	80101e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d007      	beq.n	80101f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d003      	beq.n	80101f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010206:	2b40      	cmp	r3, #64	@ 0x40
 8010208:	d005      	beq.n	8010216 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801020a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801020e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010212:	2b00      	cmp	r3, #0
 8010214:	d058      	beq.n	80102c8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f001 f903 	bl	8011422 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010226:	2b40      	cmp	r3, #64	@ 0x40
 8010228:	d148      	bne.n	80102bc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	3308      	adds	r3, #8
 8010230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010238:	e853 3f00 	ldrex	r3, [r3]
 801023c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	3308      	adds	r3, #8
 8010252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801025a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010266:	e841 2300 	strex	r3, r2, [r1]
 801026a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801026e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d1d9      	bne.n	801022a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801027c:	2b00      	cmp	r3, #0
 801027e:	d017      	beq.n	80102b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010286:	4a18      	ldr	r2, [pc, #96]	@ (80102e8 <HAL_UART_IRQHandler+0x2cc>)
 8010288:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010290:	4618      	mov	r0, r3
 8010292:	f7fc f82b 	bl	800c2ec <HAL_DMA_Abort_IT>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d01f      	beq.n	80102dc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80102aa:	4610      	mov	r0, r2
 80102ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ae:	e015      	b.n	80102dc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ba:	e00f      	b.n	80102dc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102c6:	e009      	b.n	80102dc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80102da:	e1e8      	b.n	80106ae <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102dc:	bf00      	nop
    return;
 80102de:	e1e6      	b.n	80106ae <HAL_UART_IRQHandler+0x692>
 80102e0:	10000001 	.word	0x10000001
 80102e4:	04000120 	.word	0x04000120
 80102e8:	080117ab 	.word	0x080117ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	f040 8176 	bne.w	80105e2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102fa:	f003 0310 	and.w	r3, r3, #16
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 816f 	beq.w	80105e2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010308:	f003 0310 	and.w	r3, r3, #16
 801030c:	2b00      	cmp	r3, #0
 801030e:	f000 8168 	beq.w	80105e2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2210      	movs	r2, #16
 8010318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010324:	2b40      	cmp	r3, #64	@ 0x40
 8010326:	f040 80dc 	bne.w	80104e2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 80b1 	beq.w	80104a4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010348:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801034c:	429a      	cmp	r2, r3
 801034e:	f080 80a9 	bcs.w	80104a4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010358:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f003 0320 	and.w	r3, r3, #32
 801036a:	2b00      	cmp	r3, #0
 801036c:	f040 8087 	bne.w	801047e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801037c:	e853 3f00 	ldrex	r3, [r3]
 8010380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801038c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	461a      	mov	r2, r3
 8010396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801039a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801039e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80103a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80103aa:	e841 2300 	strex	r3, r2, [r1]
 80103ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80103b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1da      	bne.n	8010370 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80103c4:	e853 3f00 	ldrex	r3, [r3]
 80103c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80103ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103cc:	f023 0301 	bic.w	r3, r3, #1
 80103d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3308      	adds	r3, #8
 80103da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80103de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80103e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80103e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80103ea:	e841 2300 	strex	r3, r2, [r1]
 80103ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80103f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1e1      	bne.n	80103ba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010400:	e853 3f00 	ldrex	r3, [r3]
 8010404:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801040c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	3308      	adds	r3, #8
 8010416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801041a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801041c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010420:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010422:	e841 2300 	strex	r3, r2, [r1]
 8010426:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e3      	bne.n	80103f6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2220      	movs	r2, #32
 8010432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010444:	e853 3f00 	ldrex	r3, [r3]
 8010448:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801044a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801044c:	f023 0310 	bic.w	r3, r3, #16
 8010450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	461a      	mov	r2, r3
 801045a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801045e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010460:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010462:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010466:	e841 2300 	strex	r3, r2, [r1]
 801046a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801046c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1e4      	bne.n	801043c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010478:	4618      	mov	r0, r3
 801047a:	f7fb fede 	bl	800c23a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2202      	movs	r2, #2
 8010482:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010496:	b292      	uxth	r2, r2
 8010498:	1a8a      	subs	r2, r1, r2
 801049a:	b292      	uxth	r2, r2
 801049c:	4611      	mov	r1, r2
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80104a2:	e106      	b.n	80106b2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80104aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80104ae:	429a      	cmp	r2, r3
 80104b0:	f040 80ff 	bne.w	80106b2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f003 0320 	and.w	r3, r3, #32
 80104c2:	2b20      	cmp	r3, #32
 80104c4:	f040 80f5 	bne.w	80106b2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2202      	movs	r2, #2
 80104cc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80104da:	4611      	mov	r1, r2
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	4798      	blx	r3
      return;
 80104e0:	e0e7      	b.n	80106b2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f000 80d9 	beq.w	80106b6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010508:	2b00      	cmp	r3, #0
 801050a:	f000 80d4 	beq.w	80106b6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010516:	e853 3f00 	ldrex	r3, [r3]
 801051a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801051e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	461a      	mov	r2, r3
 801052c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010530:	647b      	str	r3, [r7, #68]	@ 0x44
 8010532:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801053e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e4      	bne.n	801050e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3308      	adds	r3, #8
 801054a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054e:	e853 3f00 	ldrex	r3, [r3]
 8010552:	623b      	str	r3, [r7, #32]
   return(result);
 8010554:	6a3b      	ldr	r3, [r7, #32]
 8010556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801055a:	f023 0301 	bic.w	r3, r3, #1
 801055e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3308      	adds	r3, #8
 8010568:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801056c:	633a      	str	r2, [r7, #48]	@ 0x30
 801056e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010574:	e841 2300 	strex	r3, r2, [r1]
 8010578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801057a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1e1      	bne.n	8010544 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2220      	movs	r2, #32
 8010584:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f023 0310 	bic.w	r3, r3, #16
 80105a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	461a      	mov	r2, r3
 80105b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80105b6:	61fb      	str	r3, [r7, #28]
 80105b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ba:	69b9      	ldr	r1, [r7, #24]
 80105bc:	69fa      	ldr	r2, [r7, #28]
 80105be:	e841 2300 	strex	r3, r2, [r1]
 80105c2:	617b      	str	r3, [r7, #20]
   return(result);
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1e4      	bne.n	8010594 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2202      	movs	r2, #2
 80105ce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80105d6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80105da:	4611      	mov	r1, r2
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105e0:	e069      	b.n	80106b6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d010      	beq.n	8010610 <HAL_UART_IRQHandler+0x5f4>
 80105ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010602:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801060e:	e055      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010618:	2b00      	cmp	r3, #0
 801061a:	d014      	beq.n	8010646 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801061c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010624:	2b00      	cmp	r3, #0
 8010626:	d105      	bne.n	8010634 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801062c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010630:	2b00      	cmp	r3, #0
 8010632:	d008      	beq.n	8010646 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010638:	2b00      	cmp	r3, #0
 801063a:	d03e      	beq.n	80106ba <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	4798      	blx	r3
    }
    return;
 8010644:	e039      	b.n	80106ba <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801064e:	2b00      	cmp	r3, #0
 8010650:	d009      	beq.n	8010666 <HAL_UART_IRQHandler+0x64a>
 8010652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f001 f8b7 	bl	80117d2 <UART_EndTransmit_IT>
    return;
 8010664:	e02a      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801066a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00b      	beq.n	801068a <HAL_UART_IRQHandler+0x66e>
 8010672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010676:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801067a:	2b00      	cmp	r3, #0
 801067c:	d005      	beq.n	801068a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010688:	e018      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801068a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801068e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010692:	2b00      	cmp	r3, #0
 8010694:	d012      	beq.n	80106bc <HAL_UART_IRQHandler+0x6a0>
 8010696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801069a:	2b00      	cmp	r3, #0
 801069c:	da0e      	bge.n	80106bc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106a8:	e008      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80106aa:	bf00      	nop
 80106ac:	e006      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
    return;
 80106ae:	bf00      	nop
 80106b0:	e004      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80106b2:	bf00      	nop
 80106b4:	e002      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80106b6:	bf00      	nop
 80106b8:	e000      	b.n	80106bc <HAL_UART_IRQHandler+0x6a0>
    return;
 80106ba:	bf00      	nop
  }
}
 80106bc:	37e8      	adds	r7, #232	@ 0xe8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop

080106c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106cc:	bf00      	nop
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010708:	bf00      	nop
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801071c:	bf00      	nop
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a09      	ldr	r2, [pc, #36]	@ (80107b0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d009      	beq.n	80107a4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	695b      	ldr	r3, [r3, #20]
 8010796:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	683a      	ldr	r2, [r7, #0]
 80107a0:	430a      	orrs	r2, r1
 80107a2:	615a      	str	r2, [r3, #20]
  }
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	40008000 	.word	0x40008000

080107b4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a18      	ldr	r2, [pc, #96]	@ (8010824 <HAL_UART_EnableReceiverTimeout+0x70>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d027      	beq.n	8010816 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107cc:	2b20      	cmp	r3, #32
 80107ce:	d120      	bne.n	8010812 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d101      	bne.n	80107de <HAL_UART_EnableReceiverTimeout+0x2a>
 80107da:	2302      	movs	r3, #2
 80107dc:	e01c      	b.n	8010818 <HAL_UART_EnableReceiverTimeout+0x64>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2201      	movs	r2, #1
 80107e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2224      	movs	r2, #36	@ 0x24
 80107ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	685a      	ldr	r2, [r3, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80107fc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2220      	movs	r2, #32
 8010802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	e002      	b.n	8010818 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010812:	2302      	movs	r3, #2
 8010814:	e000      	b.n	8010818 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8010816:	2301      	movs	r3, #1
  }
}
 8010818:	4618      	mov	r0, r3
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr
 8010824:	40008000 	.word	0x40008000

08010828 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
	...

08010844 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4a1a      	ldr	r2, [pc, #104]	@ (80108b8 <UART_InitCallbacksToDefault+0x74>)
 8010850:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4a19      	ldr	r2, [pc, #100]	@ (80108bc <UART_InitCallbacksToDefault+0x78>)
 8010858:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4a18      	ldr	r2, [pc, #96]	@ (80108c0 <UART_InitCallbacksToDefault+0x7c>)
 8010860:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a17      	ldr	r2, [pc, #92]	@ (80108c4 <UART_InitCallbacksToDefault+0x80>)
 8010868:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4a16      	ldr	r2, [pc, #88]	@ (80108c8 <UART_InitCallbacksToDefault+0x84>)
 8010870:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4a15      	ldr	r2, [pc, #84]	@ (80108cc <UART_InitCallbacksToDefault+0x88>)
 8010878:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4a14      	ldr	r2, [pc, #80]	@ (80108d0 <UART_InitCallbacksToDefault+0x8c>)
 8010880:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	4a13      	ldr	r2, [pc, #76]	@ (80108d4 <UART_InitCallbacksToDefault+0x90>)
 8010888:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4a12      	ldr	r2, [pc, #72]	@ (80108d8 <UART_InitCallbacksToDefault+0x94>)
 8010890:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4a11      	ldr	r2, [pc, #68]	@ (80108dc <UART_InitCallbacksToDefault+0x98>)
 8010898:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4a10      	ldr	r2, [pc, #64]	@ (80108e0 <UART_InitCallbacksToDefault+0x9c>)
 80108a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4a0f      	ldr	r2, [pc, #60]	@ (80108e4 <UART_InitCallbacksToDefault+0xa0>)
 80108a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80108ac:	bf00      	nop
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr
 80108b8:	080106d9 	.word	0x080106d9
 80108bc:	080106c5 	.word	0x080106c5
 80108c0:	08010701 	.word	0x08010701
 80108c4:	080106ed 	.word	0x080106ed
 80108c8:	08010715 	.word	0x08010715
 80108cc:	08010729 	.word	0x08010729
 80108d0:	0801073d 	.word	0x0801073d
 80108d4:	08010751 	.word	0x08010751
 80108d8:	0801182d 	.word	0x0801182d
 80108dc:	08011841 	.word	0x08011841
 80108e0:	08011855 	.word	0x08011855
 80108e4:	08010765 	.word	0x08010765

080108e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108ec:	b08c      	sub	sp, #48	@ 0x30
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108f2:	2300      	movs	r3, #0
 80108f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	691b      	ldr	r3, [r3, #16]
 8010900:	431a      	orrs	r2, r3
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	695b      	ldr	r3, [r3, #20]
 8010906:	431a      	orrs	r2, r3
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	69db      	ldr	r3, [r3, #28]
 801090c:	4313      	orrs	r3, r2
 801090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	4baa      	ldr	r3, [pc, #680]	@ (8010bc0 <UART_SetConfig+0x2d8>)
 8010918:	4013      	ands	r3, r2
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	6812      	ldr	r2, [r2, #0]
 801091e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010920:	430b      	orrs	r3, r1
 8010922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	68da      	ldr	r2, [r3, #12]
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	430a      	orrs	r2, r1
 8010938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a9f      	ldr	r2, [pc, #636]	@ (8010bc4 <UART_SetConfig+0x2dc>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d004      	beq.n	8010954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010950:	4313      	orrs	r3, r2
 8010952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801095e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010962:	697a      	ldr	r2, [r7, #20]
 8010964:	6812      	ldr	r2, [r2, #0]
 8010966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010968:	430b      	orrs	r3, r1
 801096a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010972:	f023 010f 	bic.w	r1, r3, #15
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	430a      	orrs	r2, r1
 8010980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4a90      	ldr	r2, [pc, #576]	@ (8010bc8 <UART_SetConfig+0x2e0>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d125      	bne.n	80109d8 <UART_SetConfig+0xf0>
 801098c:	4b8f      	ldr	r3, [pc, #572]	@ (8010bcc <UART_SetConfig+0x2e4>)
 801098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010992:	f003 0303 	and.w	r3, r3, #3
 8010996:	2b03      	cmp	r3, #3
 8010998:	d81a      	bhi.n	80109d0 <UART_SetConfig+0xe8>
 801099a:	a201      	add	r2, pc, #4	@ (adr r2, 80109a0 <UART_SetConfig+0xb8>)
 801099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a0:	080109b1 	.word	0x080109b1
 80109a4:	080109c1 	.word	0x080109c1
 80109a8:	080109b9 	.word	0x080109b9
 80109ac:	080109c9 	.word	0x080109c9
 80109b0:	2301      	movs	r3, #1
 80109b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109b6:	e116      	b.n	8010be6 <UART_SetConfig+0x2fe>
 80109b8:	2302      	movs	r3, #2
 80109ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109be:	e112      	b.n	8010be6 <UART_SetConfig+0x2fe>
 80109c0:	2304      	movs	r3, #4
 80109c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109c6:	e10e      	b.n	8010be6 <UART_SetConfig+0x2fe>
 80109c8:	2308      	movs	r3, #8
 80109ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109ce:	e10a      	b.n	8010be6 <UART_SetConfig+0x2fe>
 80109d0:	2310      	movs	r3, #16
 80109d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109d6:	e106      	b.n	8010be6 <UART_SetConfig+0x2fe>
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a7c      	ldr	r2, [pc, #496]	@ (8010bd0 <UART_SetConfig+0x2e8>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d138      	bne.n	8010a54 <UART_SetConfig+0x16c>
 80109e2:	4b7a      	ldr	r3, [pc, #488]	@ (8010bcc <UART_SetConfig+0x2e4>)
 80109e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109e8:	f003 030c 	and.w	r3, r3, #12
 80109ec:	2b0c      	cmp	r3, #12
 80109ee:	d82d      	bhi.n	8010a4c <UART_SetConfig+0x164>
 80109f0:	a201      	add	r2, pc, #4	@ (adr r2, 80109f8 <UART_SetConfig+0x110>)
 80109f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f6:	bf00      	nop
 80109f8:	08010a2d 	.word	0x08010a2d
 80109fc:	08010a4d 	.word	0x08010a4d
 8010a00:	08010a4d 	.word	0x08010a4d
 8010a04:	08010a4d 	.word	0x08010a4d
 8010a08:	08010a3d 	.word	0x08010a3d
 8010a0c:	08010a4d 	.word	0x08010a4d
 8010a10:	08010a4d 	.word	0x08010a4d
 8010a14:	08010a4d 	.word	0x08010a4d
 8010a18:	08010a35 	.word	0x08010a35
 8010a1c:	08010a4d 	.word	0x08010a4d
 8010a20:	08010a4d 	.word	0x08010a4d
 8010a24:	08010a4d 	.word	0x08010a4d
 8010a28:	08010a45 	.word	0x08010a45
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a32:	e0d8      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a34:	2302      	movs	r3, #2
 8010a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a3a:	e0d4      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a42:	e0d0      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a44:	2308      	movs	r3, #8
 8010a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a4a:	e0cc      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a4c:	2310      	movs	r3, #16
 8010a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a52:	e0c8      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a5e      	ldr	r2, [pc, #376]	@ (8010bd4 <UART_SetConfig+0x2ec>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d125      	bne.n	8010aaa <UART_SetConfig+0x1c2>
 8010a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8010bcc <UART_SetConfig+0x2e4>)
 8010a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010a68:	2b30      	cmp	r3, #48	@ 0x30
 8010a6a:	d016      	beq.n	8010a9a <UART_SetConfig+0x1b2>
 8010a6c:	2b30      	cmp	r3, #48	@ 0x30
 8010a6e:	d818      	bhi.n	8010aa2 <UART_SetConfig+0x1ba>
 8010a70:	2b20      	cmp	r3, #32
 8010a72:	d00a      	beq.n	8010a8a <UART_SetConfig+0x1a2>
 8010a74:	2b20      	cmp	r3, #32
 8010a76:	d814      	bhi.n	8010aa2 <UART_SetConfig+0x1ba>
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d002      	beq.n	8010a82 <UART_SetConfig+0x19a>
 8010a7c:	2b10      	cmp	r3, #16
 8010a7e:	d008      	beq.n	8010a92 <UART_SetConfig+0x1aa>
 8010a80:	e00f      	b.n	8010aa2 <UART_SetConfig+0x1ba>
 8010a82:	2300      	movs	r3, #0
 8010a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a88:	e0ad      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a8a:	2302      	movs	r3, #2
 8010a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a90:	e0a9      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a92:	2304      	movs	r3, #4
 8010a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a98:	e0a5      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010a9a:	2308      	movs	r3, #8
 8010a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aa0:	e0a1      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010aa2:	2310      	movs	r3, #16
 8010aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aa8:	e09d      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4a4a      	ldr	r2, [pc, #296]	@ (8010bd8 <UART_SetConfig+0x2f0>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d125      	bne.n	8010b00 <UART_SetConfig+0x218>
 8010ab4:	4b45      	ldr	r3, [pc, #276]	@ (8010bcc <UART_SetConfig+0x2e4>)
 8010ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010aba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8010ac0:	d016      	beq.n	8010af0 <UART_SetConfig+0x208>
 8010ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8010ac4:	d818      	bhi.n	8010af8 <UART_SetConfig+0x210>
 8010ac6:	2b80      	cmp	r3, #128	@ 0x80
 8010ac8:	d00a      	beq.n	8010ae0 <UART_SetConfig+0x1f8>
 8010aca:	2b80      	cmp	r3, #128	@ 0x80
 8010acc:	d814      	bhi.n	8010af8 <UART_SetConfig+0x210>
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d002      	beq.n	8010ad8 <UART_SetConfig+0x1f0>
 8010ad2:	2b40      	cmp	r3, #64	@ 0x40
 8010ad4:	d008      	beq.n	8010ae8 <UART_SetConfig+0x200>
 8010ad6:	e00f      	b.n	8010af8 <UART_SetConfig+0x210>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ade:	e082      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010ae0:	2302      	movs	r3, #2
 8010ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ae6:	e07e      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010ae8:	2304      	movs	r3, #4
 8010aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aee:	e07a      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010af0:	2308      	movs	r3, #8
 8010af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010af6:	e076      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010af8:	2310      	movs	r3, #16
 8010afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010afe:	e072      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a35      	ldr	r2, [pc, #212]	@ (8010bdc <UART_SetConfig+0x2f4>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d12a      	bne.n	8010b60 <UART_SetConfig+0x278>
 8010b0a:	4b30      	ldr	r3, [pc, #192]	@ (8010bcc <UART_SetConfig+0x2e4>)
 8010b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010b18:	d01a      	beq.n	8010b50 <UART_SetConfig+0x268>
 8010b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010b1e:	d81b      	bhi.n	8010b58 <UART_SetConfig+0x270>
 8010b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b24:	d00c      	beq.n	8010b40 <UART_SetConfig+0x258>
 8010b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b2a:	d815      	bhi.n	8010b58 <UART_SetConfig+0x270>
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d003      	beq.n	8010b38 <UART_SetConfig+0x250>
 8010b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b34:	d008      	beq.n	8010b48 <UART_SetConfig+0x260>
 8010b36:	e00f      	b.n	8010b58 <UART_SetConfig+0x270>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b3e:	e052      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b40:	2302      	movs	r3, #2
 8010b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b46:	e04e      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b48:	2304      	movs	r3, #4
 8010b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b4e:	e04a      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b50:	2308      	movs	r3, #8
 8010b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b56:	e046      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b58:	2310      	movs	r3, #16
 8010b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b5e:	e042      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a17      	ldr	r2, [pc, #92]	@ (8010bc4 <UART_SetConfig+0x2dc>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d13a      	bne.n	8010be0 <UART_SetConfig+0x2f8>
 8010b6a:	4b18      	ldr	r3, [pc, #96]	@ (8010bcc <UART_SetConfig+0x2e4>)
 8010b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010b78:	d01a      	beq.n	8010bb0 <UART_SetConfig+0x2c8>
 8010b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010b7e:	d81b      	bhi.n	8010bb8 <UART_SetConfig+0x2d0>
 8010b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010b84:	d00c      	beq.n	8010ba0 <UART_SetConfig+0x2b8>
 8010b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010b8a:	d815      	bhi.n	8010bb8 <UART_SetConfig+0x2d0>
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d003      	beq.n	8010b98 <UART_SetConfig+0x2b0>
 8010b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b94:	d008      	beq.n	8010ba8 <UART_SetConfig+0x2c0>
 8010b96:	e00f      	b.n	8010bb8 <UART_SetConfig+0x2d0>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b9e:	e022      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ba6:	e01e      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010ba8:	2304      	movs	r3, #4
 8010baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bae:	e01a      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010bb0:	2308      	movs	r3, #8
 8010bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bb6:	e016      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010bb8:	2310      	movs	r3, #16
 8010bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bbe:	e012      	b.n	8010be6 <UART_SetConfig+0x2fe>
 8010bc0:	cfff69f3 	.word	0xcfff69f3
 8010bc4:	40008000 	.word	0x40008000
 8010bc8:	40013800 	.word	0x40013800
 8010bcc:	40021000 	.word	0x40021000
 8010bd0:	40004400 	.word	0x40004400
 8010bd4:	40004800 	.word	0x40004800
 8010bd8:	40004c00 	.word	0x40004c00
 8010bdc:	40005000 	.word	0x40005000
 8010be0:	2310      	movs	r3, #16
 8010be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4aae      	ldr	r2, [pc, #696]	@ (8010ea4 <UART_SetConfig+0x5bc>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	f040 8097 	bne.w	8010d20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bf6:	2b08      	cmp	r3, #8
 8010bf8:	d823      	bhi.n	8010c42 <UART_SetConfig+0x35a>
 8010bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8010c00 <UART_SetConfig+0x318>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c25 	.word	0x08010c25
 8010c04:	08010c43 	.word	0x08010c43
 8010c08:	08010c2d 	.word	0x08010c2d
 8010c0c:	08010c43 	.word	0x08010c43
 8010c10:	08010c33 	.word	0x08010c33
 8010c14:	08010c43 	.word	0x08010c43
 8010c18:	08010c43 	.word	0x08010c43
 8010c1c:	08010c43 	.word	0x08010c43
 8010c20:	08010c3b 	.word	0x08010c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c24:	f7fc fc6c 	bl	800d500 <HAL_RCC_GetPCLK1Freq>
 8010c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c2a:	e010      	b.n	8010c4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c2c:	4b9e      	ldr	r3, [pc, #632]	@ (8010ea8 <UART_SetConfig+0x5c0>)
 8010c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c30:	e00d      	b.n	8010c4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c32:	f7fc fbf7 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 8010c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c38:	e009      	b.n	8010c4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c40:	e005      	b.n	8010c4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f000 8130 	beq.w	8010eb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c5a:	4a94      	ldr	r2, [pc, #592]	@ (8010eac <UART_SetConfig+0x5c4>)
 8010c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c60:	461a      	mov	r2, r3
 8010c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	685a      	ldr	r2, [r3, #4]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	005b      	lsls	r3, r3, #1
 8010c72:	4413      	add	r3, r2
 8010c74:	69ba      	ldr	r2, [r7, #24]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d305      	bcc.n	8010c86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c80:	69ba      	ldr	r2, [r7, #24]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d903      	bls.n	8010c8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010c86:	2301      	movs	r3, #1
 8010c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010c8c:	e113      	b.n	8010eb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c90:	2200      	movs	r2, #0
 8010c92:	60bb      	str	r3, [r7, #8]
 8010c94:	60fa      	str	r2, [r7, #12]
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c9a:	4a84      	ldr	r2, [pc, #528]	@ (8010eac <UART_SetConfig+0x5c4>)
 8010c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	603b      	str	r3, [r7, #0]
 8010ca6:	607a      	str	r2, [r7, #4]
 8010ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010cb0:	f7ef ffa0 	bl	8000bf4 <__aeabi_uldivmod>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	460b      	mov	r3, r1
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f04f 0200 	mov.w	r2, #0
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	020b      	lsls	r3, r1, #8
 8010cc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010cca:	0202      	lsls	r2, r0, #8
 8010ccc:	6979      	ldr	r1, [r7, #20]
 8010cce:	6849      	ldr	r1, [r1, #4]
 8010cd0:	0849      	lsrs	r1, r1, #1
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	460c      	mov	r4, r1
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	eb12 0804 	adds.w	r8, r2, r4
 8010cdc:	eb43 0905 	adc.w	r9, r3, r5
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	469a      	mov	sl, r3
 8010ce8:	4693      	mov	fp, r2
 8010cea:	4652      	mov	r2, sl
 8010cec:	465b      	mov	r3, fp
 8010cee:	4640      	mov	r0, r8
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	f7ef ff7f 	bl	8000bf4 <__aeabi_uldivmod>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cfe:	6a3b      	ldr	r3, [r7, #32]
 8010d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010d04:	d308      	bcc.n	8010d18 <UART_SetConfig+0x430>
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010d0c:	d204      	bcs.n	8010d18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	6a3a      	ldr	r2, [r7, #32]
 8010d14:	60da      	str	r2, [r3, #12]
 8010d16:	e0ce      	b.n	8010eb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010d1e:	e0ca      	b.n	8010eb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	69db      	ldr	r3, [r3, #28]
 8010d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010d28:	d166      	bne.n	8010df8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010d2e:	2b08      	cmp	r3, #8
 8010d30:	d827      	bhi.n	8010d82 <UART_SetConfig+0x49a>
 8010d32:	a201      	add	r2, pc, #4	@ (adr r2, 8010d38 <UART_SetConfig+0x450>)
 8010d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d38:	08010d5d 	.word	0x08010d5d
 8010d3c:	08010d65 	.word	0x08010d65
 8010d40:	08010d6d 	.word	0x08010d6d
 8010d44:	08010d83 	.word	0x08010d83
 8010d48:	08010d73 	.word	0x08010d73
 8010d4c:	08010d83 	.word	0x08010d83
 8010d50:	08010d83 	.word	0x08010d83
 8010d54:	08010d83 	.word	0x08010d83
 8010d58:	08010d7b 	.word	0x08010d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d5c:	f7fc fbd0 	bl	800d500 <HAL_RCC_GetPCLK1Freq>
 8010d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d62:	e014      	b.n	8010d8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d64:	f7fc fbe2 	bl	800d52c <HAL_RCC_GetPCLK2Freq>
 8010d68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d6a:	e010      	b.n	8010d8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8010ea8 <UART_SetConfig+0x5c0>)
 8010d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d70:	e00d      	b.n	8010d8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d72:	f7fc fb57 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 8010d76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d78:	e009      	b.n	8010d8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d80:	e005      	b.n	8010d8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010d82:	2300      	movs	r3, #0
 8010d84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f000 8090 	beq.w	8010eb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d9a:	4a44      	ldr	r2, [pc, #272]	@ (8010eac <UART_SetConfig+0x5c4>)
 8010d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010da0:	461a      	mov	r2, r3
 8010da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010da8:	005a      	lsls	r2, r3, #1
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	085b      	lsrs	r3, r3, #1
 8010db0:	441a      	add	r2, r3
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	2b0f      	cmp	r3, #15
 8010dc0:	d916      	bls.n	8010df0 <UART_SetConfig+0x508>
 8010dc2:	6a3b      	ldr	r3, [r7, #32]
 8010dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dc8:	d212      	bcs.n	8010df0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	f023 030f 	bic.w	r3, r3, #15
 8010dd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010dd4:	6a3b      	ldr	r3, [r7, #32]
 8010dd6:	085b      	lsrs	r3, r3, #1
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f003 0307 	and.w	r3, r3, #7
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	8bfb      	ldrh	r3, [r7, #30]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	8bfa      	ldrh	r2, [r7, #30]
 8010dec:	60da      	str	r2, [r3, #12]
 8010dee:	e062      	b.n	8010eb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010df6:	e05e      	b.n	8010eb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010df8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010dfc:	2b08      	cmp	r3, #8
 8010dfe:	d828      	bhi.n	8010e52 <UART_SetConfig+0x56a>
 8010e00:	a201      	add	r2, pc, #4	@ (adr r2, 8010e08 <UART_SetConfig+0x520>)
 8010e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e06:	bf00      	nop
 8010e08:	08010e2d 	.word	0x08010e2d
 8010e0c:	08010e35 	.word	0x08010e35
 8010e10:	08010e3d 	.word	0x08010e3d
 8010e14:	08010e53 	.word	0x08010e53
 8010e18:	08010e43 	.word	0x08010e43
 8010e1c:	08010e53 	.word	0x08010e53
 8010e20:	08010e53 	.word	0x08010e53
 8010e24:	08010e53 	.word	0x08010e53
 8010e28:	08010e4b 	.word	0x08010e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e2c:	f7fc fb68 	bl	800d500 <HAL_RCC_GetPCLK1Freq>
 8010e30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010e32:	e014      	b.n	8010e5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e34:	f7fc fb7a 	bl	800d52c <HAL_RCC_GetPCLK2Freq>
 8010e38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010e3a:	e010      	b.n	8010e5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea8 <UART_SetConfig+0x5c0>)
 8010e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010e40:	e00d      	b.n	8010e5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e42:	f7fc faef 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 8010e46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010e48:	e009      	b.n	8010e5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010e50:	e005      	b.n	8010e5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010e52:	2300      	movs	r3, #0
 8010e54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d028      	beq.n	8010eb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e68:	4a10      	ldr	r2, [pc, #64]	@ (8010eac <UART_SetConfig+0x5c4>)
 8010e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e72:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	085b      	lsrs	r3, r3, #1
 8010e7c:	441a      	add	r2, r3
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e88:	6a3b      	ldr	r3, [r7, #32]
 8010e8a:	2b0f      	cmp	r3, #15
 8010e8c:	d910      	bls.n	8010eb0 <UART_SetConfig+0x5c8>
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e94:	d20c      	bcs.n	8010eb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	60da      	str	r2, [r3, #12]
 8010ea0:	e009      	b.n	8010eb6 <UART_SetConfig+0x5ce>
 8010ea2:	bf00      	nop
 8010ea4:	40008000 	.word	0x40008000
 8010ea8:	00f42400 	.word	0x00f42400
 8010eac:	08014520 	.word	0x08014520
      }
      else
      {
        ret = HAL_ERROR;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010ed2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3730      	adds	r7, #48	@ 0x30
 8010eda:	46bd      	mov	sp, r7
 8010edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eec:	f003 0308 	and.w	r3, r3, #8
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d00a      	beq.n	8010f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	430a      	orrs	r2, r1
 8010f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f0e:	f003 0301 	and.w	r3, r3, #1
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00a      	beq.n	8010f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	430a      	orrs	r2, r1
 8010f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f30:	f003 0302 	and.w	r3, r3, #2
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d00a      	beq.n	8010f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	430a      	orrs	r2, r1
 8010f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f52:	f003 0304 	and.w	r3, r3, #4
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00a      	beq.n	8010f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	430a      	orrs	r2, r1
 8010f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f74:	f003 0310 	and.w	r3, r3, #16
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00a      	beq.n	8010f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	430a      	orrs	r2, r1
 8010f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f96:	f003 0320 	and.w	r3, r3, #32
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00a      	beq.n	8010fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	430a      	orrs	r2, r1
 8010fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d01a      	beq.n	8010ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	430a      	orrs	r2, r1
 8010fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010fde:	d10a      	bne.n	8010ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	430a      	orrs	r2, r1
 8010ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00a      	beq.n	8011018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	430a      	orrs	r2, r1
 8011016:	605a      	str	r2, [r3, #4]
  }
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b098      	sub	sp, #96	@ 0x60
 8011028:	af02      	add	r7, sp, #8
 801102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2200      	movs	r2, #0
 8011030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011034:	f7f9 fa4a 	bl	800a4cc <HAL_GetTick>
 8011038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f003 0308 	and.w	r3, r3, #8
 8011044:	2b08      	cmp	r3, #8
 8011046:	d12f      	bne.n	80110a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011050:	2200      	movs	r2, #0
 8011052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f88e 	bl	8011178 <UART_WaitOnFlagUntilTimeout>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d022      	beq.n	80110a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106a:	e853 3f00 	ldrex	r3, [r3]
 801106e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011076:	653b      	str	r3, [r7, #80]	@ 0x50
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	461a      	mov	r2, r3
 801107e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011080:	647b      	str	r3, [r7, #68]	@ 0x44
 8011082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011088:	e841 2300 	strex	r3, r2, [r1]
 801108c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801108e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1e6      	bne.n	8011062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2220      	movs	r2, #32
 8011098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110a4:	2303      	movs	r3, #3
 80110a6:	e063      	b.n	8011170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f003 0304 	and.w	r3, r3, #4
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	d149      	bne.n	801114a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110be:	2200      	movs	r2, #0
 80110c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f857 	bl	8011178 <UART_WaitOnFlagUntilTimeout>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d03c      	beq.n	801114a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d8:	e853 3f00 	ldrex	r3, [r3]
 80110dc:	623b      	str	r3, [r7, #32]
   return(result);
 80110de:	6a3b      	ldr	r3, [r7, #32]
 80110e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80110e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	461a      	mov	r2, r3
 80110ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80110f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110f6:	e841 2300 	strex	r3, r2, [r1]
 80110fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80110fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1e6      	bne.n	80110d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	3308      	adds	r3, #8
 8011108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	e853 3f00 	ldrex	r3, [r3]
 8011110:	60fb      	str	r3, [r7, #12]
   return(result);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f023 0301 	bic.w	r3, r3, #1
 8011118:	64bb      	str	r3, [r7, #72]	@ 0x48
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	3308      	adds	r3, #8
 8011120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011122:	61fa      	str	r2, [r7, #28]
 8011124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011126:	69b9      	ldr	r1, [r7, #24]
 8011128:	69fa      	ldr	r2, [r7, #28]
 801112a:	e841 2300 	strex	r3, r2, [r1]
 801112e:	617b      	str	r3, [r7, #20]
   return(result);
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d1e5      	bne.n	8011102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2220      	movs	r2, #32
 801113a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011146:	2303      	movs	r3, #3
 8011148:	e012      	b.n	8011170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2220      	movs	r2, #32
 801114e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2220      	movs	r2, #32
 8011156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2200      	movs	r2, #0
 801116a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3758      	adds	r7, #88	@ 0x58
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	603b      	str	r3, [r7, #0]
 8011184:	4613      	mov	r3, r2
 8011186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011188:	e04f      	b.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011190:	d04b      	beq.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011192:	f7f9 f99b 	bl	800a4cc <HAL_GetTick>
 8011196:	4602      	mov	r2, r0
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	69ba      	ldr	r2, [r7, #24]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d302      	bcc.n	80111a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80111a8:	2303      	movs	r3, #3
 80111aa:	e04e      	b.n	801124a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f003 0304 	and.w	r3, r3, #4
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d037      	beq.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	2b80      	cmp	r3, #128	@ 0x80
 80111be:	d034      	beq.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b40      	cmp	r3, #64	@ 0x40
 80111c4:	d031      	beq.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	69db      	ldr	r3, [r3, #28]
 80111cc:	f003 0308 	and.w	r3, r3, #8
 80111d0:	2b08      	cmp	r3, #8
 80111d2:	d110      	bne.n	80111f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2208      	movs	r2, #8
 80111da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f920 	bl	8011422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2208      	movs	r2, #8
 80111e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80111f2:	2301      	movs	r3, #1
 80111f4:	e029      	b.n	801124a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	69db      	ldr	r3, [r3, #28]
 80111fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011204:	d111      	bne.n	801122a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801120e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f000 f906 	bl	8011422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2220      	movs	r2, #32
 801121a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2200      	movs	r2, #0
 8011222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011226:	2303      	movs	r3, #3
 8011228:	e00f      	b.n	801124a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	69da      	ldr	r2, [r3, #28]
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	4013      	ands	r3, r2
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	429a      	cmp	r2, r3
 8011238:	bf0c      	ite	eq
 801123a:	2301      	moveq	r3, #1
 801123c:	2300      	movne	r3, #0
 801123e:	b2db      	uxtb	r3, r3
 8011240:	461a      	mov	r2, r3
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	429a      	cmp	r2, r3
 8011246:	d0a0      	beq.n	801118a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011248:	2300      	movs	r3, #0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b096      	sub	sp, #88	@ 0x58
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	4613      	mov	r3, r2
 8011260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	68ba      	ldr	r2, [r7, #8]
 8011266:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	88fa      	ldrh	r2, [r7, #6]
 801126c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2200      	movs	r2, #0
 8011274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2222      	movs	r2, #34	@ 0x22
 801127c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011286:	2b00      	cmp	r3, #0
 8011288:	d02d      	beq.n	80112e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011290:	4a40      	ldr	r2, [pc, #256]	@ (8011394 <UART_Start_Receive_DMA+0x140>)
 8011292:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801129a:	4a3f      	ldr	r2, [pc, #252]	@ (8011398 <UART_Start_Receive_DMA+0x144>)
 801129c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112a4:	4a3d      	ldr	r2, [pc, #244]	@ (801139c <UART_Start_Receive_DMA+0x148>)
 80112a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112ae:	2200      	movs	r2, #0
 80112b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3324      	adds	r3, #36	@ 0x24
 80112be:	4619      	mov	r1, r3
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112c4:	461a      	mov	r2, r3
 80112c6:	88fb      	ldrh	r3, [r7, #6]
 80112c8:	f7fa ff3c 	bl	800c144 <HAL_DMA_Start_IT>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d009      	beq.n	80112e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2210      	movs	r2, #16
 80112d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2220      	movs	r2, #32
 80112de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80112e2:	2301      	movs	r3, #1
 80112e4:	e051      	b.n	801138a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	691b      	ldr	r3, [r3, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d018      	beq.n	8011320 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112f6:	e853 3f00 	ldrex	r3, [r3]
 80112fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80112fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011302:	657b      	str	r3, [r7, #84]	@ 0x54
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	461a      	mov	r2, r3
 801130a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801130c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801130e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011310:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011314:	e841 2300 	strex	r3, r2, [r1]
 8011318:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801131a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1e6      	bne.n	80112ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	3308      	adds	r3, #8
 8011326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132a:	e853 3f00 	ldrex	r3, [r3]
 801132e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011332:	f043 0301 	orr.w	r3, r3, #1
 8011336:	653b      	str	r3, [r7, #80]	@ 0x50
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	3308      	adds	r3, #8
 801133e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011340:	637a      	str	r2, [r7, #52]	@ 0x34
 8011342:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011344:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011348:	e841 2300 	strex	r3, r2, [r1]
 801134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d1e5      	bne.n	8011320 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	3308      	adds	r3, #8
 801135a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	e853 3f00 	ldrex	r3, [r3]
 8011362:	613b      	str	r3, [r7, #16]
   return(result);
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	3308      	adds	r3, #8
 8011372:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011374:	623a      	str	r2, [r7, #32]
 8011376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011378:	69f9      	ldr	r1, [r7, #28]
 801137a:	6a3a      	ldr	r2, [r7, #32]
 801137c:	e841 2300 	strex	r3, r2, [r1]
 8011380:	61bb      	str	r3, [r7, #24]
   return(result);
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d1e5      	bne.n	8011354 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011388:	2300      	movs	r3, #0
}
 801138a:	4618      	mov	r0, r3
 801138c:	3758      	adds	r7, #88	@ 0x58
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	080115ad 	.word	0x080115ad
 8011398:	080116e1 	.word	0x080116e1
 801139c:	08011727 	.word	0x08011727

080113a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b08f      	sub	sp, #60	@ 0x3c
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	e853 3f00 	ldrex	r3, [r3]
 80113b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80113bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	461a      	mov	r2, r3
 80113c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113ce:	e841 2300 	strex	r3, r2, [r1]
 80113d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1e6      	bne.n	80113a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	3308      	adds	r3, #8
 80113e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	e853 3f00 	ldrex	r3, [r3]
 80113e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80113f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	3308      	adds	r3, #8
 80113f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113fa:	61ba      	str	r2, [r7, #24]
 80113fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113fe:	6979      	ldr	r1, [r7, #20]
 8011400:	69ba      	ldr	r2, [r7, #24]
 8011402:	e841 2300 	strex	r3, r2, [r1]
 8011406:	613b      	str	r3, [r7, #16]
   return(result);
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1e5      	bne.n	80113da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2220      	movs	r2, #32
 8011412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011416:	bf00      	nop
 8011418:	373c      	adds	r7, #60	@ 0x3c
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011422:	b480      	push	{r7}
 8011424:	b095      	sub	sp, #84	@ 0x54
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011432:	e853 3f00 	ldrex	r3, [r3]
 8011436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801143e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	461a      	mov	r2, r3
 8011446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011448:	643b      	str	r3, [r7, #64]	@ 0x40
 801144a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801144c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801144e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011450:	e841 2300 	strex	r3, r2, [r1]
 8011454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1e6      	bne.n	801142a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	3308      	adds	r3, #8
 8011462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011464:	6a3b      	ldr	r3, [r7, #32]
 8011466:	e853 3f00 	ldrex	r3, [r3]
 801146a:	61fb      	str	r3, [r7, #28]
   return(result);
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011472:	f023 0301 	bic.w	r3, r3, #1
 8011476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	3308      	adds	r3, #8
 801147e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011488:	e841 2300 	strex	r3, r2, [r1]
 801148c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1e3      	bne.n	801145c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011498:	2b01      	cmp	r3, #1
 801149a:	d118      	bne.n	80114ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	e853 3f00 	ldrex	r3, [r3]
 80114a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	f023 0310 	bic.w	r3, r3, #16
 80114b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	461a      	mov	r2, r3
 80114b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114ba:	61bb      	str	r3, [r7, #24]
 80114bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114be:	6979      	ldr	r1, [r7, #20]
 80114c0:	69ba      	ldr	r2, [r7, #24]
 80114c2:	e841 2300 	strex	r3, r2, [r1]
 80114c6:	613b      	str	r3, [r7, #16]
   return(result);
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1e6      	bne.n	801149c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2220      	movs	r2, #32
 80114d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2200      	movs	r2, #0
 80114da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80114e2:	bf00      	nop
 80114e4:	3754      	adds	r7, #84	@ 0x54
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr

080114ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b090      	sub	sp, #64	@ 0x40
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f003 0320 	and.w	r3, r3, #32
 8011506:	2b00      	cmp	r3, #0
 8011508:	d137      	bne.n	801157a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801150a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801150c:	2200      	movs	r2, #0
 801150e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	3308      	adds	r3, #8
 8011518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	e853 3f00 	ldrex	r3, [r3]
 8011520:	623b      	str	r3, [r7, #32]
   return(result);
 8011522:	6a3b      	ldr	r3, [r7, #32]
 8011524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011528:	63bb      	str	r3, [r7, #56]	@ 0x38
 801152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	3308      	adds	r3, #8
 8011530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011532:	633a      	str	r2, [r7, #48]	@ 0x30
 8011534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801153a:	e841 2300 	strex	r3, r2, [r1]
 801153e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011542:	2b00      	cmp	r3, #0
 8011544:	d1e5      	bne.n	8011512 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	e853 3f00 	ldrex	r3, [r3]
 8011552:	60fb      	str	r3, [r7, #12]
   return(result);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801155a:	637b      	str	r3, [r7, #52]	@ 0x34
 801155c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	461a      	mov	r2, r3
 8011562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011564:	61fb      	str	r3, [r7, #28]
 8011566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011568:	69b9      	ldr	r1, [r7, #24]
 801156a:	69fa      	ldr	r2, [r7, #28]
 801156c:	e841 2300 	strex	r3, r2, [r1]
 8011570:	617b      	str	r3, [r7, #20]
   return(result);
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e6      	bne.n	8011546 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011578:	e004      	b.n	8011584 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 801157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011580:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011582:	4798      	blx	r3
}
 8011584:	bf00      	nop
 8011586:	3740      	adds	r7, #64	@ 0x40
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011598:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115a4:	bf00      	nop
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b09c      	sub	sp, #112	@ 0x70
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f003 0320 	and.w	r3, r3, #32
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d171      	bne.n	80116ac <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80115c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115ca:	2200      	movs	r2, #0
 80115cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115d8:	e853 3f00 	ldrex	r3, [r3]
 80115dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80115de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	461a      	mov	r2, r3
 80115ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80115f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80115f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115f6:	e841 2300 	strex	r3, r2, [r1]
 80115fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80115fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1e6      	bne.n	80115d0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3308      	adds	r3, #8
 8011608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160c:	e853 3f00 	ldrex	r3, [r3]
 8011610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011614:	f023 0301 	bic.w	r3, r3, #1
 8011618:	667b      	str	r3, [r7, #100]	@ 0x64
 801161a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3308      	adds	r3, #8
 8011620:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011622:	647a      	str	r2, [r7, #68]	@ 0x44
 8011624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801162a:	e841 2300 	strex	r3, r2, [r1]
 801162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011632:	2b00      	cmp	r3, #0
 8011634:	d1e5      	bne.n	8011602 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	3308      	adds	r3, #8
 801163c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011640:	e853 3f00 	ldrex	r3, [r3]
 8011644:	623b      	str	r3, [r7, #32]
   return(result);
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801164c:	663b      	str	r3, [r7, #96]	@ 0x60
 801164e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3308      	adds	r3, #8
 8011654:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011656:	633a      	str	r2, [r7, #48]	@ 0x30
 8011658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801165a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801165c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801165e:	e841 2300 	strex	r3, r2, [r1]
 8011662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011666:	2b00      	cmp	r3, #0
 8011668:	d1e5      	bne.n	8011636 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801166a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801166c:	2220      	movs	r2, #32
 801166e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011676:	2b01      	cmp	r3, #1
 8011678:	d118      	bne.n	80116ac <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801167a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	e853 3f00 	ldrex	r3, [r3]
 8011686:	60fb      	str	r3, [r7, #12]
   return(result);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f023 0310 	bic.w	r3, r3, #16
 801168e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	461a      	mov	r2, r3
 8011696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011698:	61fb      	str	r3, [r7, #28]
 801169a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801169c:	69b9      	ldr	r1, [r7, #24]
 801169e:	69fa      	ldr	r2, [r7, #28]
 80116a0:	e841 2300 	strex	r3, r2, [r1]
 80116a4:	617b      	str	r3, [r7, #20]
   return(result);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1e6      	bne.n	801167a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116ae:	2200      	movs	r2, #0
 80116b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d109      	bne.n	80116ce <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80116ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80116c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80116c2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80116c6:	4611      	mov	r1, r2
 80116c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116ca:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116cc:	e004      	b.n	80116d8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80116ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80116d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116d6:	4798      	blx	r3
}
 80116d8:	bf00      	nop
 80116da:	3770      	adds	r7, #112	@ 0x70
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2201      	movs	r2, #1
 80116f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d10b      	bne.n	8011714 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011708:	0852      	lsrs	r2, r2, #1
 801170a:	b292      	uxth	r2, r2
 801170c:	4611      	mov	r1, r2
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011712:	e004      	b.n	801171e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	4798      	blx	r3
}
 801171e:	bf00      	nop
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}

08011726 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011726:	b580      	push	{r7, lr}
 8011728:	b086      	sub	sp, #24
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011732:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801173a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011742:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801174e:	2b80      	cmp	r3, #128	@ 0x80
 8011750:	d109      	bne.n	8011766 <UART_DMAError+0x40>
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	2b21      	cmp	r3, #33	@ 0x21
 8011756:	d106      	bne.n	8011766 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	2200      	movs	r2, #0
 801175c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011760:	6978      	ldr	r0, [r7, #20]
 8011762:	f7ff fe1d 	bl	80113a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	689b      	ldr	r3, [r3, #8]
 801176c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011770:	2b40      	cmp	r3, #64	@ 0x40
 8011772:	d109      	bne.n	8011788 <UART_DMAError+0x62>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2b22      	cmp	r3, #34	@ 0x22
 8011778:	d106      	bne.n	8011788 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	2200      	movs	r2, #0
 801177e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011782:	6978      	ldr	r0, [r7, #20]
 8011784:	f7ff fe4d 	bl	8011422 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801178e:	f043 0210 	orr.w	r2, r3, #16
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801179e:	6978      	ldr	r0, [r7, #20]
 80117a0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117a2:	bf00      	nop
 80117a4:	3718      	adds	r7, #24
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b084      	sub	sp, #16
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2200      	movs	r2, #0
 80117bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117ca:	bf00      	nop
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b088      	sub	sp, #32
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	e853 3f00 	ldrex	r3, [r3]
 80117e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117ee:	61fb      	str	r3, [r7, #28]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	461a      	mov	r2, r3
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	61bb      	str	r3, [r7, #24]
 80117fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117fc:	6979      	ldr	r1, [r7, #20]
 80117fe:	69ba      	ldr	r2, [r7, #24]
 8011800:	e841 2300 	strex	r3, r2, [r1]
 8011804:	613b      	str	r3, [r7, #16]
   return(result);
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1e6      	bne.n	80117da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2220      	movs	r2, #32
 8011810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011824:	bf00      	nop
 8011826:	3720      	adds	r7, #32
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011834:	bf00      	nop
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011848:	bf00      	nop
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801185c:	bf00      	nop
 801185e:	370c      	adds	r7, #12
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011876:	2b01      	cmp	r3, #1
 8011878:	d101      	bne.n	801187e <HAL_UARTEx_DisableFifoMode+0x16>
 801187a:	2302      	movs	r3, #2
 801187c:	e027      	b.n	80118ce <HAL_UARTEx_DisableFifoMode+0x66>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2201      	movs	r2, #1
 8011882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2224      	movs	r2, #36	@ 0x24
 801188a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f022 0201 	bic.w	r2, r2, #1
 80118a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80118ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2220      	movs	r2, #32
 80118c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr

080118da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b084      	sub	sp, #16
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
 80118e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d101      	bne.n	80118f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80118ee:	2302      	movs	r3, #2
 80118f0:	e02d      	b.n	801194e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2224      	movs	r2, #36	@ 0x24
 80118fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f022 0201 	bic.w	r2, r2, #1
 8011918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	683a      	ldr	r2, [r7, #0]
 801192a:	430a      	orrs	r2, r1
 801192c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f850 	bl	80119d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2220      	movs	r2, #32
 8011940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2200      	movs	r2, #0
 8011948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b084      	sub	sp, #16
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
 801195e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011966:	2b01      	cmp	r3, #1
 8011968:	d101      	bne.n	801196e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801196a:	2302      	movs	r3, #2
 801196c:	e02d      	b.n	80119ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2201      	movs	r2, #1
 8011972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2224      	movs	r2, #36	@ 0x24
 801197a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f022 0201 	bic.w	r2, r2, #1
 8011994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	689b      	ldr	r3, [r3, #8]
 801199c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	683a      	ldr	r2, [r7, #0]
 80119a6:	430a      	orrs	r2, r1
 80119a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f812 	bl	80119d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2220      	movs	r2, #32
 80119bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
	...

080119d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d108      	bne.n	80119f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2201      	movs	r2, #1
 80119e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2201      	movs	r2, #1
 80119f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80119f4:	e031      	b.n	8011a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80119f6:	2308      	movs	r3, #8
 80119f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80119fa:	2308      	movs	r3, #8
 80119fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	0e5b      	lsrs	r3, r3, #25
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	f003 0307 	and.w	r3, r3, #7
 8011a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	0f5b      	lsrs	r3, r3, #29
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	f003 0307 	and.w	r3, r3, #7
 8011a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a1e:	7bbb      	ldrb	r3, [r7, #14]
 8011a20:	7b3a      	ldrb	r2, [r7, #12]
 8011a22:	4911      	ldr	r1, [pc, #68]	@ (8011a68 <UARTEx_SetNbDataToProcess+0x94>)
 8011a24:	5c8a      	ldrb	r2, [r1, r2]
 8011a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a2a:	7b3a      	ldrb	r2, [r7, #12]
 8011a2c:	490f      	ldr	r1, [pc, #60]	@ (8011a6c <UARTEx_SetNbDataToProcess+0x98>)
 8011a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a3c:	7bfb      	ldrb	r3, [r7, #15]
 8011a3e:	7b7a      	ldrb	r2, [r7, #13]
 8011a40:	4909      	ldr	r1, [pc, #36]	@ (8011a68 <UARTEx_SetNbDataToProcess+0x94>)
 8011a42:	5c8a      	ldrb	r2, [r1, r2]
 8011a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011a48:	7b7a      	ldrb	r2, [r7, #13]
 8011a4a:	4908      	ldr	r1, [pc, #32]	@ (8011a6c <UARTEx_SetNbDataToProcess+0x98>)
 8011a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011a5a:	bf00      	nop
 8011a5c:	3714      	adds	r7, #20
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr
 8011a66:	bf00      	nop
 8011a68:	08014538 	.word	0x08014538
 8011a6c:	08014540 	.word	0x08014540

08011a70 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b08b      	sub	sp, #44	@ 0x2c
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	461a      	mov	r2, r3
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	885b      	ldrh	r3, [r3, #2]
 8011a98:	fb02 f303 	mul.w	r3, r2, r3
 8011a9c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011aa2:	e013      	b.n	8011acc <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa6:	1d1a      	adds	r2, r3, #4
 8011aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8011aaa:	ed93 7a00 	vldr	s14, [r3]
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	1d1a      	adds	r2, r3, #4
 8011ab2:	623a      	str	r2, [r7, #32]
 8011ab4:	edd3 7a00 	vldr	s15, [r3]
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	1d1a      	adds	r2, r3, #4
 8011abc:	61fa      	str	r2, [r7, #28]
 8011abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ac2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	3b01      	subs	r3, #1
 8011aca:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1e8      	bne.n	8011aa4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011ad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	372c      	adds	r7, #44	@ 0x2c
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b085      	sub	sp, #20
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	60f8      	str	r0, [r7, #12]
 8011aee:	607b      	str	r3, [r7, #4]
 8011af0:	460b      	mov	r3, r1
 8011af2:	817b      	strh	r3, [r7, #10]
 8011af4:	4613      	mov	r3, r2
 8011af6:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	897a      	ldrh	r2, [r7, #10]
 8011afc:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	893a      	ldrh	r2, [r7, #8]
 8011b02:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	605a      	str	r2, [r3, #4]
}
 8011b0a:	bf00      	nop
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b0bb      	sub	sp, #236	@ 0xec
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	885b      	ldrh	r3, [r3, #2]
 8011b36:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011b38:	f04f 0300 	mov.w	r3, #0
 8011b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011b40:	f04f 0300 	mov.w	r3, #0
 8011b44:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011b46:	2300      	movs	r3, #0
 8011b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8011b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011b58:	e03b      	b.n	8011bd2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8011b5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011b66:	e00c      	b.n	8011b82 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b6c:	1d1a      	adds	r2, r3, #4
 8011b6e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011b72:	f04f 0200 	mov.w	r2, #0
 8011b76:	601a      	str	r2, [r3, #0]
        j--;
 8011b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d1ee      	bne.n	8011b68 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8011b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b8e:	1d1a      	adds	r2, r3, #4
 8011b90:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011b94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011b98:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8011b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011ba4:	e00c      	b.n	8011bc0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8011ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011baa:	1d1a      	adds	r2, r3, #4
 8011bac:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011bb0:	f04f 0200 	mov.w	r2, #0
 8011bb4:	601a      	str	r2, [r3, #0]
        j--;
 8011bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011bc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d1ee      	bne.n	8011ba6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8011bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d1bf      	bne.n	8011b5a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8011bda:	2300      	movs	r3, #0
 8011bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011be0:	e2c7      	b.n	8012172 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011be6:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	685a      	ldr	r2, [r3, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	885b      	ldrh	r3, [r3, #2]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011bf6:	fb01 f303 	mul.w	r3, r1, r3
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c18:	3301      	adds	r3, #1
 8011c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011c1e:	e02c      	b.n	8011c7a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685a      	ldr	r2, [r3, #4]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	885b      	ldrh	r3, [r3, #2]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011c2e:	fb03 f101 	mul.w	r1, r3, r1
 8011c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c36:	440b      	add	r3, r1
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011c48:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011c4c:	eeb0 7ae7 	vabs.f32	s14, s15
 8011c50:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011c54:	eef0 7ae7 	vabs.f32	s15, s15
 8011c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c60:	dd06      	ble.n	8011c70 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8011c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8011c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011c74:	3301      	adds	r3, #1
 8011c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011c7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d3cd      	bcc.n	8011c20 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8011c84:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011c88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c90:	f000 809b 	beq.w	8011dca <arm_mat_inverse_f32+0x2b4>
 8011c94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	f000 8094 	beq.w	8011dca <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	885b      	ldrh	r3, [r3, #2]
 8011cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011cc6:	fb03 f202 	mul.w	r2, r3, r2
 8011cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cce:	4413      	add	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011ce2:	fb03 f202 	mul.w	r2, r3, r2
 8011ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cea:	4413      	add	r3, r2
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011cf2:	4413      	add	r3, r2
 8011cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011cfe:	e018      	b.n	8011d32 <arm_mat_inverse_f32+0x21c>
 8011d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011d0c:	1d1a      	adds	r2, r3, #4
 8011d0e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011d1e:	1d1a      	adds	r2, r3, #4
 8011d20:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011d24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d26:	601a      	str	r2, [r3, #0]
 8011d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011d32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	dbe1      	blt.n	8011d00 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	885b      	ldrh	r3, [r3, #2]
 8011d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8011d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d5a:	fb02 f303 	mul.w	r3, r2, r3
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011d64:	4413      	add	r3, r2
 8011d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011d70:	fb02 f303 	mul.w	r3, r2, r3
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d80:	2300      	movs	r3, #0
 8011d82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011d86:	e018      	b.n	8011dba <arm_mat_inverse_f32+0x2a4>
 8011d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d94:	1d1a      	adds	r2, r3, #4
 8011d96:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011d9e:	6812      	ldr	r2, [r2, #0]
 8011da0:	601a      	str	r2, [r3, #0]
 8011da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011da6:	1d1a      	adds	r2, r3, #4
 8011da8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011dae:	601a      	str	r2, [r3, #0]
 8011db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011db4:	3301      	adds	r3, #1
 8011db6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	dbe1      	blt.n	8011d88 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8011dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011dce:	2b01      	cmp	r3, #1
 8011dd0:	d009      	beq.n	8011de6 <arm_mat_inverse_f32+0x2d0>
 8011dd2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011dd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dde:	d102      	bne.n	8011de6 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011de0:	f06f 0304 	mvn.w	r3, #4
 8011de4:	e208      	b.n	80121f8 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8011de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011dea:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8011dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011df2:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	885b      	ldrh	r3, [r3, #2]
 8011e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e12:	fb03 f202 	mul.w	r2, r3, r2
 8011e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011e1a:	4413      	add	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011e22:	4413      	add	r3, r2
 8011e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011e2e:	e011      	b.n	8011e54 <arm_mat_inverse_f32+0x33e>
 8011e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011e34:	1d1a      	adds	r2, r3, #4
 8011e36:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011e3a:	ed93 7a00 	vldr	s14, [r3]
 8011e3e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e46:	edc3 7a00 	vstr	s15, [r3]
 8011e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011e4e:	3301      	adds	r3, #1
 8011e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011e54:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	dbe8      	blt.n	8011e30 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	885b      	ldrh	r3, [r3, #2]
 8011e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e74:	fb02 f303 	mul.w	r3, r2, r3
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011e7e:	4413      	add	r3, r2
 8011e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011e84:	2300      	movs	r3, #0
 8011e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011e8a:	e011      	b.n	8011eb0 <arm_mat_inverse_f32+0x39a>
 8011e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011e90:	1d1a      	adds	r2, r3, #4
 8011e92:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8011e96:	ed93 7a00 	vldr	s14, [r3]
 8011e9a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ea2:	edc3 7a00 	vstr	s15, [r3]
 8011ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011eaa:	3301      	adds	r3, #1
 8011eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011eb0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	dbe8      	blt.n	8011e8c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011ec0:	e0ae      	b.n	8012020 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	885b      	ldrh	r3, [r3, #2]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011ed0:	fb03 f101 	mul.w	r1, r3, r1
 8011ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011ed8:	440b      	add	r3, r1
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	4413      	add	r3, r2
 8011ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	885b      	ldrh	r3, [r3, #2]
 8011f00:	617b      	str	r3, [r7, #20]
 8011f02:	697a      	ldr	r2, [r7, #20]
 8011f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	613b      	str	r3, [r7, #16]
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011f12:	fb03 f202 	mul.w	r2, r3, r2
 8011f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f1a:	4413      	add	r3, r2
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011f22:	4413      	add	r3, r2
 8011f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f2c:	fb03 f202 	mul.w	r2, r3, r2
 8011f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f34:	4413      	add	r3, r2
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011f3c:	4413      	add	r3, r2
 8011f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011f42:	2300      	movs	r3, #0
 8011f44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011f48:	e01a      	b.n	8011f80 <arm_mat_inverse_f32+0x46a>
 8011f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f4e:	1d1a      	adds	r2, r3, #4
 8011f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f54:	ed93 7a00 	vldr	s14, [r3]
 8011f58:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f64:	1d1a      	adds	r2, r3, #4
 8011f66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011f6a:	ed93 7a00 	vldr	s14, [r3]
 8011f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f72:	edc3 7a00 	vstr	s15, [r3]
 8011f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011f80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	dbdf      	blt.n	8011f4a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	885b      	ldrh	r3, [r3, #2]
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	60bb      	str	r3, [r7, #8]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011faa:	fb02 f303 	mul.w	r3, r2, r3
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011fb4:	4413      	add	r3, r2
 8011fb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011fbe:	fb02 f303 	mul.w	r3, r2, r3
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011fc8:	4413      	add	r3, r2
 8011fca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011fce:	2300      	movs	r3, #0
 8011fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011fd4:	e01a      	b.n	801200c <arm_mat_inverse_f32+0x4f6>
 8011fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011fda:	1d1a      	adds	r2, r3, #4
 8011fdc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011fe0:	ed93 7a00 	vldr	s14, [r3]
 8011fe4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ff0:	1d1a      	adds	r2, r3, #4
 8011ff2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011ff6:	ed93 7a00 	vldr	s14, [r3]
 8011ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ffe:	edc3 7a00 	vstr	s15, [r3]
 8012002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012006:	3301      	adds	r3, #1
 8012008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801200c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	429a      	cmp	r2, r3
 8012014:	dbdf      	blt.n	8011fd6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8012016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801201a:	3301      	adds	r3, #1
 801201c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012020:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012026:	429a      	cmp	r2, r3
 8012028:	f4ff af4b 	bcc.w	8011ec2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801202c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801202e:	3301      	adds	r3, #1
 8012030:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012034:	e092      	b.n	801215c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	685a      	ldr	r2, [r3, #4]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	885b      	ldrh	r3, [r3, #2]
 801203e:	4619      	mov	r1, r3
 8012040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012044:	fb03 f101 	mul.w	r1, r3, r1
 8012048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801204c:	440b      	add	r3, r1
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	4413      	add	r3, r2
 8012052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	677b      	str	r3, [r7, #116]	@ 0x74
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	885b      	ldrh	r3, [r3, #2]
 8012070:	627b      	str	r3, [r7, #36]	@ 0x24
 8012072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012078:	1ad3      	subs	r3, r2, r3
 801207a:	623b      	str	r3, [r7, #32]
 801207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012082:	fb03 f202 	mul.w	r2, r3, r2
 8012086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801208a:	4413      	add	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012090:	4413      	add	r3, r2
 8012092:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012096:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012098:	fb03 f202 	mul.w	r2, r3, r2
 801209c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80120a0:	4413      	add	r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80120a6:	4413      	add	r3, r2
 80120a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80120aa:	2300      	movs	r3, #0
 80120ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80120ae:	e014      	b.n	80120da <arm_mat_inverse_f32+0x5c4>
 80120b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80120b2:	1d1a      	adds	r2, r3, #4
 80120b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80120b6:	ed93 7a00 	vldr	s14, [r3]
 80120ba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80120be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80120c4:	1d1a      	adds	r2, r3, #4
 80120c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80120c8:	ed93 7a00 	vldr	s14, [r3]
 80120cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120d0:	edc3 7a00 	vstr	s15, [r3]
 80120d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80120d6:	3301      	adds	r3, #1
 80120d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80120da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	429a      	cmp	r2, r3
 80120e0:	dbe6      	blt.n	80120b0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	885b      	ldrh	r3, [r3, #2]
 80120f2:	61fb      	str	r3, [r7, #28]
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	61bb      	str	r3, [r7, #24]
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80120fe:	fb02 f303 	mul.w	r3, r2, r3
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012106:	4413      	add	r3, r2
 8012108:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801210e:	fb02 f303 	mul.w	r3, r2, r3
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012116:	4413      	add	r3, r2
 8012118:	66bb      	str	r3, [r7, #104]	@ 0x68
 801211a:	2300      	movs	r3, #0
 801211c:	673b      	str	r3, [r7, #112]	@ 0x70
 801211e:	e014      	b.n	801214a <arm_mat_inverse_f32+0x634>
 8012120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012122:	1d1a      	adds	r2, r3, #4
 8012124:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012126:	ed93 7a00 	vldr	s14, [r3]
 801212a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012134:	1d1a      	adds	r2, r3, #4
 8012136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012138:	ed93 7a00 	vldr	s14, [r3]
 801213c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012140:	edc3 7a00 	vstr	s15, [r3]
 8012144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012146:	3301      	adds	r3, #1
 8012148:	673b      	str	r3, [r7, #112]	@ 0x70
 801214a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	429a      	cmp	r2, r3
 8012150:	dbe6      	blt.n	8012120 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012156:	3301      	adds	r3, #1
 8012158:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801215c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012162:	429a      	cmp	r2, r3
 8012164:	f4ff af67 	bcc.w	8012036 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801216c:	3301      	adds	r3, #1
 801216e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012178:	429a      	cmp	r2, r3
 801217a:	f4ff ad32 	bcc.w	8011be2 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801217e:	2300      	movs	r3, #0
 8012180:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012188:	2b01      	cmp	r3, #1
 801218a:	d033      	beq.n	80121f4 <arm_mat_inverse_f32+0x6de>
 801218c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012190:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	d12c      	bne.n	80121f4 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80121a0:	2300      	movs	r3, #0
 80121a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80121a6:	e010      	b.n	80121ca <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80121a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80121b0:	4413      	add	r3, r2
 80121b2:	edd3 7a00 	vldr	s15, [r3]
 80121b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121be:	d10d      	bne.n	80121dc <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80121c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80121c4:	3301      	adds	r3, #1
 80121c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80121ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80121ce:	fb02 f303 	mul.w	r3, r2, r3
 80121d2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d3e6      	bcc.n	80121a8 <arm_mat_inverse_f32+0x692>
 80121da:	e000      	b.n	80121de <arm_mat_inverse_f32+0x6c8>
            break;
 80121dc:	bf00      	nop
      }

      if (i == numRows * numCols)
 80121de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d102      	bne.n	80121f4 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80121ee:	23fb      	movs	r3, #251	@ 0xfb
 80121f0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 80121f4:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	37ec      	adds	r7, #236	@ 0xec
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012204:	b480      	push	{r7}
 8012206:	b093      	sub	sp, #76	@ 0x4c
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	885b      	ldrh	r3, [r3, #2]
 8012238:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	885b      	ldrh	r3, [r3, #2]
 801223e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8012240:	2300      	movs	r3, #0
 8012242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012244:	8b7b      	ldrh	r3, [r7, #26]
 8012246:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	69fa      	ldr	r2, [r7, #28]
 801224e:	4413      	add	r3, r2
 8012250:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012252:	8b3b      	ldrh	r3, [r7, #24]
 8012254:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 801225c:	f04f 0300 	mov.w	r3, #0
 8012260:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012264:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012266:	8afb      	ldrh	r3, [r7, #22]
 8012268:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 801226a:	e017      	b.n	801229c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 801226c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801226e:	1d1a      	adds	r2, r3, #4
 8012270:	647a      	str	r2, [r7, #68]	@ 0x44
 8012272:	ed93 7a00 	vldr	s14, [r3]
 8012276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012278:	edd3 7a00 	vldr	s15, [r3]
 801227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012280:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012288:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 801228c:	8b3b      	ldrh	r3, [r7, #24]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012292:	4413      	add	r3, r2
 8012294:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012298:	3b01      	subs	r3, #1
 801229a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 801229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1e4      	bne.n	801226c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80122a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a4:	1d1a      	adds	r2, r3, #4
 80122a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80122a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122aa:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80122ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ae:	3b01      	subs	r3, #1
 80122b0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80122b2:	8b3a      	ldrh	r2, [r7, #24]
 80122b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	6a3a      	ldr	r2, [r7, #32]
 80122bc:	4413      	add	r3, r2
 80122be:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 80122c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1ca      	bne.n	801225c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80122c6:	8b3b      	ldrh	r3, [r7, #24]
 80122c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122ca:	4413      	add	r3, r2
 80122cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 80122ce:	8afb      	ldrh	r3, [r7, #22]
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122d4:	4413      	add	r3, r2
 80122d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 80122d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122da:	3b01      	subs	r3, #1
 80122dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 80122de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d1b1      	bne.n	8012248 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80122e4:	2300      	movs	r3, #0
 80122e6:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80122e8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	374c      	adds	r7, #76	@ 0x4c
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b08b      	sub	sp, #44	@ 0x2c
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	ed87 0a02 	vstr	s0, [r7, #8]
 8012304:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	461a      	mov	r2, r3
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	885b      	ldrh	r3, [r3, #2]
 801231c:	fb02 f303 	mul.w	r3, r2, r3
 8012320:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012326:	e010      	b.n	801234a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232a:	1d1a      	adds	r2, r3, #4
 801232c:	627a      	str	r2, [r7, #36]	@ 0x24
 801232e:	ed93 7a00 	vldr	s14, [r3]
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	1d1a      	adds	r2, r3, #4
 8012336:	623a      	str	r2, [r7, #32]
 8012338:	edd7 7a02 	vldr	s15, [r7, #8]
 801233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012340:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	3b01      	subs	r3, #1
 8012348:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801234a:	69fb      	ldr	r3, [r7, #28]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d1eb      	bne.n	8012328 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012350:	2300      	movs	r3, #0
 8012352:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012358:	4618      	mov	r0, r3
 801235a:	372c      	adds	r7, #44	@ 0x2c
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012364:	b480      	push	{r7}
 8012366:	b08b      	sub	sp, #44	@ 0x2c
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	881b      	ldrh	r3, [r3, #0]
 8012386:	461a      	mov	r2, r3
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	885b      	ldrh	r3, [r3, #2]
 801238c:	fb02 f303 	mul.w	r3, r2, r3
 8012390:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012396:	e013      	b.n	80123c0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239a:	1d1a      	adds	r2, r3, #4
 801239c:	627a      	str	r2, [r7, #36]	@ 0x24
 801239e:	ed93 7a00 	vldr	s14, [r3]
 80123a2:	6a3b      	ldr	r3, [r7, #32]
 80123a4:	1d1a      	adds	r2, r3, #4
 80123a6:	623a      	str	r2, [r7, #32]
 80123a8:	edd3 7a00 	vldr	s15, [r3]
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	1d1a      	adds	r2, r3, #4
 80123b0:	61fa      	str	r2, [r7, #28]
 80123b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123b6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	3b01      	subs	r3, #1
 80123be:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80123c0:	69bb      	ldr	r3, [r7, #24]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1e8      	bne.n	8012398 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80123c6:	2300      	movs	r3, #0
 80123c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80123ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	372c      	adds	r7, #44	@ 0x2c
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr

080123da <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80123da:	b480      	push	{r7}
 80123dc:	b08b      	sub	sp, #44	@ 0x2c
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	881b      	ldrh	r3, [r3, #0]
 80123f4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	885b      	ldrh	r3, [r3, #2]
 80123fa:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80123fc:	89fb      	ldrh	r3, [r7, #14]
 80123fe:	61bb      	str	r3, [r7, #24]
 8012400:	2300      	movs	r3, #0
 8012402:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	693a      	ldr	r2, [r7, #16]
 801240a:	4413      	add	r3, r2
 801240c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 801240e:	89bb      	ldrh	r3, [r7, #12]
 8012410:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012412:	e00d      	b.n	8012430 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012416:	1d1a      	adds	r2, r3, #4
 8012418:	627a      	str	r2, [r7, #36]	@ 0x24
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	6a3b      	ldr	r3, [r7, #32]
 801241e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012420:	89fb      	ldrh	r3, [r7, #14]
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	6a3a      	ldr	r2, [r7, #32]
 8012426:	4413      	add	r3, r2
 8012428:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	3b01      	subs	r3, #1
 801242e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1ee      	bne.n	8012414 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	3301      	adds	r3, #1
 801243a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	3b01      	subs	r3, #1
 8012440:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d1dd      	bne.n	8012404 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012448:	2300      	movs	r3, #0
 801244a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801244c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012450:	4618      	mov	r0, r3
 8012452:	372c      	adds	r7, #44	@ 0x2c
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <malloc>:
 801245c:	4b02      	ldr	r3, [pc, #8]	@ (8012468 <malloc+0xc>)
 801245e:	4601      	mov	r1, r0
 8012460:	6818      	ldr	r0, [r3, #0]
 8012462:	f000 b825 	b.w	80124b0 <_malloc_r>
 8012466:	bf00      	nop
 8012468:	20000344 	.word	0x20000344

0801246c <sbrk_aligned>:
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	4e0f      	ldr	r6, [pc, #60]	@ (80124ac <sbrk_aligned+0x40>)
 8012470:	460c      	mov	r4, r1
 8012472:	6831      	ldr	r1, [r6, #0]
 8012474:	4605      	mov	r5, r0
 8012476:	b911      	cbnz	r1, 801247e <sbrk_aligned+0x12>
 8012478:	f000 f8ae 	bl	80125d8 <_sbrk_r>
 801247c:	6030      	str	r0, [r6, #0]
 801247e:	4621      	mov	r1, r4
 8012480:	4628      	mov	r0, r5
 8012482:	f000 f8a9 	bl	80125d8 <_sbrk_r>
 8012486:	1c43      	adds	r3, r0, #1
 8012488:	d103      	bne.n	8012492 <sbrk_aligned+0x26>
 801248a:	f04f 34ff 	mov.w	r4, #4294967295
 801248e:	4620      	mov	r0, r4
 8012490:	bd70      	pop	{r4, r5, r6, pc}
 8012492:	1cc4      	adds	r4, r0, #3
 8012494:	f024 0403 	bic.w	r4, r4, #3
 8012498:	42a0      	cmp	r0, r4
 801249a:	d0f8      	beq.n	801248e <sbrk_aligned+0x22>
 801249c:	1a21      	subs	r1, r4, r0
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f89a 	bl	80125d8 <_sbrk_r>
 80124a4:	3001      	adds	r0, #1
 80124a6:	d1f2      	bne.n	801248e <sbrk_aligned+0x22>
 80124a8:	e7ef      	b.n	801248a <sbrk_aligned+0x1e>
 80124aa:	bf00      	nop
 80124ac:	20002428 	.word	0x20002428

080124b0 <_malloc_r>:
 80124b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b4:	1ccd      	adds	r5, r1, #3
 80124b6:	f025 0503 	bic.w	r5, r5, #3
 80124ba:	3508      	adds	r5, #8
 80124bc:	2d0c      	cmp	r5, #12
 80124be:	bf38      	it	cc
 80124c0:	250c      	movcc	r5, #12
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	4606      	mov	r6, r0
 80124c6:	db01      	blt.n	80124cc <_malloc_r+0x1c>
 80124c8:	42a9      	cmp	r1, r5
 80124ca:	d904      	bls.n	80124d6 <_malloc_r+0x26>
 80124cc:	230c      	movs	r3, #12
 80124ce:	6033      	str	r3, [r6, #0]
 80124d0:	2000      	movs	r0, #0
 80124d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80125ac <_malloc_r+0xfc>
 80124da:	f000 f869 	bl	80125b0 <__malloc_lock>
 80124de:	f8d8 3000 	ldr.w	r3, [r8]
 80124e2:	461c      	mov	r4, r3
 80124e4:	bb44      	cbnz	r4, 8012538 <_malloc_r+0x88>
 80124e6:	4629      	mov	r1, r5
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7ff ffbf 	bl	801246c <sbrk_aligned>
 80124ee:	1c43      	adds	r3, r0, #1
 80124f0:	4604      	mov	r4, r0
 80124f2:	d158      	bne.n	80125a6 <_malloc_r+0xf6>
 80124f4:	f8d8 4000 	ldr.w	r4, [r8]
 80124f8:	4627      	mov	r7, r4
 80124fa:	2f00      	cmp	r7, #0
 80124fc:	d143      	bne.n	8012586 <_malloc_r+0xd6>
 80124fe:	2c00      	cmp	r4, #0
 8012500:	d04b      	beq.n	801259a <_malloc_r+0xea>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	4639      	mov	r1, r7
 8012506:	4630      	mov	r0, r6
 8012508:	eb04 0903 	add.w	r9, r4, r3
 801250c:	f000 f864 	bl	80125d8 <_sbrk_r>
 8012510:	4581      	cmp	r9, r0
 8012512:	d142      	bne.n	801259a <_malloc_r+0xea>
 8012514:	6821      	ldr	r1, [r4, #0]
 8012516:	1a6d      	subs	r5, r5, r1
 8012518:	4629      	mov	r1, r5
 801251a:	4630      	mov	r0, r6
 801251c:	f7ff ffa6 	bl	801246c <sbrk_aligned>
 8012520:	3001      	adds	r0, #1
 8012522:	d03a      	beq.n	801259a <_malloc_r+0xea>
 8012524:	6823      	ldr	r3, [r4, #0]
 8012526:	442b      	add	r3, r5
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	f8d8 3000 	ldr.w	r3, [r8]
 801252e:	685a      	ldr	r2, [r3, #4]
 8012530:	bb62      	cbnz	r2, 801258c <_malloc_r+0xdc>
 8012532:	f8c8 7000 	str.w	r7, [r8]
 8012536:	e00f      	b.n	8012558 <_malloc_r+0xa8>
 8012538:	6822      	ldr	r2, [r4, #0]
 801253a:	1b52      	subs	r2, r2, r5
 801253c:	d420      	bmi.n	8012580 <_malloc_r+0xd0>
 801253e:	2a0b      	cmp	r2, #11
 8012540:	d917      	bls.n	8012572 <_malloc_r+0xc2>
 8012542:	1961      	adds	r1, r4, r5
 8012544:	42a3      	cmp	r3, r4
 8012546:	6025      	str	r5, [r4, #0]
 8012548:	bf18      	it	ne
 801254a:	6059      	strne	r1, [r3, #4]
 801254c:	6863      	ldr	r3, [r4, #4]
 801254e:	bf08      	it	eq
 8012550:	f8c8 1000 	streq.w	r1, [r8]
 8012554:	5162      	str	r2, [r4, r5]
 8012556:	604b      	str	r3, [r1, #4]
 8012558:	4630      	mov	r0, r6
 801255a:	f000 f82f 	bl	80125bc <__malloc_unlock>
 801255e:	f104 000b 	add.w	r0, r4, #11
 8012562:	1d23      	adds	r3, r4, #4
 8012564:	f020 0007 	bic.w	r0, r0, #7
 8012568:	1ac2      	subs	r2, r0, r3
 801256a:	bf1c      	itt	ne
 801256c:	1a1b      	subne	r3, r3, r0
 801256e:	50a3      	strne	r3, [r4, r2]
 8012570:	e7af      	b.n	80124d2 <_malloc_r+0x22>
 8012572:	6862      	ldr	r2, [r4, #4]
 8012574:	42a3      	cmp	r3, r4
 8012576:	bf0c      	ite	eq
 8012578:	f8c8 2000 	streq.w	r2, [r8]
 801257c:	605a      	strne	r2, [r3, #4]
 801257e:	e7eb      	b.n	8012558 <_malloc_r+0xa8>
 8012580:	4623      	mov	r3, r4
 8012582:	6864      	ldr	r4, [r4, #4]
 8012584:	e7ae      	b.n	80124e4 <_malloc_r+0x34>
 8012586:	463c      	mov	r4, r7
 8012588:	687f      	ldr	r7, [r7, #4]
 801258a:	e7b6      	b.n	80124fa <_malloc_r+0x4a>
 801258c:	461a      	mov	r2, r3
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	42a3      	cmp	r3, r4
 8012592:	d1fb      	bne.n	801258c <_malloc_r+0xdc>
 8012594:	2300      	movs	r3, #0
 8012596:	6053      	str	r3, [r2, #4]
 8012598:	e7de      	b.n	8012558 <_malloc_r+0xa8>
 801259a:	230c      	movs	r3, #12
 801259c:	6033      	str	r3, [r6, #0]
 801259e:	4630      	mov	r0, r6
 80125a0:	f000 f80c 	bl	80125bc <__malloc_unlock>
 80125a4:	e794      	b.n	80124d0 <_malloc_r+0x20>
 80125a6:	6005      	str	r5, [r0, #0]
 80125a8:	e7d6      	b.n	8012558 <_malloc_r+0xa8>
 80125aa:	bf00      	nop
 80125ac:	2000242c 	.word	0x2000242c

080125b0 <__malloc_lock>:
 80125b0:	4801      	ldr	r0, [pc, #4]	@ (80125b8 <__malloc_lock+0x8>)
 80125b2:	f000 b84b 	b.w	801264c <__retarget_lock_acquire_recursive>
 80125b6:	bf00      	nop
 80125b8:	2000256c 	.word	0x2000256c

080125bc <__malloc_unlock>:
 80125bc:	4801      	ldr	r0, [pc, #4]	@ (80125c4 <__malloc_unlock+0x8>)
 80125be:	f000 b846 	b.w	801264e <__retarget_lock_release_recursive>
 80125c2:	bf00      	nop
 80125c4:	2000256c 	.word	0x2000256c

080125c8 <memset>:
 80125c8:	4402      	add	r2, r0
 80125ca:	4603      	mov	r3, r0
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d100      	bne.n	80125d2 <memset+0xa>
 80125d0:	4770      	bx	lr
 80125d2:	f803 1b01 	strb.w	r1, [r3], #1
 80125d6:	e7f9      	b.n	80125cc <memset+0x4>

080125d8 <_sbrk_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4d06      	ldr	r5, [pc, #24]	@ (80125f4 <_sbrk_r+0x1c>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	f7f7 f846 	bl	8009674 <_sbrk>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_sbrk_r+0x1a>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_sbrk_r+0x1a>
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	20002568 	.word	0x20002568

080125f8 <__errno>:
 80125f8:	4b01      	ldr	r3, [pc, #4]	@ (8012600 <__errno+0x8>)
 80125fa:	6818      	ldr	r0, [r3, #0]
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	20000344 	.word	0x20000344

08012604 <__libc_init_array>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4d0d      	ldr	r5, [pc, #52]	@ (801263c <__libc_init_array+0x38>)
 8012608:	4c0d      	ldr	r4, [pc, #52]	@ (8012640 <__libc_init_array+0x3c>)
 801260a:	1b64      	subs	r4, r4, r5
 801260c:	10a4      	asrs	r4, r4, #2
 801260e:	2600      	movs	r6, #0
 8012610:	42a6      	cmp	r6, r4
 8012612:	d109      	bne.n	8012628 <__libc_init_array+0x24>
 8012614:	4d0b      	ldr	r5, [pc, #44]	@ (8012644 <__libc_init_array+0x40>)
 8012616:	4c0c      	ldr	r4, [pc, #48]	@ (8012648 <__libc_init_array+0x44>)
 8012618:	f001 ff32 	bl	8014480 <_init>
 801261c:	1b64      	subs	r4, r4, r5
 801261e:	10a4      	asrs	r4, r4, #2
 8012620:	2600      	movs	r6, #0
 8012622:	42a6      	cmp	r6, r4
 8012624:	d105      	bne.n	8012632 <__libc_init_array+0x2e>
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	f855 3b04 	ldr.w	r3, [r5], #4
 801262c:	4798      	blx	r3
 801262e:	3601      	adds	r6, #1
 8012630:	e7ee      	b.n	8012610 <__libc_init_array+0xc>
 8012632:	f855 3b04 	ldr.w	r3, [r5], #4
 8012636:	4798      	blx	r3
 8012638:	3601      	adds	r6, #1
 801263a:	e7f2      	b.n	8012622 <__libc_init_array+0x1e>
 801263c:	08014b00 	.word	0x08014b00
 8012640:	08014b00 	.word	0x08014b00
 8012644:	08014b00 	.word	0x08014b00
 8012648:	08014b04 	.word	0x08014b04

0801264c <__retarget_lock_acquire_recursive>:
 801264c:	4770      	bx	lr

0801264e <__retarget_lock_release_recursive>:
 801264e:	4770      	bx	lr

08012650 <memcpy>:
 8012650:	440a      	add	r2, r1
 8012652:	4291      	cmp	r1, r2
 8012654:	f100 33ff 	add.w	r3, r0, #4294967295
 8012658:	d100      	bne.n	801265c <memcpy+0xc>
 801265a:	4770      	bx	lr
 801265c:	b510      	push	{r4, lr}
 801265e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012666:	4291      	cmp	r1, r2
 8012668:	d1f9      	bne.n	801265e <memcpy+0xe>
 801266a:	bd10      	pop	{r4, pc}
 801266c:	0000      	movs	r0, r0
	...

08012670 <cos>:
 8012670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012672:	ec53 2b10 	vmov	r2, r3, d0
 8012676:	4826      	ldr	r0, [pc, #152]	@ (8012710 <cos+0xa0>)
 8012678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801267c:	4281      	cmp	r1, r0
 801267e:	d806      	bhi.n	801268e <cos+0x1e>
 8012680:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012708 <cos+0x98>
 8012684:	b005      	add	sp, #20
 8012686:	f85d eb04 	ldr.w	lr, [sp], #4
 801268a:	f000 b9bd 	b.w	8012a08 <__kernel_cos>
 801268e:	4821      	ldr	r0, [pc, #132]	@ (8012714 <cos+0xa4>)
 8012690:	4281      	cmp	r1, r0
 8012692:	d908      	bls.n	80126a6 <cos+0x36>
 8012694:	4610      	mov	r0, r2
 8012696:	4619      	mov	r1, r3
 8012698:	f7ed fdc2 	bl	8000220 <__aeabi_dsub>
 801269c:	ec41 0b10 	vmov	d0, r0, r1
 80126a0:	b005      	add	sp, #20
 80126a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80126a6:	4668      	mov	r0, sp
 80126a8:	f000 fb32 	bl	8012d10 <__ieee754_rem_pio2>
 80126ac:	f000 0003 	and.w	r0, r0, #3
 80126b0:	2801      	cmp	r0, #1
 80126b2:	d00b      	beq.n	80126cc <cos+0x5c>
 80126b4:	2802      	cmp	r0, #2
 80126b6:	d015      	beq.n	80126e4 <cos+0x74>
 80126b8:	b9d8      	cbnz	r0, 80126f2 <cos+0x82>
 80126ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126be:	ed9d 0b00 	vldr	d0, [sp]
 80126c2:	f000 f9a1 	bl	8012a08 <__kernel_cos>
 80126c6:	ec51 0b10 	vmov	r0, r1, d0
 80126ca:	e7e7      	b.n	801269c <cos+0x2c>
 80126cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126d0:	ed9d 0b00 	vldr	d0, [sp]
 80126d4:	f000 fa60 	bl	8012b98 <__kernel_sin>
 80126d8:	ec53 2b10 	vmov	r2, r3, d0
 80126dc:	4610      	mov	r0, r2
 80126de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80126e2:	e7db      	b.n	801269c <cos+0x2c>
 80126e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126e8:	ed9d 0b00 	vldr	d0, [sp]
 80126ec:	f000 f98c 	bl	8012a08 <__kernel_cos>
 80126f0:	e7f2      	b.n	80126d8 <cos+0x68>
 80126f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126f6:	ed9d 0b00 	vldr	d0, [sp]
 80126fa:	2001      	movs	r0, #1
 80126fc:	f000 fa4c 	bl	8012b98 <__kernel_sin>
 8012700:	e7e1      	b.n	80126c6 <cos+0x56>
 8012702:	bf00      	nop
 8012704:	f3af 8000 	nop.w
	...
 8012710:	3fe921fb 	.word	0x3fe921fb
 8012714:	7fefffff 	.word	0x7fefffff

08012718 <sin>:
 8012718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801271a:	ec53 2b10 	vmov	r2, r3, d0
 801271e:	4826      	ldr	r0, [pc, #152]	@ (80127b8 <sin+0xa0>)
 8012720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012724:	4281      	cmp	r1, r0
 8012726:	d807      	bhi.n	8012738 <sin+0x20>
 8012728:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80127b0 <sin+0x98>
 801272c:	2000      	movs	r0, #0
 801272e:	b005      	add	sp, #20
 8012730:	f85d eb04 	ldr.w	lr, [sp], #4
 8012734:	f000 ba30 	b.w	8012b98 <__kernel_sin>
 8012738:	4820      	ldr	r0, [pc, #128]	@ (80127bc <sin+0xa4>)
 801273a:	4281      	cmp	r1, r0
 801273c:	d908      	bls.n	8012750 <sin+0x38>
 801273e:	4610      	mov	r0, r2
 8012740:	4619      	mov	r1, r3
 8012742:	f7ed fd6d 	bl	8000220 <__aeabi_dsub>
 8012746:	ec41 0b10 	vmov	d0, r0, r1
 801274a:	b005      	add	sp, #20
 801274c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012750:	4668      	mov	r0, sp
 8012752:	f000 fadd 	bl	8012d10 <__ieee754_rem_pio2>
 8012756:	f000 0003 	and.w	r0, r0, #3
 801275a:	2801      	cmp	r0, #1
 801275c:	d00c      	beq.n	8012778 <sin+0x60>
 801275e:	2802      	cmp	r0, #2
 8012760:	d011      	beq.n	8012786 <sin+0x6e>
 8012762:	b9e8      	cbnz	r0, 80127a0 <sin+0x88>
 8012764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012768:	ed9d 0b00 	vldr	d0, [sp]
 801276c:	2001      	movs	r0, #1
 801276e:	f000 fa13 	bl	8012b98 <__kernel_sin>
 8012772:	ec51 0b10 	vmov	r0, r1, d0
 8012776:	e7e6      	b.n	8012746 <sin+0x2e>
 8012778:	ed9d 1b02 	vldr	d1, [sp, #8]
 801277c:	ed9d 0b00 	vldr	d0, [sp]
 8012780:	f000 f942 	bl	8012a08 <__kernel_cos>
 8012784:	e7f5      	b.n	8012772 <sin+0x5a>
 8012786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801278a:	ed9d 0b00 	vldr	d0, [sp]
 801278e:	2001      	movs	r0, #1
 8012790:	f000 fa02 	bl	8012b98 <__kernel_sin>
 8012794:	ec53 2b10 	vmov	r2, r3, d0
 8012798:	4610      	mov	r0, r2
 801279a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801279e:	e7d2      	b.n	8012746 <sin+0x2e>
 80127a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80127a4:	ed9d 0b00 	vldr	d0, [sp]
 80127a8:	f000 f92e 	bl	8012a08 <__kernel_cos>
 80127ac:	e7f2      	b.n	8012794 <sin+0x7c>
 80127ae:	bf00      	nop
	...
 80127b8:	3fe921fb 	.word	0x3fe921fb
 80127bc:	7fefffff 	.word	0x7fefffff

080127c0 <fmodf>:
 80127c0:	b508      	push	{r3, lr}
 80127c2:	ed2d 8b02 	vpush	{d8}
 80127c6:	eef0 8a40 	vmov.f32	s17, s0
 80127ca:	eeb0 8a60 	vmov.f32	s16, s1
 80127ce:	f000 fd43 	bl	8013258 <__ieee754_fmodf>
 80127d2:	eef4 8a48 	vcmp.f32	s17, s16
 80127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127da:	d60c      	bvs.n	80127f6 <fmodf+0x36>
 80127dc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80127fc <fmodf+0x3c>
 80127e0:	eeb4 8a68 	vcmp.f32	s16, s17
 80127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e8:	d105      	bne.n	80127f6 <fmodf+0x36>
 80127ea:	f7ff ff05 	bl	80125f8 <__errno>
 80127ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80127f2:	2321      	movs	r3, #33	@ 0x21
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	ecbd 8b02 	vpop	{d8}
 80127fa:	bd08      	pop	{r3, pc}
 80127fc:	00000000 	.word	0x00000000

08012800 <sqrtf>:
 8012800:	b508      	push	{r3, lr}
 8012802:	ed2d 8b02 	vpush	{d8}
 8012806:	eeb0 8a40 	vmov.f32	s16, s0
 801280a:	f000 f8f7 	bl	80129fc <__ieee754_sqrtf>
 801280e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012816:	d60c      	bvs.n	8012832 <sqrtf+0x32>
 8012818:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012838 <sqrtf+0x38>
 801281c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012824:	d505      	bpl.n	8012832 <sqrtf+0x32>
 8012826:	f7ff fee7 	bl	80125f8 <__errno>
 801282a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801282e:	2321      	movs	r3, #33	@ 0x21
 8012830:	6003      	str	r3, [r0, #0]
 8012832:	ecbd 8b02 	vpop	{d8}
 8012836:	bd08      	pop	{r3, pc}
 8012838:	00000000 	.word	0x00000000

0801283c <cosf>:
 801283c:	ee10 3a10 	vmov	r3, s0
 8012840:	b507      	push	{r0, r1, r2, lr}
 8012842:	4a1e      	ldr	r2, [pc, #120]	@ (80128bc <cosf+0x80>)
 8012844:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012848:	4293      	cmp	r3, r2
 801284a:	d806      	bhi.n	801285a <cosf+0x1e>
 801284c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80128c0 <cosf+0x84>
 8012850:	b003      	add	sp, #12
 8012852:	f85d eb04 	ldr.w	lr, [sp], #4
 8012856:	f000 bc5f 	b.w	8013118 <__kernel_cosf>
 801285a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801285e:	d304      	bcc.n	801286a <cosf+0x2e>
 8012860:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012864:	b003      	add	sp, #12
 8012866:	f85d fb04 	ldr.w	pc, [sp], #4
 801286a:	4668      	mov	r0, sp
 801286c:	f000 fd76 	bl	801335c <__ieee754_rem_pio2f>
 8012870:	f000 0003 	and.w	r0, r0, #3
 8012874:	2801      	cmp	r0, #1
 8012876:	d009      	beq.n	801288c <cosf+0x50>
 8012878:	2802      	cmp	r0, #2
 801287a:	d010      	beq.n	801289e <cosf+0x62>
 801287c:	b9b0      	cbnz	r0, 80128ac <cosf+0x70>
 801287e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012882:	ed9d 0a00 	vldr	s0, [sp]
 8012886:	f000 fc47 	bl	8013118 <__kernel_cosf>
 801288a:	e7eb      	b.n	8012864 <cosf+0x28>
 801288c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012890:	ed9d 0a00 	vldr	s0, [sp]
 8012894:	f000 fc98 	bl	80131c8 <__kernel_sinf>
 8012898:	eeb1 0a40 	vneg.f32	s0, s0
 801289c:	e7e2      	b.n	8012864 <cosf+0x28>
 801289e:	eddd 0a01 	vldr	s1, [sp, #4]
 80128a2:	ed9d 0a00 	vldr	s0, [sp]
 80128a6:	f000 fc37 	bl	8013118 <__kernel_cosf>
 80128aa:	e7f5      	b.n	8012898 <cosf+0x5c>
 80128ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80128b0:	ed9d 0a00 	vldr	s0, [sp]
 80128b4:	2001      	movs	r0, #1
 80128b6:	f000 fc87 	bl	80131c8 <__kernel_sinf>
 80128ba:	e7d3      	b.n	8012864 <cosf+0x28>
 80128bc:	3f490fd8 	.word	0x3f490fd8
 80128c0:	00000000 	.word	0x00000000

080128c4 <sinf>:
 80128c4:	ee10 3a10 	vmov	r3, s0
 80128c8:	b507      	push	{r0, r1, r2, lr}
 80128ca:	4a1f      	ldr	r2, [pc, #124]	@ (8012948 <sinf+0x84>)
 80128cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d807      	bhi.n	80128e4 <sinf+0x20>
 80128d4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801294c <sinf+0x88>
 80128d8:	2000      	movs	r0, #0
 80128da:	b003      	add	sp, #12
 80128dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80128e0:	f000 bc72 	b.w	80131c8 <__kernel_sinf>
 80128e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80128e8:	d304      	bcc.n	80128f4 <sinf+0x30>
 80128ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80128ee:	b003      	add	sp, #12
 80128f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80128f4:	4668      	mov	r0, sp
 80128f6:	f000 fd31 	bl	801335c <__ieee754_rem_pio2f>
 80128fa:	f000 0003 	and.w	r0, r0, #3
 80128fe:	2801      	cmp	r0, #1
 8012900:	d00a      	beq.n	8012918 <sinf+0x54>
 8012902:	2802      	cmp	r0, #2
 8012904:	d00f      	beq.n	8012926 <sinf+0x62>
 8012906:	b9c0      	cbnz	r0, 801293a <sinf+0x76>
 8012908:	eddd 0a01 	vldr	s1, [sp, #4]
 801290c:	ed9d 0a00 	vldr	s0, [sp]
 8012910:	2001      	movs	r0, #1
 8012912:	f000 fc59 	bl	80131c8 <__kernel_sinf>
 8012916:	e7ea      	b.n	80128ee <sinf+0x2a>
 8012918:	eddd 0a01 	vldr	s1, [sp, #4]
 801291c:	ed9d 0a00 	vldr	s0, [sp]
 8012920:	f000 fbfa 	bl	8013118 <__kernel_cosf>
 8012924:	e7e3      	b.n	80128ee <sinf+0x2a>
 8012926:	eddd 0a01 	vldr	s1, [sp, #4]
 801292a:	ed9d 0a00 	vldr	s0, [sp]
 801292e:	2001      	movs	r0, #1
 8012930:	f000 fc4a 	bl	80131c8 <__kernel_sinf>
 8012934:	eeb1 0a40 	vneg.f32	s0, s0
 8012938:	e7d9      	b.n	80128ee <sinf+0x2a>
 801293a:	eddd 0a01 	vldr	s1, [sp, #4]
 801293e:	ed9d 0a00 	vldr	s0, [sp]
 8012942:	f000 fbe9 	bl	8013118 <__kernel_cosf>
 8012946:	e7f5      	b.n	8012934 <sinf+0x70>
 8012948:	3f490fd8 	.word	0x3f490fd8
 801294c:	00000000 	.word	0x00000000

08012950 <fmaxf>:
 8012950:	b508      	push	{r3, lr}
 8012952:	ed2d 8b02 	vpush	{d8}
 8012956:	eeb0 8a40 	vmov.f32	s16, s0
 801295a:	eef0 8a60 	vmov.f32	s17, s1
 801295e:	f000 f831 	bl	80129c4 <__fpclassifyf>
 8012962:	b930      	cbnz	r0, 8012972 <fmaxf+0x22>
 8012964:	eeb0 8a68 	vmov.f32	s16, s17
 8012968:	eeb0 0a48 	vmov.f32	s0, s16
 801296c:	ecbd 8b02 	vpop	{d8}
 8012970:	bd08      	pop	{r3, pc}
 8012972:	eeb0 0a68 	vmov.f32	s0, s17
 8012976:	f000 f825 	bl	80129c4 <__fpclassifyf>
 801297a:	2800      	cmp	r0, #0
 801297c:	d0f4      	beq.n	8012968 <fmaxf+0x18>
 801297e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012986:	dded      	ble.n	8012964 <fmaxf+0x14>
 8012988:	e7ee      	b.n	8012968 <fmaxf+0x18>

0801298a <fminf>:
 801298a:	b508      	push	{r3, lr}
 801298c:	ed2d 8b02 	vpush	{d8}
 8012990:	eeb0 8a40 	vmov.f32	s16, s0
 8012994:	eef0 8a60 	vmov.f32	s17, s1
 8012998:	f000 f814 	bl	80129c4 <__fpclassifyf>
 801299c:	b930      	cbnz	r0, 80129ac <fminf+0x22>
 801299e:	eeb0 8a68 	vmov.f32	s16, s17
 80129a2:	eeb0 0a48 	vmov.f32	s0, s16
 80129a6:	ecbd 8b02 	vpop	{d8}
 80129aa:	bd08      	pop	{r3, pc}
 80129ac:	eeb0 0a68 	vmov.f32	s0, s17
 80129b0:	f000 f808 	bl	80129c4 <__fpclassifyf>
 80129b4:	2800      	cmp	r0, #0
 80129b6:	d0f4      	beq.n	80129a2 <fminf+0x18>
 80129b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80129bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c0:	d5ed      	bpl.n	801299e <fminf+0x14>
 80129c2:	e7ee      	b.n	80129a2 <fminf+0x18>

080129c4 <__fpclassifyf>:
 80129c4:	ee10 3a10 	vmov	r3, s0
 80129c8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80129cc:	d00d      	beq.n	80129ea <__fpclassifyf+0x26>
 80129ce:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80129d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80129d6:	d30a      	bcc.n	80129ee <__fpclassifyf+0x2a>
 80129d8:	4b07      	ldr	r3, [pc, #28]	@ (80129f8 <__fpclassifyf+0x34>)
 80129da:	1e42      	subs	r2, r0, #1
 80129dc:	429a      	cmp	r2, r3
 80129de:	d908      	bls.n	80129f2 <__fpclassifyf+0x2e>
 80129e0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80129e4:	4258      	negs	r0, r3
 80129e6:	4158      	adcs	r0, r3
 80129e8:	4770      	bx	lr
 80129ea:	2002      	movs	r0, #2
 80129ec:	4770      	bx	lr
 80129ee:	2004      	movs	r0, #4
 80129f0:	4770      	bx	lr
 80129f2:	2003      	movs	r0, #3
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	007ffffe 	.word	0x007ffffe

080129fc <__ieee754_sqrtf>:
 80129fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012a00:	4770      	bx	lr
 8012a02:	0000      	movs	r0, r0
 8012a04:	0000      	movs	r0, r0
	...

08012a08 <__kernel_cos>:
 8012a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0c:	ec57 6b10 	vmov	r6, r7, d0
 8012a10:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012a14:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012a18:	ed8d 1b00 	vstr	d1, [sp]
 8012a1c:	d206      	bcs.n	8012a2c <__kernel_cos+0x24>
 8012a1e:	4630      	mov	r0, r6
 8012a20:	4639      	mov	r1, r7
 8012a22:	f7ee f84f 	bl	8000ac4 <__aeabi_d2iz>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	f000 8088 	beq.w	8012b3c <__kernel_cos+0x134>
 8012a2c:	4632      	mov	r2, r6
 8012a2e:	463b      	mov	r3, r7
 8012a30:	4630      	mov	r0, r6
 8012a32:	4639      	mov	r1, r7
 8012a34:	f7ed fdac 	bl	8000590 <__aeabi_dmul>
 8012a38:	4b51      	ldr	r3, [pc, #324]	@ (8012b80 <__kernel_cos+0x178>)
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	460d      	mov	r5, r1
 8012a40:	f7ed fda6 	bl	8000590 <__aeabi_dmul>
 8012a44:	a340      	add	r3, pc, #256	@ (adr r3, 8012b48 <__kernel_cos+0x140>)
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	4682      	mov	sl, r0
 8012a4c:	468b      	mov	fp, r1
 8012a4e:	4620      	mov	r0, r4
 8012a50:	4629      	mov	r1, r5
 8012a52:	f7ed fd9d 	bl	8000590 <__aeabi_dmul>
 8012a56:	a33e      	add	r3, pc, #248	@ (adr r3, 8012b50 <__kernel_cos+0x148>)
 8012a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5c:	f7ed fbe2 	bl	8000224 <__adddf3>
 8012a60:	4622      	mov	r2, r4
 8012a62:	462b      	mov	r3, r5
 8012a64:	f7ed fd94 	bl	8000590 <__aeabi_dmul>
 8012a68:	a33b      	add	r3, pc, #236	@ (adr r3, 8012b58 <__kernel_cos+0x150>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fbd7 	bl	8000220 <__aeabi_dsub>
 8012a72:	4622      	mov	r2, r4
 8012a74:	462b      	mov	r3, r5
 8012a76:	f7ed fd8b 	bl	8000590 <__aeabi_dmul>
 8012a7a:	a339      	add	r3, pc, #228	@ (adr r3, 8012b60 <__kernel_cos+0x158>)
 8012a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a80:	f7ed fbd0 	bl	8000224 <__adddf3>
 8012a84:	4622      	mov	r2, r4
 8012a86:	462b      	mov	r3, r5
 8012a88:	f7ed fd82 	bl	8000590 <__aeabi_dmul>
 8012a8c:	a336      	add	r3, pc, #216	@ (adr r3, 8012b68 <__kernel_cos+0x160>)
 8012a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a92:	f7ed fbc5 	bl	8000220 <__aeabi_dsub>
 8012a96:	4622      	mov	r2, r4
 8012a98:	462b      	mov	r3, r5
 8012a9a:	f7ed fd79 	bl	8000590 <__aeabi_dmul>
 8012a9e:	a334      	add	r3, pc, #208	@ (adr r3, 8012b70 <__kernel_cos+0x168>)
 8012aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa4:	f7ed fbbe 	bl	8000224 <__adddf3>
 8012aa8:	4622      	mov	r2, r4
 8012aaa:	462b      	mov	r3, r5
 8012aac:	f7ed fd70 	bl	8000590 <__aeabi_dmul>
 8012ab0:	4622      	mov	r2, r4
 8012ab2:	462b      	mov	r3, r5
 8012ab4:	f7ed fd6c 	bl	8000590 <__aeabi_dmul>
 8012ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012abc:	4604      	mov	r4, r0
 8012abe:	460d      	mov	r5, r1
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	f7ed fd64 	bl	8000590 <__aeabi_dmul>
 8012ac8:	460b      	mov	r3, r1
 8012aca:	4602      	mov	r2, r0
 8012acc:	4629      	mov	r1, r5
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ed fba6 	bl	8000220 <__aeabi_dsub>
 8012ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8012b84 <__kernel_cos+0x17c>)
 8012ad6:	4598      	cmp	r8, r3
 8012ad8:	4606      	mov	r6, r0
 8012ada:	460f      	mov	r7, r1
 8012adc:	d810      	bhi.n	8012b00 <__kernel_cos+0xf8>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	4650      	mov	r0, sl
 8012ae4:	4659      	mov	r1, fp
 8012ae6:	f7ed fb9b 	bl	8000220 <__aeabi_dsub>
 8012aea:	460b      	mov	r3, r1
 8012aec:	4926      	ldr	r1, [pc, #152]	@ (8012b88 <__kernel_cos+0x180>)
 8012aee:	4602      	mov	r2, r0
 8012af0:	2000      	movs	r0, #0
 8012af2:	f7ed fb95 	bl	8000220 <__aeabi_dsub>
 8012af6:	ec41 0b10 	vmov	d0, r0, r1
 8012afa:	b003      	add	sp, #12
 8012afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b00:	4b22      	ldr	r3, [pc, #136]	@ (8012b8c <__kernel_cos+0x184>)
 8012b02:	4921      	ldr	r1, [pc, #132]	@ (8012b88 <__kernel_cos+0x180>)
 8012b04:	4598      	cmp	r8, r3
 8012b06:	bf8c      	ite	hi
 8012b08:	4d21      	ldrhi	r5, [pc, #132]	@ (8012b90 <__kernel_cos+0x188>)
 8012b0a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012b0e:	2400      	movs	r4, #0
 8012b10:	4622      	mov	r2, r4
 8012b12:	462b      	mov	r3, r5
 8012b14:	2000      	movs	r0, #0
 8012b16:	f7ed fb83 	bl	8000220 <__aeabi_dsub>
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	4689      	mov	r9, r1
 8012b20:	462b      	mov	r3, r5
 8012b22:	4650      	mov	r0, sl
 8012b24:	4659      	mov	r1, fp
 8012b26:	f7ed fb7b 	bl	8000220 <__aeabi_dsub>
 8012b2a:	4632      	mov	r2, r6
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	f7ed fb77 	bl	8000220 <__aeabi_dsub>
 8012b32:	4602      	mov	r2, r0
 8012b34:	460b      	mov	r3, r1
 8012b36:	4640      	mov	r0, r8
 8012b38:	4649      	mov	r1, r9
 8012b3a:	e7da      	b.n	8012af2 <__kernel_cos+0xea>
 8012b3c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012b78 <__kernel_cos+0x170>
 8012b40:	e7db      	b.n	8012afa <__kernel_cos+0xf2>
 8012b42:	bf00      	nop
 8012b44:	f3af 8000 	nop.w
 8012b48:	be8838d4 	.word	0xbe8838d4
 8012b4c:	bda8fae9 	.word	0xbda8fae9
 8012b50:	bdb4b1c4 	.word	0xbdb4b1c4
 8012b54:	3e21ee9e 	.word	0x3e21ee9e
 8012b58:	809c52ad 	.word	0x809c52ad
 8012b5c:	3e927e4f 	.word	0x3e927e4f
 8012b60:	19cb1590 	.word	0x19cb1590
 8012b64:	3efa01a0 	.word	0x3efa01a0
 8012b68:	16c15177 	.word	0x16c15177
 8012b6c:	3f56c16c 	.word	0x3f56c16c
 8012b70:	5555554c 	.word	0x5555554c
 8012b74:	3fa55555 	.word	0x3fa55555
 8012b78:	00000000 	.word	0x00000000
 8012b7c:	3ff00000 	.word	0x3ff00000
 8012b80:	3fe00000 	.word	0x3fe00000
 8012b84:	3fd33332 	.word	0x3fd33332
 8012b88:	3ff00000 	.word	0x3ff00000
 8012b8c:	3fe90000 	.word	0x3fe90000
 8012b90:	3fd20000 	.word	0x3fd20000
 8012b94:	00000000 	.word	0x00000000

08012b98 <__kernel_sin>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	ec55 4b10 	vmov	r4, r5, d0
 8012ba0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012ba4:	b085      	sub	sp, #20
 8012ba6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012baa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012bae:	4680      	mov	r8, r0
 8012bb0:	d205      	bcs.n	8012bbe <__kernel_sin+0x26>
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	f7ed ff85 	bl	8000ac4 <__aeabi_d2iz>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d052      	beq.n	8012c64 <__kernel_sin+0xcc>
 8012bbe:	4622      	mov	r2, r4
 8012bc0:	462b      	mov	r3, r5
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	f7ed fce3 	bl	8000590 <__aeabi_dmul>
 8012bca:	4682      	mov	sl, r0
 8012bcc:	468b      	mov	fp, r1
 8012bce:	4602      	mov	r2, r0
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	f7ed fcdb 	bl	8000590 <__aeabi_dmul>
 8012bda:	a342      	add	r3, pc, #264	@ (adr r3, 8012ce4 <__kernel_sin+0x14c>)
 8012bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be0:	e9cd 0100 	strd	r0, r1, [sp]
 8012be4:	4650      	mov	r0, sl
 8012be6:	4659      	mov	r1, fp
 8012be8:	f7ed fcd2 	bl	8000590 <__aeabi_dmul>
 8012bec:	a33f      	add	r3, pc, #252	@ (adr r3, 8012cec <__kernel_sin+0x154>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	f7ed fb15 	bl	8000220 <__aeabi_dsub>
 8012bf6:	4652      	mov	r2, sl
 8012bf8:	465b      	mov	r3, fp
 8012bfa:	f7ed fcc9 	bl	8000590 <__aeabi_dmul>
 8012bfe:	a33d      	add	r3, pc, #244	@ (adr r3, 8012cf4 <__kernel_sin+0x15c>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	f7ed fb0e 	bl	8000224 <__adddf3>
 8012c08:	4652      	mov	r2, sl
 8012c0a:	465b      	mov	r3, fp
 8012c0c:	f7ed fcc0 	bl	8000590 <__aeabi_dmul>
 8012c10:	a33a      	add	r3, pc, #232	@ (adr r3, 8012cfc <__kernel_sin+0x164>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	f7ed fb03 	bl	8000220 <__aeabi_dsub>
 8012c1a:	4652      	mov	r2, sl
 8012c1c:	465b      	mov	r3, fp
 8012c1e:	f7ed fcb7 	bl	8000590 <__aeabi_dmul>
 8012c22:	a338      	add	r3, pc, #224	@ (adr r3, 8012d04 <__kernel_sin+0x16c>)
 8012c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c28:	f7ed fafc 	bl	8000224 <__adddf3>
 8012c2c:	4606      	mov	r6, r0
 8012c2e:	460f      	mov	r7, r1
 8012c30:	f1b8 0f00 	cmp.w	r8, #0
 8012c34:	d11b      	bne.n	8012c6e <__kernel_sin+0xd6>
 8012c36:	4602      	mov	r2, r0
 8012c38:	460b      	mov	r3, r1
 8012c3a:	4650      	mov	r0, sl
 8012c3c:	4659      	mov	r1, fp
 8012c3e:	f7ed fca7 	bl	8000590 <__aeabi_dmul>
 8012c42:	a325      	add	r3, pc, #148	@ (adr r3, 8012cd8 <__kernel_sin+0x140>)
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	f7ed faea 	bl	8000220 <__aeabi_dsub>
 8012c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c50:	f7ed fc9e 	bl	8000590 <__aeabi_dmul>
 8012c54:	4602      	mov	r2, r0
 8012c56:	460b      	mov	r3, r1
 8012c58:	4620      	mov	r0, r4
 8012c5a:	4629      	mov	r1, r5
 8012c5c:	f7ed fae2 	bl	8000224 <__adddf3>
 8012c60:	4604      	mov	r4, r0
 8012c62:	460d      	mov	r5, r1
 8012c64:	ec45 4b10 	vmov	d0, r4, r5
 8012c68:	b005      	add	sp, #20
 8012c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c72:	4b1b      	ldr	r3, [pc, #108]	@ (8012ce0 <__kernel_sin+0x148>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	f7ed fc8b 	bl	8000590 <__aeabi_dmul>
 8012c7a:	4632      	mov	r2, r6
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	4689      	mov	r9, r1
 8012c80:	463b      	mov	r3, r7
 8012c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c86:	f7ed fc83 	bl	8000590 <__aeabi_dmul>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	4640      	mov	r0, r8
 8012c90:	4649      	mov	r1, r9
 8012c92:	f7ed fac5 	bl	8000220 <__aeabi_dsub>
 8012c96:	4652      	mov	r2, sl
 8012c98:	465b      	mov	r3, fp
 8012c9a:	f7ed fc79 	bl	8000590 <__aeabi_dmul>
 8012c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ca2:	f7ed fabd 	bl	8000220 <__aeabi_dsub>
 8012ca6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012cd8 <__kernel_sin+0x140>)
 8012ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cac:	4606      	mov	r6, r0
 8012cae:	460f      	mov	r7, r1
 8012cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cb4:	f7ed fc6c 	bl	8000590 <__aeabi_dmul>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	460b      	mov	r3, r1
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	4639      	mov	r1, r7
 8012cc0:	f7ed fab0 	bl	8000224 <__adddf3>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	4620      	mov	r0, r4
 8012cca:	4629      	mov	r1, r5
 8012ccc:	f7ed faa8 	bl	8000220 <__aeabi_dsub>
 8012cd0:	e7c6      	b.n	8012c60 <__kernel_sin+0xc8>
 8012cd2:	bf00      	nop
 8012cd4:	f3af 8000 	nop.w
 8012cd8:	55555549 	.word	0x55555549
 8012cdc:	3fc55555 	.word	0x3fc55555
 8012ce0:	3fe00000 	.word	0x3fe00000
 8012ce4:	5acfd57c 	.word	0x5acfd57c
 8012ce8:	3de5d93a 	.word	0x3de5d93a
 8012cec:	8a2b9ceb 	.word	0x8a2b9ceb
 8012cf0:	3e5ae5e6 	.word	0x3e5ae5e6
 8012cf4:	57b1fe7d 	.word	0x57b1fe7d
 8012cf8:	3ec71de3 	.word	0x3ec71de3
 8012cfc:	19c161d5 	.word	0x19c161d5
 8012d00:	3f2a01a0 	.word	0x3f2a01a0
 8012d04:	1110f8a6 	.word	0x1110f8a6
 8012d08:	3f811111 	.word	0x3f811111
 8012d0c:	00000000 	.word	0x00000000

08012d10 <__ieee754_rem_pio2>:
 8012d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	ec57 6b10 	vmov	r6, r7, d0
 8012d18:	4bc5      	ldr	r3, [pc, #788]	@ (8013030 <__ieee754_rem_pio2+0x320>)
 8012d1a:	b08d      	sub	sp, #52	@ 0x34
 8012d1c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012d20:	4598      	cmp	r8, r3
 8012d22:	4604      	mov	r4, r0
 8012d24:	9704      	str	r7, [sp, #16]
 8012d26:	d807      	bhi.n	8012d38 <__ieee754_rem_pio2+0x28>
 8012d28:	2200      	movs	r2, #0
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	ed80 0b00 	vstr	d0, [r0]
 8012d30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012d34:	2500      	movs	r5, #0
 8012d36:	e028      	b.n	8012d8a <__ieee754_rem_pio2+0x7a>
 8012d38:	4bbe      	ldr	r3, [pc, #760]	@ (8013034 <__ieee754_rem_pio2+0x324>)
 8012d3a:	4598      	cmp	r8, r3
 8012d3c:	d878      	bhi.n	8012e30 <__ieee754_rem_pio2+0x120>
 8012d3e:	9b04      	ldr	r3, [sp, #16]
 8012d40:	4dbd      	ldr	r5, [pc, #756]	@ (8013038 <__ieee754_rem_pio2+0x328>)
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	4630      	mov	r0, r6
 8012d46:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012ff8 <__ieee754_rem_pio2+0x2e8>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	4639      	mov	r1, r7
 8012d4e:	dd38      	ble.n	8012dc2 <__ieee754_rem_pio2+0xb2>
 8012d50:	f7ed fa66 	bl	8000220 <__aeabi_dsub>
 8012d54:	45a8      	cmp	r8, r5
 8012d56:	4606      	mov	r6, r0
 8012d58:	460f      	mov	r7, r1
 8012d5a:	d01a      	beq.n	8012d92 <__ieee754_rem_pio2+0x82>
 8012d5c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013000 <__ieee754_rem_pio2+0x2f0>)
 8012d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d62:	f7ed fa5d 	bl	8000220 <__aeabi_dsub>
 8012d66:	4602      	mov	r2, r0
 8012d68:	460b      	mov	r3, r1
 8012d6a:	4680      	mov	r8, r0
 8012d6c:	4689      	mov	r9, r1
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	f7ed fa55 	bl	8000220 <__aeabi_dsub>
 8012d76:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013000 <__ieee754_rem_pio2+0x2f0>)
 8012d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7c:	f7ed fa50 	bl	8000220 <__aeabi_dsub>
 8012d80:	e9c4 8900 	strd	r8, r9, [r4]
 8012d84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d88:	2501      	movs	r5, #1
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	b00d      	add	sp, #52	@ 0x34
 8012d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d92:	a39d      	add	r3, pc, #628	@ (adr r3, 8013008 <__ieee754_rem_pio2+0x2f8>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed fa42 	bl	8000220 <__aeabi_dsub>
 8012d9c:	a39c      	add	r3, pc, #624	@ (adr r3, 8013010 <__ieee754_rem_pio2+0x300>)
 8012d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da2:	4606      	mov	r6, r0
 8012da4:	460f      	mov	r7, r1
 8012da6:	f7ed fa3b 	bl	8000220 <__aeabi_dsub>
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	4680      	mov	r8, r0
 8012db0:	4689      	mov	r9, r1
 8012db2:	4630      	mov	r0, r6
 8012db4:	4639      	mov	r1, r7
 8012db6:	f7ed fa33 	bl	8000220 <__aeabi_dsub>
 8012dba:	a395      	add	r3, pc, #596	@ (adr r3, 8013010 <__ieee754_rem_pio2+0x300>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	e7dc      	b.n	8012d7c <__ieee754_rem_pio2+0x6c>
 8012dc2:	f7ed fa2f 	bl	8000224 <__adddf3>
 8012dc6:	45a8      	cmp	r8, r5
 8012dc8:	4606      	mov	r6, r0
 8012dca:	460f      	mov	r7, r1
 8012dcc:	d018      	beq.n	8012e00 <__ieee754_rem_pio2+0xf0>
 8012dce:	a38c      	add	r3, pc, #560	@ (adr r3, 8013000 <__ieee754_rem_pio2+0x2f0>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7ed fa26 	bl	8000224 <__adddf3>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	460b      	mov	r3, r1
 8012ddc:	4680      	mov	r8, r0
 8012dde:	4689      	mov	r9, r1
 8012de0:	4630      	mov	r0, r6
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fa1c 	bl	8000220 <__aeabi_dsub>
 8012de8:	a385      	add	r3, pc, #532	@ (adr r3, 8013000 <__ieee754_rem_pio2+0x2f0>)
 8012dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dee:	f7ed fa19 	bl	8000224 <__adddf3>
 8012df2:	f04f 35ff 	mov.w	r5, #4294967295
 8012df6:	e9c4 8900 	strd	r8, r9, [r4]
 8012dfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012dfe:	e7c4      	b.n	8012d8a <__ieee754_rem_pio2+0x7a>
 8012e00:	a381      	add	r3, pc, #516	@ (adr r3, 8013008 <__ieee754_rem_pio2+0x2f8>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	f7ed fa0d 	bl	8000224 <__adddf3>
 8012e0a:	a381      	add	r3, pc, #516	@ (adr r3, 8013010 <__ieee754_rem_pio2+0x300>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	4606      	mov	r6, r0
 8012e12:	460f      	mov	r7, r1
 8012e14:	f7ed fa06 	bl	8000224 <__adddf3>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	4680      	mov	r8, r0
 8012e1e:	4689      	mov	r9, r1
 8012e20:	4630      	mov	r0, r6
 8012e22:	4639      	mov	r1, r7
 8012e24:	f7ed f9fc 	bl	8000220 <__aeabi_dsub>
 8012e28:	a379      	add	r3, pc, #484	@ (adr r3, 8013010 <__ieee754_rem_pio2+0x300>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	e7de      	b.n	8012dee <__ieee754_rem_pio2+0xde>
 8012e30:	4b82      	ldr	r3, [pc, #520]	@ (801303c <__ieee754_rem_pio2+0x32c>)
 8012e32:	4598      	cmp	r8, r3
 8012e34:	f200 80d1 	bhi.w	8012fda <__ieee754_rem_pio2+0x2ca>
 8012e38:	f000 f966 	bl	8013108 <fabs>
 8012e3c:	ec57 6b10 	vmov	r6, r7, d0
 8012e40:	a375      	add	r3, pc, #468	@ (adr r3, 8013018 <__ieee754_rem_pio2+0x308>)
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	4630      	mov	r0, r6
 8012e48:	4639      	mov	r1, r7
 8012e4a:	f7ed fba1 	bl	8000590 <__aeabi_dmul>
 8012e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8013040 <__ieee754_rem_pio2+0x330>)
 8012e50:	2200      	movs	r2, #0
 8012e52:	f7ed f9e7 	bl	8000224 <__adddf3>
 8012e56:	f7ed fe35 	bl	8000ac4 <__aeabi_d2iz>
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	f7ed fb2e 	bl	80004bc <__aeabi_i2d>
 8012e60:	4602      	mov	r2, r0
 8012e62:	460b      	mov	r3, r1
 8012e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e68:	a363      	add	r3, pc, #396	@ (adr r3, 8012ff8 <__ieee754_rem_pio2+0x2e8>)
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7ed fb8f 	bl	8000590 <__aeabi_dmul>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	4630      	mov	r0, r6
 8012e78:	4639      	mov	r1, r7
 8012e7a:	f7ed f9d1 	bl	8000220 <__aeabi_dsub>
 8012e7e:	a360      	add	r3, pc, #384	@ (adr r3, 8013000 <__ieee754_rem_pio2+0x2f0>)
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	4682      	mov	sl, r0
 8012e86:	468b      	mov	fp, r1
 8012e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e8c:	f7ed fb80 	bl	8000590 <__aeabi_dmul>
 8012e90:	2d1f      	cmp	r5, #31
 8012e92:	4606      	mov	r6, r0
 8012e94:	460f      	mov	r7, r1
 8012e96:	dc0c      	bgt.n	8012eb2 <__ieee754_rem_pio2+0x1a2>
 8012e98:	4b6a      	ldr	r3, [pc, #424]	@ (8013044 <__ieee754_rem_pio2+0x334>)
 8012e9a:	1e6a      	subs	r2, r5, #1
 8012e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea0:	4543      	cmp	r3, r8
 8012ea2:	d006      	beq.n	8012eb2 <__ieee754_rem_pio2+0x1a2>
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	463b      	mov	r3, r7
 8012ea8:	4650      	mov	r0, sl
 8012eaa:	4659      	mov	r1, fp
 8012eac:	f7ed f9b8 	bl	8000220 <__aeabi_dsub>
 8012eb0:	e00e      	b.n	8012ed0 <__ieee754_rem_pio2+0x1c0>
 8012eb2:	463b      	mov	r3, r7
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	4650      	mov	r0, sl
 8012eb8:	4659      	mov	r1, fp
 8012eba:	f7ed f9b1 	bl	8000220 <__aeabi_dsub>
 8012ebe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012ec2:	9305      	str	r3, [sp, #20]
 8012ec4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012ec8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012ecc:	2b10      	cmp	r3, #16
 8012ece:	dc02      	bgt.n	8012ed6 <__ieee754_rem_pio2+0x1c6>
 8012ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8012ed4:	e039      	b.n	8012f4a <__ieee754_rem_pio2+0x23a>
 8012ed6:	a34c      	add	r3, pc, #304	@ (adr r3, 8013008 <__ieee754_rem_pio2+0x2f8>)
 8012ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ee0:	f7ed fb56 	bl	8000590 <__aeabi_dmul>
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	460f      	mov	r7, r1
 8012ee8:	4602      	mov	r2, r0
 8012eea:	460b      	mov	r3, r1
 8012eec:	4650      	mov	r0, sl
 8012eee:	4659      	mov	r1, fp
 8012ef0:	f7ed f996 	bl	8000220 <__aeabi_dsub>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	4680      	mov	r8, r0
 8012efa:	4689      	mov	r9, r1
 8012efc:	4650      	mov	r0, sl
 8012efe:	4659      	mov	r1, fp
 8012f00:	f7ed f98e 	bl	8000220 <__aeabi_dsub>
 8012f04:	4632      	mov	r2, r6
 8012f06:	463b      	mov	r3, r7
 8012f08:	f7ed f98a 	bl	8000220 <__aeabi_dsub>
 8012f0c:	a340      	add	r3, pc, #256	@ (adr r3, 8013010 <__ieee754_rem_pio2+0x300>)
 8012f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f12:	4606      	mov	r6, r0
 8012f14:	460f      	mov	r7, r1
 8012f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f1a:	f7ed fb39 	bl	8000590 <__aeabi_dmul>
 8012f1e:	4632      	mov	r2, r6
 8012f20:	463b      	mov	r3, r7
 8012f22:	f7ed f97d 	bl	8000220 <__aeabi_dsub>
 8012f26:	4602      	mov	r2, r0
 8012f28:	460b      	mov	r3, r1
 8012f2a:	4606      	mov	r6, r0
 8012f2c:	460f      	mov	r7, r1
 8012f2e:	4640      	mov	r0, r8
 8012f30:	4649      	mov	r1, r9
 8012f32:	f7ed f975 	bl	8000220 <__aeabi_dsub>
 8012f36:	9a05      	ldr	r2, [sp, #20]
 8012f38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f3c:	1ad3      	subs	r3, r2, r3
 8012f3e:	2b31      	cmp	r3, #49	@ 0x31
 8012f40:	dc20      	bgt.n	8012f84 <__ieee754_rem_pio2+0x274>
 8012f42:	e9c4 0100 	strd	r0, r1, [r4]
 8012f46:	46c2      	mov	sl, r8
 8012f48:	46cb      	mov	fp, r9
 8012f4a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012f4e:	4650      	mov	r0, sl
 8012f50:	4642      	mov	r2, r8
 8012f52:	464b      	mov	r3, r9
 8012f54:	4659      	mov	r1, fp
 8012f56:	f7ed f963 	bl	8000220 <__aeabi_dsub>
 8012f5a:	463b      	mov	r3, r7
 8012f5c:	4632      	mov	r2, r6
 8012f5e:	f7ed f95f 	bl	8000220 <__aeabi_dsub>
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f6a:	f6bf af0e 	bge.w	8012d8a <__ieee754_rem_pio2+0x7a>
 8012f6e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012f72:	6063      	str	r3, [r4, #4]
 8012f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f78:	f8c4 8000 	str.w	r8, [r4]
 8012f7c:	60a0      	str	r0, [r4, #8]
 8012f7e:	60e3      	str	r3, [r4, #12]
 8012f80:	426d      	negs	r5, r5
 8012f82:	e702      	b.n	8012d8a <__ieee754_rem_pio2+0x7a>
 8012f84:	a326      	add	r3, pc, #152	@ (adr r3, 8013020 <__ieee754_rem_pio2+0x310>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f8e:	f7ed faff 	bl	8000590 <__aeabi_dmul>
 8012f92:	4606      	mov	r6, r0
 8012f94:	460f      	mov	r7, r1
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	4649      	mov	r1, r9
 8012f9e:	f7ed f93f 	bl	8000220 <__aeabi_dsub>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	4682      	mov	sl, r0
 8012fa8:	468b      	mov	fp, r1
 8012faa:	4640      	mov	r0, r8
 8012fac:	4649      	mov	r1, r9
 8012fae:	f7ed f937 	bl	8000220 <__aeabi_dsub>
 8012fb2:	4632      	mov	r2, r6
 8012fb4:	463b      	mov	r3, r7
 8012fb6:	f7ed f933 	bl	8000220 <__aeabi_dsub>
 8012fba:	a31b      	add	r3, pc, #108	@ (adr r3, 8013028 <__ieee754_rem_pio2+0x318>)
 8012fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc0:	4606      	mov	r6, r0
 8012fc2:	460f      	mov	r7, r1
 8012fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fc8:	f7ed fae2 	bl	8000590 <__aeabi_dmul>
 8012fcc:	4632      	mov	r2, r6
 8012fce:	463b      	mov	r3, r7
 8012fd0:	f7ed f926 	bl	8000220 <__aeabi_dsub>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	460f      	mov	r7, r1
 8012fd8:	e764      	b.n	8012ea4 <__ieee754_rem_pio2+0x194>
 8012fda:	4b1b      	ldr	r3, [pc, #108]	@ (8013048 <__ieee754_rem_pio2+0x338>)
 8012fdc:	4598      	cmp	r8, r3
 8012fde:	d935      	bls.n	801304c <__ieee754_rem_pio2+0x33c>
 8012fe0:	4632      	mov	r2, r6
 8012fe2:	463b      	mov	r3, r7
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	f7ed f91a 	bl	8000220 <__aeabi_dsub>
 8012fec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ff0:	e9c4 0100 	strd	r0, r1, [r4]
 8012ff4:	e69e      	b.n	8012d34 <__ieee754_rem_pio2+0x24>
 8012ff6:	bf00      	nop
 8012ff8:	54400000 	.word	0x54400000
 8012ffc:	3ff921fb 	.word	0x3ff921fb
 8013000:	1a626331 	.word	0x1a626331
 8013004:	3dd0b461 	.word	0x3dd0b461
 8013008:	1a600000 	.word	0x1a600000
 801300c:	3dd0b461 	.word	0x3dd0b461
 8013010:	2e037073 	.word	0x2e037073
 8013014:	3ba3198a 	.word	0x3ba3198a
 8013018:	6dc9c883 	.word	0x6dc9c883
 801301c:	3fe45f30 	.word	0x3fe45f30
 8013020:	2e000000 	.word	0x2e000000
 8013024:	3ba3198a 	.word	0x3ba3198a
 8013028:	252049c1 	.word	0x252049c1
 801302c:	397b839a 	.word	0x397b839a
 8013030:	3fe921fb 	.word	0x3fe921fb
 8013034:	4002d97b 	.word	0x4002d97b
 8013038:	3ff921fb 	.word	0x3ff921fb
 801303c:	413921fb 	.word	0x413921fb
 8013040:	3fe00000 	.word	0x3fe00000
 8013044:	08014548 	.word	0x08014548
 8013048:	7fefffff 	.word	0x7fefffff
 801304c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013050:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013054:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013058:	4630      	mov	r0, r6
 801305a:	460f      	mov	r7, r1
 801305c:	f7ed fd32 	bl	8000ac4 <__aeabi_d2iz>
 8013060:	f7ed fa2c 	bl	80004bc <__aeabi_i2d>
 8013064:	4602      	mov	r2, r0
 8013066:	460b      	mov	r3, r1
 8013068:	4630      	mov	r0, r6
 801306a:	4639      	mov	r1, r7
 801306c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013070:	f7ed f8d6 	bl	8000220 <__aeabi_dsub>
 8013074:	4b22      	ldr	r3, [pc, #136]	@ (8013100 <__ieee754_rem_pio2+0x3f0>)
 8013076:	2200      	movs	r2, #0
 8013078:	f7ed fa8a 	bl	8000590 <__aeabi_dmul>
 801307c:	460f      	mov	r7, r1
 801307e:	4606      	mov	r6, r0
 8013080:	f7ed fd20 	bl	8000ac4 <__aeabi_d2iz>
 8013084:	f7ed fa1a 	bl	80004bc <__aeabi_i2d>
 8013088:	4602      	mov	r2, r0
 801308a:	460b      	mov	r3, r1
 801308c:	4630      	mov	r0, r6
 801308e:	4639      	mov	r1, r7
 8013090:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013094:	f7ed f8c4 	bl	8000220 <__aeabi_dsub>
 8013098:	4b19      	ldr	r3, [pc, #100]	@ (8013100 <__ieee754_rem_pio2+0x3f0>)
 801309a:	2200      	movs	r2, #0
 801309c:	f7ed fa78 	bl	8000590 <__aeabi_dmul>
 80130a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80130a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80130a8:	f04f 0803 	mov.w	r8, #3
 80130ac:	2600      	movs	r6, #0
 80130ae:	2700      	movs	r7, #0
 80130b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80130b4:	4632      	mov	r2, r6
 80130b6:	463b      	mov	r3, r7
 80130b8:	46c2      	mov	sl, r8
 80130ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80130be:	f7ed fccf 	bl	8000a60 <__aeabi_dcmpeq>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d1f4      	bne.n	80130b0 <__ieee754_rem_pio2+0x3a0>
 80130c6:	4b0f      	ldr	r3, [pc, #60]	@ (8013104 <__ieee754_rem_pio2+0x3f4>)
 80130c8:	9301      	str	r3, [sp, #4]
 80130ca:	2302      	movs	r3, #2
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	462a      	mov	r2, r5
 80130d0:	4653      	mov	r3, sl
 80130d2:	4621      	mov	r1, r4
 80130d4:	a806      	add	r0, sp, #24
 80130d6:	f000 fb5b 	bl	8013790 <__kernel_rem_pio2>
 80130da:	9b04      	ldr	r3, [sp, #16]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	4605      	mov	r5, r0
 80130e0:	f6bf ae53 	bge.w	8012d8a <__ieee754_rem_pio2+0x7a>
 80130e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80130e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80130ec:	e9c4 2300 	strd	r2, r3, [r4]
 80130f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80130f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80130f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80130fc:	e740      	b.n	8012f80 <__ieee754_rem_pio2+0x270>
 80130fe:	bf00      	nop
 8013100:	41700000 	.word	0x41700000
 8013104:	080145c8 	.word	0x080145c8

08013108 <fabs>:
 8013108:	ec51 0b10 	vmov	r0, r1, d0
 801310c:	4602      	mov	r2, r0
 801310e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013112:	ec43 2b10 	vmov	d0, r2, r3
 8013116:	4770      	bx	lr

08013118 <__kernel_cosf>:
 8013118:	ee10 3a10 	vmov	r3, s0
 801311c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013120:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013124:	eef0 6a40 	vmov.f32	s13, s0
 8013128:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801312c:	d204      	bcs.n	8013138 <__kernel_cosf+0x20>
 801312e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013132:	ee17 2a90 	vmov	r2, s15
 8013136:	b342      	cbz	r2, 801318a <__kernel_cosf+0x72>
 8013138:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801313c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80131a8 <__kernel_cosf+0x90>
 8013140:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80131ac <__kernel_cosf+0x94>
 8013144:	4a1a      	ldr	r2, [pc, #104]	@ (80131b0 <__kernel_cosf+0x98>)
 8013146:	eea7 6a27 	vfma.f32	s12, s14, s15
 801314a:	4293      	cmp	r3, r2
 801314c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80131b4 <__kernel_cosf+0x9c>
 8013150:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013154:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80131b8 <__kernel_cosf+0xa0>
 8013158:	eea7 6a87 	vfma.f32	s12, s15, s14
 801315c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80131bc <__kernel_cosf+0xa4>
 8013160:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013164:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80131c0 <__kernel_cosf+0xa8>
 8013168:	eea7 6a87 	vfma.f32	s12, s15, s14
 801316c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013170:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013174:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013178:	eee7 0a06 	vfma.f32	s1, s14, s12
 801317c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013180:	d804      	bhi.n	801318c <__kernel_cosf+0x74>
 8013182:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013186:	ee30 0a67 	vsub.f32	s0, s0, s15
 801318a:	4770      	bx	lr
 801318c:	4a0d      	ldr	r2, [pc, #52]	@ (80131c4 <__kernel_cosf+0xac>)
 801318e:	4293      	cmp	r3, r2
 8013190:	bf9a      	itte	ls
 8013192:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013196:	ee07 3a10 	vmovls	s14, r3
 801319a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801319e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80131a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131a6:	e7ec      	b.n	8013182 <__kernel_cosf+0x6a>
 80131a8:	ad47d74e 	.word	0xad47d74e
 80131ac:	310f74f6 	.word	0x310f74f6
 80131b0:	3e999999 	.word	0x3e999999
 80131b4:	b493f27c 	.word	0xb493f27c
 80131b8:	37d00d01 	.word	0x37d00d01
 80131bc:	bab60b61 	.word	0xbab60b61
 80131c0:	3d2aaaab 	.word	0x3d2aaaab
 80131c4:	3f480000 	.word	0x3f480000

080131c8 <__kernel_sinf>:
 80131c8:	ee10 3a10 	vmov	r3, s0
 80131cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80131d4:	d204      	bcs.n	80131e0 <__kernel_sinf+0x18>
 80131d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80131da:	ee17 3a90 	vmov	r3, s15
 80131de:	b35b      	cbz	r3, 8013238 <__kernel_sinf+0x70>
 80131e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80131e4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801323c <__kernel_sinf+0x74>
 80131e8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013240 <__kernel_sinf+0x78>
 80131ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80131f0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013244 <__kernel_sinf+0x7c>
 80131f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131f8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013248 <__kernel_sinf+0x80>
 80131fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013200:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801324c <__kernel_sinf+0x84>
 8013204:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013208:	eee6 7a07 	vfma.f32	s15, s12, s14
 801320c:	b930      	cbnz	r0, 801321c <__kernel_sinf+0x54>
 801320e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013250 <__kernel_sinf+0x88>
 8013212:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013216:	eea6 0a26 	vfma.f32	s0, s12, s13
 801321a:	4770      	bx	lr
 801321c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013220:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013224:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013228:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801322c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013254 <__kernel_sinf+0x8c>
 8013230:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013234:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop
 801323c:	2f2ec9d3 	.word	0x2f2ec9d3
 8013240:	b2d72f34 	.word	0xb2d72f34
 8013244:	3638ef1b 	.word	0x3638ef1b
 8013248:	b9500d01 	.word	0xb9500d01
 801324c:	3c088889 	.word	0x3c088889
 8013250:	be2aaaab 	.word	0xbe2aaaab
 8013254:	3e2aaaab 	.word	0x3e2aaaab

08013258 <__ieee754_fmodf>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	ee10 6a90 	vmov	r6, s1
 801325e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013262:	1e5a      	subs	r2, r3, #1
 8013264:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013268:	d206      	bcs.n	8013278 <__ieee754_fmodf+0x20>
 801326a:	ee10 4a10 	vmov	r4, s0
 801326e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013272:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013276:	d304      	bcc.n	8013282 <__ieee754_fmodf+0x2a>
 8013278:	ee60 0a20 	vmul.f32	s1, s0, s1
 801327c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013280:	bd70      	pop	{r4, r5, r6, pc}
 8013282:	4299      	cmp	r1, r3
 8013284:	dbfc      	blt.n	8013280 <__ieee754_fmodf+0x28>
 8013286:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801328a:	d105      	bne.n	8013298 <__ieee754_fmodf+0x40>
 801328c:	4b32      	ldr	r3, [pc, #200]	@ (8013358 <__ieee754_fmodf+0x100>)
 801328e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013292:	ed93 0a00 	vldr	s0, [r3]
 8013296:	e7f3      	b.n	8013280 <__ieee754_fmodf+0x28>
 8013298:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801329c:	d146      	bne.n	801332c <__ieee754_fmodf+0xd4>
 801329e:	020a      	lsls	r2, r1, #8
 80132a0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80132a4:	2a00      	cmp	r2, #0
 80132a6:	dc3e      	bgt.n	8013326 <__ieee754_fmodf+0xce>
 80132a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80132ac:	bf01      	itttt	eq
 80132ae:	021a      	lsleq	r2, r3, #8
 80132b0:	fab2 f282 	clzeq	r2, r2
 80132b4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80132b8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80132bc:	bf16      	itet	ne
 80132be:	15da      	asrne	r2, r3, #23
 80132c0:	3282      	addeq	r2, #130	@ 0x82
 80132c2:	3a7f      	subne	r2, #127	@ 0x7f
 80132c4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80132c8:	bfbb      	ittet	lt
 80132ca:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80132ce:	1a24      	sublt	r4, r4, r0
 80132d0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80132d4:	40a1      	lsllt	r1, r4
 80132d6:	bfa8      	it	ge
 80132d8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80132dc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80132e0:	bfb5      	itete	lt
 80132e2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80132e6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80132ea:	1aa4      	sublt	r4, r4, r2
 80132ec:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80132f0:	bfb8      	it	lt
 80132f2:	fa03 f404 	lsllt.w	r4, r3, r4
 80132f6:	1a80      	subs	r0, r0, r2
 80132f8:	1b0b      	subs	r3, r1, r4
 80132fa:	b9d0      	cbnz	r0, 8013332 <__ieee754_fmodf+0xda>
 80132fc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013300:	bf28      	it	cs
 8013302:	460b      	movcs	r3, r1
 8013304:	2b00      	cmp	r3, #0
 8013306:	d0c1      	beq.n	801328c <__ieee754_fmodf+0x34>
 8013308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801330c:	db19      	blt.n	8013342 <__ieee754_fmodf+0xea>
 801330e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013312:	db19      	blt.n	8013348 <__ieee754_fmodf+0xf0>
 8013314:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013318:	327f      	adds	r2, #127	@ 0x7f
 801331a:	432b      	orrs	r3, r5
 801331c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013320:	ee00 3a10 	vmov	s0, r3
 8013324:	e7ac      	b.n	8013280 <__ieee754_fmodf+0x28>
 8013326:	3801      	subs	r0, #1
 8013328:	0052      	lsls	r2, r2, #1
 801332a:	e7bb      	b.n	80132a4 <__ieee754_fmodf+0x4c>
 801332c:	15c8      	asrs	r0, r1, #23
 801332e:	387f      	subs	r0, #127	@ 0x7f
 8013330:	e7ba      	b.n	80132a8 <__ieee754_fmodf+0x50>
 8013332:	2b00      	cmp	r3, #0
 8013334:	da02      	bge.n	801333c <__ieee754_fmodf+0xe4>
 8013336:	0049      	lsls	r1, r1, #1
 8013338:	3801      	subs	r0, #1
 801333a:	e7dd      	b.n	80132f8 <__ieee754_fmodf+0xa0>
 801333c:	d0a6      	beq.n	801328c <__ieee754_fmodf+0x34>
 801333e:	0059      	lsls	r1, r3, #1
 8013340:	e7fa      	b.n	8013338 <__ieee754_fmodf+0xe0>
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	3a01      	subs	r2, #1
 8013346:	e7df      	b.n	8013308 <__ieee754_fmodf+0xb0>
 8013348:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801334c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013350:	3282      	adds	r2, #130	@ 0x82
 8013352:	4113      	asrs	r3, r2
 8013354:	432b      	orrs	r3, r5
 8013356:	e7e3      	b.n	8013320 <__ieee754_fmodf+0xc8>
 8013358:	080146d0 	.word	0x080146d0

0801335c <__ieee754_rem_pio2f>:
 801335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801335e:	ee10 6a10 	vmov	r6, s0
 8013362:	4b88      	ldr	r3, [pc, #544]	@ (8013584 <__ieee754_rem_pio2f+0x228>)
 8013364:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013368:	429d      	cmp	r5, r3
 801336a:	b087      	sub	sp, #28
 801336c:	4604      	mov	r4, r0
 801336e:	d805      	bhi.n	801337c <__ieee754_rem_pio2f+0x20>
 8013370:	2300      	movs	r3, #0
 8013372:	ed80 0a00 	vstr	s0, [r0]
 8013376:	6043      	str	r3, [r0, #4]
 8013378:	2000      	movs	r0, #0
 801337a:	e022      	b.n	80133c2 <__ieee754_rem_pio2f+0x66>
 801337c:	4b82      	ldr	r3, [pc, #520]	@ (8013588 <__ieee754_rem_pio2f+0x22c>)
 801337e:	429d      	cmp	r5, r3
 8013380:	d83a      	bhi.n	80133f8 <__ieee754_rem_pio2f+0x9c>
 8013382:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013386:	2e00      	cmp	r6, #0
 8013388:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801358c <__ieee754_rem_pio2f+0x230>
 801338c:	4a80      	ldr	r2, [pc, #512]	@ (8013590 <__ieee754_rem_pio2f+0x234>)
 801338e:	f023 030f 	bic.w	r3, r3, #15
 8013392:	dd18      	ble.n	80133c6 <__ieee754_rem_pio2f+0x6a>
 8013394:	4293      	cmp	r3, r2
 8013396:	ee70 7a47 	vsub.f32	s15, s0, s14
 801339a:	bf09      	itett	eq
 801339c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013594 <__ieee754_rem_pio2f+0x238>
 80133a0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013598 <__ieee754_rem_pio2f+0x23c>
 80133a4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801359c <__ieee754_rem_pio2f+0x240>
 80133a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80133ac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80133b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133b4:	ed80 7a00 	vstr	s14, [r0]
 80133b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80133bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80133c0:	2001      	movs	r0, #1
 80133c2:	b007      	add	sp, #28
 80133c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c6:	4293      	cmp	r3, r2
 80133c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80133cc:	bf09      	itett	eq
 80133ce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013594 <__ieee754_rem_pio2f+0x238>
 80133d2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013598 <__ieee754_rem_pio2f+0x23c>
 80133d6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801359c <__ieee754_rem_pio2f+0x240>
 80133da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80133de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80133e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133e6:	ed80 7a00 	vstr	s14, [r0]
 80133ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80133f2:	f04f 30ff 	mov.w	r0, #4294967295
 80133f6:	e7e4      	b.n	80133c2 <__ieee754_rem_pio2f+0x66>
 80133f8:	4b69      	ldr	r3, [pc, #420]	@ (80135a0 <__ieee754_rem_pio2f+0x244>)
 80133fa:	429d      	cmp	r5, r3
 80133fc:	d873      	bhi.n	80134e6 <__ieee754_rem_pio2f+0x18a>
 80133fe:	f000 f8dd 	bl	80135bc <fabsf>
 8013402:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80135a4 <__ieee754_rem_pio2f+0x248>
 8013406:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801340a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801340e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013416:	ee17 0a90 	vmov	r0, s15
 801341a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801358c <__ieee754_rem_pio2f+0x230>
 801341e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013422:	281f      	cmp	r0, #31
 8013424:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013598 <__ieee754_rem_pio2f+0x23c>
 8013428:	ee67 7a27 	vmul.f32	s15, s14, s15
 801342c:	eeb1 6a47 	vneg.f32	s12, s14
 8013430:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013434:	ee16 1a90 	vmov	r1, s13
 8013438:	dc09      	bgt.n	801344e <__ieee754_rem_pio2f+0xf2>
 801343a:	4a5b      	ldr	r2, [pc, #364]	@ (80135a8 <__ieee754_rem_pio2f+0x24c>)
 801343c:	1e47      	subs	r7, r0, #1
 801343e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013442:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013446:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801344a:	4293      	cmp	r3, r2
 801344c:	d107      	bne.n	801345e <__ieee754_rem_pio2f+0x102>
 801344e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013452:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013456:	2a08      	cmp	r2, #8
 8013458:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801345c:	dc14      	bgt.n	8013488 <__ieee754_rem_pio2f+0x12c>
 801345e:	6021      	str	r1, [r4, #0]
 8013460:	ed94 7a00 	vldr	s14, [r4]
 8013464:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013468:	2e00      	cmp	r6, #0
 801346a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801346e:	ed84 0a01 	vstr	s0, [r4, #4]
 8013472:	daa6      	bge.n	80133c2 <__ieee754_rem_pio2f+0x66>
 8013474:	eeb1 7a47 	vneg.f32	s14, s14
 8013478:	eeb1 0a40 	vneg.f32	s0, s0
 801347c:	ed84 7a00 	vstr	s14, [r4]
 8013480:	ed84 0a01 	vstr	s0, [r4, #4]
 8013484:	4240      	negs	r0, r0
 8013486:	e79c      	b.n	80133c2 <__ieee754_rem_pio2f+0x66>
 8013488:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013594 <__ieee754_rem_pio2f+0x238>
 801348c:	eef0 6a40 	vmov.f32	s13, s0
 8013490:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013494:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013498:	eee6 7a25 	vfma.f32	s15, s12, s11
 801349c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801359c <__ieee754_rem_pio2f+0x240>
 80134a0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80134a4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80134a8:	ee15 2a90 	vmov	r2, s11
 80134ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80134b0:	1a5b      	subs	r3, r3, r1
 80134b2:	2b19      	cmp	r3, #25
 80134b4:	dc04      	bgt.n	80134c0 <__ieee754_rem_pio2f+0x164>
 80134b6:	edc4 5a00 	vstr	s11, [r4]
 80134ba:	eeb0 0a66 	vmov.f32	s0, s13
 80134be:	e7cf      	b.n	8013460 <__ieee754_rem_pio2f+0x104>
 80134c0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80135ac <__ieee754_rem_pio2f+0x250>
 80134c4:	eeb0 0a66 	vmov.f32	s0, s13
 80134c8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80134cc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80134d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80135b0 <__ieee754_rem_pio2f+0x254>
 80134d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80134d8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80134dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80134e0:	ed84 7a00 	vstr	s14, [r4]
 80134e4:	e7bc      	b.n	8013460 <__ieee754_rem_pio2f+0x104>
 80134e6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80134ea:	d306      	bcc.n	80134fa <__ieee754_rem_pio2f+0x19e>
 80134ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80134f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80134f4:	edc0 7a00 	vstr	s15, [r0]
 80134f8:	e73e      	b.n	8013378 <__ieee754_rem_pio2f+0x1c>
 80134fa:	15ea      	asrs	r2, r5, #23
 80134fc:	3a86      	subs	r2, #134	@ 0x86
 80134fe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013502:	ee07 3a90 	vmov	s15, r3
 8013506:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801350a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80135b4 <__ieee754_rem_pio2f+0x258>
 801350e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013516:	ed8d 7a03 	vstr	s14, [sp, #12]
 801351a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801351e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801352a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801352e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013532:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353a:	edcd 7a05 	vstr	s15, [sp, #20]
 801353e:	d11e      	bne.n	801357e <__ieee754_rem_pio2f+0x222>
 8013540:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013548:	bf0c      	ite	eq
 801354a:	2301      	moveq	r3, #1
 801354c:	2302      	movne	r3, #2
 801354e:	491a      	ldr	r1, [pc, #104]	@ (80135b8 <__ieee754_rem_pio2f+0x25c>)
 8013550:	9101      	str	r1, [sp, #4]
 8013552:	2102      	movs	r1, #2
 8013554:	9100      	str	r1, [sp, #0]
 8013556:	a803      	add	r0, sp, #12
 8013558:	4621      	mov	r1, r4
 801355a:	f000 fc69 	bl	8013e30 <__kernel_rem_pio2f>
 801355e:	2e00      	cmp	r6, #0
 8013560:	f6bf af2f 	bge.w	80133c2 <__ieee754_rem_pio2f+0x66>
 8013564:	edd4 7a00 	vldr	s15, [r4]
 8013568:	eef1 7a67 	vneg.f32	s15, s15
 801356c:	edc4 7a00 	vstr	s15, [r4]
 8013570:	edd4 7a01 	vldr	s15, [r4, #4]
 8013574:	eef1 7a67 	vneg.f32	s15, s15
 8013578:	edc4 7a01 	vstr	s15, [r4, #4]
 801357c:	e782      	b.n	8013484 <__ieee754_rem_pio2f+0x128>
 801357e:	2303      	movs	r3, #3
 8013580:	e7e5      	b.n	801354e <__ieee754_rem_pio2f+0x1f2>
 8013582:	bf00      	nop
 8013584:	3f490fd8 	.word	0x3f490fd8
 8013588:	4016cbe3 	.word	0x4016cbe3
 801358c:	3fc90f80 	.word	0x3fc90f80
 8013590:	3fc90fd0 	.word	0x3fc90fd0
 8013594:	37354400 	.word	0x37354400
 8013598:	37354443 	.word	0x37354443
 801359c:	2e85a308 	.word	0x2e85a308
 80135a0:	43490f80 	.word	0x43490f80
 80135a4:	3f22f984 	.word	0x3f22f984
 80135a8:	080146d8 	.word	0x080146d8
 80135ac:	2e85a300 	.word	0x2e85a300
 80135b0:	248d3132 	.word	0x248d3132
 80135b4:	43800000 	.word	0x43800000
 80135b8:	08014758 	.word	0x08014758

080135bc <fabsf>:
 80135bc:	ee10 3a10 	vmov	r3, s0
 80135c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80135c4:	ee00 3a10 	vmov	s0, r3
 80135c8:	4770      	bx	lr
 80135ca:	0000      	movs	r0, r0
 80135cc:	0000      	movs	r0, r0
	...

080135d0 <scalbn>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	ec55 4b10 	vmov	r4, r5, d0
 80135d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80135da:	4606      	mov	r6, r0
 80135dc:	462b      	mov	r3, r5
 80135de:	b991      	cbnz	r1, 8013606 <scalbn+0x36>
 80135e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80135e4:	4323      	orrs	r3, r4
 80135e6:	d03b      	beq.n	8013660 <scalbn+0x90>
 80135e8:	4b33      	ldr	r3, [pc, #204]	@ (80136b8 <scalbn+0xe8>)
 80135ea:	4620      	mov	r0, r4
 80135ec:	4629      	mov	r1, r5
 80135ee:	2200      	movs	r2, #0
 80135f0:	f7ec ffce 	bl	8000590 <__aeabi_dmul>
 80135f4:	4b31      	ldr	r3, [pc, #196]	@ (80136bc <scalbn+0xec>)
 80135f6:	429e      	cmp	r6, r3
 80135f8:	4604      	mov	r4, r0
 80135fa:	460d      	mov	r5, r1
 80135fc:	da0f      	bge.n	801361e <scalbn+0x4e>
 80135fe:	a326      	add	r3, pc, #152	@ (adr r3, 8013698 <scalbn+0xc8>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	e01e      	b.n	8013644 <scalbn+0x74>
 8013606:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801360a:	4291      	cmp	r1, r2
 801360c:	d10b      	bne.n	8013626 <scalbn+0x56>
 801360e:	4622      	mov	r2, r4
 8013610:	4620      	mov	r0, r4
 8013612:	4629      	mov	r1, r5
 8013614:	f7ec fe06 	bl	8000224 <__adddf3>
 8013618:	4604      	mov	r4, r0
 801361a:	460d      	mov	r5, r1
 801361c:	e020      	b.n	8013660 <scalbn+0x90>
 801361e:	460b      	mov	r3, r1
 8013620:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013624:	3936      	subs	r1, #54	@ 0x36
 8013626:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801362a:	4296      	cmp	r6, r2
 801362c:	dd0d      	ble.n	801364a <scalbn+0x7a>
 801362e:	2d00      	cmp	r5, #0
 8013630:	a11b      	add	r1, pc, #108	@ (adr r1, 80136a0 <scalbn+0xd0>)
 8013632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013636:	da02      	bge.n	801363e <scalbn+0x6e>
 8013638:	a11b      	add	r1, pc, #108	@ (adr r1, 80136a8 <scalbn+0xd8>)
 801363a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801363e:	a318      	add	r3, pc, #96	@ (adr r3, 80136a0 <scalbn+0xd0>)
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	f7ec ffa4 	bl	8000590 <__aeabi_dmul>
 8013648:	e7e6      	b.n	8013618 <scalbn+0x48>
 801364a:	1872      	adds	r2, r6, r1
 801364c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013650:	428a      	cmp	r2, r1
 8013652:	dcec      	bgt.n	801362e <scalbn+0x5e>
 8013654:	2a00      	cmp	r2, #0
 8013656:	dd06      	ble.n	8013666 <scalbn+0x96>
 8013658:	f36f 531e 	bfc	r3, #20, #11
 801365c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013660:	ec45 4b10 	vmov	d0, r4, r5
 8013664:	bd70      	pop	{r4, r5, r6, pc}
 8013666:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801366a:	da08      	bge.n	801367e <scalbn+0xae>
 801366c:	2d00      	cmp	r5, #0
 801366e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013698 <scalbn+0xc8>)
 8013670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013674:	dac3      	bge.n	80135fe <scalbn+0x2e>
 8013676:	a10e      	add	r1, pc, #56	@ (adr r1, 80136b0 <scalbn+0xe0>)
 8013678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801367c:	e7bf      	b.n	80135fe <scalbn+0x2e>
 801367e:	3236      	adds	r2, #54	@ 0x36
 8013680:	f36f 531e 	bfc	r3, #20, #11
 8013684:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013688:	4620      	mov	r0, r4
 801368a:	4b0d      	ldr	r3, [pc, #52]	@ (80136c0 <scalbn+0xf0>)
 801368c:	4629      	mov	r1, r5
 801368e:	2200      	movs	r2, #0
 8013690:	e7d8      	b.n	8013644 <scalbn+0x74>
 8013692:	bf00      	nop
 8013694:	f3af 8000 	nop.w
 8013698:	c2f8f359 	.word	0xc2f8f359
 801369c:	01a56e1f 	.word	0x01a56e1f
 80136a0:	8800759c 	.word	0x8800759c
 80136a4:	7e37e43c 	.word	0x7e37e43c
 80136a8:	8800759c 	.word	0x8800759c
 80136ac:	fe37e43c 	.word	0xfe37e43c
 80136b0:	c2f8f359 	.word	0xc2f8f359
 80136b4:	81a56e1f 	.word	0x81a56e1f
 80136b8:	43500000 	.word	0x43500000
 80136bc:	ffff3cb0 	.word	0xffff3cb0
 80136c0:	3c900000 	.word	0x3c900000

080136c4 <scalbnf>:
 80136c4:	ee10 3a10 	vmov	r3, s0
 80136c8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80136cc:	d02b      	beq.n	8013726 <scalbnf+0x62>
 80136ce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80136d2:	d302      	bcc.n	80136da <scalbnf+0x16>
 80136d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136d8:	4770      	bx	lr
 80136da:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80136de:	d123      	bne.n	8013728 <scalbnf+0x64>
 80136e0:	4b24      	ldr	r3, [pc, #144]	@ (8013774 <scalbnf+0xb0>)
 80136e2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013778 <scalbnf+0xb4>
 80136e6:	4298      	cmp	r0, r3
 80136e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80136ec:	db17      	blt.n	801371e <scalbnf+0x5a>
 80136ee:	ee10 3a10 	vmov	r3, s0
 80136f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80136f6:	3a19      	subs	r2, #25
 80136f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80136fc:	4288      	cmp	r0, r1
 80136fe:	dd15      	ble.n	801372c <scalbnf+0x68>
 8013700:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801377c <scalbnf+0xb8>
 8013704:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013780 <scalbnf+0xbc>
 8013708:	ee10 3a10 	vmov	r3, s0
 801370c:	eeb0 7a67 	vmov.f32	s14, s15
 8013710:	2b00      	cmp	r3, #0
 8013712:	bfb8      	it	lt
 8013714:	eef0 7a66 	vmovlt.f32	s15, s13
 8013718:	ee27 0a87 	vmul.f32	s0, s15, s14
 801371c:	4770      	bx	lr
 801371e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013784 <scalbnf+0xc0>
 8013722:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013726:	4770      	bx	lr
 8013728:	0dd2      	lsrs	r2, r2, #23
 801372a:	e7e5      	b.n	80136f8 <scalbnf+0x34>
 801372c:	4410      	add	r0, r2
 801372e:	28fe      	cmp	r0, #254	@ 0xfe
 8013730:	dce6      	bgt.n	8013700 <scalbnf+0x3c>
 8013732:	2800      	cmp	r0, #0
 8013734:	dd06      	ble.n	8013744 <scalbnf+0x80>
 8013736:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801373a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801373e:	ee00 3a10 	vmov	s0, r3
 8013742:	4770      	bx	lr
 8013744:	f110 0f16 	cmn.w	r0, #22
 8013748:	da09      	bge.n	801375e <scalbnf+0x9a>
 801374a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013784 <scalbnf+0xc0>
 801374e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013788 <scalbnf+0xc4>
 8013752:	ee10 3a10 	vmov	r3, s0
 8013756:	eeb0 7a67 	vmov.f32	s14, s15
 801375a:	2b00      	cmp	r3, #0
 801375c:	e7d9      	b.n	8013712 <scalbnf+0x4e>
 801375e:	3019      	adds	r0, #25
 8013760:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013764:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013768:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801378c <scalbnf+0xc8>
 801376c:	ee07 3a90 	vmov	s15, r3
 8013770:	e7d7      	b.n	8013722 <scalbnf+0x5e>
 8013772:	bf00      	nop
 8013774:	ffff3cb0 	.word	0xffff3cb0
 8013778:	4c000000 	.word	0x4c000000
 801377c:	7149f2ca 	.word	0x7149f2ca
 8013780:	f149f2ca 	.word	0xf149f2ca
 8013784:	0da24260 	.word	0x0da24260
 8013788:	8da24260 	.word	0x8da24260
 801378c:	33000000 	.word	0x33000000

08013790 <__kernel_rem_pio2>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	ed2d 8b02 	vpush	{d8}
 8013798:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801379c:	f112 0f14 	cmn.w	r2, #20
 80137a0:	9306      	str	r3, [sp, #24]
 80137a2:	9104      	str	r1, [sp, #16]
 80137a4:	4bc2      	ldr	r3, [pc, #776]	@ (8013ab0 <__kernel_rem_pio2+0x320>)
 80137a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80137a8:	9008      	str	r0, [sp, #32]
 80137aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	9b06      	ldr	r3, [sp, #24]
 80137b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80137b6:	bfa8      	it	ge
 80137b8:	1ed4      	subge	r4, r2, #3
 80137ba:	9305      	str	r3, [sp, #20]
 80137bc:	bfb2      	itee	lt
 80137be:	2400      	movlt	r4, #0
 80137c0:	2318      	movge	r3, #24
 80137c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80137c6:	f06f 0317 	mvn.w	r3, #23
 80137ca:	fb04 3303 	mla	r3, r4, r3, r3
 80137ce:	eb03 0b02 	add.w	fp, r3, r2
 80137d2:	9b00      	ldr	r3, [sp, #0]
 80137d4:	9a05      	ldr	r2, [sp, #20]
 80137d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8013aa0 <__kernel_rem_pio2+0x310>
 80137da:	eb03 0802 	add.w	r8, r3, r2
 80137de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80137e0:	1aa7      	subs	r7, r4, r2
 80137e2:	ae20      	add	r6, sp, #128	@ 0x80
 80137e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80137e8:	2500      	movs	r5, #0
 80137ea:	4545      	cmp	r5, r8
 80137ec:	dd12      	ble.n	8013814 <__kernel_rem_pio2+0x84>
 80137ee:	9b06      	ldr	r3, [sp, #24]
 80137f0:	aa20      	add	r2, sp, #128	@ 0x80
 80137f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80137f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80137fa:	2700      	movs	r7, #0
 80137fc:	9b00      	ldr	r3, [sp, #0]
 80137fe:	429f      	cmp	r7, r3
 8013800:	dc2e      	bgt.n	8013860 <__kernel_rem_pio2+0xd0>
 8013802:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8013aa0 <__kernel_rem_pio2+0x310>
 8013806:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801380a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801380e:	46a8      	mov	r8, r5
 8013810:	2600      	movs	r6, #0
 8013812:	e01b      	b.n	801384c <__kernel_rem_pio2+0xbc>
 8013814:	42ef      	cmn	r7, r5
 8013816:	d407      	bmi.n	8013828 <__kernel_rem_pio2+0x98>
 8013818:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801381c:	f7ec fe4e 	bl	80004bc <__aeabi_i2d>
 8013820:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013824:	3501      	adds	r5, #1
 8013826:	e7e0      	b.n	80137ea <__kernel_rem_pio2+0x5a>
 8013828:	ec51 0b18 	vmov	r0, r1, d8
 801382c:	e7f8      	b.n	8013820 <__kernel_rem_pio2+0x90>
 801382e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013832:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013836:	f7ec feab 	bl	8000590 <__aeabi_dmul>
 801383a:	4602      	mov	r2, r0
 801383c:	460b      	mov	r3, r1
 801383e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013842:	f7ec fcef 	bl	8000224 <__adddf3>
 8013846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801384a:	3601      	adds	r6, #1
 801384c:	9b05      	ldr	r3, [sp, #20]
 801384e:	429e      	cmp	r6, r3
 8013850:	dded      	ble.n	801382e <__kernel_rem_pio2+0x9e>
 8013852:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013856:	3701      	adds	r7, #1
 8013858:	ecaa 7b02 	vstmia	sl!, {d7}
 801385c:	3508      	adds	r5, #8
 801385e:	e7cd      	b.n	80137fc <__kernel_rem_pio2+0x6c>
 8013860:	9b00      	ldr	r3, [sp, #0]
 8013862:	f8dd 8000 	ldr.w	r8, [sp]
 8013866:	aa0c      	add	r2, sp, #48	@ 0x30
 8013868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801386c:	930a      	str	r3, [sp, #40]	@ 0x28
 801386e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013870:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013874:	9309      	str	r3, [sp, #36]	@ 0x24
 8013876:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801387a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801387c:	ab98      	add	r3, sp, #608	@ 0x260
 801387e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013882:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013886:	ed8d 7b02 	vstr	d7, [sp, #8]
 801388a:	ac0c      	add	r4, sp, #48	@ 0x30
 801388c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801388e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013892:	46a1      	mov	r9, r4
 8013894:	46c2      	mov	sl, r8
 8013896:	f1ba 0f00 	cmp.w	sl, #0
 801389a:	dc77      	bgt.n	801398c <__kernel_rem_pio2+0x1fc>
 801389c:	4658      	mov	r0, fp
 801389e:	ed9d 0b02 	vldr	d0, [sp, #8]
 80138a2:	f7ff fe95 	bl	80135d0 <scalbn>
 80138a6:	ec57 6b10 	vmov	r6, r7, d0
 80138aa:	2200      	movs	r2, #0
 80138ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80138b0:	4630      	mov	r0, r6
 80138b2:	4639      	mov	r1, r7
 80138b4:	f7ec fe6c 	bl	8000590 <__aeabi_dmul>
 80138b8:	ec41 0b10 	vmov	d0, r0, r1
 80138bc:	f000 fd20 	bl	8014300 <floor>
 80138c0:	4b7c      	ldr	r3, [pc, #496]	@ (8013ab4 <__kernel_rem_pio2+0x324>)
 80138c2:	ec51 0b10 	vmov	r0, r1, d0
 80138c6:	2200      	movs	r2, #0
 80138c8:	f7ec fe62 	bl	8000590 <__aeabi_dmul>
 80138cc:	4602      	mov	r2, r0
 80138ce:	460b      	mov	r3, r1
 80138d0:	4630      	mov	r0, r6
 80138d2:	4639      	mov	r1, r7
 80138d4:	f7ec fca4 	bl	8000220 <__aeabi_dsub>
 80138d8:	460f      	mov	r7, r1
 80138da:	4606      	mov	r6, r0
 80138dc:	f7ed f8f2 	bl	8000ac4 <__aeabi_d2iz>
 80138e0:	9002      	str	r0, [sp, #8]
 80138e2:	f7ec fdeb 	bl	80004bc <__aeabi_i2d>
 80138e6:	4602      	mov	r2, r0
 80138e8:	460b      	mov	r3, r1
 80138ea:	4630      	mov	r0, r6
 80138ec:	4639      	mov	r1, r7
 80138ee:	f7ec fc97 	bl	8000220 <__aeabi_dsub>
 80138f2:	f1bb 0f00 	cmp.w	fp, #0
 80138f6:	4606      	mov	r6, r0
 80138f8:	460f      	mov	r7, r1
 80138fa:	dd6c      	ble.n	80139d6 <__kernel_rem_pio2+0x246>
 80138fc:	f108 31ff 	add.w	r1, r8, #4294967295
 8013900:	ab0c      	add	r3, sp, #48	@ 0x30
 8013902:	9d02      	ldr	r5, [sp, #8]
 8013904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013908:	f1cb 0018 	rsb	r0, fp, #24
 801390c:	fa43 f200 	asr.w	r2, r3, r0
 8013910:	4415      	add	r5, r2
 8013912:	4082      	lsls	r2, r0
 8013914:	1a9b      	subs	r3, r3, r2
 8013916:	aa0c      	add	r2, sp, #48	@ 0x30
 8013918:	9502      	str	r5, [sp, #8]
 801391a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801391e:	f1cb 0217 	rsb	r2, fp, #23
 8013922:	fa43 f902 	asr.w	r9, r3, r2
 8013926:	f1b9 0f00 	cmp.w	r9, #0
 801392a:	dd64      	ble.n	80139f6 <__kernel_rem_pio2+0x266>
 801392c:	9b02      	ldr	r3, [sp, #8]
 801392e:	2200      	movs	r2, #0
 8013930:	3301      	adds	r3, #1
 8013932:	9302      	str	r3, [sp, #8]
 8013934:	4615      	mov	r5, r2
 8013936:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801393a:	4590      	cmp	r8, r2
 801393c:	f300 80a1 	bgt.w	8013a82 <__kernel_rem_pio2+0x2f2>
 8013940:	f1bb 0f00 	cmp.w	fp, #0
 8013944:	dd07      	ble.n	8013956 <__kernel_rem_pio2+0x1c6>
 8013946:	f1bb 0f01 	cmp.w	fp, #1
 801394a:	f000 80c1 	beq.w	8013ad0 <__kernel_rem_pio2+0x340>
 801394e:	f1bb 0f02 	cmp.w	fp, #2
 8013952:	f000 80c8 	beq.w	8013ae6 <__kernel_rem_pio2+0x356>
 8013956:	f1b9 0f02 	cmp.w	r9, #2
 801395a:	d14c      	bne.n	80139f6 <__kernel_rem_pio2+0x266>
 801395c:	4632      	mov	r2, r6
 801395e:	463b      	mov	r3, r7
 8013960:	4955      	ldr	r1, [pc, #340]	@ (8013ab8 <__kernel_rem_pio2+0x328>)
 8013962:	2000      	movs	r0, #0
 8013964:	f7ec fc5c 	bl	8000220 <__aeabi_dsub>
 8013968:	4606      	mov	r6, r0
 801396a:	460f      	mov	r7, r1
 801396c:	2d00      	cmp	r5, #0
 801396e:	d042      	beq.n	80139f6 <__kernel_rem_pio2+0x266>
 8013970:	4658      	mov	r0, fp
 8013972:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8013aa8 <__kernel_rem_pio2+0x318>
 8013976:	f7ff fe2b 	bl	80135d0 <scalbn>
 801397a:	4630      	mov	r0, r6
 801397c:	4639      	mov	r1, r7
 801397e:	ec53 2b10 	vmov	r2, r3, d0
 8013982:	f7ec fc4d 	bl	8000220 <__aeabi_dsub>
 8013986:	4606      	mov	r6, r0
 8013988:	460f      	mov	r7, r1
 801398a:	e034      	b.n	80139f6 <__kernel_rem_pio2+0x266>
 801398c:	4b4b      	ldr	r3, [pc, #300]	@ (8013abc <__kernel_rem_pio2+0x32c>)
 801398e:	2200      	movs	r2, #0
 8013990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013994:	f7ec fdfc 	bl	8000590 <__aeabi_dmul>
 8013998:	f7ed f894 	bl	8000ac4 <__aeabi_d2iz>
 801399c:	f7ec fd8e 	bl	80004bc <__aeabi_i2d>
 80139a0:	4b47      	ldr	r3, [pc, #284]	@ (8013ac0 <__kernel_rem_pio2+0x330>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	4606      	mov	r6, r0
 80139a6:	460f      	mov	r7, r1
 80139a8:	f7ec fdf2 	bl	8000590 <__aeabi_dmul>
 80139ac:	4602      	mov	r2, r0
 80139ae:	460b      	mov	r3, r1
 80139b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139b4:	f7ec fc34 	bl	8000220 <__aeabi_dsub>
 80139b8:	f7ed f884 	bl	8000ac4 <__aeabi_d2iz>
 80139bc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80139c0:	f849 0b04 	str.w	r0, [r9], #4
 80139c4:	4639      	mov	r1, r7
 80139c6:	4630      	mov	r0, r6
 80139c8:	f7ec fc2c 	bl	8000224 <__adddf3>
 80139cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139d4:	e75f      	b.n	8013896 <__kernel_rem_pio2+0x106>
 80139d6:	d107      	bne.n	80139e8 <__kernel_rem_pio2+0x258>
 80139d8:	f108 33ff 	add.w	r3, r8, #4294967295
 80139dc:	aa0c      	add	r2, sp, #48	@ 0x30
 80139de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139e2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80139e6:	e79e      	b.n	8013926 <__kernel_rem_pio2+0x196>
 80139e8:	4b36      	ldr	r3, [pc, #216]	@ (8013ac4 <__kernel_rem_pio2+0x334>)
 80139ea:	2200      	movs	r2, #0
 80139ec:	f7ed f856 	bl	8000a9c <__aeabi_dcmpge>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	d143      	bne.n	8013a7c <__kernel_rem_pio2+0x2ec>
 80139f4:	4681      	mov	r9, r0
 80139f6:	2200      	movs	r2, #0
 80139f8:	2300      	movs	r3, #0
 80139fa:	4630      	mov	r0, r6
 80139fc:	4639      	mov	r1, r7
 80139fe:	f7ed f82f 	bl	8000a60 <__aeabi_dcmpeq>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	f000 80c1 	beq.w	8013b8a <__kernel_rem_pio2+0x3fa>
 8013a08:	f108 33ff 	add.w	r3, r8, #4294967295
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	9900      	ldr	r1, [sp, #0]
 8013a10:	428b      	cmp	r3, r1
 8013a12:	da70      	bge.n	8013af6 <__kernel_rem_pio2+0x366>
 8013a14:	2a00      	cmp	r2, #0
 8013a16:	f000 808b 	beq.w	8013b30 <__kernel_rem_pio2+0x3a0>
 8013a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013a1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a20:	f1ab 0b18 	sub.w	fp, fp, #24
 8013a24:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d0f6      	beq.n	8013a1a <__kernel_rem_pio2+0x28a>
 8013a2c:	4658      	mov	r0, fp
 8013a2e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8013aa8 <__kernel_rem_pio2+0x318>
 8013a32:	f7ff fdcd 	bl	80135d0 <scalbn>
 8013a36:	f108 0301 	add.w	r3, r8, #1
 8013a3a:	00da      	lsls	r2, r3, #3
 8013a3c:	9205      	str	r2, [sp, #20]
 8013a3e:	ec55 4b10 	vmov	r4, r5, d0
 8013a42:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013a44:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8013abc <__kernel_rem_pio2+0x32c>
 8013a48:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013a4c:	4646      	mov	r6, r8
 8013a4e:	f04f 0a00 	mov.w	sl, #0
 8013a52:	2e00      	cmp	r6, #0
 8013a54:	f280 80d1 	bge.w	8013bfa <__kernel_rem_pio2+0x46a>
 8013a58:	4644      	mov	r4, r8
 8013a5a:	2c00      	cmp	r4, #0
 8013a5c:	f2c0 80ff 	blt.w	8013c5e <__kernel_rem_pio2+0x4ce>
 8013a60:	4b19      	ldr	r3, [pc, #100]	@ (8013ac8 <__kernel_rem_pio2+0x338>)
 8013a62:	461f      	mov	r7, r3
 8013a64:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013a66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a6a:	9306      	str	r3, [sp, #24]
 8013a6c:	f04f 0a00 	mov.w	sl, #0
 8013a70:	f04f 0b00 	mov.w	fp, #0
 8013a74:	2600      	movs	r6, #0
 8013a76:	eba8 0504 	sub.w	r5, r8, r4
 8013a7a:	e0e4      	b.n	8013c46 <__kernel_rem_pio2+0x4b6>
 8013a7c:	f04f 0902 	mov.w	r9, #2
 8013a80:	e754      	b.n	801392c <__kernel_rem_pio2+0x19c>
 8013a82:	f854 3b04 	ldr.w	r3, [r4], #4
 8013a86:	bb0d      	cbnz	r5, 8013acc <__kernel_rem_pio2+0x33c>
 8013a88:	b123      	cbz	r3, 8013a94 <__kernel_rem_pio2+0x304>
 8013a8a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a92:	2301      	movs	r3, #1
 8013a94:	3201      	adds	r2, #1
 8013a96:	461d      	mov	r5, r3
 8013a98:	e74f      	b.n	801393a <__kernel_rem_pio2+0x1aa>
 8013a9a:	bf00      	nop
 8013a9c:	f3af 8000 	nop.w
	...
 8013aac:	3ff00000 	.word	0x3ff00000
 8013ab0:	08014ab0 	.word	0x08014ab0
 8013ab4:	40200000 	.word	0x40200000
 8013ab8:	3ff00000 	.word	0x3ff00000
 8013abc:	3e700000 	.word	0x3e700000
 8013ac0:	41700000 	.word	0x41700000
 8013ac4:	3fe00000 	.word	0x3fe00000
 8013ac8:	08014a70 	.word	0x08014a70
 8013acc:	1acb      	subs	r3, r1, r3
 8013ace:	e7de      	b.n	8013a8e <__kernel_rem_pio2+0x2fe>
 8013ad0:	f108 32ff 	add.w	r2, r8, #4294967295
 8013ad4:	ab0c      	add	r3, sp, #48	@ 0x30
 8013ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ada:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013ade:	a90c      	add	r1, sp, #48	@ 0x30
 8013ae0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013ae4:	e737      	b.n	8013956 <__kernel_rem_pio2+0x1c6>
 8013ae6:	f108 32ff 	add.w	r2, r8, #4294967295
 8013aea:	ab0c      	add	r3, sp, #48	@ 0x30
 8013aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013af4:	e7f3      	b.n	8013ade <__kernel_rem_pio2+0x34e>
 8013af6:	a90c      	add	r1, sp, #48	@ 0x30
 8013af8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013afc:	3b01      	subs	r3, #1
 8013afe:	430a      	orrs	r2, r1
 8013b00:	e785      	b.n	8013a0e <__kernel_rem_pio2+0x27e>
 8013b02:	3401      	adds	r4, #1
 8013b04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013b08:	2a00      	cmp	r2, #0
 8013b0a:	d0fa      	beq.n	8013b02 <__kernel_rem_pio2+0x372>
 8013b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013b12:	eb0d 0503 	add.w	r5, sp, r3
 8013b16:	9b06      	ldr	r3, [sp, #24]
 8013b18:	aa20      	add	r2, sp, #128	@ 0x80
 8013b1a:	4443      	add	r3, r8
 8013b1c:	f108 0701 	add.w	r7, r8, #1
 8013b20:	3d98      	subs	r5, #152	@ 0x98
 8013b22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013b26:	4444      	add	r4, r8
 8013b28:	42bc      	cmp	r4, r7
 8013b2a:	da04      	bge.n	8013b36 <__kernel_rem_pio2+0x3a6>
 8013b2c:	46a0      	mov	r8, r4
 8013b2e:	e6a2      	b.n	8013876 <__kernel_rem_pio2+0xe6>
 8013b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b32:	2401      	movs	r4, #1
 8013b34:	e7e6      	b.n	8013b04 <__kernel_rem_pio2+0x374>
 8013b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013b3c:	f7ec fcbe 	bl	80004bc <__aeabi_i2d>
 8013b40:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013e00 <__kernel_rem_pio2+0x670>
 8013b44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b50:	46b2      	mov	sl, r6
 8013b52:	f04f 0800 	mov.w	r8, #0
 8013b56:	9b05      	ldr	r3, [sp, #20]
 8013b58:	4598      	cmp	r8, r3
 8013b5a:	dd05      	ble.n	8013b68 <__kernel_rem_pio2+0x3d8>
 8013b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b60:	3701      	adds	r7, #1
 8013b62:	eca5 7b02 	vstmia	r5!, {d7}
 8013b66:	e7df      	b.n	8013b28 <__kernel_rem_pio2+0x398>
 8013b68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013b6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013b70:	f7ec fd0e 	bl	8000590 <__aeabi_dmul>
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b7c:	f7ec fb52 	bl	8000224 <__adddf3>
 8013b80:	f108 0801 	add.w	r8, r8, #1
 8013b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b88:	e7e5      	b.n	8013b56 <__kernel_rem_pio2+0x3c6>
 8013b8a:	f1cb 0000 	rsb	r0, fp, #0
 8013b8e:	ec47 6b10 	vmov	d0, r6, r7
 8013b92:	f7ff fd1d 	bl	80135d0 <scalbn>
 8013b96:	ec55 4b10 	vmov	r4, r5, d0
 8013b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8013e08 <__kernel_rem_pio2+0x678>)
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	f7ec ff7b 	bl	8000a9c <__aeabi_dcmpge>
 8013ba6:	b300      	cbz	r0, 8013bea <__kernel_rem_pio2+0x45a>
 8013ba8:	4b98      	ldr	r3, [pc, #608]	@ (8013e0c <__kernel_rem_pio2+0x67c>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	4620      	mov	r0, r4
 8013bae:	4629      	mov	r1, r5
 8013bb0:	f7ec fcee 	bl	8000590 <__aeabi_dmul>
 8013bb4:	f7ec ff86 	bl	8000ac4 <__aeabi_d2iz>
 8013bb8:	4606      	mov	r6, r0
 8013bba:	f7ec fc7f 	bl	80004bc <__aeabi_i2d>
 8013bbe:	4b92      	ldr	r3, [pc, #584]	@ (8013e08 <__kernel_rem_pio2+0x678>)
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f7ec fce5 	bl	8000590 <__aeabi_dmul>
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	4602      	mov	r2, r0
 8013bca:	4629      	mov	r1, r5
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f7ec fb27 	bl	8000220 <__aeabi_dsub>
 8013bd2:	f7ec ff77 	bl	8000ac4 <__aeabi_d2iz>
 8013bd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013bd8:	f10b 0b18 	add.w	fp, fp, #24
 8013bdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013be0:	f108 0801 	add.w	r8, r8, #1
 8013be4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013be8:	e720      	b.n	8013a2c <__kernel_rem_pio2+0x29c>
 8013bea:	4620      	mov	r0, r4
 8013bec:	4629      	mov	r1, r5
 8013bee:	f7ec ff69 	bl	8000ac4 <__aeabi_d2iz>
 8013bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8013bf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013bf8:	e718      	b.n	8013a2c <__kernel_rem_pio2+0x29c>
 8013bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8013bfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c00:	f7ec fc5c 	bl	80004bc <__aeabi_i2d>
 8013c04:	4622      	mov	r2, r4
 8013c06:	462b      	mov	r3, r5
 8013c08:	f7ec fcc2 	bl	8000590 <__aeabi_dmul>
 8013c0c:	4652      	mov	r2, sl
 8013c0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013c12:	465b      	mov	r3, fp
 8013c14:	4620      	mov	r0, r4
 8013c16:	4629      	mov	r1, r5
 8013c18:	f7ec fcba 	bl	8000590 <__aeabi_dmul>
 8013c1c:	3e01      	subs	r6, #1
 8013c1e:	4604      	mov	r4, r0
 8013c20:	460d      	mov	r5, r1
 8013c22:	e716      	b.n	8013a52 <__kernel_rem_pio2+0x2c2>
 8013c24:	9906      	ldr	r1, [sp, #24]
 8013c26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013c2a:	9106      	str	r1, [sp, #24]
 8013c2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013c30:	f7ec fcae 	bl	8000590 <__aeabi_dmul>
 8013c34:	4602      	mov	r2, r0
 8013c36:	460b      	mov	r3, r1
 8013c38:	4650      	mov	r0, sl
 8013c3a:	4659      	mov	r1, fp
 8013c3c:	f7ec faf2 	bl	8000224 <__adddf3>
 8013c40:	3601      	adds	r6, #1
 8013c42:	4682      	mov	sl, r0
 8013c44:	468b      	mov	fp, r1
 8013c46:	9b00      	ldr	r3, [sp, #0]
 8013c48:	429e      	cmp	r6, r3
 8013c4a:	dc01      	bgt.n	8013c50 <__kernel_rem_pio2+0x4c0>
 8013c4c:	42ae      	cmp	r6, r5
 8013c4e:	dde9      	ble.n	8013c24 <__kernel_rem_pio2+0x494>
 8013c50:	ab48      	add	r3, sp, #288	@ 0x120
 8013c52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013c56:	e9c5 ab00 	strd	sl, fp, [r5]
 8013c5a:	3c01      	subs	r4, #1
 8013c5c:	e6fd      	b.n	8013a5a <__kernel_rem_pio2+0x2ca>
 8013c5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013c60:	2b02      	cmp	r3, #2
 8013c62:	dc0b      	bgt.n	8013c7c <__kernel_rem_pio2+0x4ec>
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	dc35      	bgt.n	8013cd4 <__kernel_rem_pio2+0x544>
 8013c68:	d059      	beq.n	8013d1e <__kernel_rem_pio2+0x58e>
 8013c6a:	9b02      	ldr	r3, [sp, #8]
 8013c6c:	f003 0007 	and.w	r0, r3, #7
 8013c70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013c74:	ecbd 8b02 	vpop	{d8}
 8013c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d1f3      	bne.n	8013c6a <__kernel_rem_pio2+0x4da>
 8013c82:	9b05      	ldr	r3, [sp, #20]
 8013c84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013c88:	eb0d 0403 	add.w	r4, sp, r3
 8013c8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013c90:	4625      	mov	r5, r4
 8013c92:	46c2      	mov	sl, r8
 8013c94:	f1ba 0f00 	cmp.w	sl, #0
 8013c98:	dc69      	bgt.n	8013d6e <__kernel_rem_pio2+0x5de>
 8013c9a:	4645      	mov	r5, r8
 8013c9c:	2d01      	cmp	r5, #1
 8013c9e:	f300 8087 	bgt.w	8013db0 <__kernel_rem_pio2+0x620>
 8013ca2:	9c05      	ldr	r4, [sp, #20]
 8013ca4:	ab48      	add	r3, sp, #288	@ 0x120
 8013ca6:	441c      	add	r4, r3
 8013ca8:	2000      	movs	r0, #0
 8013caa:	2100      	movs	r1, #0
 8013cac:	f1b8 0f01 	cmp.w	r8, #1
 8013cb0:	f300 809c 	bgt.w	8013dec <__kernel_rem_pio2+0x65c>
 8013cb4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8013cb8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8013cbc:	f1b9 0f00 	cmp.w	r9, #0
 8013cc0:	f040 80a6 	bne.w	8013e10 <__kernel_rem_pio2+0x680>
 8013cc4:	9b04      	ldr	r3, [sp, #16]
 8013cc6:	e9c3 5600 	strd	r5, r6, [r3]
 8013cca:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013cce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013cd2:	e7ca      	b.n	8013c6a <__kernel_rem_pio2+0x4da>
 8013cd4:	9d05      	ldr	r5, [sp, #20]
 8013cd6:	ab48      	add	r3, sp, #288	@ 0x120
 8013cd8:	441d      	add	r5, r3
 8013cda:	4644      	mov	r4, r8
 8013cdc:	2000      	movs	r0, #0
 8013cde:	2100      	movs	r1, #0
 8013ce0:	2c00      	cmp	r4, #0
 8013ce2:	da35      	bge.n	8013d50 <__kernel_rem_pio2+0x5c0>
 8013ce4:	f1b9 0f00 	cmp.w	r9, #0
 8013ce8:	d038      	beq.n	8013d5c <__kernel_rem_pio2+0x5cc>
 8013cea:	4602      	mov	r2, r0
 8013cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013cf0:	9c04      	ldr	r4, [sp, #16]
 8013cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013cfe:	f7ec fa8f 	bl	8000220 <__aeabi_dsub>
 8013d02:	ad4a      	add	r5, sp, #296	@ 0x128
 8013d04:	2401      	movs	r4, #1
 8013d06:	45a0      	cmp	r8, r4
 8013d08:	da2b      	bge.n	8013d62 <__kernel_rem_pio2+0x5d2>
 8013d0a:	f1b9 0f00 	cmp.w	r9, #0
 8013d0e:	d002      	beq.n	8013d16 <__kernel_rem_pio2+0x586>
 8013d10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d14:	4619      	mov	r1, r3
 8013d16:	9b04      	ldr	r3, [sp, #16]
 8013d18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013d1c:	e7a5      	b.n	8013c6a <__kernel_rem_pio2+0x4da>
 8013d1e:	9c05      	ldr	r4, [sp, #20]
 8013d20:	ab48      	add	r3, sp, #288	@ 0x120
 8013d22:	441c      	add	r4, r3
 8013d24:	2000      	movs	r0, #0
 8013d26:	2100      	movs	r1, #0
 8013d28:	f1b8 0f00 	cmp.w	r8, #0
 8013d2c:	da09      	bge.n	8013d42 <__kernel_rem_pio2+0x5b2>
 8013d2e:	f1b9 0f00 	cmp.w	r9, #0
 8013d32:	d002      	beq.n	8013d3a <__kernel_rem_pio2+0x5aa>
 8013d34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d38:	4619      	mov	r1, r3
 8013d3a:	9b04      	ldr	r3, [sp, #16]
 8013d3c:	e9c3 0100 	strd	r0, r1, [r3]
 8013d40:	e793      	b.n	8013c6a <__kernel_rem_pio2+0x4da>
 8013d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d46:	f7ec fa6d 	bl	8000224 <__adddf3>
 8013d4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d4e:	e7eb      	b.n	8013d28 <__kernel_rem_pio2+0x598>
 8013d50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013d54:	f7ec fa66 	bl	8000224 <__adddf3>
 8013d58:	3c01      	subs	r4, #1
 8013d5a:	e7c1      	b.n	8013ce0 <__kernel_rem_pio2+0x550>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	e7c6      	b.n	8013cf0 <__kernel_rem_pio2+0x560>
 8013d62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013d66:	f7ec fa5d 	bl	8000224 <__adddf3>
 8013d6a:	3401      	adds	r4, #1
 8013d6c:	e7cb      	b.n	8013d06 <__kernel_rem_pio2+0x576>
 8013d6e:	ed35 7b02 	vldmdb	r5!, {d7}
 8013d72:	ed8d 7b00 	vstr	d7, [sp]
 8013d76:	ed95 7b02 	vldr	d7, [r5, #8]
 8013d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d7e:	ec53 2b17 	vmov	r2, r3, d7
 8013d82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d86:	f7ec fa4d 	bl	8000224 <__adddf3>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	4606      	mov	r6, r0
 8013d90:	460f      	mov	r7, r1
 8013d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d96:	f7ec fa43 	bl	8000220 <__aeabi_dsub>
 8013d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d9e:	f7ec fa41 	bl	8000224 <__adddf3>
 8013da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013da6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013daa:	e9c5 6700 	strd	r6, r7, [r5]
 8013dae:	e771      	b.n	8013c94 <__kernel_rem_pio2+0x504>
 8013db0:	ed34 7b02 	vldmdb	r4!, {d7}
 8013db4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013db8:	ec51 0b17 	vmov	r0, r1, d7
 8013dbc:	4652      	mov	r2, sl
 8013dbe:	465b      	mov	r3, fp
 8013dc0:	ed8d 7b00 	vstr	d7, [sp]
 8013dc4:	f7ec fa2e 	bl	8000224 <__adddf3>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	460b      	mov	r3, r1
 8013dcc:	4606      	mov	r6, r0
 8013dce:	460f      	mov	r7, r1
 8013dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013dd4:	f7ec fa24 	bl	8000220 <__aeabi_dsub>
 8013dd8:	4652      	mov	r2, sl
 8013dda:	465b      	mov	r3, fp
 8013ddc:	f7ec fa22 	bl	8000224 <__adddf3>
 8013de0:	3d01      	subs	r5, #1
 8013de2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013de6:	e9c4 6700 	strd	r6, r7, [r4]
 8013dea:	e757      	b.n	8013c9c <__kernel_rem_pio2+0x50c>
 8013dec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013df0:	f7ec fa18 	bl	8000224 <__adddf3>
 8013df4:	f108 38ff 	add.w	r8, r8, #4294967295
 8013df8:	e758      	b.n	8013cac <__kernel_rem_pio2+0x51c>
 8013dfa:	bf00      	nop
 8013dfc:	f3af 8000 	nop.w
	...
 8013e08:	41700000 	.word	0x41700000
 8013e0c:	3e700000 	.word	0x3e700000
 8013e10:	9b04      	ldr	r3, [sp, #16]
 8013e12:	9a04      	ldr	r2, [sp, #16]
 8013e14:	601d      	str	r5, [r3, #0]
 8013e16:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8013e1a:	605c      	str	r4, [r3, #4]
 8013e1c:	609f      	str	r7, [r3, #8]
 8013e1e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013e22:	60d3      	str	r3, [r2, #12]
 8013e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013e28:	6110      	str	r0, [r2, #16]
 8013e2a:	6153      	str	r3, [r2, #20]
 8013e2c:	e71d      	b.n	8013c6a <__kernel_rem_pio2+0x4da>
 8013e2e:	bf00      	nop

08013e30 <__kernel_rem_pio2f>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	ed2d 8b04 	vpush	{d8-d9}
 8013e38:	b0d9      	sub	sp, #356	@ 0x164
 8013e3a:	4690      	mov	r8, r2
 8013e3c:	9001      	str	r0, [sp, #4]
 8013e3e:	4ab6      	ldr	r2, [pc, #728]	@ (8014118 <__kernel_rem_pio2f+0x2e8>)
 8013e40:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013e42:	f118 0f04 	cmn.w	r8, #4
 8013e46:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013e4a:	460f      	mov	r7, r1
 8013e4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013e50:	db26      	blt.n	8013ea0 <__kernel_rem_pio2f+0x70>
 8013e52:	f1b8 0203 	subs.w	r2, r8, #3
 8013e56:	bf48      	it	mi
 8013e58:	f108 0204 	addmi.w	r2, r8, #4
 8013e5c:	10d2      	asrs	r2, r2, #3
 8013e5e:	1c55      	adds	r5, r2, #1
 8013e60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013e62:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 8013e66:	00e8      	lsls	r0, r5, #3
 8013e68:	eba2 060b 	sub.w	r6, r2, fp
 8013e6c:	9002      	str	r0, [sp, #8]
 8013e6e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013e72:	eb0a 0c0b 	add.w	ip, sl, fp
 8013e76:	ac1c      	add	r4, sp, #112	@ 0x70
 8013e78:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	4560      	cmp	r0, ip
 8013e80:	dd10      	ble.n	8013ea4 <__kernel_rem_pio2f+0x74>
 8013e82:	a91c      	add	r1, sp, #112	@ 0x70
 8013e84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013e88:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013e8c:	2600      	movs	r6, #0
 8013e8e:	4556      	cmp	r6, sl
 8013e90:	dc24      	bgt.n	8013edc <__kernel_rem_pio2f+0xac>
 8013e92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013e96:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 8013e9a:	4684      	mov	ip, r0
 8013e9c:	2400      	movs	r4, #0
 8013e9e:	e016      	b.n	8013ece <__kernel_rem_pio2f+0x9e>
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	e7dc      	b.n	8013e5e <__kernel_rem_pio2f+0x2e>
 8013ea4:	42c6      	cmn	r6, r0
 8013ea6:	bf5d      	ittte	pl
 8013ea8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013eac:	ee07 1a90 	vmovpl	s15, r1
 8013eb0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013eb4:	eef0 7a47 	vmovmi.f32	s15, s14
 8013eb8:	ece4 7a01 	vstmia	r4!, {s15}
 8013ebc:	3001      	adds	r0, #1
 8013ebe:	e7de      	b.n	8013e7e <__kernel_rem_pio2f+0x4e>
 8013ec0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013ec4:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013ec8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013ecc:	3401      	adds	r4, #1
 8013ece:	455c      	cmp	r4, fp
 8013ed0:	ddf6      	ble.n	8013ec0 <__kernel_rem_pio2f+0x90>
 8013ed2:	ece9 7a01 	vstmia	r9!, {s15}
 8013ed6:	3601      	adds	r6, #1
 8013ed8:	3004      	adds	r0, #4
 8013eda:	e7d8      	b.n	8013e8e <__kernel_rem_pio2f+0x5e>
 8013edc:	a908      	add	r1, sp, #32
 8013ede:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ee2:	9104      	str	r1, [sp, #16]
 8013ee4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013ee6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014124 <__kernel_rem_pio2f+0x2f4>
 8013eea:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014120 <__kernel_rem_pio2f+0x2f0>
 8013eee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013ef2:	9203      	str	r2, [sp, #12]
 8013ef4:	4654      	mov	r4, sl
 8013ef6:	00a2      	lsls	r2, r4, #2
 8013ef8:	9205      	str	r2, [sp, #20]
 8013efa:	aa58      	add	r2, sp, #352	@ 0x160
 8013efc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013f00:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013f04:	a944      	add	r1, sp, #272	@ 0x110
 8013f06:	aa08      	add	r2, sp, #32
 8013f08:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013f0c:	4694      	mov	ip, r2
 8013f0e:	4626      	mov	r6, r4
 8013f10:	2e00      	cmp	r6, #0
 8013f12:	dc4c      	bgt.n	8013fae <__kernel_rem_pio2f+0x17e>
 8013f14:	4628      	mov	r0, r5
 8013f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013f1a:	f7ff fbd3 	bl	80136c4 <scalbnf>
 8013f1e:	eeb0 8a40 	vmov.f32	s16, s0
 8013f22:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013f26:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013f2a:	f000 fa65 	bl	80143f8 <floorf>
 8013f2e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013f32:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013f36:	2d00      	cmp	r5, #0
 8013f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013f40:	ee17 9a90 	vmov	r9, s15
 8013f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f48:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013f4c:	dd41      	ble.n	8013fd2 <__kernel_rem_pio2f+0x1a2>
 8013f4e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013f52:	a908      	add	r1, sp, #32
 8013f54:	f1c5 0e08 	rsb	lr, r5, #8
 8013f58:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013f5c:	fa46 f00e 	asr.w	r0, r6, lr
 8013f60:	4481      	add	r9, r0
 8013f62:	fa00 f00e 	lsl.w	r0, r0, lr
 8013f66:	1a36      	subs	r6, r6, r0
 8013f68:	f1c5 0007 	rsb	r0, r5, #7
 8013f6c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013f70:	4106      	asrs	r6, r0
 8013f72:	2e00      	cmp	r6, #0
 8013f74:	dd3c      	ble.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f76:	f04f 0e00 	mov.w	lr, #0
 8013f7a:	f109 0901 	add.w	r9, r9, #1
 8013f7e:	4670      	mov	r0, lr
 8013f80:	4574      	cmp	r4, lr
 8013f82:	dc68      	bgt.n	8014056 <__kernel_rem_pio2f+0x226>
 8013f84:	2d00      	cmp	r5, #0
 8013f86:	dd03      	ble.n	8013f90 <__kernel_rem_pio2f+0x160>
 8013f88:	2d01      	cmp	r5, #1
 8013f8a:	d074      	beq.n	8014076 <__kernel_rem_pio2f+0x246>
 8013f8c:	2d02      	cmp	r5, #2
 8013f8e:	d07d      	beq.n	801408c <__kernel_rem_pio2f+0x25c>
 8013f90:	2e02      	cmp	r6, #2
 8013f92:	d12d      	bne.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013f98:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013f9c:	b340      	cbz	r0, 8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	9306      	str	r3, [sp, #24]
 8013fa2:	f7ff fb8f 	bl	80136c4 <scalbnf>
 8013fa6:	9b06      	ldr	r3, [sp, #24]
 8013fa8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013fac:	e020      	b.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013fae:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013fb2:	3e01      	subs	r6, #1
 8013fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fbc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013fc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013fc4:	ecac 0a01 	vstmia	ip!, {s0}
 8013fc8:	ed30 0a01 	vldmdb	r0!, {s0}
 8013fcc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013fd0:	e79e      	b.n	8013f10 <__kernel_rem_pio2f+0xe0>
 8013fd2:	d105      	bne.n	8013fe0 <__kernel_rem_pio2f+0x1b0>
 8013fd4:	1e60      	subs	r0, r4, #1
 8013fd6:	a908      	add	r1, sp, #32
 8013fd8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013fdc:	11f6      	asrs	r6, r6, #7
 8013fde:	e7c8      	b.n	8013f72 <__kernel_rem_pio2f+0x142>
 8013fe0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013fe4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fec:	da31      	bge.n	8014052 <__kernel_rem_pio2f+0x222>
 8013fee:	2600      	movs	r6, #0
 8013ff0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff8:	f040 8098 	bne.w	801412c <__kernel_rem_pio2f+0x2fc>
 8013ffc:	1e60      	subs	r0, r4, #1
 8013ffe:	2200      	movs	r2, #0
 8014000:	4550      	cmp	r0, sl
 8014002:	da4b      	bge.n	801409c <__kernel_rem_pio2f+0x26c>
 8014004:	2a00      	cmp	r2, #0
 8014006:	d065      	beq.n	80140d4 <__kernel_rem_pio2f+0x2a4>
 8014008:	3c01      	subs	r4, #1
 801400a:	ab08      	add	r3, sp, #32
 801400c:	3d08      	subs	r5, #8
 801400e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d0f8      	beq.n	8014008 <__kernel_rem_pio2f+0x1d8>
 8014016:	4628      	mov	r0, r5
 8014018:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801401c:	f7ff fb52 	bl	80136c4 <scalbnf>
 8014020:	1c63      	adds	r3, r4, #1
 8014022:	aa44      	add	r2, sp, #272	@ 0x110
 8014024:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014124 <__kernel_rem_pio2f+0x2f4>
 8014028:	0099      	lsls	r1, r3, #2
 801402a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801402e:	4623      	mov	r3, r4
 8014030:	2b00      	cmp	r3, #0
 8014032:	f280 80a9 	bge.w	8014188 <__kernel_rem_pio2f+0x358>
 8014036:	4623      	mov	r3, r4
 8014038:	2b00      	cmp	r3, #0
 801403a:	f2c0 80c7 	blt.w	80141cc <__kernel_rem_pio2f+0x39c>
 801403e:	aa44      	add	r2, sp, #272	@ 0x110
 8014040:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014044:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801411c <__kernel_rem_pio2f+0x2ec>
 8014048:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 801404c:	2000      	movs	r0, #0
 801404e:	1ae2      	subs	r2, r4, r3
 8014050:	e0b1      	b.n	80141b6 <__kernel_rem_pio2f+0x386>
 8014052:	2602      	movs	r6, #2
 8014054:	e78f      	b.n	8013f76 <__kernel_rem_pio2f+0x146>
 8014056:	f852 1b04 	ldr.w	r1, [r2], #4
 801405a:	b948      	cbnz	r0, 8014070 <__kernel_rem_pio2f+0x240>
 801405c:	b121      	cbz	r1, 8014068 <__kernel_rem_pio2f+0x238>
 801405e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8014062:	f842 1c04 	str.w	r1, [r2, #-4]
 8014066:	2101      	movs	r1, #1
 8014068:	f10e 0e01 	add.w	lr, lr, #1
 801406c:	4608      	mov	r0, r1
 801406e:	e787      	b.n	8013f80 <__kernel_rem_pio2f+0x150>
 8014070:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014074:	e7f5      	b.n	8014062 <__kernel_rem_pio2f+0x232>
 8014076:	f104 3cff 	add.w	ip, r4, #4294967295
 801407a:	aa08      	add	r2, sp, #32
 801407c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014080:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014084:	a908      	add	r1, sp, #32
 8014086:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801408a:	e781      	b.n	8013f90 <__kernel_rem_pio2f+0x160>
 801408c:	f104 3cff 	add.w	ip, r4, #4294967295
 8014090:	aa08      	add	r2, sp, #32
 8014092:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014096:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801409a:	e7f3      	b.n	8014084 <__kernel_rem_pio2f+0x254>
 801409c:	a908      	add	r1, sp, #32
 801409e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80140a2:	3801      	subs	r0, #1
 80140a4:	430a      	orrs	r2, r1
 80140a6:	e7ab      	b.n	8014000 <__kernel_rem_pio2f+0x1d0>
 80140a8:	3201      	adds	r2, #1
 80140aa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80140ae:	2e00      	cmp	r6, #0
 80140b0:	d0fa      	beq.n	80140a8 <__kernel_rem_pio2f+0x278>
 80140b2:	9905      	ldr	r1, [sp, #20]
 80140b4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80140b8:	eb0d 0001 	add.w	r0, sp, r1
 80140bc:	18e6      	adds	r6, r4, r3
 80140be:	a91c      	add	r1, sp, #112	@ 0x70
 80140c0:	f104 0c01 	add.w	ip, r4, #1
 80140c4:	384c      	subs	r0, #76	@ 0x4c
 80140c6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80140ca:	4422      	add	r2, r4
 80140cc:	4562      	cmp	r2, ip
 80140ce:	da04      	bge.n	80140da <__kernel_rem_pio2f+0x2aa>
 80140d0:	4614      	mov	r4, r2
 80140d2:	e710      	b.n	8013ef6 <__kernel_rem_pio2f+0xc6>
 80140d4:	9804      	ldr	r0, [sp, #16]
 80140d6:	2201      	movs	r2, #1
 80140d8:	e7e7      	b.n	80140aa <__kernel_rem_pio2f+0x27a>
 80140da:	9903      	ldr	r1, [sp, #12]
 80140dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80140e0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80140e4:	9105      	str	r1, [sp, #20]
 80140e6:	ee07 1a90 	vmov	s15, r1
 80140ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140ee:	2400      	movs	r4, #0
 80140f0:	ece6 7a01 	vstmia	r6!, {s15}
 80140f4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 80140f8:	46b1      	mov	r9, r6
 80140fa:	455c      	cmp	r4, fp
 80140fc:	dd04      	ble.n	8014108 <__kernel_rem_pio2f+0x2d8>
 80140fe:	ece0 7a01 	vstmia	r0!, {s15}
 8014102:	f10c 0c01 	add.w	ip, ip, #1
 8014106:	e7e1      	b.n	80140cc <__kernel_rem_pio2f+0x29c>
 8014108:	ecfe 6a01 	vldmia	lr!, {s13}
 801410c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014110:	3401      	adds	r4, #1
 8014112:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014116:	e7f0      	b.n	80140fa <__kernel_rem_pio2f+0x2ca>
 8014118:	08014aec 	.word	0x08014aec
 801411c:	08014ac0 	.word	0x08014ac0
 8014120:	43800000 	.word	0x43800000
 8014124:	3b800000 	.word	0x3b800000
 8014128:	00000000 	.word	0x00000000
 801412c:	9b02      	ldr	r3, [sp, #8]
 801412e:	eeb0 0a48 	vmov.f32	s0, s16
 8014132:	eba3 0008 	sub.w	r0, r3, r8
 8014136:	f7ff fac5 	bl	80136c4 <scalbnf>
 801413a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014120 <__kernel_rem_pio2f+0x2f0>
 801413e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014146:	db19      	blt.n	801417c <__kernel_rem_pio2f+0x34c>
 8014148:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014124 <__kernel_rem_pio2f+0x2f4>
 801414c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014150:	aa08      	add	r2, sp, #32
 8014152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014156:	3508      	adds	r5, #8
 8014158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801415c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014164:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014168:	ee10 3a10 	vmov	r3, s0
 801416c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014170:	ee17 3a90 	vmov	r3, s15
 8014174:	3401      	adds	r4, #1
 8014176:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801417a:	e74c      	b.n	8014016 <__kernel_rem_pio2f+0x1e6>
 801417c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014180:	aa08      	add	r2, sp, #32
 8014182:	ee10 3a10 	vmov	r3, s0
 8014186:	e7f6      	b.n	8014176 <__kernel_rem_pio2f+0x346>
 8014188:	a808      	add	r0, sp, #32
 801418a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801418e:	9001      	str	r0, [sp, #4]
 8014190:	ee07 0a90 	vmov	s15, r0
 8014194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014198:	3b01      	subs	r3, #1
 801419a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801419e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80141a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80141a6:	e743      	b.n	8014030 <__kernel_rem_pio2f+0x200>
 80141a8:	ecfc 6a01 	vldmia	ip!, {s13}
 80141ac:	ecb5 7a01 	vldmia	r5!, {s14}
 80141b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80141b4:	3001      	adds	r0, #1
 80141b6:	4550      	cmp	r0, sl
 80141b8:	dc01      	bgt.n	80141be <__kernel_rem_pio2f+0x38e>
 80141ba:	4290      	cmp	r0, r2
 80141bc:	ddf4      	ble.n	80141a8 <__kernel_rem_pio2f+0x378>
 80141be:	a858      	add	r0, sp, #352	@ 0x160
 80141c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80141c4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80141c8:	3b01      	subs	r3, #1
 80141ca:	e735      	b.n	8014038 <__kernel_rem_pio2f+0x208>
 80141cc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80141ce:	2b02      	cmp	r3, #2
 80141d0:	dc09      	bgt.n	80141e6 <__kernel_rem_pio2f+0x3b6>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	dc27      	bgt.n	8014226 <__kernel_rem_pio2f+0x3f6>
 80141d6:	d040      	beq.n	801425a <__kernel_rem_pio2f+0x42a>
 80141d8:	f009 0007 	and.w	r0, r9, #7
 80141dc:	b059      	add	sp, #356	@ 0x164
 80141de:	ecbd 8b04 	vpop	{d8-d9}
 80141e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80141e8:	2b03      	cmp	r3, #3
 80141ea:	d1f5      	bne.n	80141d8 <__kernel_rem_pio2f+0x3a8>
 80141ec:	aa30      	add	r2, sp, #192	@ 0xc0
 80141ee:	1f0b      	subs	r3, r1, #4
 80141f0:	4413      	add	r3, r2
 80141f2:	461a      	mov	r2, r3
 80141f4:	4620      	mov	r0, r4
 80141f6:	2800      	cmp	r0, #0
 80141f8:	dc50      	bgt.n	801429c <__kernel_rem_pio2f+0x46c>
 80141fa:	4622      	mov	r2, r4
 80141fc:	2a01      	cmp	r2, #1
 80141fe:	dc5d      	bgt.n	80142bc <__kernel_rem_pio2f+0x48c>
 8014200:	ab30      	add	r3, sp, #192	@ 0xc0
 8014202:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 8014206:	440b      	add	r3, r1
 8014208:	2c01      	cmp	r4, #1
 801420a:	dc67      	bgt.n	80142dc <__kernel_rem_pio2f+0x4ac>
 801420c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014210:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014214:	2e00      	cmp	r6, #0
 8014216:	d167      	bne.n	80142e8 <__kernel_rem_pio2f+0x4b8>
 8014218:	edc7 6a00 	vstr	s13, [r7]
 801421c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014220:	edc7 7a02 	vstr	s15, [r7, #8]
 8014224:	e7d8      	b.n	80141d8 <__kernel_rem_pio2f+0x3a8>
 8014226:	ab30      	add	r3, sp, #192	@ 0xc0
 8014228:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 801422c:	440b      	add	r3, r1
 801422e:	4622      	mov	r2, r4
 8014230:	2a00      	cmp	r2, #0
 8014232:	da24      	bge.n	801427e <__kernel_rem_pio2f+0x44e>
 8014234:	b34e      	cbz	r6, 801428a <__kernel_rem_pio2f+0x45a>
 8014236:	eef1 7a47 	vneg.f32	s15, s14
 801423a:	edc7 7a00 	vstr	s15, [r7]
 801423e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014246:	aa31      	add	r2, sp, #196	@ 0xc4
 8014248:	2301      	movs	r3, #1
 801424a:	429c      	cmp	r4, r3
 801424c:	da20      	bge.n	8014290 <__kernel_rem_pio2f+0x460>
 801424e:	b10e      	cbz	r6, 8014254 <__kernel_rem_pio2f+0x424>
 8014250:	eef1 7a67 	vneg.f32	s15, s15
 8014254:	edc7 7a01 	vstr	s15, [r7, #4]
 8014258:	e7be      	b.n	80141d8 <__kernel_rem_pio2f+0x3a8>
 801425a:	ab30      	add	r3, sp, #192	@ 0xc0
 801425c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014128 <__kernel_rem_pio2f+0x2f8>
 8014260:	440b      	add	r3, r1
 8014262:	2c00      	cmp	r4, #0
 8014264:	da05      	bge.n	8014272 <__kernel_rem_pio2f+0x442>
 8014266:	b10e      	cbz	r6, 801426c <__kernel_rem_pio2f+0x43c>
 8014268:	eef1 7a67 	vneg.f32	s15, s15
 801426c:	edc7 7a00 	vstr	s15, [r7]
 8014270:	e7b2      	b.n	80141d8 <__kernel_rem_pio2f+0x3a8>
 8014272:	ed33 7a01 	vldmdb	r3!, {s14}
 8014276:	3c01      	subs	r4, #1
 8014278:	ee77 7a87 	vadd.f32	s15, s15, s14
 801427c:	e7f1      	b.n	8014262 <__kernel_rem_pio2f+0x432>
 801427e:	ed73 7a01 	vldmdb	r3!, {s15}
 8014282:	3a01      	subs	r2, #1
 8014284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014288:	e7d2      	b.n	8014230 <__kernel_rem_pio2f+0x400>
 801428a:	eef0 7a47 	vmov.f32	s15, s14
 801428e:	e7d4      	b.n	801423a <__kernel_rem_pio2f+0x40a>
 8014290:	ecb2 7a01 	vldmia	r2!, {s14}
 8014294:	3301      	adds	r3, #1
 8014296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801429a:	e7d6      	b.n	801424a <__kernel_rem_pio2f+0x41a>
 801429c:	ed72 7a01 	vldmdb	r2!, {s15}
 80142a0:	edd2 6a01 	vldr	s13, [r2, #4]
 80142a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80142a8:	3801      	subs	r0, #1
 80142aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142ae:	ed82 7a00 	vstr	s14, [r2]
 80142b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142b6:	edc2 7a01 	vstr	s15, [r2, #4]
 80142ba:	e79c      	b.n	80141f6 <__kernel_rem_pio2f+0x3c6>
 80142bc:	ed73 7a01 	vldmdb	r3!, {s15}
 80142c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80142c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80142c8:	3a01      	subs	r2, #1
 80142ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142ce:	ed83 7a00 	vstr	s14, [r3]
 80142d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142d6:	edc3 7a01 	vstr	s15, [r3, #4]
 80142da:	e78f      	b.n	80141fc <__kernel_rem_pio2f+0x3cc>
 80142dc:	ed33 7a01 	vldmdb	r3!, {s14}
 80142e0:	3c01      	subs	r4, #1
 80142e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142e6:	e78f      	b.n	8014208 <__kernel_rem_pio2f+0x3d8>
 80142e8:	eef1 6a66 	vneg.f32	s13, s13
 80142ec:	eeb1 7a47 	vneg.f32	s14, s14
 80142f0:	edc7 6a00 	vstr	s13, [r7]
 80142f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80142f8:	eef1 7a67 	vneg.f32	s15, s15
 80142fc:	e790      	b.n	8014220 <__kernel_rem_pio2f+0x3f0>
 80142fe:	bf00      	nop

08014300 <floor>:
 8014300:	ec51 0b10 	vmov	r0, r1, d0
 8014304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801430c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014310:	2e13      	cmp	r6, #19
 8014312:	460c      	mov	r4, r1
 8014314:	4605      	mov	r5, r0
 8014316:	4680      	mov	r8, r0
 8014318:	dc34      	bgt.n	8014384 <floor+0x84>
 801431a:	2e00      	cmp	r6, #0
 801431c:	da17      	bge.n	801434e <floor+0x4e>
 801431e:	a332      	add	r3, pc, #200	@ (adr r3, 80143e8 <floor+0xe8>)
 8014320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014324:	f7eb ff7e 	bl	8000224 <__adddf3>
 8014328:	2200      	movs	r2, #0
 801432a:	2300      	movs	r3, #0
 801432c:	f7ec fbc0 	bl	8000ab0 <__aeabi_dcmpgt>
 8014330:	b150      	cbz	r0, 8014348 <floor+0x48>
 8014332:	2c00      	cmp	r4, #0
 8014334:	da55      	bge.n	80143e2 <floor+0xe2>
 8014336:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801433a:	432c      	orrs	r4, r5
 801433c:	2500      	movs	r5, #0
 801433e:	42ac      	cmp	r4, r5
 8014340:	4c2b      	ldr	r4, [pc, #172]	@ (80143f0 <floor+0xf0>)
 8014342:	bf08      	it	eq
 8014344:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014348:	4621      	mov	r1, r4
 801434a:	4628      	mov	r0, r5
 801434c:	e023      	b.n	8014396 <floor+0x96>
 801434e:	4f29      	ldr	r7, [pc, #164]	@ (80143f4 <floor+0xf4>)
 8014350:	4137      	asrs	r7, r6
 8014352:	ea01 0307 	and.w	r3, r1, r7
 8014356:	4303      	orrs	r3, r0
 8014358:	d01d      	beq.n	8014396 <floor+0x96>
 801435a:	a323      	add	r3, pc, #140	@ (adr r3, 80143e8 <floor+0xe8>)
 801435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014360:	f7eb ff60 	bl	8000224 <__adddf3>
 8014364:	2200      	movs	r2, #0
 8014366:	2300      	movs	r3, #0
 8014368:	f7ec fba2 	bl	8000ab0 <__aeabi_dcmpgt>
 801436c:	2800      	cmp	r0, #0
 801436e:	d0eb      	beq.n	8014348 <floor+0x48>
 8014370:	2c00      	cmp	r4, #0
 8014372:	bfbe      	ittt	lt
 8014374:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014378:	4133      	asrlt	r3, r6
 801437a:	18e4      	addlt	r4, r4, r3
 801437c:	ea24 0407 	bic.w	r4, r4, r7
 8014380:	2500      	movs	r5, #0
 8014382:	e7e1      	b.n	8014348 <floor+0x48>
 8014384:	2e33      	cmp	r6, #51	@ 0x33
 8014386:	dd0a      	ble.n	801439e <floor+0x9e>
 8014388:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801438c:	d103      	bne.n	8014396 <floor+0x96>
 801438e:	4602      	mov	r2, r0
 8014390:	460b      	mov	r3, r1
 8014392:	f7eb ff47 	bl	8000224 <__adddf3>
 8014396:	ec41 0b10 	vmov	d0, r0, r1
 801439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80143a2:	f04f 37ff 	mov.w	r7, #4294967295
 80143a6:	40df      	lsrs	r7, r3
 80143a8:	4207      	tst	r7, r0
 80143aa:	d0f4      	beq.n	8014396 <floor+0x96>
 80143ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80143e8 <floor+0xe8>)
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f7eb ff37 	bl	8000224 <__adddf3>
 80143b6:	2200      	movs	r2, #0
 80143b8:	2300      	movs	r3, #0
 80143ba:	f7ec fb79 	bl	8000ab0 <__aeabi_dcmpgt>
 80143be:	2800      	cmp	r0, #0
 80143c0:	d0c2      	beq.n	8014348 <floor+0x48>
 80143c2:	2c00      	cmp	r4, #0
 80143c4:	da0a      	bge.n	80143dc <floor+0xdc>
 80143c6:	2e14      	cmp	r6, #20
 80143c8:	d101      	bne.n	80143ce <floor+0xce>
 80143ca:	3401      	adds	r4, #1
 80143cc:	e006      	b.n	80143dc <floor+0xdc>
 80143ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80143d2:	2301      	movs	r3, #1
 80143d4:	40b3      	lsls	r3, r6
 80143d6:	441d      	add	r5, r3
 80143d8:	4545      	cmp	r5, r8
 80143da:	d3f6      	bcc.n	80143ca <floor+0xca>
 80143dc:	ea25 0507 	bic.w	r5, r5, r7
 80143e0:	e7b2      	b.n	8014348 <floor+0x48>
 80143e2:	2500      	movs	r5, #0
 80143e4:	462c      	mov	r4, r5
 80143e6:	e7af      	b.n	8014348 <floor+0x48>
 80143e8:	8800759c 	.word	0x8800759c
 80143ec:	7e37e43c 	.word	0x7e37e43c
 80143f0:	bff00000 	.word	0xbff00000
 80143f4:	000fffff 	.word	0x000fffff

080143f8 <floorf>:
 80143f8:	ee10 3a10 	vmov	r3, s0
 80143fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014400:	3a7f      	subs	r2, #127	@ 0x7f
 8014402:	2a16      	cmp	r2, #22
 8014404:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014408:	dc2b      	bgt.n	8014462 <floorf+0x6a>
 801440a:	2a00      	cmp	r2, #0
 801440c:	da12      	bge.n	8014434 <floorf+0x3c>
 801440e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014474 <floorf+0x7c>
 8014412:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014416:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441e:	dd06      	ble.n	801442e <floorf+0x36>
 8014420:	2b00      	cmp	r3, #0
 8014422:	da24      	bge.n	801446e <floorf+0x76>
 8014424:	2900      	cmp	r1, #0
 8014426:	4b14      	ldr	r3, [pc, #80]	@ (8014478 <floorf+0x80>)
 8014428:	bf08      	it	eq
 801442a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801442e:	ee00 3a10 	vmov	s0, r3
 8014432:	4770      	bx	lr
 8014434:	4911      	ldr	r1, [pc, #68]	@ (801447c <floorf+0x84>)
 8014436:	4111      	asrs	r1, r2
 8014438:	420b      	tst	r3, r1
 801443a:	d0fa      	beq.n	8014432 <floorf+0x3a>
 801443c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014474 <floorf+0x7c>
 8014440:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014444:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444c:	ddef      	ble.n	801442e <floorf+0x36>
 801444e:	2b00      	cmp	r3, #0
 8014450:	bfbe      	ittt	lt
 8014452:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014456:	fa40 f202 	asrlt.w	r2, r0, r2
 801445a:	189b      	addlt	r3, r3, r2
 801445c:	ea23 0301 	bic.w	r3, r3, r1
 8014460:	e7e5      	b.n	801442e <floorf+0x36>
 8014462:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014466:	d3e4      	bcc.n	8014432 <floorf+0x3a>
 8014468:	ee30 0a00 	vadd.f32	s0, s0, s0
 801446c:	4770      	bx	lr
 801446e:	2300      	movs	r3, #0
 8014470:	e7dd      	b.n	801442e <floorf+0x36>
 8014472:	bf00      	nop
 8014474:	7149f2ca 	.word	0x7149f2ca
 8014478:	bf800000 	.word	0xbf800000
 801447c:	007fffff 	.word	0x007fffff

08014480 <_init>:
 8014480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014482:	bf00      	nop
 8014484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014486:	bc08      	pop	{r3}
 8014488:	469e      	mov	lr, r3
 801448a:	4770      	bx	lr

0801448c <_fini>:
 801448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448e:	bf00      	nop
 8014490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014492:	bc08      	pop	{r3}
 8014494:	469e      	mov	lr, r3
 8014496:	4770      	bx	lr
