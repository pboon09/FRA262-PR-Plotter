
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08013ba0  08013ba0  00014ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014200  08014200  00016194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014200  08014200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014208  08014208  00016194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014208  08014208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801420c  0801420c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08014210  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021ec  20000194  080143a4  00016194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002380  080143a4  00016380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c428  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bb  00000000  00000000  000425ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00047ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a1  00000000  00000000  000498b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004af51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc98  00000000  00000000  00078ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a0cf  00000000  00000000  000a477f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be84e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  001be894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c6d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08013b88 	.word	0x08013b88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08013b88 	.word	0x08013b88

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a f9f2 	bl	800b3c8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 fadb 	bl	800a5ac <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe95 	bl	8001e6a <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f853 	bl	8003450 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f94f 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f946 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f932 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f929 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f917 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f90a 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00a fec4 	bl	800c254 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8e1 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00a fea7 	bl	800c254 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f8c4 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00a fe8c 	bl	800c254 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f8a5 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbf1 	bl	8001e6a <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 fb8e 	bl	8011e20 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 fb51 	bl	8011e20 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fb02 	bl	8001e6a <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	0000      	movs	r0, r0
	...

08001898 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	ed2d 8b02 	vpush	{d8}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	f7fe fe5c 	bl	8000590 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fca0 	bl	8000224 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe ff76 	bl	80007e4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001908:	ed97 7a00 	vldr	s14, [r7]
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7fe fde1 	bl	80004e0 <__aeabi_f2d>
 800191e:	a326      	add	r3, pc, #152	@ (adr r3, 80019b8 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe34 	bl	8000590 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f910 	bl	8000b54 <__aeabi_d2f>
 8001934:	4604      	mov	r4, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f907 	bl	8000b54 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb1 8a67 	vneg.f32	s16, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fa 	bl	8000b54 <__aeabi_d2f>
 8001960:	4605      	mov	r5, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8f1 	bl	8000b54 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef1 8a67 	vneg.f32	s17, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e4 	bl	8000b54 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee02 3a10 	vmov	s4, r3
 8001992:	eef0 1a68 	vmov.f32	s3, s17
 8001996:	ee01 5a10 	vmov	s2, r5
 800199a:	eef0 0a48 	vmov.f32	s1, s16
 800199e:	ee00 4a10 	vmov	s0, r4
 80019a2:	f000 fa62 	bl	8001e6a <mapf>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999

080019c0 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019fc:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7fe fd5d 	bl	80004e0 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f010 f9a3 	bl	8011d78 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fda9 	bl	8000590 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f885 	bl	8000b54 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed97 7a00 	vldr	s14, [r7]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd2d 	bl	80004e0 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fd7f 	bl	8000590 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b70 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd59 	bl	8000590 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f835 	bl	8000b54 <__aeabi_d2f>
 8001aea:	4604      	mov	r4, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82c 	bl	8000b54 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb1 8a67 	vneg.f32	s16, s15
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4605      	mov	r5, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef1 8a67 	vneg.f32	s17, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f809 	bl	8000b54 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	ee02 3a10 	vmov	s4, r3
 8001b48:	eef0 1a68 	vmov.f32	s3, s17
 8001b4c:	ee01 5a10 	vmov	s2, r5
 8001b50:	eef0 0a48 	vmov.f32	s1, s16
 8001b54:	ee00 4a10 	vmov	s0, r4
 8001b58:	f000 f987 	bl	8001e6a <mapf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b8a:	edc7 0a00 	vstr	s1, [r7]
 8001b8e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FIR_init+0x2a>
        numTaps += 1;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00f ffd6 	bl	8011b64 <malloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00f ffcd 	bl	8011b64 <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e0 	beq.w	8001d9c <FIR_init+0x224>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80db 	beq.w	8001d9c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bea:	e00a      	b.n	8001c02 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001c02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a00 	vldr	s14, [r7]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c26:	e077      	b.n	8001d18 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001c28:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]
 8001c4c:	e02c      	b.n	8001ca8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da8 <FIR_init+0x230>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f010 f9a8 	bl	8011fcc <sinf>
 8001c7c:	eef0 6a40 	vmov.f32	s13, s0
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001dac <FIR_init+0x234>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 8a00 	vldr	s16, [r3]
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001da8 <FIR_init+0x230>
 8001cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	f010 f930 	bl	8011f44 <cosf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001db0 <FIR_init+0x238>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001db4 <FIR_init+0x23c>
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db82      	blt.n	8001c28 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	e00f      	b.n	8001d4e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3eb      	bcc.n	8001d2e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d01b      	beq.n	8001d9c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	83bb      	strh	r3, [r7, #28]
 8001d68:	e014      	b.n	8001d94 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8bbb      	ldrh	r3, [r7, #28]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	83bb      	strh	r3, [r7, #28]
 8001d94:	8bba      	ldrh	r2, [r7, #28]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40c90fdb 	.word	0x40c90fdb
 8001dac:	40490fdb 	.word	0x40490fdb
 8001db0:	3eeb851f 	.word	0x3eeb851f
 8001db4:	3f0a3d71 	.word	0x3f0a3d71

08001db8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
 8001de4:	e023      	b.n	8001e2e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	e002      	b.n	8001e28 <FIR_process+0x70>
        } else {
            index--;
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d6      	bcc.n	8001de6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	895b      	ldrh	r3, [r3, #10]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	895a      	ldrh	r2, [r3, #10]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e80:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200001b0 	.word	0x200001b0

08001f18 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <modbus_3t5_Timeout+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	755a      	strb	r2, [r3, #21]

}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200001b0 	.word	0x200001b0

08001f38 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00e f855 	bl	800fff0 <HAL_UART_GetError>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d101      	bne.n	8001f50 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f4c:	f7ff ffc4 	bl	8001ed8 <modbus_1t5_Timeout>

	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <Modbus_init+0xc4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Modbus_init+0xc4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <Modbus_init+0xc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Modbus_init+0xc4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	7e3a      	ldrb	r2, [r7, #24]
 8001f8a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Modbus_init+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <Modbus_init+0xc8>)
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00c facb 	bl	800e538 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00d ffcb 	bl	800ff44 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00d ffe2 	bl	800ff7c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Modbus_init+0xcc>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00d fb09 	bl	800f5d8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Modbus_init+0xc4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Modbus_init+0xc4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Modbus_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fd8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001fdc:	4413      	add	r3, r2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00d fbb1 	bl	800f74c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Modbus_init+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Modbus_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f00b fa75 	bl	800d4f0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <Modbus_init+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00b fcc4 	bl	800d99c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200001b0 	.word	0x200001b0
 8002020:	08001f19 	.word	0x08001f19
 8002024:	08001f39 	.word	0x08001f39

08002028 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002030:	ed87 0a08 	vstr	s0, [r7, #32]
 8002034:	edc7 0a07 	vstr	s1, [r7, #28]
 8002038:	ed87 1a06 	vstr	s2, [r7, #24]
 800203c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002040:	ed87 2a04 	vstr	s4, [r7, #16]
 8002044:	edc7 2a03 	vstr	s5, [r7, #12]
 8002048:	ed87 3a02 	vstr	s6, [r7, #8]
 800204c:	edc7 3a01 	vstr	s7, [r7, #4]
 8002050:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	2210      	movs	r2, #16
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f00f fe1c 	bl	8011cd0 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3310      	adds	r3, #16
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00f fe15 	bl	8011cd0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020aa:	e00c      	b.n	80020c6 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80020ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b6:	3304      	adds	r3, #4
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	4a79      	ldr	r2, [pc, #484]	@ (80022a4 <MotorKalman_Init+0x27c>)
 80020be:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c2:	3301      	adds	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	ddef      	ble.n	80020ac <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80020d2:	2240      	movs	r2, #64	@ 0x40
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00f fdfa 	bl	8011cd0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e0:	e00d      	b.n	80020fe <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80020e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	33be      	adds	r3, #190	@ 0xbe
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	3301      	adds	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002100:	2b03      	cmp	r3, #3
 8002102:	ddee      	ble.n	80020e2 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	33f0      	adds	r3, #240	@ 0xf0
 8002108:	2210      	movs	r2, #16
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f00f fddf 	bl	8011cd0 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002118:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002122:	2210      	movs	r2, #16
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f00f fdd2 	bl	8011cd0 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002132:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002136:	ed97 0a01 	vldr	s0, [r7, #4]
 800213a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800213c:	f000 f922 	bl	8002384 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002140:	ed97 0a00 	vldr	s0, [r7]
 8002144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002146:	f000 f94d 	bl	80023e4 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	2201      	movs	r2, #1
 8002154:	2104      	movs	r1, #4
 8002156:	f00f f84a 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	3310      	adds	r3, #16
 8002164:	2204      	movs	r2, #4
 8002166:	2104      	movs	r1, #4
 8002168:	f00f f841 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002178:	2204      	movs	r2, #4
 800217a:	2104      	movs	r1, #4
 800217c:	f00f f837 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800218c:	2201      	movs	r2, #1
 800218e:	2101      	movs	r1, #1
 8002190:	f00f f82d 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80021a0:	2201      	movs	r2, #1
 80021a2:	2101      	movs	r1, #1
 80021a4:	f00f f823 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	f00f f819 	bl	80111ee <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80021c8:	2204      	movs	r2, #4
 80021ca:	2104      	movs	r1, #4
 80021cc:	f00f f80f 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80021dc:	2201      	movs	r2, #1
 80021de:	2104      	movs	r1, #4
 80021e0:	f00f f805 	bl	80111ee <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021f0:	2201      	movs	r2, #1
 80021f2:	2104      	movs	r1, #4
 80021f4:	f00e fffb 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002204:	2204      	movs	r2, #4
 8002206:	2104      	movs	r1, #4
 8002208:	f00e fff1 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002218:	2204      	movs	r2, #4
 800221a:	2101      	movs	r1, #1
 800221c:	f00e ffe7 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800222c:	2201      	movs	r2, #1
 800222e:	2101      	movs	r1, #1
 8002230:	f00e ffdd 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002240:	2201      	movs	r2, #1
 8002242:	2104      	movs	r1, #4
 8002244:	f00e ffd3 	bl	80111ee <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800224a:	f000 f82d 	bl	80022a8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3390      	adds	r3, #144	@ 0x90
 8002258:	2204      	movs	r2, #4
 800225a:	2104      	movs	r1, #4
 800225c:	f00e ffc7 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	33e0      	adds	r3, #224	@ 0xe0
 800226a:	2201      	movs	r2, #1
 800226c:	2104      	movs	r1, #4
 800226e:	f00e ffbe 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800227e:	2204      	movs	r2, #4
 8002280:	2104      	movs	r1, #4
 8002282:	f00e ffb4 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8002292:	2201      	movs	r2, #1
 8002294:	2104      	movs	r1, #4
 8002296:	f00e ffaa 	bl	80111ee <arm_mat_init_f32>
}
 800229a:	bf00      	nop
 800229c:	3730      	adds	r7, #48	@ 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	42c80000 	.word	0x42c80000

080022a8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	eeb0 3a64 	vmov.f32	s6, s9
 80022ec:	eef0 2a45 	vmov.f32	s5, s10
 80022f0:	eeb0 2a65 	vmov.f32	s4, s11
 80022f4:	eef0 1a46 	vmov.f32	s3, s12
 80022f8:	eeb0 1a66 	vmov.f32	s2, s13
 80022fc:	eef0 0a47 	vmov.f32	s1, s14
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f001 f83c 	bl	8003380 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f00f fcdc 	bl	8011cd0 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800231e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800237c <MotorKalman_DiscretizeModel+0xd4>
 8002322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002352:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002380 <MotorKalman_DiscretizeModel+0xd8>
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002366:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800237c <MotorKalman_DiscretizeModel+0xd4>
 800236a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	3c23d70a 	.word	0x3c23d70a
 8002380:	3dcccccd 	.word	0x3dcccccd

08002384 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f00f fc98 	bl	8011cd0 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80023a0:	edd7 7a00 	vldr	s15, [r7]
 80023a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80023bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d107      	bne.n	80023d6 <MotorKalman_SetProcessNoise+0x52>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80023cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d002      	beq.n	80023dc <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff66 	bl	80022a8 <MotorKalman_DiscretizeModel>
    }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80023f0:	ed97 0a00 	vldr	s0, [r7]
 80023f4:	f00f fd88 	bl	8011f08 <sqrtf>
 80023f8:	eef0 7a40 	vmov.f32	s15, s0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002412:	b580      	push	{r7, lr}
 8002414:	b0b2      	sub	sp, #200	@ 0xc8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002426:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800243a:	e041      	b.n	80024c0 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800243c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	33c8      	adds	r3, #200	@ 0xc8
 8002444:	443b      	add	r3, r7
 8002446:	3b3c      	subs	r3, #60	@ 0x3c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002454:	e02b      	b.n	80024ae <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	33c8      	adds	r3, #200	@ 0xc8
 800245e:	443b      	add	r3, r7
 8002460:	3b3c      	subs	r3, #60	@ 0x3c
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002470:	4413      	add	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	3324      	adds	r3, #36	@ 0x24
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	edd3 6a00 	vldr	s13, [r3]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	33c8      	adds	r3, #200	@ 0xc8
 800249c:	443b      	add	r3, r7
 800249e:	3b3c      	subs	r3, #60	@ 0x3c
 80024a0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024a8:	3301      	adds	r3, #1
 80024aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	ddcf      	ble.n	8002456 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	ddb9      	ble.n	800243c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024ce:	e021      	b.n	8002514 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80024d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	33c8      	adds	r3, #200	@ 0xc8
 80024d8:	443b      	add	r3, r7
 80024da:	3b3c      	subs	r3, #60	@ 0x3c
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024e6:	3338      	adds	r3, #56	@ 0x38
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	edd3 6a00 	vldr	s13, [r3]
 80024f0:	edd7 7a00 	vldr	s15, [r7]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800250e:	3301      	adds	r3, #1
 8002510:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002518:	2b03      	cmp	r3, #3
 800251a:	ddd9      	ble.n	80024d0 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800251c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f00f fbd3 	bl	8011cd0 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f00f fbcc 	bl	8011cd0 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800253e:	e05f      	b.n	8002600 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002546:	e052      	b.n	80025ee <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	33c8      	adds	r3, #200	@ 0xc8
 8002558:	443b      	add	r3, r7
 800255a:	3b7c      	subs	r3, #124	@ 0x7c
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002568:	e038      	b.n	80025dc <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800256a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	33c8      	adds	r3, #200	@ 0xc8
 800257a:	443b      	add	r3, r7
 800257c:	3b7c      	subs	r3, #124	@ 0x7c
 800257e:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258c:	4413      	add	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	3324      	adds	r3, #36	@ 0x24
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edd3 6a00 	vldr	s13, [r3]
 800259a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025a4:	4413      	add	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80025b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025c0:	4413      	add	r3, r2
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	33c8      	adds	r3, #200	@ 0xc8
 80025ca:	443b      	add	r3, r7
 80025cc:	3b7c      	subs	r3, #124	@ 0x7c
 80025ce:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025d6:	3301      	adds	r3, #1
 80025d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	ddc2      	ble.n	800256a <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025e8:	3301      	adds	r3, #1
 80025ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	dda8      	ble.n	8002548 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002604:	2b03      	cmp	r3, #3
 8002606:	dd9b      	ble.n	8002540 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800260e:	e05f      	b.n	80026d0 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002616:	e052      	b.n	80026be <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	33c8      	adds	r3, #200	@ 0xc8
 8002628:	443b      	add	r3, r7
 800262a:	3bbc      	subs	r3, #188	@ 0xbc
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002638:	e038      	b.n	80026ac <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800263a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	33c8      	adds	r3, #200	@ 0xc8
 800264a:	443b      	add	r3, r7
 800264c:	3bbc      	subs	r3, #188	@ 0xbc
 800264e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002656:	009a      	lsls	r2, r3, #2
 8002658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	33c8      	adds	r3, #200	@ 0xc8
 8002662:	443b      	add	r3, r7
 8002664:	3b7c      	subs	r3, #124	@ 0x7c
 8002666:	edd3 6a00 	vldr	s13, [r3]
 800266a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266e:	009a      	lsls	r2, r3, #2
 8002670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002674:	4413      	add	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	3324      	adds	r3, #36	@ 0x24
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002690:	4413      	add	r3, r2
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	33c8      	adds	r3, #200	@ 0xc8
 800269a:	443b      	add	r3, r7
 800269c:	3bbc      	subs	r3, #188	@ 0xbc
 800269e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80026a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026a6:	3301      	adds	r3, #1
 80026a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80026ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	ddc2      	ble.n	800263a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	dda8      	ble.n	8002618 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ca:	3301      	adds	r3, #1
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	dd9b      	ble.n	8002610 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026de:	e037      	b.n	8002750 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026e6:	e02a      	b.n	800273e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80026e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ec:	009a      	lsls	r2, r3, #2
 80026ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	33c8      	adds	r3, #200	@ 0xc8
 80026f8:	443b      	add	r3, r7
 80026fa:	3bbc      	subs	r3, #188	@ 0xbc
 80026fc:	ed93 7a00 	vldr	s14, [r3]
 8002700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800270a:	4413      	add	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	3354      	adds	r3, #84	@ 0x54
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002722:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002738:	3301      	adds	r3, #1
 800273a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800273e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002742:	2b03      	cmp	r3, #3
 8002744:	ddd0      	ble.n	80026e8 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800274a:	3301      	adds	r3, #1
 800274c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002754:	2b03      	cmp	r3, #3
 8002756:	ddc3      	ble.n	80026e0 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	2104      	movs	r1, #4
 800278c:	f00e fd2f 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3310      	adds	r3, #16
 800279a:	2204      	movs	r2, #4
 800279c:	2104      	movs	r1, #4
 800279e:	f00e fd26 	bl	80111ee <arm_mat_init_f32>
}
 80027a2:	bf00      	nop
 80027a4:	37c8      	adds	r7, #200	@ 0xc8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b0d0      	sub	sp, #320	@ 0x140
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027c4:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80027c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027d6:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80027ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002804:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800280e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002812:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	edd3 7a01 	vldr	s15, [r3, #4]
 800281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002820:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002824:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002828:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002836:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002848:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800284c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a03 	vldr	s15, [r3, #12]
 8002864:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002870:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002874:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002888:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800289c:	e04d      	b.n	800293a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800289e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028a8:	443b      	add	r3, r7
 80028aa:	3b58      	subs	r3, #88	@ 0x58
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80028b8:	e036      	b.n	8002928 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80028ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028c4:	443b      	add	r3, r7
 80028c6:	3b58      	subs	r3, #88	@ 0x58
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028da:	333c      	adds	r3, #60	@ 0x3c
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	edd3 6a00 	vldr	s13, [r3]
 80028e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028ee:	4413      	add	r3, r2
 80028f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028f4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	3304      	adds	r3, #4
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002916:	443b      	add	r3, r7
 8002918:	3b58      	subs	r3, #88	@ 0x58
 800291a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800291e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002922:	3301      	adds	r3, #1
 8002924:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002928:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800292c:	2b03      	cmp	r3, #3
 800292e:	ddc4      	ble.n	80028ba <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002930:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002934:	3301      	adds	r3, #1
 8002936:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800293a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800293e:	2b03      	cmp	r3, #3
 8002940:	ddad      	ble.n	800289e <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002950:	e021      	b.n	8002996 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002952:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800295c:	443b      	add	r3, r7
 800295e:	3b58      	subs	r3, #88	@ 0x58
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002968:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002972:	333c      	adds	r3, #60	@ 0x3c
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800298c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002990:	3301      	adds	r3, #1
 8002992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002996:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800299a:	2b03      	cmp	r3, #3
 800299c:	ddd9      	ble.n	8002952 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800299e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80029ac:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80029b8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80029cc:	e04d      	b.n	8002a6a <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80029ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029d8:	443b      	add	r3, r7
 80029da:	3b68      	subs	r3, #104	@ 0x68
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80029e8:	e036      	b.n	8002a58 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80029ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029f4:	443b      	add	r3, r7
 80029f6:	3b68      	subs	r3, #104	@ 0x68
 80029f8:	ed93 7a00 	vldr	s14, [r3]
 80029fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a06:	4413      	add	r3, r2
 8002a08:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002a0c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	3304      	adds	r3, #4
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edd3 6a00 	vldr	s13, [r3]
 8002a1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a2a:	333c      	adds	r3, #60	@ 0x3c
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a46:	443b      	add	r3, r7
 8002a48:	3b68      	subs	r3, #104	@ 0x68
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a52:	3301      	adds	r3, #1
 8002a54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	ddc4      	ble.n	80029ea <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	ddad      	ble.n	80029ce <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002a72:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a86:	e01a      	b.n	8002abe <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a92:	443b      	add	r3, r7
 8002a94:	3b68      	subs	r3, #104	@ 0x68
 8002a96:	edd3 6a00 	vldr	s13, [r3]
 8002a9a:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002aac:	443b      	add	r3, r7
 8002aae:	3b78      	subs	r3, #120	@ 0x78
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002abe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	dde0      	ble.n	8002a88 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002acc:	e029      	b.n	8002b22 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002ace:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ad2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002aee:	443b      	add	r3, r7
 8002af0:	3b78      	subs	r3, #120	@ 0x78
 8002af2:	edd3 6a00 	vldr	s13, [r3]
 8002af6:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	ddd1      	ble.n	8002ace <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002b2a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00f f8cc 	bl	8011cd0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b3e:	e035      	b.n	8002bac <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b46:	e028      	b.n	8002b9a <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b52:	443b      	add	r3, r7
 8002b54:	3b78      	subs	r3, #120	@ 0x78
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b68:	333c      	adds	r3, #60	@ 0x3c
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b7c:	4413      	add	r3, r2
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b88:	443b      	add	r3, r7
 8002b8a:	3bb8      	subs	r3, #184	@ 0xb8
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b94:	3301      	adds	r3, #1
 8002b96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	ddd2      	ble.n	8002b48 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	ddc5      	ble.n	8002b40 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002bb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bb8:	2240      	movs	r2, #64	@ 0x40
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00f f887 	bl	8011cd0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002bc8:	e038      	b.n	8002c3c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bd0:	e02b      	b.n	8002c2a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002bd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d102      	bne.n	8002be4 <MotorKalman_Update+0x438>
 8002bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be2:	e001      	b.n	8002be8 <MotorKalman_Update+0x43c>
 8002be4:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e00 <MotorKalman_Update+0x654>
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bfa:	443b      	add	r3, r7
 8002bfc:	3bb8      	subs	r3, #184	@ 0xb8
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002c18:	443b      	add	r3, r7
 8002c1a:	3bf8      	subs	r3, #248	@ 0xf8
 8002c1c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c24:	3301      	adds	r3, #1
 8002c26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	ddcf      	ble.n	8002bd2 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	3301      	adds	r3, #1
 8002c38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	ddc2      	ble.n	8002bca <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f103 0110 	add.w	r1, r3, #16
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00f f87d 	bl	8011d58 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c64:	e06e      	b.n	8002d44 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c6c:	e061      	b.n	8002d32 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c78:	4413      	add	r3, r2
 8002c7a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c7e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	3304      	adds	r3, #4
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c96:	e043      	b.n	8002d20 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ca8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002cca:	443b      	add	r3, r7
 8002ccc:	3bf8      	subs	r3, #248	@ 0xf8
 8002cce:	edd3 6a00 	vldr	s13, [r3]
 8002cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cdc:	4413      	add	r3, r2
 8002cde:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ce2:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cfc:	4413      	add	r3, r2
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d06:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	ddb7      	ble.n	8002c98 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	dd99      	ble.n	8002c6e <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	dd8c      	ble.n	8002c66 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002d4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002d66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002d9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002daa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002db4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002dc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2104      	movs	r1, #4
 8002dd0:	f00e fa0d 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002dd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002de2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002de6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3310      	adds	r3, #16
 8002dee:	2204      	movs	r2, #4
 8002df0:	2104      	movs	r1, #4
 8002df2:	f00e f9fc 	bl	80111ee <arm_mat_init_f32>
}
 8002df6:	bf00      	nop
 8002df8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00000000 	.word	0x00000000

08002e04 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e10:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002e14:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fafa 	bl	8002412 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002e1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fcc2 	bl	80027ac <MotorKalman_Update>

    return filter->velocity;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002e2e:	ee07 3a90 	vmov	s15, r3
}
 8002e32:	eeb0 0a67 	vmov.f32	s0, s15
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e00c      	b.n	8002e68 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	441a      	add	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	440b      	add	r3, r1
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbee      	blt.n	8002e4e <matrix_copy+0x12>
    }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002e8c:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002e90:	6020      	str	r0, [r4, #0]
 8002e92:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002e96:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002e9a:	6001      	str	r1, [r0, #0]
 8002e9c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002ea0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002ea4:	ed81 0a00 	vstr	s0, [r1]
 8002ea8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002eac:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002eb0:	600a      	str	r2, [r1, #0]
 8002eb2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002eb6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002eba:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002ebc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ec0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002ec4:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	2104      	movs	r1, #4
 8002ece:	f00e f98e 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002ed2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ed6:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002eda:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	f00e f983 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002ee8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002eec:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002ef0:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2104      	movs	r1, #4
 8002efa:	f00e f978 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002efe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f02:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002f06:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2104      	movs	r1, #4
 8002f10:	f00e f96d 	bl	80111ee <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002f14:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002f18:	2240      	movs	r2, #64	@ 0x40
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00e fed7 	bl	8011cd0 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002f22:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002f26:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	f00e f95e 	bl	80111ee <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f38:	e011      	b.n	8002f5e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002f3a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002f4a:	443b      	add	r3, r7
 8002f4c:	3b6c      	subs	r3, #108	@ 0x6c
 8002f4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002f54:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f5e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	dde9      	ble.n	8002f3a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002f66:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f6a:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002f6e:	2204      	movs	r2, #4
 8002f70:	2104      	movs	r1, #4
 8002f72:	f00e f93c 	bl	80111ee <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002f76:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f7a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f7e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f82:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002f86:	ed93 0a00 	vldr	s0, [r3]
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f00e fd38 	bl	8011a00 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002f90:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f94:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f98:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	f7ff ff4c 	bl	8002e3c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002fa4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002fa8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002fac:	2204      	movs	r2, #4
 8002fae:	2104      	movs	r1, #4
 8002fb0:	f00e f91d 	bl	80111ee <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002fb4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002fb8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	f00e f915 	bl	80111ee <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002fc4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002fc8:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002fcc:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00e f8d1 	bl	8011178 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002fd6:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002fda:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002fde:	2210      	movs	r2, #16
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff2b 	bl	8002e3c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002fe6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002fea:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ff4:	e03a      	b.n	800306c <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002ff6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800300e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003012:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003016:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800301a:	4618      	mov	r0, r3
 800301c:	f00e fc76 	bl	801190c <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003020:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003024:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003028:	2210      	movs	r2, #16
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff06 	bl	8002e3c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003034:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003040:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003044:	4611      	mov	r1, r2
 8003046:	eeb0 0a47 	vmov.f32	s0, s14
 800304a:	4618      	mov	r0, r3
 800304c:	f00e fcd8 	bl	8011a00 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003050:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003054:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003058:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800305c:	4618      	mov	r0, r3
 800305e:	f00e f88b 	bl	8011178 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8003062:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003066:	3301      	adds	r3, #1
 8003068:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800306c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003070:	2b0a      	cmp	r3, #10
 8003072:	ddc0      	ble.n	8002ff6 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8003074:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003078:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800307c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003080:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8003084:	ed93 0a00 	vldr	s0, [r3]
 8003088:	4610      	mov	r0, r2
 800308a:	f00e fcb9 	bl	8011a00 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800308e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003092:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	6053      	str	r3, [r2, #4]
 800309e:	6093      	str	r3, [r2, #8]
 80030a0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80030a2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80030a6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80030aa:	2201      	movs	r2, #1
 80030ac:	2104      	movs	r1, #4
 80030ae:	f00e f89e 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80030b2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80030b6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030ba:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80030be:	4618      	mov	r0, r3
 80030c0:	f00e fc24 	bl	801190c <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80030c4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80030c8:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80030cc:	2201      	movs	r2, #1
 80030ce:	2104      	movs	r1, #4
 80030d0:	f00e f88d 	bl	80111ee <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80030d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030d8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80030e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030ec:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030f0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80030f4:	4611      	mov	r1, r2
 80030f6:	eeb0 0a47 	vmov.f32	s0, s14
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e fc80 	bl	8011a00 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003100:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003104:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003108:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800310c:	4618      	mov	r0, r3
 800310e:	f00e f833 	bl	8011178 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003112:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003116:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800311a:	4618      	mov	r0, r3
 800311c:	2340      	movs	r3, #64	@ 0x40
 800311e:	461a      	mov	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f00e fdd5 	bl	8011cd0 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003126:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800312a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800312e:	2204      	movs	r2, #4
 8003130:	2104      	movs	r1, #4
 8003132:	f00e f85c 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003136:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800313a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800313e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003142:	4618      	mov	r0, r3
 8003144:	f00e fbe2 	bl	801190c <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003148:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800314c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003150:	461a      	mov	r2, r3
 8003152:	2300      	movs	r3, #0
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	6093      	str	r3, [r2, #8]
 800315a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800315c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003160:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003164:	2201      	movs	r2, #1
 8003166:	2104      	movs	r1, #4
 8003168:	f00e f841 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 800316c:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003170:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003174:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003178:	4618      	mov	r0, r3
 800317a:	f00e fbc7 	bl	801190c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800317e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003182:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800318e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003192:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80031a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031a6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80031aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031ae:	4611      	mov	r1, r2
 80031b0:	eeb0 0a47 	vmov.f32	s0, s14
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00e fc23 	bl	8011a00 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80031ba:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80031be:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80031c2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00d ffd6 	bl	8011178 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80031cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031d4:	4618      	mov	r0, r3
 80031d6:	2340      	movs	r3, #64	@ 0x40
 80031d8:	461a      	mov	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f00e fd78 	bl	8011cd0 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80031e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031e4:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80031e8:	2204      	movs	r2, #4
 80031ea:	2104      	movs	r1, #4
 80031ec:	f00d ffff 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80031f0:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80031f4:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031f8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00e fb85 	bl	801190c <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003202:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003206:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	6053      	str	r3, [r2, #4]
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003216:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800321a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800321e:	2201      	movs	r2, #1
 8003220:	2104      	movs	r1, #4
 8003222:	f00d ffe4 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003226:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800322a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800322e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003232:	4618      	mov	r0, r3
 8003234:	f00e fb6a 	bl	801190c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003238:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800323c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003248:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800324c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800325c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800326c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003270:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003274:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003278:	4611      	mov	r1, r2
 800327a:	eeb0 0a47 	vmov.f32	s0, s14
 800327e:	4618      	mov	r0, r3
 8003280:	f00e fbbe 	bl	8011a00 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003284:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003288:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800328c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003290:	4618      	mov	r0, r3
 8003292:	f00d ff71 	bl	8011178 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003296:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800329a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800329e:	4618      	mov	r0, r3
 80032a0:	2340      	movs	r3, #64	@ 0x40
 80032a2:	461a      	mov	r2, r3
 80032a4:	2100      	movs	r1, #0
 80032a6:	f00e fd13 	bl	8011cd0 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80032aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032ae:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80032b2:	2204      	movs	r2, #4
 80032b4:	2104      	movs	r1, #4
 80032b6:	f00d ff9a 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80032ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80032be:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80032c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00e fb20 	bl	801190c <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80032cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032d0:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	6053      	str	r3, [r2, #4]
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80032e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e4:	f107 001c 	add.w	r0, r7, #28
 80032e8:	2201      	movs	r2, #1
 80032ea:	2104      	movs	r1, #4
 80032ec:	f00d ff7f 	bl	80111ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80032f0:	f107 021c 	add.w	r2, r7, #28
 80032f4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80032f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00e fb05 	bl	801190c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003302:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003306:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003312:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003316:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003322:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003326:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003332:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003336:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800337c <discretize_system_with_arm+0x4fc>
 8003346:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800334a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4611      	mov	r1, r2
 8003354:	eeb0 0a47 	vmov.f32	s0, s14
 8003358:	4618      	mov	r0, r3
 800335a:	f00e fb51 	bl	8011a00 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800335e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003362:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003366:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800336a:	4618      	mov	r0, r3
 800336c:	f00d ff04 	bl	8011178 <arm_mat_add_f32>
}
 8003370:	bf00      	nop
 8003372:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	42f00000 	.word	0x42f00000

08003380 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b09e      	sub	sp, #120	@ 0x78
 8003384:	af00      	add	r7, sp, #0
 8003386:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800338a:	edc7 0a08 	vstr	s1, [r7, #32]
 800338e:	ed87 1a07 	vstr	s2, [r7, #28]
 8003392:	edc7 1a06 	vstr	s3, [r7, #24]
 8003396:	ed87 2a05 	vstr	s4, [r7, #20]
 800339a:	edc7 2a04 	vstr	s5, [r7, #16]
 800339e:	ed87 3a03 	vstr	s6, [r7, #12]
 80033a2:	60b8      	str	r0, [r7, #8]
 80033a4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80033a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f00e fc8e 	bl	8011cd0 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80033b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80033c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80033c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033cc:	eef1 6a67 	vneg.f32	s13, s15
 80033d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80033dc:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80033e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80033ec:	edd7 6a04 	vldr	s13, [r7, #16]
 80033f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80033fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003400:	eef1 6a67 	vneg.f32	s13, s15
 8003404:	ed97 7a08 	vldr	s14, [r7, #32]
 8003408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800340c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003410:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003414:	eef1 6a67 	vneg.f32	s13, s15
 8003418:	ed97 7a08 	vldr	s14, [r7, #32]
 800341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003420:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003428:	ed97 7a08 	vldr	s14, [r7, #32]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003434:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003438:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	ed97 0a03 	vldr	s0, [r7, #12]
 8003444:	f7ff fd1c 	bl	8002e80 <discretize_system_with_arm>
}
 8003448:	bf00      	nop
 800344a:	3778      	adds	r7, #120	@ 0x78
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <PWM_init+0x40>)
 8003462:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003476:	68b8      	ldr	r0, [r7, #8]
 8003478:	f009 ffca 	bl	800d410 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4619      	mov	r1, r3
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f00a f911 	bl	800d6a8 <HAL_TIM_PWM_Start>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	0a21fe80 	.word	0x0a21fe80

08003494 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	ed87 0a02 	vstr	s0, [r7, #8]
 80034a0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80034a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d137      	bne.n	8003522 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	889b      	ldrh	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <PWM_write_duty+0x32>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80034c4:	e0e1      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d105      	bne.n	80034da <PWM_write_duty+0x46>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80034d8:	e0d7      	b.n	800368a <PWM_write_duty+0x1f6>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	889b      	ldrh	r3, [r3, #4]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d105      	bne.n	80034ee <PWM_write_duty+0x5a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80034ec:	e0cd      	b.n	800368a <PWM_write_duty+0x1f6>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	889b      	ldrh	r3, [r3, #4]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d105      	bne.n	8003502 <PWM_write_duty+0x6e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003500:	e0c3      	b.n	800368a <PWM_write_duty+0x1f6>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	2b10      	cmp	r3, #16
 8003508:	d105      	bne.n	8003516 <PWM_write_duty+0x82>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	6493      	str	r3, [r2, #72]	@ 0x48
 8003514:	e0b9      	b.n	800368a <PWM_write_duty+0x1f6>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003520:	e0b3      	b.n	800368a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353a:	ee17 2a90 	vmov	r2, s15
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800354a:	33fe      	adds	r3, #254	@ 0xfe
 800354c:	4a51      	ldr	r2, [pc, #324]	@ (8003694 <PWM_write_duty+0x200>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0bdb      	lsrs	r3, r3, #15
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800357c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	89db      	ldrh	r3, [r3, #14]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ff8c 	bl	80004bc <__aeabi_i2d>
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ac:	eef0 7ae7 	vabs.f32	s15, s15
 80035b0:	ee17 0a90 	vmov	r0, s15
 80035b4:	f7fc ff94 	bl	80004e0 <__aeabi_f2d>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4620      	mov	r0, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fc ffe6 	bl	8000590 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <PWM_write_duty+0x204>)
 80035d2:	f7fd f907 	bl	80007e4 <__aeabi_ddiv>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fa99 	bl	8000b14 <__aeabi_d2uiz>
 80035e2:	4603      	mov	r3, r0
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	899a      	ldrh	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	89da      	ldrh	r2, [r3, #14]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	89da      	ldrh	r2, [r3, #14]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	889b      	ldrh	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <PWM_write_duty+0x190>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6952      	ldr	r2, [r2, #20]
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003622:	e032      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	889b      	ldrh	r3, [r3, #4]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d106      	bne.n	800363a <PWM_write_duty+0x1a6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003638:	e027      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	889b      	ldrh	r3, [r3, #4]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d106      	bne.n	8003650 <PWM_write_duty+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800364e:	e01c      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	889b      	ldrh	r3, [r3, #4]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d106      	bne.n	8003666 <PWM_write_duty+0x1d2>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003664:	e011      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	2b10      	cmp	r3, #16
 800366c:	d106      	bne.n	800367c <PWM_write_duty+0x1e8>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800367a:	e006      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003688:	e7ff      	b.n	800368a <PWM_write_duty+0x1f6>
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bdb0      	pop	{r4, r5, r7, pc}
 8003692:	bf00      	nop
 8003694:	80008001 	.word	0x80008001
 8003698:	40590000 	.word	0x40590000
 800369c:	00000000 	.word	0x00000000

080036a0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80036ac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80036b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d137      	bne.n	800372e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <PWM_write_range+0x32>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80036d0:	e0e1      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d105      	bne.n	80036e6 <PWM_write_range+0x46>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80036e4:	e0d7      	b.n	8003896 <PWM_write_range+0x1f6>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	889b      	ldrh	r3, [r3, #4]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d105      	bne.n	80036fa <PWM_write_range+0x5a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80036f8:	e0cd      	b.n	8003896 <PWM_write_range+0x1f6>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	889b      	ldrh	r3, [r3, #4]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d105      	bne.n	800370e <PWM_write_range+0x6e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
 800370c:	e0c3      	b.n	8003896 <PWM_write_range+0x1f6>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	889b      	ldrh	r3, [r3, #4]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d105      	bne.n	8003722 <PWM_write_range+0x82>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003720:	e0b9      	b.n	8003896 <PWM_write_range+0x1f6>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800372c:	e0b3      	b.n	8003896 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 7a02 	vldr	s14, [r7, #8]
 800373e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	ee17 2a90 	vmov	r2, s15
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003756:	33fe      	adds	r3, #254	@ 0xfe
 8003758:	4a53      	ldr	r2, [pc, #332]	@ (80038a8 <PWM_write_range+0x208>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0bdb      	lsrs	r3, r3, #15
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	899b      	ldrh	r3, [r3, #12]
 800377a:	3301      	adds	r3, #1
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003788:	ed97 7a02 	vldr	s14, [r7, #8]
 800378c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379c:	ee17 3a90 	vmov	r3, s15
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	89db      	ldrh	r3, [r3, #14]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fe86 	bl	80004bc <__aeabi_i2d>
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b8:	eef0 7ae7 	vabs.f32	s15, s15
 80037bc:	ee17 0a90 	vmov	r0, s15
 80037c0:	f7fc fe8e 	bl	80004e0 <__aeabi_f2d>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc fee0 	bl	8000590 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	a331      	add	r3, pc, #196	@ (adr r3, 80038a0 <PWM_write_range+0x200>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fd f801 	bl	80007e4 <__aeabi_ddiv>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fd f993 	bl	8000b14 <__aeabi_d2uiz>
 80037ee:	4603      	mov	r3, r0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	899a      	ldrh	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	89da      	ldrh	r2, [r3, #14]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	89da      	ldrh	r2, [r3, #14]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <PWM_write_range+0x190>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	6952      	ldr	r2, [r2, #20]
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800382e:	e032      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	889b      	ldrh	r3, [r3, #4]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d106      	bne.n	8003846 <PWM_write_range+0x1a6>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003844:	e027      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	889b      	ldrh	r3, [r3, #4]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d106      	bne.n	800385c <PWM_write_range+0x1bc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800385a:	e01c      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	889b      	ldrh	r3, [r3, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d106      	bne.n	8003872 <PWM_write_range+0x1d2>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003870:	e011      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	889b      	ldrh	r3, [r3, #4]
 8003876:	2b10      	cmp	r3, #16
 8003878:	d106      	bne.n	8003888 <PWM_write_range+0x1e8>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003886:	e006      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003894:	e7ff      	b.n	8003896 <PWM_write_range+0x1f6>
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bdb0      	pop	{r4, r5, r7, pc}
 800389e:	bf00      	nop
 80038a0:	00000000 	.word	0x00000000
 80038a4:	40efffe0 	.word	0x40efffe0
 80038a8:	80008001 	.word	0x80008001

080038ac <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6178      	str	r0, [r7, #20]
 80038b4:	6139      	str	r1, [r7, #16]
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80038be:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800390c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fb93 f2f2 	sdiv	r2, r3, r2
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	fb01 f202 	mul.w	r2, r1, r2
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800397a:	213c      	movs	r1, #60	@ 0x3c
 800397c:	6938      	ldr	r0, [r7, #16]
 800397e:	f00a f94f 	bl	800dc20 <HAL_TIM_Encoder_Start>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	0000      	movs	r0, r0
 800398c:	0000      	movs	r0, r0
	...

08003990 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	0fda      	lsrs	r2, r3, #31
 80039b8:	4413      	add	r3, r2
 80039ba:	105b      	asrs	r3, r3, #1
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	dd05      	ble.n	80039d0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e00e      	b.n	80039ee <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	0fda      	lsrs	r2, r3, #31
 80039d6:	4413      	add	r3, r2
 80039d8:	105b      	asrs	r3, r3, #1
 80039da:	425b      	negs	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	da04      	bge.n	80039ee <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fd4f 	bl	80004e0 <__aeabi_f2d>
 8003a42:	4604      	mov	r4, r0
 8003a44:	460d      	mov	r5, r1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a66:	ee17 0a90 	vmov	r0, s15
 8003a6a:	f7fc fd39 	bl	80004e0 <__aeabi_f2d>
 8003a6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003b60 <QEI_get_diff_count+0x1d0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	4699      	mov	r9, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd2b 	bl	80004e0 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fd7d 	bl	8000590 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7fc fbc1 	bl	8000224 <__adddf3>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f853 	bl	8000b54 <__aeabi_d2f>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fd11 	bl	80004e0 <__aeabi_f2d>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ada:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ade:	ee16 0a90 	vmov	r0, s13
 8003ae2:	f7fc fcfd 	bl	80004e0 <__aeabi_f2d>
 8003ae6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b60 <QEI_get_diff_count+0x1d0>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fd50 	bl	8000590 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4690      	mov	r8, r2
 8003af6:	4699      	mov	r9, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fcef 	bl	80004e0 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f7fc fd41 	bl	8000590 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4690      	mov	r8, r2
 8003b14:	4699      	mov	r9, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fce0 	bl	80004e0 <__aeabi_f2d>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fc fd32 	bl	8000590 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4620      	mov	r0, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7fc fb76 	bl	8000224 <__adddf3>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fd f808 	bl	8000b54 <__aeabi_d2f>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b5c:	f3af 8000 	nop.w
 8003b60:	54442d18 	.word	0x54442d18
 8003b64:	400921fb 	.word	0x400921fb

08003b68 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003b68:	b5b0      	push	{r4, r5, r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fca6 	bl	80004e0 <__aeabi_f2d>
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b83      	ldr	r3, [pc, #524]	@ (8003da8 <QEI_compute_data+0x240>)
 8003b9a:	f7fc fcf9 	bl	8000590 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb2:	ee17 0a90 	vmov	r0, s15
 8003bb6:	f7fc fc93 	bl	80004e0 <__aeabi_f2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fe0f 	bl	80007e4 <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4614      	mov	r4, r2
 8003bcc:	461d      	mov	r5, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fc84 	bl	80004e0 <__aeabi_f2d>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc fcd6 	bl	8000590 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc ffb2 	bl	8000b54 <__aeabi_d2f>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c00:	ee17 0a90 	vmov	r0, s15
 8003c04:	f7fc fc6c 	bl	80004e0 <__aeabi_f2d>
 8003c08:	a365      	add	r3, pc, #404	@ (adr r3, 8003da0 <QEI_compute_data+0x238>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fcbf 	bl	8000590 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4614      	mov	r4, r2
 8003c18:	461d      	mov	r5, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c26:	ee17 0a90 	vmov	r0, s15
 8003c2a:	f7fc fc59 	bl	80004e0 <__aeabi_f2d>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc fdd5 	bl	80007e4 <__aeabi_ddiv>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4614      	mov	r4, r2
 8003c40:	461d      	mov	r5, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fc4a 	bl	80004e0 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4620      	mov	r0, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	f7fc fc9c 	bl	8000590 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7fc ff78 	bl	8000b54 <__aeabi_d2f>
 8003c64:	4602      	mov	r2, r0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc36 	bl	80004e0 <__aeabi_f2d>
 8003c74:	a34a      	add	r3, pc, #296	@ (adr r3, 8003da0 <QEI_compute_data+0x238>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fc89 	bl	8000590 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4614      	mov	r4, r2
 8003c84:	461d      	mov	r5, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fc28 	bl	80004e0 <__aeabi_f2d>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fc7a 	bl	8000590 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb0:	ee17 0a90 	vmov	r0, s15
 8003cb4:	f7fc fc14 	bl	80004e0 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fd90 	bl	80007e4 <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fc05 	bl	80004e0 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fc57 	bl	8000590 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f7fc ff33 	bl	8000b54 <__aeabi_d2f>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d00a      	beq.n	8003d3c <QEI_compute_data+0x1d4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	e001      	b.n	8003d40 <QEI_compute_data+0x1d8>
 8003d3c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003dac <QEI_compute_data+0x244>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d56:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	d00a      	beq.n	8003d7e <QEI_compute_data+0x216>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	e001      	b.n	8003d82 <QEI_compute_data+0x21a>
 8003d7e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003dac <QEI_compute_data+0x244>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	615a      	str	r2, [r3, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003da0:	54442d18 	.word	0x54442d18
 8003da4:	400921fb 	.word	0x400921fb
 8003da8:	404e0000 	.word	0x404e0000
 8003dac:	00000000 	.word	0x00000000

08003db0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	@ 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6178      	str	r0, [r7, #20]
 8003e24:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e28:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e2c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e30:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e66:	eef0 7ae7 	vabs.f32	s15, s15
 8003e6a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003e6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	d503      	bpl.n	8003e8c <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	22ff      	movs	r2, #255	@ 0xff
 8003e88:	741a      	strb	r2, [r3, #16]
 8003e8a:	e002      	b.n	8003e92 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003e92:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	d006      	beq.n	8003eae <Trapezoidal_Generator+0x92>
 8003ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ea4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	d104      	bne.n	8003eb8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
        return;
 8003eb6:	e06f      	b.n	8003f98 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003eb8:	edd7 6a02 	vldr	s13, [r7, #8]
 8003ebc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ecc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ed0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ed4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003edc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003eec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003ef0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003efc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	db27      	blt.n	8003f5e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003f0e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f32:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003f34:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003f46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003f4a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003f4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f5c:	e018      	b.n	8003f90 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003f5e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f6a:	eeb0 0a66 	vmov.f32	s0, s13
 8003f6e:	f00d ffcb 	bl	8011f08 <sqrtf>
 8003f72:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	3738      	adds	r7, #56	@ 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08d      	sub	sp, #52	@ 0x34
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6178      	str	r0, [r7, #20]
 8003fa8:	6139      	str	r1, [r7, #16]
 8003faa:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fae:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fb2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003fb6:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fc0:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004244 <Trapezoidal_Evaluated+0x2a4>
 8003fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	f200 811b 	bhi.w	800421c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	7c1b      	ldrb	r3, [r3, #16]
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	ed97 7a00 	vldr	s14, [r7]
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	ed93 7a00 	vldr	s14, [r3]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004012:	eeb4 7a67 	vcmp.f32	s14, s15
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	d109      	bne.n	8004030 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800402e:	e00c      	b.n	800404a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	7c1b      	ldrb	r3, [r3, #16]
 8004034:	b25b      	sxtb	r3, r3
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d824      	bhi.n	80040aa <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004060:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004064:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004068:	ee27 7a87 	vmul.f32	s14, s15, s14
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	edd3 7a03 	vldr	s15, [r3, #12]
 800407c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004080:	edd7 7a03 	vldr	s15, [r7, #12]
 8004084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	ed93 7a03 	vldr	s14, [r3, #12]
 8004094:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80040a8:	e0c6      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040be:	d830      	bhi.n	8004122 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80040c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80040e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e8:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004104:	edd7 7a06 	vldr	s15, [r7, #24]
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004116:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	e08a      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	ed93 7a03 	vldr	s14, [r3, #12]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	edd3 7a02 	vldr	s15, [r3, #8]
 800412e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	d900      	bls.n	800413a <Trapezoidal_Evaluated+0x19a>
}
 8004138:	e07e      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800413a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800413e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	ed97 7a03 	vldr	s14, [r7, #12]
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	dd11      	ble.n	80041a4 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	ed93 7a01 	vldr	s14, [r3, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004190:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800419c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80041b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b4:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80041b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041c4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80041c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041d0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80041d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80041dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80041e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80041f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800420c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004210:	eef1 7a67 	vneg.f32	s15, s15
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800421a:	e00d      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2201      	movs	r2, #1
 8004220:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3734      	adds	r7, #52	@ 0x34
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	3a83126f 	.word	0x3a83126f

08004248 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004252:	4603      	mov	r3, r0
 8004254:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	2b1a      	cmp	r3, #26
 800425a:	d018      	beq.n	800428e <temperature_to_base+0x46>
 800425c:	2b1a      	cmp	r3, #26
 800425e:	dc1d      	bgt.n	800429c <temperature_to_base+0x54>
 8004260:	2b18      	cmp	r3, #24
 8004262:	d002      	beq.n	800426a <temperature_to_base+0x22>
 8004264:	2b19      	cmp	r3, #25
 8004266:	d003      	beq.n	8004270 <temperature_to_base+0x28>
 8004268:	e018      	b.n	800429c <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800426a:	edd7 7a01 	vldr	s15, [r7, #4]
 800426e:	e017      	b.n	80042a0 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004270:	edd7 7a01 	vldr	s15, [r7, #4]
 8004274:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80042b0 <temperature_to_base+0x68>
 8004278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800427c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004280:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004284:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800428c:	e008      	b.n	80042a0 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 800428e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004292:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80042b4 <temperature_to_base+0x6c>
 8004296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800429a:	e001      	b.n	80042a0 <temperature_to_base+0x58>
        default:
            return value;
 800429c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80042a0:	eeb0 0a67 	vmov.f32	s0, s15
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	42000000 	.word	0x42000000
 80042b4:	43889333 	.word	0x43889333

080042b8 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	ed87 0a01 	vstr	s0, [r7, #4]
 80042c2:	4603      	mov	r3, r0
 80042c4:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	2b1a      	cmp	r3, #26
 80042ca:	d018      	beq.n	80042fe <temperature_from_base+0x46>
 80042cc:	2b1a      	cmp	r3, #26
 80042ce:	dc1d      	bgt.n	800430c <temperature_from_base+0x54>
 80042d0:	2b18      	cmp	r3, #24
 80042d2:	d002      	beq.n	80042da <temperature_from_base+0x22>
 80042d4:	2b19      	cmp	r3, #25
 80042d6:	d003      	beq.n	80042e0 <temperature_from_base+0x28>
 80042d8:	e018      	b.n	800430c <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80042da:	edd7 7a01 	vldr	s15, [r7, #4]
 80042de:	e017      	b.n	8004310 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80042e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042e4:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80042e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042ec:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80042f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004320 <temperature_from_base+0x68>
 80042f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fc:	e008      	b.n	8004310 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80042fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004302:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004324 <temperature_from_base+0x6c>
 8004306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430a:	e001      	b.n	8004310 <temperature_from_base+0x58>
        default:
            return value;
 800430c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004310:	eeb0 0a67 	vmov.f32	s0, s15
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	42000000 	.word	0x42000000
 8004324:	43889333 	.word	0x43889333

08004328 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e00a      	b.n	8004358 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b1a      	cmp	r3, #26
 800435c:	ddf1      	ble.n	8004342 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a11      	ldr	r2, [pc, #68]	@ (80043a8 <init_length_converter+0x80>)
 8004362:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <init_length_converter+0x84>)
 8004368:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004370:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a0e      	ldr	r2, [pc, #56]	@ (80043b0 <init_length_converter+0x88>)
 8004376:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <init_length_converter+0x8c>)
 800437c:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a0d      	ldr	r2, [pc, #52]	@ (80043b8 <init_length_converter+0x90>)
 8004382:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <init_length_converter+0x94>)
 8004388:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <init_length_converter+0x98>)
 800438e:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	3a83126f 	.word	0x3a83126f
 80043ac:	3c23d70a 	.word	0x3c23d70a
 80043b0:	447a0000 	.word	0x447a0000
 80043b4:	3cd013a9 	.word	0x3cd013a9
 80043b8:	3e9c0ebf 	.word	0x3e9c0ebf
 80043bc:	3f6a161e 	.word	0x3f6a161e
 80043c0:	44c92b02 	.word	0x44c92b02

080043c4 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	220a      	movs	r2, #10
 80043d6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e00a      	b.n	80043f4 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b1a      	cmp	r3, #26
 80043f8:	ddf1      	ble.n	80043de <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004438 <init_mass_converter+0x74>)
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <init_mass_converter+0x78>)
 8004404:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800440c:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a0b      	ldr	r2, [pc, #44]	@ (8004440 <init_mass_converter+0x7c>)
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0b      	ldr	r2, [pc, #44]	@ (8004444 <init_mass_converter+0x80>)
 8004418:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <init_mass_converter+0x84>)
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	358637bd 	.word	0x358637bd
 800443c:	3a83126f 	.word	0x3a83126f
 8004440:	447a0000 	.word	0x447a0000
 8004444:	3ce83d36 	.word	0x3ce83d36
 8004448:	3ee83d36 	.word	0x3ee83d36

0800444c <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	220f      	movs	r2, #15
 800445e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00a      	b.n	800447c <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3304      	adds	r3, #4
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b1a      	cmp	r3, #26
 8004480:	ddf1      	ble.n	8004466 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <init_angle_converter+0x64>)
 8004486:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <init_angle_converter+0x68>)
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	3c8efa35 	.word	0x3c8efa35
 80044b4:	3c80adfd 	.word	0x3c80adfd

080044b8 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2214      	movs	r2, #20
 80044ca:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e00a      	b.n	80044e8 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	3304      	adds	r3, #4
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b1a      	cmp	r3, #26
 80044ec:	ddf1      	ble.n	80044d2 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <init_time_converter+0x7c>)
 80044f2:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a10      	ldr	r2, [pc, #64]	@ (8004538 <init_time_converter+0x80>)
 80044f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <init_time_converter+0x84>)
 80044fe:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0d      	ldr	r2, [pc, #52]	@ (8004540 <init_time_converter+0x88>)
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <init_time_converter+0x8c>)
 8004512:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <init_time_converter+0x90>)
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	3089705f 	.word	0x3089705f
 8004538:	358637bd 	.word	0x358637bd
 800453c:	3a83126f 	.word	0x3a83126f
 8004540:	42700000 	.word	0x42700000
 8004544:	45610000 	.word	0x45610000
 8004548:	47a8c000 	.word	0x47a8c000

0800454c <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2218      	movs	r2, #24
 800455e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e00a      	b.n	800457c <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	3304      	adds	r3, #4
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b1a      	cmp	r3, #26
 8004580:	ddf1      	ble.n	8004566 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <init_temperature_converter+0x50>)
 8004586:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <init_temperature_converter+0x54>)
 800458c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	08004249 	.word	0x08004249
 80045a0:	080042b9 	.word	0x080042b9

080045a4 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff feba 	bl	8004328 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3378      	adds	r3, #120	@ 0x78
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff03 	bl	80043c4 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	33f0      	adds	r3, #240	@ 0xf0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff42 	bl	800444c <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff72 	bl	80044b8 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ffb6 	bl	800454c <init_temperature_converter>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b1a      	cmp	r3, #26
 80045f6:	d803      	bhi.n	8004600 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	4a05      	ldr	r2, [pc, #20]	@ (8004610 <UnitConverter_get_unit_type+0x28>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	e000      	b.n	8004602 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000118 	.word	0x20000118

08004614 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004620:	460b      	mov	r3, r1
 8004622:	71fb      	strb	r3, [r7, #7]
 8004624:	4613      	mov	r3, r2
 8004626:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ffdc 	bl	80045e8 <UnitConverter_get_unit_type>
 8004630:	4603      	mov	r3, r0
 8004632:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004634:	79bb      	ldrb	r3, [r7, #6]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ffd6 	bl	80045e8 <UnitConverter_get_unit_type>
 800463c:	4603      	mov	r3, r0
 800463e:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004640:	7efa      	ldrb	r2, [r7, #27]
 8004642:	7ebb      	ldrb	r3, [r7, #26]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004648:	edd7 7a02 	vldr	s15, [r7, #8]
 800464c:	e03b      	b.n	80046c6 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800464e:	7efa      	ldrb	r2, [r7, #27]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	4610      	mov	r0, r2
 800466e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004672:	4798      	blx	r3
 8004674:	ed87 0a07 	vstr	s0, [r7, #28]
 8004678:	e00c      	b.n	8004694 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	ed97 7a02 	vldr	s14, [r7, #8]
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a0:	79ba      	ldrb	r2, [r7, #6]
 80046a2:	4610      	mov	r0, r2
 80046a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80046a8:	4798      	blx	r3
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	e00a      	b.n	80046c6 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80046b0:	79bb      	ldrb	r3, [r7, #6]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046dc:	460b      	mov	r3, r1
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff7e 	bl	80045e8 <UnitConverter_get_unit_type>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d111      	bne.n	8004716 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 80046f2:	79bb      	ldrb	r3, [r7, #6]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff77 	bl	80045e8 <UnitConverter_get_unit_type>
 80046fa:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d10a      	bne.n	8004716 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004700:	79ba      	ldrb	r2, [r7, #6]
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4619      	mov	r1, r3
 8004706:	ed97 0a02 	vldr	s0, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ff82 	bl	8004614 <UnitConverter_convert>
 8004710:	eef0 7a40 	vmov.f32	s15, s0
 8004714:	e001      	b.n	800471a <UnitConverter_angle+0x4a>
    }
    return value;
 8004716:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800471a:	eeb0 0a67 	vmov.f32	s0, s15
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	@ 0x30
 8004728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800472a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	2220      	movs	r2, #32
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f00d fac7 	bl	8011cd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004742:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004744:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800474a:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <MX_ADC1_Init+0x104>)
 800474c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004752:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004758:	4b33      	ldr	r3, [pc, #204]	@ (8004828 <MX_ADC1_Init+0x104>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800475e:	4b32      	ldr	r3, [pc, #200]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004764:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800476a:	4b2f      	ldr	r3, [pc, #188]	@ (8004828 <MX_ADC1_Init+0x104>)
 800476c:	2204      	movs	r2, #4
 800476e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004770:	4b2d      	ldr	r3, [pc, #180]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004772:	2200      	movs	r2, #0
 8004774:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004776:	4b2c      	ldr	r3, [pc, #176]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004778:	2201      	movs	r2, #1
 800477a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800477c:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <MX_ADC1_Init+0x104>)
 800477e:	2202      	movs	r2, #2
 8004780:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004782:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800478a:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <MX_ADC1_Init+0x104>)
 800478c:	2200      	movs	r2, #0
 800478e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800479e:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80047a4:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047ac:	481e      	ldr	r0, [pc, #120]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047ae:	f005 fd41 	bl	800a234 <HAL_ADC_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80047b8:	f003 fd66 	bl	8008288 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4818      	ldr	r0, [pc, #96]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047c8:	f006 fe60 	bl	800b48c <HAL_ADCEx_MultiModeConfigChannel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80047d2:	f003 fd59 	bl	8008288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <MX_ADC1_Init+0x108>)
 80047d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047da:	2306      	movs	r3, #6
 80047dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80047de:	2307      	movs	r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047e2:	237f      	movs	r3, #127	@ 0x7f
 80047e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047e6:	2304      	movs	r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	480d      	ldr	r0, [pc, #52]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047f4:	f005 ffcc 	bl	800a790 <HAL_ADC_ConfigChannel>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80047fe:	f003 fd43 	bl	8008288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <MX_ADC1_Init+0x10c>)
 8004804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004806:	230c      	movs	r3, #12
 8004808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4806      	ldr	r0, [pc, #24]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004810:	f005 ffbe 	bl	800a790 <HAL_ADC_ConfigChannel>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800481a:	f003 fd35 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	3730      	adds	r7, #48	@ 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200001b4 	.word	0x200001b4
 800482c:	19200040 	.word	0x19200040
 8004830:	1d500080 	.word	0x1d500080

08004834 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b09e      	sub	sp, #120	@ 0x78
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	2254      	movs	r2, #84	@ 0x54
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f00d fa3b 	bl	8011cd0 <memset>
  if(adcHandle->Instance==ADC1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004862:	d15e      	bne.n	8004922 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800486a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800486e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4618      	mov	r0, r3
 8004876:	f008 fb19 	bl	800ceac <HAL_RCCEx_PeriphCLKConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004880:	f003 fd02 	bl	8008288 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 8004886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 800488a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800488e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004890:	4b26      	ldr	r3, [pc, #152]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	4a22      	ldr	r2, [pc, #136]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a8:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048b4:	2303      	movs	r3, #3
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b8:	2303      	movs	r3, #3
 80048ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048c4:	4619      	mov	r1, r3
 80048c6:	481a      	ldr	r0, [pc, #104]	@ (8004930 <HAL_ADC_MspInit+0xfc>)
 80048c8:	f007 fb2a 	bl	800bf20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004938 <HAL_ADC_MspInit+0x104>)
 80048d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80048d2:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048d4:	2205      	movs	r2, #5
 80048d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d8:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048e4:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048ea:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048fc:	2220      	movs	r2, #32
 80048fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004900:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 8004902:	2200      	movs	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004906:	480b      	ldr	r0, [pc, #44]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 8004908:	f006 ffd8 	bl	800b8bc <HAL_DMA_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004912:	f003 fcb9 	bl	8008288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a06      	ldr	r2, [pc, #24]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54
 800491c:	4a05      	ldr	r2, [pc, #20]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004922:	bf00      	nop
 8004924:	3778      	adds	r7, #120	@ 0x78
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	48000800 	.word	0x48000800
 8004934:	20000220 	.word	0x20000220
 8004938:	40020008 	.word	0x40020008

0800493c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <MX_DMA_Init+0x90>)
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <MX_DMA_Init+0x90>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6493      	str	r3, [r2, #72]	@ 0x48
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <MX_DMA_Init+0x90>)
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <MX_DMA_Init+0x90>)
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <MX_DMA_Init+0x90>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6493      	str	r3, [r2, #72]	@ 0x48
 8004966:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <MX_DMA_Init+0x90>)
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2100      	movs	r1, #0
 8004976:	200b      	movs	r0, #11
 8004978:	f006 ff6b 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800497c:	200b      	movs	r0, #11
 800497e:	f006 ff82 	bl	800b886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	200c      	movs	r0, #12
 8004988:	f006 ff63 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800498c:	200c      	movs	r0, #12
 800498e:	f006 ff7a 	bl	800b886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	200d      	movs	r0, #13
 8004998:	f006 ff5b 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800499c:	200d      	movs	r0, #13
 800499e:	f006 ff72 	bl	800b886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	200e      	movs	r0, #14
 80049a8:	f006 ff53 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80049ac:	200e      	movs	r0, #14
 80049ae:	f006 ff6a 	bl	800b886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	200f      	movs	r0, #15
 80049b8:	f006 ff4b 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80049bc:	200f      	movs	r0, #15
 80049be:	f006 ff62 	bl	800b886 <HAL_NVIC_EnableIRQ>

}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000

080049d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	@ 0x28
 80049d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e6:	4b75      	ldr	r3, [pc, #468]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	4a74      	ldr	r2, [pc, #464]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f2:	4b72      	ldr	r3, [pc, #456]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049fe:	4b6f      	ldr	r3, [pc, #444]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	4a6e      	ldr	r2, [pc, #440]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a16:	4b69      	ldr	r3, [pc, #420]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	4a68      	ldr	r2, [pc, #416]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a22:	4b66      	ldr	r3, [pc, #408]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2e:	4b63      	ldr	r3, [pc, #396]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	4a62      	ldr	r2, [pc, #392]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3a:	4b60      	ldr	r3, [pc, #384]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a50:	f007 fc00 	bl	800c254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004a54:	2200      	movs	r2, #0
 8004a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a5a:	4859      	ldr	r0, [pc, #356]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004a5c:	f007 fbfa 	bl	800c254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a70:	f107 0314 	add.w	r3, r7, #20
 8004a74:	4619      	mov	r1, r3
 8004a76:	4852      	ldr	r0, [pc, #328]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004a78:	f007 fa52 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004a7c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a98:	f007 fa42 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004a9c:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4844      	ldr	r0, [pc, #272]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004ab4:	f007 fa34 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ab8:	2306      	movs	r3, #6
 8004aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4619      	mov	r1, r3
 8004aca:	483e      	ldr	r0, [pc, #248]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004acc:	f007 fa28 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4835      	ldr	r0, [pc, #212]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004aea:	f007 fa19 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004aee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004af4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afa:	2302      	movs	r3, #2
 8004afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	4619      	mov	r1, r3
 8004b04:	482e      	ldr	r0, [pc, #184]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004b06:	f007 fa0b 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b14:	2302      	movs	r3, #2
 8004b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4828      	ldr	r0, [pc, #160]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004b20:	f007 f9fe 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004b24:	2310      	movs	r3, #16
 8004b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	4822      	ldr	r0, [pc, #136]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b3a:	f007 f9f1 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004b3e:	2340      	movs	r3, #64	@ 0x40
 8004b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4619      	mov	r1, r3
 8004b52:	481c      	ldr	r0, [pc, #112]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b54:	f007 f9e4 	bl	800bf20 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4815      	ldr	r0, [pc, #84]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b6e:	f007 f9d7 	bl	800bf20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2100      	movs	r1, #0
 8004b76:	2006      	movs	r0, #6
 8004b78:	f006 fe6b 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b7c:	2006      	movs	r0, #6
 8004b7e:	f006 fe82 	bl	800b886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	200a      	movs	r0, #10
 8004b88:	f006 fe63 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b8c:	200a      	movs	r0, #10
 8004b8e:	f006 fe7a 	bl	800b886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b92:	2200      	movs	r2, #0
 8004b94:	2100      	movs	r1, #0
 8004b96:	2017      	movs	r0, #23
 8004b98:	f006 fe5b 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b9c:	2017      	movs	r0, #23
 8004b9e:	f006 fe72 	bl	800b886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2028      	movs	r0, #40	@ 0x28
 8004ba8:	f006 fe53 	bl	800b852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bac:	2028      	movs	r0, #40	@ 0x28
 8004bae:	f006 fe6a 	bl	800b886 <HAL_NVIC_EnableIRQ>

}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	@ 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	48000800 	.word	0x48000800
 8004bc4:	48000400 	.word	0x48000400

08004bc8 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b096      	sub	sp, #88	@ 0x58
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	2201      	movs	r2, #1
 8004be2:	2101      	movs	r1, #1
 8004be4:	f00c fb03 	bl	80111ee <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f00c ff73 	bl	8011ae2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f00c ff69 	bl	8011ae2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f00c ff5f 	bl	8011ae2 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004c30:	4619      	mov	r1, r3
 8004c32:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c36:	4610      	mov	r0, r2
 8004c38:	f00c fee2 	bl	8011a00 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f00c fe5c 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c66:	461a      	mov	r2, r3
 8004c68:	f00c fa86 	bl	8011178 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f00c fe44 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c96:	461a      	mov	r2, r3
 8004c98:	f00c fe38 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f00c fe2c 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f00c fe97 	bl	8011a00 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f00c fa47 	bl	8011178 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f00c fe05 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004d14:	461a      	mov	r2, r3
 8004d16:	f00c fdf9 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f00c fa23 	bl	8011178 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f00c fa6c 	bl	801121e <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f00c fdd7 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004d70:	461a      	mov	r2, r3
 8004d72:	f00c fdcb 	bl	801190c <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f00c fdbf 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004da0:	461a      	mov	r2, r3
 8004da2:	f00c fe63 	bl	8011a6c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004db8:	461a      	mov	r2, r3
 8004dba:	f00c fda7 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f00c f9d1 	bl	8011178 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004de8:	461a      	mov	r2, r3
 8004dea:	f00c fd8f 	bl	801190c <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004dee:	f107 0310 	add.w	r3, r7, #16
 8004df2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004df6:	2204      	movs	r2, #4
 8004df8:	2104      	movs	r1, #4
 8004dfa:	f00c f9f8 	bl	80111ee <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004e0a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f00c fd7c 	bl	801190c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004e1a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004e1e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004e22:	4618      	mov	r0, r3
 8004e24:	f00c fe22 	bl	8011a6c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004e34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f00c fd67 	bl	801190c <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004e4e:	ee07 3a90 	vmov	s15, r3
}
 8004e52:	eeb0 0a67 	vmov.f32	s0, s15
 8004e56:	3758      	adds	r7, #88	@ 0x58
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004e5c:	b5b0      	push	{r4, r5, r7, lr}
 8004e5e:	b0a4      	sub	sp, #144	@ 0x90
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6178      	str	r0, [r7, #20]
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e6c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004e80:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ea4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	677b      	str	r3, [r7, #116]	@ 0x74
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004eb6:	4bc6      	ldr	r3, [pc, #792]	@ (80051d0 <Kalman_Start+0x374>)
 8004eb8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004ebc:	461d      	mov	r5, r3
 8004ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004ed2:	f107 031c 	add.w	r3, r7, #28
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ef0:	e028      	b.n	8004f44 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f04:	3314      	adds	r3, #20
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	3390      	adds	r3, #144	@ 0x90
 8004f14:	443b      	add	r3, r7
 8004f16:	3b64      	subs	r3, #100	@ 0x64
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f20:	3398      	adds	r3, #152	@ 0x98
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2e:	3304      	adds	r3, #4
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f48:	2b0f      	cmp	r3, #15
 8004f4a:	ddd2      	ble.n	8004ef2 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f52:	e03a      	b.n	8004fca <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	3390      	adds	r3, #144	@ 0x90
 8004f5c:	443b      	add	r3, r7
 8004f5e:	3b74      	subs	r3, #116	@ 0x74
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6979      	ldr	r1, [r7, #20]
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f80:	3324      	adds	r3, #36	@ 0x24
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	3390      	adds	r3, #144	@ 0x90
 8004f90:	443b      	add	r3, r7
 8004f92:	3b14      	subs	r3, #20
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9c:	3328      	adds	r3, #40	@ 0x28
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	3390      	adds	r3, #144	@ 0x90
 8004fac:	443b      	add	r3, r7
 8004fae:	3b24      	subs	r3, #36	@ 0x24
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fb8:	332c      	adds	r3, #44	@ 0x2c
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	ddc0      	ble.n	8004f54 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2104      	movs	r1, #4
 8004fde:	f00c f906 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3310      	adds	r3, #16
 8004fec:	2204      	movs	r2, #4
 8004fee:	2104      	movs	r1, #4
 8004ff0:	f00c f8fd 	bl	80111ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3350      	adds	r3, #80	@ 0x50
 8004ffe:	2204      	movs	r2, #4
 8005000:	2104      	movs	r1, #4
 8005002:	f00c f8f4 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3390      	adds	r3, #144	@ 0x90
 8005010:	2201      	movs	r2, #1
 8005012:	2104      	movs	r1, #4
 8005014:	f00c f8eb 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	33a0      	adds	r3, #160	@ 0xa0
 8005022:	2204      	movs	r2, #4
 8005024:	2101      	movs	r1, #1
 8005026:	f00c f8e2 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	33b0      	adds	r3, #176	@ 0xb0
 8005034:	2201      	movs	r2, #1
 8005036:	2104      	movs	r1, #4
 8005038:	f00c f8d9 	bl	80111ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	33c8      	adds	r3, #200	@ 0xc8
 8005046:	2204      	movs	r2, #4
 8005048:	2104      	movs	r1, #4
 800504a:	f00c f8d0 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800505a:	2201      	movs	r2, #1
 800505c:	2104      	movs	r1, #4
 800505e:	f00c f8c6 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800506e:	2204      	movs	r2, #4
 8005070:	2101      	movs	r1, #1
 8005072:	f00c f8bc 	bl	80111ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005082:	2204      	movs	r2, #4
 8005084:	2104      	movs	r1, #4
 8005086:	f00c f8b2 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005096:	2204      	movs	r2, #4
 8005098:	2104      	movs	r1, #4
 800509a:	f00c f8a8 	bl	80111ee <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80050aa:	2201      	movs	r2, #1
 80050ac:	2104      	movs	r1, #4
 80050ae:	f00c f89e 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80050be:	2201      	movs	r2, #1
 80050c0:	2104      	movs	r1, #4
 80050c2:	f00c f894 	bl	80111ee <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80050d2:	2204      	movs	r2, #4
 80050d4:	2101      	movs	r1, #1
 80050d6:	f00c f88a 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80050e6:	2201      	movs	r2, #1
 80050e8:	2101      	movs	r1, #1
 80050ea:	f00c f880 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80050fa:	2201      	movs	r2, #1
 80050fc:	2101      	movs	r1, #1
 80050fe:	f00c f876 	bl	80111ee <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800510e:	2201      	movs	r2, #1
 8005110:	2104      	movs	r1, #4
 8005112:	f00c f86c 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005122:	2201      	movs	r2, #1
 8005124:	2104      	movs	r1, #4
 8005126:	f00c f862 	bl	80111ee <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005136:	2201      	movs	r2, #1
 8005138:	2101      	movs	r1, #1
 800513a:	f00c f858 	bl	80111ee <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800514a:	2201      	movs	r2, #1
 800514c:	2101      	movs	r1, #1
 800514e:	f00c f84e 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800515e:	2201      	movs	r2, #1
 8005160:	2101      	movs	r1, #1
 8005162:	f00c f844 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005172:	2201      	movs	r2, #1
 8005174:	2104      	movs	r1, #4
 8005176:	f00c f83a 	bl	80111ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005186:	2201      	movs	r2, #1
 8005188:	2101      	movs	r1, #1
 800518a:	f00c f830 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800519a:	2204      	movs	r2, #4
 800519c:	2104      	movs	r1, #4
 800519e:	f00c f826 	bl	80111ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	33c4      	adds	r3, #196	@ 0xc4
 80051ac:	2201      	movs	r2, #1
 80051ae:	2101      	movs	r1, #1
 80051b0:	f00c f81d 	bl	80111ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80051c0:	2201      	movs	r2, #1
 80051c2:	2101      	movs	r1, #1
 80051c4:	f00c f813 	bl	80111ee <arm_mat_init_f32>
}
 80051c8:	bf00      	nop
 80051ca:	3790      	adds	r7, #144	@ 0x90
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bdb0      	pop	{r4, r5, r7, pc}
 80051d0:	08013ba0 	.word	0x08013ba0

080051d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051d8:	f3bf 8f4f 	dsb	sy
}
 80051dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <__NVIC_SystemReset+0x24>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80051e6:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <__NVIC_SystemReset+0x24>)
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <__NVIC_SystemReset+0x28>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80051ee:	f3bf 8f4f 	dsb	sy
}
 80051f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <__NVIC_SystemReset+0x20>
 80051f8:	e000ed00 	.word	0xe000ed00
 80051fc:	05fa0004 	.word	0x05fa0004

08005200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005206:	f004 fd60 	bl	8009cca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800520a:	f000 f88d 	bl	8005328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800520e:	f7ff fbdf 	bl	80049d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8005212:	f7ff fb93 	bl	800493c <MX_DMA_Init>
	MX_ADC1_Init();
 8005216:	f7ff fa85 	bl	8004724 <MX_ADC1_Init>
	MX_TIM2_Init();
 800521a:	f003 ff6b 	bl	80090f4 <MX_TIM2_Init>
	MX_TIM3_Init();
 800521e:	f003 ffb7 	bl	8009190 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005222:	f004 f80b 	bl	800923c <MX_TIM4_Init>
	MX_TIM5_Init();
 8005226:	f004 f85f 	bl	80092e8 <MX_TIM5_Init>
	MX_TIM8_Init();
 800522a:	f004 f8b3 	bl	8009394 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800522e:	f004 fb75 	bl	800991c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005232:	f004 f96d 	bl	8009510 <MX_TIM16_Init>
	MX_TIM1_Init();
 8005236:	f003 fec9 	bl	8008fcc <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800523a:	f004 fb25 	bl	8009888 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800523e:	f003 f82b 	bl	8008298 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005242:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <main+0xe4>)
 8005244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005246:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <main+0xe8>)
 8005248:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800524a:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <main+0xec>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4a28      	ldr	r2, [pc, #160]	@ (80052f0 <main+0xf0>)
 8005250:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005252:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <main+0xf4>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <main+0xf8>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800525e:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <main+0xfc>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8005264:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <main+0x100>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 800526a:	4b26      	ldr	r3, [pc, #152]	@ (8005304 <main+0x104>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <main+0x108>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d032      	beq.n	80052de <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005278:	2101      	movs	r1, #1
 800527a:	4824      	ldr	r0, [pc, #144]	@ (800530c <main+0x10c>)
 800527c:	f006 ffd2 	bl	800c224 <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800528c:	2140      	movs	r1, #64	@ 0x40
 800528e:	481f      	ldr	r0, [pc, #124]	@ (800530c <main+0x10c>)
 8005290:	f006 ffc8 	bl	800c224 <HAL_GPIO_ReadPin>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <main+0xd8>
 80052a6:	79bb      	ldrb	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80052ac:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <main+0x108>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80052b2:	4b17      	ldr	r3, [pc, #92]	@ (8005310 <main+0x110>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80052b8:	4b16      	ldr	r3, [pc, #88]	@ (8005314 <main+0x114>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <main+0x118>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80052c4:	4b15      	ldr	r3, [pc, #84]	@ (800531c <main+0x11c>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80052ca:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <main+0x120>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80052d0:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <main+0x124>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e002      	b.n	80052de <main+0xde>

		} else {
			start_homing_sequence(true);
 80052d8:	2001      	movs	r0, #1
 80052da:	f000 f871 	bl	80053c0 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80052de:	f002 fd41 	bl	8007d64 <handle_b2_button_polling>
 80052e2:	e7fc      	b.n	80052de <main+0xde>
 80052e4:	20000494 	.word	0x20000494
 80052e8:	20000280 	.word	0x20000280
 80052ec:	200004f0 	.word	0x200004f0
 80052f0:	200002c4 	.word	0x200002c4
 80052f4:	2000036c 	.word	0x2000036c
 80052f8:	20000375 	.word	0x20000375
 80052fc:	20000374 	.word	0x20000374
 8005300:	20000370 	.word	0x20000370
 8005304:	20000378 	.word	0x20000378
 8005308:	20000133 	.word	0x20000133
 800530c:	48000400 	.word	0x48000400
 8005310:	2000036b 	.word	0x2000036b
 8005314:	2000036a 	.word	0x2000036a
 8005318:	20000368 	.word	0x20000368
 800531c:	20000369 	.word	0x20000369
 8005320:	20000364 	.word	0x20000364
 8005324:	20000308 	.word	0x20000308

08005328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b094      	sub	sp, #80	@ 0x50
 800532c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800532e:	f107 0318 	add.w	r3, r7, #24
 8005332:	2238      	movs	r2, #56	@ 0x38
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f00c fcca 	bl	8011cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	609a      	str	r2, [r3, #8]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800534a:	2000      	movs	r0, #0
 800534c:	f006 ffcc 	bl	800c2e8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005350:	2302      	movs	r3, #2
 8005352:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800535a:	2340      	movs	r3, #64	@ 0x40
 800535c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800535e:	2302      	movs	r3, #2
 8005360:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005362:	2302      	movs	r3, #2
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005366:	2304      	movs	r3, #4
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800536a:	2355      	movs	r3, #85	@ 0x55
 800536c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800536e:	2302      	movs	r3, #2
 8005370:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005372:	2302      	movs	r3, #2
 8005374:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005376:	2302      	movs	r3, #2
 8005378:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f007 f866 	bl	800c450 <HAL_RCC_OscConfig>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <SystemClock_Config+0x66>
		Error_Handler();
 800538a:	f002 ff7d 	bl	8008288 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800538e:	230f      	movs	r3, #15
 8005390:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005392:	2303      	movs	r3, #3
 8005394:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	2104      	movs	r1, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f007 fb64 	bl	800ca74 <HAL_RCC_ClockConfig>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <SystemClock_Config+0x8e>
		Error_Handler();
 80053b2:	f002 ff69 	bl	8008288 <Error_Handler>
	}
}
 80053b6:	bf00      	nop
 80053b8:	3750      	adds	r7, #80	@ 0x50
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 80053ca:	4b50      	ldr	r3, [pc, #320]	@ (800550c <start_homing_sequence+0x14c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 8098 	bne.w	8005504 <start_homing_sequence+0x144>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80053d4:	2101      	movs	r1, #1
 80053d6:	484e      	ldr	r0, [pc, #312]	@ (8005510 <start_homing_sequence+0x150>)
 80053d8:	f006 ff24 	bl	800c224 <HAL_GPIO_ReadPin>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80053e8:	2140      	movs	r1, #64	@ 0x40
 80053ea:	4849      	ldr	r0, [pc, #292]	@ (8005510 <start_homing_sequence+0x150>)
 80053ec:	f006 ff1a 	bl	800c224 <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <start_homing_sequence+0x4a>
 8005402:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <start_homing_sequence+0x154>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02e      	beq.n	8005468 <start_homing_sequence+0xa8>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d018      	beq.n	8005442 <start_homing_sequence+0x82>
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <start_homing_sequence+0x82>
			// Already at home position - no need to home
			homing_active = false;
 8005416:	4b3d      	ldr	r3, [pc, #244]	@ (800550c <start_homing_sequence+0x14c>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800541c:	4b3e      	ldr	r3, [pc, #248]	@ (8005518 <start_homing_sequence+0x158>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005422:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <start_homing_sequence+0x154>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005428:	4b3c      	ldr	r3, [pc, #240]	@ (800551c <start_homing_sequence+0x15c>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800542e:	4b3c      	ldr	r3, [pc, #240]	@ (8005520 <start_homing_sequence+0x160>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005434:	4b3b      	ldr	r3, [pc, #236]	@ (8005524 <start_homing_sequence+0x164>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 800543a:	4b3b      	ldr	r3, [pc, #236]	@ (8005528 <start_homing_sequence+0x168>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
			return;
 8005440:	e061      	b.n	8005506 <start_homing_sequence+0x146>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005442:	4b32      	ldr	r3, [pc, #200]	@ (800550c <start_homing_sequence+0x14c>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005448:	4b37      	ldr	r3, [pc, #220]	@ (8005528 <start_homing_sequence+0x168>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 800544e:	4b35      	ldr	r3, [pc, #212]	@ (8005524 <start_homing_sequence+0x164>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005454:	4b31      	ldr	r3, [pc, #196]	@ (800551c <start_homing_sequence+0x15c>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 800545a:	4b31      	ldr	r3, [pc, #196]	@ (8005520 <start_homing_sequence+0x160>)
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005460:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <start_homing_sequence+0x158>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e04e      	b.n	8005506 <start_homing_sequence+0x146>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <start_homing_sequence+0xe0>
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <start_homing_sequence+0xe0>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 8005474:	4b25      	ldr	r3, [pc, #148]	@ (800550c <start_homing_sequence+0x14c>)
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800547a:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <start_homing_sequence+0x158>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 8005480:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <start_homing_sequence+0x154>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 8005486:	4b25      	ldr	r3, [pc, #148]	@ (800551c <start_homing_sequence+0x15c>)
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800548c:	4b24      	ldr	r3, [pc, #144]	@ (8005520 <start_homing_sequence+0x160>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <start_homing_sequence+0x164>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005498:	4b23      	ldr	r3, [pc, #140]	@ (8005528 <start_homing_sequence+0x168>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			return;
 800549e:	e032      	b.n	8005506 <start_homing_sequence+0x146>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01b      	beq.n	80054de <start_homing_sequence+0x11e>
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	f083 0301 	eor.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <start_homing_sequence+0x11e>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <start_homing_sequence+0x14c>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <start_homing_sequence+0x168>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80054be:	4b19      	ldr	r3, [pc, #100]	@ (8005524 <start_homing_sequence+0x164>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <start_homing_sequence+0x15c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <start_homing_sequence+0x160>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <start_homing_sequence+0x158>)
 80054d2:	2207      	movs	r2, #7
 80054d4:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <start_homing_sequence+0x16c>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e013      	b.n	8005506 <start_homing_sequence+0x146>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <start_homing_sequence+0x14c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80054e4:	4b10      	ldr	r3, [pc, #64]	@ (8005528 <start_homing_sequence+0x168>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80054ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <start_homing_sequence+0x164>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <start_homing_sequence+0x15c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <start_homing_sequence+0x160>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <start_homing_sequence+0x158>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <start_homing_sequence+0x146>
		return;
 8005504:	bf00      	nop
		}
	}
}
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000036b 	.word	0x2000036b
 8005510:	48000400 	.word	0x48000400
 8005514:	20000133 	.word	0x20000133
 8005518:	2000036a 	.word	0x2000036a
 800551c:	20000368 	.word	0x20000368
 8005520:	20000369 	.word	0x20000369
 8005524:	20000364 	.word	0x20000364
 8005528:	20000308 	.word	0x20000308
 800552c:	20000376 	.word	0x20000376

08005530 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	ed2d 8b02 	vpush	{d8}
 8005538:	b08b      	sub	sp, #44	@ 0x2c
 800553a:	af00      	add	r7, sp, #0
	if (!homing_active)
 800553c:	4b95      	ldr	r3, [pc, #596]	@ (8005794 <update_homing_sequence+0x264>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 8335 	bne.w	8005bb6 <update_homing_sequence+0x686>
		return;

	switch (homing_state) {
 800554c:	4b92      	ldr	r3, [pc, #584]	@ (8005798 <update_homing_sequence+0x268>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	2b0a      	cmp	r3, #10
 8005554:	f200 8331 	bhi.w	8005bba <update_homing_sequence+0x68a>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <update_homing_sequence+0x30>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055af 	.word	0x080055af
 8005568:	0800561b 	.word	0x0800561b
 800556c:	08005767 	.word	0x08005767
 8005570:	080057d9 	.word	0x080057d9
 8005574:	0800591d 	.word	0x0800591d
 8005578:	08005995 	.word	0x08005995
 800557c:	080059df 	.word	0x080059df
 8005580:	08005a81 	.word	0x08005a81
 8005584:	08005b87 	.word	0x08005b87
 8005588:	08005bb3 	.word	0x08005bb3
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 800558c:	f003 fb0a 	bl	8008ba4 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005590:	4b82      	ldr	r3, [pc, #520]	@ (800579c <update_homing_sequence+0x26c>)
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005598:	4b81      	ldr	r3, [pc, #516]	@ (80057a0 <update_homing_sequence+0x270>)
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 80055a0:	4b80      	ldr	r3, [pc, #512]	@ (80057a4 <update_homing_sequence+0x274>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 80055a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <update_homing_sequence+0x268>)
 80055a8:	2202      	movs	r2, #2
 80055aa:	701a      	strb	r2, [r3, #0]
		break;
 80055ac:	e318      	b.n	8005be0 <update_homing_sequence+0x6b0>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80055ae:	4b7b      	ldr	r3, [pc, #492]	@ (800579c <update_homing_sequence+0x26c>)
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80055b6:	4b7a      	ldr	r3, [pc, #488]	@ (80057a0 <update_homing_sequence+0x270>)
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80055be:	4b79      	ldr	r3, [pc, #484]	@ (80057a4 <update_homing_sequence+0x274>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4a77      	ldr	r2, [pc, #476]	@ (80057a4 <update_homing_sequence+0x274>)
 80055c6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80055c8:	4b76      	ldr	r3, [pc, #472]	@ (80057a4 <update_homing_sequence+0x274>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80055d0:	f0c0 82f5 	bcc.w	8005bbe <update_homing_sequence+0x68e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80055d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055d8:	4873      	ldr	r0, [pc, #460]	@ (80057a8 <update_homing_sequence+0x278>)
 80055da:	f006 fe23 	bl	800c224 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4b70      	ldr	r3, [pc, #448]	@ (80057ac <update_homing_sequence+0x27c>)
 80055ec:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 80055ee:	4b6f      	ldr	r3, [pc, #444]	@ (80057ac <update_homing_sequence+0x27c>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00c      	beq.n	8005612 <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80055f8:	4b6a      	ldr	r3, [pc, #424]	@ (80057a4 <update_homing_sequence+0x274>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80055fe:	4b66      	ldr	r3, [pc, #408]	@ (8005798 <update_homing_sequence+0x268>)
 8005600:	2204      	movs	r2, #4
 8005602:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005604:	4b69      	ldr	r3, [pc, #420]	@ (80057ac <update_homing_sequence+0x27c>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 800560a:	4b69      	ldr	r3, [pc, #420]	@ (80057b0 <update_homing_sequence+0x280>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005610:	e2d5      	b.n	8005bbe <update_homing_sequence+0x68e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005612:	4b61      	ldr	r3, [pc, #388]	@ (8005798 <update_homing_sequence+0x268>)
 8005614:	2203      	movs	r2, #3
 8005616:	701a      	strb	r2, [r3, #0]
		break;
 8005618:	e2d1      	b.n	8005bbe <update_homing_sequence+0x68e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 800561a:	4b60      	ldr	r3, [pc, #384]	@ (800579c <update_homing_sequence+0x26c>)
 800561c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005620:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80057b4 <update_homing_sequence+0x284>
 8005624:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005628:	4b5c      	ldr	r3, [pc, #368]	@ (800579c <update_homing_sequence+0x26c>)
 800562a:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800562e:	4b5b      	ldr	r3, [pc, #364]	@ (800579c <update_homing_sequence+0x26c>)
 8005630:	edd3 7a06 	vldr	s15, [r3, #24]
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	485f      	ldr	r0, [pc, #380]	@ (80057b8 <update_homing_sequence+0x288>)
 800563a:	f7fb fded 	bl	8001218 <PID_CONTROLLER_Compute>
 800563e:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005642:	4b5e      	ldr	r3, [pc, #376]	@ (80057bc <update_homing_sequence+0x28c>)
 8005644:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	f7fb fa3a 	bl	8000ac4 <__aeabi_d2iz>
 8005650:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005652:	4b5a      	ldr	r3, [pc, #360]	@ (80057bc <update_homing_sequence+0x28c>)
 8005654:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005658:	613a      	str	r2, [r7, #16]
 800565a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005664:	f7fb fa2e 	bl	8000ac4 <__aeabi_d2iz>
 8005668:	4603      	mov	r3, r0
 800566a:	4619      	mov	r1, r3
 800566c:	4620      	mov	r0, r4
 800566e:	eeb0 0a48 	vmov.f32	s0, s16
 8005672:	f7fb fd6f 	bl	8001154 <PWM_Satuation>
 8005676:	ee07 0a90 	vmov	s15, r0
 800567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567e:	4b47      	ldr	r3, [pc, #284]	@ (800579c <update_homing_sequence+0x26c>)
 8005680:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005684:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005688:	484d      	ldr	r0, [pc, #308]	@ (80057c0 <update_homing_sequence+0x290>)
 800568a:	f7fc f905 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800568e:	eef0 7a40 	vmov.f32	s15, s0
 8005692:	4b42      	ldr	r3, [pc, #264]	@ (800579c <update_homing_sequence+0x26c>)
 8005694:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005698:	4b4a      	ldr	r3, [pc, #296]	@ (80057c4 <update_homing_sequence+0x294>)
 800569a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800569e:	4b4a      	ldr	r3, [pc, #296]	@ (80057c8 <update_homing_sequence+0x298>)
 80056a0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80056a4:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 80057cc <update_homing_sequence+0x29c>
 80056a8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80056ac:	eeb0 1a66 	vmov.f32	s2, s13
 80056b0:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80057d0 <update_homing_sequence+0x2a0>
 80056b4:	eeb0 0a47 	vmov.f32	s0, s14
 80056b8:	4846      	ldr	r0, [pc, #280]	@ (80057d4 <update_homing_sequence+0x2a4>)
 80056ba:	f7fc f995 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 80056be:	eef0 7a40 	vmov.f32	s15, s0
 80056c2:	4b36      	ldr	r3, [pc, #216]	@ (800579c <update_homing_sequence+0x26c>)
 80056c4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80056c8:	4b34      	ldr	r3, [pc, #208]	@ (800579c <update_homing_sequence+0x26c>)
 80056ca:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80056ce:	4b33      	ldr	r3, [pc, #204]	@ (800579c <update_homing_sequence+0x26c>)
 80056d0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80056d4:	4b31      	ldr	r3, [pc, #196]	@ (800579c <update_homing_sequence+0x26c>)
 80056d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e2:	4b2e      	ldr	r3, [pc, #184]	@ (800579c <update_homing_sequence+0x26c>)
 80056e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056e8:	4b2c      	ldr	r3, [pc, #176]	@ (800579c <update_homing_sequence+0x26c>)
 80056ea:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80056ee:	4b33      	ldr	r3, [pc, #204]	@ (80057bc <update_homing_sequence+0x28c>)
 80056f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7fb f9e4 	bl	8000ac4 <__aeabi_d2iz>
 80056fc:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80056fe:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <update_homing_sequence+0x28c>)
 8005700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005704:	60ba      	str	r2, [r7, #8]
 8005706:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800570c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005710:	f7fb f9d8 	bl	8000ac4 <__aeabi_d2iz>
 8005714:	4603      	mov	r3, r0
 8005716:	4619      	mov	r1, r3
 8005718:	4620      	mov	r0, r4
 800571a:	eeb0 0a48 	vmov.f32	s0, s16
 800571e:	f7fb fd19 	bl	8001154 <PWM_Satuation>
 8005722:	ee07 0a90 	vmov	s15, r0
 8005726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800572a:	4b1c      	ldr	r3, [pc, #112]	@ (800579c <update_homing_sequence+0x26c>)
 800572c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005730:	4b1e      	ldr	r3, [pc, #120]	@ (80057ac <update_homing_sequence+0x27c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8243 	beq.w	8005bc2 <update_homing_sequence+0x692>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 800573c:	4b17      	ldr	r3, [pc, #92]	@ (800579c <update_homing_sequence+0x26c>)
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005744:	4b16      	ldr	r3, [pc, #88]	@ (80057a0 <update_homing_sequence+0x270>)
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800574c:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <update_homing_sequence+0x274>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005752:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <update_homing_sequence+0x268>)
 8005754:	2204      	movs	r2, #4
 8005756:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <update_homing_sequence+0x27c>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 800575e:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <update_homing_sequence+0x280>)
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005764:	e22d      	b.n	8005bc2 <update_homing_sequence+0x692>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <update_homing_sequence+0x26c>)
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <update_homing_sequence+0x270>)
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <update_homing_sequence+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a09      	ldr	r2, [pc, #36]	@ (80057a4 <update_homing_sequence+0x274>)
 800577e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <update_homing_sequence+0x274>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005788:	f0c0 821d 	bcc.w	8005bc6 <update_homing_sequence+0x696>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 800578c:	4b02      	ldr	r3, [pc, #8]	@ (8005798 <update_homing_sequence+0x268>)
 800578e:	2205      	movs	r2, #5
 8005790:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005792:	e218      	b.n	8005bc6 <update_homing_sequence+0x696>
 8005794:	2000036b 	.word	0x2000036b
 8005798:	2000036a 	.word	0x2000036a
 800579c:	20000280 	.word	0x20000280
 80057a0:	200002c4 	.word	0x200002c4
 80057a4:	20000360 	.word	0x20000360
 80057a8:	48000400 	.word	0x48000400
 80057ac:	20000369 	.word	0x20000369
 80057b0:	20000368 	.word	0x20000368
 80057b4:	437a0000 	.word	0x437a0000
 80057b8:	20000574 	.word	0x20000574
 80057bc:	20000080 	.word	0x20000080
 80057c0:	20000614 	.word	0x20000614
 80057c4:	200004f0 	.word	0x200004f0
 80057c8:	20000494 	.word	0x20000494
 80057cc:	447a0000 	.word	0x447a0000
 80057d0:	00000000 	.word	0x00000000
 80057d4:	20000618 	.word	0x20000618

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80057d8:	4b96      	ldr	r3, [pc, #600]	@ (8005a34 <update_homing_sequence+0x504>)
 80057da:	edd3 7a07 	vldr	s15, [r3, #28]
 80057de:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005a38 <update_homing_sequence+0x508>
 80057e2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 80057e6:	4b93      	ldr	r3, [pc, #588]	@ (8005a34 <update_homing_sequence+0x504>)
 80057e8:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80057ec:	4b91      	ldr	r3, [pc, #580]	@ (8005a34 <update_homing_sequence+0x504>)
 80057ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80057f2:	eeb0 0a67 	vmov.f32	s0, s15
 80057f6:	4891      	ldr	r0, [pc, #580]	@ (8005a3c <update_homing_sequence+0x50c>)
 80057f8:	f7fb fd0e 	bl	8001218 <PID_CONTROLLER_Compute>
 80057fc:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005800:	4b8f      	ldr	r3, [pc, #572]	@ (8005a40 <update_homing_sequence+0x510>)
 8005802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f7fb f95b 	bl	8000ac4 <__aeabi_d2iz>
 800580e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005810:	4b8b      	ldr	r3, [pc, #556]	@ (8005a40 <update_homing_sequence+0x510>)
 8005812:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005816:	603a      	str	r2, [r7, #0]
 8005818:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800581c:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 800581e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005822:	f7fb f94f 	bl	8000ac4 <__aeabi_d2iz>
 8005826:	4603      	mov	r3, r0
 8005828:	4619      	mov	r1, r3
 800582a:	4620      	mov	r0, r4
 800582c:	eeb0 0a48 	vmov.f32	s0, s16
 8005830:	f7fb fc90 	bl	8001154 <PWM_Satuation>
 8005834:	ee07 0a90 	vmov	s15, r0
 8005838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800583c:	4b7d      	ldr	r3, [pc, #500]	@ (8005a34 <update_homing_sequence+0x504>)
 800583e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005842:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005846:	487f      	ldr	r0, [pc, #508]	@ (8005a44 <update_homing_sequence+0x514>)
 8005848:	f7fc f826 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800584c:	eef0 7a40 	vmov.f32	s15, s0
 8005850:	4b78      	ldr	r3, [pc, #480]	@ (8005a34 <update_homing_sequence+0x504>)
 8005852:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005856:	4b7c      	ldr	r3, [pc, #496]	@ (8005a48 <update_homing_sequence+0x518>)
 8005858:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800585c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a4c <update_homing_sequence+0x51c>)
 800585e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005862:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8005a50 <update_homing_sequence+0x520>
 8005866:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800586a:	eeb0 1a66 	vmov.f32	s2, s13
 800586e:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005a54 <update_homing_sequence+0x524>
 8005872:	eeb0 0a47 	vmov.f32	s0, s14
 8005876:	4878      	ldr	r0, [pc, #480]	@ (8005a58 <update_homing_sequence+0x528>)
 8005878:	f7fc f8b6 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 800587c:	eef0 7a40 	vmov.f32	s15, s0
 8005880:	4b6c      	ldr	r3, [pc, #432]	@ (8005a34 <update_homing_sequence+0x504>)
 8005882:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005886:	4b6b      	ldr	r3, [pc, #428]	@ (8005a34 <update_homing_sequence+0x504>)
 8005888:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800588c:	4b69      	ldr	r3, [pc, #420]	@ (8005a34 <update_homing_sequence+0x504>)
 800588e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005892:	4b68      	ldr	r3, [pc, #416]	@ (8005a34 <update_homing_sequence+0x504>)
 8005894:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a0:	4b64      	ldr	r3, [pc, #400]	@ (8005a34 <update_homing_sequence+0x504>)
 80058a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058a6:	4b63      	ldr	r3, [pc, #396]	@ (8005a34 <update_homing_sequence+0x504>)
 80058a8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80058ac:	4b64      	ldr	r3, [pc, #400]	@ (8005a40 <update_homing_sequence+0x510>)
 80058ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fb f905 	bl	8000ac4 <__aeabi_d2iz>
 80058ba:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80058bc:	4b60      	ldr	r3, [pc, #384]	@ (8005a40 <update_homing_sequence+0x510>)
 80058be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80058c2:	4692      	mov	sl, r2
 80058c4:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	f7fb f8fa 	bl	8000ac4 <__aeabi_d2iz>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4619      	mov	r1, r3
 80058d4:	4620      	mov	r0, r4
 80058d6:	eeb0 0a48 	vmov.f32	s0, s16
 80058da:	f7fb fc3b 	bl	8001154 <PWM_Satuation>
 80058de:	ee07 0a90 	vmov	s15, r0
 80058e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e6:	4b53      	ldr	r3, [pc, #332]	@ (8005a34 <update_homing_sequence+0x504>)
 80058e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80058ec:	4b5b      	ldr	r3, [pc, #364]	@ (8005a5c <update_homing_sequence+0x52c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8169 	beq.w	8005bca <update_homing_sequence+0x69a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80058f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005a34 <update_homing_sequence+0x504>)
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005900:	4b57      	ldr	r3, [pc, #348]	@ (8005a60 <update_homing_sequence+0x530>)
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005908:	4b56      	ldr	r3, [pc, #344]	@ (8005a64 <update_homing_sequence+0x534>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 800590e:	4b56      	ldr	r3, [pc, #344]	@ (8005a68 <update_homing_sequence+0x538>)
 8005910:	2206      	movs	r2, #6
 8005912:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005914:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <update_homing_sequence+0x52c>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
		}
		break;
 800591a:	e156      	b.n	8005bca <update_homing_sequence+0x69a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 800591c:	4b45      	ldr	r3, [pc, #276]	@ (8005a34 <update_homing_sequence+0x504>)
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005924:	4b4e      	ldr	r3, [pc, #312]	@ (8005a60 <update_homing_sequence+0x530>)
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800592c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a64 <update_homing_sequence+0x534>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a4c      	ldr	r2, [pc, #304]	@ (8005a64 <update_homing_sequence+0x534>)
 8005934:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005936:	4b4b      	ldr	r3, [pc, #300]	@ (8005a64 <update_homing_sequence+0x534>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800593e:	f0c0 8146 	bcc.w	8005bce <update_homing_sequence+0x69e>
			if (first_startup) {
 8005942:	4b4a      	ldr	r3, [pc, #296]	@ (8005a6c <update_homing_sequence+0x53c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01d      	beq.n	8005986 <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800594a:	2140      	movs	r1, #64	@ 0x40
 800594c:	4848      	ldr	r0, [pc, #288]	@ (8005a70 <update_homing_sequence+0x540>)
 800594e:	f006 fc69 	bl	800c224 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005964:	4b3f      	ldr	r3, [pc, #252]	@ (8005a64 <update_homing_sequence+0x534>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 800596a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a68 <update_homing_sequence+0x538>)
 800596c:	220a      	movs	r2, #10
 800596e:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005970:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <update_homing_sequence+0x544>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005976:	e12a      	b.n	8005bce <update_homing_sequence+0x69e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005978:	4b3b      	ldr	r3, [pc, #236]	@ (8005a68 <update_homing_sequence+0x538>)
 800597a:	2209      	movs	r2, #9
 800597c:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 800597e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a74 <update_homing_sequence+0x544>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
		break;
 8005984:	e123      	b.n	8005bce <update_homing_sequence+0x69e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <update_homing_sequence+0x538>)
 8005988:	2207      	movs	r2, #7
 800598a:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 800598c:	4b3a      	ldr	r3, [pc, #232]	@ (8005a78 <update_homing_sequence+0x548>)
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
		break;
 8005992:	e11c      	b.n	8005bce <update_homing_sequence+0x69e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005994:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <update_homing_sequence+0x548>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f083 0301 	eor.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 80059a2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <update_homing_sequence+0x51c>)
 80059a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a6:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 80059a8:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005a54 <update_homing_sequence+0x524>
 80059ac:	ed97 0a08 	vldr	s0, [r7, #32]
 80059b0:	f000 fa16 	bl	8005de0 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 80059b4:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <update_homing_sequence+0x548>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 80059ba:	4b30      	ldr	r3, [pc, #192]	@ (8005a7c <update_homing_sequence+0x54c>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8107 	bne.w	8005bd2 <update_homing_sequence+0x6a2>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 80059c4:	4b27      	ldr	r3, [pc, #156]	@ (8005a64 <update_homing_sequence+0x534>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 80059ca:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <update_homing_sequence+0x538>)
 80059cc:	2208      	movs	r2, #8
 80059ce:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 80059d0:	4b28      	ldr	r3, [pc, #160]	@ (8005a74 <update_homing_sequence+0x544>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 80059d6:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <update_homing_sequence+0x548>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
		}
		break;
 80059dc:	e0f9      	b.n	8005bd2 <update_homing_sequence+0x6a2>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 80059de:	4b21      	ldr	r3, [pc, #132]	@ (8005a64 <update_homing_sequence+0x534>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <update_homing_sequence+0x534>)
 80059e6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80059e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a64 <update_homing_sequence+0x534>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80059f0:	f0c0 80f1 	bcc.w	8005bd6 <update_homing_sequence+0x6a6>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80059f4:	2140      	movs	r1, #64	@ 0x40
 80059f6:	481e      	ldr	r0, [pc, #120]	@ (8005a70 <update_homing_sequence+0x540>)
 80059f8:	f006 fc14 	bl	800c224 <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <update_homing_sequence+0x534>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <update_homing_sequence+0x538>)
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <update_homing_sequence+0x544>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005a24:	e0d7      	b.n	8005bd6 <update_homing_sequence+0x6a6>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <update_homing_sequence+0x538>)
 8005a28:	2209      	movs	r2, #9
 8005a2a:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <update_homing_sequence+0x544>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
		break;
 8005a32:	e0d0      	b.n	8005bd6 <update_homing_sequence+0x6a6>
 8005a34:	20000280 	.word	0x20000280
 8005a38:	c37a0000 	.word	0xc37a0000
 8005a3c:	20000574 	.word	0x20000574
 8005a40:	20000080 	.word	0x20000080
 8005a44:	20000614 	.word	0x20000614
 8005a48:	200004f0 	.word	0x200004f0
 8005a4c:	20000494 	.word	0x20000494
 8005a50:	447a0000 	.word	0x447a0000
 8005a54:	00000000 	.word	0x00000000
 8005a58:	20000618 	.word	0x20000618
 8005a5c:	20000368 	.word	0x20000368
 8005a60:	200002c4 	.word	0x200002c4
 8005a64:	20000360 	.word	0x20000360
 8005a68:	2000036a 	.word	0x2000036a
 8005a6c:	20000133 	.word	0x20000133
 8005a70:	48000400 	.word	0x48000400
 8005a74:	20000364 	.word	0x20000364
 8005a78:	20000376 	.word	0x20000376
 8005a7c:	20000308 	.word	0x20000308

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005a80:	4b5a      	ldr	r3, [pc, #360]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a82:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a86:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005a8e:	4b57      	ldr	r3, [pc, #348]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a90:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005a94:	4b55      	ldr	r3, [pc, #340]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a96:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9e:	4854      	ldr	r0, [pc, #336]	@ (8005bf0 <update_homing_sequence+0x6c0>)
 8005aa0:	f7fb fbba 	bl	8001218 <PID_CONTROLLER_Compute>
 8005aa4:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005aa8:	4b52      	ldr	r3, [pc, #328]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005aaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fb f807 	bl	8000ac4 <__aeabi_d2iz>
 8005ab6:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005aba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005abe:	4690      	mov	r8, r2
 8005ac0:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fa fffc 	bl	8000ac4 <__aeabi_d2iz>
 8005acc:	4603      	mov	r3, r0
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ad6:	f7fb fb3d 	bl	8001154 <PWM_Satuation>
 8005ada:	ee07 0a90 	vmov	s15, r0
 8005ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae2:	4b42      	ldr	r3, [pc, #264]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005ae4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005ae8:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8005aec:	4842      	ldr	r0, [pc, #264]	@ (8005bf8 <update_homing_sequence+0x6c8>)
 8005aee:	f7fb fd53 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005af2:	eef0 7a40 	vmov.f32	s15, s0
 8005af6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005af8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8005afc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	62da      	str	r2, [r3, #44]	@ 0x2c

	    revolute_axis.command_pos += revolute_axis.ffd;
 8005b04:	4b39      	ldr	r3, [pc, #228]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b06:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005b0a:	4b38      	ldr	r3, [pc, #224]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b0c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b14:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b16:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b1a:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b1c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005b20:	4b34      	ldr	r3, [pc, #208]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005b22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f7fa ffcb 	bl	8000ac4 <__aeabi_d2iz>
 8005b2e:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005b30:	4b30      	ldr	r3, [pc, #192]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005b32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b36:	4614      	mov	r4, r2
 8005b38:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa ffc0 	bl	8000ac4 <__aeabi_d2iz>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4619      	mov	r1, r3
 8005b48:	4630      	mov	r0, r6
 8005b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8005b4e:	f7fb fb01 	bl	8001154 <PWM_Satuation>
 8005b52:	ee07 0a90 	vmov	s15, r0
 8005b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b5c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005b60:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <update_homing_sequence+0x6cc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d038      	beq.n	8005bda <update_homing_sequence+0x6aa>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005b68:	4b25      	ldr	r3, [pc, #148]	@ (8005c00 <update_homing_sequence+0x6d0>)
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005b70:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005b78:	4b22      	ldr	r3, [pc, #136]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005b7e:	4b22      	ldr	r3, [pc, #136]	@ (8005c08 <update_homing_sequence+0x6d8>)
 8005b80:	220a      	movs	r2, #10
 8005b82:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b84:	e029      	b.n	8005bda <update_homing_sequence+0x6aa>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <update_homing_sequence+0x6d0>)
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b8e:	4b17      	ldr	r3, [pc, #92]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a19      	ldr	r2, [pc, #100]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b9e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ba0:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005ba8:	d319      	bcc.n	8005bde <update_homing_sequence+0x6ae>
			homing_state = HOMING_COMPLETE;
 8005baa:	4b17      	ldr	r3, [pc, #92]	@ (8005c08 <update_homing_sequence+0x6d8>)
 8005bac:	220b      	movs	r2, #11
 8005bae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bb0:	e015      	b.n	8005bde <update_homing_sequence+0x6ae>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005bb2:	f7ff fb0f 	bl	80051d4 <__NVIC_SystemReset>
		return;
 8005bb6:	bf00      	nop
 8005bb8:	e012      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005bba:	bf00      	nop
 8005bbc:	e010      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bbe:	bf00      	nop
 8005bc0:	e00e      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bc2:	bf00      	nop
 8005bc4:	e00c      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bc6:	bf00      	nop
 8005bc8:	e00a      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bca:	bf00      	nop
 8005bcc:	e008      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bce:	bf00      	nop
 8005bd0:	e006      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bd2:	bf00      	nop
 8005bd4:	e004      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bde:	bf00      	nop
	}
}
 8005be0:	372c      	adds	r7, #44	@ 0x2c
 8005be2:	46bd      	mov	sp, r7
 8005be4:	ecbd 8b02 	vpop	{d8}
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	200002c4 	.word	0x200002c4
 8005bf0:	200005c4 	.word	0x200005c4
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	20000620 	.word	0x20000620
 8005bfc:	20000364 	.word	0x20000364
 8005c00:	20000280 	.word	0x20000280
 8005c04:	20000360 	.word	0x20000360
 8005c08:	2000036a 	.word	0x2000036a

08005c0c <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005c16:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005c54 <normalize_angle+0x48>
 8005c1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c1e:	f00c f953 	bl	8011ec8 <fmodf>
 8005c22:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d507      	bpl.n	8005c44 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c38:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c54 <normalize_angle+0x48>
 8005c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c40:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	ee07 3a90 	vmov	s15, r3
}
 8005c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40c90fdb 	.word	0x40c90fdb

08005c58 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c62:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c70:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7c:	d508      	bpl.n	8005c90 <calculate_movement_deg+0x38>
 8005c7e:	edd7 7a00 	vldr	s15, [r7]
 8005c82:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	d411      	bmi.n	8005cb4 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c94:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	db33      	blt.n	8005d0a <calculate_movement_deg+0xb2>
 8005ca2:	edd7 7a00 	vldr	s15, [r7]
 8005ca6:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb2:	db2a      	blt.n	8005d0a <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005cb4:	ed97 7a00 	vldr	s14, [r7]
 8005cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	dd07      	ble.n	8005ce6 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cda:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ce2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cea:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005ddc <calculate_movement_deg+0x184>
 8005cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	d562      	bpl.n	8005dbe <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cfc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d04:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005d08:	e059      	b.n	8005dbe <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d0e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	d52a      	bpl.n	8005d72 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005d1c:	edd7 7a00 	vldr	s15, [r7]
 8005d20:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	d50e      	bpl.n	8005d54 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8005d36:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d3a:	edd7 7a00 	vldr	s15, [r7]
 8005d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d4a:	eef1 7a67 	vneg.f32	s15, s15
 8005d4e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d52:	e034      	b.n	8005dbe <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8005d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d58:	edd7 7a00 	vldr	s15, [r7]
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d68:	eef1 7a67 	vneg.f32	s15, s15
 8005d6c:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d70:	e025      	b.n	8005dbe <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8005d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d76:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d7e:	ed97 7a00 	vldr	s14, [r7]
 8005d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d50c      	bpl.n	8005da6 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005d8c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d98:	ed97 7a00 	vldr	s14, [r7]
 8005d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da0:	edc7 7a03 	vstr	s15, [r7, #12]
 8005da4:	e00b      	b.n	8005dbe <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8005da6:	ed97 7a00 	vldr	s14, [r7]
 8005daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dba:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	ee07 3a90 	vmov	s15, r3
}
 8005dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	43340000 	.word	0x43340000
 8005dd8:	43b40000 	.word	0x43b40000
 8005ddc:	c3340000 	.word	0xc3340000

08005de0 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm, float revolute_target_deg) {
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	ed2d 8b02 	vpush	{d8}
 8005de6:	b08b      	sub	sp, #44	@ 0x2c
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dee:	edc7 0a00 	vstr	s1, [r7]
    bool allow_during_homing = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005df2:	4b85      	ldr	r3, [pc, #532]	@ (8006008 <start_combined_trajectory+0x228>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <start_combined_trajectory+0x26>
 8005dfa:	4b84      	ldr	r3, [pc, #528]	@ (800600c <start_combined_trajectory+0x22c>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d101      	bne.n	8005e06 <start_combined_trajectory+0x26>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <start_combined_trajectory+0x28>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8005e18:	f000 ffa2 	bl	8006d60 <is_emergency_active>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80eb 	bne.w	8005ffa <start_combined_trajectory+0x21a>
 8005e24:	4b78      	ldr	r3, [pc, #480]	@ (8006008 <start_combined_trajectory+0x228>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <start_combined_trajectory+0x5c>
 8005e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 80df 	bne.w	8005ffa <start_combined_trajectory+0x21a>
        return;
    }

    float pris_current = prismatic_encoder.mm;
 8005e3c:	4b74      	ldr	r3, [pc, #464]	@ (8006010 <start_combined_trajectory+0x230>)
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e40:	623b      	str	r3, [r7, #32]
    float rev_current = revolute_encoder.rads;
 8005e42:	4b74      	ldr	r3, [pc, #464]	@ (8006014 <start_combined_trajectory+0x234>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	61fb      	str	r3, [r7, #28]

    prisEva.t = 0.0f;
 8005e48:	4b73      	ldr	r3, [pc, #460]	@ (8006018 <start_combined_trajectory+0x238>)
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	60da      	str	r2, [r3, #12]
    prisEva.isFinised = false;
 8005e50:	4b71      	ldr	r3, [pc, #452]	@ (8006018 <start_combined_trajectory+0x238>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	741a      	strb	r2, [r3, #16]
    revEva.t = 0.0f;
 8005e56:	4b71      	ldr	r3, [pc, #452]	@ (800601c <start_combined_trajectory+0x23c>)
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
    revEva.isFinised = false;
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800601c <start_combined_trajectory+0x23c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	741a      	strb	r2, [r3, #16]

    prismatic_axis.initial_pos = pris_current;
 8005e64:	4a6e      	ldr	r2, [pc, #440]	@ (8006020 <start_combined_trajectory+0x240>)
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	60d3      	str	r3, [r2, #12]
    revolute_axis.initial_pos = rev_current;
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <start_combined_trajectory+0x244>)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	60d3      	str	r3, [r2, #12]

    prismatic_axis.target_pos = fminf(fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);
 8005e70:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8006028 <start_combined_trajectory+0x248>
 8005e74:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e78:	f00c f8ee 	bl	8012058 <fmaxf>
 8005e7c:	eef0 7a40 	vmov.f32	s15, s0
 8005e80:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800602c <start_combined_trajectory+0x24c>
 8005e84:	eeb0 0a67 	vmov.f32	s0, s15
 8005e88:	f00c f903 	bl	8012092 <fminf>
 8005e8c:	eef0 7a40 	vmov.f32	s15, s0
 8005e90:	4b63      	ldr	r3, [pc, #396]	@ (8006020 <start_combined_trajectory+0x240>)
 8005e92:	edc3 7a04 	vstr	s15, [r3, #16]

    float normalized_current = normalize_angle(rev_current);
 8005e96:	ed97 0a07 	vldr	s0, [r7, #28]
 8005e9a:	f7ff feb7 	bl	8005c0c <normalize_angle>
 8005e9e:	ed87 0a06 	vstr	s0, [r7, #24]
    float current_deg = normalized_current * 180.0f / PI;
 8005ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ea6:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8006030 <start_combined_trajectory+0x250>
 8005eaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005eae:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8006034 <start_combined_trajectory+0x254>
 8005eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eb6:	edc7 7a05 	vstr	s15, [r7, #20]
    movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8005eba:	edd7 0a00 	vldr	s1, [r7]
 8005ebe:	ed97 0a05 	vldr	s0, [r7, #20]
 8005ec2:	f7ff fec9 	bl	8005c58 <calculate_movement_deg>
 8005ec6:	eef0 7a40 	vmov.f32	s15, s0
 8005eca:	4b5b      	ldr	r3, [pc, #364]	@ (8006038 <start_combined_trajectory+0x258>)
 8005ecc:	edc3 7a00 	vstr	s15, [r3]
    float movement_rad = movement_deg * PI / 180.0f;
 8005ed0:	4b59      	ldr	r3, [pc, #356]	@ (8006038 <start_combined_trajectory+0x258>)
 8005ed2:	edd3 7a00 	vldr	s15, [r3]
 8005ed6:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8006034 <start_combined_trajectory+0x254>
 8005eda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ede:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8006030 <start_combined_trajectory+0x250>
 8005ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ee6:	edc7 7a04 	vstr	s15, [r7, #16]
    revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8005eea:	4b4e      	ldr	r3, [pc, #312]	@ (8006024 <start_combined_trajectory+0x244>)
 8005eec:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ef0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8006024 <start_combined_trajectory+0x244>)
 8005efa:	edc3 7a04 	vstr	s15, [r3, #16]

    // Check if we're in HOMING_REV_TO_ZERO_DEG mode
    bool is_homing_zero_deg = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005efe:	4b42      	ldr	r3, [pc, #264]	@ (8006008 <start_combined_trajectory+0x228>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <start_combined_trajectory+0x132>
 8005f06:	4b41      	ldr	r3, [pc, #260]	@ (800600c <start_combined_trajectory+0x22c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b07      	cmp	r3, #7
 8005f0c:	d101      	bne.n	8005f12 <start_combined_trajectory+0x132>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <start_combined_trajectory+0x134>
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]

    if (is_homing_zero_deg) {
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d038      	beq.n	8005f96 <start_combined_trajectory+0x1b6>
        // HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory, skip prismatic

        // Don't generate prismatic trajectory at all
        prismatic_axis.trajectory_active = false;
 8005f24:	4b3e      	ldr	r3, [pc, #248]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        prismatic_axis.position = pris_current;  // Hold current position
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	6013      	str	r3, [r2, #0]
        prismatic_axis.velocity = 0.0f;
 8005f32:	4b3b      	ldr	r3, [pc, #236]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]

        // Only generate revolute trajectory
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f3c:	ed93 8a03 	vldr	s16, [r3, #12]
 8005f40:	4b38      	ldr	r3, [pc, #224]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f42:	edd3 8a04 	vldr	s17, [r3, #16]
                revolute_axis.target_pos,
                ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005f46:	4b3d      	ldr	r3, [pc, #244]	@ (800603c <start_combined_trajectory+0x25c>)
 8005f48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f7fa fe00 	bl	8000b54 <__aeabi_d2f>
 8005f54:	4604      	mov	r4, r0
                ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005f56:	4b39      	ldr	r3, [pc, #228]	@ (800603c <start_combined_trajectory+0x25c>)
 8005f58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f7fa fdf8 	bl	8000b54 <__aeabi_d2f>
 8005f64:	4603      	mov	r3, r0
 8005f66:	ee01 3a90 	vmov	s3, r3
 8005f6a:	ee01 4a10 	vmov	s2, r4
 8005f6e:	eef0 0a68 	vmov.f32	s1, s17
 8005f72:	eeb0 0a48 	vmov.f32	s0, s16
 8005f76:	4832      	ldr	r0, [pc, #200]	@ (8006040 <start_combined_trajectory+0x260>)
 8005f78:	f7fd ff50 	bl	8003e1c <Trapezoidal_Generator>

        revolute_axis.trajectory_active = false;  // Will be activated later
 8005f7c:	4b29      	ldr	r3, [pc, #164]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Set motion sequence to skip prismatic phase
        plotter_pen_up();
 8005f84:	f002 fe0e 	bl	8008ba4 <plotter_pen_up>
        motion_delay_timer = 0;
 8005f88:	4b2e      	ldr	r3, [pc, #184]	@ (8006044 <start_combined_trajectory+0x264>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;  // Will skip to revolute directly
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8006048 <start_combined_trajectory+0x268>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e032      	b.n	8005ffc <start_combined_trajectory+0x21c>

    } else {
        // NORMAL TRAJECTORY: Generate both prismatic and revolute trajectories

        // Generate prismatic trajectory
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005f96:	4b22      	ldr	r3, [pc, #136]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f98:	ed93 8a03 	vldr	s16, [r3, #12]
 8005f9c:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f9e:	edd3 8a04 	vldr	s17, [r3, #16]
                prismatic_axis.target_pos,
                ZGX45RGG_400RPM_Constant.traject_sd_max,
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <start_combined_trajectory+0x26c>)
 8005fa4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fdd2 	bl	8000b54 <__aeabi_d2f>
 8005fb0:	4604      	mov	r4, r0
                ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8005fb2:	4b26      	ldr	r3, [pc, #152]	@ (800604c <start_combined_trajectory+0x26c>)
 8005fb4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f7fa fdca 	bl	8000b54 <__aeabi_d2f>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	ee01 3a90 	vmov	s3, r3
 8005fc6:	ee01 4a10 	vmov	s2, r4
 8005fca:	eef0 0a68 	vmov.f32	s1, s17
 8005fce:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd2:	481f      	ldr	r0, [pc, #124]	@ (8006050 <start_combined_trajectory+0x270>)
 8005fd4:	f7fd ff22 	bl	8003e1c <Trapezoidal_Generator>

        prismatic_axis.trajectory_active = false;
 8005fd8:	4b11      	ldr	r3, [pc, #68]	@ (8006020 <start_combined_trajectory+0x240>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        revolute_axis.trajectory_active = false;
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <start_combined_trajectory+0x244>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        plotter_pen_up();
 8005fe8:	f002 fddc 	bl	8008ba4 <plotter_pen_up>
        motion_delay_timer = 0;
 8005fec:	4b15      	ldr	r3, [pc, #84]	@ (8006044 <start_combined_trajectory+0x264>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <start_combined_trajectory+0x268>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e000      	b.n	8005ffc <start_combined_trajectory+0x21c>
        return;
 8005ffa:	bf00      	nop
    }
}
 8005ffc:	372c      	adds	r7, #44	@ 0x2c
 8005ffe:	46bd      	mov	sp, r7
 8006000:	ecbd 8b02 	vpop	{d8}
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	2000036b 	.word	0x2000036b
 800600c:	2000036a 	.word	0x2000036a
 8006010:	20000494 	.word	0x20000494
 8006014:	200004f0 	.word	0x200004f0
 8006018:	20000334 	.word	0x20000334
 800601c:	20000348 	.word	0x20000348
 8006020:	20000280 	.word	0x20000280
 8006024:	200002c4 	.word	0x200002c4
 8006028:	00000000 	.word	0x00000000
 800602c:	43960000 	.word	0x43960000
 8006030:	43340000 	.word	0x43340000
 8006034:	40490fdb 	.word	0x40490fdb
 8006038:	20000380 	.word	0x20000380
 800603c:	20000000 	.word	0x20000000
 8006040:	20000320 	.word	0x20000320
 8006044:	20000360 	.word	0x20000360
 8006048:	20000308 	.word	0x20000308
 800604c:	20000080 	.word	0x20000080
 8006050:	2000030c 	.word	0x2000030c

08006054 <update_position_control>:

void update_position_control(void) {
 8006054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006058:	ed2d 8b02 	vpush	{d8}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006060:	4b50      	ldr	r3, [pc, #320]	@ (80061a4 <update_position_control+0x150>)
 8006062:	ed93 7a00 	vldr	s14, [r3]
 8006066:	4b50      	ldr	r3, [pc, #320]	@ (80061a8 <update_position_control+0x154>)
 8006068:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800606c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006070:	4b4c      	ldr	r3, [pc, #304]	@ (80061a4 <update_position_control+0x150>)
 8006072:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 8006076:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <update_position_control+0x150>)
 8006078:	edd3 7a05 	vldr	s15, [r3, #20]
 800607c:	eeb0 0a67 	vmov.f32	s0, s15
 8006080:	484a      	ldr	r0, [pc, #296]	@ (80061ac <update_position_control+0x158>)
 8006082:	f7fb f8c9 	bl	8001218 <PID_CONTROLLER_Compute>
 8006086:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800608a:	4b49      	ldr	r3, [pc, #292]	@ (80061b0 <update_position_control+0x15c>)
 800608c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f7fa fd16 	bl	8000ac4 <__aeabi_d2iz>
 8006098:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800609a:	4b45      	ldr	r3, [pc, #276]	@ (80061b0 <update_position_control+0x15c>)
 800609c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80060a0:	4690      	mov	r8, r2
 80060a2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa fd0b 	bl	8000ac4 <__aeabi_d2iz>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4619      	mov	r1, r3
 80060b2:	4630      	mov	r0, r6
 80060b4:	eeb0 0a48 	vmov.f32	s0, s16
 80060b8:	f7fb f84c 	bl	8001154 <PWM_Satuation>
 80060bc:	ee07 0a90 	vmov	s15, r0
 80060c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c4:	4b37      	ldr	r3, [pc, #220]	@ (80061a4 <update_position_control+0x150>)
 80060c6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80060ca:	4b3a      	ldr	r3, [pc, #232]	@ (80061b4 <update_position_control+0x160>)
 80060cc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80060d0:	eeb0 0a67 	vmov.f32	s0, s15
 80060d4:	f7ff fd9a 	bl	8005c0c <normalize_angle>
 80060d8:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80060dc:	4b36      	ldr	r3, [pc, #216]	@ (80061b8 <update_position_control+0x164>)
 80060de:	ed93 7a00 	vldr	s14, [r3]
 80060e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ea:	4b33      	ldr	r3, [pc, #204]	@ (80061b8 <update_position_control+0x164>)
 80060ec:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80060f0:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <update_position_control+0x164>)
 80060f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80060f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80061bc <update_position_control+0x168>
 80060fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	dd09      	ble.n	8006118 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006104:	4b2c      	ldr	r3, [pc, #176]	@ (80061b8 <update_position_control+0x164>)
 8006106:	edd3 7a05 	vldr	s15, [r3, #20]
 800610a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80061c0 <update_position_control+0x16c>
 800610e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <update_position_control+0x164>)
 8006114:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006118:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <update_position_control+0x164>)
 800611a:	edd3 7a05 	vldr	s15, [r3, #20]
 800611e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80061c4 <update_position_control+0x170>
 8006122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	d509      	bpl.n	8006140 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 800612c:	4b22      	ldr	r3, [pc, #136]	@ (80061b8 <update_position_control+0x164>)
 800612e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006132:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80061c0 <update_position_control+0x16c>
 8006136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800613a:	4b1f      	ldr	r3, [pc, #124]	@ (80061b8 <update_position_control+0x164>)
 800613c:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006140:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <update_position_control+0x164>)
 8006142:	edd3 7a05 	vldr	s15, [r3, #20]
 8006146:	eeb0 0a67 	vmov.f32	s0, s15
 800614a:	481f      	ldr	r0, [pc, #124]	@ (80061c8 <update_position_control+0x174>)
 800614c:	f7fb f864 	bl	8001218 <PID_CONTROLLER_Compute>
 8006150:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <update_position_control+0x178>)
 8006156:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f7fa fcb1 	bl	8000ac4 <__aeabi_d2iz>
 8006162:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006164:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <update_position_control+0x178>)
 8006166:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800616a:	4614      	mov	r4, r2
 800616c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa fca6 	bl	8000ac4 <__aeabi_d2iz>
 8006178:	4603      	mov	r3, r0
 800617a:	4619      	mov	r1, r3
 800617c:	4630      	mov	r0, r6
 800617e:	eeb0 0a48 	vmov.f32	s0, s16
 8006182:	f7fa ffe7 	bl	8001154 <PWM_Satuation>
 8006186:	ee07 0a90 	vmov	s15, r0
 800618a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <update_position_control+0x164>)
 8006190:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	ecbd 8b02 	vpop	{d8}
 800619e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061a2:	bf00      	nop
 80061a4:	20000280 	.word	0x20000280
 80061a8:	20000494 	.word	0x20000494
 80061ac:	2000054c 	.word	0x2000054c
 80061b0:	20000080 	.word	0x20000080
 80061b4:	200004f0 	.word	0x200004f0
 80061b8:	200002c4 	.word	0x200002c4
 80061bc:	40490fdb 	.word	0x40490fdb
 80061c0:	40c90fdb 	.word	0x40c90fdb
 80061c4:	c0490fdb 	.word	0xc0490fdb
 80061c8:	2000059c 	.word	0x2000059c
 80061cc:	20000000 	.word	0x20000000

080061d0 <update_velocity_control>:

void update_velocity_control(void) {
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	ed2d 8b02 	vpush	{d8}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 80061dc:	4b96      	ldr	r3, [pc, #600]	@ (8006438 <update_velocity_control+0x268>)
 80061de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80061e6:	4b94      	ldr	r3, [pc, #592]	@ (8006438 <update_velocity_control+0x268>)
 80061e8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80061ec:	4b92      	ldr	r3, [pc, #584]	@ (8006438 <update_velocity_control+0x268>)
 80061ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f6:	4b90      	ldr	r3, [pc, #576]	@ (8006438 <update_velocity_control+0x268>)
 80061f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80061fc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006200:	4b8d      	ldr	r3, [pc, #564]	@ (8006438 <update_velocity_control+0x268>)
 8006202:	edc3 7a06 	vstr	s15, [r3, #24]
 8006206:	e00a      	b.n	800621e <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006208:	4b8b      	ldr	r3, [pc, #556]	@ (8006438 <update_velocity_control+0x268>)
 800620a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800620e:	4b8a      	ldr	r3, [pc, #552]	@ (8006438 <update_velocity_control+0x268>)
 8006210:	edd3 7a07 	vldr	s15, [r3, #28]
 8006214:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006218:	4b87      	ldr	r3, [pc, #540]	@ (8006438 <update_velocity_control+0x268>)
 800621a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800621e:	4b86      	ldr	r3, [pc, #536]	@ (8006438 <update_velocity_control+0x268>)
 8006220:	edd3 7a06 	vldr	s15, [r3, #24]
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	4884      	ldr	r0, [pc, #528]	@ (800643c <update_velocity_control+0x26c>)
 800622a:	f7fa fff5 	bl	8001218 <PID_CONTROLLER_Compute>
 800622e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006232:	4b83      	ldr	r3, [pc, #524]	@ (8006440 <update_velocity_control+0x270>)
 8006234:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	f7fa fc42 	bl	8000ac4 <__aeabi_d2iz>
 8006240:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006242:	4b7f      	ldr	r3, [pc, #508]	@ (8006440 <update_velocity_control+0x270>)
 8006244:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006248:	603a      	str	r2, [r7, #0]
 800624a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800624e:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006254:	f7fa fc36 	bl	8000ac4 <__aeabi_d2iz>
 8006258:	4603      	mov	r3, r0
 800625a:	4619      	mov	r1, r3
 800625c:	4630      	mov	r0, r6
 800625e:	eeb0 0a48 	vmov.f32	s0, s16
 8006262:	f7fa ff77 	bl	8001154 <PWM_Satuation>
 8006266:	ee07 0a90 	vmov	s15, r0
 800626a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800626e:	4b72      	ldr	r3, [pc, #456]	@ (8006438 <update_velocity_control+0x268>)
 8006270:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006274:	4b70      	ldr	r3, [pc, #448]	@ (8006438 <update_velocity_control+0x268>)
 8006276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02c      	beq.n	80062d8 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 800627e:	4b6e      	ldr	r3, [pc, #440]	@ (8006438 <update_velocity_control+0x268>)
 8006280:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006284:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006444 <update_velocity_control+0x274>
 8006288:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800628c:	eeb0 0a47 	vmov.f32	s0, s14
 8006290:	486d      	ldr	r0, [pc, #436]	@ (8006448 <update_velocity_control+0x278>)
 8006292:	f7fb fb01 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8006296:	eef0 7a40 	vmov.f32	s15, s0
 800629a:	4b67      	ldr	r3, [pc, #412]	@ (8006438 <update_velocity_control+0x268>)
 800629c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062a0:	4b6a      	ldr	r3, [pc, #424]	@ (800644c <update_velocity_control+0x27c>)
 80062a2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80062a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006450 <update_velocity_control+0x280>)
 80062a8:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80062ac:	4b69      	ldr	r3, [pc, #420]	@ (8006454 <update_velocity_control+0x284>)
 80062ae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062b2:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006444 <update_velocity_control+0x274>
 80062b6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80062ba:	eeb0 1a46 	vmov.f32	s2, s12
 80062be:	eef0 0a66 	vmov.f32	s1, s13
 80062c2:	eeb0 0a47 	vmov.f32	s0, s14
 80062c6:	4864      	ldr	r0, [pc, #400]	@ (8006458 <update_velocity_control+0x288>)
 80062c8:	f7fb fb8e 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 80062cc:	eef0 7a40 	vmov.f32	s15, s0
 80062d0:	4b59      	ldr	r3, [pc, #356]	@ (8006438 <update_velocity_control+0x268>)
 80062d2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80062d6:	e007      	b.n	80062e8 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80062d8:	4b57      	ldr	r3, [pc, #348]	@ (8006438 <update_velocity_control+0x268>)
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80062e0:	4b55      	ldr	r3, [pc, #340]	@ (8006438 <update_velocity_control+0x268>)
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80062e8:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <update_velocity_control+0x268>)
 80062ea:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80062ee:	4b52      	ldr	r3, [pc, #328]	@ (8006438 <update_velocity_control+0x268>)
 80062f0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80062f4:	4b50      	ldr	r3, [pc, #320]	@ (8006438 <update_velocity_control+0x268>)
 80062f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80062fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006302:	4b4d      	ldr	r3, [pc, #308]	@ (8006438 <update_velocity_control+0x268>)
 8006304:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006308:	4b4b      	ldr	r3, [pc, #300]	@ (8006438 <update_velocity_control+0x268>)
 800630a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800630e:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <update_velocity_control+0x270>)
 8006310:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	f7fa fbd4 	bl	8000ac4 <__aeabi_d2iz>
 800631c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800631e:	4b48      	ldr	r3, [pc, #288]	@ (8006440 <update_velocity_control+0x270>)
 8006320:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006324:	4692      	mov	sl, r2
 8006326:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa fbc9 	bl	8000ac4 <__aeabi_d2iz>
 8006332:	4603      	mov	r3, r0
 8006334:	4619      	mov	r1, r3
 8006336:	4630      	mov	r0, r6
 8006338:	eeb0 0a48 	vmov.f32	s0, s16
 800633c:	f7fa ff0a 	bl	8001154 <PWM_Satuation>
 8006340:	ee07 0a90 	vmov	s15, r0
 8006344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006348:	4b3b      	ldr	r3, [pc, #236]	@ (8006438 <update_velocity_control+0x268>)
 800634a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 800634e:	4b40      	ldr	r3, [pc, #256]	@ (8006450 <update_velocity_control+0x280>)
 8006350:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006358:	4b3d      	ldr	r3, [pc, #244]	@ (8006450 <update_velocity_control+0x280>)
 800635a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800635e:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <update_velocity_control+0x280>)
 8006360:	edd3 7a01 	vldr	s15, [r3, #4]
 8006364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006368:	4b39      	ldr	r3, [pc, #228]	@ (8006450 <update_velocity_control+0x280>)
 800636a:	edd3 7a07 	vldr	s15, [r3, #28]
 800636e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <update_velocity_control+0x280>)
 8006374:	edc3 7a06 	vstr	s15, [r3, #24]
 8006378:	e00a      	b.n	8006390 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 800637a:	4b35      	ldr	r3, [pc, #212]	@ (8006450 <update_velocity_control+0x280>)
 800637c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006380:	4b33      	ldr	r3, [pc, #204]	@ (8006450 <update_velocity_control+0x280>)
 8006382:	edd3 7a07 	vldr	s15, [r3, #28]
 8006386:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800638a:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <update_velocity_control+0x280>)
 800638c:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006390:	4b2f      	ldr	r3, [pc, #188]	@ (8006450 <update_velocity_control+0x280>)
 8006392:	edd3 7a06 	vldr	s15, [r3, #24]
 8006396:	eeb0 0a67 	vmov.f32	s0, s15
 800639a:	4830      	ldr	r0, [pc, #192]	@ (800645c <update_velocity_control+0x28c>)
 800639c:	f7fa ff3c 	bl	8001218 <PID_CONTROLLER_Compute>
 80063a0:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80063a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006460 <update_velocity_control+0x290>)
 80063a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fa fb89 	bl	8000ac4 <__aeabi_d2iz>
 80063b2:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80063b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006460 <update_velocity_control+0x290>)
 80063b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80063ba:	4690      	mov	r8, r2
 80063bc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	f7fa fb7e 	bl	8000ac4 <__aeabi_d2iz>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4619      	mov	r1, r3
 80063cc:	4630      	mov	r0, r6
 80063ce:	eeb0 0a48 	vmov.f32	s0, s16
 80063d2:	f7fa febf 	bl	8001154 <PWM_Satuation>
 80063d6:	ee07 0a90 	vmov	s15, r0
 80063da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063de:	4b1c      	ldr	r3, [pc, #112]	@ (8006450 <update_velocity_control+0x280>)
 80063e0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80063e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <update_velocity_control+0x280>)
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03e      	beq.n	800646c <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80063ee:	4b18      	ldr	r3, [pc, #96]	@ (8006450 <update_velocity_control+0x280>)
 80063f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80063f4:	eeb0 0a67 	vmov.f32	s0, s15
 80063f8:	481a      	ldr	r0, [pc, #104]	@ (8006464 <update_velocity_control+0x294>)
 80063fa:	f7fb f8cd 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80063fe:	eef0 7a40 	vmov.f32	s15, s0
 8006402:	4b13      	ldr	r3, [pc, #76]	@ (8006450 <update_velocity_control+0x280>)
 8006404:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006408:	4b10      	ldr	r3, [pc, #64]	@ (800644c <update_velocity_control+0x27c>)
 800640a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800640e:	4b11      	ldr	r3, [pc, #68]	@ (8006454 <update_velocity_control+0x284>)
 8006410:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006414:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006444 <update_velocity_control+0x274>
 8006418:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800641c:	eef0 0a66 	vmov.f32	s1, s13
 8006420:	eeb0 0a47 	vmov.f32	s0, s14
 8006424:	4810      	ldr	r0, [pc, #64]	@ (8006468 <update_velocity_control+0x298>)
 8006426:	f7fb f94a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800642a:	eef0 7a40 	vmov.f32	s15, s0
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <update_velocity_control+0x280>)
 8006430:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006434:	e034      	b.n	80064a0 <update_velocity_control+0x2d0>
 8006436:	bf00      	nop
 8006438:	20000280 	.word	0x20000280
 800643c:	20000574 	.word	0x20000574
 8006440:	20000080 	.word	0x20000080
 8006444:	447a0000 	.word	0x447a0000
 8006448:	20000614 	.word	0x20000614
 800644c:	200004f0 	.word	0x200004f0
 8006450:	200002c4 	.word	0x200002c4
 8006454:	20000494 	.word	0x20000494
 8006458:	20000618 	.word	0x20000618
 800645c:	200005c4 	.word	0x200005c4
 8006460:	20000000 	.word	0x20000000
 8006464:	20000620 	.word	0x20000620
 8006468:	20000624 	.word	0x20000624
	} else {
		revolute_axis.ffd = 0.0f;
 800646c:	4b54      	ldr	r3, [pc, #336]	@ (80065c0 <update_velocity_control+0x3f0>)
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006474:	4b53      	ldr	r3, [pc, #332]	@ (80065c4 <update_velocity_control+0x3f4>)
 8006476:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800647a:	4b53      	ldr	r3, [pc, #332]	@ (80065c8 <update_velocity_control+0x3f8>)
 800647c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006480:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80065cc <update_velocity_control+0x3fc>
 8006484:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006488:	eef0 0a66 	vmov.f32	s1, s13
 800648c:	eeb0 0a47 	vmov.f32	s0, s14
 8006490:	484f      	ldr	r0, [pc, #316]	@ (80065d0 <update_velocity_control+0x400>)
 8006492:	f7fb f914 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006496:	eef0 7a40 	vmov.f32	s15, s0
 800649a:	4b49      	ldr	r3, [pc, #292]	@ (80065c0 <update_velocity_control+0x3f0>)
 800649c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80064a0:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <update_velocity_control+0x404>)
 80064a2:	edd3 7a00 	vldr	s15, [r3]
 80064a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80065d8 <update_velocity_control+0x408>
 80064aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064b0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80064b4:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80065dc <update_velocity_control+0x40c>
 80064b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c0:	4b44      	ldr	r3, [pc, #272]	@ (80065d4 <update_velocity_control+0x404>)
 80064c2:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 80064c6:	4b46      	ldr	r3, [pc, #280]	@ (80065e0 <update_velocity_control+0x410>)
 80064c8:	edd3 7a00 	vldr	s15, [r3]
 80064cc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80065d8 <update_velocity_control+0x408>
 80064d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064d4:	4b3a      	ldr	r3, [pc, #232]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80064da:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80065dc <update_velocity_control+0x40c>
 80064de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e6:	4b3e      	ldr	r3, [pc, #248]	@ (80065e0 <update_velocity_control+0x410>)
 80064e8:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 80064ec:	4b34      	ldr	r3, [pc, #208]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7f9 fff5 	bl	80004e0 <__aeabi_f2d>
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <update_velocity_control+0x410>)
 80064fc:	ed93 7a00 	vldr	s14, [r3]
 8006500:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <update_velocity_control+0x404>)
 8006502:	edd3 7a00 	vldr	s15, [r3]
 8006506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650a:	ee17 0a90 	vmov	r0, s15
 800650e:	f7f9 ffe7 	bl	80004e0 <__aeabi_f2d>
 8006512:	a329      	add	r3, pc, #164	@ (adr r3, 80065b8 <update_velocity_control+0x3e8>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f83a 	bl	8000590 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7f9 fe7e 	bl	8000224 <__adddf3>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	f7fa fb10 	bl	8000b54 <__aeabi_d2f>
 8006534:	4603      	mov	r3, r0
 8006536:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <update_velocity_control+0x3f0>)
 8006538:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800653a:	4b21      	ldr	r3, [pc, #132]	@ (80065c0 <update_velocity_control+0x3f0>)
 800653c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <update_velocity_control+0x414>)
 8006542:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	f7fa fabb 	bl	8000ac4 <__aeabi_d2iz>
 800654e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006550:	4b24      	ldr	r3, [pc, #144]	@ (80065e4 <update_velocity_control+0x414>)
 8006552:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006556:	4614      	mov	r4, r2
 8006558:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7fa fab0 	bl	8000ac4 <__aeabi_d2iz>
 8006564:	4603      	mov	r3, r0
 8006566:	4619      	mov	r1, r3
 8006568:	4630      	mov	r0, r6
 800656a:	eeb0 0a48 	vmov.f32	s0, s16
 800656e:	f7fa fdf1 	bl	8001154 <PWM_Satuation>
 8006572:	ee07 0a90 	vmov	s15, r0
 8006576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657a:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <update_velocity_control+0x3f0>)
 800657c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006580:	4b19      	ldr	r3, [pc, #100]	@ (80065e8 <update_velocity_control+0x418>)
 8006582:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006586:	eef0 0a67 	vmov.f32	s1, s15
 800658a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80065ec <update_velocity_control+0x41c>
 800658e:	4818      	ldr	r0, [pc, #96]	@ (80065f0 <update_velocity_control+0x420>)
 8006590:	f7fa ff1a 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <update_velocity_control+0x3f0>)
 8006596:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800659a:	eef0 0a67 	vmov.f32	s1, s15
 800659e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80065ec <update_velocity_control+0x41c>
 80065a2:	4814      	ldr	r0, [pc, #80]	@ (80065f4 <update_velocity_control+0x424>)
 80065a4:	f7fa ff10 	bl	80013c8 <MDXX_set_range>
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	ecbd 8b02 	vpop	{d8}
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	bf00      	nop
 80065b8:	47ae147b 	.word	0x47ae147b
 80065bc:	3f847ae1 	.word	0x3f847ae1
 80065c0:	200002c4 	.word	0x200002c4
 80065c4:	200004f0 	.word	0x200004f0
 80065c8:	20000494 	.word	0x20000494
 80065cc:	447a0000 	.word	0x447a0000
 80065d0:	20000624 	.word	0x20000624
 80065d4:	200003ec 	.word	0x200003ec
 80065d8:	3f4ccccd 	.word	0x3f4ccccd
 80065dc:	3e4ccccd 	.word	0x3e4ccccd
 80065e0:	200003f0 	.word	0x200003f0
 80065e4:	20000000 	.word	0x20000000
 80065e8:	20000280 	.word	0x20000280
 80065ec:	44fa0000 	.word	0x44fa0000
 80065f0:	200003fc 	.word	0x200003fc
 80065f4:	20000448 	.word	0x20000448

080065f8 <update_control_loops>:

void update_control_loops(void) {
 80065f8:	b598      	push	{r3, r4, r7, lr}
 80065fa:	ed2d 8b02 	vpush	{d8}
 80065fe:	af00      	add	r7, sp, #0
    normalized_position = normalize_angle(revolute_encoder.rads);
 8006600:	4b96      	ldr	r3, [pc, #600]	@ (800685c <update_control_loops+0x264>)
 8006602:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006606:	eeb0 0a67 	vmov.f32	s0, s15
 800660a:	f7ff faff 	bl	8005c0c <normalize_angle>
 800660e:	eef0 7a40 	vmov.f32	s15, s0
 8006612:	4b93      	ldr	r3, [pc, #588]	@ (8006860 <update_control_loops+0x268>)
 8006614:	edc3 7a00 	vstr	s15, [r3]

    if (is_emergency_active()) {
 8006618:	f000 fba2 	bl	8006d60 <is_emergency_active>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d015      	beq.n	800664e <update_control_loops+0x56>
        emergency_stop_all_motors();
 8006622:	f000 fad5 	bl	8006bd0 <emergency_stop_all_motors>
        prismatic_axis.mm = prismatic_encoder.mm;
 8006626:	4b8f      	ldr	r3, [pc, #572]	@ (8006864 <update_control_loops+0x26c>)
 8006628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662a:	4a8f      	ldr	r2, [pc, #572]	@ (8006868 <update_control_loops+0x270>)
 800662c:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 800662e:	4b8c      	ldr	r3, [pc, #560]	@ (8006860 <update_control_loops+0x268>)
 8006630:	edd3 7a00 	vldr	s15, [r3]
 8006634:	220e      	movs	r2, #14
 8006636:	210f      	movs	r1, #15
 8006638:	eeb0 0a67 	vmov.f32	s0, s15
 800663c:	488b      	ldr	r0, [pc, #556]	@ (800686c <update_control_loops+0x274>)
 800663e:	f7fe f847 	bl	80046d0 <UnitConverter_angle>
 8006642:	eef0 7a40 	vmov.f32	s15, s0
 8006646:	4b8a      	ldr	r3, [pc, #552]	@ (8006870 <update_control_loops+0x278>)
 8006648:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 800664c:	e1ac      	b.n	80069a8 <update_control_loops+0x3b0>
    }

    // Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
    if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 800664e:	4b89      	ldr	r3, [pc, #548]	@ (8006874 <update_control_loops+0x27c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02d      	beq.n	80066b2 <update_control_loops+0xba>
 8006656:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <update_control_loops+0x280>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b07      	cmp	r3, #7
 800665c:	d029      	beq.n	80066b2 <update_control_loops+0xba>
        update_homing_sequence();
 800665e:	f7fe ff67 	bl	8005530 <update_homing_sequence>
        MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006662:	4b81      	ldr	r3, [pc, #516]	@ (8006868 <update_control_loops+0x270>)
 8006664:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006668:	eef0 0a67 	vmov.f32	s1, s15
 800666c:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 800687c <update_control_loops+0x284>
 8006670:	4883      	ldr	r0, [pc, #524]	@ (8006880 <update_control_loops+0x288>)
 8006672:	f7fa fea9 	bl	80013c8 <MDXX_set_range>
        MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006676:	4b7e      	ldr	r3, [pc, #504]	@ (8006870 <update_control_loops+0x278>)
 8006678:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800667c:	eef0 0a67 	vmov.f32	s1, s15
 8006680:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800687c <update_control_loops+0x284>
 8006684:	487f      	ldr	r0, [pc, #508]	@ (8006884 <update_control_loops+0x28c>)
 8006686:	f7fa fe9f 	bl	80013c8 <MDXX_set_range>
        prismatic_axis.mm = prismatic_encoder.mm;
 800668a:	4b76      	ldr	r3, [pc, #472]	@ (8006864 <update_control_loops+0x26c>)
 800668c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668e:	4a76      	ldr	r2, [pc, #472]	@ (8006868 <update_control_loops+0x270>)
 8006690:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006692:	4b73      	ldr	r3, [pc, #460]	@ (8006860 <update_control_loops+0x268>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	220e      	movs	r2, #14
 800669a:	210f      	movs	r1, #15
 800669c:	eeb0 0a67 	vmov.f32	s0, s15
 80066a0:	4872      	ldr	r0, [pc, #456]	@ (800686c <update_control_loops+0x274>)
 80066a2:	f7fe f815 	bl	80046d0 <UnitConverter_angle>
 80066a6:	eef0 7a40 	vmov.f32	s15, s0
 80066aa:	4b71      	ldr	r3, [pc, #452]	@ (8006870 <update_control_loops+0x278>)
 80066ac:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 80066b0:	e17a      	b.n	80069a8 <update_control_loops+0x3b0>
    }

    // Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
    if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 80066b2:	4b70      	ldr	r3, [pc, #448]	@ (8006874 <update_control_loops+0x27c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01d      	beq.n	80066f6 <update_control_loops+0xfe>
 80066ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006878 <update_control_loops+0x280>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b07      	cmp	r3, #7
 80066c0:	d119      	bne.n	80066f6 <update_control_loops+0xfe>
        // First, update the homing sequence to handle trajectory start/completion
        update_homing_sequence();
 80066c2:	f7fe ff35 	bl	8005530 <update_homing_sequence>

        // If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
        if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 80066c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006878 <update_control_loops+0x280>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b07      	cmp	r3, #7
 80066cc:	d013      	beq.n	80066f6 <update_control_loops+0xfe>
            // Let the trajectory system handle the motion
            // Fall through to the switch statement below
        } else {
            // Homing sequence advanced to next state, return
            prismatic_axis.mm = prismatic_encoder.mm;
 80066ce:	4b65      	ldr	r3, [pc, #404]	@ (8006864 <update_control_loops+0x26c>)
 80066d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d2:	4a65      	ldr	r2, [pc, #404]	@ (8006868 <update_control_loops+0x270>)
 80066d4:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 80066d6:	4b62      	ldr	r3, [pc, #392]	@ (8006860 <update_control_loops+0x268>)
 80066d8:	edd3 7a00 	vldr	s15, [r3]
 80066dc:	220e      	movs	r2, #14
 80066de:	210f      	movs	r1, #15
 80066e0:	eeb0 0a67 	vmov.f32	s0, s15
 80066e4:	4861      	ldr	r0, [pc, #388]	@ (800686c <update_control_loops+0x274>)
 80066e6:	f7fd fff3 	bl	80046d0 <UnitConverter_angle>
 80066ea:	eef0 7a40 	vmov.f32	s15, s0
 80066ee:	4b60      	ldr	r3, [pc, #384]	@ (8006870 <update_control_loops+0x278>)
 80066f0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
            return;
 80066f4:	e158      	b.n	80069a8 <update_control_loops+0x3b0>
        }
    }

    // Motion sequence handling
    switch (motion_sequence_state) {
 80066f6:	4b64      	ldr	r3, [pc, #400]	@ (8006888 <update_control_loops+0x290>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	f200 8137 	bhi.w	8006970 <update_control_loops+0x378>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <update_control_loops+0x110>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800671d 	.word	0x0800671d
 800670c:	08006779 	.word	0x08006779
 8006710:	080068a5 	.word	0x080068a5
 8006714:	0800694b 	.word	0x0800694b
 8006718:	08006969 	.word	0x08006969
    case MOTION_PEN_UP_DELAY:
        if (++motion_delay_timer >= 1500) {
 800671c:	4b5b      	ldr	r3, [pc, #364]	@ (800688c <update_control_loops+0x294>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	4a5a      	ldr	r2, [pc, #360]	@ (800688c <update_control_loops+0x294>)
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	f240 52db 	movw	r2, #1499	@ 0x5db
 800672a:	4293      	cmp	r3, r2
 800672c:	f240 8122 	bls.w	8006974 <update_control_loops+0x37c>
            // Check if we're in HOMING_REV_TO_ZERO_DEG mode
            if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006730:	4b50      	ldr	r3, [pc, #320]	@ (8006874 <update_control_loops+0x27c>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <update_control_loops+0x170>
 8006738:	4b4f      	ldr	r3, [pc, #316]	@ (8006878 <update_control_loops+0x280>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b07      	cmp	r3, #7
 800673e:	d113      	bne.n	8006768 <update_control_loops+0x170>
                // Skip prismatic phase entirely - go directly to revolute motion
                revolute_axis.trajectory_active = true;
 8006740:	4b4b      	ldr	r3, [pc, #300]	@ (8006870 <update_control_loops+0x278>)
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006748:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <update_control_loops+0x290>)
 800674a:	2203      	movs	r2, #3
 800674c:	701a      	strb	r2, [r3, #0]

                // Ensure prismatic stays stationary
                prismatic_axis.trajectory_active = false;
 800674e:	4b46      	ldr	r3, [pc, #280]	@ (8006868 <update_control_loops+0x270>)
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prismatic_encoder.mm;
 8006756:	4b43      	ldr	r3, [pc, #268]	@ (8006864 <update_control_loops+0x26c>)
 8006758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675a:	4a43      	ldr	r2, [pc, #268]	@ (8006868 <update_control_loops+0x270>)
 800675c:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 800675e:	4b42      	ldr	r3, [pc, #264]	@ (8006868 <update_control_loops+0x270>)
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	605a      	str	r2, [r3, #4]
                // Normal trajectory - activate prismatic first
                prismatic_axis.trajectory_active = true;
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
            }
        }
        break;
 8006766:	e105      	b.n	8006974 <update_control_loops+0x37c>
                prismatic_axis.trajectory_active = true;
 8006768:	4b3f      	ldr	r3, [pc, #252]	@ (8006868 <update_control_loops+0x270>)
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006770:	4b45      	ldr	r3, [pc, #276]	@ (8006888 <update_control_loops+0x290>)
 8006772:	2202      	movs	r2, #2
 8006774:	701a      	strb	r2, [r3, #0]
        break;
 8006776:	e0fd      	b.n	8006974 <update_control_loops+0x37c>

    case MOTION_PRISMATIC_ACTIVE:
        if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006778:	4b3b      	ldr	r3, [pc, #236]	@ (8006868 <update_control_loops+0x270>)
 800677a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80fa 	beq.w	8006978 <update_control_loops+0x380>
 8006784:	4b42      	ldr	r3, [pc, #264]	@ (8006890 <update_control_loops+0x298>)
 8006786:	7c1b      	ldrb	r3, [r3, #16]
 8006788:	f083 0301 	eor.w	r3, r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80f2 	beq.w	8006978 <update_control_loops+0x380>
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006794:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <update_control_loops+0x270>)
 8006796:	ed93 8a03 	vldr	s16, [r3, #12]
 800679a:	4b33      	ldr	r3, [pc, #204]	@ (8006868 <update_control_loops+0x270>)
 800679c:	edd3 8a04 	vldr	s17, [r3, #16]
                    prismatic_axis.initial_pos, prismatic_axis.target_pos,
                    ZGX45RGG_400RPM_Constant.traject_sd_max,
 80067a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006894 <update_control_loops+0x29c>)
 80067a2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f7fa f9d3 	bl	8000b54 <__aeabi_d2f>
 80067ae:	4604      	mov	r4, r0
                    ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80067b0:	4b38      	ldr	r3, [pc, #224]	@ (8006894 <update_control_loops+0x29c>)
 80067b2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fa f9cb 	bl	8000b54 <__aeabi_d2f>
 80067be:	4603      	mov	r3, r0
 80067c0:	ee01 3a90 	vmov	s3, r3
 80067c4:	ee01 4a10 	vmov	s2, r4
 80067c8:	eef0 0a68 	vmov.f32	s1, s17
 80067cc:	eeb0 0a48 	vmov.f32	s0, s16
 80067d0:	492f      	ldr	r1, [pc, #188]	@ (8006890 <update_control_loops+0x298>)
 80067d2:	4831      	ldr	r0, [pc, #196]	@ (8006898 <update_control_loops+0x2a0>)
 80067d4:	f7fd fbe4 	bl	8003fa0 <Trapezoidal_Evaluated>

            prismatic_axis.position = prisEva.setposition;
 80067d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006890 <update_control_loops+0x298>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	@ (8006868 <update_control_loops+0x270>)
 80067de:	6013      	str	r3, [r2, #0]
            prismatic_axis.velocity = prisEva.setvelocity;
 80067e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006890 <update_control_loops+0x298>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a20      	ldr	r2, [pc, #128]	@ (8006868 <update_control_loops+0x270>)
 80067e6:	6053      	str	r3, [r2, #4]

            if (prisEva.isFinised) {
 80067e8:	4b29      	ldr	r3, [pc, #164]	@ (8006890 <update_control_loops+0x298>)
 80067ea:	7c1b      	ldrb	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80c3 	beq.w	8006978 <update_control_loops+0x380>
                prismatic_axis.trajectory_active = false;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <update_control_loops+0x270>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prisEva.setposition;
 80067fa:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <update_control_loops+0x298>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006868 <update_control_loops+0x270>)
 8006800:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <update_control_loops+0x270>)
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	605a      	str	r2, [r3, #4]

                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800680a:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <update_control_loops+0x278>)
 800680c:	ed93 8a03 	vldr	s16, [r3, #12]
 8006810:	4b17      	ldr	r3, [pc, #92]	@ (8006870 <update_control_loops+0x278>)
 8006812:	edd3 8a04 	vldr	s17, [r3, #16]
                        revolute_axis.target_pos,
                        ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006816:	4b21      	ldr	r3, [pc, #132]	@ (800689c <update_control_loops+0x2a4>)
 8006818:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f7fa f998 	bl	8000b54 <__aeabi_d2f>
 8006824:	4604      	mov	r4, r0
                        ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006826:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <update_control_loops+0x2a4>)
 8006828:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800682c:	4610      	mov	r0, r2
 800682e:	4619      	mov	r1, r3
 8006830:	f7fa f990 	bl	8000b54 <__aeabi_d2f>
 8006834:	4603      	mov	r3, r0
 8006836:	ee01 3a90 	vmov	s3, r3
 800683a:	ee01 4a10 	vmov	s2, r4
 800683e:	eef0 0a68 	vmov.f32	s1, s17
 8006842:	eeb0 0a48 	vmov.f32	s0, s16
 8006846:	4816      	ldr	r0, [pc, #88]	@ (80068a0 <update_control_loops+0x2a8>)
 8006848:	f7fd fae8 	bl	8003e1c <Trapezoidal_Generator>

                revolute_axis.trajectory_active = true;
 800684c:	4b08      	ldr	r3, [pc, #32]	@ (8006870 <update_control_loops+0x278>)
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006854:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <update_control_loops+0x290>)
 8006856:	2203      	movs	r2, #3
 8006858:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 800685a:	e08d      	b.n	8006978 <update_control_loops+0x380>
 800685c:	200004f0 	.word	0x200004f0
 8006860:	2000037c 	.word	0x2000037c
 8006864:	20000494 	.word	0x20000494
 8006868:	20000280 	.word	0x20000280
 800686c:	20000888 	.word	0x20000888
 8006870:	200002c4 	.word	0x200002c4
 8006874:	2000036b 	.word	0x2000036b
 8006878:	2000036a 	.word	0x2000036a
 800687c:	44fa0000 	.word	0x44fa0000
 8006880:	200003fc 	.word	0x200003fc
 8006884:	20000448 	.word	0x20000448
 8006888:	20000308 	.word	0x20000308
 800688c:	20000360 	.word	0x20000360
 8006890:	20000334 	.word	0x20000334
 8006894:	20000080 	.word	0x20000080
 8006898:	2000030c 	.word	0x2000030c
 800689c:	20000000 	.word	0x20000000
 80068a0:	20000320 	.word	0x20000320

    case MOTION_REVOLUTE_ACTIVE:
        if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80068a4:	4b42      	ldr	r3, [pc, #264]	@ (80069b0 <update_control_loops+0x3b8>)
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d066      	beq.n	800697c <update_control_loops+0x384>
 80068ae:	4b41      	ldr	r3, [pc, #260]	@ (80069b4 <update_control_loops+0x3bc>)
 80068b0:	7c1b      	ldrb	r3, [r3, #16]
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05f      	beq.n	800697c <update_control_loops+0x384>
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068bc:	4b3c      	ldr	r3, [pc, #240]	@ (80069b0 <update_control_loops+0x3b8>)
 80068be:	ed93 8a03 	vldr	s16, [r3, #12]
 80068c2:	4b3b      	ldr	r3, [pc, #236]	@ (80069b0 <update_control_loops+0x3b8>)
 80068c4:	edd3 8a04 	vldr	s17, [r3, #16]
                    revolute_axis.target_pos,
                    ZGX45RGG_150RPM_Constant.traject_qd_max,
 80068c8:	4b3b      	ldr	r3, [pc, #236]	@ (80069b8 <update_control_loops+0x3c0>)
 80068ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	f7fa f93f 	bl	8000b54 <__aeabi_d2f>
 80068d6:	4604      	mov	r4, r0
                    ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80068d8:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <update_control_loops+0x3c0>)
 80068da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068de:	4610      	mov	r0, r2
 80068e0:	4619      	mov	r1, r3
 80068e2:	f7fa f937 	bl	8000b54 <__aeabi_d2f>
 80068e6:	4603      	mov	r3, r0
 80068e8:	ee01 3a90 	vmov	s3, r3
 80068ec:	ee01 4a10 	vmov	s2, r4
 80068f0:	eef0 0a68 	vmov.f32	s1, s17
 80068f4:	eeb0 0a48 	vmov.f32	s0, s16
 80068f8:	492e      	ldr	r1, [pc, #184]	@ (80069b4 <update_control_loops+0x3bc>)
 80068fa:	4830      	ldr	r0, [pc, #192]	@ (80069bc <update_control_loops+0x3c4>)
 80068fc:	f7fd fb50 	bl	8003fa0 <Trapezoidal_Evaluated>

            revolute_axis.position = revEva.setposition;
 8006900:	4b2c      	ldr	r3, [pc, #176]	@ (80069b4 <update_control_loops+0x3bc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2a      	ldr	r2, [pc, #168]	@ (80069b0 <update_control_loops+0x3b8>)
 8006906:	6013      	str	r3, [r2, #0]
            revolute_axis.velocity = revEva.setvelocity;
 8006908:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <update_control_loops+0x3bc>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a28      	ldr	r2, [pc, #160]	@ (80069b0 <update_control_loops+0x3b8>)
 800690e:	6053      	str	r3, [r2, #4]

            if (revEva.isFinised) {
 8006910:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <update_control_loops+0x3bc>)
 8006912:	7c1b      	ldrb	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d031      	beq.n	800697c <update_control_loops+0x384>
                revolute_axis.trajectory_active = false;
 8006918:	4b25      	ldr	r3, [pc, #148]	@ (80069b0 <update_control_loops+0x3b8>)
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                revolute_axis.position = revEva.setposition;
 8006920:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <update_control_loops+0x3bc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <update_control_loops+0x3b8>)
 8006926:	6013      	str	r3, [r2, #0]
                revolute_axis.velocity = 0.0f;
 8006928:	4b21      	ldr	r3, [pc, #132]	@ (80069b0 <update_control_loops+0x3b8>)
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	605a      	str	r2, [r3, #4]

                PID_CONTROLLER_Reset(&revolute_position_pid);
 8006930:	4823      	ldr	r0, [pc, #140]	@ (80069c0 <update_control_loops+0x3c8>)
 8006932:	f7fa fd03 	bl	800133c <PID_CONTROLLER_Reset>
                PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006936:	4823      	ldr	r0, [pc, #140]	@ (80069c4 <update_control_loops+0x3cc>)
 8006938:	f7fa fd00 	bl	800133c <PID_CONTROLLER_Reset>

                motion_delay_timer = 0;
 800693c:	4b22      	ldr	r3, [pc, #136]	@ (80069c8 <update_control_loops+0x3d0>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
                motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006942:	4b22      	ldr	r3, [pc, #136]	@ (80069cc <update_control_loops+0x3d4>)
 8006944:	2204      	movs	r2, #4
 8006946:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8006948:	e018      	b.n	800697c <update_control_loops+0x384>

    case MOTION_PEN_DOWN_DELAY:
        if (++motion_delay_timer >= 1500) {
 800694a:	4b1f      	ldr	r3, [pc, #124]	@ (80069c8 <update_control_loops+0x3d0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <update_control_loops+0x3d0>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006958:	4293      	cmp	r3, r2
 800695a:	d911      	bls.n	8006980 <update_control_loops+0x388>
            plotter_pen_down();
 800695c:	f002 f932 	bl	8008bc4 <plotter_pen_down>
            motion_sequence_state = MOTION_COMPLETE;
 8006960:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <update_control_loops+0x3d4>)
 8006962:	2205      	movs	r2, #5
 8006964:	701a      	strb	r2, [r3, #0]
        }
        break;
 8006966:	e00b      	b.n	8006980 <update_control_loops+0x388>

    case MOTION_COMPLETE:
        motion_sequence_state = MOTION_IDLE;
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <update_control_loops+0x3d4>)
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
        break;
 800696e:	e008      	b.n	8006982 <update_control_loops+0x38a>

    default:
        break;
 8006970:	bf00      	nop
 8006972:	e006      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006974:	bf00      	nop
 8006976:	e004      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006978:	bf00      	nop
 800697a:	e002      	b.n	8006982 <update_control_loops+0x38a>
        break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006980:	bf00      	nop
    }

    prismatic_axis.mm = prismatic_encoder.mm;
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <update_control_loops+0x3d8>)
 8006984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006986:	4a13      	ldr	r2, [pc, #76]	@ (80069d4 <update_control_loops+0x3dc>)
 8006988:	6393      	str	r3, [r2, #56]	@ 0x38
    revolute_axis.deg = UnitConverter_angle(&converter_system,
 800698a:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <update_control_loops+0x3e0>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	220e      	movs	r2, #14
 8006992:	210f      	movs	r1, #15
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	4810      	ldr	r0, [pc, #64]	@ (80069dc <update_control_loops+0x3e4>)
 800699a:	f7fd fe99 	bl	80046d0 <UnitConverter_angle>
 800699e:	eef0 7a40 	vmov.f32	s15, s0
 80069a2:	4b03      	ldr	r3, [pc, #12]	@ (80069b0 <update_control_loops+0x3b8>)
 80069a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 80069a8:	46bd      	mov	sp, r7
 80069aa:	ecbd 8b02 	vpop	{d8}
 80069ae:	bd98      	pop	{r3, r4, r7, pc}
 80069b0:	200002c4 	.word	0x200002c4
 80069b4:	20000348 	.word	0x20000348
 80069b8:	20000000 	.word	0x20000000
 80069bc:	20000320 	.word	0x20000320
 80069c0:	2000059c 	.word	0x2000059c
 80069c4:	200005c4 	.word	0x200005c4
 80069c8:	20000360 	.word	0x20000360
 80069cc:	20000308 	.word	0x20000308
 80069d0:	20000494 	.word	0x20000494
 80069d4:	20000280 	.word	0x20000280
 80069d8:	2000037c 	.word	0x2000037c
 80069dc:	20000888 	.word	0x20000888

080069e0 <check_emergency_button>:

void check_emergency_button(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80069e6:	2110      	movs	r1, #16
 80069e8:	480c      	ldr	r0, [pc, #48]	@ (8006a1c <check_emergency_button+0x3c>)
 80069ea:	f005 fc1b 	bl	800c224 <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	f083 0301 	eor.w	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <check_emergency_button+0x40>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d001      	beq.n	8006a12 <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006a0e:	f000 f877 	bl	8006b00 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	48000400 	.word	0x48000400
 8006a20:	2000036c 	.word	0x2000036c

08006a24 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006a28:	4b16      	ldr	r3, [pc, #88]	@ (8006a84 <check_safety_conditions+0x60>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d127      	bne.n	8006a80 <check_safety_conditions+0x5c>
 8006a30:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <check_safety_conditions+0x64>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d123      	bne.n	8006a80 <check_safety_conditions+0x5c>
 8006a38:	4b14      	ldr	r3, [pc, #80]	@ (8006a8c <check_safety_conditions+0x68>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11f      	bne.n	8006a80 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006a40:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <check_safety_conditions+0x6c>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <check_safety_conditions+0x3c>
 8006a4a:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <check_safety_conditions+0x70>)
 8006a4c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	d502      	bpl.n	8006a60 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006a5a:	f000 f81f 	bl	8006a9c <trigger_software_emergency>
		return;
 8006a5e:	e010      	b.n	8006a82 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006a60:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <check_safety_conditions+0x74>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <check_safety_conditions+0x5e>
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <check_safety_conditions+0x70>)
 8006a6c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a78:	dd03      	ble.n	8006a82 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006a7a:	f000 f80f 	bl	8006a9c <trigger_software_emergency>
		return;
 8006a7e:	e000      	b.n	8006a82 <check_safety_conditions+0x5e>
		return;
 8006a80:	bf00      	nop
	}
}
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000134 	.word	0x20000134
 8006a88:	2000036c 	.word	0x2000036c
 8006a8c:	2000036b 	.word	0x2000036b
 8006a90:	20000368 	.word	0x20000368
 8006a94:	20000280 	.word	0x20000280
 8006a98:	20000369 	.word	0x20000369

08006a9c <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8006aa0:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <trigger_software_emergency+0x48>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11b      	bne.n	8006ae0 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae4 <trigger_software_emergency+0x48>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8006aae:	f000 f88f 	bl	8006bd0 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <trigger_software_emergency+0x4c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <trigger_software_emergency+0x50>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <trigger_software_emergency+0x54>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <trigger_software_emergency+0x58>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <trigger_software_emergency+0x5c>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8006ad4:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <trigger_software_emergency+0x60>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8006adc:	f000 f9c2 	bl	8006e64 <exit_joy_mode>
		}
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000036c 	.word	0x2000036c
 8006ae8:	20000370 	.word	0x20000370
 8006aec:	20000374 	.word	0x20000374
 8006af0:	20000308 	.word	0x20000308
 8006af4:	20000280 	.word	0x20000280
 8006af8:	200002c4 	.word	0x200002c4
 8006afc:	20000385 	.word	0x20000385

08006b00 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006b04:	4b13      	ldr	r3, [pc, #76]	@ (8006b54 <trigger_hardware_emergency+0x54>)
 8006b06:	2202      	movs	r2, #2
 8006b08:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	@ (8006b58 <trigger_hardware_emergency+0x58>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006b10:	f000 f85e 	bl	8006bd0 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <trigger_hardware_emergency+0x5c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006b1a:	4b11      	ldr	r3, [pc, #68]	@ (8006b60 <trigger_hardware_emergency+0x60>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <trigger_hardware_emergency+0x64>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <trigger_hardware_emergency+0x68>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b6c <trigger_hardware_emergency+0x6c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <trigger_hardware_emergency+0x70>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <trigger_hardware_emergency+0x74>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <trigger_hardware_emergency+0x78>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8006b4a:	f000 f98b 	bl	8006e64 <exit_joy_mode>
	}
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	2000036c 	.word	0x2000036c
 8006b58:	20000375 	.word	0x20000375
 8006b5c:	20000370 	.word	0x20000370
 8006b60:	20000374 	.word	0x20000374
 8006b64:	2000036b 	.word	0x2000036b
 8006b68:	2000036a 	.word	0x2000036a
 8006b6c:	20000308 	.word	0x20000308
 8006b70:	20000280 	.word	0x20000280
 8006b74:	200002c4 	.word	0x200002c4
 8006b78:	20000385 	.word	0x20000385

08006b7c <clear_emergency_state>:

void clear_emergency_state(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006b80:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb8 <clear_emergency_state+0x3c>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006b86:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <clear_emergency_state+0x40>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <clear_emergency_state+0x44>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006b92:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <clear_emergency_state+0x48>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ba2:	f005 fb57 	bl	800c254 <HAL_GPIO_WritePin>
	up_photo = false;
 8006ba6:	4b08      	ldr	r3, [pc, #32]	@ (8006bc8 <clear_emergency_state+0x4c>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <clear_emergency_state+0x50>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000036c 	.word	0x2000036c
 8006bbc:	20000375 	.word	0x20000375
 8006bc0:	20000370 	.word	0x20000370
 8006bc4:	20000374 	.word	0x20000374
 8006bc8:	20000368 	.word	0x20000368
 8006bcc:	20000369 	.word	0x20000369

08006bd0 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006bd4:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8006c34 <emergency_stop_all_motors+0x64>
 8006bd8:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8006c38 <emergency_stop_all_motors+0x68>
 8006bdc:	4817      	ldr	r0, [pc, #92]	@ (8006c3c <emergency_stop_all_motors+0x6c>)
 8006bde:	f7fa fbf3 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006be2:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8006c34 <emergency_stop_all_motors+0x64>
 8006be6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006c38 <emergency_stop_all_motors+0x68>
 8006bea:	4815      	ldr	r0, [pc, #84]	@ (8006c40 <emergency_stop_all_motors+0x70>)
 8006bec:	f7fa fbec 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <emergency_stop_all_motors+0x74>)
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006bf8:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <emergency_stop_all_motors+0x78>)
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <emergency_stop_all_motors+0x74>)
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <emergency_stop_all_motors+0x78>)
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006c10:	480e      	ldr	r0, [pc, #56]	@ (8006c4c <emergency_stop_all_motors+0x7c>)
 8006c12:	f7fa fb93 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006c16:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <emergency_stop_all_motors+0x80>)
 8006c18:	f7fa fb90 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006c1c:	480d      	ldr	r0, [pc, #52]	@ (8006c54 <emergency_stop_all_motors+0x84>)
 8006c1e:	f7fa fb8d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c22:	480d      	ldr	r0, [pc, #52]	@ (8006c58 <emergency_stop_all_motors+0x88>)
 8006c24:	f7fa fb8a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c28:	480b      	ldr	r0, [pc, #44]	@ (8006c58 <emergency_stop_all_motors+0x88>)
 8006c2a:	f7fa fb87 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	00000000 	.word	0x00000000
 8006c38:	44fa0000 	.word	0x44fa0000
 8006c3c:	200003fc 	.word	0x200003fc
 8006c40:	20000448 	.word	0x20000448
 8006c44:	20000280 	.word	0x20000280
 8006c48:	200002c4 	.word	0x200002c4
 8006c4c:	2000054c 	.word	0x2000054c
 8006c50:	20000574 	.word	0x20000574
 8006c54:	2000059c 	.word	0x2000059c
 8006c58:	200005c4 	.word	0x200005c4

08006c5c <update_safety_system>:

void update_safety_system(void) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8006c60:	4b3a      	ldr	r3, [pc, #232]	@ (8006d4c <update_safety_system+0xf0>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d16e      	bne.n	8006d46 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006c68:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <update_safety_system+0xf4>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11f      	bne.n	8006cb0 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006c70:	4b38      	ldr	r3, [pc, #224]	@ (8006d54 <update_safety_system+0xf8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a37      	ldr	r2, [pc, #220]	@ (8006d54 <update_safety_system+0xf8>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	2bf9      	cmp	r3, #249	@ 0xf9
 8006c7c:	d918      	bls.n	8006cb0 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006c7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c86:	f005 fafd 	bl	800c284 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <update_safety_system+0xfc>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f083 0301 	eor.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d58 <update_safety_system+0xfc>)
 8006ca8:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	@ (8006d54 <update_safety_system+0xf8>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <update_safety_system+0xf4>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d134      	bne.n	8006d22 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006cb8:	2110      	movs	r1, #16
 8006cba:	4828      	ldr	r0, [pc, #160]	@ (8006d5c <update_safety_system+0x100>)
 8006cbc:	f005 fab2 	bl	800c224 <HAL_GPIO_ReadPin>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d120      	bne.n	8006d08 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006cc6:	4b23      	ldr	r3, [pc, #140]	@ (8006d54 <update_safety_system+0xf8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a21      	ldr	r2, [pc, #132]	@ (8006d54 <update_safety_system+0xf8>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	2bf9      	cmp	r3, #249	@ 0xf9
 8006cd2:	d926      	bls.n	8006d22 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cdc:	f005 fad2 	bl	800c284 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <update_safety_system+0xfc>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f083 0301 	eor.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b16      	ldr	r3, [pc, #88]	@ (8006d58 <update_safety_system+0xfc>)
 8006cfe:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8006d00:	4b14      	ldr	r3, [pc, #80]	@ (8006d54 <update_safety_system+0xf8>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00c      	b.n	8006d22 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d12:	f005 fa9f 	bl	800c254 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8006d16:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <update_safety_system+0xfc>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <update_safety_system+0xf8>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8006d22:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <update_safety_system+0xf4>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d34:	f005 fa8e 	bl	800c254 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <update_safety_system+0xfc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8006d3e:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <update_safety_system+0xf8>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e000      	b.n	8006d48 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8006d46:	bf00      	nop
	}
}
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000385 	.word	0x20000385
 8006d50:	2000036c 	.word	0x2000036c
 8006d54:	20000370 	.word	0x20000370
 8006d58:	20000374 	.word	0x20000374
 8006d5c:	48000400 	.word	0x48000400

08006d60 <is_emergency_active>:

bool is_emergency_active(void) {
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <is_emergency_active+0x1c>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	2000036c 	.word	0x2000036c

08006d80 <enter_joy_mode>:

void enter_joy_mode(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8006d84:	f7ff ffec 	bl	8006d60 <is_emergency_active>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d14c      	bne.n	8006e28 <enter_joy_mode+0xa8>
 8006d8e:	4b27      	ldr	r3, [pc, #156]	@ (8006e2c <enter_joy_mode+0xac>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d148      	bne.n	8006e28 <enter_joy_mode+0xa8>
 8006d96:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <enter_joy_mode+0xb0>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d144      	bne.n	8006e28 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 8006d9e:	4b24      	ldr	r3, [pc, #144]	@ (8006e30 <enter_joy_mode+0xb0>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8006da4:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <enter_joy_mode+0xb4>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8006daa:	f000 f95f 	bl	800706c <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8006dae:	2201      	movs	r2, #1
 8006db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006db8:	f005 fa4c 	bl	800c254 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8006dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006e38 <enter_joy_mode+0xb8>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e3c <enter_joy_mode+0xbc>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e40 <enter_joy_mode+0xc0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006dce:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8006dde:	4b1b      	ldr	r3, [pc, #108]	@ (8006e4c <enter_joy_mode+0xcc>)
 8006de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de2:	4a18      	ldr	r2, [pc, #96]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006de4:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <enter_joy_mode+0xd0>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	4a17      	ldr	r2, [pc, #92]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006dec:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8006dee:	4b15      	ldr	r3, [pc, #84]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006df6:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006dfe:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006e0e:	4811      	ldr	r0, [pc, #68]	@ (8006e54 <enter_joy_mode+0xd4>)
 8006e10:	f7fa fa94 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006e14:	4810      	ldr	r0, [pc, #64]	@ (8006e58 <enter_joy_mode+0xd8>)
 8006e16:	f7fa fa91 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006e1a:	4810      	ldr	r0, [pc, #64]	@ (8006e5c <enter_joy_mode+0xdc>)
 8006e1c:	f7fa fa8e 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006e20:	480f      	ldr	r0, [pc, #60]	@ (8006e60 <enter_joy_mode+0xe0>)
 8006e22:	f7fa fa8b 	bl	800133c <PID_CONTROLLER_Reset>
 8006e26:	e000      	b.n	8006e2a <enter_joy_mode+0xaa>
		return;
 8006e28:	bf00      	nop
}
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000036b 	.word	0x2000036b
 8006e30:	20000385 	.word	0x20000385
 8006e34:	20000384 	.word	0x20000384
 8006e38:	200003e0 	.word	0x200003e0
 8006e3c:	200003dc 	.word	0x200003dc
 8006e40:	20000308 	.word	0x20000308
 8006e44:	20000280 	.word	0x20000280
 8006e48:	200002c4 	.word	0x200002c4
 8006e4c:	20000494 	.word	0x20000494
 8006e50:	200004f0 	.word	0x200004f0
 8006e54:	2000054c 	.word	0x2000054c
 8006e58:	20000574 	.word	0x20000574
 8006e5c:	2000059c 	.word	0x2000059c
 8006e60:	200005c4 	.word	0x200005c4

08006e64 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8006e68:	4b31      	ldr	r3, [pc, #196]	@ (8006f30 <exit_joy_mode+0xcc>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8006e6e:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <exit_joy_mode+0xd0>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8006e74:	f000 f8fa 	bl	800706c <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e82:	f005 f9e7 	bl	800c254 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8006e86:	4b2c      	ldr	r3, [pc, #176]	@ (8006f38 <exit_joy_mode+0xd4>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f3c <exit_joy_mode+0xd8>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8006e92:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <exit_joy_mode+0xdc>)
 8006e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e96:	4a2b      	ldr	r2, [pc, #172]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006e98:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006f48 <exit_joy_mode+0xe4>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ea0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006eaa:	4b28      	ldr	r3, [pc, #160]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8006eba:	4b22      	ldr	r3, [pc, #136]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8006ec2:	4b22      	ldr	r3, [pc, #136]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006eca:	4b1f      	ldr	r3, [pc, #124]	@ (8006f48 <exit_joy_mode+0xe4>)
 8006ecc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f40 <exit_joy_mode+0xdc>)
 8006ed2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006ed6:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8006f50 <exit_joy_mode+0xec>
 8006eda:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006ede:	eef0 0a66 	vmov.f32	s1, s13
 8006ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8006ee6:	481b      	ldr	r0, [pc, #108]	@ (8006f54 <exit_joy_mode+0xf0>)
 8006ee8:	f7fa fbe9 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006eec:	eef0 7a40 	vmov.f32	s15, s0
 8006ef0:	4b16      	ldr	r3, [pc, #88]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ef2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006ef6:	4818      	ldr	r0, [pc, #96]	@ (8006f58 <exit_joy_mode+0xf4>)
 8006ef8:	f7fa fa20 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006efc:	4817      	ldr	r0, [pc, #92]	@ (8006f5c <exit_joy_mode+0xf8>)
 8006efe:	f7fa fa1d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006f02:	4817      	ldr	r0, [pc, #92]	@ (8006f60 <exit_joy_mode+0xfc>)
 8006f04:	f7fa fa1a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f08:	4816      	ldr	r0, [pc, #88]	@ (8006f64 <exit_joy_mode+0x100>)
 8006f0a:	f7fa fa17 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f0e:	4815      	ldr	r0, [pc, #84]	@ (8006f64 <exit_joy_mode+0x100>)
 8006f10:	f7fa fa14 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8006f14:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <exit_joy_mode+0x104>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000385 	.word	0x20000385
 8006f34:	20000384 	.word	0x20000384
 8006f38:	200003e0 	.word	0x200003e0
 8006f3c:	200003dc 	.word	0x200003dc
 8006f40:	20000494 	.word	0x20000494
 8006f44:	20000280 	.word	0x20000280
 8006f48:	200004f0 	.word	0x200004f0
 8006f4c:	200002c4 	.word	0x200002c4
 8006f50:	447a0000 	.word	0x447a0000
 8006f54:	20000624 	.word	0x20000624
 8006f58:	2000054c 	.word	0x2000054c
 8006f5c:	20000574 	.word	0x20000574
 8006f60:	2000059c 	.word	0x2000059c
 8006f64:	200005c4 	.word	0x200005c4
 8006f68:	20000308 	.word	0x20000308

08006f6c <save_current_position>:

void save_current_position(void) {
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8006f70:	4b15      	ldr	r3, [pc, #84]	@ (8006fc8 <save_current_position+0x5c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d822      	bhi.n	8006fbe <save_current_position+0x52>
		saved_positions[saved_position_count].prismatic_pos =
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <save_current_position+0x5c>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
				prismatic_encoder.mm;
 8006f7e:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <save_current_position+0x60>)
 8006f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
		saved_positions[saved_position_count].prismatic_pos =
 8006f82:	4913      	ldr	r1, [pc, #76]	@ (8006fd0 <save_current_position+0x64>)
 8006f84:	00c3      	lsls	r3, r0, #3
 8006f86:	440b      	add	r3, r1
 8006f88:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos =
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <save_current_position+0x5c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
				revolute_encoder.rads;
 8006f90:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <save_current_position+0x68>)
 8006f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
		saved_positions[saved_position_count].revolute_pos =
 8006f94:	490e      	ldr	r1, [pc, #56]	@ (8006fd0 <save_current_position+0x64>)
 8006f96:	00c3      	lsls	r3, r0, #3
 8006f98:	440b      	add	r3, r1
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <save_current_position+0x5c>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <save_current_position+0x5c>)
 8006fa8:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8006faa:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <save_current_position+0x5c>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d905      	bls.n	8006fbe <save_current_position+0x52>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <save_current_position+0x6c>)
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8006fb8:	4b08      	ldr	r3, [pc, #32]	@ (8006fdc <save_current_position+0x70>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
		}
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200003d8 	.word	0x200003d8
 8006fcc:	20000494 	.word	0x20000494
 8006fd0:	20000388 	.word	0x20000388
 8006fd4:	200004f0 	.word	0x200004f0
 8006fd8:	20000384 	.word	0x20000384
 8006fdc:	200003dc 	.word	0x200003dc

08006fe0 <start_position_playback>:

void start_position_playback(void) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
	if (saved_position_count > 0) {
 8006fe6:	4b19      	ldr	r3, [pc, #100]	@ (800704c <start_position_playback+0x6c>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d02a      	beq.n	8007044 <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 8006fee:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <start_position_playback+0x70>)
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 8006ff4:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <start_position_playback+0x74>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8006ffa:	4b17      	ldr	r3, [pc, #92]	@ (8007058 <start_position_playback+0x78>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007000:	2201      	movs	r2, #1
 8007002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800700a:	f005 f923 	bl	800c254 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 800700e:	4b13      	ldr	r3, [pc, #76]	@ (800705c <start_position_playback+0x7c>)
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007014:	4b12      	ldr	r3, [pc, #72]	@ (8007060 <start_position_playback+0x80>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 800701a:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <start_position_playback+0x80>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007020:	edd7 7a02 	vldr	s15, [r7, #8]
 8007024:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007064 <start_position_playback+0x84>
 8007028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800702c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007068 <start_position_playback+0x88>
 8007030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007034:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007038:	edd7 0a01 	vldr	s1, [r7, #4]
 800703c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007040:	f7fe fece 	bl	8005de0 <start_combined_trajectory>
	}
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200003d8 	.word	0x200003d8
 8007050:	20000384 	.word	0x20000384
 8007054:	200003d9 	.word	0x200003d9
 8007058:	200003e4 	.word	0x200003e4
 800705c:	200003e0 	.word	0x200003e0
 8007060:	20000388 	.word	0x20000388
 8007064:	43340000 	.word	0x43340000
 8007068:	40490fdb 	.word	0x40490fdb

0800706c <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007072:	4b19      	ldr	r3, [pc, #100]	@ (80070d8 <reset_joy_mode_data+0x6c>)
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007078:	4b18      	ldr	r3, [pc, #96]	@ (80070dc <reset_joy_mode_data+0x70>)
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
 8007082:	e011      	b.n	80070a8 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007084:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <reset_joy_mode_data+0x74>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4413      	add	r3, r2
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007092:	4a13      	ldr	r2, [pc, #76]	@ (80070e0 <reset_joy_mode_data+0x74>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4413      	add	r3, r2
 800709a:	3304      	adds	r3, #4
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3301      	adds	r3, #1
 80070a6:	607b      	str	r3, [r7, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	ddea      	ble.n	8007084 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <reset_joy_mode_data+0x78>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <reset_joy_mode_data+0x7c>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 80070ba:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <reset_joy_mode_data+0x80>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <reset_joy_mode_data+0x84>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <reset_joy_mode_data+0x88>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	200003d8 	.word	0x200003d8
 80070dc:	200003d9 	.word	0x200003d9
 80070e0:	20000388 	.word	0x20000388
 80070e4:	200003dc 	.word	0x200003dc
 80070e8:	200003e0 	.word	0x200003e0
 80070ec:	200003e4 	.word	0x200003e4
 80070f0:	200003e8 	.word	0x200003e8
 80070f4:	200003e9 	.word	0x200003e9

080070f8 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b02 	vpush	{d8}
 8007100:	b091      	sub	sp, #68	@ 0x44
 8007102:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8007104:	2101      	movs	r1, #1
 8007106:	48a2      	ldr	r0, [pc, #648]	@ (8007390 <update_joy_mode_velocity_control+0x298>)
 8007108:	f005 f88c 	bl	800c224 <HAL_GPIO_ReadPin>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf14      	ite	ne
 8007112:	2301      	movne	r3, #1
 8007114:	2300      	moveq	r3, #0
 8007116:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 800711a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800711e:	489c      	ldr	r0, [pc, #624]	@ (8007390 <update_joy_mode_velocity_control+0x298>)
 8007120:	f005 f880 	bl	800c224 <HAL_GPIO_ReadPin>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
	bool pris_moving = false;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 800713e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <update_joy_mode_velocity_control+0x6a>
 8007146:	4b93      	ldr	r3, [pc, #588]	@ (8007394 <update_joy_mode_velocity_control+0x29c>)
 8007148:	edd3 7a00 	vldr	s15, [r3]
 800714c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8007398 <update_joy_mode_velocity_control+0x2a0>
 8007150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007158:	dd03      	ble.n	8007162 <update_joy_mode_velocity_control+0x6a>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007160:	e04b      	b.n	80071fa <update_joy_mode_velocity_control+0x102>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007162:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <update_joy_mode_velocity_control+0x8e>
 800716a:	4b8a      	ldr	r3, [pc, #552]	@ (8007394 <update_joy_mode_velocity_control+0x29c>)
 800716c:	edd3 7a00 	vldr	s15, [r3]
 8007170:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800739c <update_joy_mode_velocity_control+0x2a4>
 8007174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	d503      	bpl.n	8007186 <update_joy_mode_velocity_control+0x8e>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007184:	e039      	b.n	80071fa <update_joy_mode_velocity_control+0x102>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007186:	4b83      	ldr	r3, [pc, #524]	@ (8007394 <update_joy_mode_velocity_control+0x29c>)
 8007188:	edd3 7a00 	vldr	s15, [r3]
 800718c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800739c <update_joy_mode_velocity_control+0x2a4>
 8007190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007198:	d50f      	bpl.n	80071ba <update_joy_mode_velocity_control+0xc2>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 800719a:	4b81      	ldr	r3, [pc, #516]	@ (80073a0 <update_joy_mode_velocity_control+0x2a8>)
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 80071a4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80071a8:	f083 0301 	eor.w	r3, r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d023      	beq.n	80071fa <update_joy_mode_velocity_control+0x102>
			up_photo = false;
 80071b2:	4a7c      	ldr	r2, [pc, #496]	@ (80073a4 <update_joy_mode_velocity_control+0x2ac>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	7013      	strb	r3, [r2, #0]
 80071b8:	e01f      	b.n	80071fa <update_joy_mode_velocity_control+0x102>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80071ba:	4b76      	ldr	r3, [pc, #472]	@ (8007394 <update_joy_mode_velocity_control+0x29c>)
 80071bc:	edd3 7a00 	vldr	s15, [r3]
 80071c0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8007398 <update_joy_mode_velocity_control+0x2a0>
 80071c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071cc:	dd0f      	ble.n	80071ee <update_joy_mode_velocity_control+0xf6>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80071ce:	4b76      	ldr	r3, [pc, #472]	@ (80073a8 <update_joy_mode_velocity_control+0x2b0>)
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 80071d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80071dc:	f083 0301 	eor.w	r3, r3, #1
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <update_joy_mode_velocity_control+0x102>
			low_photo = false;
 80071e6:	4a71      	ldr	r2, [pc, #452]	@ (80073ac <update_joy_mode_velocity_control+0x2b4>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	7013      	strb	r3, [r2, #0]
 80071ec:	e005      	b.n	80071fa <update_joy_mode_velocity_control+0x102>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = false;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
	bool rev_moving = false;
 8007200:	2300      	movs	r3, #0
 8007202:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007206:	4b6a      	ldr	r3, [pc, #424]	@ (80073b0 <update_joy_mode_velocity_control+0x2b8>)
 8007208:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800720c:	220e      	movs	r2, #14
 800720e:	210f      	movs	r1, #15
 8007210:	eeb0 0a67 	vmov.f32	s0, s15
 8007214:	4867      	ldr	r0, [pc, #412]	@ (80073b4 <update_joy_mode_velocity_control+0x2bc>)
 8007216:	f7fd fa5b 	bl	80046d0 <UnitConverter_angle>
 800721a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 800721e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007222:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80073b8 <update_joy_mode_velocity_control+0x2c0>
 8007226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	dd09      	ble.n	8007244 <update_joy_mode_velocity_control+0x14c>
 8007230:	4b62      	ldr	r3, [pc, #392]	@ (80073bc <update_joy_mode_velocity_control+0x2c4>)
 8007232:	edd3 7a00 	vldr	s15, [r3]
 8007236:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007398 <update_joy_mode_velocity_control+0x2a0>
 800723a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	dc12      	bgt.n	800726a <update_joy_mode_velocity_control+0x172>
			|| (revolute_deg < -175.0f
 8007244:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007248:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80073c0 <update_joy_mode_velocity_control+0x2c8>
 800724c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	d510      	bpl.n	8007278 <update_joy_mode_velocity_control+0x180>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007256:	4b59      	ldr	r3, [pc, #356]	@ (80073bc <update_joy_mode_velocity_control+0x2c4>)
 8007258:	edd3 7a00 	vldr	s15, [r3]
 800725c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800739c <update_joy_mode_velocity_control+0x2a4>
 8007260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007268:	d506      	bpl.n	8007278 <update_joy_mode_velocity_control+0x180>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007276:	e025      	b.n	80072c4 <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007278:	4b50      	ldr	r3, [pc, #320]	@ (80073bc <update_joy_mode_velocity_control+0x2c4>)
 800727a:	edd3 7a00 	vldr	s15, [r3]
 800727e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8007398 <update_joy_mode_velocity_control+0x2a0>
 8007282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728a:	dd05      	ble.n	8007298 <update_joy_mode_velocity_control+0x1a0>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 800728c:	4b4d      	ldr	r3, [pc, #308]	@ (80073c4 <update_joy_mode_velocity_control+0x2cc>)
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007296:	e015      	b.n	80072c4 <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007298:	4b48      	ldr	r3, [pc, #288]	@ (80073bc <update_joy_mode_velocity_control+0x2c4>)
 800729a:	edd3 7a00 	vldr	s15, [r3]
 800729e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800739c <update_joy_mode_velocity_control+0x2a4>
 80072a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072aa:	d505      	bpl.n	80072b8 <update_joy_mode_velocity_control+0x1c0>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80072ac:	4b46      	ldr	r3, [pc, #280]	@ (80073c8 <update_joy_mode_velocity_control+0x2d0>)
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80072b6:	e005      	b.n	80072c4 <update_joy_mode_velocity_control+0x1cc>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	}

	/* PRISMATIC AXIS CONTROL */
	if (pris_moving) {
 80072c4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 808f 	beq.w	80073ec <update_joy_mode_velocity_control+0x2f4>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 80072ce:	4b3f      	ldr	r3, [pc, #252]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 80072d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80072d4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80072d8:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 80072dc:	4b3b      	ldr	r3, [pc, #236]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 80072de:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80072e2:	4b3a      	ldr	r3, [pc, #232]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 80072e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80072e8:	eeb0 0a67 	vmov.f32	s0, s15
 80072ec:	4838      	ldr	r0, [pc, #224]	@ (80073d0 <update_joy_mode_velocity_control+0x2d8>)
 80072ee:	f7f9 ff93 	bl	8001218 <PID_CONTROLLER_Compute>
 80072f2:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80072f6:	4b37      	ldr	r3, [pc, #220]	@ (80073d4 <update_joy_mode_velocity_control+0x2dc>)
 80072f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	f7f9 fbe0 	bl	8000ac4 <__aeabi_d2iz>
 8007304:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007306:	4b33      	ldr	r3, [pc, #204]	@ (80073d4 <update_joy_mode_velocity_control+0x2dc>)
 8007308:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800730c:	4690      	mov	r8, r2
 800730e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f9 fbd5 	bl	8000ac4 <__aeabi_d2iz>
 800731a:	4603      	mov	r3, r0
 800731c:	4619      	mov	r1, r3
 800731e:	4620      	mov	r0, r4
 8007320:	eeb0 0a48 	vmov.f32	s0, s16
 8007324:	f7f9 ff16 	bl	8001154 <PWM_Satuation>
 8007328:	ee07 0a90 	vmov	s15, r0
 800732c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007330:	4b26      	ldr	r3, [pc, #152]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 8007332:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8007336:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800733a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80073d8 <update_joy_mode_velocity_control+0x2e0>
 800733e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007342:	eeb0 0a47 	vmov.f32	s0, s14
 8007346:	4825      	ldr	r0, [pc, #148]	@ (80073dc <update_joy_mode_velocity_control+0x2e4>)
 8007348:	f7fa faa6 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800734c:	eef0 7a40 	vmov.f32	s15, s0
 8007350:	4b1e      	ldr	r3, [pc, #120]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 8007352:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007356:	4b16      	ldr	r3, [pc, #88]	@ (80073b0 <update_joy_mode_velocity_control+0x2b8>)
 8007358:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800735c:	4b20      	ldr	r3, [pc, #128]	@ (80073e0 <update_joy_mode_velocity_control+0x2e8>)
 800735e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007362:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 80073d8 <update_joy_mode_velocity_control+0x2e0>
 8007366:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800736a:	eeb0 1a66 	vmov.f32	s2, s13
 800736e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80073e4 <update_joy_mode_velocity_control+0x2ec>
 8007372:	eeb0 0a47 	vmov.f32	s0, s14
 8007376:	481c      	ldr	r0, [pc, #112]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 8007378:	f7fa fb36 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 800737c:	eef0 7a40 	vmov.f32	s15, s0
 8007380:	4b12      	ldr	r3, [pc, #72]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 8007382:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007386:	4b16      	ldr	r3, [pc, #88]	@ (80073e0 <update_joy_mode_velocity_control+0x2e8>)
 8007388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800738a:	4a10      	ldr	r2, [pc, #64]	@ (80073cc <update_joy_mode_velocity_control+0x2d4>)
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	e09f      	b.n	80074d0 <update_joy_mode_velocity_control+0x3d8>
 8007390:	48000400 	.word	0x48000400
 8007394:	20001964 	.word	0x20001964
 8007398:	42200000 	.word	0x42200000
 800739c:	c2200000 	.word	0xc2200000
 80073a0:	43480000 	.word	0x43480000
 80073a4:	20000368 	.word	0x20000368
 80073a8:	c3480000 	.word	0xc3480000
 80073ac:	20000369 	.word	0x20000369
 80073b0:	200004f0 	.word	0x200004f0
 80073b4:	20000888 	.word	0x20000888
 80073b8:	432f0000 	.word	0x432f0000
 80073bc:	20001968 	.word	0x20001968
 80073c0:	c32f0000 	.word	0xc32f0000
 80073c4:	40a00000 	.word	0x40a00000
 80073c8:	c0a00000 	.word	0xc0a00000
 80073cc:	20000280 	.word	0x20000280
 80073d0:	20000574 	.word	0x20000574
 80073d4:	20000080 	.word	0x20000080
 80073d8:	447a0000 	.word	0x447a0000
 80073dc:	20000614 	.word	0x20000614
 80073e0:	20000494 	.word	0x20000494
 80073e4:	00000000 	.word	0x00000000
 80073e8:	20000618 	.word	0x20000618
	} else {
		// Not moving - hold current position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 80073ec:	4baa      	ldr	r3, [pc, #680]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80073ee:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 80073f2:	4baa      	ldr	r3, [pc, #680]	@ (800769c <update_joy_mode_velocity_control+0x5a4>)
 80073f4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80073f8:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 80073fc:	4ba6      	ldr	r3, [pc, #664]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80073fe:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007402:	4ba5      	ldr	r3, [pc, #660]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 8007404:	edd3 7a05 	vldr	s15, [r3, #20]
 8007408:	eeb0 0a67 	vmov.f32	s0, s15
 800740c:	48a4      	ldr	r0, [pc, #656]	@ (80076a0 <update_joy_mode_velocity_control+0x5a8>)
 800740e:	f7f9 ff03 	bl	8001218 <PID_CONTROLLER_Compute>
 8007412:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007416:	4ba3      	ldr	r3, [pc, #652]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 8007418:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 800741c:	4610      	mov	r0, r2
 800741e:	4619      	mov	r1, r3
 8007420:	f7f9 fb50 	bl	8000ac4 <__aeabi_d2iz>
 8007424:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007426:	4b9f      	ldr	r3, [pc, #636]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 8007428:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800742c:	4692      	mov	sl, r2
 800742e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_vel = PWM_Satuation(
 8007432:	4650      	mov	r0, sl
 8007434:	4659      	mov	r1, fp
 8007436:	f7f9 fb45 	bl	8000ac4 <__aeabi_d2iz>
 800743a:	4603      	mov	r3, r0
 800743c:	4619      	mov	r1, r3
 800743e:	4620      	mov	r0, r4
 8007440:	eeb0 0a48 	vmov.f32	s0, s16
 8007444:	f7f9 fe86 	bl	8001154 <PWM_Satuation>
 8007448:	ee07 0a90 	vmov	s15, r0
 800744c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007450:	4b91      	ldr	r3, [pc, #580]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 8007452:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007456:	4b90      	ldr	r3, [pc, #576]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 8007458:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800745c:	4b8e      	ldr	r3, [pc, #568]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 800745e:	edd3 7a07 	vldr	s15, [r3, #28]
 8007462:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007466:	4b8c      	ldr	r3, [pc, #560]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 8007468:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800746c:	4b8a      	ldr	r3, [pc, #552]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 800746e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007472:	eeb0 0a67 	vmov.f32	s0, s15
 8007476:	488c      	ldr	r0, [pc, #560]	@ (80076a8 <update_joy_mode_velocity_control+0x5b0>)
 8007478:	f7f9 fece 	bl	8001218 <PID_CONTROLLER_Compute>
 800747c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007480:	4b88      	ldr	r3, [pc, #544]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 8007482:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	f7f9 fb1b 	bl	8000ac4 <__aeabi_d2iz>
 800748e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007490:	4b84      	ldr	r3, [pc, #528]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 8007492:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007496:	4615      	mov	r5, r2
 8007498:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 800749c:	4628      	mov	r0, r5
 800749e:	4631      	mov	r1, r6
 80074a0:	f7f9 fb10 	bl	8000ac4 <__aeabi_d2iz>
 80074a4:	4603      	mov	r3, r0
 80074a6:	4619      	mov	r1, r3
 80074a8:	4620      	mov	r0, r4
 80074aa:	eeb0 0a48 	vmov.f32	s0, s16
 80074ae:	f7f9 fe51 	bl	8001154 <PWM_Satuation>
 80074b2:	ee07 0a90 	vmov	s15, r0
 80074b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ba:	4b77      	ldr	r3, [pc, #476]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074bc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80074c0:	4b75      	ldr	r3, [pc, #468]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80074c8:	4b73      	ldr	r3, [pc, #460]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80074d0:	4b71      	ldr	r3, [pc, #452]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074d2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80074d6:	4b70      	ldr	r3, [pc, #448]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074d8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80074dc:	4b6e      	ldr	r3, [pc, #440]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ea:	4b6b      	ldr	r3, [pc, #428]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074ec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80074f0:	4b69      	ldr	r3, [pc, #420]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 80074f2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80074f6:	4b6b      	ldr	r3, [pc, #428]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 80074f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80074fc:	4610      	mov	r0, r2
 80074fe:	4619      	mov	r1, r3
 8007500:	f7f9 fae0 	bl	8000ac4 <__aeabi_d2iz>
 8007504:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007506:	4b67      	ldr	r3, [pc, #412]	@ (80076a4 <update_joy_mode_velocity_control+0x5ac>)
 8007508:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800750c:	623a      	str	r2, [r7, #32]
 800750e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007514:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007518:	f7f9 fad4 	bl	8000ac4 <__aeabi_d2iz>
 800751c:	4603      	mov	r3, r0
 800751e:	4619      	mov	r1, r3
 8007520:	4620      	mov	r0, r4
 8007522:	eeb0 0a48 	vmov.f32	s0, s16
 8007526:	f7f9 fe15 	bl	8001154 <PWM_Satuation>
 800752a:	ee07 0a90 	vmov	s15, r0
 800752e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007532:	4b59      	ldr	r3, [pc, #356]	@ (8007698 <update_joy_mode_velocity_control+0x5a0>)
 8007534:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL */
	if (rev_moving) {
 8007538:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80cb 	beq.w	80076d8 <update_joy_mode_velocity_control+0x5e0>
		// Moving - use velocity control
		revolute_axis.vel_error = rev_command_vel
				- revolute_axis.kalman_velocity;
 8007542:	4b5a      	ldr	r3, [pc, #360]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 8007544:	edd3 7a07 	vldr	s15, [r3, #28]
 8007548:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800754c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = rev_command_vel
 8007550:	4b56      	ldr	r3, [pc, #344]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 8007552:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8007556:	4b55      	ldr	r3, [pc, #340]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 8007558:	edd3 7a06 	vldr	s15, [r3, #24]
 800755c:	eeb0 0a67 	vmov.f32	s0, s15
 8007560:	4853      	ldr	r0, [pc, #332]	@ (80076b0 <update_joy_mode_velocity_control+0x5b8>)
 8007562:	f7f9 fe59 	bl	8001218 <PID_CONTROLLER_Compute>
 8007566:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 800756a:	4b52      	ldr	r3, [pc, #328]	@ (80076b4 <update_joy_mode_velocity_control+0x5bc>)
 800756c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	f7f9 faa6 	bl	8000ac4 <__aeabi_d2iz>
 8007578:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800757a:	4b4e      	ldr	r3, [pc, #312]	@ (80076b4 <update_joy_mode_velocity_control+0x5bc>)
 800757c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007580:	61ba      	str	r2, [r7, #24]
 8007582:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007586:	61fb      	str	r3, [r7, #28]
		revolute_axis.command_pos = PWM_Satuation(
 8007588:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800758c:	f7f9 fa9a 	bl	8000ac4 <__aeabi_d2iz>
 8007590:	4603      	mov	r3, r0
 8007592:	4619      	mov	r1, r3
 8007594:	4620      	mov	r0, r4
 8007596:	eeb0 0a48 	vmov.f32	s0, s16
 800759a:	f7f9 fddb 	bl	8001154 <PWM_Satuation>
 800759e:	ee07 0a90 	vmov	s15, r0
 80075a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075a6:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 80075a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80075ac:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80075b0:	4841      	ldr	r0, [pc, #260]	@ (80076b8 <update_joy_mode_velocity_control+0x5c0>)
 80075b2:	f7f9 fff1 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80075b6:	eef0 7a40 	vmov.f32	s15, s0
 80075ba:	4b3c      	ldr	r3, [pc, #240]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 80075bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				rev_command_vel);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80075c0:	4b3e      	ldr	r3, [pc, #248]	@ (80076bc <update_joy_mode_velocity_control+0x5c4>)
 80075c2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80075c6:	4b35      	ldr	r3, [pc, #212]	@ (800769c <update_joy_mode_velocity_control+0x5a4>)
 80075c8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80075cc:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80076c0 <update_joy_mode_velocity_control+0x5c8>
 80075d0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80075d4:	eef0 0a66 	vmov.f32	s1, s13
 80075d8:	eeb0 0a47 	vmov.f32	s0, s14
 80075dc:	4839      	ldr	r0, [pc, #228]	@ (80076c4 <update_joy_mode_velocity_control+0x5cc>)
 80075de:	f7fa f86e 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80075e2:	eef0 7a40 	vmov.f32	s15, s0
 80075e6:	4b31      	ldr	r3, [pc, #196]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 80075e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		static float ffd_filtered = 0.0f;
		static float dfd_filtered = 0.0f;

		ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80075ec:	4b36      	ldr	r3, [pc, #216]	@ (80076c8 <update_joy_mode_velocity_control+0x5d0>)
 80075ee:	edd3 7a00 	vldr	s15, [r3]
 80075f2:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80076cc <update_joy_mode_velocity_control+0x5d4>
 80075f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80075fa:	4b2c      	ldr	r3, [pc, #176]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 80075fc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007600:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80076d0 <update_joy_mode_velocity_control+0x5d8>
 8007604:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800760c:	4b2e      	ldr	r3, [pc, #184]	@ (80076c8 <update_joy_mode_velocity_control+0x5d0>)
 800760e:	edc3 7a00 	vstr	s15, [r3]
		dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8007612:	4b30      	ldr	r3, [pc, #192]	@ (80076d4 <update_joy_mode_velocity_control+0x5dc>)
 8007614:	edd3 7a00 	vldr	s15, [r3]
 8007618:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80076cc <update_joy_mode_velocity_control+0x5d4>
 800761c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007620:	4b22      	ldr	r3, [pc, #136]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 8007622:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007626:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80076d0 <update_joy_mode_velocity_control+0x5d8>
 800762a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800762e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007632:	4b28      	ldr	r3, [pc, #160]	@ (80076d4 <update_joy_mode_velocity_control+0x5dc>)
 8007634:	edc3 7a00 	vstr	s15, [r3]

		revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8007638:	4b1c      	ldr	r3, [pc, #112]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	4618      	mov	r0, r3
 800763e:	f7f8 ff4f 	bl	80004e0 <__aeabi_f2d>
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	4b23      	ldr	r3, [pc, #140]	@ (80076d4 <update_joy_mode_velocity_control+0x5dc>)
 8007648:	ed93 7a00 	vldr	s14, [r3]
 800764c:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <update_joy_mode_velocity_control+0x5d0>)
 800764e:	edd3 7a00 	vldr	s15, [r3]
 8007652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007656:	ee17 0a90 	vmov	r0, s15
 800765a:	f7f8 ff41 	bl	80004e0 <__aeabi_f2d>
 800765e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007690 <update_joy_mode_velocity_control+0x598>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f8 ff94 	bl	8000590 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 fdd8 	bl	8000224 <__adddf3>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4610      	mov	r0, r2
 800767a:	4619      	mov	r1, r3
 800767c:	f7f9 fa6a 	bl	8000b54 <__aeabi_d2f>
 8007680:	4603      	mov	r3, r0
 8007682:	4a0a      	ldr	r2, [pc, #40]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 8007684:	6253      	str	r3, [r2, #36]	@ 0x24

		// Update target position for when we stop moving
		revolute_axis.position = revolute_encoder.rads;
 8007686:	4b0d      	ldr	r3, [pc, #52]	@ (80076bc <update_joy_mode_velocity_control+0x5c4>)
 8007688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768a:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <update_joy_mode_velocity_control+0x5b4>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e0ed      	b.n	800786c <update_joy_mode_velocity_control+0x774>
 8007690:	47ae147b 	.word	0x47ae147b
 8007694:	3f847ae1 	.word	0x3f847ae1
 8007698:	20000280 	.word	0x20000280
 800769c:	20000494 	.word	0x20000494
 80076a0:	2000054c 	.word	0x2000054c
 80076a4:	20000080 	.word	0x20000080
 80076a8:	20000574 	.word	0x20000574
 80076ac:	200002c4 	.word	0x200002c4
 80076b0:	200005c4 	.word	0x200005c4
 80076b4:	20000000 	.word	0x20000000
 80076b8:	20000620 	.word	0x20000620
 80076bc:	200004f0 	.word	0x200004f0
 80076c0:	447a0000 	.word	0x447a0000
 80076c4:	20000624 	.word	0x20000624
 80076c8:	200003f4 	.word	0x200003f4
 80076cc:	3f4ccccd 	.word	0x3f4ccccd
 80076d0:	3e4ccccd 	.word	0x3e4ccccd
 80076d4:	200003f8 	.word	0x200003f8
	} else {
		// Not moving - hold current position with position control
		revolute_axis.position = revolute_encoder.rads;
 80076d8:	4b84      	ldr	r3, [pc, #528]	@ (80078ec <update_joy_mode_velocity_control+0x7f4>)
 80076da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076dc:	4a84      	ldr	r2, [pc, #528]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80076de:	6013      	str	r3, [r2, #0]

		float normalized_position = normalize_angle(revolute_encoder.rads);
 80076e0:	4b82      	ldr	r3, [pc, #520]	@ (80078ec <update_joy_mode_velocity_control+0x7f4>)
 80076e2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80076e6:	eeb0 0a67 	vmov.f32	s0, s15
 80076ea:	f7fe fa8f 	bl	8005c0c <normalize_angle>
 80076ee:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80076f2:	4b7f      	ldr	r3, [pc, #508]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80076f4:	ed93 7a00 	vldr	s14, [r3]
 80076f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80076fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007700:	4b7b      	ldr	r3, [pc, #492]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007702:	edc3 7a05 	vstr	s15, [r3, #20]

		// Handle angle wrapping for position error
		if (revolute_axis.pos_error > PI)
 8007706:	4b7a      	ldr	r3, [pc, #488]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007708:	edd3 7a05 	vldr	s15, [r3, #20]
 800770c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80078f4 <update_joy_mode_velocity_control+0x7fc>
 8007710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	dd09      	ble.n	800772e <update_joy_mode_velocity_control+0x636>
			revolute_axis.pos_error -= 2.0f * PI;
 800771a:	4b75      	ldr	r3, [pc, #468]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800771c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007720:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80078f8 <update_joy_mode_velocity_control+0x800>
 8007724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007728:	4b71      	ldr	r3, [pc, #452]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800772a:	edc3 7a05 	vstr	s15, [r3, #20]
		if (revolute_axis.pos_error < -PI)
 800772e:	4b70      	ldr	r3, [pc, #448]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007730:	edd3 7a05 	vldr	s15, [r3, #20]
 8007734:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80078fc <update_joy_mode_velocity_control+0x804>
 8007738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	d509      	bpl.n	8007756 <update_joy_mode_velocity_control+0x65e>
			revolute_axis.pos_error += 2.0f * PI;
 8007742:	4b6b      	ldr	r3, [pc, #428]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007744:	edd3 7a05 	vldr	s15, [r3, #20]
 8007748:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80078f8 <update_joy_mode_velocity_control+0x800>
 800774c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007750:	4b67      	ldr	r3, [pc, #412]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007752:	edc3 7a05 	vstr	s15, [r3, #20]

		revolute_axis.command_vel = PWM_Satuation(
 8007756:	4b66      	ldr	r3, [pc, #408]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007758:	edd3 7a05 	vldr	s15, [r3, #20]
 800775c:	eeb0 0a67 	vmov.f32	s0, s15
 8007760:	4867      	ldr	r0, [pc, #412]	@ (8007900 <update_joy_mode_velocity_control+0x808>)
 8007762:	f7f9 fd59 	bl	8001218 <PID_CONTROLLER_Compute>
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_position_pid,
						revolute_axis.pos_error),
				ZGX45RGG_150RPM_Constant.qd_max,
 800776a:	4b66      	ldr	r3, [pc, #408]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 800776c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		revolute_axis.command_vel = PWM_Satuation(
 8007770:	4610      	mov	r0, r2
 8007772:	4619      	mov	r1, r3
 8007774:	f7f9 f9a6 	bl	8000ac4 <__aeabi_d2iz>
 8007778:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.qd_max);
 800777a:	4b62      	ldr	r3, [pc, #392]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 800777c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007780:	613a      	str	r2, [r7, #16]
 8007782:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007786:	617b      	str	r3, [r7, #20]
		revolute_axis.command_vel = PWM_Satuation(
 8007788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800778c:	f7f9 f99a 	bl	8000ac4 <__aeabi_d2iz>
 8007790:	4603      	mov	r3, r0
 8007792:	4619      	mov	r1, r3
 8007794:	4620      	mov	r0, r4
 8007796:	eeb0 0a48 	vmov.f32	s0, s16
 800779a:	f7f9 fcdb 	bl	8001154 <PWM_Satuation>
 800779e:	ee07 0a90 	vmov	s15, r0
 80077a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077a6:	4b52      	ldr	r3, [pc, #328]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80077a8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		revolute_axis.vel_error = revolute_axis.command_vel
 80077ac:	4b50      	ldr	r3, [pc, #320]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80077ae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80077b2:	4b4f      	ldr	r3, [pc, #316]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80077b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80077b8:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80077bc:	4b4c      	ldr	r3, [pc, #304]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80077be:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 80077c2:	4b4b      	ldr	r3, [pc, #300]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80077c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80077c8:	eeb0 0a67 	vmov.f32	s0, s15
 80077cc:	484e      	ldr	r0, [pc, #312]	@ (8007908 <update_joy_mode_velocity_control+0x810>)
 80077ce:	f7f9 fd23 	bl	8001218 <PID_CONTROLLER_Compute>
 80077d2:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 80077d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 80077d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 80077dc:	4610      	mov	r0, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	f7f9 f970 	bl	8000ac4 <__aeabi_d2iz>
 80077e4:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80077e6:	4b47      	ldr	r3, [pc, #284]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 80077e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80077ec:	60ba      	str	r2, [r7, #8]
 80077ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80077f2:	60fb      	str	r3, [r7, #12]
		revolute_axis.command_pos = PWM_Satuation(
 80077f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077f8:	f7f9 f964 	bl	8000ac4 <__aeabi_d2iz>
 80077fc:	4603      	mov	r3, r0
 80077fe:	4619      	mov	r1, r3
 8007800:	4620      	mov	r0, r4
 8007802:	eeb0 0a48 	vmov.f32	s0, s16
 8007806:	f7f9 fca5 	bl	8001154 <PWM_Satuation>
 800780a:	ee07 0a90 	vmov	s15, r0
 800780e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007812:	4b37      	ldr	r3, [pc, #220]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007814:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Always include DFD for gravity compensation, but no FFD when holding
		revolute_axis.ffd = 0.0f;
 8007818:	4b35      	ldr	r3, [pc, #212]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007820:	4b32      	ldr	r3, [pc, #200]	@ (80078ec <update_joy_mode_velocity_control+0x7f4>)
 8007822:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007826:	4b39      	ldr	r3, [pc, #228]	@ (800790c <update_joy_mode_velocity_control+0x814>)
 8007828:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800782c:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8007910 <update_joy_mode_velocity_control+0x818>
 8007830:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007834:	eef0 0a66 	vmov.f32	s1, s13
 8007838:	eeb0 0a47 	vmov.f32	s0, s14
 800783c:	4835      	ldr	r0, [pc, #212]	@ (8007914 <update_joy_mode_velocity_control+0x81c>)
 800783e:	f7f9 ff3e 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007842:	eef0 7a40 	vmov.f32	s15, s0
 8007846:	4b2a      	ldr	r3, [pc, #168]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007848:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	    revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 800784c:	4b28      	ldr	r3, [pc, #160]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800784e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007852:	4b27      	ldr	r3, [pc, #156]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007854:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007858:	4b25      	ldr	r3, [pc, #148]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800785a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007866:	4b22      	ldr	r3, [pc, #136]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 8007868:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800786c:	4b20      	ldr	r3, [pc, #128]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 800786e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007872:	4b24      	ldr	r3, [pc, #144]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 8007874:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007878:	4610      	mov	r0, r2
 800787a:	4619      	mov	r1, r3
 800787c:	f7f9 f922 	bl	8000ac4 <__aeabi_d2iz>
 8007880:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007882:	4b20      	ldr	r3, [pc, #128]	@ (8007904 <update_joy_mode_velocity_control+0x80c>)
 8007884:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007888:	603a      	str	r2, [r7, #0]
 800788a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800788e:	607b      	str	r3, [r7, #4]
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007894:	f7f9 f916 	bl	8000ac4 <__aeabi_d2iz>
 8007898:	4603      	mov	r3, r0
 800789a:	4619      	mov	r1, r3
 800789c:	4620      	mov	r0, r4
 800789e:	eeb0 0a48 	vmov.f32	s0, s16
 80078a2:	f7f9 fc57 	bl	8001154 <PWM_Satuation>
 80078a6:	ee07 0a90 	vmov	s15, r0
 80078aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ae:	4b10      	ldr	r3, [pc, #64]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80078b0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80078b4:	4b18      	ldr	r3, [pc, #96]	@ (8007918 <update_joy_mode_velocity_control+0x820>)
 80078b6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80078ba:	eef0 0a67 	vmov.f32	s1, s15
 80078be:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800791c <update_joy_mode_velocity_control+0x824>
 80078c2:	4817      	ldr	r0, [pc, #92]	@ (8007920 <update_joy_mode_velocity_control+0x828>)
 80078c4:	f7f9 fd80 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80078c8:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <update_joy_mode_velocity_control+0x7f8>)
 80078ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80078ce:	eef0 0a67 	vmov.f32	s1, s15
 80078d2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800791c <update_joy_mode_velocity_control+0x824>
 80078d6:	4813      	ldr	r0, [pc, #76]	@ (8007924 <update_joy_mode_velocity_control+0x82c>)
 80078d8:	f7f9 fd76 	bl	80013c8 <MDXX_set_range>
}
 80078dc:	bf00      	nop
 80078de:	3744      	adds	r7, #68	@ 0x44
 80078e0:	46bd      	mov	sp, r7
 80078e2:	ecbd 8b02 	vpop	{d8}
 80078e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ea:	bf00      	nop
 80078ec:	200004f0 	.word	0x200004f0
 80078f0:	200002c4 	.word	0x200002c4
 80078f4:	40490fdb 	.word	0x40490fdb
 80078f8:	40c90fdb 	.word	0x40c90fdb
 80078fc:	c0490fdb 	.word	0xc0490fdb
 8007900:	2000059c 	.word	0x2000059c
 8007904:	20000000 	.word	0x20000000
 8007908:	200005c4 	.word	0x200005c4
 800790c:	20000494 	.word	0x20000494
 8007910:	447a0000 	.word	0x447a0000
 8007914:	20000624 	.word	0x20000624
 8007918:	20000280 	.word	0x20000280
 800791c:	44fa0000 	.word	0x44fa0000
 8007920:	200003fc 	.word	0x200003fc
 8007924:	20000448 	.word	0x20000448

08007928 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 800792c:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <update_joy_mode_pilot_light+0x58>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d122      	bne.n	800797a <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8007934:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <update_joy_mode_pilot_light+0x5c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a12      	ldr	r2, [pc, #72]	@ (8007984 <update_joy_mode_pilot_light+0x5c>)
 800793c:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 800793e:	4b11      	ldr	r3, [pc, #68]	@ (8007984 <update_joy_mode_pilot_light+0x5c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007946:	d318      	bcc.n	800797a <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800794c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007950:	f004 fc98 	bl	800c284 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <update_joy_mode_pilot_light+0x60>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f083 0301 	eor.w	r3, r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <update_joy_mode_pilot_light+0x60>)
 8007972:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007974:	4b03      	ldr	r3, [pc, #12]	@ (8007984 <update_joy_mode_pilot_light+0x5c>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
		}
	}
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000384 	.word	0x20000384
 8007984:	200003dc 	.word	0x200003dc
 8007988:	200003e0 	.word	0x200003e0

0800798c <update_joy_mode>:

void update_joy_mode(void) {
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	ed2d 8b02 	vpush	{d8}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8007996:	4b8f      	ldr	r3, [pc, #572]	@ (8007bd4 <update_joy_mode+0x248>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f083 0301 	eor.w	r3, r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 81c2 	bne.w	8007d2a <update_joy_mode+0x39e>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 80079a6:	4b8c      	ldr	r3, [pc, #560]	@ (8007bd8 <update_joy_mode+0x24c>)
 80079a8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80079ac:	eeb0 0a67 	vmov.f32	s0, s15
 80079b0:	f7fe f92c 	bl	8005c0c <normalize_angle>
 80079b4:	eef0 7a40 	vmov.f32	s15, s0
 80079b8:	4b88      	ldr	r3, [pc, #544]	@ (8007bdc <update_joy_mode+0x250>)
 80079ba:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 80079be:	4b88      	ldr	r3, [pc, #544]	@ (8007be0 <update_joy_mode+0x254>)
 80079c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c2:	4a88      	ldr	r2, [pc, #544]	@ (8007be4 <update_joy_mode+0x258>)
 80079c4:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80079c6:	4b85      	ldr	r3, [pc, #532]	@ (8007bdc <update_joy_mode+0x250>)
 80079c8:	edd3 7a00 	vldr	s15, [r3]
 80079cc:	220e      	movs	r2, #14
 80079ce:	210f      	movs	r1, #15
 80079d0:	eeb0 0a67 	vmov.f32	s0, s15
 80079d4:	4884      	ldr	r0, [pc, #528]	@ (8007be8 <update_joy_mode+0x25c>)
 80079d6:	f7fc fe7b 	bl	80046d0 <UnitConverter_angle>
 80079da:	eef0 7a40 	vmov.f32	s15, s0
 80079de:	4b83      	ldr	r3, [pc, #524]	@ (8007bec <update_joy_mode+0x260>)
 80079e0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 80079e4:	4b82      	ldr	r3, [pc, #520]	@ (8007bf0 <update_joy_mode+0x264>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	f200 819f 	bhi.w	8007d2e <update_joy_mode+0x3a2>
 80079f0:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <update_joy_mode+0x6c>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a13 	.word	0x08007a13
 8007a00:	08007a19 	.word	0x08007a19
 8007a04:	08007a1f 	.word	0x08007a1f
 8007a08:	08007d25 	.word	0x08007d25
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8007a0c:	f7ff fb74 	bl	80070f8 <update_joy_mode_velocity_control>
		break;
 8007a10:	e190      	b.n	8007d34 <update_joy_mode+0x3a8>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8007a12:	f7ff fb71 	bl	80070f8 <update_joy_mode_velocity_control>
		break;
 8007a16:	e18d      	b.n	8007d34 <update_joy_mode+0x3a8>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8007a18:	f7ff ff86 	bl	8007928 <update_joy_mode_pilot_light>
		break;
 8007a1c:	e18a      	b.n	8007d34 <update_joy_mode+0x3a8>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8007a1e:	4b75      	ldr	r3, [pc, #468]	@ (8007bf4 <update_joy_mode+0x268>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b05      	cmp	r3, #5
 8007a24:	f200 8166 	bhi.w	8007cf4 <update_joy_mode+0x368>
 8007a28:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <update_joy_mode+0xa4>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007acd 	.word	0x08007acd
 8007a38:	08007af1 	.word	0x08007af1
 8007a3c:	08007c29 	.word	0x08007c29
 8007a40:	08007ccf 	.word	0x08007ccf
 8007a44:	08007ced 	.word	0x08007ced
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 8007a48:	4b6b      	ldr	r3, [pc, #428]	@ (8007bf8 <update_joy_mode+0x26c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a6a      	ldr	r2, [pc, #424]	@ (8007bf8 <update_joy_mode+0x26c>)
 8007a50:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8007a52:	4b69      	ldr	r3, [pc, #420]	@ (8007bf8 <update_joy_mode+0x26c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007a5a:	f0c0 814d 	bcc.w	8007cf8 <update_joy_mode+0x36c>
				playback_position_index++;
 8007a5e:	4b67      	ldr	r3, [pc, #412]	@ (8007bfc <update_joy_mode+0x270>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	4b65      	ldr	r3, [pc, #404]	@ (8007bfc <update_joy_mode+0x270>)
 8007a68:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 8007a6a:	4b64      	ldr	r3, [pc, #400]	@ (8007bfc <update_joy_mode+0x270>)
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	4b64      	ldr	r3, [pc, #400]	@ (8007c00 <update_joy_mode+0x274>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d224      	bcs.n	8007ac0 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8007a76:	4b61      	ldr	r3, [pc, #388]	@ (8007bfc <update_joy_mode+0x270>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 8007a7a:	4a62      	ldr	r2, [pc, #392]	@ (8007c04 <update_joy_mode+0x278>)
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	4413      	add	r3, r2
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8007a84:	4b5d      	ldr	r3, [pc, #372]	@ (8007bfc <update_joy_mode+0x270>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8007a88:	4a5e      	ldr	r2, [pc, #376]	@ (8007c04 <update_joy_mode+0x278>)
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3304      	adds	r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007a94:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a98:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8007c08 <update_joy_mode+0x27c>
 8007a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007aa0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8007c0c <update_joy_mode+0x280>
 8007aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007aa8:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 8007aac:	edd7 0a01 	vldr	s1, [r7, #4]
 8007ab0:	ed97 0a03 	vldr	s0, [r7, #12]
 8007ab4:	f7fe f994 	bl	8005de0 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8007ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <update_joy_mode+0x26c>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]

					// Start homing sequence after a short delay
					start_homing_sequence(false); // false = manual homing (not startup)
				}
			}
			break;
 8007abe:	e11b      	b.n	8007cf8 <update_joy_mode+0x36c>
					exit_joy_mode();
 8007ac0:	f7ff f9d0 	bl	8006e64 <exit_joy_mode>
					start_homing_sequence(false); // false = manual homing (not startup)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7fd fc7b 	bl	80053c0 <start_homing_sequence>
			break;
 8007aca:	e115      	b.n	8007cf8 <update_joy_mode+0x36c>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007acc:	4b50      	ldr	r3, [pc, #320]	@ (8007c10 <update_joy_mode+0x284>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8007c10 <update_joy_mode+0x284>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007ada:	4293      	cmp	r3, r2
 8007adc:	f240 810e 	bls.w	8007cfc <update_joy_mode+0x370>
				prismatic_axis.trajectory_active = true;
 8007ae0:	4b40      	ldr	r3, [pc, #256]	@ (8007be4 <update_joy_mode+0x258>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8007ae8:	4b42      	ldr	r3, [pc, #264]	@ (8007bf4 <update_joy_mode+0x268>)
 8007aea:	2202      	movs	r2, #2
 8007aec:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007aee:	e105      	b.n	8007cfc <update_joy_mode+0x370>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007af0:	4b3c      	ldr	r3, [pc, #240]	@ (8007be4 <update_joy_mode+0x258>)
 8007af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8102 	beq.w	8007d00 <update_joy_mode+0x374>
 8007afc:	4b45      	ldr	r3, [pc, #276]	@ (8007c14 <update_joy_mode+0x288>)
 8007afe:	7c1b      	ldrb	r3, [r3, #16]
 8007b00:	f083 0301 	eor.w	r3, r3, #1
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80fa 	beq.w	8007d00 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007b0c:	4b35      	ldr	r3, [pc, #212]	@ (8007be4 <update_joy_mode+0x258>)
 8007b0e:	ed93 8a03 	vldr	s16, [r3, #12]
 8007b12:	4b34      	ldr	r3, [pc, #208]	@ (8007be4 <update_joy_mode+0x258>)
 8007b14:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007b18:	4b3f      	ldr	r3, [pc, #252]	@ (8007c18 <update_joy_mode+0x28c>)
 8007b1a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7f9 f817 	bl	8000b54 <__aeabi_d2f>
 8007b26:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007b28:	4b3b      	ldr	r3, [pc, #236]	@ (8007c18 <update_joy_mode+0x28c>)
 8007b2a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7f9 f80f 	bl	8000b54 <__aeabi_d2f>
 8007b36:	4603      	mov	r3, r0
 8007b38:	ee01 3a90 	vmov	s3, r3
 8007b3c:	ee01 4a10 	vmov	s2, r4
 8007b40:	eef0 0a68 	vmov.f32	s1, s17
 8007b44:	eeb0 0a48 	vmov.f32	s0, s16
 8007b48:	4932      	ldr	r1, [pc, #200]	@ (8007c14 <update_joy_mode+0x288>)
 8007b4a:	4834      	ldr	r0, [pc, #208]	@ (8007c1c <update_joy_mode+0x290>)
 8007b4c:	f7fc fa28 	bl	8003fa0 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8007b50:	4b30      	ldr	r3, [pc, #192]	@ (8007c14 <update_joy_mode+0x288>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a23      	ldr	r2, [pc, #140]	@ (8007be4 <update_joy_mode+0x258>)
 8007b56:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8007b58:	4b2e      	ldr	r3, [pc, #184]	@ (8007c14 <update_joy_mode+0x288>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a21      	ldr	r2, [pc, #132]	@ (8007be4 <update_joy_mode+0x258>)
 8007b5e:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8007b60:	4b2c      	ldr	r3, [pc, #176]	@ (8007c14 <update_joy_mode+0x288>)
 8007b62:	7c1b      	ldrb	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80cb 	beq.w	8007d00 <update_joy_mode+0x374>
					prismatic_axis.trajectory_active = false;
 8007b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8007be4 <update_joy_mode+0x258>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 8007b72:	4b28      	ldr	r3, [pc, #160]	@ (8007c14 <update_joy_mode+0x288>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1b      	ldr	r2, [pc, #108]	@ (8007be4 <update_joy_mode+0x258>)
 8007b78:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007be4 <update_joy_mode+0x258>)
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007b82:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <update_joy_mode+0x260>)
 8007b84:	ed93 8a03 	vldr	s16, [r3, #12]
 8007b88:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <update_joy_mode+0x260>)
 8007b8a:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007b8e:	4b24      	ldr	r3, [pc, #144]	@ (8007c20 <update_joy_mode+0x294>)
 8007b90:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007b94:	4610      	mov	r0, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	f7f8 ffdc 	bl	8000b54 <__aeabi_d2f>
 8007b9c:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007b9e:	4b20      	ldr	r3, [pc, #128]	@ (8007c20 <update_joy_mode+0x294>)
 8007ba0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f7f8 ffd4 	bl	8000b54 <__aeabi_d2f>
 8007bac:	4603      	mov	r3, r0
 8007bae:	ee01 3a90 	vmov	s3, r3
 8007bb2:	ee01 4a10 	vmov	s2, r4
 8007bb6:	eef0 0a68 	vmov.f32	s1, s17
 8007bba:	eeb0 0a48 	vmov.f32	s0, s16
 8007bbe:	4819      	ldr	r0, [pc, #100]	@ (8007c24 <update_joy_mode+0x298>)
 8007bc0:	f7fc f92c 	bl	8003e1c <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8007bc4:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <update_joy_mode+0x260>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8007bcc:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <update_joy_mode+0x268>)
 8007bce:	2203      	movs	r2, #3
 8007bd0:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007bd2:	e095      	b.n	8007d00 <update_joy_mode+0x374>
 8007bd4:	20000385 	.word	0x20000385
 8007bd8:	200004f0 	.word	0x200004f0
 8007bdc:	2000037c 	.word	0x2000037c
 8007be0:	20000494 	.word	0x20000494
 8007be4:	20000280 	.word	0x20000280
 8007be8:	20000888 	.word	0x20000888
 8007bec:	200002c4 	.word	0x200002c4
 8007bf0:	20000384 	.word	0x20000384
 8007bf4:	20000308 	.word	0x20000308
 8007bf8:	200003e4 	.word	0x200003e4
 8007bfc:	200003d9 	.word	0x200003d9
 8007c00:	200003d8 	.word	0x200003d8
 8007c04:	20000388 	.word	0x20000388
 8007c08:	43340000 	.word	0x43340000
 8007c0c:	40490fdb 	.word	0x40490fdb
 8007c10:	20000360 	.word	0x20000360
 8007c14:	20000334 	.word	0x20000334
 8007c18:	20000080 	.word	0x20000080
 8007c1c:	2000030c 	.word	0x2000030c
 8007c20:	20000000 	.word	0x20000000
 8007c24:	20000320 	.word	0x20000320

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007c28:	4b45      	ldr	r3, [pc, #276]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d068      	beq.n	8007d04 <update_joy_mode+0x378>
 8007c32:	4b44      	ldr	r3, [pc, #272]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007c34:	7c1b      	ldrb	r3, [r3, #16]
 8007c36:	f083 0301 	eor.w	r3, r3, #1
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d061      	beq.n	8007d04 <update_joy_mode+0x378>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007c40:	4b3f      	ldr	r3, [pc, #252]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c42:	ed93 8a03 	vldr	s16, [r3, #12]
 8007c46:	4b3e      	ldr	r3, [pc, #248]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c48:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d48 <update_joy_mode+0x3bc>)
 8007c4e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	f7f8 ff7d 	bl	8000b54 <__aeabi_d2f>
 8007c5a:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d48 <update_joy_mode+0x3bc>)
 8007c5e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007c62:	4610      	mov	r0, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	f7f8 ff75 	bl	8000b54 <__aeabi_d2f>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	ee01 3a90 	vmov	s3, r3
 8007c70:	ee01 4a10 	vmov	s2, r4
 8007c74:	eef0 0a68 	vmov.f32	s1, s17
 8007c78:	eeb0 0a48 	vmov.f32	s0, s16
 8007c7c:	4931      	ldr	r1, [pc, #196]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007c7e:	4833      	ldr	r0, [pc, #204]	@ (8007d4c <update_joy_mode+0x3c0>)
 8007c80:	f7fc f98e 	bl	8003fa0 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8007c84:	4b2f      	ldr	r3, [pc, #188]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2d      	ldr	r2, [pc, #180]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c8a:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4a2b      	ldr	r2, [pc, #172]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c92:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007c96:	7c1b      	ldrb	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d033      	beq.n	8007d04 <update_joy_mode+0x378>
					revolute_axis.trajectory_active = false;
 8007c9c:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8007ca4:	4b27      	ldr	r3, [pc, #156]	@ (8007d44 <update_joy_mode+0x3b8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a25      	ldr	r2, [pc, #148]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007caa:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007cac:	4b24      	ldr	r3, [pc, #144]	@ (8007d40 <update_joy_mode+0x3b4>)
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 8007cb4:	4826      	ldr	r0, [pc, #152]	@ (8007d50 <update_joy_mode+0x3c4>)
 8007cb6:	f7f9 fb41 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007cba:	4826      	ldr	r0, [pc, #152]	@ (8007d54 <update_joy_mode+0x3c8>)
 8007cbc:	f7f9 fb3e 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 8007cc0:	4b25      	ldr	r3, [pc, #148]	@ (8007d58 <update_joy_mode+0x3cc>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007cc6:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <update_joy_mode+0x3d0>)
 8007cc8:	2204      	movs	r2, #4
 8007cca:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007ccc:	e01a      	b.n	8007d04 <update_joy_mode+0x378>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007cce:	4b22      	ldr	r3, [pc, #136]	@ (8007d58 <update_joy_mode+0x3cc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a20      	ldr	r2, [pc, #128]	@ (8007d58 <update_joy_mode+0x3cc>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d913      	bls.n	8007d08 <update_joy_mode+0x37c>
				plotter_pen_down();
 8007ce0:	f000 ff70 	bl	8008bc4 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8007ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8007d5c <update_joy_mode+0x3d0>)
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007cea:	e00d      	b.n	8007d08 <update_joy_mode+0x37c>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8007cec:	4b1b      	ldr	r3, [pc, #108]	@ (8007d5c <update_joy_mode+0x3d0>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
			break;
 8007cf2:	e00a      	b.n	8007d0a <update_joy_mode+0x37e>

		default:
			break;
 8007cf4:	bf00      	nop
 8007cf6:	e008      	b.n	8007d0a <update_joy_mode+0x37e>
			break;
 8007cf8:	bf00      	nop
 8007cfa:	e006      	b.n	8007d0a <update_joy_mode+0x37e>
			break;
 8007cfc:	bf00      	nop
 8007cfe:	e004      	b.n	8007d0a <update_joy_mode+0x37e>
			break;
 8007d00:	bf00      	nop
 8007d02:	e002      	b.n	8007d0a <update_joy_mode+0x37e>
			break;
 8007d04:	bf00      	nop
 8007d06:	e000      	b.n	8007d0a <update_joy_mode+0x37e>
			break;
 8007d08:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8007d0a:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <update_joy_mode+0x3d0>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00f      	beq.n	8007d32 <update_joy_mode+0x3a6>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007d12:	4b13      	ldr	r3, [pc, #76]	@ (8007d60 <update_joy_mode+0x3d4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d901      	bls.n	8007d1e <update_joy_mode+0x392>
				update_position_control();
 8007d1a:	f7fe f99b 	bl	8006054 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 8007d1e:	f7fe fa57 	bl	80061d0 <update_velocity_control>
		}
		break;
 8007d22:	e006      	b.n	8007d32 <update_joy_mode+0x3a6>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8007d24:	f7ff f89e 	bl	8006e64 <exit_joy_mode>
		break;
 8007d28:	e004      	b.n	8007d34 <update_joy_mode+0x3a8>
		return;
 8007d2a:	bf00      	nop
 8007d2c:	e002      	b.n	8007d34 <update_joy_mode+0x3a8>

	default:
		break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <update_joy_mode+0x3a8>
		break;
 8007d32:	bf00      	nop
	}
}
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	ecbd 8b02 	vpop	{d8}
 8007d3c:	bd90      	pop	{r4, r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200002c4 	.word	0x200002c4
 8007d44:	20000348 	.word	0x20000348
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	20000320 	.word	0x20000320
 8007d50:	2000059c 	.word	0x2000059c
 8007d54:	200005c4 	.word	0x200005c4
 8007d58:	20000360 	.word	0x20000360
 8007d5c:	20000308 	.word	0x20000308
 8007d60:	20000378 	.word	0x20000378

08007d64 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d6e:	482c      	ldr	r0, [pc, #176]	@ (8007e20 <handle_b2_button_polling+0xbc>)
 8007d70:	f004 fa58 	bl	800c224 <HAL_GPIO_ReadPin>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	71fb      	strb	r3, [r7, #7]

	// Simple edge detection without debounce timer here
	if (b2_current_state && !joy_mode_b2_last_state) {
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d03b      	beq.n	8007dfe <handle_b2_button_polling+0x9a>
 8007d86:	4b27      	ldr	r3, [pc, #156]	@ (8007e24 <handle_b2_button_polling+0xc0>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d034      	beq.n	8007dfe <handle_b2_button_polling+0x9a>
		// Button just pressed - trigger action immediately
		joy_mode_b2_pressed = true;
 8007d94:	4b24      	ldr	r3, [pc, #144]	@ (8007e28 <handle_b2_button_polling+0xc4>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]

		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 8007d9a:	f7fe ffe1 	bl	8006d60 <is_emergency_active>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f083 0301 	eor.w	r3, r3, #1
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d029      	beq.n	8007dfe <handle_b2_button_polling+0x9a>
 8007daa:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <handle_b2_button_polling+0xc8>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	f083 0301 	eor.w	r3, r3, #1
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d022      	beq.n	8007dfe <handle_b2_button_polling+0x9a>
				&& motion_sequence_state == MOTION_IDLE) {
 8007db8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e30 <handle_b2_button_polling+0xcc>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11e      	bne.n	8007dfe <handle_b2_button_polling+0x9a>
			if (!joy_mode_active) {
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <handle_b2_button_polling+0xd0>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	f083 0301 	eor.w	r3, r3, #1
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <handle_b2_button_polling+0x70>
				// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
				enter_joy_mode();
 8007dce:	f7fe ffd7 	bl	8006d80 <enter_joy_mode>
 8007dd2:	e014      	b.n	8007dfe <handle_b2_button_polling+0x9a>
			} else {
				// Joy mode is active, handle button press based on current state
				if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8007dd4:	4b18      	ldr	r3, [pc, #96]	@ (8007e38 <handle_b2_button_polling+0xd4>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d103      	bne.n	8007de4 <handle_b2_button_polling+0x80>
					// First B2 press in joy mode - start position saving mode
					joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8007ddc:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <handle_b2_button_polling+0xd4>)
 8007dde:	2202      	movs	r2, #2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e00c      	b.n	8007dfe <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8007de4:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <handle_b2_button_polling+0xd4>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d102      	bne.n	8007df2 <handle_b2_button_polling+0x8e>
					// Save current position
					save_current_position();
 8007dec:	f7ff f8be 	bl	8006f6c <save_current_position>
 8007df0:	e005      	b.n	8007dfe <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007df2:	4b11      	ldr	r3, [pc, #68]	@ (8007e38 <handle_b2_button_polling+0xd4>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d101      	bne.n	8007dfe <handle_b2_button_polling+0x9a>
					// Start playback of saved positions
					start_position_playback();
 8007dfa:	f7ff f8f1 	bl	8006fe0 <start_position_playback>
			}
		}
	}

	// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8007dfe:	4a09      	ldr	r2, [pc, #36]	@ (8007e24 <handle_b2_button_polling+0xc0>)
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	7013      	strb	r3, [r2, #0]

	// Reset pressed flag when button is released
	if (!b2_current_state) {
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	f083 0301 	eor.w	r3, r3, #1
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <handle_b2_button_polling+0xb2>
		joy_mode_b2_pressed = false;
 8007e10:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <handle_b2_button_polling+0xc4>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
	}
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	48000800 	.word	0x48000800
 8007e24:	200003e9 	.word	0x200003e9
 8007e28:	200003e8 	.word	0x200003e8
 8007e2c:	2000036b 	.word	0x2000036b
 8007e30:	20000308 	.word	0x20000308
 8007e34:	20000385 	.word	0x20000385
 8007e38:	20000384 	.word	0x20000384

08007e3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	2b40      	cmp	r3, #64	@ 0x40
 8007e4a:	d105      	bne.n	8007e58 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8007e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8007f88 <HAL_GPIO_EXTI_Callback+0x14c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	4a4d      	ldr	r2, [pc, #308]	@ (8007f88 <HAL_GPIO_EXTI_Callback+0x14c>)
 8007e54:	6013      	str	r3, [r2, #0]
		return;
 8007e56:	e093      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d103      	bne.n	8007e66 <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8007e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f8c <HAL_GPIO_EXTI_Callback+0x150>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
		return;
 8007e64:	e08c      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6c:	d103      	bne.n	8007e76 <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8007e6e:	4b48      	ldr	r3, [pc, #288]	@ (8007f90 <HAL_GPIO_EXTI_Callback+0x154>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	701a      	strb	r2, [r3, #0]
		return;
 8007e74:	e084      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d102      	bne.n	8007e82 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8007e7c:	f7fe fe40 	bl	8006b00 <trigger_hardware_emergency>
		return;
 8007e80:	e07e      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	2b80      	cmp	r3, #128	@ 0x80
 8007e86:	d145      	bne.n	8007f14 <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8007e88:	f7fe ff6a 	bl	8006d60 <is_emergency_active>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f083 0301 	eor.w	r3, r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d06e      	beq.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
 8007e98:	4b3e      	ldr	r3, [pc, #248]	@ (8007f94 <HAL_GPIO_EXTI_Callback+0x158>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f083 0301 	eor.w	r3, r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d067      	beq.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
 8007ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8007f98 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	f083 0301 	eor.w	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d060      	beq.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8007eb4:	4b39      	ldr	r3, [pc, #228]	@ (8007f9c <HAL_GPIO_EXTI_Callback+0x160>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d15c      	bne.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
 8007ebc:	4b38      	ldr	r3, [pc, #224]	@ (8007fa0 <HAL_GPIO_EXTI_Callback+0x164>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f083 0301 	eor.w	r3, r3, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d055      	beq.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 8007eca:	4b36      	ldr	r3, [pc, #216]	@ (8007fa4 <HAL_GPIO_EXTI_Callback+0x168>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8007ece:	4a36      	ldr	r2, [pc, #216]	@ (8007fa8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8007ed8:	4b32      	ldr	r3, [pc, #200]	@ (8007fa4 <HAL_GPIO_EXTI_Callback+0x168>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8007edc:	4a33      	ldr	r2, [pc, #204]	@ (8007fac <HAL_GPIO_EXTI_Callback+0x170>)
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8007ee6:	eef0 0a47 	vmov.f32	s1, s14
 8007eea:	eeb0 0a67 	vmov.f32	s0, s15
 8007eee:	f7fd ff77 	bl	8005de0 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8007fa4 <HAL_GPIO_EXTI_Callback+0x168>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8007ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8007fb0 <HAL_GPIO_EXTI_Callback+0x174>)
 8007efa:	fb83 3102 	smull	r3, r1, r3, r2
 8007efe:	17d3      	asrs	r3, r2, #31
 8007f00:	1ac9      	subs	r1, r1, r3
 8007f02:	460b      	mov	r3, r1
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	440b      	add	r3, r1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007f0c:	b2ca      	uxtb	r2, r1
 8007f0e:	4b25      	ldr	r3, [pc, #148]	@ (8007fa4 <HAL_GPIO_EXTI_Callback+0x168>)
 8007f10:	701a      	strb	r2, [r3, #0]
		}
		return;
 8007f12:	e030      	b.n	8007f76 <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1a:	d116      	bne.n	8007f4a <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8007f1c:	f7fe ff20 	bl	8006d60 <is_emergency_active>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f083 0301 	eor.w	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d026      	beq.n	8007f7a <HAL_GPIO_EXTI_Callback+0x13e>
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f98 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f083 0301 	eor.w	r3, r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01f      	beq.n	8007f7a <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 8007f3a:	4b18      	ldr	r3, [pc, #96]	@ (8007f9c <HAL_GPIO_EXTI_Callback+0x160>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d11b      	bne.n	8007f7a <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 8007f42:	2000      	movs	r0, #0
 8007f44:	f7fd fa3c 	bl	80053c0 <start_homing_sequence>
		}
		return;
 8007f48:	e017      	b.n	8007f7a <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f50:	d116      	bne.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 8007f52:	4b11      	ldr	r3, [pc, #68]	@ (8007f98 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8007f5a:	f7fe ff83 	bl	8006e64 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8007f5e:	e00e      	b.n	8007f7e <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 8007f60:	f7fe fefe 	bl	8006d60 <is_emergency_active>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 8007f6a:	f7fe fe07 	bl	8006b7c <clear_emergency_state>
			start_homing_sequence(true);
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f7fd fa26 	bl	80053c0 <start_homing_sequence>
		return;
 8007f74:	e003      	b.n	8007f7e <HAL_GPIO_EXTI_Callback+0x142>
		return;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007f7e:	bf00      	nop
	}
}
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000364 	.word	0x20000364
 8007f8c:	20000368 	.word	0x20000368
 8007f90:	20000369 	.word	0x20000369
 8007f94:	2000036b 	.word	0x2000036b
 8007f98:	20000385 	.word	0x20000385
 8007f9c:	20000308 	.word	0x20000308
 8007fa0:	20000133 	.word	0x20000133
 8007fa4:	2000035c 	.word	0x2000035c
 8007fa8:	08013be0 	.word	0x08013be0
 8007fac:	08013bf8 	.word	0x08013bf8
 8007fb0:	2aaaaaab 	.word	0x2aaaaaab

08007fb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a9d      	ldr	r2, [pc, #628]	@ (8008234 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	f040 8133 	bne.w	800822c <HAL_TIM_PeriodElapsedCallback+0x278>
        plotter_update_sensors();
 8007fc6:	f000 fd47 	bl	8008a58 <plotter_update_sensors>

        check_emergency_button();
 8007fca:	f7fe fd09 	bl	80069e0 <check_emergency_button>

        QEI_get_diff_count(&prismatic_encoder);
 8007fce:	489a      	ldr	r0, [pc, #616]	@ (8008238 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007fd0:	f7fb fcde 	bl	8003990 <QEI_get_diff_count>
        QEI_compute_data(&prismatic_encoder);
 8007fd4:	4898      	ldr	r0, [pc, #608]	@ (8008238 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007fd6:	f7fb fdc7 	bl	8003b68 <QEI_compute_data>
        QEI_get_diff_count(&revolute_encoder);
 8007fda:	4898      	ldr	r0, [pc, #608]	@ (800823c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007fdc:	f7fb fcd8 	bl	8003990 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8007fe0:	4896      	ldr	r0, [pc, #600]	@ (800823c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007fe2:	f7fb fdc1 	bl	8003b68 <QEI_compute_data>

        revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8007fe6:	4b96      	ldr	r3, [pc, #600]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007fe8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007fec:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007ff0:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007ff4:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8008244 <HAL_TIM_PeriodElapsedCallback+0x290>
 8007ff8:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8008248 <HAL_TIM_PeriodElapsedCallback+0x294>
 8007ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8008000:	f7f9 ff33 	bl	8001e6a <mapf>
 8008004:	eef0 7a40 	vmov.f32	s15, s0
 8008008:	4b8d      	ldr	r3, [pc, #564]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800800a:	edc3 7a08 	vstr	s15, [r3, #32]
                65535.0f, -12.0f, 12.0f);
        revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 800800e:	4b8c      	ldr	r3, [pc, #560]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008010:	edd3 7a08 	vldr	s15, [r3, #32]
 8008014:	4b89      	ldr	r3, [pc, #548]	@ (800823c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008016:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800801a:	eef0 0a47 	vmov.f32	s1, s14
 800801e:	eeb0 0a67 	vmov.f32	s0, s15
 8008022:	488a      	ldr	r0, [pc, #552]	@ (800824c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8008024:	f7fc fdd0 	bl	8004bc8 <SteadyStateKalmanFilter>
 8008028:	eef0 7a40 	vmov.f32	s15, s0
 800802c:	4b84      	ldr	r3, [pc, #528]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800802e:	edc3 7a07 	vstr	s15, [r3, #28]
                &revolute_kalman, revolute_axis.input_voltage,
                revolute_encoder.rads);

        if (isnan(revolute_axis.kalman_velocity)) {
 8008032:	4b83      	ldr	r3, [pc, #524]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008034:	edd3 7a07 	vldr	s15, [r3, #28]
 8008038:	eef4 7a67 	vcmp.f32	s15, s15
 800803c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008040:	d703      	bvc.n	800804a <HAL_TIM_PeriodElapsedCallback+0x96>
            revolute_axis.kalman_velocity = 0.0f;
 8008042:	4b7f      	ldr	r3, [pc, #508]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	61da      	str	r2, [r3, #28]
        }

        prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 800804a:	4b81      	ldr	r3, [pc, #516]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800804c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008050:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008054:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008058:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008244 <HAL_TIM_PeriodElapsedCallback+0x290>
 800805c:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8008248 <HAL_TIM_PeriodElapsedCallback+0x294>
 8008060:	eeb0 0a67 	vmov.f32	s0, s15
 8008064:	f7f9 ff01 	bl	8001e6a <mapf>
 8008068:	eef0 7a40 	vmov.f32	s15, s0
 800806c:	4b78      	ldr	r3, [pc, #480]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800806e:	edc3 7a08 	vstr	s15, [r3, #32]
                -65535.0f, 65535.0f, -12.0f, 12.0f);
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008072:	4b77      	ldr	r3, [pc, #476]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008074:	edd3 7a08 	vldr	s15, [r3, #32]
 8008078:	4b6f      	ldr	r3, [pc, #444]	@ (8008238 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800807a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800807e:	eef0 0a47 	vmov.f32	s1, s14
 8008082:	eeb0 0a67 	vmov.f32	s0, s15
 8008086:	4873      	ldr	r0, [pc, #460]	@ (8008254 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008088:	f7fa febc 	bl	8002e04 <MotorKalman_Estimate>
 800808c:	eeb0 7a40 	vmov.f32	s14, s0
                prismatic_axis.input_voltage, prismatic_encoder.rads)
                * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008090:	4b71      	ldr	r3, [pc, #452]	@ (8008258 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008092:	edd3 7a04 	vldr	s15, [r3, #16]
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800825c <HAL_TIM_PeriodElapsedCallback+0x2a8>
 800809e:	ee67 7a87 	vmul.f32	s15, s15, s14
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 80080a2:	4b6b      	ldr	r3, [pc, #428]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80080a4:	edc3 7a07 	vstr	s15, [r3, #28]

        if (isnan(prismatic_axis.kalman_velocity)) {
 80080a8:	4b69      	ldr	r3, [pc, #420]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80080aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80080ae:	eef4 7a67 	vcmp.f32	s15, s15
 80080b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b6:	d703      	bvc.n	80080c0 <HAL_TIM_PeriodElapsedCallback+0x10c>
            prismatic_axis.kalman_velocity = 0.0f;
 80080b8:	4b65      	ldr	r3, [pc, #404]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	61da      	str	r2, [r3, #28]
        }

        // Position control update - Allow during HOMING_REV_TO_ZERO_DEG
        if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 80080c0:	4b67      	ldr	r3, [pc, #412]	@ (8008260 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a66      	ldr	r2, [pc, #408]	@ (8008260 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d92a      	bls.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x170>
            position_control_tick = 0;
 80080ce:	4b64      	ldr	r3, [pc, #400]	@ (8008260 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]

            if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 80080d4:	4b63      	ldr	r3, [pc, #396]	@ (8008264 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	f083 0301 	eor.w	r3, r3, #1
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <HAL_TIM_PeriodElapsedCallback+0x136>
 80080e2:	4b61      	ldr	r3, [pc, #388]	@ (8008268 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b07      	cmp	r3, #7
 80080e8:	d11c      	bne.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!joy_mode_active
 80080ea:	4b60      	ldr	r3, [pc, #384]	@ (800826c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	f083 0301 	eor.w	r3, r3, #1
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_TIM_PeriodElapsedCallback+0x154>
                            || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80080f8:	4b5d      	ldr	r3, [pc, #372]	@ (8008270 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d011      	beq.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x170>
                                    && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8008100:	4b5b      	ldr	r3, [pc, #364]	@ (8008270 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d00d      	beq.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!is_emergency_active() || tuning_mode)) {
 8008108:	f7fe fe2a 	bl	8006d60 <is_emergency_active>
 800810c:	4603      	mov	r3, r0
 800810e:	f083 0301 	eor.w	r3, r3, #1
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d103      	bne.n	8008120 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8008118:	4b56      	ldr	r3, [pc, #344]	@ (8008274 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x170>
                update_position_control();
 8008120:	f7fd ff98 	bl	8006054 <update_position_control>
            }
        }

        // Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
        if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 8008124:	4b4f      	ldr	r3, [pc, #316]	@ (8008264 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f083 0301 	eor.w	r3, r3, #1
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <HAL_TIM_PeriodElapsedCallback+0x186>
 8008132:	4b4d      	ldr	r3, [pc, #308]	@ (8008268 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b07      	cmp	r3, #7
 8008138:	d11c      	bne.n	8008174 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!joy_mode_active
 800813a:	4b4c      	ldr	r3, [pc, #304]	@ (800826c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	f083 0301 	eor.w	r3, r3, #1
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <HAL_TIM_PeriodElapsedCallback+0x1a4>
                        || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008148:	4b49      	ldr	r3, [pc, #292]	@ (8008270 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d011      	beq.n	8008174 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                                && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8008150:	4b47      	ldr	r3, [pc, #284]	@ (8008270 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d00d      	beq.n	8008174 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!is_emergency_active() || tuning_mode)) {
 8008158:	f7fe fe02 	bl	8006d60 <is_emergency_active>
 800815c:	4603      	mov	r3, r0
 800815e:	f083 0301 	eor.w	r3, r3, #1
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d103      	bne.n	8008170 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8008168:	4b42      	ldr	r3, [pc, #264]	@ (8008274 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <HAL_TIM_PeriodElapsedCallback+0x1c0>
            update_velocity_control();
 8008170:	f7fe f82e 	bl	80061d0 <update_velocity_control>
        }

        update_safety_system();
 8008174:	f7fe fd72 	bl	8006c5c <update_safety_system>

        if (!is_emergency_active() || tuning_mode) {
 8008178:	f7fe fdf2 	bl	8006d60 <is_emergency_active>
 800817c:	4603      	mov	r3, r0
 800817e:	f083 0301 	eor.w	r3, r3, #1
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8008188:	4b3a      	ldr	r3, [pc, #232]	@ (8008274 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_TIM_PeriodElapsedCallback+0x1e0>
            check_safety_conditions();
 8008190:	f7fe fc48 	bl	8006a24 <check_safety_conditions>
        }

        // Control loops - joy mode handles its own control
        if (!joy_mode_active) {
 8008194:	4b35      	ldr	r3, [pc, #212]	@ (800826c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f083 0301 	eor.w	r3, r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_TIM_PeriodElapsedCallback+0x1f4>
            update_control_loops();
 80081a2:	f7fe fa29 	bl	80065f8 <update_control_loops>
 80081a6:	e001      	b.n	80081ac <HAL_TIM_PeriodElapsedCallback+0x1f8>
        } else {
            update_joy_mode();
 80081a8:	f7ff fbf0 	bl	800798c <update_joy_mode>
        }

        // ALWAYS update display values
        if (!joy_mode_active) {
 80081ac:	4b2f      	ldr	r3, [pc, #188]	@ (800826c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f083 0301 	eor.w	r3, r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01e      	beq.n	80081f8 <HAL_TIM_PeriodElapsedCallback+0x244>
            // Update display values for normal operation
            normalized_position = normalize_angle(revolute_encoder.rads);
 80081ba:	4b20      	ldr	r3, [pc, #128]	@ (800823c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80081bc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80081c0:	eeb0 0a67 	vmov.f32	s0, s15
 80081c4:	f7fd fd22 	bl	8005c0c <normalize_angle>
 80081c8:	eef0 7a40 	vmov.f32	s15, s0
 80081cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008278 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80081ce:	edc3 7a00 	vstr	s15, [r3]
            prismatic_axis.mm = prismatic_encoder.mm;
 80081d2:	4b19      	ldr	r3, [pc, #100]	@ (8008238 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80081d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80081d8:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 80081da:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80081dc:	edd3 7a00 	vldr	s15, [r3]
 80081e0:	220e      	movs	r2, #14
 80081e2:	210f      	movs	r1, #15
 80081e4:	eeb0 0a67 	vmov.f32	s0, s15
 80081e8:	4824      	ldr	r0, [pc, #144]	@ (800827c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80081ea:	f7fc fa71 	bl	80046d0 <UnitConverter_angle>
 80081ee:	eef0 7a40 	vmov.f32	s15, s0
 80081f2:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80081f4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        }
        // Note: joy mode updates its own display values in update_joy_mode()

        prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel, prismatic_encoder.mmpss);
 80081f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80081fa:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80081fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008202:	481f      	ldr	r0, [pc, #124]	@ (8008280 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8008204:	f7f9 fdd8 	bl	8001db8 <FIR_process>
 8008208:	eef0 7a40 	vmov.f32	s15, s0
 800820c:	4b10      	ldr	r3, [pc, #64]	@ (8008250 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800820e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        revolute_axis.accel_show = FIR_process(&revolute_lp_accel, revolute_encoder.radpss);
 8008212:	4b0a      	ldr	r3, [pc, #40]	@ (800823c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008214:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008218:	eeb0 0a67 	vmov.f32	s0, s15
 800821c:	4819      	ldr	r0, [pc, #100]	@ (8008284 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800821e:	f7f9 fdcb 	bl	8001db8 <FIR_process>
 8008222:	eef0 7a40 	vmov.f32	s15, s0
 8008226:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008228:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    }
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20001a54 	.word	0x20001a54
 8008238:	20000494 	.word	0x20000494
 800823c:	200004f0 	.word	0x200004f0
 8008240:	200002c4 	.word	0x200002c4
 8008244:	477fff00 	.word	0x477fff00
 8008248:	c77fff00 	.word	0xc77fff00
 800824c:	20001594 	.word	0x20001594
 8008250:	20000280 	.word	0x20000280
 8008254:	20001228 	.word	0x20001228
 8008258:	20000100 	.word	0x20000100
 800825c:	447a0000 	.word	0x447a0000
 8008260:	20000378 	.word	0x20000378
 8008264:	2000036b 	.word	0x2000036b
 8008268:	2000036a 	.word	0x2000036a
 800826c:	20000385 	.word	0x20000385
 8008270:	20000384 	.word	0x20000384
 8008274:	20000134 	.word	0x20000134
 8008278:	2000037c 	.word	0x2000037c
 800827c:	20000888 	.word	0x20000888
 8008280:	20000ae0 	.word	0x20000ae0
 8008284:	20000aec 	.word	0x20000aec

08008288 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800828c:	b672      	cpsid	i
}
 800828e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <Error_Handler+0x8>
 8008294:	0000      	movs	r0, r0
	...

08008298 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800829c:	ed2d 8b02 	vpush	{d8}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80082a4:	4bc6      	ldr	r3, [pc, #792]	@ (80085c0 <plotter_begin+0x328>)
 80082a6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80082aa:	4bc6      	ldr	r3, [pc, #792]	@ (80085c4 <plotter_begin+0x32c>)
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7f8 f916 	bl	80004e0 <__aeabi_f2d>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f8 f968 	bl	8000590 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4610      	mov	r0, r2
 80082c6:	4619      	mov	r1, r3
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	4bbe      	ldr	r3, [pc, #760]	@ (80085c8 <plotter_begin+0x330>)
 80082ce:	f7f8 f95f 	bl	8000590 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80082d6:	49ba      	ldr	r1, [pc, #744]	@ (80085c0 <plotter_begin+0x328>)
 80082d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80082dc:	4bb8      	ldr	r3, [pc, #736]	@ (80085c0 <plotter_begin+0x328>)
 80082de:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	f7f7 ff9d 	bl	8000224 <__adddf3>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	49b4      	ldr	r1, [pc, #720]	@ (80085c0 <plotter_begin+0x328>)
 80082f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 80082f4:	49b2      	ldr	r1, [pc, #712]	@ (80085c0 <plotter_begin+0x328>)
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	4bb4      	ldr	r3, [pc, #720]	@ (80085cc <plotter_begin+0x334>)
 80082fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008300:	49af      	ldr	r1, [pc, #700]	@ (80085c0 <plotter_begin+0x328>)
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	4bb0      	ldr	r3, [pc, #704]	@ (80085c8 <plotter_begin+0x330>)
 8008308:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 800830c:	4bb0      	ldr	r3, [pc, #704]	@ (80085d0 <plotter_begin+0x338>)
 800830e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008312:	a3a9      	add	r3, pc, #676	@ (adr r3, 80085b8 <plotter_begin+0x320>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f8 f93a 	bl	8000590 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008320:	49ab      	ldr	r1, [pc, #684]	@ (80085d0 <plotter_begin+0x338>)
 8008322:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008326:	49aa      	ldr	r1, [pc, #680]	@ (80085d0 <plotter_begin+0x338>)
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	4ba9      	ldr	r3, [pc, #676]	@ (80085d4 <plotter_begin+0x33c>)
 800832e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 8008332:	49a7      	ldr	r1, [pc, #668]	@ (80085d0 <plotter_begin+0x338>)
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800833c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8008340:	2100      	movs	r1, #0
 8008342:	48a5      	ldr	r0, [pc, #660]	@ (80085d8 <plotter_begin+0x340>)
 8008344:	f000 fc4e 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8008348:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80085dc <plotter_begin+0x344>
 800834c:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80085e0 <plotter_begin+0x348>
 8008350:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008618 <plotter_begin+0x380>
 8008354:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008618 <plotter_begin+0x380>
 8008358:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80085e4 <plotter_begin+0x34c>
 800835c:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80085dc <plotter_begin+0x344>
 8008360:	489d      	ldr	r0, [pc, #628]	@ (80085d8 <plotter_begin+0x340>)
 8008362:	f000 fc9d 	bl	8008ca0 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8008366:	2102      	movs	r1, #2
 8008368:	489f      	ldr	r0, [pc, #636]	@ (80085e8 <plotter_begin+0x350>)
 800836a:	f000 fc3b 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 800836e:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 80085dc <plotter_begin+0x344>
 8008372:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 80085e0 <plotter_begin+0x348>
 8008376:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8008618 <plotter_begin+0x380>
 800837a:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8008618 <plotter_begin+0x380>
 800837e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008382:	eddf 0a98 	vldr	s1, [pc, #608]	@ 80085e4 <plotter_begin+0x34c>
 8008386:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80085dc <plotter_begin+0x344>
 800838a:	4897      	ldr	r0, [pc, #604]	@ (80085e8 <plotter_begin+0x350>)
 800838c:	f000 fcb3 	bl	8008cf6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008390:	2100      	movs	r1, #0
 8008392:	4896      	ldr	r0, [pc, #600]	@ (80085ec <plotter_begin+0x354>)
 8008394:	f000 fc26 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008398:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80085f0 <plotter_begin+0x358>
 800839c:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80085f4 <plotter_begin+0x35c>
 80083a0:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008618 <plotter_begin+0x380>
 80083a4:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008618 <plotter_begin+0x380>
 80083a8:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80085e4 <plotter_begin+0x34c>
 80083ac:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80085f0 <plotter_begin+0x358>
 80083b0:	488e      	ldr	r0, [pc, #568]	@ (80085ec <plotter_begin+0x354>)
 80083b2:	f000 fc75 	bl	8008ca0 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80083b6:	2102      	movs	r1, #2
 80083b8:	488f      	ldr	r0, [pc, #572]	@ (80085f8 <plotter_begin+0x360>)
 80083ba:	f000 fc13 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80083be:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80083c2:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80083c6:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8008618 <plotter_begin+0x380>
 80083ca:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8008618 <plotter_begin+0x380>
 80083ce:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80083d2:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80085e4 <plotter_begin+0x34c>
 80083d6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80083da:	4887      	ldr	r0, [pc, #540]	@ (80085f8 <plotter_begin+0x360>)
 80083dc:	f000 fc8b 	bl	8008cf6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80083e0:	2100      	movs	r1, #0
 80083e2:	4886      	ldr	r0, [pc, #536]	@ (80085fc <plotter_begin+0x364>)
 80083e4:	f000 fbfe 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80083e8:	4b75      	ldr	r3, [pc, #468]	@ (80085c0 <plotter_begin+0x328>)
 80083ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	f7f8 fbaf 	bl	8000b54 <__aeabi_d2f>
 80083f6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80083f8:	4b71      	ldr	r3, [pc, #452]	@ (80085c0 <plotter_begin+0x328>)
 80083fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80083fe:	4610      	mov	r0, r2
 8008400:	4619      	mov	r1, r3
 8008402:	f7f8 fba7 	bl	8000b54 <__aeabi_d2f>
 8008406:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008410:	4b6b      	ldr	r3, [pc, #428]	@ (80085c0 <plotter_begin+0x328>)
 8008412:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 fb9b 	bl	8000b54 <__aeabi_d2f>
 800841e:	4603      	mov	r3, r0
 8008420:	ee02 3a90 	vmov	s5, r3
 8008424:	eeb0 2a48 	vmov.f32	s4, s16
 8008428:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008618 <plotter_begin+0x380>
 800842c:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008618 <plotter_begin+0x380>
 8008430:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80085e4 <plotter_begin+0x34c>
 8008434:	ee00 4a10 	vmov	s0, r4
 8008438:	4870      	ldr	r0, [pc, #448]	@ (80085fc <plotter_begin+0x364>)
 800843a:	f000 fc31 	bl	8008ca0 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800843e:	2102      	movs	r1, #2
 8008440:	486f      	ldr	r0, [pc, #444]	@ (8008600 <plotter_begin+0x368>)
 8008442:	f000 fbcf 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008446:	4b5e      	ldr	r3, [pc, #376]	@ (80085c0 <plotter_begin+0x328>)
 8008448:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	f7f8 fb80 	bl	8000b54 <__aeabi_d2f>
 8008454:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008456:	4b5a      	ldr	r3, [pc, #360]	@ (80085c0 <plotter_begin+0x328>)
 8008458:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	f7f8 fb78 	bl	8000b54 <__aeabi_d2f>
 8008464:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800846e:	4b54      	ldr	r3, [pc, #336]	@ (80085c0 <plotter_begin+0x328>)
 8008470:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	f7f8 fb6c 	bl	8000b54 <__aeabi_d2f>
 800847c:	4603      	mov	r3, r0
 800847e:	ee03 3a10 	vmov	s6, r3
 8008482:	eef0 2a48 	vmov.f32	s5, s16
 8008486:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8008618 <plotter_begin+0x380>
 800848a:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8008618 <plotter_begin+0x380>
 800848e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008492:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80085e4 <plotter_begin+0x34c>
 8008496:	ee00 4a10 	vmov	s0, r4
 800849a:	4859      	ldr	r0, [pc, #356]	@ (8008600 <plotter_begin+0x368>)
 800849c:	f000 fc2b 	bl	8008cf6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80084a0:	2100      	movs	r1, #0
 80084a2:	4858      	ldr	r0, [pc, #352]	@ (8008604 <plotter_begin+0x36c>)
 80084a4:	f000 fb9e 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80084a8:	4b49      	ldr	r3, [pc, #292]	@ (80085d0 <plotter_begin+0x338>)
 80084aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7f8 fb4f 	bl	8000b54 <__aeabi_d2f>
 80084b6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80084b8:	4b45      	ldr	r3, [pc, #276]	@ (80085d0 <plotter_begin+0x338>)
 80084ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80084be:	4610      	mov	r0, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	f7f8 fb47 	bl	8000b54 <__aeabi_d2f>
 80084c6:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80084d0:	4b3f      	ldr	r3, [pc, #252]	@ (80085d0 <plotter_begin+0x338>)
 80084d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80084d6:	4610      	mov	r0, r2
 80084d8:	4619      	mov	r1, r3
 80084da:	f7f8 fb3b 	bl	8000b54 <__aeabi_d2f>
 80084de:	4603      	mov	r3, r0
 80084e0:	ee02 3a90 	vmov	s5, r3
 80084e4:	eeb0 2a48 	vmov.f32	s4, s16
 80084e8:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008618 <plotter_begin+0x380>
 80084ec:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008618 <plotter_begin+0x380>
 80084f0:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80085e4 <plotter_begin+0x34c>
 80084f4:	ee00 4a10 	vmov	s0, r4
 80084f8:	4842      	ldr	r0, [pc, #264]	@ (8008604 <plotter_begin+0x36c>)
 80084fa:	f000 fbd1 	bl	8008ca0 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80084fe:	2102      	movs	r1, #2
 8008500:	4841      	ldr	r0, [pc, #260]	@ (8008608 <plotter_begin+0x370>)
 8008502:	f000 fb6f 	bl	8008be4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008506:	4b32      	ldr	r3, [pc, #200]	@ (80085d0 <plotter_begin+0x338>)
 8008508:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	f7f8 fb20 	bl	8000b54 <__aeabi_d2f>
 8008514:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008516:	4b2e      	ldr	r3, [pc, #184]	@ (80085d0 <plotter_begin+0x338>)
 8008518:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800851c:	4610      	mov	r0, r2
 800851e:	4619      	mov	r1, r3
 8008520:	f7f8 fb18 	bl	8000b54 <__aeabi_d2f>
 8008524:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800852e:	4b28      	ldr	r3, [pc, #160]	@ (80085d0 <plotter_begin+0x338>)
 8008530:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008534:	4610      	mov	r0, r2
 8008536:	4619      	mov	r1, r3
 8008538:	f7f8 fb0c 	bl	8000b54 <__aeabi_d2f>
 800853c:	4603      	mov	r3, r0
 800853e:	ee03 3a10 	vmov	s6, r3
 8008542:	eef0 2a48 	vmov.f32	s5, s16
 8008546:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8008618 <plotter_begin+0x380>
 800854a:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8008618 <plotter_begin+0x380>
 800854e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008552:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80085e4 <plotter_begin+0x34c>
 8008556:	ee00 4a10 	vmov	s0, r4
 800855a:	482b      	ldr	r0, [pc, #172]	@ (8008608 <plotter_begin+0x370>)
 800855c:	f000 fbcb 	bl	8008cf6 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008560:	482a      	ldr	r0, [pc, #168]	@ (800860c <plotter_begin+0x374>)
 8008562:	f7fc f81f 	bl	80045a4 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8008566:	4b17      	ldr	r3, [pc, #92]	@ (80085c4 <plotter_begin+0x32c>)
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f7 ffb8 	bl	80004e0 <__aeabi_f2d>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	f7f7 fe56 	bl	8000224 <__adddf3>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4610      	mov	r0, r2
 800857e:	4619      	mov	r1, r3
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	4b10      	ldr	r3, [pc, #64]	@ (80085c8 <plotter_begin+0x330>)
 8008586:	f7f8 f803 	bl	8000590 <__aeabi_dmul>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	f7f8 fadf 	bl	8000b54 <__aeabi_d2f>
 8008596:	4603      	mov	r3, r0
 8008598:	ee00 3a90 	vmov	s1, r3
 800859c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80085a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085a8:	4919      	ldr	r1, [pc, #100]	@ (8008610 <plotter_begin+0x378>)
 80085aa:	481a      	ldr	r0, [pc, #104]	@ (8008614 <plotter_begin+0x37c>)
 80085ac:	f7fb f97e 	bl	80038ac <QEI_init>
 80085b0:	e034      	b.n	800861c <plotter_begin+0x384>
 80085b2:	bf00      	nop
 80085b4:	f3af 8000 	nop.w
 80085b8:	55555555 	.word	0x55555555
 80085bc:	3fe55555 	.word	0x3fe55555
 80085c0:	20000080 	.word	0x20000080
 80085c4:	20000100 	.word	0x20000100
 80085c8:	408f4000 	.word	0x408f4000
 80085cc:	407f4000 	.word	0x407f4000
 80085d0:	20000000 	.word	0x20000000
 80085d4:	40140000 	.word	0x40140000
 80085d8:	20000668 	.word	0x20000668
 80085dc:	477fff00 	.word	0x477fff00
 80085e0:	c77fff00 	.word	0xc77fff00
 80085e4:	3dcccccd 	.word	0x3dcccccd
 80085e8:	200006ac 	.word	0x200006ac
 80085ec:	200006f0 	.word	0x200006f0
 80085f0:	43480000 	.word	0x43480000
 80085f4:	c3480000 	.word	0xc3480000
 80085f8:	20000734 	.word	0x20000734
 80085fc:	20000778 	.word	0x20000778
 8008600:	200007bc 	.word	0x200007bc
 8008604:	20000800 	.word	0x20000800
 8008608:	20000844 	.word	0x20000844
 800860c:	20000888 	.word	0x20000888
 8008610:	20001cb8 	.word	0x20001cb8
 8008614:	20000494 	.word	0x20000494
 8008618:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 800861c:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008618 <plotter_begin+0x380>
 8008620:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800862c:	49b8      	ldr	r1, [pc, #736]	@ (8008910 <plotter_begin+0x678>)
 800862e:	48b9      	ldr	r0, [pc, #740]	@ (8008914 <plotter_begin+0x67c>)
 8008630:	f7fb f93c 	bl	80038ac <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8008634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800863e:	2204      	movs	r2, #4
 8008640:	49b5      	ldr	r1, [pc, #724]	@ (8008918 <plotter_begin+0x680>)
 8008642:	48b6      	ldr	r0, [pc, #728]	@ (800891c <plotter_begin+0x684>)
 8008644:	f7f8 fe9c 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8008648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	4bb4      	ldr	r3, [pc, #720]	@ (8008920 <plotter_begin+0x688>)
 8008650:	2200      	movs	r2, #0
 8008652:	49b1      	ldr	r1, [pc, #708]	@ (8008918 <plotter_begin+0x680>)
 8008654:	48b3      	ldr	r0, [pc, #716]	@ (8008924 <plotter_begin+0x68c>)
 8008656:	f7f8 fe93 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800865a:	220c      	movs	r2, #12
 800865c:	49b2      	ldr	r1, [pc, #712]	@ (8008928 <plotter_begin+0x690>)
 800865e:	48b3      	ldr	r0, [pc, #716]	@ (800892c <plotter_begin+0x694>)
 8008660:	f7fa fef6 	bl	8003450 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8008664:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8008930 <plotter_begin+0x698>
 8008668:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8008934 <plotter_begin+0x69c>
 800866c:	48ab      	ldr	r0, [pc, #684]	@ (800891c <plotter_begin+0x684>)
 800866e:	f7f8 feab 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8008672:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8008930 <plotter_begin+0x698>
 8008676:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8008934 <plotter_begin+0x69c>
 800867a:	48aa      	ldr	r0, [pc, #680]	@ (8008924 <plotter_begin+0x68c>)
 800867c:	f7f8 fea4 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8008680:	4bad      	ldr	r3, [pc, #692]	@ (8008938 <plotter_begin+0x6a0>)
 8008682:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	f7f8 fa63 	bl	8000b54 <__aeabi_d2f>
 800868e:	4603      	mov	r3, r0
 8008690:	ee01 3a90 	vmov	s3, r3
 8008694:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 800893c <plotter_begin+0x6a4>
 8008698:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8008940 <plotter_begin+0x6a8>
 800869c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8008944 <plotter_begin+0x6ac>
 80086a0:	48a9      	ldr	r0, [pc, #676]	@ (8008948 <plotter_begin+0x6b0>)
 80086a2:	f7f8 fd86 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80086a6:	4ba4      	ldr	r3, [pc, #656]	@ (8008938 <plotter_begin+0x6a0>)
 80086a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7f8 fa50 	bl	8000b54 <__aeabi_d2f>
 80086b4:	4603      	mov	r3, r0
 80086b6:	ee01 3a90 	vmov	s3, r3
 80086ba:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 8008930 <plotter_begin+0x698>
 80086be:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 800894c <plotter_begin+0x6b4>
 80086c2:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8008950 <plotter_begin+0x6b8>
 80086c6:	48a3      	ldr	r0, [pc, #652]	@ (8008954 <plotter_begin+0x6bc>)
 80086c8:	f7f8 fd73 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 80086cc:	4ba2      	ldr	r3, [pc, #648]	@ (8008958 <plotter_begin+0x6c0>)
 80086ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7f8 fa3d 	bl	8000b54 <__aeabi_d2f>
 80086da:	4603      	mov	r3, r0
 80086dc:	ee01 3a90 	vmov	s3, r3
 80086e0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800895c <plotter_begin+0x6c4>
 80086e4:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8008960 <plotter_begin+0x6c8>
 80086e8:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8008964 <plotter_begin+0x6cc>
 80086ec:	489e      	ldr	r0, [pc, #632]	@ (8008968 <plotter_begin+0x6d0>)
 80086ee:	f7f8 fd60 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
			ZGX45RGG_150RPM_Constant.U_max);
 80086f2:	4b99      	ldr	r3, [pc, #612]	@ (8008958 <plotter_begin+0x6c0>)
 80086f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 80086f8:	4610      	mov	r0, r2
 80086fa:	4619      	mov	r1, r3
 80086fc:	f7f8 fa2a 	bl	8000b54 <__aeabi_d2f>
 8008700:	4603      	mov	r3, r0
 8008702:	ee01 3a90 	vmov	s3, r3
 8008706:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 800896c <plotter_begin+0x6d4>
 800870a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 800870e:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8008934 <plotter_begin+0x69c>
 8008712:	4897      	ldr	r0, [pc, #604]	@ (8008970 <plotter_begin+0x6d8>)
 8008714:	f7f8 fd4d 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008718:	4b8f      	ldr	r3, [pc, #572]	@ (8008958 <plotter_begin+0x6c0>)
 800871a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	f7f8 fa17 	bl	8000b54 <__aeabi_d2f>
 8008726:	4603      	mov	r3, r0
 8008728:	ee01 3a90 	vmov	s3, r3
 800872c:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8008934 <plotter_begin+0x69c>
 8008730:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8008974 <plotter_begin+0x6dc>
 8008734:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008978 <plotter_begin+0x6e0>
 8008738:	4890      	ldr	r0, [pc, #576]	@ (800897c <plotter_begin+0x6e4>)
 800873a:	f7f8 fd3a 	bl	80011b2 <PID_CONTROLLER_Init>


	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800873e:	4986      	ldr	r1, [pc, #536]	@ (8008958 <plotter_begin+0x6c0>)
 8008740:	488f      	ldr	r0, [pc, #572]	@ (8008980 <plotter_begin+0x6e8>)
 8008742:	f7f8 ff1b 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8008746:	497c      	ldr	r1, [pc, #496]	@ (8008938 <plotter_begin+0x6a0>)
 8008748:	488e      	ldr	r0, [pc, #568]	@ (8008984 <plotter_begin+0x6ec>)
 800874a:	f7f9 f895 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800874e:	4a8e      	ldr	r2, [pc, #568]	@ (8008988 <plotter_begin+0x6f0>)
 8008750:	4981      	ldr	r1, [pc, #516]	@ (8008958 <plotter_begin+0x6c0>)
 8008752:	488e      	ldr	r0, [pc, #568]	@ (800898c <plotter_begin+0x6f4>)
 8008754:	f7f8 ffa1 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8008758:	4a8b      	ldr	r2, [pc, #556]	@ (8008988 <plotter_begin+0x6f0>)
 800875a:	4977      	ldr	r1, [pc, #476]	@ (8008938 <plotter_begin+0x6a0>)
 800875c:	488c      	ldr	r0, [pc, #560]	@ (8008990 <plotter_begin+0x6f8>)
 800875e:	f7f9 f92f 	bl	80019c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8008762:	2302      	movs	r3, #2
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8008994 <plotter_begin+0x6fc>
 800876a:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8008998 <plotter_begin+0x700>
 800876e:	2364      	movs	r3, #100	@ 0x64
 8008770:	4a8a      	ldr	r2, [pc, #552]	@ (800899c <plotter_begin+0x704>)
 8008772:	498b      	ldr	r1, [pc, #556]	@ (80089a0 <plotter_begin+0x708>)
 8008774:	488b      	ldr	r0, [pc, #556]	@ (80089a4 <plotter_begin+0x70c>)
 8008776:	f7f8 fbd3 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800877a:	2105      	movs	r1, #5
 800877c:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80089a8 <plotter_begin+0x710>
 8008780:	4888      	ldr	r0, [pc, #544]	@ (80089a4 <plotter_begin+0x70c>)
 8008782:	f7f8 fc7f 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8008786:	4887      	ldr	r0, [pc, #540]	@ (80089a4 <plotter_begin+0x70c>)
 8008788:	f7f8 fc22 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800878c:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80089ac <plotter_begin+0x714>
 8008790:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008794:	211f      	movs	r1, #31
 8008796:	4886      	ldr	r0, [pc, #536]	@ (80089b0 <plotter_begin+0x718>)
 8008798:	f7f9 f9ee 	bl	8001b78 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800879c:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80089ac <plotter_begin+0x714>
 80087a0:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80087a4:	211f      	movs	r1, #31
 80087a6:	4883      	ldr	r0, [pc, #524]	@ (80089b4 <plotter_begin+0x71c>)
 80087a8:	f7f9 f9e6 	bl	8001b78 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80087ac:	4b62      	ldr	r3, [pc, #392]	@ (8008938 <plotter_begin+0x6a0>)
 80087ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087b2:	4610      	mov	r0, r2
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7f8 f9cd 	bl	8000b54 <__aeabi_d2f>
 80087ba:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80087bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008938 <plotter_begin+0x6a0>)
 80087be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80087c2:	4610      	mov	r0, r2
 80087c4:	4619      	mov	r1, r3
 80087c6:	f7f8 f9c5 	bl	8000b54 <__aeabi_d2f>
 80087ca:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80087cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008938 <plotter_begin+0x6a0>)
 80087ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80087d2:	4610      	mov	r0, r2
 80087d4:	4619      	mov	r1, r3
 80087d6:	f7f8 f9bd 	bl	8000b54 <__aeabi_d2f>
 80087da:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80087dc:	4b56      	ldr	r3, [pc, #344]	@ (8008938 <plotter_begin+0x6a0>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80087e2:	4610      	mov	r0, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7f8 f9b5 	bl	8000b54 <__aeabi_d2f>
 80087ea:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80087ec:	4b52      	ldr	r3, [pc, #328]	@ (8008938 <plotter_begin+0x6a0>)
 80087ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80087f2:	4610      	mov	r0, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	f7f8 f9ad 	bl	8000b54 <__aeabi_d2f>
 80087fa:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80087fc:	4b4e      	ldr	r3, [pc, #312]	@ (8008938 <plotter_begin+0x6a0>)
 80087fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	f7f8 f9a5 	bl	8000b54 <__aeabi_d2f>
 800880a:	4603      	mov	r3, r0
 800880c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008810:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008814:	ee03 3a10 	vmov	s6, r3
 8008818:	ee02 9a90 	vmov	s5, r9
 800881c:	ee02 8a10 	vmov	s4, r8
 8008820:	ee01 6a90 	vmov	s3, r6
 8008824:	ee01 5a10 	vmov	s2, r5
 8008828:	ee00 4a90 	vmov	s1, r4
 800882c:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80089b8 <plotter_begin+0x720>
 8008830:	4862      	ldr	r0, [pc, #392]	@ (80089bc <plotter_begin+0x724>)
 8008832:	f7f9 fbf9 	bl	8002028 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008836:	4b48      	ldr	r3, [pc, #288]	@ (8008958 <plotter_begin+0x6c0>)
 8008838:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800883c:	4610      	mov	r0, r2
 800883e:	4619      	mov	r1, r3
 8008840:	f7f8 f988 	bl	8000b54 <__aeabi_d2f>
 8008844:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008846:	4b44      	ldr	r3, [pc, #272]	@ (8008958 <plotter_begin+0x6c0>)
 8008848:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800884c:	4610      	mov	r0, r2
 800884e:	4619      	mov	r1, r3
 8008850:	f7f8 f980 	bl	8000b54 <__aeabi_d2f>
 8008854:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008856:	4b40      	ldr	r3, [pc, #256]	@ (8008958 <plotter_begin+0x6c0>)
 8008858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800885c:	4610      	mov	r0, r2
 800885e:	4619      	mov	r1, r3
 8008860:	f7f8 f978 	bl	8000b54 <__aeabi_d2f>
 8008864:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008866:	4b3c      	ldr	r3, [pc, #240]	@ (8008958 <plotter_begin+0x6c0>)
 8008868:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800886c:	a326      	add	r3, pc, #152	@ (adr r3, 8008908 <plotter_begin+0x670>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fe8d 	bl	8000590 <__aeabi_dmul>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800887a:	4610      	mov	r0, r2
 800887c:	4619      	mov	r1, r3
 800887e:	f7f8 f969 	bl	8000b54 <__aeabi_d2f>
 8008882:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008884:	4b34      	ldr	r3, [pc, #208]	@ (8008958 <plotter_begin+0x6c0>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	f7f8 f961 	bl	8000b54 <__aeabi_d2f>
 8008892:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8008894:	4b30      	ldr	r3, [pc, #192]	@ (8008958 <plotter_begin+0x6c0>)
 8008896:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800889a:	4610      	mov	r0, r2
 800889c:	4619      	mov	r1, r3
 800889e:	f7f8 f959 	bl	8000b54 <__aeabi_d2f>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4946      	ldr	r1, [pc, #280]	@ (80089c0 <plotter_begin+0x728>)
 80088a6:	4847      	ldr	r0, [pc, #284]	@ (80089c4 <plotter_begin+0x72c>)
 80088a8:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 80089b8 <plotter_begin+0x720>
 80088ac:	ee02 3a90 	vmov	s5, r3
 80088b0:	ee02 9a10 	vmov	s4, r9
 80088b4:	ee01 8a90 	vmov	s3, r8
 80088b8:	ee01 6a10 	vmov	s2, r6
 80088bc:	ee00 5a90 	vmov	s1, r5
 80088c0:	ee00 4a10 	vmov	s0, r4
 80088c4:	f7fa fd5c 	bl	8003380 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80088c8:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80089c8 <plotter_begin+0x730>
 80088cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80088d0:	4a3b      	ldr	r2, [pc, #236]	@ (80089c0 <plotter_begin+0x728>)
 80088d2:	493c      	ldr	r1, [pc, #240]	@ (80089c4 <plotter_begin+0x72c>)
 80088d4:	483d      	ldr	r0, [pc, #244]	@ (80089cc <plotter_begin+0x734>)
 80088d6:	f7fc fac1 	bl	8004e5c <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80088da:	23c8      	movs	r3, #200	@ 0xc8
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	2315      	movs	r3, #21
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4b3b      	ldr	r3, [pc, #236]	@ (80089d0 <plotter_begin+0x738>)
 80088e4:	4a3b      	ldr	r2, [pc, #236]	@ (80089d4 <plotter_begin+0x73c>)
 80088e6:	493c      	ldr	r1, [pc, #240]	@ (80089d8 <plotter_begin+0x740>)
 80088e8:	483c      	ldr	r0, [pc, #240]	@ (80089dc <plotter_begin+0x744>)
 80088ea:	f7f9 fb35 	bl	8001f58 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80088ee:	483c      	ldr	r0, [pc, #240]	@ (80089e0 <plotter_begin+0x748>)
 80088f0:	f004 fdfe 	bl	800d4f0 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80088f4:	f000 f876 	bl	80089e4 <plotter_reset>
}
 80088f8:	bf00      	nop
 80088fa:	3704      	adds	r7, #4
 80088fc:	46bd      	mov	sp, r7
 80088fe:	ecbd 8b02 	vpop	{d8}
 8008902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008906:	bf00      	nop
 8008908:	9999999a 	.word	0x9999999a
 800890c:	40019999 	.word	0x40019999
 8008910:	20001bec 	.word	0x20001bec
 8008914:	200004f0 	.word	0x200004f0
 8008918:	20001d84 	.word	0x20001d84
 800891c:	200003fc 	.word	0x200003fc
 8008920:	48000800 	.word	0x48000800
 8008924:	20000448 	.word	0x20000448
 8008928:	20001988 	.word	0x20001988
 800892c:	2000062c 	.word	0x2000062c
 8008930:	00000000 	.word	0x00000000
 8008934:	44fa0000 	.word	0x44fa0000
 8008938:	20000080 	.word	0x20000080
 800893c:	42f00000 	.word	0x42f00000
 8008940:	2edbe6ff 	.word	0x2edbe6ff
 8008944:	42960000 	.word	0x42960000
 8008948:	2000054c 	.word	0x2000054c
 800894c:	3727c5ac 	.word	0x3727c5ac
 8008950:	43160000 	.word	0x43160000
 8008954:	20000574 	.word	0x20000574
 8008958:	20000000 	.word	0x20000000
 800895c:	43e10000 	.word	0x43e10000
 8008960:	3dcccccd 	.word	0x3dcccccd
 8008964:	43020000 	.word	0x43020000
 8008968:	2000059c 	.word	0x2000059c
 800896c:	43fa0000 	.word	0x43fa0000
 8008970:	200005c4 	.word	0x200005c4
 8008974:	42c80000 	.word	0x42c80000
 8008978:	45ea6000 	.word	0x45ea6000
 800897c:	200005ec 	.word	0x200005ec
 8008980:	20000620 	.word	0x20000620
 8008984:	20000614 	.word	0x20000614
 8008988:	20000100 	.word	0x20000100
 800898c:	20000624 	.word	0x20000624
 8008990:	20000618 	.word	0x20000618
 8008994:	457ff000 	.word	0x457ff000
 8008998:	40533333 	.word	0x40533333
 800899c:	20000af8 	.word	0x20000af8
 80089a0:	200001b4 	.word	0x200001b4
 80089a4:	20000644 	.word	0x20000644
 80089a8:	45000000 	.word	0x45000000
 80089ac:	447a0000 	.word	0x447a0000
 80089b0:	20000ae0 	.word	0x20000ae0
 80089b4:	20000aec 	.word	0x20000aec
 80089b8:	3a83126f 	.word	0x3a83126f
 80089bc:	20001228 	.word	0x20001228
 80089c0:	20001954 	.word	0x20001954
 80089c4:	20001914 	.word	0x20001914
 80089c8:	3d4ccccd 	.word	0x3d4ccccd
 80089cc:	20001594 	.word	0x20001594
 80089d0:	20001098 	.word	0x20001098
 80089d4:	20001e50 	.word	0x20001e50
 80089d8:	20001fe8 	.word	0x20001fe8
 80089dc:	20000bc0 	.word	0x20000bc0
 80089e0:	20001a54 	.word	0x20001a54

080089e4 <plotter_reset>:

void plotter_reset() {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80089e8:	4819      	ldr	r0, [pc, #100]	@ (8008a50 <plotter_reset+0x6c>)
 80089ea:	f7fb f9e1 	bl	8003db0 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 80089ee:	4818      	ldr	r0, [pc, #96]	@ (8008a50 <plotter_reset+0x6c>)
 80089f0:	f7fb f9de 	bl	8003db0 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 80089f4:	4b16      	ldr	r3, [pc, #88]	@ (8008a50 <plotter_reset+0x6c>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80089fa:	4b15      	ldr	r3, [pc, #84]	@ (8008a50 <plotter_reset+0x6c>)
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8008a02:	4b13      	ldr	r3, [pc, #76]	@ (8008a50 <plotter_reset+0x6c>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8008a08:	4b11      	ldr	r3, [pc, #68]	@ (8008a50 <plotter_reset+0x6c>)
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8008a10:	4b0f      	ldr	r3, [pc, #60]	@ (8008a50 <plotter_reset+0x6c>)
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8008a18:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <plotter_reset+0x6c>)
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8008a20:	4b0c      	ldr	r3, [pc, #48]	@ (8008a54 <plotter_reset+0x70>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8008a26:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <plotter_reset+0x70>)
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8008a2e:	4b09      	ldr	r3, [pc, #36]	@ (8008a54 <plotter_reset+0x70>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8008a34:	4b07      	ldr	r3, [pc, #28]	@ (8008a54 <plotter_reset+0x70>)
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8008a3c:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <plotter_reset+0x70>)
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8008a44:	4b03      	ldr	r3, [pc, #12]	@ (8008a54 <plotter_reset+0x70>)
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008a4c:	bf00      	nop
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000494 	.word	0x20000494
 8008a54:	200004f0 	.word	0x200004f0

08008a58 <plotter_update_sensors>:

void plotter_update_sensors() {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8008a5c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8008b64 <plotter_update_sensors+0x10c>
 8008a60:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8008b68 <plotter_update_sensors+0x110>
 8008a64:	2106      	movs	r1, #6
 8008a66:	4841      	ldr	r0, [pc, #260]	@ (8008b6c <plotter_update_sensors+0x114>)
 8008a68:	f7f8 fb36 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008a6c:	eef0 7a40 	vmov.f32	s15, s0
 8008a70:	4b3f      	ldr	r3, [pc, #252]	@ (8008b70 <plotter_update_sensors+0x118>)
 8008a72:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8008a76:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8008b64 <plotter_update_sensors+0x10c>
 8008a7a:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8008b68 <plotter_update_sensors+0x110>
 8008a7e:	2107      	movs	r1, #7
 8008a80:	483a      	ldr	r0, [pc, #232]	@ (8008b6c <plotter_update_sensors+0x114>)
 8008a82:	f7f8 fb29 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008a86:	eef0 7a40 	vmov.f32	s15, s0
 8008a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8008b74 <plotter_update_sensors+0x11c>)
 8008a8c:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8008a90:	2180      	movs	r1, #128	@ 0x80
 8008a92:	4839      	ldr	r0, [pc, #228]	@ (8008b78 <plotter_update_sensors+0x120>)
 8008a94:	f003 fbc6 	bl	800c224 <HAL_GPIO_ReadPin>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4b35      	ldr	r3, [pc, #212]	@ (8008b7c <plotter_update_sensors+0x124>)
 8008aa8:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8008aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008aae:	4834      	ldr	r0, [pc, #208]	@ (8008b80 <plotter_update_sensors+0x128>)
 8008ab0:	f003 fbb8 	bl	800c224 <HAL_GPIO_ReadPin>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bf0c      	ite	eq
 8008aba:	2301      	moveq	r3, #1
 8008abc:	2300      	movne	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b30      	ldr	r3, [pc, #192]	@ (8008b84 <plotter_update_sensors+0x12c>)
 8008ac4:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8008ac6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008aca:	482d      	ldr	r0, [pc, #180]	@ (8008b80 <plotter_update_sensors+0x128>)
 8008acc:	f003 fbaa 	bl	800c224 <HAL_GPIO_ReadPin>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	2300      	movne	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	4b2a      	ldr	r3, [pc, #168]	@ (8008b88 <plotter_update_sensors+0x130>)
 8008ae0:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8008ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ae6:	4826      	ldr	r0, [pc, #152]	@ (8008b80 <plotter_update_sensors+0x128>)
 8008ae8:	f003 fb9c 	bl	800c224 <HAL_GPIO_ReadPin>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	4b24      	ldr	r3, [pc, #144]	@ (8008b8c <plotter_update_sensors+0x134>)
 8008afc:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8008afe:	2104      	movs	r1, #4
 8008b00:	481d      	ldr	r0, [pc, #116]	@ (8008b78 <plotter_update_sensors+0x120>)
 8008b02:	f003 fb8f 	bl	800c224 <HAL_GPIO_ReadPin>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b21      	ldr	r3, [pc, #132]	@ (8008b90 <plotter_update_sensors+0x138>)
 8008b0c:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4819      	ldr	r0, [pc, #100]	@ (8008b78 <plotter_update_sensors+0x120>)
 8008b12:	f003 fb87 	bl	800c224 <HAL_GPIO_ReadPin>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8008b94 <plotter_update_sensors+0x13c>)
 8008b1c:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <plotter_update_sensors+0x140>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	f083 0301 	eor.w	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d018      	beq.n	8008b5e <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4812      	ldr	r0, [pc, #72]	@ (8008b78 <plotter_update_sensors+0x120>)
 8008b30:	f003 fb78 	bl	800c224 <HAL_GPIO_ReadPin>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	4b16      	ldr	r3, [pc, #88]	@ (8008b9c <plotter_update_sensors+0x144>)
 8008b42:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8008b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008b48:	480b      	ldr	r0, [pc, #44]	@ (8008b78 <plotter_update_sensors+0x120>)
 8008b4a:	f003 fb6b 	bl	800c224 <HAL_GPIO_ReadPin>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bf14      	ite	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	2300      	moveq	r3, #0
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <plotter_update_sensors+0x148>)
 8008b5c:	701a      	strb	r2, [r3, #0]
	}
}
 8008b5e:	bf00      	nop
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	42480000 	.word	0x42480000
 8008b68:	c2480000 	.word	0xc2480000
 8008b6c:	20000644 	.word	0x20000644
 8008b70:	20001964 	.word	0x20001964
 8008b74:	20001968 	.word	0x20001968
 8008b78:	48000400 	.word	0x48000400
 8008b7c:	20001974 	.word	0x20001974
 8008b80:	48000800 	.word	0x48000800
 8008b84:	20001978 	.word	0x20001978
 8008b88:	2000197c 	.word	0x2000197c
 8008b8c:	20001980 	.word	0x20001980
 8008b90:	2000196c 	.word	0x2000196c
 8008b94:	20001970 	.word	0x20001970
 8008b98:	2000036b 	.word	0x2000036b
 8008b9c:	20000368 	.word	0x20000368
 8008ba0:	20000369 	.word	0x20000369

08008ba4 <plotter_pen_up>:

void plotter_pen_up() {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8008ba8:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8008bac:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008bbc <plotter_pen_up+0x18>
 8008bb0:	4803      	ldr	r0, [pc, #12]	@ (8008bc0 <plotter_pen_up+0x1c>)
 8008bb2:	f7fa fc6f 	bl	8003494 <PWM_write_duty>
}
 8008bb6:	bf00      	nop
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	42480000 	.word	0x42480000
 8008bc0:	2000062c 	.word	0x2000062c

08008bc4 <plotter_pen_down>:

void plotter_pen_down() {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8008bc8:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8008bcc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008bdc <plotter_pen_down+0x18>
 8008bd0:	4803      	ldr	r0, [pc, #12]	@ (8008be0 <plotter_pen_down+0x1c>)
 8008bd2:	f7fa fc5f 	bl	8003494 <PWM_write_duty>
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	42480000 	.word	0x42480000
 8008be0:	2000062c 	.word	0x2000062c

08008be4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008bfc:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c04:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a1b      	ldr	r2, [pc, #108]	@ (8008c98 <SIGNAL_init+0xb4>)
 8008c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c32:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d828      	bhi.n	8008c8c <SIGNAL_init+0xa8>
 8008c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <SIGNAL_init+0x5c>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c8b 	.word	0x08008c8b
 8008c44:	08008c51 	.word	0x08008c51
 8008c48:	08008c6f 	.word	0x08008c6f
 8008c4c:	08008c79 	.word	0x08008c79
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c5c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a0e      	ldr	r2, [pc, #56]	@ (8008c9c <SIGNAL_init+0xb8>)
 8008c62:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c6a:	621a      	str	r2, [r3, #32]
            break;
 8008c6c:	e00e      	b.n	8008c8c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008c74:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8008c76:	e009      	b.n	8008c8c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c86:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8008c88:	e000      	b.n	8008c8c <SIGNAL_init+0xa8>
            break;
 8008c8a:	bf00      	nop
    }
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	bf800000 	.word	0xbf800000
 8008c9c:	41200000 	.word	0x41200000

08008ca0 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8008ca0:	b480      	push	{r7}
 8008ca2:	b089      	sub	sp, #36	@ 0x24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	61f8      	str	r0, [r7, #28]
 8008ca8:	ed87 0a06 	vstr	s0, [r7, #24]
 8008cac:	edc7 0a05 	vstr	s1, [r7, #20]
 8008cb0:	ed87 1a04 	vstr	s2, [r7, #16]
 8008cb4:	edc7 1a03 	vstr	s3, [r7, #12]
 8008cb8:	ed87 2a02 	vstr	s4, [r7, #8]
 8008cbc:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008cea:	bf00      	nop
 8008cec:	3724      	adds	r7, #36	@ 0x24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8008cf6:	b480      	push	{r7}
 8008cf8:	b089      	sub	sp, #36	@ 0x24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	61f8      	str	r0, [r7, #28]
 8008cfe:	ed87 0a06 	vstr	s0, [r7, #24]
 8008d02:	edc7 0a05 	vstr	s1, [r7, #20]
 8008d06:	ed87 1a04 	vstr	s2, [r7, #16]
 8008d0a:	edc7 1a03 	vstr	s3, [r7, #12]
 8008d0e:	ed87 2a02 	vstr	s4, [r7, #8]
 8008d12:	edc7 2a01 	vstr	s5, [r7, #4]
 8008d16:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008d4a:	bf00      	nop
 8008d4c:	3724      	adds	r7, #36	@ 0x24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
	...

08008d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d62:	4a0e      	ldr	r2, [pc, #56]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d64:	f043 0301 	orr.w	r3, r3, #1
 8008d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d76:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d7a:	4a08      	ldr	r2, [pc, #32]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d82:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <HAL_MspInit+0x44>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008d8e:	f003 fb4f 	bl	800c430 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40021000 	.word	0x40021000

08008da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <NMI_Handler+0x4>

08008da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <HardFault_Handler+0x4>

08008db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <MemManage_Handler+0x4>

08008db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <BusFault_Handler+0x4>

08008dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <UsageFault_Handler+0x4>

08008dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008dcc:	bf00      	nop
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008dda:	bf00      	nop
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008df6:	f000 ffbb 	bl	8009d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dfa:	bf00      	nop
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8008e02:	2001      	movs	r0, #1
 8008e04:	f003 fa58 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008e08:	bf00      	nop
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8008e10:	2010      	movs	r0, #16
 8008e12:	f003 fa51 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008e16:	bf00      	nop
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008e20:	4802      	ldr	r0, [pc, #8]	@ (8008e2c <DMA1_Channel1_IRQHandler+0x10>)
 8008e22:	f002 ff2e 	bl	800bc82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008e26:	bf00      	nop
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20000220 	.word	0x20000220

08008e30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008e34:	4802      	ldr	r0, [pc, #8]	@ (8008e40 <DMA1_Channel2_IRQHandler+0x10>)
 8008e36:	f002 ff24 	bl	800bc82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008e3a:	bf00      	nop
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20002174 	.word	0x20002174

08008e44 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008e48:	4802      	ldr	r0, [pc, #8]	@ (8008e54 <DMA1_Channel3_IRQHandler+0x10>)
 8008e4a:	f002 ff1a 	bl	800bc82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	200021d4 	.word	0x200021d4

08008e58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8008e5c:	4802      	ldr	r0, [pc, #8]	@ (8008e68 <DMA1_Channel4_IRQHandler+0x10>)
 8008e5e:	f002 ff10 	bl	800bc82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200020b4 	.word	0x200020b4

08008e6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008e70:	4802      	ldr	r0, [pc, #8]	@ (8008e7c <DMA1_Channel5_IRQHandler+0x10>)
 8008e72:	f002 ff06 	bl	800bc82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008e76:	bf00      	nop
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20002114 	.word	0x20002114

08008e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8008e84:	2040      	movs	r0, #64	@ 0x40
 8008e86:	f003 fa17 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8008e8a:	2080      	movs	r0, #128	@ 0x80
 8008e8c:	f003 fa14 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008e90:	bf00      	nop
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008e98:	4803      	ldr	r0, [pc, #12]	@ (8008ea8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8008e9a:	f004 ff4f 	bl	800dd3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8008e9e:	4803      	ldr	r0, [pc, #12]	@ (8008eac <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008ea0:	f004 ff4c 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008ea4:	bf00      	nop
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20001988 	.word	0x20001988
 8008eac:	20001e50 	.word	0x20001e50

08008eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008eb4:	4802      	ldr	r0, [pc, #8]	@ (8008ec0 <TIM2_IRQHandler+0x10>)
 8008eb6:	f004 ff41 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008eba:	bf00      	nop
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20001a54 	.word	0x20001a54

08008ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008ec8:	4802      	ldr	r0, [pc, #8]	@ (8008ed4 <TIM3_IRQHandler+0x10>)
 8008eca:	f004 ff37 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20001b20 	.word	0x20001b20

08008ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008edc:	4802      	ldr	r0, [pc, #8]	@ (8008ee8 <TIM4_IRQHandler+0x10>)
 8008ede:	f004 ff2d 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001bec 	.word	0x20001bec

08008eec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008ef0:	4802      	ldr	r0, [pc, #8]	@ (8008efc <USART2_IRQHandler+0x10>)
 8008ef2:	f006 fc77 	bl	800f7e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008ef6:	bf00      	nop
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20001fe8 	.word	0x20001fe8

08008f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8008f04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008f08:	f003 f9d6 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8008f0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008f10:	f003 f9d2 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8008f14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008f18:	f003 f9ce 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008f1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008f20:	f003 f9ca 	bl	800c2b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008f2c:	4802      	ldr	r0, [pc, #8]	@ (8008f38 <LPUART1_IRQHandler+0x10>)
 8008f2e:	f006 fc59 	bl	800f7e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20001f1c 	.word	0x20001f1c

08008f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f44:	4a14      	ldr	r2, [pc, #80]	@ (8008f98 <_sbrk+0x5c>)
 8008f46:	4b15      	ldr	r3, [pc, #84]	@ (8008f9c <_sbrk+0x60>)
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f50:	4b13      	ldr	r3, [pc, #76]	@ (8008fa0 <_sbrk+0x64>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f58:	4b11      	ldr	r3, [pc, #68]	@ (8008fa0 <_sbrk+0x64>)
 8008f5a:	4a12      	ldr	r2, [pc, #72]	@ (8008fa4 <_sbrk+0x68>)
 8008f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f5e:	4b10      	ldr	r3, [pc, #64]	@ (8008fa0 <_sbrk+0x64>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4413      	add	r3, r2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d207      	bcs.n	8008f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f6c:	f008 fec8 	bl	8011d00 <__errno>
 8008f70:	4603      	mov	r3, r0
 8008f72:	220c      	movs	r2, #12
 8008f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	e009      	b.n	8008f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f7c:	4b08      	ldr	r3, [pc, #32]	@ (8008fa0 <_sbrk+0x64>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f82:	4b07      	ldr	r3, [pc, #28]	@ (8008fa0 <_sbrk+0x64>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	4a05      	ldr	r2, [pc, #20]	@ (8008fa0 <_sbrk+0x64>)
 8008f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20020000 	.word	0x20020000
 8008f9c:	00000400 	.word	0x00000400
 8008fa0:	20001984 	.word	0x20001984
 8008fa4:	20002380 	.word	0x20002380

08008fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <SystemInit+0x20>)
 8008fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb2:	4a05      	ldr	r2, [pc, #20]	@ (8008fc8 <SystemInit+0x20>)
 8008fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fbc:	bf00      	nop
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	e000ed00 	.word	0xe000ed00

08008fcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b098      	sub	sp, #96	@ 0x60
 8008fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	605a      	str	r2, [r3, #4]
 8008fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008fde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	609a      	str	r2, [r3, #8]
 8008fea:	60da      	str	r2, [r3, #12]
 8008fec:	611a      	str	r2, [r3, #16]
 8008fee:	615a      	str	r2, [r3, #20]
 8008ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	2234      	movs	r2, #52	@ 0x34
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f008 fe69 	bl	8011cd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009000:	4a3b      	ldr	r2, [pc, #236]	@ (80090f0 <MX_TIM1_Init+0x124>)
 8009002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009004:	4b39      	ldr	r3, [pc, #228]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009006:	2200      	movs	r2, #0
 8009008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800900a:	4b38      	ldr	r3, [pc, #224]	@ (80090ec <MX_TIM1_Init+0x120>)
 800900c:	2200      	movs	r2, #0
 800900e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009010:	4b36      	ldr	r3, [pc, #216]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009018:	4b34      	ldr	r3, [pc, #208]	@ (80090ec <MX_TIM1_Init+0x120>)
 800901a:	2200      	movs	r2, #0
 800901c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800901e:	4b33      	ldr	r3, [pc, #204]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009020:	2200      	movs	r2, #0
 8009022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009024:	4b31      	ldr	r3, [pc, #196]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009026:	2200      	movs	r2, #0
 8009028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800902a:	4830      	ldr	r0, [pc, #192]	@ (80090ec <MX_TIM1_Init+0x120>)
 800902c:	f004 fad8 	bl	800d5e0 <HAL_TIM_PWM_Init>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009036:	f7ff f927 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800903a:	2300      	movs	r3, #0
 800903c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800903e:	2300      	movs	r3, #0
 8009040:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009042:	2300      	movs	r3, #0
 8009044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800904a:	4619      	mov	r1, r3
 800904c:	4827      	ldr	r0, [pc, #156]	@ (80090ec <MX_TIM1_Init+0x120>)
 800904e:	f006 f8e9 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009058:	f7ff f916 	bl	8008288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800905c:	2360      	movs	r3, #96	@ 0x60
 800905e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009064:	2300      	movs	r3, #0
 8009066:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009068:	2300      	movs	r3, #0
 800906a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800906c:	2300      	movs	r3, #0
 800906e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009070:	2300      	movs	r3, #0
 8009072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009074:	2300      	movs	r3, #0
 8009076:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800907c:	220c      	movs	r2, #12
 800907e:	4619      	mov	r1, r3
 8009080:	481a      	ldr	r0, [pc, #104]	@ (80090ec <MX_TIM1_Init+0x120>)
 8009082:	f004 ffd5 	bl	800e030 <HAL_TIM_PWM_ConfigChannel>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800908c:	f7ff f8fc 	bl	8008288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009090:	2300      	movs	r3, #0
 8009092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009094:	2300      	movs	r3, #0
 8009096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80090a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80090a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80090ae:	2300      	movs	r3, #0
 80090b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80090b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80090ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80090c0:	2300      	movs	r3, #0
 80090c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80090c8:	1d3b      	adds	r3, r7, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	4807      	ldr	r0, [pc, #28]	@ (80090ec <MX_TIM1_Init+0x120>)
 80090ce:	f006 f93f 	bl	800f350 <HAL_TIMEx_ConfigBreakDeadTime>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80090d8:	f7ff f8d6 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80090dc:	4803      	ldr	r0, [pc, #12]	@ (80090ec <MX_TIM1_Init+0x120>)
 80090de:	f000 fb77 	bl	80097d0 <HAL_TIM_MspPostInit>

}
 80090e2:	bf00      	nop
 80090e4:	3760      	adds	r7, #96	@ 0x60
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20001988 	.word	0x20001988
 80090f0:	40012c00 	.word	0x40012c00

080090f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80090fa:	f107 0310 	add.w	r3, r7, #16
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	605a      	str	r2, [r3, #4]
 8009104:	609a      	str	r2, [r3, #8]
 8009106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009108:	1d3b      	adds	r3, r7, #4
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	605a      	str	r2, [r3, #4]
 8009110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009112:	4b1e      	ldr	r3, [pc, #120]	@ (800918c <MX_TIM2_Init+0x98>)
 8009114:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009118:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800911a:	4b1c      	ldr	r3, [pc, #112]	@ (800918c <MX_TIM2_Init+0x98>)
 800911c:	22a9      	movs	r2, #169	@ 0xa9
 800911e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <MX_TIM2_Init+0x98>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8009126:	4b19      	ldr	r3, [pc, #100]	@ (800918c <MX_TIM2_Init+0x98>)
 8009128:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800912c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800912e:	4b17      	ldr	r3, [pc, #92]	@ (800918c <MX_TIM2_Init+0x98>)
 8009130:	2200      	movs	r2, #0
 8009132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009134:	4b15      	ldr	r3, [pc, #84]	@ (800918c <MX_TIM2_Init+0x98>)
 8009136:	2200      	movs	r2, #0
 8009138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800913a:	4814      	ldr	r0, [pc, #80]	@ (800918c <MX_TIM2_Init+0x98>)
 800913c:	f004 f904 	bl	800d348 <HAL_TIM_Base_Init>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009146:	f7ff f89f 	bl	8008288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800914a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800914e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009150:	f107 0310 	add.w	r3, r7, #16
 8009154:	4619      	mov	r1, r3
 8009156:	480d      	ldr	r0, [pc, #52]	@ (800918c <MX_TIM2_Init+0x98>)
 8009158:	f005 f87e 	bl	800e258 <HAL_TIM_ConfigClockSource>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009162:	f7ff f891 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800916e:	1d3b      	adds	r3, r7, #4
 8009170:	4619      	mov	r1, r3
 8009172:	4806      	ldr	r0, [pc, #24]	@ (800918c <MX_TIM2_Init+0x98>)
 8009174:	f006 f856 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800917e:	f7ff f883 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009182:	bf00      	nop
 8009184:	3720      	adds	r7, #32
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001a54 	.word	0x20001a54

08009190 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08c      	sub	sp, #48	@ 0x30
 8009194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009196:	f107 030c 	add.w	r3, r7, #12
 800919a:	2224      	movs	r2, #36	@ 0x24
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f008 fd96 	bl	8011cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091a4:	463b      	mov	r3, r7
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	605a      	str	r2, [r3, #4]
 80091ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80091ae:	4b21      	ldr	r3, [pc, #132]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091b0:	4a21      	ldr	r2, [pc, #132]	@ (8009238 <MX_TIM3_Init+0xa8>)
 80091b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80091b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091bc:	2200      	movs	r2, #0
 80091be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80091c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091ce:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <MX_TIM3_Init+0xa4>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80091d4:	2303      	movs	r3, #3
 80091d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80091d8:	2300      	movs	r3, #0
 80091da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80091e8:	2300      	movs	r3, #0
 80091ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80091ec:	2301      	movs	r3, #1
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80091f0:	2300      	movs	r3, #0
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80091f8:	f107 030c 	add.w	r3, r7, #12
 80091fc:	4619      	mov	r1, r3
 80091fe:	480d      	ldr	r0, [pc, #52]	@ (8009234 <MX_TIM3_Init+0xa4>)
 8009200:	f004 fc5a 	bl	800dab8 <HAL_TIM_Encoder_Init>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800920a:	f7ff f83d 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800920e:	2300      	movs	r3, #0
 8009210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009216:	463b      	mov	r3, r7
 8009218:	4619      	mov	r1, r3
 800921a:	4806      	ldr	r0, [pc, #24]	@ (8009234 <MX_TIM3_Init+0xa4>)
 800921c:	f006 f802 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8009226:	f7ff f82f 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800922a:	bf00      	nop
 800922c:	3730      	adds	r7, #48	@ 0x30
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20001b20 	.word	0x20001b20
 8009238:	40000400 	.word	0x40000400

0800923c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	@ 0x30
 8009240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009242:	f107 030c 	add.w	r3, r7, #12
 8009246:	2224      	movs	r2, #36	@ 0x24
 8009248:	2100      	movs	r1, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f008 fd40 	bl	8011cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009250:	463b      	mov	r3, r7
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	605a      	str	r2, [r3, #4]
 8009258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800925a:	4b21      	ldr	r3, [pc, #132]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 800925c:	4a21      	ldr	r2, [pc, #132]	@ (80092e4 <MX_TIM4_Init+0xa8>)
 800925e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009260:	4b1f      	ldr	r3, [pc, #124]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009266:	4b1e      	ldr	r3, [pc, #120]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 8009268:	2200      	movs	r2, #0
 800926a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800926c:	4b1c      	ldr	r3, [pc, #112]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 800926e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009274:	4b1a      	ldr	r3, [pc, #104]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800927a:	4b19      	ldr	r3, [pc, #100]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 800927c:	2200      	movs	r2, #0
 800927e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009280:	2303      	movs	r3, #3
 8009282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009288:	2301      	movs	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800928c:	2300      	movs	r3, #0
 800928e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009294:	2300      	movs	r3, #0
 8009296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009298:	2301      	movs	r3, #1
 800929a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800929c:	2300      	movs	r3, #0
 800929e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80092a4:	f107 030c 	add.w	r3, r7, #12
 80092a8:	4619      	mov	r1, r3
 80092aa:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 80092ac:	f004 fc04 	bl	800dab8 <HAL_TIM_Encoder_Init>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80092b6:	f7fe ffe7 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092ba:	2300      	movs	r3, #0
 80092bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80092c2:	463b      	mov	r3, r7
 80092c4:	4619      	mov	r1, r3
 80092c6:	4806      	ldr	r0, [pc, #24]	@ (80092e0 <MX_TIM4_Init+0xa4>)
 80092c8:	f005 ffac 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80092d2:	f7fe ffd9 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80092d6:	bf00      	nop
 80092d8:	3730      	adds	r7, #48	@ 0x30
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20001bec 	.word	0x20001bec
 80092e4:	40000800 	.word	0x40000800

080092e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	@ 0x30
 80092ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	2224      	movs	r2, #36	@ 0x24
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f008 fcea 	bl	8011cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092fc:	463b      	mov	r3, r7
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	605a      	str	r2, [r3, #4]
 8009304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009306:	4b21      	ldr	r3, [pc, #132]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009308:	4a21      	ldr	r2, [pc, #132]	@ (8009390 <MX_TIM5_Init+0xa8>)
 800930a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800930c:	4b1f      	ldr	r3, [pc, #124]	@ (800938c <MX_TIM5_Init+0xa4>)
 800930e:	2200      	movs	r2, #0
 8009310:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009312:	4b1e      	ldr	r3, [pc, #120]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009314:	2200      	movs	r2, #0
 8009316:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009318:	4b1c      	ldr	r3, [pc, #112]	@ (800938c <MX_TIM5_Init+0xa4>)
 800931a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800931e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009320:	4b1a      	ldr	r3, [pc, #104]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009322:	2200      	movs	r2, #0
 8009324:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009326:	4b19      	ldr	r3, [pc, #100]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009328:	2200      	movs	r2, #0
 800932a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800932c:	2303      	movs	r3, #3
 800932e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009330:	2300      	movs	r3, #0
 8009332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009338:	2300      	movs	r3, #0
 800933a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009340:	2300      	movs	r3, #0
 8009342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009344:	2301      	movs	r3, #1
 8009346:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009348:	2300      	movs	r3, #0
 800934a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	4619      	mov	r1, r3
 8009356:	480d      	ldr	r0, [pc, #52]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009358:	f004 fbae 	bl	800dab8 <HAL_TIM_Encoder_Init>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8009362:	f7fe ff91 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009366:	2300      	movs	r3, #0
 8009368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800936a:	2300      	movs	r3, #0
 800936c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800936e:	463b      	mov	r3, r7
 8009370:	4619      	mov	r1, r3
 8009372:	4806      	ldr	r0, [pc, #24]	@ (800938c <MX_TIM5_Init+0xa4>)
 8009374:	f005 ff56 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800937e:	f7fe ff83 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009382:	bf00      	nop
 8009384:	3730      	adds	r7, #48	@ 0x30
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20001cb8 	.word	0x20001cb8
 8009390:	40000c00 	.word	0x40000c00

08009394 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b09c      	sub	sp, #112	@ 0x70
 8009398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800939a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	605a      	str	r2, [r3, #4]
 80093a4:	609a      	str	r2, [r3, #8]
 80093a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	605a      	str	r2, [r3, #4]
 80093b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	611a      	str	r2, [r3, #16]
 80093c4:	615a      	str	r2, [r3, #20]
 80093c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80093c8:	1d3b      	adds	r3, r7, #4
 80093ca:	2234      	movs	r2, #52	@ 0x34
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f008 fc7e 	bl	8011cd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80093d4:	4b4c      	ldr	r3, [pc, #304]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093d6:	4a4d      	ldr	r2, [pc, #308]	@ (800950c <MX_TIM8_Init+0x178>)
 80093d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80093da:	4b4b      	ldr	r3, [pc, #300]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093dc:	2200      	movs	r2, #0
 80093de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093e0:	4b49      	ldr	r3, [pc, #292]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80093e6:	4b48      	ldr	r3, [pc, #288]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80093ee:	4b46      	ldr	r3, [pc, #280]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80093f6:	4b44      	ldr	r3, [pc, #272]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093fc:	4b42      	ldr	r3, [pc, #264]	@ (8009508 <MX_TIM8_Init+0x174>)
 80093fe:	2200      	movs	r2, #0
 8009400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009402:	4841      	ldr	r0, [pc, #260]	@ (8009508 <MX_TIM8_Init+0x174>)
 8009404:	f003 ffa0 	bl	800d348 <HAL_TIM_Base_Init>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800940e:	f7fe ff3b 	bl	8008288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009416:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009418:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800941c:	4619      	mov	r1, r3
 800941e:	483a      	ldr	r0, [pc, #232]	@ (8009508 <MX_TIM8_Init+0x174>)
 8009420:	f004 ff1a 	bl	800e258 <HAL_TIM_ConfigClockSource>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800942a:	f7fe ff2d 	bl	8008288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800942e:	4836      	ldr	r0, [pc, #216]	@ (8009508 <MX_TIM8_Init+0x174>)
 8009430:	f004 f8d6 	bl	800d5e0 <HAL_TIM_PWM_Init>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800943a:	f7fe ff25 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800943e:	2300      	movs	r3, #0
 8009440:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009442:	2300      	movs	r3, #0
 8009444:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009446:	2300      	movs	r3, #0
 8009448:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800944a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800944e:	4619      	mov	r1, r3
 8009450:	482d      	ldr	r0, [pc, #180]	@ (8009508 <MX_TIM8_Init+0x174>)
 8009452:	f005 fee7 	bl	800f224 <HAL_TIMEx_MasterConfigSynchronization>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800945c:	f7fe ff14 	bl	8008288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009460:	2360      	movs	r3, #96	@ 0x60
 8009462:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009468:	2300      	movs	r3, #0
 800946a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800946c:	2300      	movs	r3, #0
 800946e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009470:	2300      	movs	r3, #0
 8009472:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009474:	2300      	movs	r3, #0
 8009476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009478:	2300      	movs	r3, #0
 800947a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800947c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009480:	2200      	movs	r2, #0
 8009482:	4619      	mov	r1, r3
 8009484:	4820      	ldr	r0, [pc, #128]	@ (8009508 <MX_TIM8_Init+0x174>)
 8009486:	f004 fdd3 	bl	800e030 <HAL_TIM_PWM_ConfigChannel>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009490:	f7fe fefa 	bl	8008288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009494:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009498:	2204      	movs	r2, #4
 800949a:	4619      	mov	r1, r3
 800949c:	481a      	ldr	r0, [pc, #104]	@ (8009508 <MX_TIM8_Init+0x174>)
 800949e:	f004 fdc7 	bl	800e030 <HAL_TIM_PWM_ConfigChannel>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80094a8:	f7fe feee 	bl	8008288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80094bc:	2300      	movs	r3, #0
 80094be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80094c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80094ca:	2300      	movs	r3, #0
 80094cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80094d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80094dc:	2300      	movs	r3, #0
 80094de:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	4619      	mov	r1, r3
 80094e8:	4807      	ldr	r0, [pc, #28]	@ (8009508 <MX_TIM8_Init+0x174>)
 80094ea:	f005 ff31 	bl	800f350 <HAL_TIMEx_ConfigBreakDeadTime>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80094f4:	f7fe fec8 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80094f8:	4803      	ldr	r0, [pc, #12]	@ (8009508 <MX_TIM8_Init+0x174>)
 80094fa:	f000 f969 	bl	80097d0 <HAL_TIM_MspPostInit>

}
 80094fe:	bf00      	nop
 8009500:	3770      	adds	r7, #112	@ 0x70
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20001d84 	.word	0x20001d84
 800950c:	40013400 	.word	0x40013400

08009510 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009514:	4b14      	ldr	r3, [pc, #80]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009516:	4a15      	ldr	r2, [pc, #84]	@ (800956c <MX_TIM16_Init+0x5c>)
 8009518:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800951a:	4b13      	ldr	r3, [pc, #76]	@ (8009568 <MX_TIM16_Init+0x58>)
 800951c:	22a9      	movs	r2, #169	@ 0xa9
 800951e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009520:	4b11      	ldr	r3, [pc, #68]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009522:	2200      	movs	r2, #0
 8009524:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009526:	4b10      	ldr	r3, [pc, #64]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009528:	f240 4279 	movw	r2, #1145	@ 0x479
 800952c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800952e:	4b0e      	ldr	r3, [pc, #56]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009530:	2200      	movs	r2, #0
 8009532:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009534:	4b0c      	ldr	r3, [pc, #48]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009536:	2200      	movs	r2, #0
 8009538:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800953a:	4b0b      	ldr	r3, [pc, #44]	@ (8009568 <MX_TIM16_Init+0x58>)
 800953c:	2200      	movs	r2, #0
 800953e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009540:	4809      	ldr	r0, [pc, #36]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009542:	f003 ff01 	bl	800d348 <HAL_TIM_Base_Init>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800954c:	f7fe fe9c 	bl	8008288 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009550:	2108      	movs	r1, #8
 8009552:	4805      	ldr	r0, [pc, #20]	@ (8009568 <MX_TIM16_Init+0x58>)
 8009554:	f004 f9ba 	bl	800d8cc <HAL_TIM_OnePulse_Init>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800955e:	f7fe fe93 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009562:	bf00      	nop
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20001e50 	.word	0x20001e50
 800956c:	40014400 	.word	0x40014400

08009570 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a0d      	ldr	r2, [pc, #52]	@ (80095b4 <HAL_TIM_PWM_MspInit+0x44>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d113      	bne.n	80095aa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009582:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <HAL_TIM_PWM_MspInit+0x48>)
 8009584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009586:	4a0c      	ldr	r2, [pc, #48]	@ (80095b8 <HAL_TIM_PWM_MspInit+0x48>)
 8009588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800958c:	6613      	str	r3, [r2, #96]	@ 0x60
 800958e:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <HAL_TIM_PWM_MspInit+0x48>)
 8009590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	2019      	movs	r0, #25
 80095a0:	f002 f957 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80095a4:	2019      	movs	r0, #25
 80095a6:	f002 f96e 	bl	800b886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	40012c00 	.word	0x40012c00
 80095b8:	40021000 	.word	0x40021000

080095bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095cc:	d114      	bne.n	80095f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095ce:	4b22      	ldr	r3, [pc, #136]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 80095d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d2:	4a21      	ldr	r2, [pc, #132]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 80095d4:	f043 0301 	orr.w	r3, r3, #1
 80095d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80095da:	4b1f      	ldr	r3, [pc, #124]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 80095dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	617b      	str	r3, [r7, #20]
 80095e4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80095e6:	2200      	movs	r2, #0
 80095e8:	2100      	movs	r1, #0
 80095ea:	201c      	movs	r0, #28
 80095ec:	f002 f931 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095f0:	201c      	movs	r0, #28
 80095f2:	f002 f948 	bl	800b886 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80095f6:	e02a      	b.n	800964e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a17      	ldr	r2, [pc, #92]	@ (800965c <HAL_TIM_Base_MspInit+0xa0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d10c      	bne.n	800961c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009602:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 8009604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009606:	4a14      	ldr	r2, [pc, #80]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 8009608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800960c:	6613      	str	r3, [r2, #96]	@ 0x60
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 8009610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009616:	613b      	str	r3, [r7, #16]
 8009618:	693b      	ldr	r3, [r7, #16]
}
 800961a:	e018      	b.n	800964e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a0f      	ldr	r2, [pc, #60]	@ (8009660 <HAL_TIM_Base_MspInit+0xa4>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d113      	bne.n	800964e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009626:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 8009628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962a:	4a0b      	ldr	r2, [pc, #44]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 800962c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009630:	6613      	str	r3, [r2, #96]	@ 0x60
 8009632:	4b09      	ldr	r3, [pc, #36]	@ (8009658 <HAL_TIM_Base_MspInit+0x9c>)
 8009634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800963e:	2200      	movs	r2, #0
 8009640:	2100      	movs	r1, #0
 8009642:	2019      	movs	r0, #25
 8009644:	f002 f905 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009648:	2019      	movs	r0, #25
 800964a:	f002 f91c 	bl	800b886 <HAL_NVIC_EnableIRQ>
}
 800964e:	bf00      	nop
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000
 800965c:	40013400 	.word	0x40013400
 8009660:	40014400 	.word	0x40014400

08009664 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08e      	sub	sp, #56	@ 0x38
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800966c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	609a      	str	r2, [r3, #8]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a4f      	ldr	r2, [pc, #316]	@ (80097c0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d131      	bne.n	80096ea <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009686:	4b4f      	ldr	r3, [pc, #316]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968a:	4a4e      	ldr	r2, [pc, #312]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800968c:	f043 0302 	orr.w	r3, r3, #2
 8009690:	6593      	str	r3, [r2, #88]	@ 0x58
 8009692:	4b4c      	ldr	r3, [pc, #304]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	623b      	str	r3, [r7, #32]
 800969c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800969e:	4b49      	ldr	r3, [pc, #292]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 80096a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a2:	4a48      	ldr	r2, [pc, #288]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096aa:	4b46      	ldr	r3, [pc, #280]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 80096ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	61fb      	str	r3, [r7, #28]
 80096b4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80096b6:	23c0      	movs	r3, #192	@ 0xc0
 80096b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ba:	2302      	movs	r3, #2
 80096bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c2:	2300      	movs	r3, #0
 80096c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80096c6:	2302      	movs	r3, #2
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ce:	4619      	mov	r1, r3
 80096d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096d4:	f002 fc24 	bl	800bf20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80096d8:	2200      	movs	r2, #0
 80096da:	2100      	movs	r1, #0
 80096dc:	201d      	movs	r0, #29
 80096de:	f002 f8b8 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80096e2:	201d      	movs	r0, #29
 80096e4:	f002 f8cf 	bl	800b886 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80096e8:	e065      	b.n	80097b6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a36      	ldr	r2, [pc, #216]	@ (80097c8 <HAL_TIM_Encoder_MspInit+0x164>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d132      	bne.n	800975a <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80096f4:	4b33      	ldr	r3, [pc, #204]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 80096f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f8:	4a32      	ldr	r2, [pc, #200]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 80096fa:	f043 0304 	orr.w	r3, r3, #4
 80096fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009700:	4b30      	ldr	r3, [pc, #192]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800970c:	4b2d      	ldr	r3, [pc, #180]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800970e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009710:	4a2c      	ldr	r2, [pc, #176]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009718:	4b2a      	ldr	r3, [pc, #168]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800971a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009724:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972a:	2302      	movs	r3, #2
 800972c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972e:	2300      	movs	r3, #0
 8009730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009732:	2300      	movs	r3, #0
 8009734:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8009736:	230a      	movs	r3, #10
 8009738:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800973a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800973e:	4619      	mov	r1, r3
 8009740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009744:	f002 fbec 	bl	800bf20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009748:	2200      	movs	r2, #0
 800974a:	2100      	movs	r1, #0
 800974c:	201e      	movs	r0, #30
 800974e:	f002 f880 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009752:	201e      	movs	r0, #30
 8009754:	f002 f897 	bl	800b886 <HAL_NVIC_EnableIRQ>
}
 8009758:	e02d      	b.n	80097b6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1b      	ldr	r2, [pc, #108]	@ (80097cc <HAL_TIM_Encoder_MspInit+0x168>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d128      	bne.n	80097b6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009768:	4a16      	ldr	r2, [pc, #88]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800976a:	f043 0308 	orr.w	r3, r3, #8
 800976e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009770:	4b14      	ldr	r3, [pc, #80]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800977c:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800977e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009780:	4a10      	ldr	r2, [pc, #64]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 8009782:	f043 0301 	orr.w	r3, r3, #1
 8009786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009788:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <HAL_TIM_Encoder_MspInit+0x160>)
 800978a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009794:	2303      	movs	r3, #3
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009798:	2302      	movs	r3, #2
 800979a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800979c:	2300      	movs	r3, #0
 800979e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097a0:	2300      	movs	r3, #0
 80097a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80097a4:	2302      	movs	r3, #2
 80097a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097ac:	4619      	mov	r1, r3
 80097ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097b2:	f002 fbb5 	bl	800bf20 <HAL_GPIO_Init>
}
 80097b6:	bf00      	nop
 80097b8:	3738      	adds	r7, #56	@ 0x38
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	40000400 	.word	0x40000400
 80097c4:	40021000 	.word	0x40021000
 80097c8:	40000800 	.word	0x40000800
 80097cc:	40000c00 	.word	0x40000c00

080097d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	@ 0x28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	605a      	str	r2, [r3, #4]
 80097e2:	609a      	str	r2, [r3, #8]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a22      	ldr	r2, [pc, #136]	@ (8009878 <HAL_TIM_MspPostInit+0xa8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d11c      	bne.n	800982c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097f2:	4b22      	ldr	r3, [pc, #136]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 80097f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f6:	4a21      	ldr	r2, [pc, #132]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 80097f8:	f043 0304 	orr.w	r3, r3, #4
 80097fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097fe:	4b1f      	ldr	r3, [pc, #124]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009802:	f003 0304 	and.w	r3, r3, #4
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800980a:	2308      	movs	r3, #8
 800980c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800980e:	2302      	movs	r3, #2
 8009810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009816:	2300      	movs	r3, #0
 8009818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800981a:	2302      	movs	r3, #2
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	4619      	mov	r1, r3
 8009824:	4816      	ldr	r0, [pc, #88]	@ (8009880 <HAL_TIM_MspPostInit+0xb0>)
 8009826:	f002 fb7b 	bl	800bf20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800982a:	e020      	b.n	800986e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a14      	ldr	r2, [pc, #80]	@ (8009884 <HAL_TIM_MspPostInit+0xb4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d11b      	bne.n	800986e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009836:	4b11      	ldr	r3, [pc, #68]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 8009838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800983a:	4a10      	ldr	r2, [pc, #64]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 800983c:	f043 0304 	orr.w	r3, r3, #4
 8009840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009842:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <HAL_TIM_MspPostInit+0xac>)
 8009844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800984e:	23c0      	movs	r3, #192	@ 0xc0
 8009850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009852:	2302      	movs	r3, #2
 8009854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009856:	2300      	movs	r3, #0
 8009858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985a:	2300      	movs	r3, #0
 800985c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800985e:	2304      	movs	r3, #4
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009862:	f107 0314 	add.w	r3, r7, #20
 8009866:	4619      	mov	r1, r3
 8009868:	4805      	ldr	r0, [pc, #20]	@ (8009880 <HAL_TIM_MspPostInit+0xb0>)
 800986a:	f002 fb59 	bl	800bf20 <HAL_GPIO_Init>
}
 800986e:	bf00      	nop
 8009870:	3728      	adds	r7, #40	@ 0x28
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	40012c00 	.word	0x40012c00
 800987c:	40021000 	.word	0x40021000
 8009880:	48000800 	.word	0x48000800
 8009884:	40013400 	.word	0x40013400

08009888 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800988c:	4b20      	ldr	r3, [pc, #128]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 800988e:	4a21      	ldr	r2, [pc, #132]	@ (8009914 <MX_LPUART1_UART_Init+0x8c>)
 8009890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8009892:	4b1f      	ldr	r3, [pc, #124]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 8009894:	4a20      	ldr	r2, [pc, #128]	@ (8009918 <MX_LPUART1_UART_Init+0x90>)
 8009896:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009898:	4b1d      	ldr	r3, [pc, #116]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 800989a:	2200      	movs	r2, #0
 800989c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800989e:	4b1c      	ldr	r3, [pc, #112]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80098a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80098aa:	4b19      	ldr	r3, [pc, #100]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098ac:	220c      	movs	r2, #12
 80098ae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098b0:	4b17      	ldr	r3, [pc, #92]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098b6:	4b16      	ldr	r3, [pc, #88]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80098bc:	4b14      	ldr	r3, [pc, #80]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098be:	2200      	movs	r2, #0
 80098c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80098c2:	4b13      	ldr	r3, [pc, #76]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80098c8:	4811      	ldr	r0, [pc, #68]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098ca:	f005 fe25 	bl	800f518 <HAL_UART_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80098d4:	f7fe fcd8 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098d8:	2100      	movs	r1, #0
 80098da:	480d      	ldr	r0, [pc, #52]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098dc:	f007 fb82 	bl	8010fe4 <HAL_UARTEx_SetTxFifoThreshold>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80098e6:	f7fe fccf 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098ea:	2100      	movs	r1, #0
 80098ec:	4808      	ldr	r0, [pc, #32]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098ee:	f007 fbb7 	bl	8011060 <HAL_UARTEx_SetRxFifoThreshold>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80098f8:	f7fe fcc6 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80098fc:	4804      	ldr	r0, [pc, #16]	@ (8009910 <MX_LPUART1_UART_Init+0x88>)
 80098fe:	f007 fb38 	bl	8010f72 <HAL_UARTEx_DisableFifoMode>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009908:	f7fe fcbe 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20001f1c 	.word	0x20001f1c
 8009914:	40008000 	.word	0x40008000
 8009918:	001e8480 	.word	0x001e8480

0800991c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009920:	4b23      	ldr	r3, [pc, #140]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009922:	4a24      	ldr	r2, [pc, #144]	@ (80099b4 <MX_USART2_UART_Init+0x98>)
 8009924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8009926:	4b22      	ldr	r3, [pc, #136]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009928:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800992c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800992e:	4b20      	ldr	r3, [pc, #128]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009930:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009934:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009936:	4b1e      	ldr	r3, [pc, #120]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009938:	2200      	movs	r2, #0
 800993a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800993c:	4b1c      	ldr	r3, [pc, #112]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800993e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009944:	4b1a      	ldr	r3, [pc, #104]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009946:	220c      	movs	r2, #12
 8009948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800994a:	4b19      	ldr	r3, [pc, #100]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009950:	4b17      	ldr	r3, [pc, #92]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009952:	2200      	movs	r2, #0
 8009954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009956:	4b16      	ldr	r3, [pc, #88]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009958:	2200      	movs	r2, #0
 800995a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800995c:	4b14      	ldr	r3, [pc, #80]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800995e:	2200      	movs	r2, #0
 8009960:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009962:	4b13      	ldr	r3, [pc, #76]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 8009964:	2200      	movs	r2, #0
 8009966:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009968:	4811      	ldr	r0, [pc, #68]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800996a:	f005 fdd5 	bl	800f518 <HAL_UART_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8009974:	f7fe fc88 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009978:	2100      	movs	r1, #0
 800997a:	480d      	ldr	r0, [pc, #52]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800997c:	f007 fb32 	bl	8010fe4 <HAL_UARTEx_SetTxFifoThreshold>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8009986:	f7fe fc7f 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800998a:	2100      	movs	r1, #0
 800998c:	4808      	ldr	r0, [pc, #32]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800998e:	f007 fb67 	bl	8011060 <HAL_UARTEx_SetRxFifoThreshold>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8009998:	f7fe fc76 	bl	8008288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800999c:	4804      	ldr	r0, [pc, #16]	@ (80099b0 <MX_USART2_UART_Init+0x94>)
 800999e:	f007 fae8 	bl	8010f72 <HAL_UARTEx_DisableFifoMode>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80099a8:	f7fe fc6e 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80099ac:	bf00      	nop
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20001fe8 	.word	0x20001fe8
 80099b4:	40004400 	.word	0x40004400

080099b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b0a0      	sub	sp, #128	@ 0x80
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	605a      	str	r2, [r3, #4]
 80099ca:	609a      	str	r2, [r3, #8]
 80099cc:	60da      	str	r2, [r3, #12]
 80099ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099d0:	f107 0318 	add.w	r3, r7, #24
 80099d4:	2254      	movs	r2, #84	@ 0x54
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f008 f979 	bl	8011cd0 <memset>
  if(uartHandle->Instance==LPUART1)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a99      	ldr	r2, [pc, #612]	@ (8009c48 <HAL_UART_MspInit+0x290>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	f040 8093 	bne.w	8009b10 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80099ea:	2320      	movs	r3, #32
 80099ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80099ee:	2300      	movs	r3, #0
 80099f0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099f2:	f107 0318 	add.w	r3, r7, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f003 fa58 	bl	800ceac <HAL_RCCEx_PeriphCLKConfig>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009a02:	f7fe fc41 	bl	8008288 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009a06:	4b91      	ldr	r3, [pc, #580]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a0a:	4a90      	ldr	r2, [pc, #576]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a0c:	f043 0301 	orr.w	r3, r3, #1
 8009a10:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8009a12:	4b8e      	ldr	r3, [pc, #568]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]
 8009a1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a22:	4a8a      	ldr	r2, [pc, #552]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a2a:	4b88      	ldr	r3, [pc, #544]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	613b      	str	r3, [r7, #16]
 8009a34:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009a36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a44:	2300      	movs	r3, #0
 8009a46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009a48:	2308      	movs	r3, #8
 8009a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a50:	4619      	mov	r1, r3
 8009a52:	487f      	ldr	r0, [pc, #508]	@ (8009c50 <HAL_UART_MspInit+0x298>)
 8009a54:	f002 fa64 	bl	800bf20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8009a58:	4b7e      	ldr	r3, [pc, #504]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a5a:	4a7f      	ldr	r2, [pc, #508]	@ (8009c58 <HAL_UART_MspInit+0x2a0>)
 8009a5c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8009a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a60:	2222      	movs	r2, #34	@ 0x22
 8009a62:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a64:	4b7b      	ldr	r3, [pc, #492]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009a70:	4b78      	ldr	r3, [pc, #480]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a72:	2280      	movs	r2, #128	@ 0x80
 8009a74:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a76:	4b77      	ldr	r3, [pc, #476]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a7c:	4b75      	ldr	r3, [pc, #468]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8009a82:	4b74      	ldr	r3, [pc, #464]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009a88:	4b72      	ldr	r3, [pc, #456]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8009a8e:	4871      	ldr	r0, [pc, #452]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009a90:	f001 ff14 	bl	800b8bc <HAL_DMA_Init>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8009a9a:	f7fe fbf5 	bl	8008288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009aa6:	4a6b      	ldr	r2, [pc, #428]	@ (8009c54 <HAL_UART_MspInit+0x29c>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8009aac:	4b6b      	ldr	r3, [pc, #428]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009aae:	4a6c      	ldr	r2, [pc, #432]	@ (8009c60 <HAL_UART_MspInit+0x2a8>)
 8009ab0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8009ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ab4:	2223      	movs	r2, #35	@ 0x23
 8009ab6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ab8:	4b68      	ldr	r3, [pc, #416]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009aba:	2210      	movs	r2, #16
 8009abc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009abe:	4b67      	ldr	r3, [pc, #412]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ac4:	4b65      	ldr	r3, [pc, #404]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ac6:	2280      	movs	r2, #128	@ 0x80
 8009ac8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009aca:	4b64      	ldr	r3, [pc, #400]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ad0:	4b62      	ldr	r3, [pc, #392]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8009ad6:	4b61      	ldr	r3, [pc, #388]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009adc:	4b5f      	ldr	r3, [pc, #380]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8009ae2:	485e      	ldr	r0, [pc, #376]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009ae4:	f001 feea 	bl	800b8bc <HAL_DMA_Init>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8009aee:	f7fe fbcb 	bl	8008288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a59      	ldr	r2, [pc, #356]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009af6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009af8:	4a58      	ldr	r2, [pc, #352]	@ (8009c5c <HAL_UART_MspInit+0x2a4>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8009afe:	2200      	movs	r2, #0
 8009b00:	2100      	movs	r1, #0
 8009b02:	205b      	movs	r0, #91	@ 0x5b
 8009b04:	f001 fea5 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009b08:	205b      	movs	r0, #91	@ 0x5b
 8009b0a:	f001 febc 	bl	800b886 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b0e:	e097      	b.n	8009c40 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a53      	ldr	r2, [pc, #332]	@ (8009c64 <HAL_UART_MspInit+0x2ac>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	f040 8092 	bne.w	8009c40 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009b20:	2300      	movs	r3, #0
 8009b22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009b24:	f107 0318 	add.w	r3, r7, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f003 f9bf 	bl	800ceac <HAL_RCCEx_PeriphCLKConfig>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8009b34:	f7fe fba8 	bl	8008288 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b38:	4b44      	ldr	r3, [pc, #272]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3c:	4a43      	ldr	r2, [pc, #268]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b44:	4b41      	ldr	r3, [pc, #260]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b50:	4b3e      	ldr	r3, [pc, #248]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b54:	4a3d      	ldr	r2, [pc, #244]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c4c <HAL_UART_MspInit+0x294>)
 8009b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	60bb      	str	r3, [r7, #8]
 8009b66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009b68:	230c      	movs	r3, #12
 8009b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b74:	2300      	movs	r3, #0
 8009b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b78:	2307      	movs	r3, #7
 8009b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009b86:	f002 f9cb 	bl	800bf20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8009b8a:	4b37      	ldr	r3, [pc, #220]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009b8c:	4a37      	ldr	r2, [pc, #220]	@ (8009c6c <HAL_UART_MspInit+0x2b4>)
 8009b8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8009b90:	4b35      	ldr	r3, [pc, #212]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009b92:	221a      	movs	r2, #26
 8009b94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b96:	4b34      	ldr	r3, [pc, #208]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b9c:	4b32      	ldr	r3, [pc, #200]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009ba2:	4b31      	ldr	r3, [pc, #196]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009ba4:	2280      	movs	r2, #128	@ 0x80
 8009ba6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bae:	4b2e      	ldr	r3, [pc, #184]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009bba:	4b2b      	ldr	r3, [pc, #172]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009bc0:	4829      	ldr	r0, [pc, #164]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bc2:	f001 fe7b 	bl	800b8bc <HAL_DMA_Init>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8009bcc:	f7fe fb5c 	bl	8008288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a25      	ldr	r2, [pc, #148]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009bd8:	4a23      	ldr	r2, [pc, #140]	@ (8009c68 <HAL_UART_MspInit+0x2b0>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8009bde:	4b24      	ldr	r3, [pc, #144]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009be0:	4a24      	ldr	r2, [pc, #144]	@ (8009c74 <HAL_UART_MspInit+0x2bc>)
 8009be2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009be4:	4b22      	ldr	r3, [pc, #136]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009be6:	221b      	movs	r2, #27
 8009be8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bea:	4b21      	ldr	r3, [pc, #132]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009bec:	2210      	movs	r2, #16
 8009bee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009bf8:	2280      	movs	r2, #128	@ 0x80
 8009bfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c02:	4b1b      	ldr	r3, [pc, #108]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009c08:	4b19      	ldr	r3, [pc, #100]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c0e:	4b18      	ldr	r3, [pc, #96]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009c14:	4816      	ldr	r0, [pc, #88]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c16:	f001 fe51 	bl	800b8bc <HAL_DMA_Init>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8009c20:	f7fe fb32 	bl	8008288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a12      	ldr	r2, [pc, #72]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009c2a:	4a11      	ldr	r2, [pc, #68]	@ (8009c70 <HAL_UART_MspInit+0x2b8>)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	2026      	movs	r0, #38	@ 0x26
 8009c36:	f001 fe0c 	bl	800b852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009c3a:	2026      	movs	r0, #38	@ 0x26
 8009c3c:	f001 fe23 	bl	800b886 <HAL_NVIC_EnableIRQ>
}
 8009c40:	bf00      	nop
 8009c42:	3780      	adds	r7, #128	@ 0x80
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	40008000 	.word	0x40008000
 8009c4c:	40021000 	.word	0x40021000
 8009c50:	48000400 	.word	0x48000400
 8009c54:	200020b4 	.word	0x200020b4
 8009c58:	40020044 	.word	0x40020044
 8009c5c:	20002114 	.word	0x20002114
 8009c60:	40020058 	.word	0x40020058
 8009c64:	40004400 	.word	0x40004400
 8009c68:	20002174 	.word	0x20002174
 8009c6c:	4002001c 	.word	0x4002001c
 8009c70:	200021d4 	.word	0x200021d4
 8009c74:	40020030 	.word	0x40020030

08009c78 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8009c78:	480d      	ldr	r0, [pc, #52]	@ (8009cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009c7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8009c7c:	f7ff f994 	bl	8008fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c80:	480c      	ldr	r0, [pc, #48]	@ (8009cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009c82:	490d      	ldr	r1, [pc, #52]	@ (8009cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c84:	4a0d      	ldr	r2, [pc, #52]	@ (8009cbc <LoopForever+0xe>)
  movs r3, #0
 8009c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009c88:	e002      	b.n	8009c90 <LoopCopyDataInit>

08009c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c8e:	3304      	adds	r3, #4

08009c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c94:	d3f9      	bcc.n	8009c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c96:	4a0a      	ldr	r2, [pc, #40]	@ (8009cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c98:	4c0a      	ldr	r4, [pc, #40]	@ (8009cc4 <LoopForever+0x16>)
  movs r3, #0
 8009c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c9c:	e001      	b.n	8009ca2 <LoopFillZerobss>

08009c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ca0:	3204      	adds	r2, #4

08009ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ca4:	d3fb      	bcc.n	8009c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009ca6:	f008 f831 	bl	8011d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009caa:	f7fb faa9 	bl	8005200 <main>

08009cae <LoopForever>:

LoopForever:
    b LoopForever
 8009cae:	e7fe      	b.n	8009cae <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8009cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009cb8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009cbc:	08014210 	.word	0x08014210
  ldr r2, =_sbss
 8009cc0:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009cc4:	20002380 	.word	0x20002380

08009cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009cc8:	e7fe      	b.n	8009cc8 <ADC1_2_IRQHandler>

08009cca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009cd4:	2003      	movs	r0, #3
 8009cd6:	f001 fdb1 	bl	800b83c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f000 f80e 	bl	8009cfc <HAL_InitTick>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	71fb      	strb	r3, [r7, #7]
 8009cea:	e001      	b.n	8009cf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009cec:	f7ff f834 	bl	8008d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009cf0:	79fb      	ldrb	r3, [r7, #7]

}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009d08:	4b16      	ldr	r3, [pc, #88]	@ (8009d64 <HAL_InitTick+0x68>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d022      	beq.n	8009d56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009d10:	4b15      	ldr	r3, [pc, #84]	@ (8009d68 <HAL_InitTick+0x6c>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <HAL_InitTick+0x68>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 fdbc 	bl	800b8a2 <HAL_SYSTICK_Config>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10f      	bne.n	8009d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b0f      	cmp	r3, #15
 8009d34:	d809      	bhi.n	8009d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d36:	2200      	movs	r2, #0
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	f001 fd88 	bl	800b852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009d42:	4a0a      	ldr	r2, [pc, #40]	@ (8009d6c <HAL_InitTick+0x70>)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	e007      	b.n	8009d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	73fb      	strb	r3, [r7, #15]
 8009d4e:	e004      	b.n	8009d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
 8009d54:	e001      	b.n	8009d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20000140 	.word	0x20000140
 8009d68:	20000138 	.word	0x20000138
 8009d6c:	2000013c 	.word	0x2000013c

08009d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <HAL_IncTick+0x1c>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4b05      	ldr	r3, [pc, #20]	@ (8009d90 <HAL_IncTick+0x20>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	4a03      	ldr	r2, [pc, #12]	@ (8009d8c <HAL_IncTick+0x1c>)
 8009d80:	6013      	str	r3, [r2, #0]
}
 8009d82:	bf00      	nop
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20002234 	.word	0x20002234
 8009d90:	20000140 	.word	0x20000140

08009d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  return uwTick;
 8009d98:	4b03      	ldr	r3, [pc, #12]	@ (8009da8 <HAL_GetTick+0x14>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	20002234 	.word	0x20002234

08009dac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	609a      	str	r2, [r3, #8]
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	609a      	str	r2, [r3, #8]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3360      	adds	r3, #96	@ 0x60
 8009e26:	461a      	mov	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4b08      	ldr	r3, [pc, #32]	@ (8009e58 <LL_ADC_SetOffset+0x44>)
 8009e36:	4013      	ands	r3, r2
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	03fff000 	.word	0x03fff000

08009e5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3360      	adds	r3, #96	@ 0x60
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3360      	adds	r3, #96	@ 0x60
 8009e98:	461a      	mov	r2, r3
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	431a      	orrs	r2, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009eb2:	bf00      	nop
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3360      	adds	r3, #96	@ 0x60
 8009ece:	461a      	mov	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3360      	adds	r3, #96	@ 0x60
 8009f04:	461a      	mov	r2, r3
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	615a      	str	r2, [r3, #20]
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b087      	sub	sp, #28
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3330      	adds	r3, #48	@ 0x30
 8009f86:	461a      	mov	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	4413      	add	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f003 031f 	and.w	r3, r3, #31
 8009fa0:	211f      	movs	r1, #31
 8009fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa6:	43db      	mvns	r3, r3
 8009fa8:	401a      	ands	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	0e9b      	lsrs	r3, r3, #26
 8009fae:	f003 011f 	and.w	r1, r3, #31
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3314      	adds	r3, #20
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	0e5b      	lsrs	r3, r3, #25
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	f003 0304 	and.w	r3, r3, #4
 8009fea:	4413      	add	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	0d1b      	lsrs	r3, r3, #20
 8009ff6:	f003 031f 	and.w	r3, r3, #31
 8009ffa:	2107      	movs	r1, #7
 8009ffc:	fa01 f303 	lsl.w	r3, r1, r3
 800a000:	43db      	mvns	r3, r3
 800a002:	401a      	ands	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	0d1b      	lsrs	r3, r3, #20
 800a008:	f003 031f 	and.w	r3, r3, #31
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	fa01 f303 	lsl.w	r3, r1, r3
 800a012:	431a      	orrs	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a03c:	43db      	mvns	r3, r3
 800a03e:	401a      	ands	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f003 0318 	and.w	r3, r3, #24
 800a046:	4908      	ldr	r1, [pc, #32]	@ (800a068 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a048:	40d9      	lsrs	r1, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	400b      	ands	r3, r1
 800a04e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a052:	431a      	orrs	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a05a:	bf00      	nop
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	0007ffff 	.word	0x0007ffff

0800a06c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f003 031f 	and.w	r3, r3, #31
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6093      	str	r3, [r2, #8]
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0c0:	d101      	bne.n	800a0c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a0e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a0e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a10c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a110:	d101      	bne.n	800a116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a112:	2301      	movs	r3, #1
 800a114:	e000      	b.n	800a118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a138:	f043 0201 	orr.w	r2, r3, #1
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a15c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a160:	f043 0202 	orr.w	r2, r3, #2
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <LL_ADC_IsEnabled+0x18>
 800a188:	2301      	movs	r3, #1
 800a18a:	e000      	b.n	800a18e <LL_ADC_IsEnabled+0x1a>
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d101      	bne.n	800a1b2 <LL_ADC_IsDisableOngoing+0x18>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <LL_ADC_IsDisableOngoing+0x1a>
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a1d4:	f043 0204 	orr.w	r2, r3, #4
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d101      	bne.n	800a200 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a20e:	b480      	push	{r7}
 800a210:	b083      	sub	sp, #12
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 0308 	and.w	r3, r3, #8
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d101      	bne.n	800a226 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b089      	sub	sp, #36	@ 0x24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e1a9      	b.n	800a5a2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d109      	bne.n	800a270 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fa fae9 	bl	8004834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ff19 	bl	800a0ac <LL_ADC_IsDeepPowerDownEnabled>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff feff 	bl	800a088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff ff34 	bl	800a0fc <LL_ADC_IsInternalRegulatorEnabled>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d115      	bne.n	800a2c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff ff18 	bl	800a0d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a2a4:	4b9c      	ldr	r3, [pc, #624]	@ (800a518 <HAL_ADC_Init+0x2e4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	099b      	lsrs	r3, r3, #6
 800a2aa:	4a9c      	ldr	r2, [pc, #624]	@ (800a51c <HAL_ADC_Init+0x2e8>)
 800a2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b0:	099b      	lsrs	r3, r3, #6
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a2b8:	e002      	b.n	800a2c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1f9      	bne.n	800a2ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff ff16 	bl	800a0fc <LL_ADC_IsInternalRegulatorEnabled>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10d      	bne.n	800a2f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2da:	f043 0210 	orr.w	r2, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2e6:	f043 0201 	orr.w	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff ff76 	bl	800a1e8 <LL_ADC_REG_IsConversionOngoing>
 800a2fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a302:	f003 0310 	and.w	r3, r3, #16
 800a306:	2b00      	cmp	r3, #0
 800a308:	f040 8142 	bne.w	800a590 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 813e 	bne.w	800a590 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a318:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a31c:	f043 0202 	orr.w	r2, r3, #2
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff ff23 	bl	800a174 <LL_ADC_IsEnabled>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d141      	bne.n	800a3b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a33c:	d004      	beq.n	800a348 <HAL_ADC_Init+0x114>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a77      	ldr	r2, [pc, #476]	@ (800a520 <HAL_ADC_Init+0x2ec>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d10f      	bne.n	800a368 <HAL_ADC_Init+0x134>
 800a348:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a34c:	f7ff ff12 	bl	800a174 <LL_ADC_IsEnabled>
 800a350:	4604      	mov	r4, r0
 800a352:	4873      	ldr	r0, [pc, #460]	@ (800a520 <HAL_ADC_Init+0x2ec>)
 800a354:	f7ff ff0e 	bl	800a174 <LL_ADC_IsEnabled>
 800a358:	4603      	mov	r3, r0
 800a35a:	4323      	orrs	r3, r4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bf0c      	ite	eq
 800a360:	2301      	moveq	r3, #1
 800a362:	2300      	movne	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	e012      	b.n	800a38e <HAL_ADC_Init+0x15a>
 800a368:	486e      	ldr	r0, [pc, #440]	@ (800a524 <HAL_ADC_Init+0x2f0>)
 800a36a:	f7ff ff03 	bl	800a174 <LL_ADC_IsEnabled>
 800a36e:	4604      	mov	r4, r0
 800a370:	486d      	ldr	r0, [pc, #436]	@ (800a528 <HAL_ADC_Init+0x2f4>)
 800a372:	f7ff feff 	bl	800a174 <LL_ADC_IsEnabled>
 800a376:	4603      	mov	r3, r0
 800a378:	431c      	orrs	r4, r3
 800a37a:	486c      	ldr	r0, [pc, #432]	@ (800a52c <HAL_ADC_Init+0x2f8>)
 800a37c:	f7ff fefa 	bl	800a174 <LL_ADC_IsEnabled>
 800a380:	4603      	mov	r3, r0
 800a382:	4323      	orrs	r3, r4
 800a384:	2b00      	cmp	r3, #0
 800a386:	bf0c      	ite	eq
 800a388:	2301      	moveq	r3, #1
 800a38a:	2300      	movne	r3, #0
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d012      	beq.n	800a3b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a39a:	d004      	beq.n	800a3a6 <HAL_ADC_Init+0x172>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a5f      	ldr	r2, [pc, #380]	@ (800a520 <HAL_ADC_Init+0x2ec>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d101      	bne.n	800a3aa <HAL_ADC_Init+0x176>
 800a3a6:	4a62      	ldr	r2, [pc, #392]	@ (800a530 <HAL_ADC_Init+0x2fc>)
 800a3a8:	e000      	b.n	800a3ac <HAL_ADC_Init+0x178>
 800a3aa:	4a62      	ldr	r2, [pc, #392]	@ (800a534 <HAL_ADC_Init+0x300>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	f7ff fcfa 	bl	8009dac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7f5b      	ldrb	r3, [r3, #29]
 800a3bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a3c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a3c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a3ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d106      	bne.n	800a3f4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	045b      	lsls	r3, r3, #17
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a408:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	4b48      	ldr	r3, [pc, #288]	@ (800a538 <HAL_ADC_Init+0x304>)
 800a418:	4013      	ands	r3, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	69b9      	ldr	r1, [r7, #24]
 800a420:	430b      	orrs	r3, r1
 800a422:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fee5 	bl	800a20e <LL_ADC_INJ_IsConversionOngoing>
 800a444:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d17f      	bne.n	800a54c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d17c      	bne.n	800a54c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a456:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a45e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a460:	4313      	orrs	r3, r2
 800a462:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a46e:	f023 0302 	bic.w	r3, r3, #2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	69b9      	ldr	r1, [r7, #24]
 800a478:	430b      	orrs	r3, r1
 800a47a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d017      	beq.n	800a4b4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691a      	ldr	r2, [r3, #16]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a492:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a49c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a4a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6911      	ldr	r1, [r2, #16]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800a4b2:	e013      	b.n	800a4dc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	691a      	ldr	r2, [r3, #16]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a4c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6812      	ldr	r2, [r2, #0]
 800a4d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a4d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a4d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d12a      	bne.n	800a53c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a4f0:	f023 0304 	bic.w	r3, r3, #4
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a4fc:	4311      	orrs	r1, r2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a502:	4311      	orrs	r1, r2
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a508:	430a      	orrs	r2, r1
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 0201 	orr.w	r2, r2, #1
 800a514:	611a      	str	r2, [r3, #16]
 800a516:	e019      	b.n	800a54c <HAL_ADC_Init+0x318>
 800a518:	20000138 	.word	0x20000138
 800a51c:	053e2d63 	.word	0x053e2d63
 800a520:	50000100 	.word	0x50000100
 800a524:	50000400 	.word	0x50000400
 800a528:	50000500 	.word	0x50000500
 800a52c:	50000600 	.word	0x50000600
 800a530:	50000300 	.word	0x50000300
 800a534:	50000700 	.word	0x50000700
 800a538:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691a      	ldr	r2, [r3, #16]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0201 	bic.w	r2, r2, #1
 800a54a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d10c      	bne.n	800a56e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a55a:	f023 010f 	bic.w	r1, r3, #15
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	1e5a      	subs	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a56c:	e007      	b.n	800a57e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 020f 	bic.w	r2, r2, #15
 800a57c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a582:	f023 0303 	bic.w	r3, r3, #3
 800a586:	f043 0201 	orr.w	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a58e:	e007      	b.n	800a5a0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a594:	f043 0210 	orr.w	r2, r3, #16
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	@ 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}
 800a5aa:	bf00      	nop

0800a5ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5c0:	d004      	beq.n	800a5cc <HAL_ADC_Start_DMA+0x20>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a5a      	ldr	r2, [pc, #360]	@ (800a730 <HAL_ADC_Start_DMA+0x184>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d101      	bne.n	800a5d0 <HAL_ADC_Start_DMA+0x24>
 800a5cc:	4b59      	ldr	r3, [pc, #356]	@ (800a734 <HAL_ADC_Start_DMA+0x188>)
 800a5ce:	e000      	b.n	800a5d2 <HAL_ADC_Start_DMA+0x26>
 800a5d0:	4b59      	ldr	r3, [pc, #356]	@ (800a738 <HAL_ADC_Start_DMA+0x18c>)
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff fd4a 	bl	800a06c <LL_ADC_GetMultimode>
 800a5d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fe02 	bl	800a1e8 <LL_ADC_REG_IsConversionOngoing>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f040 809b 	bne.w	800a722 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d101      	bne.n	800a5fa <HAL_ADC_Start_DMA+0x4e>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e096      	b.n	800a728 <HAL_ADC_Start_DMA+0x17c>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a4d      	ldr	r2, [pc, #308]	@ (800a73c <HAL_ADC_Start_DMA+0x190>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d008      	beq.n	800a61e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b05      	cmp	r3, #5
 800a616:	d002      	beq.n	800a61e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d17a      	bne.n	800a714 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fcf6 	bl	800b010 <ADC_Enable>
 800a624:	4603      	mov	r3, r0
 800a626:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d16d      	bne.n	800a70a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a3a      	ldr	r2, [pc, #232]	@ (800a730 <HAL_ADC_Start_DMA+0x184>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d009      	beq.n	800a660 <HAL_ADC_Start_DMA+0xb4>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a3b      	ldr	r2, [pc, #236]	@ (800a740 <HAL_ADC_Start_DMA+0x194>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d002      	beq.n	800a65c <HAL_ADC_Start_DMA+0xb0>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	e003      	b.n	800a664 <HAL_ADC_Start_DMA+0xb8>
 800a65c:	4b39      	ldr	r3, [pc, #228]	@ (800a744 <HAL_ADC_Start_DMA+0x198>)
 800a65e:	e001      	b.n	800a664 <HAL_ADC_Start_DMA+0xb8>
 800a660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	4293      	cmp	r3, r2
 800a66a:	d002      	beq.n	800a672 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a676:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d006      	beq.n	800a698 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a68e:	f023 0206 	bic.w	r2, r3, #6
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	661a      	str	r2, [r3, #96]	@ 0x60
 800a696:	e002      	b.n	800a69e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a2:	4a29      	ldr	r2, [pc, #164]	@ (800a748 <HAL_ADC_Start_DMA+0x19c>)
 800a6a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6aa:	4a28      	ldr	r2, [pc, #160]	@ (800a74c <HAL_ADC_Start_DMA+0x1a0>)
 800a6ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b2:	4a27      	ldr	r2, [pc, #156]	@ (800a750 <HAL_ADC_Start_DMA+0x1a4>)
 800a6b4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	221c      	movs	r2, #28
 800a6bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0210 	orr.w	r2, r2, #16
 800a6d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f042 0201 	orr.w	r2, r2, #1
 800a6e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3340      	adds	r3, #64	@ 0x40
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f001 f989 	bl	800ba0c <HAL_DMA_Start_IT>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fd5c 	bl	800a1c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a708:	e00d      	b.n	800a726 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800a712:	e008      	b.n	800a726 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800a720:	e001      	b.n	800a726 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a722:	2302      	movs	r3, #2
 800a724:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a726:	7dfb      	ldrb	r3, [r7, #23]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	50000100 	.word	0x50000100
 800a734:	50000300 	.word	0x50000300
 800a738:	50000700 	.word	0x50000700
 800a73c:	50000600 	.word	0x50000600
 800a740:	50000500 	.word	0x50000500
 800a744:	50000400 	.word	0x50000400
 800a748:	0800b1fb 	.word	0x0800b1fb
 800a74c:	0800b2d3 	.word	0x0800b2d3
 800a750:	0800b2ef 	.word	0x0800b2ef

0800a754 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b0b6      	sub	sp, #216	@ 0xd8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d102      	bne.n	800a7b4 <HAL_ADC_ConfigChannel+0x24>
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	f000 bc13 	b.w	800afda <HAL_ADC_ConfigChannel+0x84a>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff fd11 	bl	800a1e8 <LL_ADC_REG_IsConversionOngoing>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f040 83f3 	bne.w	800afb4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	6859      	ldr	r1, [r3, #4]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f7ff fbcb 	bl	8009f76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff fcff 	bl	800a1e8 <LL_ADC_REG_IsConversionOngoing>
 800a7ea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fd0b 	bl	800a20e <LL_ADC_INJ_IsConversionOngoing>
 800a7f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a7fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f040 81d9 	bne.w	800abb8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f040 81d4 	bne.w	800abb8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a818:	d10f      	bne.n	800a83a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2200      	movs	r2, #0
 800a824:	4619      	mov	r1, r3
 800a826:	f7ff fbd2 	bl	8009fce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff fb79 	bl	8009f2a <LL_ADC_SetSamplingTimeCommonConfig>
 800a838:	e00e      	b.n	800a858 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6819      	ldr	r1, [r3, #0]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	461a      	mov	r2, r3
 800a848:	f7ff fbc1 	bl	8009fce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2100      	movs	r1, #0
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fb69 	bl	8009f2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	695a      	ldr	r2, [r3, #20]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	08db      	lsrs	r3, r3, #3
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	fa02 f303 	lsl.w	r3, r2, r3
 800a86e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b04      	cmp	r3, #4
 800a878:	d022      	beq.n	800a8c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6919      	ldr	r1, [r3, #16]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a88a:	f7ff fac3 	bl	8009e14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	6919      	ldr	r1, [r3, #16]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	461a      	mov	r2, r3
 800a89c:	f7ff fb0f 	bl	8009ebe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d102      	bne.n	800a8b6 <HAL_ADC_ConfigChannel+0x126>
 800a8b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8b4:	e000      	b.n	800a8b8 <HAL_ADC_ConfigChannel+0x128>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f7ff fb1b 	bl	8009ef4 <LL_ADC_SetOffsetSaturation>
 800a8be:	e17b      	b.n	800abb8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fac8 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10a      	bne.n	800a8ec <HAL_ADC_ConfigChannel+0x15c>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fabd 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	0e9b      	lsrs	r3, r3, #26
 800a8e6:	f003 021f 	and.w	r2, r3, #31
 800a8ea:	e01e      	b.n	800a92a <HAL_ADC_ConfigChannel+0x19a>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fab2 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a902:	fa93 f3a3 	rbit	r3, r3
 800a906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a90a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a90e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a91a:	2320      	movs	r3, #32
 800a91c:	e004      	b.n	800a928 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a91e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a922:	fab3 f383 	clz	r3, r3
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a932:	2b00      	cmp	r3, #0
 800a934:	d105      	bne.n	800a942 <HAL_ADC_ConfigChannel+0x1b2>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	0e9b      	lsrs	r3, r3, #26
 800a93c:	f003 031f 	and.w	r3, r3, #31
 800a940:	e018      	b.n	800a974 <HAL_ADC_ConfigChannel+0x1e4>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a94a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a94e:	fa93 f3a3 	rbit	r3, r3
 800a952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800a956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a95a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800a95e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a966:	2320      	movs	r3, #32
 800a968:	e004      	b.n	800a974 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a96a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a96e:	fab3 f383 	clz	r3, r3
 800a972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a974:	429a      	cmp	r2, r3
 800a976:	d106      	bne.n	800a986 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2200      	movs	r2, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fa81 	bl	8009e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2101      	movs	r1, #1
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fa65 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a992:	4603      	mov	r3, r0
 800a994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <HAL_ADC_ConfigChannel+0x222>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fa5a 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	0e9b      	lsrs	r3, r3, #26
 800a9ac:	f003 021f 	and.w	r2, r3, #31
 800a9b0:	e01e      	b.n	800a9f0 <HAL_ADC_ConfigChannel+0x260>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fa4f 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9c8:	fa93 f3a3 	rbit	r3, r3
 800a9cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800a9d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800a9d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	e004      	b.n	800a9ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a9e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9e8:	fab3 f383 	clz	r3, r3
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <HAL_ADC_ConfigChannel+0x278>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	0e9b      	lsrs	r3, r3, #26
 800aa02:	f003 031f 	and.w	r3, r3, #31
 800aa06:	e018      	b.n	800aa3a <HAL_ADC_ConfigChannel+0x2aa>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa14:	fa93 f3a3 	rbit	r3, r3
 800aa18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800aa1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800aa24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	e004      	b.n	800aa3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800aa30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa34:	fab3 f383 	clz	r3, r3
 800aa38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d106      	bne.n	800aa4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	2101      	movs	r1, #1
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff fa1e 	bl	8009e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2102      	movs	r1, #2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff fa02 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <HAL_ADC_ConfigChannel+0x2e8>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2102      	movs	r1, #2
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff f9f7 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	0e9b      	lsrs	r3, r3, #26
 800aa72:	f003 021f 	and.w	r2, r3, #31
 800aa76:	e01e      	b.n	800aab6 <HAL_ADC_ConfigChannel+0x326>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff f9ec 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa8e:	fa93 f3a3 	rbit	r3, r3
 800aa92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800aa96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800aa9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800aaa6:	2320      	movs	r3, #32
 800aaa8:	e004      	b.n	800aab4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800aaaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aaae:	fab3 f383 	clz	r3, r3
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <HAL_ADC_ConfigChannel+0x33e>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	0e9b      	lsrs	r3, r3, #26
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	e016      	b.n	800aafc <HAL_ADC_ConfigChannel+0x36c>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aada:	fa93 f3a3 	rbit	r3, r3
 800aade:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800aae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800aae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800aaee:	2320      	movs	r3, #32
 800aaf0:	e004      	b.n	800aafc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800aaf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaf6:	fab3 f383 	clz	r3, r3
 800aafa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d106      	bne.n	800ab0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2200      	movs	r2, #0
 800ab06:	2102      	movs	r1, #2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff f9bd 	bl	8009e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2103      	movs	r1, #3
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff f9a1 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10a      	bne.n	800ab3a <HAL_ADC_ConfigChannel+0x3aa>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2103      	movs	r1, #3
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff f996 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800ab30:	4603      	mov	r3, r0
 800ab32:	0e9b      	lsrs	r3, r3, #26
 800ab34:	f003 021f 	and.w	r2, r3, #31
 800ab38:	e017      	b.n	800ab6a <HAL_ADC_ConfigChannel+0x3da>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2103      	movs	r1, #3
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff f98b 	bl	8009e5c <LL_ADC_GetOffsetChannel>
 800ab46:	4603      	mov	r3, r0
 800ab48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab4c:	fa93 f3a3 	rbit	r3, r3
 800ab50:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800ab52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab54:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800ab56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	e003      	b.n	800ab68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800ab60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab62:	fab3 f383 	clz	r3, r3
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d105      	bne.n	800ab82 <HAL_ADC_ConfigChannel+0x3f2>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	0e9b      	lsrs	r3, r3, #26
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	e011      	b.n	800aba6 <HAL_ADC_ConfigChannel+0x416>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab8a:	fa93 f3a3 	rbit	r3, r3
 800ab8e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800ab90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800ab94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800ab9a:	2320      	movs	r3, #32
 800ab9c:	e003      	b.n	800aba6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800ab9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba0:	fab3 f383 	clz	r3, r3
 800aba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d106      	bne.n	800abb8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2200      	movs	r2, #0
 800abb0:	2103      	movs	r1, #3
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff f968 	bl	8009e88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff fad9 	bl	800a174 <LL_ADC_IsEnabled>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 813d 	bne.w	800ae44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6819      	ldr	r1, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7ff fa24 	bl	800a024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	4aa2      	ldr	r2, [pc, #648]	@ (800ae6c <HAL_ADC_ConfigChannel+0x6dc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	f040 812e 	bne.w	800ae44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10b      	bne.n	800ac10 <HAL_ADC_ConfigChannel+0x480>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	0e9b      	lsrs	r3, r3, #26
 800abfe:	3301      	adds	r3, #1
 800ac00:	f003 031f 	and.w	r3, r3, #31
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	bf94      	ite	ls
 800ac08:	2301      	movls	r3, #1
 800ac0a:	2300      	movhi	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	e019      	b.n	800ac44 <HAL_ADC_ConfigChannel+0x4b4>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac18:	fa93 f3a3 	rbit	r3, r3
 800ac1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800ac1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac20:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800ac22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ac28:	2320      	movs	r3, #32
 800ac2a:	e003      	b.n	800ac34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ac2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac2e:	fab3 f383 	clz	r3, r3
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	3301      	adds	r3, #1
 800ac36:	f003 031f 	and.w	r3, r3, #31
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	bf94      	ite	ls
 800ac3e:	2301      	movls	r3, #1
 800ac40:	2300      	movhi	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d079      	beq.n	800ad3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d107      	bne.n	800ac64 <HAL_ADC_ConfigChannel+0x4d4>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	0e9b      	lsrs	r3, r3, #26
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	069b      	lsls	r3, r3, #26
 800ac5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac62:	e015      	b.n	800ac90 <HAL_ADC_ConfigChannel+0x500>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac6c:	fa93 f3a3 	rbit	r3, r3
 800ac70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800ac72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800ac76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800ac7c:	2320      	movs	r3, #32
 800ac7e:	e003      	b.n	800ac88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800ac80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac82:	fab3 f383 	clz	r3, r3
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	3301      	adds	r3, #1
 800ac8a:	069b      	lsls	r3, r3, #26
 800ac8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <HAL_ADC_ConfigChannel+0x520>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	0e9b      	lsrs	r3, r3, #26
 800aca2:	3301      	adds	r3, #1
 800aca4:	f003 031f 	and.w	r3, r3, #31
 800aca8:	2101      	movs	r1, #1
 800acaa:	fa01 f303 	lsl.w	r3, r1, r3
 800acae:	e017      	b.n	800ace0 <HAL_ADC_ConfigChannel+0x550>
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acb8:	fa93 f3a3 	rbit	r3, r3
 800acbc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800acbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800acc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800acc8:	2320      	movs	r3, #32
 800acca:	e003      	b.n	800acd4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800accc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acce:	fab3 f383 	clz	r3, r3
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	3301      	adds	r3, #1
 800acd6:	f003 031f 	and.w	r3, r3, #31
 800acda:	2101      	movs	r1, #1
 800acdc:	fa01 f303 	lsl.w	r3, r1, r3
 800ace0:	ea42 0103 	orr.w	r1, r2, r3
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <HAL_ADC_ConfigChannel+0x576>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	0e9b      	lsrs	r3, r3, #26
 800acf6:	3301      	adds	r3, #1
 800acf8:	f003 021f 	and.w	r2, r3, #31
 800acfc:	4613      	mov	r3, r2
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4413      	add	r3, r2
 800ad02:	051b      	lsls	r3, r3, #20
 800ad04:	e018      	b.n	800ad38 <HAL_ADC_ConfigChannel+0x5a8>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0e:	fa93 f3a3 	rbit	r3, r3
 800ad12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800ad14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800ad18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800ad1e:	2320      	movs	r3, #32
 800ad20:	e003      	b.n	800ad2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800ad22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad24:	fab3 f383 	clz	r3, r3
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f003 021f 	and.w	r2, r3, #31
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	e07e      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d107      	bne.n	800ad58 <HAL_ADC_ConfigChannel+0x5c8>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	0e9b      	lsrs	r3, r3, #26
 800ad4e:	3301      	adds	r3, #1
 800ad50:	069b      	lsls	r3, r3, #26
 800ad52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ad56:	e015      	b.n	800ad84 <HAL_ADC_ConfigChannel+0x5f4>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad60:	fa93 f3a3 	rbit	r3, r3
 800ad64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800ad70:	2320      	movs	r3, #32
 800ad72:	e003      	b.n	800ad7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	fab3 f383 	clz	r3, r3
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	069b      	lsls	r3, r3, #26
 800ad80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <HAL_ADC_ConfigChannel+0x614>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	0e9b      	lsrs	r3, r3, #26
 800ad96:	3301      	adds	r3, #1
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	fa01 f303 	lsl.w	r3, r1, r3
 800ada2:	e017      	b.n	800add4 <HAL_ADC_ConfigChannel+0x644>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	fa93 f3a3 	rbit	r3, r3
 800adb0:	61fb      	str	r3, [r7, #28]
  return result;
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800adbc:	2320      	movs	r3, #32
 800adbe:	e003      	b.n	800adc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	fab3 f383 	clz	r3, r3
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	3301      	adds	r3, #1
 800adca:	f003 031f 	and.w	r3, r3, #31
 800adce:	2101      	movs	r1, #1
 800add0:	fa01 f303 	lsl.w	r3, r1, r3
 800add4:	ea42 0103 	orr.w	r1, r2, r3
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <HAL_ADC_ConfigChannel+0x670>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	0e9b      	lsrs	r3, r3, #26
 800adea:	3301      	adds	r3, #1
 800adec:	f003 021f 	and.w	r2, r3, #31
 800adf0:	4613      	mov	r3, r2
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	4413      	add	r3, r2
 800adf6:	3b1e      	subs	r3, #30
 800adf8:	051b      	lsls	r3, r3, #20
 800adfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800adfe:	e01b      	b.n	800ae38 <HAL_ADC_ConfigChannel+0x6a8>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	fa93 f3a3 	rbit	r3, r3
 800ae0c:	613b      	str	r3, [r7, #16]
  return result;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800ae18:	2320      	movs	r3, #32
 800ae1a:	e003      	b.n	800ae24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	fab3 f383 	clz	r3, r3
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	3301      	adds	r3, #1
 800ae26:	f003 021f 	and.w	r2, r3, #31
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	4413      	add	r3, r2
 800ae30:	3b1e      	subs	r3, #30
 800ae32:	051b      	lsls	r3, r3, #20
 800ae34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae3e:	4619      	mov	r1, r3
 800ae40:	f7ff f8c5 	bl	8009fce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <HAL_ADC_ConfigChannel+0x6e0>)
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 80be 	beq.w	800afce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae5a:	d004      	beq.n	800ae66 <HAL_ADC_ConfigChannel+0x6d6>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a04      	ldr	r2, [pc, #16]	@ (800ae74 <HAL_ADC_ConfigChannel+0x6e4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d10a      	bne.n	800ae7c <HAL_ADC_ConfigChannel+0x6ec>
 800ae66:	4b04      	ldr	r3, [pc, #16]	@ (800ae78 <HAL_ADC_ConfigChannel+0x6e8>)
 800ae68:	e009      	b.n	800ae7e <HAL_ADC_ConfigChannel+0x6ee>
 800ae6a:	bf00      	nop
 800ae6c:	407f0000 	.word	0x407f0000
 800ae70:	80080000 	.word	0x80080000
 800ae74:	50000100 	.word	0x50000100
 800ae78:	50000300 	.word	0x50000300
 800ae7c:	4b59      	ldr	r3, [pc, #356]	@ (800afe4 <HAL_ADC_ConfigChannel+0x854>)
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe ffba 	bl	8009df8 <LL_ADC_GetCommonPathInternalCh>
 800ae84:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a56      	ldr	r2, [pc, #344]	@ (800afe8 <HAL_ADC_ConfigChannel+0x858>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d004      	beq.n	800ae9c <HAL_ADC_ConfigChannel+0x70c>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a55      	ldr	r2, [pc, #340]	@ (800afec <HAL_ADC_ConfigChannel+0x85c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d13a      	bne.n	800af12 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d134      	bne.n	800af12 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aeb0:	d005      	beq.n	800aebe <HAL_ADC_ConfigChannel+0x72e>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a4e      	ldr	r2, [pc, #312]	@ (800aff0 <HAL_ADC_ConfigChannel+0x860>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	f040 8085 	bne.w	800afc8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aec6:	d004      	beq.n	800aed2 <HAL_ADC_ConfigChannel+0x742>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a49      	ldr	r2, [pc, #292]	@ (800aff4 <HAL_ADC_ConfigChannel+0x864>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d101      	bne.n	800aed6 <HAL_ADC_ConfigChannel+0x746>
 800aed2:	4a49      	ldr	r2, [pc, #292]	@ (800aff8 <HAL_ADC_ConfigChannel+0x868>)
 800aed4:	e000      	b.n	800aed8 <HAL_ADC_ConfigChannel+0x748>
 800aed6:	4a43      	ldr	r2, [pc, #268]	@ (800afe4 <HAL_ADC_ConfigChannel+0x854>)
 800aed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aedc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7fe ff75 	bl	8009dd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aee8:	4b44      	ldr	r3, [pc, #272]	@ (800affc <HAL_ADC_ConfigChannel+0x86c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	099b      	lsrs	r3, r3, #6
 800aeee:	4a44      	ldr	r2, [pc, #272]	@ (800b000 <HAL_ADC_ConfigChannel+0x870>)
 800aef0:	fba2 2303 	umull	r2, r3, r2, r3
 800aef4:	099b      	lsrs	r3, r3, #6
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	4613      	mov	r3, r2
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800af02:	e002      	b.n	800af0a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3b01      	subs	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f9      	bne.n	800af04 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af10:	e05a      	b.n	800afc8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a3b      	ldr	r2, [pc, #236]	@ (800b004 <HAL_ADC_ConfigChannel+0x874>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d125      	bne.n	800af68 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d11f      	bne.n	800af68 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a31      	ldr	r2, [pc, #196]	@ (800aff4 <HAL_ADC_ConfigChannel+0x864>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d104      	bne.n	800af3c <HAL_ADC_ConfigChannel+0x7ac>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a34      	ldr	r2, [pc, #208]	@ (800b008 <HAL_ADC_ConfigChannel+0x878>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d047      	beq.n	800afcc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af44:	d004      	beq.n	800af50 <HAL_ADC_ConfigChannel+0x7c0>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a2a      	ldr	r2, [pc, #168]	@ (800aff4 <HAL_ADC_ConfigChannel+0x864>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d101      	bne.n	800af54 <HAL_ADC_ConfigChannel+0x7c4>
 800af50:	4a29      	ldr	r2, [pc, #164]	@ (800aff8 <HAL_ADC_ConfigChannel+0x868>)
 800af52:	e000      	b.n	800af56 <HAL_ADC_ConfigChannel+0x7c6>
 800af54:	4a23      	ldr	r2, [pc, #140]	@ (800afe4 <HAL_ADC_ConfigChannel+0x854>)
 800af56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f7fe ff36 	bl	8009dd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af66:	e031      	b.n	800afcc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a27      	ldr	r2, [pc, #156]	@ (800b00c <HAL_ADC_ConfigChannel+0x87c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d12d      	bne.n	800afce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d127      	bne.n	800afce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a1c      	ldr	r2, [pc, #112]	@ (800aff4 <HAL_ADC_ConfigChannel+0x864>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d022      	beq.n	800afce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af90:	d004      	beq.n	800af9c <HAL_ADC_ConfigChannel+0x80c>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a17      	ldr	r2, [pc, #92]	@ (800aff4 <HAL_ADC_ConfigChannel+0x864>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d101      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x810>
 800af9c:	4a16      	ldr	r2, [pc, #88]	@ (800aff8 <HAL_ADC_ConfigChannel+0x868>)
 800af9e:	e000      	b.n	800afa2 <HAL_ADC_ConfigChannel+0x812>
 800afa0:	4a10      	ldr	r2, [pc, #64]	@ (800afe4 <HAL_ADC_ConfigChannel+0x854>)
 800afa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800afa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fe ff10 	bl	8009dd2 <LL_ADC_SetCommonPathInternalCh>
 800afb2:	e00c      	b.n	800afce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afb8:	f043 0220 	orr.w	r2, r3, #32
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800afc6:	e002      	b.n	800afce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800afc8:	bf00      	nop
 800afca:	e000      	b.n	800afce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800afcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800afd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800afda:	4618      	mov	r0, r3
 800afdc:	37d8      	adds	r7, #216	@ 0xd8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	50000700 	.word	0x50000700
 800afe8:	c3210000 	.word	0xc3210000
 800afec:	90c00010 	.word	0x90c00010
 800aff0:	50000600 	.word	0x50000600
 800aff4:	50000100 	.word	0x50000100
 800aff8:	50000300 	.word	0x50000300
 800affc:	20000138 	.word	0x20000138
 800b000:	053e2d63 	.word	0x053e2d63
 800b004:	c7520000 	.word	0xc7520000
 800b008:	50000500 	.word	0x50000500
 800b00c:	cb840000 	.word	0xcb840000

0800b010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b018:	2300      	movs	r3, #0
 800b01a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff f8a7 	bl	800a174 <LL_ADC_IsEnabled>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d176      	bne.n	800b11a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	4b3c      	ldr	r3, [pc, #240]	@ (800b124 <ADC_Enable+0x114>)
 800b034:	4013      	ands	r3, r2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00d      	beq.n	800b056 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03e:	f043 0210 	orr.w	r2, r3, #16
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b04a:	f043 0201 	orr.w	r2, r3, #1
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e062      	b.n	800b11c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff f862 	bl	800a124 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b068:	d004      	beq.n	800b074 <ADC_Enable+0x64>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a2e      	ldr	r2, [pc, #184]	@ (800b128 <ADC_Enable+0x118>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d101      	bne.n	800b078 <ADC_Enable+0x68>
 800b074:	4b2d      	ldr	r3, [pc, #180]	@ (800b12c <ADC_Enable+0x11c>)
 800b076:	e000      	b.n	800b07a <ADC_Enable+0x6a>
 800b078:	4b2d      	ldr	r3, [pc, #180]	@ (800b130 <ADC_Enable+0x120>)
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe febc 	bl	8009df8 <LL_ADC_GetCommonPathInternalCh>
 800b080:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b086:	2b00      	cmp	r3, #0
 800b088:	d013      	beq.n	800b0b2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b08a:	4b2a      	ldr	r3, [pc, #168]	@ (800b134 <ADC_Enable+0x124>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	099b      	lsrs	r3, r3, #6
 800b090:	4a29      	ldr	r2, [pc, #164]	@ (800b138 <ADC_Enable+0x128>)
 800b092:	fba2 2303 	umull	r2, r3, r2, r3
 800b096:	099b      	lsrs	r3, r3, #6
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	4613      	mov	r3, r2
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b0a4:	e002      	b.n	800b0ac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1f9      	bne.n	800b0a6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b0b2:	f7fe fe6f 	bl	8009d94 <HAL_GetTick>
 800b0b6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0b8:	e028      	b.n	800b10c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff f858 	bl	800a174 <LL_ADC_IsEnabled>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d104      	bne.n	800b0d4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff f828 	bl	800a124 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b0d4:	f7fe fe5e 	bl	8009d94 <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d914      	bls.n	800b10c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d00d      	beq.n	800b10c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0f4:	f043 0210 	orr.w	r2, r3, #16
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b100:	f043 0201 	orr.w	r2, r3, #1
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e007      	b.n	800b11c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b01      	cmp	r3, #1
 800b118:	d1cf      	bne.n	800b0ba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	8000003f 	.word	0x8000003f
 800b128:	50000100 	.word	0x50000100
 800b12c:	50000300 	.word	0x50000300
 800b130:	50000700 	.word	0x50000700
 800b134:	20000138 	.word	0x20000138
 800b138:	053e2d63 	.word	0x053e2d63

0800b13c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff f826 	bl	800a19a <LL_ADC_IsDisableOngoing>
 800b14e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff f80d 	bl	800a174 <LL_ADC_IsEnabled>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d047      	beq.n	800b1f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d144      	bne.n	800b1f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f003 030d 	and.w	r3, r3, #13
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10c      	bne.n	800b18e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe ffe7 	bl	800a14c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2203      	movs	r2, #3
 800b184:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b186:	f7fe fe05 	bl	8009d94 <HAL_GetTick>
 800b18a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b18c:	e029      	b.n	800b1e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b192:	f043 0210 	orr.w	r2, r3, #16
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b19e:	f043 0201 	orr.w	r2, r3, #1
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e023      	b.n	800b1f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b1aa:	f7fe fdf3 	bl	8009d94 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d914      	bls.n	800b1e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00d      	beq.n	800b1e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ca:	f043 0210 	orr.w	r2, r3, #16
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1d6:	f043 0201 	orr.w	r2, r3, #1
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e007      	b.n	800b1f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1dc      	bne.n	800b1aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b20c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b210:	2b00      	cmp	r3, #0
 800b212:	d14b      	bne.n	800b2ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0308 	and.w	r3, r3, #8
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d021      	beq.n	800b272 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe fe8c 	bl	8009f50 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d032      	beq.n	800b2a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d12b      	bne.n	800b2a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b25c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11f      	bne.n	800b2a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b268:	f043 0201 	orr.w	r2, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b270:	e018      	b.n	800b2a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d111      	bne.n	800b2a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d105      	bne.n	800b2a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b29c:	f043 0201 	orr.w	r2, r3, #1
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7ff fa55 	bl	800a754 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b2aa:	e00e      	b.n	800b2ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2b0:	f003 0310 	and.w	r3, r3, #16
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7ff fa5f 	bl	800a77c <HAL_ADC_ErrorCallback>
}
 800b2be:	e004      	b.n	800b2ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7ff fa41 	bl	800a768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b300:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b30c:	f043 0204 	orr.w	r2, r3, #4
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f7ff fa31 	bl	800a77c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b31a:	bf00      	nop
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <LL_ADC_IsEnabled>:
{
 800b322:	b480      	push	{r7}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <LL_ADC_IsEnabled+0x18>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <LL_ADC_IsEnabled+0x1a>
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <LL_ADC_StartCalibration>:
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b35a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b364:	4313      	orrs	r3, r2
 800b366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	609a      	str	r2, [r3, #8]
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <LL_ADC_IsCalibrationOnGoing>:
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b38a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b38e:	d101      	bne.n	800b394 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <LL_ADC_REG_IsConversionOngoing>:
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d101      	bne.n	800b3ba <LL_ADC_REG_IsConversionOngoing+0x18>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d101      	bne.n	800b3e4 <HAL_ADCEx_Calibration_Start+0x1c>
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e04d      	b.n	800b480 <HAL_ADCEx_Calibration_Start+0xb8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff fea5 	bl	800b13c <ADC_Disable>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d136      	bne.n	800b46a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b400:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b404:	f023 0302 	bic.w	r3, r3, #2
 800b408:	f043 0202 	orr.w	r2, r3, #2
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ff96 	bl	800b348 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b41c:	e014      	b.n	800b448 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	3301      	adds	r3, #1
 800b422:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4a18      	ldr	r2, [pc, #96]	@ (800b488 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d90d      	bls.n	800b448 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b430:	f023 0312 	bic.w	r3, r3, #18
 800b434:	f043 0210 	orr.w	r2, r3, #16
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e01b      	b.n	800b480 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff ff94 	bl	800b37a <LL_ADC_IsCalibrationOnGoing>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e2      	bne.n	800b41e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	f043 0201 	orr.w	r2, r3, #1
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b468:	e005      	b.n	800b476 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b46e:	f043 0210 	orr.w	r2, r3, #16
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0004de01 	.word	0x0004de01

0800b48c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b48c:	b590      	push	{r4, r7, lr}
 800b48e:	b0a1      	sub	sp, #132	@ 0x84
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d101      	bne.n	800b4aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	e0e7      	b.n	800b67a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4c2:	d102      	bne.n	800b4ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b4c4:	4b6f      	ldr	r3, [pc, #444]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b4c6:	60bb      	str	r3, [r7, #8]
 800b4c8:	e009      	b.n	800b4de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a6e      	ldr	r2, [pc, #440]	@ (800b688 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d102      	bne.n	800b4da <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b4d4:	4b6d      	ldr	r3, [pc, #436]	@ (800b68c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b4d6:	60bb      	str	r3, [r7, #8]
 800b4d8:	e001      	b.n	800b4de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10b      	bne.n	800b4fc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e8:	f043 0220 	orr.w	r2, r3, #32
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e0be      	b.n	800b67a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff ff4f 	bl	800b3a2 <LL_ADC_REG_IsConversionOngoing>
 800b504:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff ff49 	bl	800b3a2 <LL_ADC_REG_IsConversionOngoing>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	f040 80a0 	bne.w	800b658 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f040 809c 	bne.w	800b658 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b528:	d004      	beq.n	800b534 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a55      	ldr	r2, [pc, #340]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d101      	bne.n	800b538 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b534:	4b56      	ldr	r3, [pc, #344]	@ (800b690 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b536:	e000      	b.n	800b53a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b538:	4b56      	ldr	r3, [pc, #344]	@ (800b694 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b53a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d04b      	beq.n	800b5dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	6859      	ldr	r1, [r3, #4]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b556:	035b      	lsls	r3, r3, #13
 800b558:	430b      	orrs	r3, r1
 800b55a:	431a      	orrs	r2, r3
 800b55c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b55e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b568:	d004      	beq.n	800b574 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a45      	ldr	r2, [pc, #276]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d10f      	bne.n	800b594 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b574:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b578:	f7ff fed3 	bl	800b322 <LL_ADC_IsEnabled>
 800b57c:	4604      	mov	r4, r0
 800b57e:	4841      	ldr	r0, [pc, #260]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b580:	f7ff fecf 	bl	800b322 <LL_ADC_IsEnabled>
 800b584:	4603      	mov	r3, r0
 800b586:	4323      	orrs	r3, r4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bf0c      	ite	eq
 800b58c:	2301      	moveq	r3, #1
 800b58e:	2300      	movne	r3, #0
 800b590:	b2db      	uxtb	r3, r3
 800b592:	e012      	b.n	800b5ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b594:	483c      	ldr	r0, [pc, #240]	@ (800b688 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b596:	f7ff fec4 	bl	800b322 <LL_ADC_IsEnabled>
 800b59a:	4604      	mov	r4, r0
 800b59c:	483b      	ldr	r0, [pc, #236]	@ (800b68c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b59e:	f7ff fec0 	bl	800b322 <LL_ADC_IsEnabled>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	431c      	orrs	r4, r3
 800b5a6:	483c      	ldr	r0, [pc, #240]	@ (800b698 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b5a8:	f7ff febb 	bl	800b322 <LL_ADC_IsEnabled>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	4323      	orrs	r3, r4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bf0c      	ite	eq
 800b5b4:	2301      	moveq	r3, #1
 800b5b6:	2300      	movne	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d056      	beq.n	800b66c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b5be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b5c6:	f023 030f 	bic.w	r3, r3, #15
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	6811      	ldr	r1, [r2, #0]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	6892      	ldr	r2, [r2, #8]
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	431a      	orrs	r2, r3
 800b5d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b5da:	e047      	b.n	800b66c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b5dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b5e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5f0:	d004      	beq.n	800b5fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a23      	ldr	r2, [pc, #140]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d10f      	bne.n	800b61c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b5fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b600:	f7ff fe8f 	bl	800b322 <LL_ADC_IsEnabled>
 800b604:	4604      	mov	r4, r0
 800b606:	481f      	ldr	r0, [pc, #124]	@ (800b684 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b608:	f7ff fe8b 	bl	800b322 <LL_ADC_IsEnabled>
 800b60c:	4603      	mov	r3, r0
 800b60e:	4323      	orrs	r3, r4
 800b610:	2b00      	cmp	r3, #0
 800b612:	bf0c      	ite	eq
 800b614:	2301      	moveq	r3, #1
 800b616:	2300      	movne	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	e012      	b.n	800b642 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b61c:	481a      	ldr	r0, [pc, #104]	@ (800b688 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b61e:	f7ff fe80 	bl	800b322 <LL_ADC_IsEnabled>
 800b622:	4604      	mov	r4, r0
 800b624:	4819      	ldr	r0, [pc, #100]	@ (800b68c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b626:	f7ff fe7c 	bl	800b322 <LL_ADC_IsEnabled>
 800b62a:	4603      	mov	r3, r0
 800b62c:	431c      	orrs	r4, r3
 800b62e:	481a      	ldr	r0, [pc, #104]	@ (800b698 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b630:	f7ff fe77 	bl	800b322 <LL_ADC_IsEnabled>
 800b634:	4603      	mov	r3, r0
 800b636:	4323      	orrs	r3, r4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bf0c      	ite	eq
 800b63c:	2301      	moveq	r3, #1
 800b63e:	2300      	movne	r3, #0
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d012      	beq.n	800b66c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b64e:	f023 030f 	bic.w	r3, r3, #15
 800b652:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b654:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b656:	e009      	b.n	800b66c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b65c:	f043 0220 	orr.w	r2, r3, #32
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b66a:	e000      	b.n	800b66e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b66c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b676:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3784      	adds	r7, #132	@ 0x84
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd90      	pop	{r4, r7, pc}
 800b682:	bf00      	nop
 800b684:	50000100 	.word	0x50000100
 800b688:	50000400 	.word	0x50000400
 800b68c:	50000500 	.word	0x50000500
 800b690:	50000300 	.word	0x50000300
 800b694:	50000700 	.word	0x50000700
 800b698:	50000600 	.word	0x50000600

0800b69c <__NVIC_SetPriorityGrouping>:
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e0 <__NVIC_SetPriorityGrouping+0x44>)
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b6c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b6c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b6ce:	4a04      	ldr	r2, [pc, #16]	@ (800b6e0 <__NVIC_SetPriorityGrouping+0x44>)
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	60d3      	str	r3, [r2, #12]
}
 800b6d4:	bf00      	nop
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	e000ed00 	.word	0xe000ed00

0800b6e4 <__NVIC_GetPriorityGrouping>:
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6e8:	4b04      	ldr	r3, [pc, #16]	@ (800b6fc <__NVIC_GetPriorityGrouping+0x18>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	0a1b      	lsrs	r3, r3, #8
 800b6ee:	f003 0307 	and.w	r3, r3, #7
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	e000ed00 	.word	0xe000ed00

0800b700 <__NVIC_EnableIRQ>:
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	4603      	mov	r3, r0
 800b708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	db0b      	blt.n	800b72a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	f003 021f 	and.w	r2, r3, #31
 800b718:	4907      	ldr	r1, [pc, #28]	@ (800b738 <__NVIC_EnableIRQ+0x38>)
 800b71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b71e:	095b      	lsrs	r3, r3, #5
 800b720:	2001      	movs	r0, #1
 800b722:	fa00 f202 	lsl.w	r2, r0, r2
 800b726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	e000e100 	.word	0xe000e100

0800b73c <__NVIC_SetPriority>:
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	db0a      	blt.n	800b766 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	b2da      	uxtb	r2, r3
 800b754:	490c      	ldr	r1, [pc, #48]	@ (800b788 <__NVIC_SetPriority+0x4c>)
 800b756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b75a:	0112      	lsls	r2, r2, #4
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	440b      	add	r3, r1
 800b760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b764:	e00a      	b.n	800b77c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	4908      	ldr	r1, [pc, #32]	@ (800b78c <__NVIC_SetPriority+0x50>)
 800b76c:	79fb      	ldrb	r3, [r7, #7]
 800b76e:	f003 030f 	and.w	r3, r3, #15
 800b772:	3b04      	subs	r3, #4
 800b774:	0112      	lsls	r2, r2, #4
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	440b      	add	r3, r1
 800b77a:	761a      	strb	r2, [r3, #24]
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	e000e100 	.word	0xe000e100
 800b78c:	e000ed00 	.word	0xe000ed00

0800b790 <NVIC_EncodePriority>:
{
 800b790:	b480      	push	{r7}
 800b792:	b089      	sub	sp, #36	@ 0x24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f003 0307 	and.w	r3, r3, #7
 800b7a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f1c3 0307 	rsb	r3, r3, #7
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	bf28      	it	cs
 800b7ae:	2304      	movcs	r3, #4
 800b7b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	2b06      	cmp	r3, #6
 800b7b8:	d902      	bls.n	800b7c0 <NVIC_EncodePriority+0x30>
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	3b03      	subs	r3, #3
 800b7be:	e000      	b.n	800b7c2 <NVIC_EncodePriority+0x32>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ce:	43da      	mvns	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	401a      	ands	r2, r3
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b7d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	fa01 f303 	lsl.w	r3, r1, r3
 800b7e2:	43d9      	mvns	r1, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7e8:	4313      	orrs	r3, r2
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3724      	adds	r7, #36	@ 0x24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3b01      	subs	r3, #1
 800b804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b808:	d301      	bcc.n	800b80e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b80a:	2301      	movs	r3, #1
 800b80c:	e00f      	b.n	800b82e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b80e:	4a0a      	ldr	r2, [pc, #40]	@ (800b838 <SysTick_Config+0x40>)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3b01      	subs	r3, #1
 800b814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b816:	210f      	movs	r1, #15
 800b818:	f04f 30ff 	mov.w	r0, #4294967295
 800b81c:	f7ff ff8e 	bl	800b73c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b820:	4b05      	ldr	r3, [pc, #20]	@ (800b838 <SysTick_Config+0x40>)
 800b822:	2200      	movs	r2, #0
 800b824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b826:	4b04      	ldr	r3, [pc, #16]	@ (800b838 <SysTick_Config+0x40>)
 800b828:	2207      	movs	r2, #7
 800b82a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	e000e010 	.word	0xe000e010

0800b83c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff ff29 	bl	800b69c <__NVIC_SetPriorityGrouping>
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	4603      	mov	r3, r0
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
 800b85e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b860:	f7ff ff40 	bl	800b6e4 <__NVIC_GetPriorityGrouping>
 800b864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	6978      	ldr	r0, [r7, #20]
 800b86c:	f7ff ff90 	bl	800b790 <NVIC_EncodePriority>
 800b870:	4602      	mov	r2, r0
 800b872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b876:	4611      	mov	r1, r2
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff ff5f 	bl	800b73c <__NVIC_SetPriority>
}
 800b87e:	bf00      	nop
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	4603      	mov	r3, r0
 800b88e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff ff33 	bl	800b700 <__NVIC_EnableIRQ>
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff ffa4 	bl	800b7f8 <SysTick_Config>
 800b8b0:	4603      	mov	r3, r0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e08d      	b.n	800b9ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	4b47      	ldr	r3, [pc, #284]	@ (800b9f4 <HAL_DMA_Init+0x138>)
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d80f      	bhi.n	800b8fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b45      	ldr	r3, [pc, #276]	@ (800b9f8 <HAL_DMA_Init+0x13c>)
 800b8e2:	4413      	add	r3, r2
 800b8e4:	4a45      	ldr	r2, [pc, #276]	@ (800b9fc <HAL_DMA_Init+0x140>)
 800b8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ea:	091b      	lsrs	r3, r3, #4
 800b8ec:	009a      	lsls	r2, r3, #2
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a42      	ldr	r2, [pc, #264]	@ (800ba00 <HAL_DMA_Init+0x144>)
 800b8f6:	641a      	str	r2, [r3, #64]	@ 0x40
 800b8f8:	e00e      	b.n	800b918 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	4b40      	ldr	r3, [pc, #256]	@ (800ba04 <HAL_DMA_Init+0x148>)
 800b902:	4413      	add	r3, r2
 800b904:	4a3d      	ldr	r2, [pc, #244]	@ (800b9fc <HAL_DMA_Init+0x140>)
 800b906:	fba2 2303 	umull	r2, r3, r2, r3
 800b90a:	091b      	lsrs	r3, r3, #4
 800b90c:	009a      	lsls	r2, r3, #2
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a3c      	ldr	r2, [pc, #240]	@ (800ba08 <HAL_DMA_Init+0x14c>)
 800b916:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b932:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b93c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa76 	bl	800be5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b978:	d102      	bne.n	800b980 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b988:	b2d2      	uxtb	r2, r2
 800b98a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b994:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d010      	beq.n	800b9c0 <HAL_DMA_Init+0x104>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	d80c      	bhi.n	800b9c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa96 	bl	800bed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b9bc:	605a      	str	r2, [r3, #4]
 800b9be:	e008      	b.n	800b9d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	40020407 	.word	0x40020407
 800b9f8:	bffdfff8 	.word	0xbffdfff8
 800b9fc:	cccccccd 	.word	0xcccccccd
 800ba00:	40020000 	.word	0x40020000
 800ba04:	bffdfbf8 	.word	0xbffdfbf8
 800ba08:	40020400 	.word	0x40020400

0800ba0c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d101      	bne.n	800ba2c <HAL_DMA_Start_IT+0x20>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e066      	b.n	800bafa <HAL_DMA_Start_IT+0xee>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d155      	bne.n	800baec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	68b9      	ldr	r1, [r7, #8]
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f9bb 	bl	800bde0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d008      	beq.n	800ba84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 020e 	orr.w	r2, r2, #14
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	e00f      	b.n	800baa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0204 	bic.w	r2, r2, #4
 800ba92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f042 020a 	orr.w	r2, r2, #10
 800baa2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800babc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bac0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bad8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f042 0201 	orr.w	r2, r2, #1
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	e005      	b.n	800baf8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800baf4:	2302      	movs	r3, #2
 800baf6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d005      	beq.n	800bb26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2204      	movs	r2, #4
 800bb1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	e037      	b.n	800bb96 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 020e 	bic.w	r2, r2, #14
 800bb34:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb44:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0201 	bic.w	r2, r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb5a:	f003 021f 	and.w	r2, r3, #31
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb62:	2101      	movs	r1, #1
 800bb64:	fa01 f202 	lsl.w	r2, r1, r2
 800bb68:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bb72:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00c      	beq.n	800bb96 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb8a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bb94:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d00d      	beq.n	800bbe8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2204      	movs	r2, #4
 800bbd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	73fb      	strb	r3, [r7, #15]
 800bbe6:	e047      	b.n	800bc78 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f022 020e 	bic.w	r2, r2, #14
 800bbf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0201 	bic.w	r2, r2, #1
 800bc06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc1c:	f003 021f 	and.w	r2, r3, #31
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc24:	2101      	movs	r1, #1
 800bc26:	fa01 f202 	lsl.w	r2, r1, r2
 800bc2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bc34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00c      	beq.n	800bc58 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bc56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4798      	blx	r3
    }
  }
  return status;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	2204      	movs	r2, #4
 800bca4:	409a      	lsls	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4013      	ands	r3, r2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d026      	beq.n	800bcfc <HAL_DMA_IRQHandler+0x7a>
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d021      	beq.n	800bcfc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0320 	and.w	r3, r3, #32
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d107      	bne.n	800bcd6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 0204 	bic.w	r2, r2, #4
 800bcd4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcda:	f003 021f 	and.w	r2, r3, #31
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce2:	2104      	movs	r1, #4
 800bce4:	fa01 f202 	lsl.w	r2, r1, r2
 800bce8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d071      	beq.n	800bdd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bcfa:	e06c      	b.n	800bdd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd00:	f003 031f 	and.w	r3, r3, #31
 800bd04:	2202      	movs	r2, #2
 800bd06:	409a      	lsls	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02e      	beq.n	800bd6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d029      	beq.n	800bd6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 0320 	and.w	r3, r3, #32
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10b      	bne.n	800bd40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 020a 	bic.w	r2, r2, #10
 800bd36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd44:	f003 021f 	and.w	r2, r3, #31
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4c:	2102      	movs	r1, #2
 800bd4e:	fa01 f202 	lsl.w	r2, r1, r2
 800bd52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d038      	beq.n	800bdd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bd6c:	e033      	b.n	800bdd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	2208      	movs	r2, #8
 800bd78:	409a      	lsls	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d02a      	beq.n	800bdd8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d025      	beq.n	800bdd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f022 020e 	bic.w	r2, r2, #14
 800bd9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda0:	f003 021f 	and.w	r2, r3, #31
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda8:	2101      	movs	r1, #1
 800bdaa:	fa01 f202 	lsl.w	r2, r1, r2
 800bdae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d004      	beq.n	800bdd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bdd6:	bf00      	nop
 800bdd8:	bf00      	nop
}
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bdf6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800be08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0e:	f003 021f 	and.w	r2, r3, #31
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be16:	2101      	movs	r1, #1
 800be18:	fa01 f202 	lsl.w	r2, r1, r2
 800be1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	2b10      	cmp	r3, #16
 800be2c:	d108      	bne.n	800be40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800be3e:	e007      	b.n	800be50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	60da      	str	r2, [r3, #12]
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	4b16      	ldr	r3, [pc, #88]	@ (800bec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d802      	bhi.n	800be76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800be70:	4b15      	ldr	r3, [pc, #84]	@ (800bec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	e001      	b.n	800be7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800be76:	4b15      	ldr	r3, [pc, #84]	@ (800becc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800be78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	3b08      	subs	r3, #8
 800be86:	4a12      	ldr	r2, [pc, #72]	@ (800bed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800be88:	fba2 2303 	umull	r2, r3, r2, r3
 800be8c:	091b      	lsrs	r3, r3, #4
 800be8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be94:	089b      	lsrs	r3, r3, #2
 800be96:	009a      	lsls	r2, r3, #2
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	4413      	add	r3, r2
 800be9c:	461a      	mov	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a0b      	ldr	r2, [pc, #44]	@ (800bed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f003 031f 	and.w	r3, r3, #31
 800beae:	2201      	movs	r2, #1
 800beb0:	409a      	lsls	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800beb6:	bf00      	nop
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	40020407 	.word	0x40020407
 800bec8:	40020800 	.word	0x40020800
 800becc:	40020820 	.word	0x40020820
 800bed0:	cccccccd 	.word	0xcccccccd
 800bed4:	40020880 	.word	0x40020880

0800bed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	4b0b      	ldr	r3, [pc, #44]	@ (800bf18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	461a      	mov	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a08      	ldr	r2, [pc, #32]	@ (800bf1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800befa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3b01      	subs	r3, #1
 800bf00:	f003 031f 	and.w	r3, r3, #31
 800bf04:	2201      	movs	r2, #1
 800bf06:	409a      	lsls	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800bf0c:	bf00      	nop
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	1000823f 	.word	0x1000823f
 800bf1c:	40020940 	.word	0x40020940

0800bf20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf2e:	e15a      	b.n	800c1e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	2101      	movs	r1, #1
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	fa01 f303 	lsl.w	r3, r1, r3
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 814c 	beq.w	800c1e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d005      	beq.n	800bf60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d130      	bne.n	800bfc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf70:	43db      	mvns	r3, r3
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	4013      	ands	r3, r2
 800bf76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	fa02 f303 	lsl.w	r3, r2, r3
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf96:	2201      	movs	r2, #1
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	43db      	mvns	r3, r3
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	091b      	lsrs	r3, r3, #4
 800bfac:	f003 0201 	and.w	r2, r3, #1
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	f003 0303 	and.w	r3, r3, #3
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d017      	beq.n	800bffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	2203      	movs	r2, #3
 800bfda:	fa02 f303 	lsl.w	r3, r2, r3
 800bfde:	43db      	mvns	r3, r3
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	689a      	ldr	r2, [r3, #8]
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f003 0303 	and.w	r3, r3, #3
 800c006:	2b02      	cmp	r3, #2
 800c008:	d123      	bne.n	800c052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	08da      	lsrs	r2, r3, #3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3208      	adds	r2, #8
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	220f      	movs	r2, #15
 800c022:	fa02 f303 	lsl.w	r3, r2, r3
 800c026:	43db      	mvns	r3, r3
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4013      	ands	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	691a      	ldr	r2, [r3, #16]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f003 0307 	and.w	r3, r3, #7
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	4313      	orrs	r3, r2
 800c042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	08da      	lsrs	r2, r3, #3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	3208      	adds	r2, #8
 800c04c:	6939      	ldr	r1, [r7, #16]
 800c04e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	2203      	movs	r2, #3
 800c05e:	fa02 f303 	lsl.w	r3, r2, r3
 800c062:	43db      	mvns	r3, r3
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	4013      	ands	r3, r2
 800c068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f003 0203 	and.w	r2, r3, #3
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	fa02 f303 	lsl.w	r3, r2, r3
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80a6 	beq.w	800c1e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c094:	4b5b      	ldr	r3, [pc, #364]	@ (800c204 <HAL_GPIO_Init+0x2e4>)
 800c096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c098:	4a5a      	ldr	r2, [pc, #360]	@ (800c204 <HAL_GPIO_Init+0x2e4>)
 800c09a:	f043 0301 	orr.w	r3, r3, #1
 800c09e:	6613      	str	r3, [r2, #96]	@ 0x60
 800c0a0:	4b58      	ldr	r3, [pc, #352]	@ (800c204 <HAL_GPIO_Init+0x2e4>)
 800c0a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0a4:	f003 0301 	and.w	r3, r3, #1
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0ac:	4a56      	ldr	r2, [pc, #344]	@ (800c208 <HAL_GPIO_Init+0x2e8>)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	089b      	lsrs	r3, r3, #2
 800c0b2:	3302      	adds	r3, #2
 800c0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	220f      	movs	r2, #15
 800c0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c8:	43db      	mvns	r3, r3
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c0d6:	d01f      	beq.n	800c118 <HAL_GPIO_Init+0x1f8>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a4c      	ldr	r2, [pc, #304]	@ (800c20c <HAL_GPIO_Init+0x2ec>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d019      	beq.n	800c114 <HAL_GPIO_Init+0x1f4>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a4b      	ldr	r2, [pc, #300]	@ (800c210 <HAL_GPIO_Init+0x2f0>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d013      	beq.n	800c110 <HAL_GPIO_Init+0x1f0>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a4a      	ldr	r2, [pc, #296]	@ (800c214 <HAL_GPIO_Init+0x2f4>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00d      	beq.n	800c10c <HAL_GPIO_Init+0x1ec>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a49      	ldr	r2, [pc, #292]	@ (800c218 <HAL_GPIO_Init+0x2f8>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d007      	beq.n	800c108 <HAL_GPIO_Init+0x1e8>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a48      	ldr	r2, [pc, #288]	@ (800c21c <HAL_GPIO_Init+0x2fc>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d101      	bne.n	800c104 <HAL_GPIO_Init+0x1e4>
 800c100:	2305      	movs	r3, #5
 800c102:	e00a      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c104:	2306      	movs	r3, #6
 800c106:	e008      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c108:	2304      	movs	r3, #4
 800c10a:	e006      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c10c:	2303      	movs	r3, #3
 800c10e:	e004      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c110:	2302      	movs	r3, #2
 800c112:	e002      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c114:	2301      	movs	r3, #1
 800c116:	e000      	b.n	800c11a <HAL_GPIO_Init+0x1fa>
 800c118:	2300      	movs	r3, #0
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	f002 0203 	and.w	r2, r2, #3
 800c120:	0092      	lsls	r2, r2, #2
 800c122:	4093      	lsls	r3, r2
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	4313      	orrs	r3, r2
 800c128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c12a:	4937      	ldr	r1, [pc, #220]	@ (800c208 <HAL_GPIO_Init+0x2e8>)
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	089b      	lsrs	r3, r3, #2
 800c130:	3302      	adds	r3, #2
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c138:	4b39      	ldr	r3, [pc, #228]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	43db      	mvns	r3, r3
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	4013      	ands	r3, r2
 800c146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4313      	orrs	r3, r2
 800c15a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c15c:	4a30      	ldr	r2, [pc, #192]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c162:	4b2f      	ldr	r3, [pc, #188]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	43db      	mvns	r3, r3
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4013      	ands	r3, r2
 800c170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4313      	orrs	r3, r2
 800c184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c186:	4a26      	ldr	r2, [pc, #152]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c18c:	4b24      	ldr	r3, [pc, #144]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	43db      	mvns	r3, r3
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	4013      	ands	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c1b0:	4a1b      	ldr	r2, [pc, #108]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	43db      	mvns	r3, r3
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c1da:	4a11      	ldr	r2, [pc, #68]	@ (800c220 <HAL_GPIO_Init+0x300>)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f47f ae9d 	bne.w	800bf30 <HAL_GPIO_Init+0x10>
  }
}
 800c1f6:	bf00      	nop
 800c1f8:	bf00      	nop
 800c1fa:	371c      	adds	r7, #28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	40021000 	.word	0x40021000
 800c208:	40010000 	.word	0x40010000
 800c20c:	48000400 	.word	0x48000400
 800c210:	48000800 	.word	0x48000800
 800c214:	48000c00 	.word	0x48000c00
 800c218:	48001000 	.word	0x48001000
 800c21c:	48001400 	.word	0x48001400
 800c220:	40010400 	.word	0x40010400

0800c224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	887b      	ldrh	r3, [r7, #2]
 800c236:	4013      	ands	r3, r2
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c23c:	2301      	movs	r3, #1
 800c23e:	73fb      	strb	r3, [r7, #15]
 800c240:	e001      	b.n	800c246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	807b      	strh	r3, [r7, #2]
 800c260:	4613      	mov	r3, r2
 800c262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c264:	787b      	ldrb	r3, [r7, #1]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c26a:	887a      	ldrh	r2, [r7, #2]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c270:	e002      	b.n	800c278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c272:	887a      	ldrh	r2, [r7, #2]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c296:	887a      	ldrh	r2, [r7, #2]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	4013      	ands	r3, r2
 800c29c:	041a      	lsls	r2, r3, #16
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	43d9      	mvns	r1, r3
 800c2a2:	887b      	ldrh	r3, [r7, #2]
 800c2a4:	400b      	ands	r3, r1
 800c2a6:	431a      	orrs	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	619a      	str	r2, [r3, #24]
}
 800c2ac:	bf00      	nop
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c2c2:	4b08      	ldr	r3, [pc, #32]	@ (800c2e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c2c4:	695a      	ldr	r2, [r3, #20]
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d006      	beq.n	800c2dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c2ce:	4a05      	ldr	r2, [pc, #20]	@ (800c2e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c2d0:	88fb      	ldrh	r3, [r7, #6]
 800c2d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c2d4:	88fb      	ldrh	r3, [r7, #6]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fb fdb0 	bl	8007e3c <HAL_GPIO_EXTI_Callback>
  }
}
 800c2dc:	bf00      	nop
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	40010400 	.word	0x40010400

0800c2e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d141      	bne.n	800c37a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c2f6:	4b4b      	ldr	r3, [pc, #300]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c2fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c302:	d131      	bne.n	800c368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c304:	4b47      	ldr	r3, [pc, #284]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c30a:	4a46      	ldr	r2, [pc, #280]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c30c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c314:	4b43      	ldr	r3, [pc, #268]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c31c:	4a41      	ldr	r2, [pc, #260]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c31e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c324:	4b40      	ldr	r3, [pc, #256]	@ (800c428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2232      	movs	r2, #50	@ 0x32
 800c32a:	fb02 f303 	mul.w	r3, r2, r3
 800c32e:	4a3f      	ldr	r2, [pc, #252]	@ (800c42c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c330:	fba2 2303 	umull	r2, r3, r2, r3
 800c334:	0c9b      	lsrs	r3, r3, #18
 800c336:	3301      	adds	r3, #1
 800c338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c33a:	e002      	b.n	800c342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3b01      	subs	r3, #1
 800c340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c342:	4b38      	ldr	r3, [pc, #224]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c34a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c34e:	d102      	bne.n	800c356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1f2      	bne.n	800c33c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c356:	4b33      	ldr	r3, [pc, #204]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c35e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c362:	d158      	bne.n	800c416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c364:	2303      	movs	r3, #3
 800c366:	e057      	b.n	800c418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c368:	4b2e      	ldr	r3, [pc, #184]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c36e:	4a2d      	ldr	r2, [pc, #180]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c378:	e04d      	b.n	800c416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c380:	d141      	bne.n	800c406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c382:	4b28      	ldr	r3, [pc, #160]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c38a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c38e:	d131      	bne.n	800c3f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c390:	4b24      	ldr	r3, [pc, #144]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c396:	4a23      	ldr	r2, [pc, #140]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c39c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3a0:	4b20      	ldr	r3, [pc, #128]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c3a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c3ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2232      	movs	r2, #50	@ 0x32
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c42c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c0:	0c9b      	lsrs	r3, r3, #18
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c3c6:	e002      	b.n	800c3ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c3ce:	4b15      	ldr	r3, [pc, #84]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3da:	d102      	bne.n	800c3e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1f2      	bne.n	800c3c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c3e2:	4b10      	ldr	r3, [pc, #64]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3ee:	d112      	bne.n	800c416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e011      	b.n	800c418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c3f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c3fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c404:	e007      	b.n	800c416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c406:	4b07      	ldr	r3, [pc, #28]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c40e:	4a05      	ldr	r2, [pc, #20]	@ (800c424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c410:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	40007000 	.word	0x40007000
 800c428:	20000138 	.word	0x20000138
 800c42c:	431bde83 	.word	0x431bde83

0800c430 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c430:	b480      	push	{r7}
 800c432:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c434:	4b05      	ldr	r3, [pc, #20]	@ (800c44c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	4a04      	ldr	r2, [pc, #16]	@ (800c44c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c43a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c43e:	6093      	str	r3, [r2, #8]
}
 800c440:	bf00      	nop
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	40007000 	.word	0x40007000

0800c450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e2fe      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d075      	beq.n	800c55a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c46e:	4b97      	ldr	r3, [pc, #604]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 030c 	and.w	r3, r3, #12
 800c476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c478:	4b94      	ldr	r3, [pc, #592]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	2b0c      	cmp	r3, #12
 800c486:	d102      	bne.n	800c48e <HAL_RCC_OscConfig+0x3e>
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d002      	beq.n	800c494 <HAL_RCC_OscConfig+0x44>
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b08      	cmp	r3, #8
 800c492:	d10b      	bne.n	800c4ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c494:	4b8d      	ldr	r3, [pc, #564]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d05b      	beq.n	800c558 <HAL_RCC_OscConfig+0x108>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d157      	bne.n	800c558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e2d9      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4b4:	d106      	bne.n	800c4c4 <HAL_RCC_OscConfig+0x74>
 800c4b6:	4b85      	ldr	r3, [pc, #532]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a84      	ldr	r2, [pc, #528]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	e01d      	b.n	800c500 <HAL_RCC_OscConfig+0xb0>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c4cc:	d10c      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x98>
 800c4ce:	4b7f      	ldr	r3, [pc, #508]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a7e      	ldr	r2, [pc, #504]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	4b7c      	ldr	r3, [pc, #496]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a7b      	ldr	r2, [pc, #492]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e00b      	b.n	800c500 <HAL_RCC_OscConfig+0xb0>
 800c4e8:	4b78      	ldr	r3, [pc, #480]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a77      	ldr	r2, [pc, #476]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	4b75      	ldr	r3, [pc, #468]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a74      	ldr	r2, [pc, #464]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c4fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c4fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d013      	beq.n	800c530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c508:	f7fd fc44 	bl	8009d94 <HAL_GetTick>
 800c50c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c50e:	e008      	b.n	800c522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c510:	f7fd fc40 	bl	8009d94 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b64      	cmp	r3, #100	@ 0x64
 800c51c:	d901      	bls.n	800c522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e29e      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c522:	4b6a      	ldr	r3, [pc, #424]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0f0      	beq.n	800c510 <HAL_RCC_OscConfig+0xc0>
 800c52e:	e014      	b.n	800c55a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c530:	f7fd fc30 	bl	8009d94 <HAL_GetTick>
 800c534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c536:	e008      	b.n	800c54a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c538:	f7fd fc2c 	bl	8009d94 <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b64      	cmp	r3, #100	@ 0x64
 800c544:	d901      	bls.n	800c54a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e28a      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c54a:	4b60      	ldr	r3, [pc, #384]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1f0      	bne.n	800c538 <HAL_RCC_OscConfig+0xe8>
 800c556:	e000      	b.n	800c55a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0302 	and.w	r3, r3, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d075      	beq.n	800c652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c566:	4b59      	ldr	r3, [pc, #356]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 030c 	and.w	r3, r3, #12
 800c56e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c570:	4b56      	ldr	r3, [pc, #344]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f003 0303 	and.w	r3, r3, #3
 800c578:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b0c      	cmp	r3, #12
 800c57e:	d102      	bne.n	800c586 <HAL_RCC_OscConfig+0x136>
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2b02      	cmp	r3, #2
 800c584:	d002      	beq.n	800c58c <HAL_RCC_OscConfig+0x13c>
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d11f      	bne.n	800c5cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c58c:	4b4f      	ldr	r3, [pc, #316]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x154>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e25d      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5a4:	4b49      	ldr	r3, [pc, #292]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	061b      	lsls	r3, r3, #24
 800c5b2:	4946      	ldr	r1, [pc, #280]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c5b8:	4b45      	ldr	r3, [pc, #276]	@ (800c6d0 <HAL_RCC_OscConfig+0x280>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fd fb9d 	bl	8009cfc <HAL_InitTick>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d043      	beq.n	800c650 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e249      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d023      	beq.n	800c61c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5d4:	4b3d      	ldr	r3, [pc, #244]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a3c      	ldr	r2, [pc, #240]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c5da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e0:	f7fd fbd8 	bl	8009d94 <HAL_GetTick>
 800c5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5e6:	e008      	b.n	800c5fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5e8:	f7fd fbd4 	bl	8009d94 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e232      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5fa:	4b34      	ldr	r3, [pc, #208]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0f0      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c606:	4b31      	ldr	r3, [pc, #196]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	061b      	lsls	r3, r3, #24
 800c614:	492d      	ldr	r1, [pc, #180]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c616:	4313      	orrs	r3, r2
 800c618:	604b      	str	r3, [r1, #4]
 800c61a:	e01a      	b.n	800c652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c61c:	4b2b      	ldr	r3, [pc, #172]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a2a      	ldr	r2, [pc, #168]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c628:	f7fd fbb4 	bl	8009d94 <HAL_GetTick>
 800c62c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c62e:	e008      	b.n	800c642 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c630:	f7fd fbb0 	bl	8009d94 <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e20e      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c642:	4b22      	ldr	r3, [pc, #136]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f0      	bne.n	800c630 <HAL_RCC_OscConfig+0x1e0>
 800c64e:	e000      	b.n	800c652 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d041      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d01c      	beq.n	800c6a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c666:	4b19      	ldr	r3, [pc, #100]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c66c:	4a17      	ldr	r2, [pc, #92]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c66e:	f043 0301 	orr.w	r3, r3, #1
 800c672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c676:	f7fd fb8d 	bl	8009d94 <HAL_GetTick>
 800c67a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c67c:	e008      	b.n	800c690 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c67e:	f7fd fb89 	bl	8009d94 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e1e7      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c690:	4b0e      	ldr	r3, [pc, #56]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0ef      	beq.n	800c67e <HAL_RCC_OscConfig+0x22e>
 800c69e:	e020      	b.n	800c6e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c6a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6a6:	4a09      	ldr	r2, [pc, #36]	@ (800c6cc <HAL_RCC_OscConfig+0x27c>)
 800c6a8:	f023 0301 	bic.w	r3, r3, #1
 800c6ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b0:	f7fd fb70 	bl	8009d94 <HAL_GetTick>
 800c6b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c6b6:	e00d      	b.n	800c6d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6b8:	f7fd fb6c 	bl	8009d94 <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d906      	bls.n	800c6d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e1ca      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
 800c6ca:	bf00      	nop
 800c6cc:	40021000 	.word	0x40021000
 800c6d0:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c6d4:	4b8c      	ldr	r3, [pc, #560]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c6d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1ea      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0304 	and.w	r3, r3, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 80a6 	beq.w	800c83c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c6f4:	4b84      	ldr	r3, [pc, #528]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <HAL_RCC_OscConfig+0x2b4>
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <HAL_RCC_OscConfig+0x2b6>
 800c704:	2300      	movs	r3, #0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00d      	beq.n	800c726 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c70a:	4b7f      	ldr	r3, [pc, #508]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c70e:	4a7e      	ldr	r2, [pc, #504]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c714:	6593      	str	r3, [r2, #88]	@ 0x58
 800c716:	4b7c      	ldr	r3, [pc, #496]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c722:	2301      	movs	r3, #1
 800c724:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c726:	4b79      	ldr	r3, [pc, #484]	@ (800c90c <HAL_RCC_OscConfig+0x4bc>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d118      	bne.n	800c764 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c732:	4b76      	ldr	r3, [pc, #472]	@ (800c90c <HAL_RCC_OscConfig+0x4bc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a75      	ldr	r2, [pc, #468]	@ (800c90c <HAL_RCC_OscConfig+0x4bc>)
 800c738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c73c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c73e:	f7fd fb29 	bl	8009d94 <HAL_GetTick>
 800c742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c744:	e008      	b.n	800c758 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c746:	f7fd fb25 	bl	8009d94 <HAL_GetTick>
 800c74a:	4602      	mov	r2, r0
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d901      	bls.n	800c758 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e183      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c758:	4b6c      	ldr	r3, [pc, #432]	@ (800c90c <HAL_RCC_OscConfig+0x4bc>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0f0      	beq.n	800c746 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d108      	bne.n	800c77e <HAL_RCC_OscConfig+0x32e>
 800c76c:	4b66      	ldr	r3, [pc, #408]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c772:	4a65      	ldr	r2, [pc, #404]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c774:	f043 0301 	orr.w	r3, r3, #1
 800c778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c77c:	e024      	b.n	800c7c8 <HAL_RCC_OscConfig+0x378>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	2b05      	cmp	r3, #5
 800c784:	d110      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x358>
 800c786:	4b60      	ldr	r3, [pc, #384]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c78c:	4a5e      	ldr	r2, [pc, #376]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c78e:	f043 0304 	orr.w	r3, r3, #4
 800c792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c796:	4b5c      	ldr	r3, [pc, #368]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c79c:	4a5a      	ldr	r2, [pc, #360]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c79e:	f043 0301 	orr.w	r3, r3, #1
 800c7a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c7a6:	e00f      	b.n	800c7c8 <HAL_RCC_OscConfig+0x378>
 800c7a8:	4b57      	ldr	r3, [pc, #348]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ae:	4a56      	ldr	r2, [pc, #344]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c7b0:	f023 0301 	bic.w	r3, r3, #1
 800c7b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c7b8:	4b53      	ldr	r3, [pc, #332]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7be:	4a52      	ldr	r2, [pc, #328]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c7c0:	f023 0304 	bic.w	r3, r3, #4
 800c7c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d016      	beq.n	800c7fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7d0:	f7fd fae0 	bl	8009d94 <HAL_GetTick>
 800c7d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c7d6:	e00a      	b.n	800c7ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7d8:	f7fd fadc 	bl	8009d94 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d901      	bls.n	800c7ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e138      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c7ee:	4b46      	ldr	r3, [pc, #280]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0ed      	beq.n	800c7d8 <HAL_RCC_OscConfig+0x388>
 800c7fc:	e015      	b.n	800c82a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7fe:	f7fd fac9 	bl	8009d94 <HAL_GetTick>
 800c802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c804:	e00a      	b.n	800c81c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c806:	f7fd fac5 	bl	8009d94 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c814:	4293      	cmp	r3, r2
 800c816:	d901      	bls.n	800c81c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e121      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c81c:	4b3a      	ldr	r3, [pc, #232]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1ed      	bne.n	800c806 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c82a:	7ffb      	ldrb	r3, [r7, #31]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d105      	bne.n	800c83c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c830:	4b35      	ldr	r3, [pc, #212]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c834:	4a34      	ldr	r2, [pc, #208]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c83a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0320 	and.w	r3, r3, #32
 800c844:	2b00      	cmp	r3, #0
 800c846:	d03c      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01c      	beq.n	800c88a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c850:	4b2d      	ldr	r3, [pc, #180]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c856:	4a2c      	ldr	r2, [pc, #176]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c858:	f043 0301 	orr.w	r3, r3, #1
 800c85c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c860:	f7fd fa98 	bl	8009d94 <HAL_GetTick>
 800c864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c866:	e008      	b.n	800c87a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c868:	f7fd fa94 	bl	8009d94 <HAL_GetTick>
 800c86c:	4602      	mov	r2, r0
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	2b02      	cmp	r3, #2
 800c874:	d901      	bls.n	800c87a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c876:	2303      	movs	r3, #3
 800c878:	e0f2      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c87a:	4b23      	ldr	r3, [pc, #140]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c87c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0ef      	beq.n	800c868 <HAL_RCC_OscConfig+0x418>
 800c888:	e01b      	b.n	800c8c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c88a:	4b1f      	ldr	r3, [pc, #124]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c890:	4a1d      	ldr	r2, [pc, #116]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c892:	f023 0301 	bic.w	r3, r3, #1
 800c896:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c89a:	f7fd fa7b 	bl	8009d94 <HAL_GetTick>
 800c89e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c8a0:	e008      	b.n	800c8b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c8a2:	f7fd fa77 	bl	8009d94 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d901      	bls.n	800c8b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e0d5      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c8b4:	4b14      	ldr	r3, [pc, #80]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c8b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c8ba:	f003 0302 	and.w	r3, r3, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1ef      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	69db      	ldr	r3, [r3, #28]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80c9 	beq.w	800ca5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f003 030c 	and.w	r3, r3, #12
 800c8d4:	2b0c      	cmp	r3, #12
 800c8d6:	f000 8083 	beq.w	800c9e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d15e      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8e2:	4b09      	ldr	r3, [pc, #36]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a08      	ldr	r2, [pc, #32]	@ (800c908 <HAL_RCC_OscConfig+0x4b8>)
 800c8e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ee:	f7fd fa51 	bl	8009d94 <HAL_GetTick>
 800c8f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8f4:	e00c      	b.n	800c910 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8f6:	f7fd fa4d 	bl	8009d94 <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	2b02      	cmp	r3, #2
 800c902:	d905      	bls.n	800c910 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c904:	2303      	movs	r3, #3
 800c906:	e0ab      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
 800c908:	40021000 	.word	0x40021000
 800c90c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c910:	4b55      	ldr	r3, [pc, #340]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1ec      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c91c:	4b52      	ldr	r3, [pc, #328]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	4b52      	ldr	r3, [pc, #328]	@ (800ca6c <HAL_RCC_OscConfig+0x61c>)
 800c922:	4013      	ands	r3, r2
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	6a11      	ldr	r1, [r2, #32]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c92c:	3a01      	subs	r2, #1
 800c92e:	0112      	lsls	r2, r2, #4
 800c930:	4311      	orrs	r1, r2
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c936:	0212      	lsls	r2, r2, #8
 800c938:	4311      	orrs	r1, r2
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c93e:	0852      	lsrs	r2, r2, #1
 800c940:	3a01      	subs	r2, #1
 800c942:	0552      	lsls	r2, r2, #21
 800c944:	4311      	orrs	r1, r2
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c94a:	0852      	lsrs	r2, r2, #1
 800c94c:	3a01      	subs	r2, #1
 800c94e:	0652      	lsls	r2, r2, #25
 800c950:	4311      	orrs	r1, r2
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c956:	06d2      	lsls	r2, r2, #27
 800c958:	430a      	orrs	r2, r1
 800c95a:	4943      	ldr	r1, [pc, #268]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c95c:	4313      	orrs	r3, r2
 800c95e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c960:	4b41      	ldr	r3, [pc, #260]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a40      	ldr	r2, [pc, #256]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c96a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c96c:	4b3e      	ldr	r3, [pc, #248]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	4a3d      	ldr	r2, [pc, #244]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c976:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c978:	f7fd fa0c 	bl	8009d94 <HAL_GetTick>
 800c97c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c97e:	e008      	b.n	800c992 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c980:	f7fd fa08 	bl	8009d94 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d901      	bls.n	800c992 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e066      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c992:	4b35      	ldr	r3, [pc, #212]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f0      	beq.n	800c980 <HAL_RCC_OscConfig+0x530>
 800c99e:	e05e      	b.n	800ca5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9a0:	4b31      	ldr	r3, [pc, #196]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a30      	ldr	r2, [pc, #192]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c9aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ac:	f7fd f9f2 	bl	8009d94 <HAL_GetTick>
 800c9b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9b2:	e008      	b.n	800c9c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9b4:	f7fd f9ee 	bl	8009d94 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e04c      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9c6:	4b28      	ldr	r3, [pc, #160]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1f0      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c9d2:	4b25      	ldr	r3, [pc, #148]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	4924      	ldr	r1, [pc, #144]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9d8:	4b25      	ldr	r3, [pc, #148]	@ (800ca70 <HAL_RCC_OscConfig+0x620>)
 800c9da:	4013      	ands	r3, r2
 800c9dc:	60cb      	str	r3, [r1, #12]
 800c9de:	e03e      	b.n	800ca5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e039      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800ca68 <HAL_RCC_OscConfig+0x618>)
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f003 0203 	and.w	r2, r3, #3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d12c      	bne.n	800ca5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d123      	bne.n	800ca5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d11b      	bne.n	800ca5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d113      	bne.n	800ca5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d109      	bne.n	800ca5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca50:	085b      	lsrs	r3, r3, #1
 800ca52:	3b01      	subs	r3, #1
 800ca54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d001      	beq.n	800ca5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e000      	b.n	800ca60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3720      	adds	r7, #32
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	019f800c 	.word	0x019f800c
 800ca70:	feeefffc 	.word	0xfeeefffc

0800ca74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e11e      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca8c:	4b91      	ldr	r3, [pc, #580]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 030f 	and.w	r3, r3, #15
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d910      	bls.n	800cabc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca9a:	4b8e      	ldr	r3, [pc, #568]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f023 020f 	bic.w	r2, r3, #15
 800caa2:	498c      	ldr	r1, [pc, #560]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caaa:	4b8a      	ldr	r3, [pc, #552]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 030f 	and.w	r3, r3, #15
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d001      	beq.n	800cabc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e106      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d073      	beq.n	800cbb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d129      	bne.n	800cb24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cad0:	4b81      	ldr	r3, [pc, #516]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e0f4      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cae0:	f000 f99e 	bl	800ce20 <RCC_GetSysClockFreqFromPLLSource>
 800cae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4a7c      	ldr	r2, [pc, #496]	@ (800ccdc <HAL_RCC_ClockConfig+0x268>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d93f      	bls.n	800cb6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800caee:	4b7a      	ldr	r3, [pc, #488]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d009      	beq.n	800cb0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d033      	beq.n	800cb6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d12f      	bne.n	800cb6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cb0e:	4b72      	ldr	r3, [pc, #456]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb16:	4a70      	ldr	r2, [pc, #448]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cb1e:	2380      	movs	r3, #128	@ 0x80
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	e024      	b.n	800cb6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d107      	bne.n	800cb3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb2c:	4b6a      	ldr	r3, [pc, #424]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d109      	bne.n	800cb4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e0c6      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb3c:	4b66      	ldr	r3, [pc, #408]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e0be      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cb4c:	f000 f8ce 	bl	800ccec <HAL_RCC_GetSysClockFreq>
 800cb50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	4a61      	ldr	r2, [pc, #388]	@ (800ccdc <HAL_RCC_ClockConfig+0x268>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d909      	bls.n	800cb6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cb5a:	4b5f      	ldr	r3, [pc, #380]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb62:	4a5d      	ldr	r2, [pc, #372]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cb6a:	2380      	movs	r3, #128	@ 0x80
 800cb6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cb6e:	4b5a      	ldr	r3, [pc, #360]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f023 0203 	bic.w	r2, r3, #3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	4957      	ldr	r1, [pc, #348]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb80:	f7fd f908 	bl	8009d94 <HAL_GetTick>
 800cb84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb86:	e00a      	b.n	800cb9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb88:	f7fd f904 	bl	8009d94 <HAL_GetTick>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d901      	bls.n	800cb9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e095      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb9e:	4b4e      	ldr	r3, [pc, #312]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f003 020c 	and.w	r2, r3, #12
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d1eb      	bne.n	800cb88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d023      	beq.n	800cc04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d005      	beq.n	800cbd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cbc8:	4b43      	ldr	r3, [pc, #268]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	4a42      	ldr	r2, [pc, #264]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cbd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0308 	and.w	r3, r3, #8
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d007      	beq.n	800cbf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cbe0:	4b3d      	ldr	r3, [pc, #244]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cbe8:	4a3b      	ldr	r2, [pc, #236]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cbee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbf0:	4b39      	ldr	r3, [pc, #228]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	4936      	ldr	r1, [pc, #216]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	608b      	str	r3, [r1, #8]
 800cc02:	e008      	b.n	800cc16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b80      	cmp	r3, #128	@ 0x80
 800cc08:	d105      	bne.n	800cc16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cc0a:	4b33      	ldr	r3, [pc, #204]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	4a32      	ldr	r2, [pc, #200]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc16:	4b2f      	ldr	r3, [pc, #188]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f003 030f 	and.w	r3, r3, #15
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d21d      	bcs.n	800cc60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc24:	4b2b      	ldr	r3, [pc, #172]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f023 020f 	bic.w	r2, r3, #15
 800cc2c:	4929      	ldr	r1, [pc, #164]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cc34:	f7fd f8ae 	bl	8009d94 <HAL_GetTick>
 800cc38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc3a:	e00a      	b.n	800cc52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc3c:	f7fd f8aa 	bl	8009d94 <HAL_GetTick>
 800cc40:	4602      	mov	r2, r0
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d901      	bls.n	800cc52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e03b      	b.n	800ccca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc52:	4b20      	ldr	r3, [pc, #128]	@ (800ccd4 <HAL_RCC_ClockConfig+0x260>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 030f 	and.w	r3, r3, #15
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d1ed      	bne.n	800cc3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d008      	beq.n	800cc7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	4917      	ldr	r1, [pc, #92]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d009      	beq.n	800cc9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc8a:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	490f      	ldr	r1, [pc, #60]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cc9e:	f000 f825 	bl	800ccec <HAL_RCC_GetSysClockFreq>
 800cca2:	4602      	mov	r2, r0
 800cca4:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd8 <HAL_RCC_ClockConfig+0x264>)
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	091b      	lsrs	r3, r3, #4
 800ccaa:	f003 030f 	and.w	r3, r3, #15
 800ccae:	490c      	ldr	r1, [pc, #48]	@ (800cce0 <HAL_RCC_ClockConfig+0x26c>)
 800ccb0:	5ccb      	ldrb	r3, [r1, r3]
 800ccb2:	f003 031f 	and.w	r3, r3, #31
 800ccb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccba:	4a0a      	ldr	r2, [pc, #40]	@ (800cce4 <HAL_RCC_ClockConfig+0x270>)
 800ccbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ccbe:	4b0a      	ldr	r3, [pc, #40]	@ (800cce8 <HAL_RCC_ClockConfig+0x274>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fd f81a 	bl	8009cfc <HAL_InitTick>
 800ccc8:	4603      	mov	r3, r0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	40022000 	.word	0x40022000
 800ccd8:	40021000 	.word	0x40021000
 800ccdc:	04c4b400 	.word	0x04c4b400
 800cce0:	08013c10 	.word	0x08013c10
 800cce4:	20000138 	.word	0x20000138
 800cce8:	2000013c 	.word	0x2000013c

0800ccec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ccf2:	4b2c      	ldr	r3, [pc, #176]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f003 030c 	and.w	r3, r3, #12
 800ccfa:	2b04      	cmp	r3, #4
 800ccfc:	d102      	bne.n	800cd04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ccfe:	4b2a      	ldr	r3, [pc, #168]	@ (800cda8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	e047      	b.n	800cd94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cd04:	4b27      	ldr	r3, [pc, #156]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 030c 	and.w	r3, r3, #12
 800cd0c:	2b08      	cmp	r3, #8
 800cd0e:	d102      	bne.n	800cd16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cd10:	4b26      	ldr	r3, [pc, #152]	@ (800cdac <HAL_RCC_GetSysClockFreq+0xc0>)
 800cd12:	613b      	str	r3, [r7, #16]
 800cd14:	e03e      	b.n	800cd94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cd16:	4b23      	ldr	r3, [pc, #140]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	f003 030c 	and.w	r3, r3, #12
 800cd1e:	2b0c      	cmp	r3, #12
 800cd20:	d136      	bne.n	800cd90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cd22:	4b20      	ldr	r3, [pc, #128]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cd2c:	4b1d      	ldr	r3, [pc, #116]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	091b      	lsrs	r3, r3, #4
 800cd32:	f003 030f 	and.w	r3, r3, #15
 800cd36:	3301      	adds	r3, #1
 800cd38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d10c      	bne.n	800cd5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd40:	4a1a      	ldr	r2, [pc, #104]	@ (800cdac <HAL_RCC_GetSysClockFreq+0xc0>)
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd48:	4a16      	ldr	r2, [pc, #88]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd4a:	68d2      	ldr	r2, [r2, #12]
 800cd4c:	0a12      	lsrs	r2, r2, #8
 800cd4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cd52:	fb02 f303 	mul.w	r3, r2, r3
 800cd56:	617b      	str	r3, [r7, #20]
      break;
 800cd58:	e00c      	b.n	800cd74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd5a:	4a13      	ldr	r2, [pc, #76]	@ (800cda8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd62:	4a10      	ldr	r2, [pc, #64]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd64:	68d2      	ldr	r2, [r2, #12]
 800cd66:	0a12      	lsrs	r2, r2, #8
 800cd68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cd6c:	fb02 f303 	mul.w	r3, r2, r3
 800cd70:	617b      	str	r3, [r7, #20]
      break;
 800cd72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cd74:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	0e5b      	lsrs	r3, r3, #25
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	3301      	adds	r3, #1
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	e001      	b.n	800cd94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cd94:	693b      	ldr	r3, [r7, #16]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	40021000 	.word	0x40021000
 800cda8:	00f42400 	.word	0x00f42400
 800cdac:	016e3600 	.word	0x016e3600

0800cdb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cdb4:	4b03      	ldr	r3, [pc, #12]	@ (800cdc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	20000138 	.word	0x20000138

0800cdc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cdcc:	f7ff fff0 	bl	800cdb0 <HAL_RCC_GetHCLKFreq>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	4b06      	ldr	r3, [pc, #24]	@ (800cdec <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	0a1b      	lsrs	r3, r3, #8
 800cdd8:	f003 0307 	and.w	r3, r3, #7
 800cddc:	4904      	ldr	r1, [pc, #16]	@ (800cdf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cdde:	5ccb      	ldrb	r3, [r1, r3]
 800cde0:	f003 031f 	and.w	r3, r3, #31
 800cde4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	40021000 	.word	0x40021000
 800cdf0:	08013c20 	.word	0x08013c20

0800cdf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cdf8:	f7ff ffda 	bl	800cdb0 <HAL_RCC_GetHCLKFreq>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	4b06      	ldr	r3, [pc, #24]	@ (800ce18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	0adb      	lsrs	r3, r3, #11
 800ce04:	f003 0307 	and.w	r3, r3, #7
 800ce08:	4904      	ldr	r1, [pc, #16]	@ (800ce1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ce0a:	5ccb      	ldrb	r3, [r1, r3]
 800ce0c:	f003 031f 	and.w	r3, r3, #31
 800ce10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	40021000 	.word	0x40021000
 800ce1c:	08013c20 	.word	0x08013c20

0800ce20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce26:	4b1e      	ldr	r3, [pc, #120]	@ (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce30:	4b1b      	ldr	r3, [pc, #108]	@ (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2b03      	cmp	r3, #3
 800ce42:	d10c      	bne.n	800ce5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce44:	4a17      	ldr	r2, [pc, #92]	@ (800cea4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce4c:	4a14      	ldr	r2, [pc, #80]	@ (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce4e:	68d2      	ldr	r2, [r2, #12]
 800ce50:	0a12      	lsrs	r2, r2, #8
 800ce52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ce56:	fb02 f303 	mul.w	r3, r2, r3
 800ce5a:	617b      	str	r3, [r7, #20]
    break;
 800ce5c:	e00c      	b.n	800ce78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce5e:	4a12      	ldr	r2, [pc, #72]	@ (800cea8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce66:	4a0e      	ldr	r2, [pc, #56]	@ (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce68:	68d2      	ldr	r2, [r2, #12]
 800ce6a:	0a12      	lsrs	r2, r2, #8
 800ce6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ce70:	fb02 f303 	mul.w	r3, r2, r3
 800ce74:	617b      	str	r3, [r7, #20]
    break;
 800ce76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ce78:	4b09      	ldr	r3, [pc, #36]	@ (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	0e5b      	lsrs	r3, r3, #25
 800ce7e:	f003 0303 	and.w	r3, r3, #3
 800ce82:	3301      	adds	r3, #1
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ce92:	687b      	ldr	r3, [r7, #4]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	371c      	adds	r7, #28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	40021000 	.word	0x40021000
 800cea4:	016e3600 	.word	0x016e3600
 800cea8:	00f42400 	.word	0x00f42400

0800ceac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ceb8:	2300      	movs	r3, #0
 800ceba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 8098 	beq.w	800cffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ceca:	2300      	movs	r3, #0
 800cecc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cece:	4b43      	ldr	r3, [pc, #268]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ced0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ced2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10d      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ceda:	4b40      	ldr	r3, [pc, #256]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cedc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cede:	4a3f      	ldr	r2, [pc, #252]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cee4:	6593      	str	r3, [r2, #88]	@ 0x58
 800cee6:	4b3d      	ldr	r3, [pc, #244]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ceee:	60bb      	str	r3, [r7, #8]
 800cef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cef2:	2301      	movs	r3, #1
 800cef4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cef6:	4b3a      	ldr	r3, [pc, #232]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a39      	ldr	r2, [pc, #228]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cefc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cf02:	f7fc ff47 	bl	8009d94 <HAL_GetTick>
 800cf06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf08:	e009      	b.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf0a:	f7fc ff43 	bl	8009d94 <HAL_GetTick>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d902      	bls.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	74fb      	strb	r3, [r7, #19]
        break;
 800cf1c:	e005      	b.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf1e:	4b30      	ldr	r3, [pc, #192]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d0ef      	beq.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cf2a:	7cfb      	ldrb	r3, [r7, #19]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d159      	bne.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cf30:	4b2a      	ldr	r3, [pc, #168]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d01e      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d019      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cf4c:	4b23      	ldr	r3, [pc, #140]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cf58:	4b20      	ldr	r3, [pc, #128]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf5e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cf68:	4b1c      	ldr	r3, [pc, #112]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf6e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cf78:	4a18      	ldr	r2, [pc, #96]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d016      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf8a:	f7fc ff03 	bl	8009d94 <HAL_GetTick>
 800cf8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf90:	e00b      	b.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf92:	f7fc feff 	bl	8009d94 <HAL_GetTick>
 800cf96:	4602      	mov	r2, r0
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d902      	bls.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	74fb      	strb	r3, [r7, #19]
            break;
 800cfa8:	e006      	b.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d0ec      	beq.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cfb8:	7cfb      	ldrb	r3, [r7, #19]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cfbe:	4b07      	ldr	r3, [pc, #28]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfcc:	4903      	ldr	r1, [pc, #12]	@ (800cfdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cfd4:	e008      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cfd6:	7cfb      	ldrb	r3, [r7, #19]
 800cfd8:	74bb      	strb	r3, [r7, #18]
 800cfda:	e005      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cfdc:	40021000 	.word	0x40021000
 800cfe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfe4:	7cfb      	ldrb	r3, [r7, #19]
 800cfe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cfe8:	7c7b      	ldrb	r3, [r7, #17]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d105      	bne.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cfee:	4ba7      	ldr	r3, [pc, #668]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cff2:	4aa6      	ldr	r2, [pc, #664]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00a      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d006:	4ba1      	ldr	r3, [pc, #644]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d00c:	f023 0203 	bic.w	r2, r3, #3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	499d      	ldr	r1, [pc, #628]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d016:	4313      	orrs	r3, r2
 800d018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00a      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d028:	4b98      	ldr	r3, [pc, #608]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d02e:	f023 020c 	bic.w	r2, r3, #12
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	4995      	ldr	r1, [pc, #596]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d038:	4313      	orrs	r3, r2
 800d03a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0304 	and.w	r3, r3, #4
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d04a:	4b90      	ldr	r3, [pc, #576]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	498c      	ldr	r1, [pc, #560]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d06c:	4b87      	ldr	r3, [pc, #540]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	4984      	ldr	r1, [pc, #528]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0310 	and.w	r3, r3, #16
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d08e:	4b7f      	ldr	r3, [pc, #508]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	497b      	ldr	r1, [pc, #492]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0320 	and.w	r3, r3, #32
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0b0:	4b76      	ldr	r3, [pc, #472]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	4973      	ldr	r1, [pc, #460]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d0d2:	4b6e      	ldr	r3, [pc, #440]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	69db      	ldr	r3, [r3, #28]
 800d0e0:	496a      	ldr	r1, [pc, #424]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00a      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d0f4:	4b65      	ldr	r3, [pc, #404]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a1b      	ldr	r3, [r3, #32]
 800d102:	4962      	ldr	r1, [pc, #392]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d104:	4313      	orrs	r3, r2
 800d106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d116:	4b5d      	ldr	r3, [pc, #372]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d11c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d124:	4959      	ldr	r1, [pc, #356]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d126:	4313      	orrs	r3, r2
 800d128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00a      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d138:	4b54      	ldr	r3, [pc, #336]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d13a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d13e:	f023 0203 	bic.w	r2, r3, #3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d146:	4951      	ldr	r1, [pc, #324]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d148:	4313      	orrs	r3, r2
 800d14a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00a      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d15a:	4b4c      	ldr	r3, [pc, #304]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d168:	4948      	ldr	r1, [pc, #288]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d015      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d17c:	4b43      	ldr	r3, [pc, #268]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d182:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18a:	4940      	ldr	r1, [pc, #256]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d19a:	d105      	bne.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d19c:	4b3b      	ldr	r3, [pc, #236]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	4a3a      	ldr	r2, [pc, #232]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d015      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d1b4:	4b35      	ldr	r3, [pc, #212]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c2:	4932      	ldr	r1, [pc, #200]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d1d2:	d105      	bne.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d1d4:	4b2d      	ldr	r3, [pc, #180]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d015      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d1ec:	4b27      	ldr	r3, [pc, #156]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1fa:	4924      	ldr	r1, [pc, #144]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d20a:	d105      	bne.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d20c:	4b1f      	ldr	r3, [pc, #124]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	4a1e      	ldr	r2, [pc, #120]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d216:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d015      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d224:	4b19      	ldr	r3, [pc, #100]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d22a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d232:	4916      	ldr	r1, [pc, #88]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d234:	4313      	orrs	r3, r2
 800d236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d23e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d242:	d105      	bne.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d244:	4b11      	ldr	r3, [pc, #68]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	4a10      	ldr	r2, [pc, #64]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d24a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d24e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d019      	beq.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d25c:	4b0b      	ldr	r3, [pc, #44]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26a:	4908      	ldr	r1, [pc, #32]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d27a:	d109      	bne.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d27c:	4b03      	ldr	r3, [pc, #12]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	4a02      	ldr	r2, [pc, #8]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d286:	60d3      	str	r3, [r2, #12]
 800d288:	e002      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d28a:	bf00      	nop
 800d28c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d015      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d29c:	4b29      	ldr	r3, [pc, #164]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2aa:	4926      	ldr	r1, [pc, #152]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2ba:	d105      	bne.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d2bc:	4b21      	ldr	r3, [pc, #132]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	4a20      	ldr	r2, [pc, #128]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d015      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d2d4:	4b1b      	ldr	r3, [pc, #108]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2e2:	4918      	ldr	r1, [pc, #96]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2f2:	d105      	bne.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d2f4:	4b13      	ldr	r3, [pc, #76]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a12      	ldr	r2, [pc, #72]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d015      	beq.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d30c:	4b0d      	ldr	r3, [pc, #52]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d31a:	490a      	ldr	r1, [pc, #40]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d32a:	d105      	bne.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d32c:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	4a04      	ldr	r2, [pc, #16]	@ (800d344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d338:	7cbb      	ldrb	r3, [r7, #18]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	40021000 	.word	0x40021000

0800d348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e054      	b.n	800d404 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d360:	b2db      	uxtb	r3, r3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d111      	bne.n	800d38a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 fee2 	bl	800f138 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a23      	ldr	r2, [pc, #140]	@ (800d40c <HAL_TIM_Base_Init+0xc4>)
 800d380:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	3304      	adds	r3, #4
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f001 fa2b 	bl	800e7f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	080095bd 	.word	0x080095bd

0800d410 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b01      	cmp	r3, #1
 800d422:	d001      	beq.n	800d428 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e04c      	b.n	800d4c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a26      	ldr	r2, [pc, #152]	@ (800d4d0 <HAL_TIM_Base_Start+0xc0>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d022      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d442:	d01d      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a22      	ldr	r2, [pc, #136]	@ (800d4d4 <HAL_TIM_Base_Start+0xc4>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d018      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a21      	ldr	r2, [pc, #132]	@ (800d4d8 <HAL_TIM_Base_Start+0xc8>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d013      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a1f      	ldr	r2, [pc, #124]	@ (800d4dc <HAL_TIM_Base_Start+0xcc>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00e      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a1e      	ldr	r2, [pc, #120]	@ (800d4e0 <HAL_TIM_Base_Start+0xd0>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d009      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a1c      	ldr	r2, [pc, #112]	@ (800d4e4 <HAL_TIM_Base_Start+0xd4>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d004      	beq.n	800d480 <HAL_TIM_Base_Start+0x70>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a1b      	ldr	r2, [pc, #108]	@ (800d4e8 <HAL_TIM_Base_Start+0xd8>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d115      	bne.n	800d4ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	4b19      	ldr	r3, [pc, #100]	@ (800d4ec <HAL_TIM_Base_Start+0xdc>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b06      	cmp	r3, #6
 800d490:	d015      	beq.n	800d4be <HAL_TIM_Base_Start+0xae>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d498:	d011      	beq.n	800d4be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0201 	orr.w	r2, r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4aa:	e008      	b.n	800d4be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0201 	orr.w	r2, r2, #1
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	e000      	b.n	800d4c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	40012c00 	.word	0x40012c00
 800d4d4:	40000400 	.word	0x40000400
 800d4d8:	40000800 	.word	0x40000800
 800d4dc:	40000c00 	.word	0x40000c00
 800d4e0:	40013400 	.word	0x40013400
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	40015000 	.word	0x40015000
 800d4ec:	00010007 	.word	0x00010007

0800d4f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b01      	cmp	r3, #1
 800d502:	d001      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e054      	b.n	800d5b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2202      	movs	r2, #2
 800d50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f042 0201 	orr.w	r2, r2, #1
 800d51e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a26      	ldr	r2, [pc, #152]	@ (800d5c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d022      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d532:	d01d      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a22      	ldr	r2, [pc, #136]	@ (800d5c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d018      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a21      	ldr	r2, [pc, #132]	@ (800d5c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d013      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a1f      	ldr	r2, [pc, #124]	@ (800d5cc <HAL_TIM_Base_Start_IT+0xdc>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00e      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d009      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a1c      	ldr	r2, [pc, #112]	@ (800d5d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d004      	beq.n	800d570 <HAL_TIM_Base_Start_IT+0x80>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d115      	bne.n	800d59c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	4b19      	ldr	r3, [pc, #100]	@ (800d5dc <HAL_TIM_Base_Start_IT+0xec>)
 800d578:	4013      	ands	r3, r2
 800d57a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b06      	cmp	r3, #6
 800d580:	d015      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0xbe>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d588:	d011      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f042 0201 	orr.w	r2, r2, #1
 800d598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d59a:	e008      	b.n	800d5ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f042 0201 	orr.w	r2, r2, #1
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	e000      	b.n	800d5b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	40012c00 	.word	0x40012c00
 800d5c4:	40000400 	.word	0x40000400
 800d5c8:	40000800 	.word	0x40000800
 800d5cc:	40000c00 	.word	0x40000c00
 800d5d0:	40013400 	.word	0x40013400
 800d5d4:	40014000 	.word	0x40014000
 800d5d8:	40015000 	.word	0x40015000
 800d5dc:	00010007 	.word	0x00010007

0800d5e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e054      	b.n	800d69c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d111      	bne.n	800d622 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f001 fd96 	bl	800f138 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a23      	ldr	r2, [pc, #140]	@ (800d6a4 <HAL_TIM_PWM_Init+0xc4>)
 800d618:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2202      	movs	r2, #2
 800d626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	3304      	adds	r3, #4
 800d632:	4619      	mov	r1, r3
 800d634:	4610      	mov	r0, r2
 800d636:	f001 f8df 	bl	800e7f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	08009571 	.word	0x08009571

0800d6a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d109      	bne.n	800d6cc <HAL_TIM_PWM_Start+0x24>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	bf14      	ite	ne
 800d6c4:	2301      	movne	r3, #1
 800d6c6:	2300      	moveq	r3, #0
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	e03c      	b.n	800d746 <HAL_TIM_PWM_Start+0x9e>
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	d109      	bne.n	800d6e6 <HAL_TIM_PWM_Start+0x3e>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	bf14      	ite	ne
 800d6de:	2301      	movne	r3, #1
 800d6e0:	2300      	moveq	r3, #0
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	e02f      	b.n	800d746 <HAL_TIM_PWM_Start+0x9e>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d109      	bne.n	800d700 <HAL_TIM_PWM_Start+0x58>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	bf14      	ite	ne
 800d6f8:	2301      	movne	r3, #1
 800d6fa:	2300      	moveq	r3, #0
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	e022      	b.n	800d746 <HAL_TIM_PWM_Start+0x9e>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b0c      	cmp	r3, #12
 800d704:	d109      	bne.n	800d71a <HAL_TIM_PWM_Start+0x72>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b01      	cmp	r3, #1
 800d710:	bf14      	ite	ne
 800d712:	2301      	movne	r3, #1
 800d714:	2300      	moveq	r3, #0
 800d716:	b2db      	uxtb	r3, r3
 800d718:	e015      	b.n	800d746 <HAL_TIM_PWM_Start+0x9e>
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b10      	cmp	r3, #16
 800d71e:	d109      	bne.n	800d734 <HAL_TIM_PWM_Start+0x8c>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	bf14      	ite	ne
 800d72c:	2301      	movne	r3, #1
 800d72e:	2300      	moveq	r3, #0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	e008      	b.n	800d746 <HAL_TIM_PWM_Start+0x9e>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	bf14      	ite	ne
 800d740:	2301      	movne	r3, #1
 800d742:	2300      	moveq	r3, #0
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e0a6      	b.n	800d89c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d104      	bne.n	800d75e <HAL_TIM_PWM_Start+0xb6>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d75c:	e023      	b.n	800d7a6 <HAL_TIM_PWM_Start+0xfe>
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b04      	cmp	r3, #4
 800d762:	d104      	bne.n	800d76e <HAL_TIM_PWM_Start+0xc6>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2202      	movs	r2, #2
 800d768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d76c:	e01b      	b.n	800d7a6 <HAL_TIM_PWM_Start+0xfe>
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b08      	cmp	r3, #8
 800d772:	d104      	bne.n	800d77e <HAL_TIM_PWM_Start+0xd6>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2202      	movs	r2, #2
 800d778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d77c:	e013      	b.n	800d7a6 <HAL_TIM_PWM_Start+0xfe>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b0c      	cmp	r3, #12
 800d782:	d104      	bne.n	800d78e <HAL_TIM_PWM_Start+0xe6>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2202      	movs	r2, #2
 800d788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d78c:	e00b      	b.n	800d7a6 <HAL_TIM_PWM_Start+0xfe>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b10      	cmp	r3, #16
 800d792:	d104      	bne.n	800d79e <HAL_TIM_PWM_Start+0xf6>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2202      	movs	r2, #2
 800d798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d79c:	e003      	b.n	800d7a6 <HAL_TIM_PWM_Start+0xfe>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2202      	movs	r2, #2
 800d7a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f001 fc9c 	bl	800f0ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a3a      	ldr	r2, [pc, #232]	@ (800d8a4 <HAL_TIM_PWM_Start+0x1fc>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d018      	beq.n	800d7f0 <HAL_TIM_PWM_Start+0x148>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a39      	ldr	r2, [pc, #228]	@ (800d8a8 <HAL_TIM_PWM_Start+0x200>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d013      	beq.n	800d7f0 <HAL_TIM_PWM_Start+0x148>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a37      	ldr	r2, [pc, #220]	@ (800d8ac <HAL_TIM_PWM_Start+0x204>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d00e      	beq.n	800d7f0 <HAL_TIM_PWM_Start+0x148>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a36      	ldr	r2, [pc, #216]	@ (800d8b0 <HAL_TIM_PWM_Start+0x208>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d009      	beq.n	800d7f0 <HAL_TIM_PWM_Start+0x148>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a34      	ldr	r2, [pc, #208]	@ (800d8b4 <HAL_TIM_PWM_Start+0x20c>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d004      	beq.n	800d7f0 <HAL_TIM_PWM_Start+0x148>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a33      	ldr	r2, [pc, #204]	@ (800d8b8 <HAL_TIM_PWM_Start+0x210>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d101      	bne.n	800d7f4 <HAL_TIM_PWM_Start+0x14c>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e000      	b.n	800d7f6 <HAL_TIM_PWM_Start+0x14e>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d007      	beq.n	800d80a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a25      	ldr	r2, [pc, #148]	@ (800d8a4 <HAL_TIM_PWM_Start+0x1fc>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d022      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d81c:	d01d      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a26      	ldr	r2, [pc, #152]	@ (800d8bc <HAL_TIM_PWM_Start+0x214>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d018      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a24      	ldr	r2, [pc, #144]	@ (800d8c0 <HAL_TIM_PWM_Start+0x218>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d013      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a23      	ldr	r2, [pc, #140]	@ (800d8c4 <HAL_TIM_PWM_Start+0x21c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d00e      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a19      	ldr	r2, [pc, #100]	@ (800d8a8 <HAL_TIM_PWM_Start+0x200>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d009      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a18      	ldr	r2, [pc, #96]	@ (800d8ac <HAL_TIM_PWM_Start+0x204>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d004      	beq.n	800d85a <HAL_TIM_PWM_Start+0x1b2>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a18      	ldr	r2, [pc, #96]	@ (800d8b8 <HAL_TIM_PWM_Start+0x210>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d115      	bne.n	800d886 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	4b19      	ldr	r3, [pc, #100]	@ (800d8c8 <HAL_TIM_PWM_Start+0x220>)
 800d862:	4013      	ands	r3, r2
 800d864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b06      	cmp	r3, #6
 800d86a:	d015      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1f0>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d872:	d011      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f042 0201 	orr.w	r2, r2, #1
 800d882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d884:	e008      	b.n	800d898 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f042 0201 	orr.w	r2, r2, #1
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	e000      	b.n	800d89a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	40012c00 	.word	0x40012c00
 800d8a8:	40013400 	.word	0x40013400
 800d8ac:	40014000 	.word	0x40014000
 800d8b0:	40014400 	.word	0x40014400
 800d8b4:	40014800 	.word	0x40014800
 800d8b8:	40015000 	.word	0x40015000
 800d8bc:	40000400 	.word	0x40000400
 800d8c0:	40000800 	.word	0x40000800
 800d8c4:	40000c00 	.word	0x40000c00
 800d8c8:	00010007 	.word	0x00010007

0800d8cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e04c      	b.n	800d97a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d111      	bne.n	800d910 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 fc1f 	bl	800f138 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4a1f      	ldr	r2, [pc, #124]	@ (800d984 <HAL_TIM_OnePulse_Init+0xb8>)
 800d906:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2202      	movs	r2, #2
 800d914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	3304      	adds	r3, #4
 800d920:	4619      	mov	r1, r3
 800d922:	4610      	mov	r0, r2
 800d924:	f000 ff68 	bl	800e7f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0208 	bic.w	r2, r2, #8
 800d936:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6819      	ldr	r1, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	0800d989 	.word	0x0800d989

0800d988 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d9ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d9b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9c6:	7bfb      	ldrb	r3, [r7, #15]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d108      	bne.n	800d9de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9cc:	7bbb      	ldrb	r3, [r7, #14]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d105      	bne.n	800d9de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9d2:	7b7b      	ldrb	r3, [r7, #13]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d102      	bne.n	800d9de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9d8:	7b3b      	ldrb	r3, [r7, #12]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d001      	beq.n	800d9e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e059      	b.n	800da96 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2202      	movs	r2, #2
 800d9ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68da      	ldr	r2, [r3, #12]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f042 0202 	orr.w	r2, r2, #2
 800da10:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68da      	ldr	r2, [r3, #12]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f042 0204 	orr.w	r2, r2, #4
 800da20:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2201      	movs	r2, #1
 800da28:	2100      	movs	r1, #0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f001 fb5e 	bl	800f0ec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2201      	movs	r2, #1
 800da36:	2104      	movs	r1, #4
 800da38:	4618      	mov	r0, r3
 800da3a:	f001 fb57 	bl	800f0ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a17      	ldr	r2, [pc, #92]	@ (800daa0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d018      	beq.n	800da7a <HAL_TIM_OnePulse_Start_IT+0xde>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a15      	ldr	r2, [pc, #84]	@ (800daa4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d013      	beq.n	800da7a <HAL_TIM_OnePulse_Start_IT+0xde>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a14      	ldr	r2, [pc, #80]	@ (800daa8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00e      	beq.n	800da7a <HAL_TIM_OnePulse_Start_IT+0xde>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a12      	ldr	r2, [pc, #72]	@ (800daac <HAL_TIM_OnePulse_Start_IT+0x110>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d009      	beq.n	800da7a <HAL_TIM_OnePulse_Start_IT+0xde>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a11      	ldr	r2, [pc, #68]	@ (800dab0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d004      	beq.n	800da7a <HAL_TIM_OnePulse_Start_IT+0xde>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a0f      	ldr	r2, [pc, #60]	@ (800dab4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d101      	bne.n	800da7e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800da7a:	2301      	movs	r3, #1
 800da7c:	e000      	b.n	800da80 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800da7e:	2300      	movs	r3, #0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	40012c00 	.word	0x40012c00
 800daa4:	40013400 	.word	0x40013400
 800daa8:	40014000 	.word	0x40014000
 800daac:	40014400 	.word	0x40014400
 800dab0:	40014800 	.word	0x40014800
 800dab4:	40015000 	.word	0x40015000

0800dab8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dac8:	2301      	movs	r3, #1
 800daca:	e0a2      	b.n	800dc12 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d111      	bne.n	800dafc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f001 fb29 	bl	800f138 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daea:	2b00      	cmp	r3, #0
 800daec:	d102      	bne.n	800daf4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a4a      	ldr	r2, [pc, #296]	@ (800dc1c <HAL_TIM_Encoder_Init+0x164>)
 800daf2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2202      	movs	r2, #2
 800db00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	6812      	ldr	r2, [r2, #0]
 800db0e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800db12:	f023 0307 	bic.w	r3, r3, #7
 800db16:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3304      	adds	r3, #4
 800db20:	4619      	mov	r1, r3
 800db22:	4610      	mov	r0, r2
 800db24:	f000 fe68 	bl	800e7f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6a1b      	ldr	r3, [r3, #32]
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	4313      	orrs	r3, r2
 800db48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db50:	f023 0303 	bic.w	r3, r3, #3
 800db54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	689a      	ldr	r2, [r3, #8]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	699b      	ldr	r3, [r3, #24]
 800db5e:	021b      	lsls	r3, r3, #8
 800db60:	4313      	orrs	r3, r2
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	4313      	orrs	r3, r2
 800db66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800db6e:	f023 030c 	bic.w	r3, r3, #12
 800db72:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800db7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	021b      	lsls	r3, r3, #8
 800db8a:	4313      	orrs	r3, r2
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	011a      	lsls	r2, r3, #4
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	031b      	lsls	r3, r3, #12
 800db9e:	4313      	orrs	r3, r2
 800dba0:	693a      	ldr	r2, [r7, #16]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800dbac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800dbb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	685a      	ldr	r2, [r3, #4]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	695b      	ldr	r3, [r3, #20]
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08009665 	.word	0x08009665

0800dc20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d110      	bne.n	800dc72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d102      	bne.n	800dc5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc56:	7b7b      	ldrb	r3, [r7, #13]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d001      	beq.n	800dc60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e069      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc70:	e031      	b.n	800dcd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b04      	cmp	r3, #4
 800dc76:	d110      	bne.n	800dc9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc78:	7bbb      	ldrb	r3, [r7, #14]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d102      	bne.n	800dc84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc7e:	7b3b      	ldrb	r3, [r7, #12]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d001      	beq.n	800dc88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e055      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2202      	movs	r2, #2
 800dc94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc98:	e01d      	b.n	800dcd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d108      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d105      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dca6:	7b7b      	ldrb	r3, [r7, #13]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d102      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dcac:	7b3b      	ldrb	r3, [r7, #12]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d001      	beq.n	800dcb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e03e      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2202      	movs	r2, #2
 800dcba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <HAL_TIM_Encoder_Start+0xc4>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d008      	beq.n	800dcf4 <HAL_TIM_Encoder_Start+0xd4>
 800dce2:	e00f      	b.n	800dd04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2201      	movs	r2, #1
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f001 f9fd 	bl	800f0ec <TIM_CCxChannelCmd>
      break;
 800dcf2:	e016      	b.n	800dd22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f001 f9f5 	bl	800f0ec <TIM_CCxChannelCmd>
      break;
 800dd02:	e00e      	b.n	800dd22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f001 f9ed 	bl	800f0ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2201      	movs	r2, #1
 800dd18:	2104      	movs	r1, #4
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f001 f9e6 	bl	800f0ec <TIM_CCxChannelCmd>
      break;
 800dd20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f042 0201 	orr.w	r2, r2, #1
 800dd30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d026      	beq.n	800ddac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f003 0302 	and.w	r3, r3, #2
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d021      	beq.n	800ddac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f06f 0202 	mvn.w	r2, #2
 800dd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	f003 0303 	and.w	r3, r3, #3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d005      	beq.n	800dd92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	4798      	blx	r3
 800dd90:	e009      	b.n	800dda6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d026      	beq.n	800de04 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f003 0304 	and.w	r3, r3, #4
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d021      	beq.n	800de04 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f06f 0204 	mvn.w	r2, #4
 800ddc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d005      	beq.n	800ddea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	4798      	blx	r3
 800dde8:	e009      	b.n	800ddfe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f003 0308 	and.w	r3, r3, #8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d026      	beq.n	800de5c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f003 0308 	and.w	r3, r3, #8
 800de14:	2b00      	cmp	r3, #0
 800de16:	d021      	beq.n	800de5c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f06f 0208 	mvn.w	r2, #8
 800de20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2204      	movs	r2, #4
 800de26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	f003 0303 	and.w	r3, r3, #3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d005      	beq.n	800de42 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	4798      	blx	r3
 800de40:	e009      	b.n	800de56 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	f003 0310 	and.w	r3, r3, #16
 800de62:	2b00      	cmp	r3, #0
 800de64:	d026      	beq.n	800deb4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d021      	beq.n	800deb4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f06f 0210 	mvn.w	r2, #16
 800de78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2208      	movs	r2, #8
 800de7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d005      	beq.n	800de9a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	4798      	blx	r3
 800de98:	e009      	b.n	800deae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	f003 0301 	and.w	r3, r3, #1
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00e      	beq.n	800dedc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d009      	beq.n	800dedc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f06f 0201 	mvn.w	r2, #1
 800ded0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d104      	bne.n	800def0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00e      	beq.n	800df0e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800def6:	2b00      	cmp	r3, #0
 800def8:	d009      	beq.n	800df0e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800df02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00e      	beq.n	800df36 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d009      	beq.n	800df36 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800df2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00e      	beq.n	800df5e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df46:	2b00      	cmp	r3, #0
 800df48:	d009      	beq.n	800df5e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800df52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f003 0320 	and.w	r3, r3, #32
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00e      	beq.n	800df86 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f003 0320 	and.w	r3, r3, #32
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f06f 0220 	mvn.w	r2, #32
 800df7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d009      	beq.n	800dfae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800dfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00e      	beq.n	800dfd6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d009      	beq.n	800dfd6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800dfca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00e      	beq.n	800dffe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d009      	beq.n	800dffe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800dff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00e      	beq.n	800e026 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d009      	beq.n	800e026 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e026:	bf00      	nop
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
	...

0800e030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e046:	2b01      	cmp	r3, #1
 800e048:	d101      	bne.n	800e04e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e04a:	2302      	movs	r3, #2
 800e04c:	e0ff      	b.n	800e24e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2201      	movs	r2, #1
 800e052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b14      	cmp	r3, #20
 800e05a:	f200 80f0 	bhi.w	800e23e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e05e:	a201      	add	r2, pc, #4	@ (adr r2, 800e064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e064:	0800e0b9 	.word	0x0800e0b9
 800e068:	0800e23f 	.word	0x0800e23f
 800e06c:	0800e23f 	.word	0x0800e23f
 800e070:	0800e23f 	.word	0x0800e23f
 800e074:	0800e0f9 	.word	0x0800e0f9
 800e078:	0800e23f 	.word	0x0800e23f
 800e07c:	0800e23f 	.word	0x0800e23f
 800e080:	0800e23f 	.word	0x0800e23f
 800e084:	0800e13b 	.word	0x0800e13b
 800e088:	0800e23f 	.word	0x0800e23f
 800e08c:	0800e23f 	.word	0x0800e23f
 800e090:	0800e23f 	.word	0x0800e23f
 800e094:	0800e17b 	.word	0x0800e17b
 800e098:	0800e23f 	.word	0x0800e23f
 800e09c:	0800e23f 	.word	0x0800e23f
 800e0a0:	0800e23f 	.word	0x0800e23f
 800e0a4:	0800e1bd 	.word	0x0800e1bd
 800e0a8:	0800e23f 	.word	0x0800e23f
 800e0ac:	0800e23f 	.word	0x0800e23f
 800e0b0:	0800e23f 	.word	0x0800e23f
 800e0b4:	0800e1fd 	.word	0x0800e1fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68b9      	ldr	r1, [r7, #8]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 fc4e 	bl	800e960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	699a      	ldr	r2, [r3, #24]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f042 0208 	orr.w	r2, r2, #8
 800e0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	699a      	ldr	r2, [r3, #24]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 0204 	bic.w	r2, r2, #4
 800e0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6999      	ldr	r1, [r3, #24]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	691a      	ldr	r2, [r3, #16]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	619a      	str	r2, [r3, #24]
      break;
 800e0f6:	e0a5      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 fcc8 	bl	800ea94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	699a      	ldr	r2, [r3, #24]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	699a      	ldr	r2, [r3, #24]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6999      	ldr	r1, [r3, #24]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	691b      	ldr	r3, [r3, #16]
 800e12e:	021a      	lsls	r2, r3, #8
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	430a      	orrs	r2, r1
 800e136:	619a      	str	r2, [r3, #24]
      break;
 800e138:	e084      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 fd3b 	bl	800ebbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69da      	ldr	r2, [r3, #28]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f042 0208 	orr.w	r2, r2, #8
 800e154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	69da      	ldr	r2, [r3, #28]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f022 0204 	bic.w	r2, r2, #4
 800e164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69d9      	ldr	r1, [r3, #28]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	691a      	ldr	r2, [r3, #16]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	61da      	str	r2, [r3, #28]
      break;
 800e178:	e064      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	4618      	mov	r0, r3
 800e182:	f000 fdad 	bl	800ece0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	69da      	ldr	r2, [r3, #28]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	69da      	ldr	r2, [r3, #28]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	69d9      	ldr	r1, [r3, #28]
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	021a      	lsls	r2, r3, #8
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	430a      	orrs	r2, r1
 800e1b8:	61da      	str	r2, [r3, #28]
      break;
 800e1ba:	e043      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 fe20 	bl	800ee08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f042 0208 	orr.w	r2, r2, #8
 800e1d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f022 0204 	bic.w	r2, r2, #4
 800e1e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	691a      	ldr	r2, [r3, #16]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	430a      	orrs	r2, r1
 800e1f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e1fa:	e023      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	68b9      	ldr	r1, [r7, #8]
 800e202:	4618      	mov	r0, r3
 800e204:	f000 fe6a 	bl	800eedc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	021a      	lsls	r2, r3, #8
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	430a      	orrs	r2, r1
 800e23a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e23c:	e002      	b.n	800e244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	75fb      	strb	r3, [r7, #23]
      break;
 800e242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop

0800e258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d101      	bne.n	800e274 <HAL_TIM_ConfigClockSource+0x1c>
 800e270:	2302      	movs	r3, #2
 800e272:	e0f6      	b.n	800e462 <HAL_TIM_ConfigClockSource+0x20a>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2202      	movs	r2, #2
 800e280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e29e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a6f      	ldr	r2, [pc, #444]	@ (800e46c <HAL_TIM_ConfigClockSource+0x214>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	f000 80c1 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e2b4:	4a6d      	ldr	r2, [pc, #436]	@ (800e46c <HAL_TIM_ConfigClockSource+0x214>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	f200 80c6 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2bc:	4a6c      	ldr	r2, [pc, #432]	@ (800e470 <HAL_TIM_ConfigClockSource+0x218>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	f000 80b9 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e2c4:	4a6a      	ldr	r2, [pc, #424]	@ (800e470 <HAL_TIM_ConfigClockSource+0x218>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	f200 80be 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2cc:	4a69      	ldr	r2, [pc, #420]	@ (800e474 <HAL_TIM_ConfigClockSource+0x21c>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	f000 80b1 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e2d4:	4a67      	ldr	r2, [pc, #412]	@ (800e474 <HAL_TIM_ConfigClockSource+0x21c>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	f200 80b6 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2dc:	4a66      	ldr	r2, [pc, #408]	@ (800e478 <HAL_TIM_ConfigClockSource+0x220>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	f000 80a9 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e2e4:	4a64      	ldr	r2, [pc, #400]	@ (800e478 <HAL_TIM_ConfigClockSource+0x220>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	f200 80ae 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2ec:	4a63      	ldr	r2, [pc, #396]	@ (800e47c <HAL_TIM_ConfigClockSource+0x224>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	f000 80a1 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e2f4:	4a61      	ldr	r2, [pc, #388]	@ (800e47c <HAL_TIM_ConfigClockSource+0x224>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	f200 80a6 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2fc:	4a60      	ldr	r2, [pc, #384]	@ (800e480 <HAL_TIM_ConfigClockSource+0x228>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	f000 8099 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e304:	4a5e      	ldr	r2, [pc, #376]	@ (800e480 <HAL_TIM_ConfigClockSource+0x228>)
 800e306:	4293      	cmp	r3, r2
 800e308:	f200 809e 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e30c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e310:	f000 8091 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e318:	f200 8096 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e320:	f000 8089 	beq.w	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e328:	f200 808e 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e32c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e330:	d03e      	beq.n	800e3b0 <HAL_TIM_ConfigClockSource+0x158>
 800e332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e336:	f200 8087 	bhi.w	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e33e:	f000 8086 	beq.w	800e44e <HAL_TIM_ConfigClockSource+0x1f6>
 800e342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e346:	d87f      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e348:	2b70      	cmp	r3, #112	@ 0x70
 800e34a:	d01a      	beq.n	800e382 <HAL_TIM_ConfigClockSource+0x12a>
 800e34c:	2b70      	cmp	r3, #112	@ 0x70
 800e34e:	d87b      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e350:	2b60      	cmp	r3, #96	@ 0x60
 800e352:	d050      	beq.n	800e3f6 <HAL_TIM_ConfigClockSource+0x19e>
 800e354:	2b60      	cmp	r3, #96	@ 0x60
 800e356:	d877      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e358:	2b50      	cmp	r3, #80	@ 0x50
 800e35a:	d03c      	beq.n	800e3d6 <HAL_TIM_ConfigClockSource+0x17e>
 800e35c:	2b50      	cmp	r3, #80	@ 0x50
 800e35e:	d873      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e360:	2b40      	cmp	r3, #64	@ 0x40
 800e362:	d058      	beq.n	800e416 <HAL_TIM_ConfigClockSource+0x1be>
 800e364:	2b40      	cmp	r3, #64	@ 0x40
 800e366:	d86f      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e368:	2b30      	cmp	r3, #48	@ 0x30
 800e36a:	d064      	beq.n	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e36c:	2b30      	cmp	r3, #48	@ 0x30
 800e36e:	d86b      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e370:	2b20      	cmp	r3, #32
 800e372:	d060      	beq.n	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e374:	2b20      	cmp	r3, #32
 800e376:	d867      	bhi.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d05c      	beq.n	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e37c:	2b10      	cmp	r3, #16
 800e37e:	d05a      	beq.n	800e436 <HAL_TIM_ConfigClockSource+0x1de>
 800e380:	e062      	b.n	800e448 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e392:	f000 fe8b 	bl	800f0ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e3a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	609a      	str	r2, [r3, #8]
      break;
 800e3ae:	e04f      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e3c0:	f000 fe74 	bl	800f0ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e3d2:	609a      	str	r2, [r3, #8]
      break;
 800e3d4:	e03c      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	f000 fde6 	bl	800efb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2150      	movs	r1, #80	@ 0x50
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 fe3f 	bl	800f072 <TIM_ITRx_SetConfig>
      break;
 800e3f4:	e02c      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e402:	461a      	mov	r2, r3
 800e404:	f000 fe05 	bl	800f012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2160      	movs	r1, #96	@ 0x60
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 fe2f 	bl	800f072 <TIM_ITRx_SetConfig>
      break;
 800e414:	e01c      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e422:	461a      	mov	r2, r3
 800e424:	f000 fdc6 	bl	800efb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2140      	movs	r1, #64	@ 0x40
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 fe1f 	bl	800f072 <TIM_ITRx_SetConfig>
      break;
 800e434:	e00c      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f000 fe16 	bl	800f072 <TIM_ITRx_SetConfig>
      break;
 800e446:	e003      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	73fb      	strb	r3, [r7, #15]
      break;
 800e44c:	e000      	b.n	800e450 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e44e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e460:	7bfb      	ldrb	r3, [r7, #15]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	00100070 	.word	0x00100070
 800e470:	00100060 	.word	0x00100060
 800e474:	00100050 	.word	0x00100050
 800e478:	00100040 	.word	0x00100040
 800e47c:	00100030 	.word	0x00100030
 800e480:	00100020 	.word	0x00100020

0800e484 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800e48c:	bf00      	nop
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4dc:	bf00      	nop
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	460b      	mov	r3, r1
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d101      	bne.n	800e554 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	e14a      	b.n	800e7ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	f040 80dd 	bne.w	800e71c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800e562:	7afb      	ldrb	r3, [r7, #11]
 800e564:	2b1f      	cmp	r3, #31
 800e566:	f200 80d6 	bhi.w	800e716 <HAL_TIM_RegisterCallback+0x1de>
 800e56a:	a201      	add	r2, pc, #4	@ (adr r2, 800e570 <HAL_TIM_RegisterCallback+0x38>)
 800e56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e570:	0800e5f1 	.word	0x0800e5f1
 800e574:	0800e5f9 	.word	0x0800e5f9
 800e578:	0800e601 	.word	0x0800e601
 800e57c:	0800e609 	.word	0x0800e609
 800e580:	0800e611 	.word	0x0800e611
 800e584:	0800e619 	.word	0x0800e619
 800e588:	0800e621 	.word	0x0800e621
 800e58c:	0800e629 	.word	0x0800e629
 800e590:	0800e631 	.word	0x0800e631
 800e594:	0800e639 	.word	0x0800e639
 800e598:	0800e641 	.word	0x0800e641
 800e59c:	0800e649 	.word	0x0800e649
 800e5a0:	0800e651 	.word	0x0800e651
 800e5a4:	0800e659 	.word	0x0800e659
 800e5a8:	0800e663 	.word	0x0800e663
 800e5ac:	0800e66d 	.word	0x0800e66d
 800e5b0:	0800e677 	.word	0x0800e677
 800e5b4:	0800e681 	.word	0x0800e681
 800e5b8:	0800e68b 	.word	0x0800e68b
 800e5bc:	0800e695 	.word	0x0800e695
 800e5c0:	0800e69f 	.word	0x0800e69f
 800e5c4:	0800e6a9 	.word	0x0800e6a9
 800e5c8:	0800e6b3 	.word	0x0800e6b3
 800e5cc:	0800e6bd 	.word	0x0800e6bd
 800e5d0:	0800e6c7 	.word	0x0800e6c7
 800e5d4:	0800e6d1 	.word	0x0800e6d1
 800e5d8:	0800e6db 	.word	0x0800e6db
 800e5dc:	0800e6e5 	.word	0x0800e6e5
 800e5e0:	0800e6ef 	.word	0x0800e6ef
 800e5e4:	0800e6f9 	.word	0x0800e6f9
 800e5e8:	0800e703 	.word	0x0800e703
 800e5ec:	0800e70d 	.word	0x0800e70d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e5f6:	e0f7      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e5fe:	e0f3      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e606:	e0ef      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e60e:	e0eb      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e616:	e0e7      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e61e:	e0e3      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e626:	e0df      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e62e:	e0db      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e636:	e0d7      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e63e:	e0d3      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e646:	e0cf      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e64e:	e0cb      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e656:	e0c7      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e660:	e0c2      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e66a:	e0bd      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800e674:	e0b8      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800e67e:	e0b3      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800e688:	e0ae      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e692:	e0a9      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e69c:	e0a4      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e6a6:	e09f      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e6b0:	e09a      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e6ba:	e095      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e6c4:	e090      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e6ce:	e08b      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e6d8:	e086      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e6e2:	e081      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e6ec:	e07c      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e6f6:	e077      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800e700:	e072      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e70a:	e06d      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e714:	e068      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	75fb      	strb	r3, [r7, #23]
        break;
 800e71a:	e065      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	d15d      	bne.n	800e7e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800e728:	7afb      	ldrb	r3, [r7, #11]
 800e72a:	2b0d      	cmp	r3, #13
 800e72c:	d857      	bhi.n	800e7de <HAL_TIM_RegisterCallback+0x2a6>
 800e72e:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <HAL_TIM_RegisterCallback+0x1fc>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e76d 	.word	0x0800e76d
 800e738:	0800e775 	.word	0x0800e775
 800e73c:	0800e77d 	.word	0x0800e77d
 800e740:	0800e785 	.word	0x0800e785
 800e744:	0800e78d 	.word	0x0800e78d
 800e748:	0800e795 	.word	0x0800e795
 800e74c:	0800e79d 	.word	0x0800e79d
 800e750:	0800e7a5 	.word	0x0800e7a5
 800e754:	0800e7ad 	.word	0x0800e7ad
 800e758:	0800e7b5 	.word	0x0800e7b5
 800e75c:	0800e7bd 	.word	0x0800e7bd
 800e760:	0800e7c5 	.word	0x0800e7c5
 800e764:	0800e7cd 	.word	0x0800e7cd
 800e768:	0800e7d5 	.word	0x0800e7d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e772:	e039      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e77a:	e035      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e782:	e031      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e78a:	e02d      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e792:	e029      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e79a:	e025      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e7a2:	e021      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e7aa:	e01d      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e7b2:	e019      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e7ba:	e015      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e7c2:	e011      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e7ca:	e00d      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e7d2:	e009      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e7dc:	e004      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	75fb      	strb	r3, [r7, #23]
        break;
 800e7e2:	e001      	b.n	800e7e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	371c      	adds	r7, #28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop

0800e7f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a4c      	ldr	r2, [pc, #304]	@ (800e93c <TIM_Base_SetConfig+0x144>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d017      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e816:	d013      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a49      	ldr	r2, [pc, #292]	@ (800e940 <TIM_Base_SetConfig+0x148>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d00f      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a48      	ldr	r2, [pc, #288]	@ (800e944 <TIM_Base_SetConfig+0x14c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d00b      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a47      	ldr	r2, [pc, #284]	@ (800e948 <TIM_Base_SetConfig+0x150>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d007      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a46      	ldr	r2, [pc, #280]	@ (800e94c <TIM_Base_SetConfig+0x154>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d003      	beq.n	800e840 <TIM_Base_SetConfig+0x48>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4a45      	ldr	r2, [pc, #276]	@ (800e950 <TIM_Base_SetConfig+0x158>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d108      	bne.n	800e852 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	4313      	orrs	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a39      	ldr	r2, [pc, #228]	@ (800e93c <TIM_Base_SetConfig+0x144>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d023      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e860:	d01f      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a36      	ldr	r2, [pc, #216]	@ (800e940 <TIM_Base_SetConfig+0x148>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d01b      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a35      	ldr	r2, [pc, #212]	@ (800e944 <TIM_Base_SetConfig+0x14c>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d017      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a34      	ldr	r2, [pc, #208]	@ (800e948 <TIM_Base_SetConfig+0x150>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d013      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a33      	ldr	r2, [pc, #204]	@ (800e94c <TIM_Base_SetConfig+0x154>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d00f      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a33      	ldr	r2, [pc, #204]	@ (800e954 <TIM_Base_SetConfig+0x15c>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d00b      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a32      	ldr	r2, [pc, #200]	@ (800e958 <TIM_Base_SetConfig+0x160>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d007      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a31      	ldr	r2, [pc, #196]	@ (800e95c <TIM_Base_SetConfig+0x164>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d003      	beq.n	800e8a2 <TIM_Base_SetConfig+0xaa>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a2c      	ldr	r2, [pc, #176]	@ (800e950 <TIM_Base_SetConfig+0x158>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d108      	bne.n	800e8b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	689a      	ldr	r2, [r3, #8]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a18      	ldr	r2, [pc, #96]	@ (800e93c <TIM_Base_SetConfig+0x144>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d013      	beq.n	800e908 <TIM_Base_SetConfig+0x110>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a1a      	ldr	r2, [pc, #104]	@ (800e94c <TIM_Base_SetConfig+0x154>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d00f      	beq.n	800e908 <TIM_Base_SetConfig+0x110>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a1a      	ldr	r2, [pc, #104]	@ (800e954 <TIM_Base_SetConfig+0x15c>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d00b      	beq.n	800e908 <TIM_Base_SetConfig+0x110>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a19      	ldr	r2, [pc, #100]	@ (800e958 <TIM_Base_SetConfig+0x160>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d007      	beq.n	800e908 <TIM_Base_SetConfig+0x110>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a18      	ldr	r2, [pc, #96]	@ (800e95c <TIM_Base_SetConfig+0x164>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d003      	beq.n	800e908 <TIM_Base_SetConfig+0x110>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a13      	ldr	r2, [pc, #76]	@ (800e950 <TIM_Base_SetConfig+0x158>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d103      	bne.n	800e910 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	691a      	ldr	r2, [r3, #16]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d105      	bne.n	800e92e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	f023 0201 	bic.w	r2, r3, #1
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	611a      	str	r2, [r3, #16]
  }
}
 800e92e:	bf00      	nop
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	40012c00 	.word	0x40012c00
 800e940:	40000400 	.word	0x40000400
 800e944:	40000800 	.word	0x40000800
 800e948:	40000c00 	.word	0x40000c00
 800e94c:	40013400 	.word	0x40013400
 800e950:	40015000 	.word	0x40015000
 800e954:	40014000 	.word	0x40014000
 800e958:	40014400 	.word	0x40014400
 800e95c:	40014800 	.word	0x40014800

0800e960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e960:	b480      	push	{r7}
 800e962:	b087      	sub	sp, #28
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a1b      	ldr	r3, [r3, #32]
 800e974:	f023 0201 	bic.w	r2, r3, #1
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0303 	bic.w	r3, r3, #3
 800e99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f023 0302 	bic.w	r3, r3, #2
 800e9ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a30      	ldr	r2, [pc, #192]	@ (800ea7c <TIM_OC1_SetConfig+0x11c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d013      	beq.n	800e9e8 <TIM_OC1_SetConfig+0x88>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a2f      	ldr	r2, [pc, #188]	@ (800ea80 <TIM_OC1_SetConfig+0x120>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d00f      	beq.n	800e9e8 <TIM_OC1_SetConfig+0x88>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a2e      	ldr	r2, [pc, #184]	@ (800ea84 <TIM_OC1_SetConfig+0x124>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d00b      	beq.n	800e9e8 <TIM_OC1_SetConfig+0x88>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a2d      	ldr	r2, [pc, #180]	@ (800ea88 <TIM_OC1_SetConfig+0x128>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d007      	beq.n	800e9e8 <TIM_OC1_SetConfig+0x88>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a2c      	ldr	r2, [pc, #176]	@ (800ea8c <TIM_OC1_SetConfig+0x12c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d003      	beq.n	800e9e8 <TIM_OC1_SetConfig+0x88>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a2b      	ldr	r2, [pc, #172]	@ (800ea90 <TIM_OC1_SetConfig+0x130>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d10c      	bne.n	800ea02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f023 0308 	bic.w	r3, r3, #8
 800e9ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	f023 0304 	bic.w	r3, r3, #4
 800ea00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a1d      	ldr	r2, [pc, #116]	@ (800ea7c <TIM_OC1_SetConfig+0x11c>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d013      	beq.n	800ea32 <TIM_OC1_SetConfig+0xd2>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a1c      	ldr	r2, [pc, #112]	@ (800ea80 <TIM_OC1_SetConfig+0x120>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d00f      	beq.n	800ea32 <TIM_OC1_SetConfig+0xd2>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a1b      	ldr	r2, [pc, #108]	@ (800ea84 <TIM_OC1_SetConfig+0x124>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d00b      	beq.n	800ea32 <TIM_OC1_SetConfig+0xd2>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a1a      	ldr	r2, [pc, #104]	@ (800ea88 <TIM_OC1_SetConfig+0x128>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d007      	beq.n	800ea32 <TIM_OC1_SetConfig+0xd2>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a19      	ldr	r2, [pc, #100]	@ (800ea8c <TIM_OC1_SetConfig+0x12c>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d003      	beq.n	800ea32 <TIM_OC1_SetConfig+0xd2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a18      	ldr	r2, [pc, #96]	@ (800ea90 <TIM_OC1_SetConfig+0x130>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d111      	bne.n	800ea56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	693a      	ldr	r2, [r7, #16]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	621a      	str	r2, [r3, #32]
}
 800ea70:	bf00      	nop
 800ea72:	371c      	adds	r7, #28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	40012c00 	.word	0x40012c00
 800ea80:	40013400 	.word	0x40013400
 800ea84:	40014000 	.word	0x40014000
 800ea88:	40014400 	.word	0x40014400
 800ea8c:	40014800 	.word	0x40014800
 800ea90:	40015000 	.word	0x40015000

0800ea94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	f023 0210 	bic.w	r2, r3, #16
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	021b      	lsls	r3, r3, #8
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	4313      	orrs	r3, r2
 800eada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f023 0320 	bic.w	r3, r3, #32
 800eae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	011b      	lsls	r3, r3, #4
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a2c      	ldr	r2, [pc, #176]	@ (800eba4 <TIM_OC2_SetConfig+0x110>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d007      	beq.n	800eb08 <TIM_OC2_SetConfig+0x74>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4a2b      	ldr	r2, [pc, #172]	@ (800eba8 <TIM_OC2_SetConfig+0x114>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d003      	beq.n	800eb08 <TIM_OC2_SetConfig+0x74>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a2a      	ldr	r2, [pc, #168]	@ (800ebac <TIM_OC2_SetConfig+0x118>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d10d      	bne.n	800eb24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	011b      	lsls	r3, r3, #4
 800eb16:	697a      	ldr	r2, [r7, #20]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a1f      	ldr	r2, [pc, #124]	@ (800eba4 <TIM_OC2_SetConfig+0x110>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d013      	beq.n	800eb54 <TIM_OC2_SetConfig+0xc0>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a1e      	ldr	r2, [pc, #120]	@ (800eba8 <TIM_OC2_SetConfig+0x114>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00f      	beq.n	800eb54 <TIM_OC2_SetConfig+0xc0>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a1e      	ldr	r2, [pc, #120]	@ (800ebb0 <TIM_OC2_SetConfig+0x11c>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d00b      	beq.n	800eb54 <TIM_OC2_SetConfig+0xc0>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a1d      	ldr	r2, [pc, #116]	@ (800ebb4 <TIM_OC2_SetConfig+0x120>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d007      	beq.n	800eb54 <TIM_OC2_SetConfig+0xc0>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a1c      	ldr	r2, [pc, #112]	@ (800ebb8 <TIM_OC2_SetConfig+0x124>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d003      	beq.n	800eb54 <TIM_OC2_SetConfig+0xc0>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a17      	ldr	r2, [pc, #92]	@ (800ebac <TIM_OC2_SetConfig+0x118>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d113      	bne.n	800eb7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	693a      	ldr	r2, [r7, #16]
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	693a      	ldr	r2, [r7, #16]
 800eb80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	697a      	ldr	r2, [r7, #20]
 800eb94:	621a      	str	r2, [r3, #32]
}
 800eb96:	bf00      	nop
 800eb98:	371c      	adds	r7, #28
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	40012c00 	.word	0x40012c00
 800eba8:	40013400 	.word	0x40013400
 800ebac:	40015000 	.word	0x40015000
 800ebb0:	40014000 	.word	0x40014000
 800ebb4:	40014400 	.word	0x40014400
 800ebb8:	40014800 	.word	0x40014800

0800ebbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b087      	sub	sp, #28
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a1b      	ldr	r3, [r3, #32]
 800ebd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	69db      	ldr	r3, [r3, #28]
 800ebe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ebea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f023 0303 	bic.w	r3, r3, #3
 800ebf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	021b      	lsls	r3, r3, #8
 800ec10:	697a      	ldr	r2, [r7, #20]
 800ec12:	4313      	orrs	r3, r2
 800ec14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a2b      	ldr	r2, [pc, #172]	@ (800ecc8 <TIM_OC3_SetConfig+0x10c>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d007      	beq.n	800ec2e <TIM_OC3_SetConfig+0x72>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a2a      	ldr	r2, [pc, #168]	@ (800eccc <TIM_OC3_SetConfig+0x110>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d003      	beq.n	800ec2e <TIM_OC3_SetConfig+0x72>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a29      	ldr	r2, [pc, #164]	@ (800ecd0 <TIM_OC3_SetConfig+0x114>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d10d      	bne.n	800ec4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	021b      	lsls	r3, r3, #8
 800ec3c:	697a      	ldr	r2, [r7, #20]
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a1e      	ldr	r2, [pc, #120]	@ (800ecc8 <TIM_OC3_SetConfig+0x10c>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d013      	beq.n	800ec7a <TIM_OC3_SetConfig+0xbe>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a1d      	ldr	r2, [pc, #116]	@ (800eccc <TIM_OC3_SetConfig+0x110>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d00f      	beq.n	800ec7a <TIM_OC3_SetConfig+0xbe>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd4 <TIM_OC3_SetConfig+0x118>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d00b      	beq.n	800ec7a <TIM_OC3_SetConfig+0xbe>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4a1c      	ldr	r2, [pc, #112]	@ (800ecd8 <TIM_OC3_SetConfig+0x11c>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d007      	beq.n	800ec7a <TIM_OC3_SetConfig+0xbe>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a1b      	ldr	r2, [pc, #108]	@ (800ecdc <TIM_OC3_SetConfig+0x120>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d003      	beq.n	800ec7a <TIM_OC3_SetConfig+0xbe>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a16      	ldr	r2, [pc, #88]	@ (800ecd0 <TIM_OC3_SetConfig+0x114>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d113      	bne.n	800eca2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	011b      	lsls	r3, r3, #4
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	699b      	ldr	r3, [r3, #24]
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	693a      	ldr	r2, [r7, #16]
 800eca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	697a      	ldr	r2, [r7, #20]
 800ecba:	621a      	str	r2, [r3, #32]
}
 800ecbc:	bf00      	nop
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	40012c00 	.word	0x40012c00
 800eccc:	40013400 	.word	0x40013400
 800ecd0:	40015000 	.word	0x40015000
 800ecd4:	40014000 	.word	0x40014000
 800ecd8:	40014400 	.word	0x40014400
 800ecdc:	40014800 	.word	0x40014800

0800ece0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b087      	sub	sp, #28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6a1b      	ldr	r3, [r3, #32]
 800ecf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	69db      	ldr	r3, [r3, #28]
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	021b      	lsls	r3, r3, #8
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	031b      	lsls	r3, r3, #12
 800ed36:	697a      	ldr	r2, [r7, #20]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a2c      	ldr	r2, [pc, #176]	@ (800edf0 <TIM_OC4_SetConfig+0x110>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d007      	beq.n	800ed54 <TIM_OC4_SetConfig+0x74>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4a2b      	ldr	r2, [pc, #172]	@ (800edf4 <TIM_OC4_SetConfig+0x114>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d003      	beq.n	800ed54 <TIM_OC4_SetConfig+0x74>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a2a      	ldr	r2, [pc, #168]	@ (800edf8 <TIM_OC4_SetConfig+0x118>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d10d      	bne.n	800ed70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ed5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	031b      	lsls	r3, r3, #12
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a1f      	ldr	r2, [pc, #124]	@ (800edf0 <TIM_OC4_SetConfig+0x110>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d013      	beq.n	800eda0 <TIM_OC4_SetConfig+0xc0>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a1e      	ldr	r2, [pc, #120]	@ (800edf4 <TIM_OC4_SetConfig+0x114>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d00f      	beq.n	800eda0 <TIM_OC4_SetConfig+0xc0>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a1e      	ldr	r2, [pc, #120]	@ (800edfc <TIM_OC4_SetConfig+0x11c>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d00b      	beq.n	800eda0 <TIM_OC4_SetConfig+0xc0>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a1d      	ldr	r2, [pc, #116]	@ (800ee00 <TIM_OC4_SetConfig+0x120>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d007      	beq.n	800eda0 <TIM_OC4_SetConfig+0xc0>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a1c      	ldr	r2, [pc, #112]	@ (800ee04 <TIM_OC4_SetConfig+0x124>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d003      	beq.n	800eda0 <TIM_OC4_SetConfig+0xc0>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a17      	ldr	r2, [pc, #92]	@ (800edf8 <TIM_OC4_SetConfig+0x118>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d113      	bne.n	800edc8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eda6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800edae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	019b      	lsls	r3, r3, #6
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	4313      	orrs	r3, r2
 800edba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	019b      	lsls	r3, r3, #6
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	4313      	orrs	r3, r2
 800edc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	697a      	ldr	r2, [r7, #20]
 800ede0:	621a      	str	r2, [r3, #32]
}
 800ede2:	bf00      	nop
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	40012c00 	.word	0x40012c00
 800edf4:	40013400 	.word	0x40013400
 800edf8:	40015000 	.word	0x40015000
 800edfc:	40014000 	.word	0x40014000
 800ee00:	40014400 	.word	0x40014400
 800ee04:	40014800 	.word	0x40014800

0800ee08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4313      	orrs	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	041b      	lsls	r3, r3, #16
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a19      	ldr	r2, [pc, #100]	@ (800eec4 <TIM_OC5_SetConfig+0xbc>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d013      	beq.n	800ee8a <TIM_OC5_SetConfig+0x82>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a18      	ldr	r2, [pc, #96]	@ (800eec8 <TIM_OC5_SetConfig+0xc0>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d00f      	beq.n	800ee8a <TIM_OC5_SetConfig+0x82>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a17      	ldr	r2, [pc, #92]	@ (800eecc <TIM_OC5_SetConfig+0xc4>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d00b      	beq.n	800ee8a <TIM_OC5_SetConfig+0x82>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a16      	ldr	r2, [pc, #88]	@ (800eed0 <TIM_OC5_SetConfig+0xc8>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d007      	beq.n	800ee8a <TIM_OC5_SetConfig+0x82>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a15      	ldr	r2, [pc, #84]	@ (800eed4 <TIM_OC5_SetConfig+0xcc>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d003      	beq.n	800ee8a <TIM_OC5_SetConfig+0x82>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a14      	ldr	r2, [pc, #80]	@ (800eed8 <TIM_OC5_SetConfig+0xd0>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d109      	bne.n	800ee9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	695b      	ldr	r3, [r3, #20]
 800ee96:	021b      	lsls	r3, r3, #8
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	693a      	ldr	r2, [r7, #16]
 800eeb6:	621a      	str	r2, [r3, #32]
}
 800eeb8:	bf00      	nop
 800eeba:	371c      	adds	r7, #28
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	40012c00 	.word	0x40012c00
 800eec8:	40013400 	.word	0x40013400
 800eecc:	40014000 	.word	0x40014000
 800eed0:	40014400 	.word	0x40014400
 800eed4:	40014800 	.word	0x40014800
 800eed8:	40015000 	.word	0x40015000

0800eedc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eedc:	b480      	push	{r7}
 800eede:	b087      	sub	sp, #28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a1b      	ldr	r3, [r3, #32]
 800eeea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a1b      	ldr	r3, [r3, #32]
 800eef0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ef0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	021b      	lsls	r3, r3, #8
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	051b      	lsls	r3, r3, #20
 800ef2a:	693a      	ldr	r2, [r7, #16]
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a1a      	ldr	r2, [pc, #104]	@ (800ef9c <TIM_OC6_SetConfig+0xc0>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d013      	beq.n	800ef60 <TIM_OC6_SetConfig+0x84>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a19      	ldr	r2, [pc, #100]	@ (800efa0 <TIM_OC6_SetConfig+0xc4>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d00f      	beq.n	800ef60 <TIM_OC6_SetConfig+0x84>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a18      	ldr	r2, [pc, #96]	@ (800efa4 <TIM_OC6_SetConfig+0xc8>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d00b      	beq.n	800ef60 <TIM_OC6_SetConfig+0x84>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a17      	ldr	r2, [pc, #92]	@ (800efa8 <TIM_OC6_SetConfig+0xcc>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d007      	beq.n	800ef60 <TIM_OC6_SetConfig+0x84>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a16      	ldr	r2, [pc, #88]	@ (800efac <TIM_OC6_SetConfig+0xd0>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d003      	beq.n	800ef60 <TIM_OC6_SetConfig+0x84>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a15      	ldr	r2, [pc, #84]	@ (800efb0 <TIM_OC6_SetConfig+0xd4>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d109      	bne.n	800ef74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	029b      	lsls	r3, r3, #10
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	621a      	str	r2, [r3, #32]
}
 800ef8e:	bf00      	nop
 800ef90:	371c      	adds	r7, #28
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	40012c00 	.word	0x40012c00
 800efa0:	40013400 	.word	0x40013400
 800efa4:	40014000 	.word	0x40014000
 800efa8:	40014400 	.word	0x40014400
 800efac:	40014800 	.word	0x40014800
 800efb0:	40015000 	.word	0x40015000

0800efb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b087      	sub	sp, #28
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6a1b      	ldr	r3, [r3, #32]
 800efc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6a1b      	ldr	r3, [r3, #32]
 800efca:	f023 0201 	bic.w	r2, r3, #1
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	699b      	ldr	r3, [r3, #24]
 800efd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800efde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	011b      	lsls	r3, r3, #4
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f023 030a 	bic.w	r3, r3, #10
 800eff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eff2:	697a      	ldr	r2, [r7, #20]
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	693a      	ldr	r2, [r7, #16]
 800effe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	697a      	ldr	r2, [r7, #20]
 800f004:	621a      	str	r2, [r3, #32]
}
 800f006:	bf00      	nop
 800f008:	371c      	adds	r7, #28
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr

0800f012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f012:	b480      	push	{r7}
 800f014:	b087      	sub	sp, #28
 800f016:	af00      	add	r7, sp, #0
 800f018:	60f8      	str	r0, [r7, #12]
 800f01a:	60b9      	str	r1, [r7, #8]
 800f01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6a1b      	ldr	r3, [r3, #32]
 800f022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	6a1b      	ldr	r3, [r3, #32]
 800f028:	f023 0210 	bic.w	r2, r3, #16
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	699b      	ldr	r3, [r3, #24]
 800f034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f03c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	031b      	lsls	r3, r3, #12
 800f042:	693a      	ldr	r2, [r7, #16]
 800f044:	4313      	orrs	r3, r2
 800f046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f04e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	011b      	lsls	r3, r3, #4
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	4313      	orrs	r3, r2
 800f058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	697a      	ldr	r2, [r7, #20]
 800f064:	621a      	str	r2, [r3, #32]
}
 800f066:	bf00      	nop
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f072:	b480      	push	{r7}
 800f074:	b085      	sub	sp, #20
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f08c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	4313      	orrs	r3, r2
 800f094:	f043 0307 	orr.w	r3, r3, #7
 800f098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68fa      	ldr	r2, [r7, #12]
 800f09e:	609a      	str	r2, [r3, #8]
}
 800f0a0:	bf00      	nop
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
 800f0b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f0c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	021a      	lsls	r2, r3, #8
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	431a      	orrs	r2, r3
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	697a      	ldr	r2, [r7, #20]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	609a      	str	r2, [r3, #8]
}
 800f0e0:	bf00      	nop
 800f0e2:	371c      	adds	r7, #28
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	f003 031f 	and.w	r3, r3, #31
 800f0fe:	2201      	movs	r2, #1
 800f100:	fa02 f303 	lsl.w	r3, r2, r3
 800f104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6a1a      	ldr	r2, [r3, #32]
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	43db      	mvns	r3, r3
 800f10e:	401a      	ands	r2, r3
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6a1a      	ldr	r2, [r3, #32]
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f003 031f 	and.w	r3, r3, #31
 800f11e:	6879      	ldr	r1, [r7, #4]
 800f120:	fa01 f303 	lsl.w	r3, r1, r3
 800f124:	431a      	orrs	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	621a      	str	r2, [r3, #32]
}
 800f12a:	bf00      	nop
 800f12c:	371c      	adds	r7, #28
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
	...

0800f138 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a26      	ldr	r2, [pc, #152]	@ (800f1dc <TIM_ResetCallback+0xa4>)
 800f144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a25      	ldr	r2, [pc, #148]	@ (800f1e0 <TIM_ResetCallback+0xa8>)
 800f14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a24      	ldr	r2, [pc, #144]	@ (800f1e4 <TIM_ResetCallback+0xac>)
 800f154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a23      	ldr	r2, [pc, #140]	@ (800f1e8 <TIM_ResetCallback+0xb0>)
 800f15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a22      	ldr	r2, [pc, #136]	@ (800f1ec <TIM_ResetCallback+0xb4>)
 800f164:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a21      	ldr	r2, [pc, #132]	@ (800f1f0 <TIM_ResetCallback+0xb8>)
 800f16c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4a20      	ldr	r2, [pc, #128]	@ (800f1f4 <TIM_ResetCallback+0xbc>)
 800f174:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4a1f      	ldr	r2, [pc, #124]	@ (800f1f8 <TIM_ResetCallback+0xc0>)
 800f17c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a1e      	ldr	r2, [pc, #120]	@ (800f1fc <TIM_ResetCallback+0xc4>)
 800f184:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a1d      	ldr	r2, [pc, #116]	@ (800f200 <TIM_ResetCallback+0xc8>)
 800f18c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a1c      	ldr	r2, [pc, #112]	@ (800f204 <TIM_ResetCallback+0xcc>)
 800f194:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a1b      	ldr	r2, [pc, #108]	@ (800f208 <TIM_ResetCallback+0xd0>)
 800f19c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a1a      	ldr	r2, [pc, #104]	@ (800f20c <TIM_ResetCallback+0xd4>)
 800f1a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a19      	ldr	r2, [pc, #100]	@ (800f210 <TIM_ResetCallback+0xd8>)
 800f1ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a18      	ldr	r2, [pc, #96]	@ (800f214 <TIM_ResetCallback+0xdc>)
 800f1b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a17      	ldr	r2, [pc, #92]	@ (800f218 <TIM_ResetCallback+0xe0>)
 800f1bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a16      	ldr	r2, [pc, #88]	@ (800f21c <TIM_ResetCallback+0xe4>)
 800f1c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a15      	ldr	r2, [pc, #84]	@ (800f220 <TIM_ResetCallback+0xe8>)
 800f1cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	08007fb5 	.word	0x08007fb5
 800f1e0:	0800e485 	.word	0x0800e485
 800f1e4:	0800e4fd 	.word	0x0800e4fd
 800f1e8:	0800e511 	.word	0x0800e511
 800f1ec:	0800e4ad 	.word	0x0800e4ad
 800f1f0:	0800e4c1 	.word	0x0800e4c1
 800f1f4:	0800e499 	.word	0x0800e499
 800f1f8:	0800e4d5 	.word	0x0800e4d5
 800f1fc:	0800e4e9 	.word	0x0800e4e9
 800f200:	0800e525 	.word	0x0800e525
 800f204:	0800f479 	.word	0x0800f479
 800f208:	0800f48d 	.word	0x0800f48d
 800f20c:	0800f4a1 	.word	0x0800f4a1
 800f210:	0800f4b5 	.word	0x0800f4b5
 800f214:	0800f4c9 	.word	0x0800f4c9
 800f218:	0800f4dd 	.word	0x0800f4dd
 800f21c:	0800f4f1 	.word	0x0800f4f1
 800f220:	0800f505 	.word	0x0800f505

0800f224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f234:	2b01      	cmp	r3, #1
 800f236:	d101      	bne.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f238:	2302      	movs	r3, #2
 800f23a:	e074      	b.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2202      	movs	r2, #2
 800f248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a34      	ldr	r2, [pc, #208]	@ (800f334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d009      	beq.n	800f27a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4a33      	ldr	r2, [pc, #204]	@ (800f338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d004      	beq.n	800f27a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a31      	ldr	r2, [pc, #196]	@ (800f33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d108      	bne.n	800f28c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	68fa      	ldr	r2, [r7, #12]
 800f288:	4313      	orrs	r3, r2
 800f28a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a21      	ldr	r2, [pc, #132]	@ (800f334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d022      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2bc:	d01d      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4a1f      	ldr	r2, [pc, #124]	@ (800f340 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d018      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800f344 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d013      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4a1c      	ldr	r2, [pc, #112]	@ (800f348 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d00e      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a15      	ldr	r2, [pc, #84]	@ (800f338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d009      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4a18      	ldr	r2, [pc, #96]	@ (800f34c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d004      	beq.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a11      	ldr	r2, [pc, #68]	@ (800f33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d10c      	bne.n	800f314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	4313      	orrs	r3, r2
 800f30a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	40012c00 	.word	0x40012c00
 800f338:	40013400 	.word	0x40013400
 800f33c:	40015000 	.word	0x40015000
 800f340:	40000400 	.word	0x40000400
 800f344:	40000800 	.word	0x40000800
 800f348:	40000c00 	.word	0x40000c00
 800f34c:	40014000 	.word	0x40014000

0800f350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f35a:	2300      	movs	r3, #0
 800f35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f364:	2b01      	cmp	r3, #1
 800f366:	d101      	bne.n	800f36c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f368:	2302      	movs	r3, #2
 800f36a:	e078      	b.n	800f45e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	041b      	lsls	r3, r3, #16
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	69db      	ldr	r3, [r3, #28]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a1c      	ldr	r2, [pc, #112]	@ (800f46c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d009      	beq.n	800f412 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4a1b      	ldr	r2, [pc, #108]	@ (800f470 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d004      	beq.n	800f412 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a19      	ldr	r2, [pc, #100]	@ (800f474 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d11c      	bne.n	800f44c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41c:	051b      	lsls	r3, r3, #20
 800f41e:	4313      	orrs	r3, r2
 800f420:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	6a1b      	ldr	r3, [r3, #32]
 800f42c:	4313      	orrs	r3, r2
 800f42e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f43a:	4313      	orrs	r3, r2
 800f43c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f448:	4313      	orrs	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	40012c00 	.word	0x40012c00
 800f470:	40013400 	.word	0x40013400
 800f474:	40015000 	.word	0x40015000

0800f478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f4e4:	bf00      	nop
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f50c:	bf00      	nop
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d101      	bne.n	800f52a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	e050      	b.n	800f5cc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f530:	2b00      	cmp	r3, #0
 800f532:	d114      	bne.n	800f55e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fd65 	bl	801000c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d103      	bne.n	800f554 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a21      	ldr	r2, [pc, #132]	@ (800f5d4 <HAL_UART_Init+0xbc>)
 800f550:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2224      	movs	r2, #36	@ 0x24
 800f562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f022 0201 	bic.w	r2, r2, #1
 800f574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d002      	beq.n	800f584 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f001 f892 	bl	80106a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 fd93 	bl	80100b0 <UART_SetConfig>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d101      	bne.n	800f594 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e01b      	b.n	800f5cc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f5a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	689a      	ldr	r2, [r3, #8]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f5b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f042 0201 	orr.w	r2, r2, #1
 800f5c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f001 f911 	bl	80107ec <UART_CheckIdleState>
 800f5ca:	4603      	mov	r3, r0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	080099b9 	.word	0x080099b9

0800f5d8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b087      	sub	sp, #28
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d109      	bne.n	800f604 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800f600:	2301      	movs	r3, #1
 800f602:	e09c      	b.n	800f73e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f60a:	2b20      	cmp	r3, #32
 800f60c:	d16c      	bne.n	800f6e8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800f60e:	7afb      	ldrb	r3, [r7, #11]
 800f610:	2b0c      	cmp	r3, #12
 800f612:	d85e      	bhi.n	800f6d2 <HAL_UART_RegisterCallback+0xfa>
 800f614:	a201      	add	r2, pc, #4	@ (adr r2, 800f61c <HAL_UART_RegisterCallback+0x44>)
 800f616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61a:	bf00      	nop
 800f61c:	0800f651 	.word	0x0800f651
 800f620:	0800f65b 	.word	0x0800f65b
 800f624:	0800f665 	.word	0x0800f665
 800f628:	0800f66f 	.word	0x0800f66f
 800f62c:	0800f679 	.word	0x0800f679
 800f630:	0800f683 	.word	0x0800f683
 800f634:	0800f68d 	.word	0x0800f68d
 800f638:	0800f697 	.word	0x0800f697
 800f63c:	0800f6a1 	.word	0x0800f6a1
 800f640:	0800f6ab 	.word	0x0800f6ab
 800f644:	0800f6b5 	.word	0x0800f6b5
 800f648:	0800f6bf 	.word	0x0800f6bf
 800f64c:	0800f6c9 	.word	0x0800f6c9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f658:	e070      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f662:	e06b      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f66c:	e066      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f676:	e061      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f680:	e05c      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f68a:	e057      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f694:	e052      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f69e:	e04d      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f6a8:	e048      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f6b2:	e043      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f6bc:	e03e      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f6c6:	e039      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f6d0:	e034      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	75fb      	strb	r3, [r7, #23]
        break;
 800f6e6:	e029      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d11a      	bne.n	800f728 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800f6f2:	7afb      	ldrb	r3, [r7, #11]
 800f6f4:	2b0b      	cmp	r3, #11
 800f6f6:	d002      	beq.n	800f6fe <HAL_UART_RegisterCallback+0x126>
 800f6f8:	2b0c      	cmp	r3, #12
 800f6fa:	d005      	beq.n	800f708 <HAL_UART_RegisterCallback+0x130>
 800f6fc:	e009      	b.n	800f712 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f706:	e019      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f710:	e014      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f718:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	75fb      	strb	r3, [r7, #23]
        break;
 800f726:	e009      	b.n	800f73c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f72e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800f738:	2301      	movs	r3, #1
 800f73a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f73e:	4618      	mov	r0, r3
 800f740:	371c      	adds	r7, #28
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop

0800f74c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	@ 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	4613      	mov	r3, r2
 800f758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f760:	2b20      	cmp	r3, #32
 800f762:	d137      	bne.n	800f7d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <HAL_UART_Receive_DMA+0x24>
 800f76a:	88fb      	ldrh	r3, [r7, #6]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e030      	b.n	800f7d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a18      	ldr	r2, [pc, #96]	@ (800f7e0 <HAL_UART_Receive_DMA+0x94>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d01f      	beq.n	800f7c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d018      	beq.n	800f7c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	e853 3f00 	ldrex	r3, [r3]
 800f79e:	613b      	str	r3, [r7, #16]
   return(result);
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f7a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b0:	623b      	str	r3, [r7, #32]
 800f7b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	69f9      	ldr	r1, [r7, #28]
 800f7b6:	6a3a      	ldr	r2, [r7, #32]
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e6      	bne.n	800f792 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	68b9      	ldr	r1, [r7, #8]
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f001 f926 	bl	8010a1c <UART_Start_Receive_DMA>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	e000      	b.n	800f7d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f7d4:	2302      	movs	r3, #2
  }
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3728      	adds	r7, #40	@ 0x28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	40008000 	.word	0x40008000

0800f7e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b0ba      	sub	sp, #232	@ 0xe8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	69db      	ldr	r3, [r3, #28]
 800f7f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f80a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f80e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f812:	4013      	ands	r3, r2
 800f814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d11b      	bne.n	800f858 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f824:	f003 0320 	and.w	r3, r3, #32
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d015      	beq.n	800f858 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f830:	f003 0320 	and.w	r3, r3, #32
 800f834:	2b00      	cmp	r3, #0
 800f836:	d105      	bne.n	800f844 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f83c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d009      	beq.n	800f858 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f000 8312 	beq.w	800fe72 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	4798      	blx	r3
      }
      return;
 800f856:	e30c      	b.n	800fe72 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f000 8129 	beq.w	800fab4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f862:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f866:	4b90      	ldr	r3, [pc, #576]	@ (800faa8 <HAL_UART_IRQHandler+0x2c4>)
 800f868:	4013      	ands	r3, r2
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f86e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f872:	4b8e      	ldr	r3, [pc, #568]	@ (800faac <HAL_UART_IRQHandler+0x2c8>)
 800f874:	4013      	ands	r3, r2
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 811c 	beq.w	800fab4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	2b00      	cmp	r3, #0
 800f886:	d011      	beq.n	800f8ac <HAL_UART_IRQHandler+0xc8>
 800f888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2201      	movs	r2, #1
 800f89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8a2:	f043 0201 	orr.w	r2, r3, #1
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d011      	beq.n	800f8dc <HAL_UART_IRQHandler+0xf8>
 800f8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00b      	beq.n	800f8dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8d2:	f043 0204 	orr.w	r2, r3, #4
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d011      	beq.n	800f90c <HAL_UART_IRQHandler+0x128>
 800f8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8ec:	f003 0301 	and.w	r3, r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00b      	beq.n	800f90c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2204      	movs	r2, #4
 800f8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f902:	f043 0202 	orr.w	r2, r3, #2
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f910:	f003 0308 	and.w	r3, r3, #8
 800f914:	2b00      	cmp	r3, #0
 800f916:	d017      	beq.n	800f948 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f91c:	f003 0320 	and.w	r3, r3, #32
 800f920:	2b00      	cmp	r3, #0
 800f922:	d105      	bne.n	800f930 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f924:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f928:	4b5f      	ldr	r3, [pc, #380]	@ (800faa8 <HAL_UART_IRQHandler+0x2c4>)
 800f92a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00b      	beq.n	800f948 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2208      	movs	r2, #8
 800f936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f93e:	f043 0208 	orr.w	r2, r3, #8
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f950:	2b00      	cmp	r3, #0
 800f952:	d012      	beq.n	800f97a <HAL_UART_IRQHandler+0x196>
 800f954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f958:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00c      	beq.n	800f97a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f970:	f043 0220 	orr.w	r2, r3, #32
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 8278 	beq.w	800fe76 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f98a:	f003 0320 	and.w	r3, r3, #32
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d013      	beq.n	800f9ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f996:	f003 0320 	and.w	r3, r3, #32
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d105      	bne.n	800f9aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f99e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d007      	beq.n	800f9ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d003      	beq.n	800f9ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ce:	2b40      	cmp	r3, #64	@ 0x40
 800f9d0:	d005      	beq.n	800f9de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f9d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d058      	beq.n	800fa90 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f001 f903 	bl	8010bea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ee:	2b40      	cmp	r3, #64	@ 0x40
 800f9f0:	d148      	bne.n	800fa84 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fa08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3308      	adds	r3, #8
 800fa1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fa1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fa22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fa2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa2e:	e841 2300 	strex	r3, r2, [r1]
 800fa32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1d9      	bne.n	800f9f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d017      	beq.n	800fa78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa4e:	4a18      	ldr	r2, [pc, #96]	@ (800fab0 <HAL_UART_IRQHandler+0x2cc>)
 800fa50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fc f8ab 	bl	800bbb4 <HAL_DMA_Abort_IT>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d01f      	beq.n	800faa4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fa72:	4610      	mov	r0, r2
 800fa74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa76:	e015      	b.n	800faa4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa82:	e00f      	b.n	800faa4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa8e:	e009      	b.n	800faa4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800faa2:	e1e8      	b.n	800fe76 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faa4:	bf00      	nop
    return;
 800faa6:	e1e6      	b.n	800fe76 <HAL_UART_IRQHandler+0x692>
 800faa8:	10000001 	.word	0x10000001
 800faac:	04000120 	.word	0x04000120
 800fab0:	08010eb5 	.word	0x08010eb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fab8:	2b01      	cmp	r3, #1
 800faba:	f040 8176 	bne.w	800fdaa <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fabe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fac2:	f003 0310 	and.w	r3, r3, #16
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 816f 	beq.w	800fdaa <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800facc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fad0:	f003 0310 	and.w	r3, r3, #16
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 8168 	beq.w	800fdaa <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2210      	movs	r2, #16
 800fae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faec:	2b40      	cmp	r3, #64	@ 0x40
 800faee:	f040 80dc 	bne.w	800fcaa <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fb00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 80b1 	beq.w	800fc6c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fb10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb14:	429a      	cmp	r2, r3
 800fb16:	f080 80a9 	bcs.w	800fc6c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f003 0320 	and.w	r3, r3, #32
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f040 8087 	bne.w	800fc46 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb44:	e853 3f00 	ldrex	r3, [r3]
 800fb48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fb4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fb6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb72:	e841 2300 	strex	r3, r2, [r1]
 800fb76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1da      	bne.n	800fb38 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb94:	f023 0301 	bic.w	r3, r3, #1
 800fb98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	3308      	adds	r3, #8
 800fba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fba6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fbaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fbae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fbb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e1      	bne.n	800fb82 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3308      	adds	r3, #8
 800fbc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbc8:	e853 3f00 	ldrex	r3, [r3]
 800fbcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fbce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3308      	adds	r3, #8
 800fbde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fbe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fbe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fbe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbea:	e841 2300 	strex	r3, r2, [r1]
 800fbee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fbf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1e3      	bne.n	800fbbe <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2220      	movs	r2, #32
 800fbfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fc12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc14:	f023 0310 	bic.w	r3, r3, #16
 800fc18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	461a      	mov	r2, r3
 800fc22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc26:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc2e:	e841 2300 	strex	r3, r2, [r1]
 800fc32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1e4      	bne.n	800fc04 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fb ff5e 	bl	800bb02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2202      	movs	r2, #2
 800fc4a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800fc5e:	b292      	uxth	r2, r2
 800fc60:	1a8a      	subs	r2, r1, r2
 800fc62:	b292      	uxth	r2, r2
 800fc64:	4611      	mov	r1, r2
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fc6a:	e106      	b.n	800fe7a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fc72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fc76:	429a      	cmp	r2, r3
 800fc78:	f040 80ff 	bne.w	800fe7a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 0320 	and.w	r3, r3, #32
 800fc8a:	2b20      	cmp	r3, #32
 800fc8c:	f040 80f5 	bne.w	800fe7a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2202      	movs	r2, #2
 800fc94:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fca2:	4611      	mov	r1, r2
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	4798      	blx	r3
      return;
 800fca8:	e0e7      	b.n	800fe7a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 80d9 	beq.w	800fe7e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800fccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f000 80d4 	beq.w	800fe7e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcde:	e853 3f00 	ldrex	r3, [r3]
 800fce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fcf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fcfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd00:	e841 2300 	strex	r3, r2, [r1]
 800fd04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1e4      	bne.n	800fcd6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3308      	adds	r3, #8
 800fd12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd16:	e853 3f00 	ldrex	r3, [r3]
 800fd1a:	623b      	str	r3, [r7, #32]
   return(result);
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd22:	f023 0301 	bic.w	r3, r3, #1
 800fd26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	3308      	adds	r3, #8
 800fd30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fd34:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd3c:	e841 2300 	strex	r3, r2, [r1]
 800fd40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1e1      	bne.n	800fd0c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2220      	movs	r2, #32
 800fd4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f023 0310 	bic.w	r3, r3, #16
 800fd70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fd7e:	61fb      	str	r3, [r7, #28]
 800fd80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd82:	69b9      	ldr	r1, [r7, #24]
 800fd84:	69fa      	ldr	r2, [r7, #28]
 800fd86:	e841 2300 	strex	r3, r2, [r1]
 800fd8a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e4      	bne.n	800fd5c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2202      	movs	r2, #2
 800fd96:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fd9e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800fda2:	4611      	mov	r1, r2
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fda8:	e069      	b.n	800fe7e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fdaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d010      	beq.n	800fdd8 <HAL_UART_IRQHandler+0x5f4>
 800fdb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d00a      	beq.n	800fdd8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fdca:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdd6:	e055      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d014      	beq.n	800fe0e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fde8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d105      	bne.n	800fdfc <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fdf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d008      	beq.n	800fe0e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d03e      	beq.n	800fe82 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	4798      	blx	r3
    }
    return;
 800fe0c:	e039      	b.n	800fe82 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fe0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d009      	beq.n	800fe2e <HAL_UART_IRQHandler+0x64a>
 800fe1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d003      	beq.n	800fe2e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f001 f858 	bl	8010edc <UART_EndTransmit_IT>
    return;
 800fe2c:	e02a      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fe2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00b      	beq.n	800fe52 <HAL_UART_IRQHandler+0x66e>
 800fe3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d005      	beq.n	800fe52 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe50:	e018      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d012      	beq.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
 800fe5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	da0e      	bge.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe70:	e008      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fe72:	bf00      	nop
 800fe74:	e006      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
    return;
 800fe76:	bf00      	nop
 800fe78:	e004      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fe7a:	bf00      	nop
 800fe7c:	e002      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fe7e:	bf00      	nop
 800fe80:	e000      	b.n	800fe84 <HAL_UART_IRQHandler+0x6a0>
    return;
 800fe82:	bf00      	nop
  }
}
 800fe84:	37e8      	adds	r7, #232	@ 0xe8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop

0800fe8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe94:	bf00      	nop
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	460b      	mov	r3, r1
 800ff36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a09      	ldr	r2, [pc, #36]	@ (800ff78 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d009      	beq.n	800ff6c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	615a      	str	r2, [r3, #20]
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	40008000 	.word	0x40008000

0800ff7c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a18      	ldr	r2, [pc, #96]	@ (800ffec <HAL_UART_EnableReceiverTimeout+0x70>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d027      	beq.n	800ffde <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff94:	2b20      	cmp	r3, #32
 800ff96:	d120      	bne.n	800ffda <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d101      	bne.n	800ffa6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ffa2:	2302      	movs	r3, #2
 800ffa4:	e01c      	b.n	800ffe0 <HAL_UART_EnableReceiverTimeout+0x64>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2224      	movs	r2, #36	@ 0x24
 800ffb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ffc4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2220      	movs	r2, #32
 800ffca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	e002      	b.n	800ffe0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e000      	b.n	800ffe0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ffde:	2301      	movs	r3, #1
  }
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	40008000 	.word	0x40008000

0800fff0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800fffe:	4618      	mov	r0, r3
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
	...

0801000c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a1a      	ldr	r2, [pc, #104]	@ (8010080 <UART_InitCallbacksToDefault+0x74>)
 8010018:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a19      	ldr	r2, [pc, #100]	@ (8010084 <UART_InitCallbacksToDefault+0x78>)
 8010020:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a18      	ldr	r2, [pc, #96]	@ (8010088 <UART_InitCallbacksToDefault+0x7c>)
 8010028:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a17      	ldr	r2, [pc, #92]	@ (801008c <UART_InitCallbacksToDefault+0x80>)
 8010030:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a16      	ldr	r2, [pc, #88]	@ (8010090 <UART_InitCallbacksToDefault+0x84>)
 8010038:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a15      	ldr	r2, [pc, #84]	@ (8010094 <UART_InitCallbacksToDefault+0x88>)
 8010040:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4a14      	ldr	r2, [pc, #80]	@ (8010098 <UART_InitCallbacksToDefault+0x8c>)
 8010048:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4a13      	ldr	r2, [pc, #76]	@ (801009c <UART_InitCallbacksToDefault+0x90>)
 8010050:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4a12      	ldr	r2, [pc, #72]	@ (80100a0 <UART_InitCallbacksToDefault+0x94>)
 8010058:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	4a11      	ldr	r2, [pc, #68]	@ (80100a4 <UART_InitCallbacksToDefault+0x98>)
 8010060:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4a10      	ldr	r2, [pc, #64]	@ (80100a8 <UART_InitCallbacksToDefault+0x9c>)
 8010068:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4a0f      	ldr	r2, [pc, #60]	@ (80100ac <UART_InitCallbacksToDefault+0xa0>)
 8010070:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8010074:	bf00      	nop
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr
 8010080:	0800fea1 	.word	0x0800fea1
 8010084:	0800fe8d 	.word	0x0800fe8d
 8010088:	0800fec9 	.word	0x0800fec9
 801008c:	0800feb5 	.word	0x0800feb5
 8010090:	0800fedd 	.word	0x0800fedd
 8010094:	0800fef1 	.word	0x0800fef1
 8010098:	0800ff05 	.word	0x0800ff05
 801009c:	0800ff19 	.word	0x0800ff19
 80100a0:	08010f37 	.word	0x08010f37
 80100a4:	08010f4b 	.word	0x08010f4b
 80100a8:	08010f5f 	.word	0x08010f5f
 80100ac:	0800ff2d 	.word	0x0800ff2d

080100b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80100b4:	b08c      	sub	sp, #48	@ 0x30
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	689a      	ldr	r2, [r3, #8]
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	431a      	orrs	r2, r3
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	695b      	ldr	r3, [r3, #20]
 80100ce:	431a      	orrs	r2, r3
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	69db      	ldr	r3, [r3, #28]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	4baa      	ldr	r3, [pc, #680]	@ (8010388 <UART_SetConfig+0x2d8>)
 80100e0:	4013      	ands	r3, r2
 80100e2:	697a      	ldr	r2, [r7, #20]
 80100e4:	6812      	ldr	r2, [r2, #0]
 80100e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100e8:	430b      	orrs	r3, r1
 80100ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	68da      	ldr	r2, [r3, #12]
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	430a      	orrs	r2, r1
 8010100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a9f      	ldr	r2, [pc, #636]	@ (801038c <UART_SetConfig+0x2dc>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d004      	beq.n	801011c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010118:	4313      	orrs	r3, r2
 801011a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010126:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	6812      	ldr	r2, [r2, #0]
 801012e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010130:	430b      	orrs	r3, r1
 8010132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801013a:	f023 010f 	bic.w	r1, r3, #15
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	430a      	orrs	r2, r1
 8010148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a90      	ldr	r2, [pc, #576]	@ (8010390 <UART_SetConfig+0x2e0>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d125      	bne.n	80101a0 <UART_SetConfig+0xf0>
 8010154:	4b8f      	ldr	r3, [pc, #572]	@ (8010394 <UART_SetConfig+0x2e4>)
 8010156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b03      	cmp	r3, #3
 8010160:	d81a      	bhi.n	8010198 <UART_SetConfig+0xe8>
 8010162:	a201      	add	r2, pc, #4	@ (adr r2, 8010168 <UART_SetConfig+0xb8>)
 8010164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010168:	08010179 	.word	0x08010179
 801016c:	08010189 	.word	0x08010189
 8010170:	08010181 	.word	0x08010181
 8010174:	08010191 	.word	0x08010191
 8010178:	2301      	movs	r3, #1
 801017a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801017e:	e116      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010180:	2302      	movs	r3, #2
 8010182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010186:	e112      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010188:	2304      	movs	r3, #4
 801018a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801018e:	e10e      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010190:	2308      	movs	r3, #8
 8010192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010196:	e10a      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010198:	2310      	movs	r3, #16
 801019a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801019e:	e106      	b.n	80103ae <UART_SetConfig+0x2fe>
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a7c      	ldr	r2, [pc, #496]	@ (8010398 <UART_SetConfig+0x2e8>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d138      	bne.n	801021c <UART_SetConfig+0x16c>
 80101aa:	4b7a      	ldr	r3, [pc, #488]	@ (8010394 <UART_SetConfig+0x2e4>)
 80101ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101b0:	f003 030c 	and.w	r3, r3, #12
 80101b4:	2b0c      	cmp	r3, #12
 80101b6:	d82d      	bhi.n	8010214 <UART_SetConfig+0x164>
 80101b8:	a201      	add	r2, pc, #4	@ (adr r2, 80101c0 <UART_SetConfig+0x110>)
 80101ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101be:	bf00      	nop
 80101c0:	080101f5 	.word	0x080101f5
 80101c4:	08010215 	.word	0x08010215
 80101c8:	08010215 	.word	0x08010215
 80101cc:	08010215 	.word	0x08010215
 80101d0:	08010205 	.word	0x08010205
 80101d4:	08010215 	.word	0x08010215
 80101d8:	08010215 	.word	0x08010215
 80101dc:	08010215 	.word	0x08010215
 80101e0:	080101fd 	.word	0x080101fd
 80101e4:	08010215 	.word	0x08010215
 80101e8:	08010215 	.word	0x08010215
 80101ec:	08010215 	.word	0x08010215
 80101f0:	0801020d 	.word	0x0801020d
 80101f4:	2300      	movs	r3, #0
 80101f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101fa:	e0d8      	b.n	80103ae <UART_SetConfig+0x2fe>
 80101fc:	2302      	movs	r3, #2
 80101fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010202:	e0d4      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010204:	2304      	movs	r3, #4
 8010206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801020a:	e0d0      	b.n	80103ae <UART_SetConfig+0x2fe>
 801020c:	2308      	movs	r3, #8
 801020e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010212:	e0cc      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010214:	2310      	movs	r3, #16
 8010216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801021a:	e0c8      	b.n	80103ae <UART_SetConfig+0x2fe>
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a5e      	ldr	r2, [pc, #376]	@ (801039c <UART_SetConfig+0x2ec>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d125      	bne.n	8010272 <UART_SetConfig+0x1c2>
 8010226:	4b5b      	ldr	r3, [pc, #364]	@ (8010394 <UART_SetConfig+0x2e4>)
 8010228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801022c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010230:	2b30      	cmp	r3, #48	@ 0x30
 8010232:	d016      	beq.n	8010262 <UART_SetConfig+0x1b2>
 8010234:	2b30      	cmp	r3, #48	@ 0x30
 8010236:	d818      	bhi.n	801026a <UART_SetConfig+0x1ba>
 8010238:	2b20      	cmp	r3, #32
 801023a:	d00a      	beq.n	8010252 <UART_SetConfig+0x1a2>
 801023c:	2b20      	cmp	r3, #32
 801023e:	d814      	bhi.n	801026a <UART_SetConfig+0x1ba>
 8010240:	2b00      	cmp	r3, #0
 8010242:	d002      	beq.n	801024a <UART_SetConfig+0x19a>
 8010244:	2b10      	cmp	r3, #16
 8010246:	d008      	beq.n	801025a <UART_SetConfig+0x1aa>
 8010248:	e00f      	b.n	801026a <UART_SetConfig+0x1ba>
 801024a:	2300      	movs	r3, #0
 801024c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010250:	e0ad      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010252:	2302      	movs	r3, #2
 8010254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010258:	e0a9      	b.n	80103ae <UART_SetConfig+0x2fe>
 801025a:	2304      	movs	r3, #4
 801025c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010260:	e0a5      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010262:	2308      	movs	r3, #8
 8010264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010268:	e0a1      	b.n	80103ae <UART_SetConfig+0x2fe>
 801026a:	2310      	movs	r3, #16
 801026c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010270:	e09d      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a4a      	ldr	r2, [pc, #296]	@ (80103a0 <UART_SetConfig+0x2f0>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d125      	bne.n	80102c8 <UART_SetConfig+0x218>
 801027c:	4b45      	ldr	r3, [pc, #276]	@ (8010394 <UART_SetConfig+0x2e4>)
 801027e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010282:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010286:	2bc0      	cmp	r3, #192	@ 0xc0
 8010288:	d016      	beq.n	80102b8 <UART_SetConfig+0x208>
 801028a:	2bc0      	cmp	r3, #192	@ 0xc0
 801028c:	d818      	bhi.n	80102c0 <UART_SetConfig+0x210>
 801028e:	2b80      	cmp	r3, #128	@ 0x80
 8010290:	d00a      	beq.n	80102a8 <UART_SetConfig+0x1f8>
 8010292:	2b80      	cmp	r3, #128	@ 0x80
 8010294:	d814      	bhi.n	80102c0 <UART_SetConfig+0x210>
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <UART_SetConfig+0x1f0>
 801029a:	2b40      	cmp	r3, #64	@ 0x40
 801029c:	d008      	beq.n	80102b0 <UART_SetConfig+0x200>
 801029e:	e00f      	b.n	80102c0 <UART_SetConfig+0x210>
 80102a0:	2300      	movs	r3, #0
 80102a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102a6:	e082      	b.n	80103ae <UART_SetConfig+0x2fe>
 80102a8:	2302      	movs	r3, #2
 80102aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102ae:	e07e      	b.n	80103ae <UART_SetConfig+0x2fe>
 80102b0:	2304      	movs	r3, #4
 80102b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102b6:	e07a      	b.n	80103ae <UART_SetConfig+0x2fe>
 80102b8:	2308      	movs	r3, #8
 80102ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102be:	e076      	b.n	80103ae <UART_SetConfig+0x2fe>
 80102c0:	2310      	movs	r3, #16
 80102c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102c6:	e072      	b.n	80103ae <UART_SetConfig+0x2fe>
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a35      	ldr	r2, [pc, #212]	@ (80103a4 <UART_SetConfig+0x2f4>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d12a      	bne.n	8010328 <UART_SetConfig+0x278>
 80102d2:	4b30      	ldr	r3, [pc, #192]	@ (8010394 <UART_SetConfig+0x2e4>)
 80102d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80102dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80102e0:	d01a      	beq.n	8010318 <UART_SetConfig+0x268>
 80102e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80102e6:	d81b      	bhi.n	8010320 <UART_SetConfig+0x270>
 80102e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102ec:	d00c      	beq.n	8010308 <UART_SetConfig+0x258>
 80102ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102f2:	d815      	bhi.n	8010320 <UART_SetConfig+0x270>
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d003      	beq.n	8010300 <UART_SetConfig+0x250>
 80102f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102fc:	d008      	beq.n	8010310 <UART_SetConfig+0x260>
 80102fe:	e00f      	b.n	8010320 <UART_SetConfig+0x270>
 8010300:	2300      	movs	r3, #0
 8010302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010306:	e052      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010308:	2302      	movs	r3, #2
 801030a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801030e:	e04e      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010310:	2304      	movs	r3, #4
 8010312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010316:	e04a      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010318:	2308      	movs	r3, #8
 801031a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801031e:	e046      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010320:	2310      	movs	r3, #16
 8010322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010326:	e042      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a17      	ldr	r2, [pc, #92]	@ (801038c <UART_SetConfig+0x2dc>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d13a      	bne.n	80103a8 <UART_SetConfig+0x2f8>
 8010332:	4b18      	ldr	r3, [pc, #96]	@ (8010394 <UART_SetConfig+0x2e4>)
 8010334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010338:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801033c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010340:	d01a      	beq.n	8010378 <UART_SetConfig+0x2c8>
 8010342:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010346:	d81b      	bhi.n	8010380 <UART_SetConfig+0x2d0>
 8010348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801034c:	d00c      	beq.n	8010368 <UART_SetConfig+0x2b8>
 801034e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010352:	d815      	bhi.n	8010380 <UART_SetConfig+0x2d0>
 8010354:	2b00      	cmp	r3, #0
 8010356:	d003      	beq.n	8010360 <UART_SetConfig+0x2b0>
 8010358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801035c:	d008      	beq.n	8010370 <UART_SetConfig+0x2c0>
 801035e:	e00f      	b.n	8010380 <UART_SetConfig+0x2d0>
 8010360:	2300      	movs	r3, #0
 8010362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010366:	e022      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010368:	2302      	movs	r3, #2
 801036a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801036e:	e01e      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010370:	2304      	movs	r3, #4
 8010372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010376:	e01a      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010378:	2308      	movs	r3, #8
 801037a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801037e:	e016      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010380:	2310      	movs	r3, #16
 8010382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010386:	e012      	b.n	80103ae <UART_SetConfig+0x2fe>
 8010388:	cfff69f3 	.word	0xcfff69f3
 801038c:	40008000 	.word	0x40008000
 8010390:	40013800 	.word	0x40013800
 8010394:	40021000 	.word	0x40021000
 8010398:	40004400 	.word	0x40004400
 801039c:	40004800 	.word	0x40004800
 80103a0:	40004c00 	.word	0x40004c00
 80103a4:	40005000 	.word	0x40005000
 80103a8:	2310      	movs	r3, #16
 80103aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4aae      	ldr	r2, [pc, #696]	@ (801066c <UART_SetConfig+0x5bc>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	f040 8097 	bne.w	80104e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103be:	2b08      	cmp	r3, #8
 80103c0:	d823      	bhi.n	801040a <UART_SetConfig+0x35a>
 80103c2:	a201      	add	r2, pc, #4	@ (adr r2, 80103c8 <UART_SetConfig+0x318>)
 80103c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c8:	080103ed 	.word	0x080103ed
 80103cc:	0801040b 	.word	0x0801040b
 80103d0:	080103f5 	.word	0x080103f5
 80103d4:	0801040b 	.word	0x0801040b
 80103d8:	080103fb 	.word	0x080103fb
 80103dc:	0801040b 	.word	0x0801040b
 80103e0:	0801040b 	.word	0x0801040b
 80103e4:	0801040b 	.word	0x0801040b
 80103e8:	08010403 	.word	0x08010403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103ec:	f7fc fcec 	bl	800cdc8 <HAL_RCC_GetPCLK1Freq>
 80103f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80103f2:	e010      	b.n	8010416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80103f4:	4b9e      	ldr	r3, [pc, #632]	@ (8010670 <UART_SetConfig+0x5c0>)
 80103f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80103f8:	e00d      	b.n	8010416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80103fa:	f7fc fc77 	bl	800ccec <HAL_RCC_GetSysClockFreq>
 80103fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010400:	e009      	b.n	8010416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010408:	e005      	b.n	8010416 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801040a:	2300      	movs	r3, #0
 801040c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801040e:	2301      	movs	r3, #1
 8010410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 8130 	beq.w	801067e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010422:	4a94      	ldr	r2, [pc, #592]	@ (8010674 <UART_SetConfig+0x5c4>)
 8010424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010428:	461a      	mov	r2, r3
 801042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801042c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010430:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	685a      	ldr	r2, [r3, #4]
 8010436:	4613      	mov	r3, r2
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4413      	add	r3, r2
 801043c:	69ba      	ldr	r2, [r7, #24]
 801043e:	429a      	cmp	r2, r3
 8010440:	d305      	bcc.n	801044e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010448:	69ba      	ldr	r2, [r7, #24]
 801044a:	429a      	cmp	r2, r3
 801044c:	d903      	bls.n	8010456 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801044e:	2301      	movs	r3, #1
 8010450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010454:	e113      	b.n	801067e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010458:	2200      	movs	r2, #0
 801045a:	60bb      	str	r3, [r7, #8]
 801045c:	60fa      	str	r2, [r7, #12]
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010462:	4a84      	ldr	r2, [pc, #528]	@ (8010674 <UART_SetConfig+0x5c4>)
 8010464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010468:	b29b      	uxth	r3, r3
 801046a:	2200      	movs	r2, #0
 801046c:	603b      	str	r3, [r7, #0]
 801046e:	607a      	str	r2, [r7, #4]
 8010470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010478:	f7f0 fbbc 	bl	8000bf4 <__aeabi_uldivmod>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4610      	mov	r0, r2
 8010482:	4619      	mov	r1, r3
 8010484:	f04f 0200 	mov.w	r2, #0
 8010488:	f04f 0300 	mov.w	r3, #0
 801048c:	020b      	lsls	r3, r1, #8
 801048e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010492:	0202      	lsls	r2, r0, #8
 8010494:	6979      	ldr	r1, [r7, #20]
 8010496:	6849      	ldr	r1, [r1, #4]
 8010498:	0849      	lsrs	r1, r1, #1
 801049a:	2000      	movs	r0, #0
 801049c:	460c      	mov	r4, r1
 801049e:	4605      	mov	r5, r0
 80104a0:	eb12 0804 	adds.w	r8, r2, r4
 80104a4:	eb43 0905 	adc.w	r9, r3, r5
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	469a      	mov	sl, r3
 80104b0:	4693      	mov	fp, r2
 80104b2:	4652      	mov	r2, sl
 80104b4:	465b      	mov	r3, fp
 80104b6:	4640      	mov	r0, r8
 80104b8:	4649      	mov	r1, r9
 80104ba:	f7f0 fb9b 	bl	8000bf4 <__aeabi_uldivmod>
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	4613      	mov	r3, r2
 80104c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80104cc:	d308      	bcc.n	80104e0 <UART_SetConfig+0x430>
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80104d4:	d204      	bcs.n	80104e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	6a3a      	ldr	r2, [r7, #32]
 80104dc:	60da      	str	r2, [r3, #12]
 80104de:	e0ce      	b.n	801067e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80104e0:	2301      	movs	r3, #1
 80104e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80104e6:	e0ca      	b.n	801067e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	69db      	ldr	r3, [r3, #28]
 80104ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80104f0:	d166      	bne.n	80105c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80104f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80104f6:	2b08      	cmp	r3, #8
 80104f8:	d827      	bhi.n	801054a <UART_SetConfig+0x49a>
 80104fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010500 <UART_SetConfig+0x450>)
 80104fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010500:	08010525 	.word	0x08010525
 8010504:	0801052d 	.word	0x0801052d
 8010508:	08010535 	.word	0x08010535
 801050c:	0801054b 	.word	0x0801054b
 8010510:	0801053b 	.word	0x0801053b
 8010514:	0801054b 	.word	0x0801054b
 8010518:	0801054b 	.word	0x0801054b
 801051c:	0801054b 	.word	0x0801054b
 8010520:	08010543 	.word	0x08010543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010524:	f7fc fc50 	bl	800cdc8 <HAL_RCC_GetPCLK1Freq>
 8010528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801052a:	e014      	b.n	8010556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801052c:	f7fc fc62 	bl	800cdf4 <HAL_RCC_GetPCLK2Freq>
 8010530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010532:	e010      	b.n	8010556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010534:	4b4e      	ldr	r3, [pc, #312]	@ (8010670 <UART_SetConfig+0x5c0>)
 8010536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010538:	e00d      	b.n	8010556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801053a:	f7fc fbd7 	bl	800ccec <HAL_RCC_GetSysClockFreq>
 801053e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010540:	e009      	b.n	8010556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010548:	e005      	b.n	8010556 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801054a:	2300      	movs	r3, #0
 801054c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801054e:	2301      	movs	r3, #1
 8010550:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 8090 	beq.w	801067e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010562:	4a44      	ldr	r2, [pc, #272]	@ (8010674 <UART_SetConfig+0x5c4>)
 8010564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010568:	461a      	mov	r2, r3
 801056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010570:	005a      	lsls	r2, r3, #1
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	085b      	lsrs	r3, r3, #1
 8010578:	441a      	add	r2, r3
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	2b0f      	cmp	r3, #15
 8010588:	d916      	bls.n	80105b8 <UART_SetConfig+0x508>
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010590:	d212      	bcs.n	80105b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	b29b      	uxth	r3, r3
 8010596:	f023 030f 	bic.w	r3, r3, #15
 801059a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801059c:	6a3b      	ldr	r3, [r7, #32]
 801059e:	085b      	lsrs	r3, r3, #1
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	f003 0307 	and.w	r3, r3, #7
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	8bfb      	ldrh	r3, [r7, #30]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	8bfa      	ldrh	r2, [r7, #30]
 80105b4:	60da      	str	r2, [r3, #12]
 80105b6:	e062      	b.n	801067e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80105b8:	2301      	movs	r3, #1
 80105ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80105be:	e05e      	b.n	801067e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80105c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80105c4:	2b08      	cmp	r3, #8
 80105c6:	d828      	bhi.n	801061a <UART_SetConfig+0x56a>
 80105c8:	a201      	add	r2, pc, #4	@ (adr r2, 80105d0 <UART_SetConfig+0x520>)
 80105ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ce:	bf00      	nop
 80105d0:	080105f5 	.word	0x080105f5
 80105d4:	080105fd 	.word	0x080105fd
 80105d8:	08010605 	.word	0x08010605
 80105dc:	0801061b 	.word	0x0801061b
 80105e0:	0801060b 	.word	0x0801060b
 80105e4:	0801061b 	.word	0x0801061b
 80105e8:	0801061b 	.word	0x0801061b
 80105ec:	0801061b 	.word	0x0801061b
 80105f0:	08010613 	.word	0x08010613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105f4:	f7fc fbe8 	bl	800cdc8 <HAL_RCC_GetPCLK1Freq>
 80105f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105fa:	e014      	b.n	8010626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105fc:	f7fc fbfa 	bl	800cdf4 <HAL_RCC_GetPCLK2Freq>
 8010600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010602:	e010      	b.n	8010626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010604:	4b1a      	ldr	r3, [pc, #104]	@ (8010670 <UART_SetConfig+0x5c0>)
 8010606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010608:	e00d      	b.n	8010626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801060a:	f7fc fb6f 	bl	800ccec <HAL_RCC_GetSysClockFreq>
 801060e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010610:	e009      	b.n	8010626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010618:	e005      	b.n	8010626 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801061a:	2300      	movs	r3, #0
 801061c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801061e:	2301      	movs	r3, #1
 8010620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010624:	bf00      	nop
    }

    if (pclk != 0U)
 8010626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010628:	2b00      	cmp	r3, #0
 801062a:	d028      	beq.n	801067e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010630:	4a10      	ldr	r2, [pc, #64]	@ (8010674 <UART_SetConfig+0x5c4>)
 8010632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010636:	461a      	mov	r2, r3
 8010638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063a:	fbb3 f2f2 	udiv	r2, r3, r2
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	085b      	lsrs	r3, r3, #1
 8010644:	441a      	add	r2, r3
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	fbb2 f3f3 	udiv	r3, r2, r3
 801064e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	2b0f      	cmp	r3, #15
 8010654:	d910      	bls.n	8010678 <UART_SetConfig+0x5c8>
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801065c:	d20c      	bcs.n	8010678 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	b29a      	uxth	r2, r3
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	60da      	str	r2, [r3, #12]
 8010668:	e009      	b.n	801067e <UART_SetConfig+0x5ce>
 801066a:	bf00      	nop
 801066c:	40008000 	.word	0x40008000
 8010670:	00f42400 	.word	0x00f42400
 8010674:	08013c28 	.word	0x08013c28
      }
      else
      {
        ret = HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	2201      	movs	r2, #1
 8010682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2201      	movs	r2, #1
 801068a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	2200      	movs	r2, #0
 8010692:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2200      	movs	r2, #0
 8010698:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801069a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3730      	adds	r7, #48	@ 0x30
 80106a2:	46bd      	mov	sp, r7
 80106a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080106a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b4:	f003 0308 	and.w	r3, r3, #8
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00a      	beq.n	80106d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	430a      	orrs	r2, r1
 80106d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d6:	f003 0301 	and.w	r3, r3, #1
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00a      	beq.n	80106f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	430a      	orrs	r2, r1
 80106f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106f8:	f003 0302 	and.w	r3, r3, #2
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00a      	beq.n	8010716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	430a      	orrs	r2, r1
 8010714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801071a:	f003 0304 	and.w	r3, r3, #4
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00a      	beq.n	8010738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	430a      	orrs	r2, r1
 8010736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801073c:	f003 0310 	and.w	r3, r3, #16
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00a      	beq.n	801075a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	430a      	orrs	r2, r1
 8010758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801075e:	f003 0320 	and.w	r3, r3, #32
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00a      	beq.n	801077c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	430a      	orrs	r2, r1
 801077a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010784:	2b00      	cmp	r3, #0
 8010786:	d01a      	beq.n	80107be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	430a      	orrs	r2, r1
 801079c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107a6:	d10a      	bne.n	80107be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	430a      	orrs	r2, r1
 80107bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00a      	beq.n	80107e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	430a      	orrs	r2, r1
 80107de:	605a      	str	r2, [r3, #4]
  }
}
 80107e0:	bf00      	nop
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b098      	sub	sp, #96	@ 0x60
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2200      	movs	r2, #0
 80107f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80107fc:	f7f9 faca 	bl	8009d94 <HAL_GetTick>
 8010800:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f003 0308 	and.w	r3, r3, #8
 801080c:	2b08      	cmp	r3, #8
 801080e:	d12f      	bne.n	8010870 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010818:	2200      	movs	r2, #0
 801081a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f88e 	bl	8010940 <UART_WaitOnFlagUntilTimeout>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d022      	beq.n	8010870 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010832:	e853 3f00 	ldrex	r3, [r3]
 8010836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801083a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801083e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	461a      	mov	r2, r3
 8010846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010848:	647b      	str	r3, [r7, #68]	@ 0x44
 801084a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801084e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010850:	e841 2300 	strex	r3, r2, [r1]
 8010854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1e6      	bne.n	801082a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2220      	movs	r2, #32
 8010860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801086c:	2303      	movs	r3, #3
 801086e:	e063      	b.n	8010938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b04      	cmp	r3, #4
 801087c:	d149      	bne.n	8010912 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801087e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010886:	2200      	movs	r2, #0
 8010888:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 f857 	bl	8010940 <UART_WaitOnFlagUntilTimeout>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d03c      	beq.n	8010912 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108a0:	e853 3f00 	ldrex	r3, [r3]
 80108a4:	623b      	str	r3, [r7, #32]
   return(result);
 80108a6:	6a3b      	ldr	r3, [r7, #32]
 80108a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	461a      	mov	r2, r3
 80108b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80108b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108be:	e841 2300 	strex	r3, r2, [r1]
 80108c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80108c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1e6      	bne.n	8010898 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3308      	adds	r3, #8
 80108d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	e853 3f00 	ldrex	r3, [r3]
 80108d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f023 0301 	bic.w	r3, r3, #1
 80108e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	3308      	adds	r3, #8
 80108e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108ea:	61fa      	str	r2, [r7, #28]
 80108ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ee:	69b9      	ldr	r1, [r7, #24]
 80108f0:	69fa      	ldr	r2, [r7, #28]
 80108f2:	e841 2300 	strex	r3, r2, [r1]
 80108f6:	617b      	str	r3, [r7, #20]
   return(result);
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e5      	bne.n	80108ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2220      	movs	r2, #32
 8010902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801090e:	2303      	movs	r3, #3
 8010910:	e012      	b.n	8010938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2220      	movs	r2, #32
 8010916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2220      	movs	r2, #32
 801091e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2200      	movs	r2, #0
 8010926:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3758      	adds	r7, #88	@ 0x58
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	603b      	str	r3, [r7, #0]
 801094c:	4613      	mov	r3, r2
 801094e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010950:	e04f      	b.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010958:	d04b      	beq.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801095a:	f7f9 fa1b 	bl	8009d94 <HAL_GetTick>
 801095e:	4602      	mov	r2, r0
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	429a      	cmp	r2, r3
 8010968:	d302      	bcc.n	8010970 <UART_WaitOnFlagUntilTimeout+0x30>
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d101      	bne.n	8010974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010970:	2303      	movs	r3, #3
 8010972:	e04e      	b.n	8010a12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f003 0304 	and.w	r3, r3, #4
 801097e:	2b00      	cmp	r3, #0
 8010980:	d037      	beq.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	2b80      	cmp	r3, #128	@ 0x80
 8010986:	d034      	beq.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	2b40      	cmp	r3, #64	@ 0x40
 801098c:	d031      	beq.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	f003 0308 	and.w	r3, r3, #8
 8010998:	2b08      	cmp	r3, #8
 801099a:	d110      	bne.n	80109be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2208      	movs	r2, #8
 80109a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	f000 f920 	bl	8010bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2208      	movs	r2, #8
 80109ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80109ba:	2301      	movs	r3, #1
 80109bc:	e029      	b.n	8010a12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109cc:	d111      	bne.n	80109f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80109d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f000 f906 	bl	8010bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2220      	movs	r2, #32
 80109e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2200      	movs	r2, #0
 80109ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e00f      	b.n	8010a12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	69da      	ldr	r2, [r3, #28]
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	4013      	ands	r3, r2
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	bf0c      	ite	eq
 8010a02:	2301      	moveq	r3, #1
 8010a04:	2300      	movne	r3, #0
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	461a      	mov	r2, r3
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d0a0      	beq.n	8010952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b096      	sub	sp, #88	@ 0x58
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	4613      	mov	r3, r2
 8010a28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	68ba      	ldr	r2, [r7, #8]
 8010a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	88fa      	ldrh	r2, [r7, #6]
 8010a34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2222      	movs	r2, #34	@ 0x22
 8010a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d02d      	beq.n	8010aae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a58:	4a40      	ldr	r2, [pc, #256]	@ (8010b5c <UART_Start_Receive_DMA+0x140>)
 8010a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a62:	4a3f      	ldr	r2, [pc, #252]	@ (8010b60 <UART_Start_Receive_DMA+0x144>)
 8010a64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8010b64 <UART_Start_Receive_DMA+0x148>)
 8010a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a76:	2200      	movs	r2, #0
 8010a78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3324      	adds	r3, #36	@ 0x24
 8010a86:	4619      	mov	r1, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	88fb      	ldrh	r3, [r7, #6]
 8010a90:	f7fa ffbc 	bl	800ba0c <HAL_DMA_Start_IT>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d009      	beq.n	8010aae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2210      	movs	r2, #16
 8010a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2220      	movs	r2, #32
 8010aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e051      	b.n	8010b52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d018      	beq.n	8010ae8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010abe:	e853 3f00 	ldrex	r3, [r3]
 8010ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ad6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010adc:	e841 2300 	strex	r3, r2, [r1]
 8010ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e6      	bne.n	8010ab6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3308      	adds	r3, #8
 8010aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010af2:	e853 3f00 	ldrex	r3, [r3]
 8010af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afa:	f043 0301 	orr.w	r3, r3, #1
 8010afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3308      	adds	r3, #8
 8010b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b08:	637a      	str	r2, [r7, #52]	@ 0x34
 8010b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b10:	e841 2300 	strex	r3, r2, [r1]
 8010b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1e5      	bne.n	8010ae8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3308      	adds	r3, #8
 8010b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	e853 3f00 	ldrex	r3, [r3]
 8010b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	3308      	adds	r3, #8
 8010b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b3c:	623a      	str	r2, [r7, #32]
 8010b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b40:	69f9      	ldr	r1, [r7, #28]
 8010b42:	6a3a      	ldr	r2, [r7, #32]
 8010b44:	e841 2300 	strex	r3, r2, [r1]
 8010b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d1e5      	bne.n	8010b1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3758      	adds	r7, #88	@ 0x58
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	08010cb7 	.word	0x08010cb7
 8010b60:	08010deb 	.word	0x08010deb
 8010b64:	08010e31 	.word	0x08010e31

08010b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b08f      	sub	sp, #60	@ 0x3c
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b76:	6a3b      	ldr	r3, [r7, #32]
 8010b78:	e853 3f00 	ldrex	r3, [r3]
 8010b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b96:	e841 2300 	strex	r3, r2, [r1]
 8010b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d1e6      	bne.n	8010b70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	e853 3f00 	ldrex	r3, [r3]
 8010bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bc2:	61ba      	str	r2, [r7, #24]
 8010bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc6:	6979      	ldr	r1, [r7, #20]
 8010bc8:	69ba      	ldr	r2, [r7, #24]
 8010bca:	e841 2300 	strex	r3, r2, [r1]
 8010bce:	613b      	str	r3, [r7, #16]
   return(result);
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e5      	bne.n	8010ba2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2220      	movs	r2, #32
 8010bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010bde:	bf00      	nop
 8010be0:	373c      	adds	r7, #60	@ 0x3c
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b095      	sub	sp, #84	@ 0x54
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bfa:	e853 3f00 	ldrex	r3, [r3]
 8010bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c18:	e841 2300 	strex	r3, r2, [r1]
 8010c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d1e6      	bne.n	8010bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	3308      	adds	r3, #8
 8010c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2c:	6a3b      	ldr	r3, [r7, #32]
 8010c2e:	e853 3f00 	ldrex	r3, [r3]
 8010c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c3a:	f023 0301 	bic.w	r3, r3, #1
 8010c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3308      	adds	r3, #8
 8010c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c50:	e841 2300 	strex	r3, r2, [r1]
 8010c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1e3      	bne.n	8010c24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d118      	bne.n	8010c96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	e853 3f00 	ldrex	r3, [r3]
 8010c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	f023 0310 	bic.w	r3, r3, #16
 8010c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c82:	61bb      	str	r3, [r7, #24]
 8010c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c86:	6979      	ldr	r1, [r7, #20]
 8010c88:	69ba      	ldr	r2, [r7, #24]
 8010c8a:	e841 2300 	strex	r3, r2, [r1]
 8010c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1e6      	bne.n	8010c64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2220      	movs	r2, #32
 8010c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010caa:	bf00      	nop
 8010cac:	3754      	adds	r7, #84	@ 0x54
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr

08010cb6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b09c      	sub	sp, #112	@ 0x70
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f003 0320 	and.w	r3, r3, #32
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d171      	bne.n	8010db6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ce2:	e853 3f00 	ldrex	r3, [r3]
 8010ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010cee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010cfa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d00:	e841 2300 	strex	r3, r2, [r1]
 8010d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1e6      	bne.n	8010cda <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3308      	adds	r3, #8
 8010d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d16:	e853 3f00 	ldrex	r3, [r3]
 8010d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1e:	f023 0301 	bic.w	r3, r3, #1
 8010d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8010d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3308      	adds	r3, #8
 8010d2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010d2c:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d34:	e841 2300 	strex	r3, r2, [r1]
 8010d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1e5      	bne.n	8010d0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3308      	adds	r3, #8
 8010d46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	e853 3f00 	ldrex	r3, [r3]
 8010d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d60:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d68:	e841 2300 	strex	r3, r2, [r1]
 8010d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1e5      	bne.n	8010d40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d76:	2220      	movs	r2, #32
 8010d78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d118      	bne.n	8010db6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	e853 3f00 	ldrex	r3, [r3]
 8010d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f023 0310 	bic.w	r3, r3, #16
 8010d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010da2:	61fb      	str	r3, [r7, #28]
 8010da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da6:	69b9      	ldr	r1, [r7, #24]
 8010da8:	69fa      	ldr	r2, [r7, #28]
 8010daa:	e841 2300 	strex	r3, r2, [r1]
 8010dae:	617b      	str	r3, [r7, #20]
   return(result);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1e6      	bne.n	8010d84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010db8:	2200      	movs	r2, #0
 8010dba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d109      	bne.n	8010dd8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8010dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010dca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dcc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010dd4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dd6:	e004      	b.n	8010de2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8010dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010dde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010de0:	4798      	blx	r3
}
 8010de2:	bf00      	nop
 8010de4:	3770      	adds	r7, #112	@ 0x70
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010df6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d10b      	bne.n	8010e1e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010e12:	0852      	lsrs	r2, r2, #1
 8010e14:	b292      	uxth	r2, r2
 8010e16:	4611      	mov	r1, r2
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e1c:	e004      	b.n	8010e28 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	4798      	blx	r3
}
 8010e28:	bf00      	nop
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e58:	2b80      	cmp	r3, #128	@ 0x80
 8010e5a:	d109      	bne.n	8010e70 <UART_DMAError+0x40>
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	2b21      	cmp	r3, #33	@ 0x21
 8010e60:	d106      	bne.n	8010e70 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010e6a:	6978      	ldr	r0, [r7, #20]
 8010e6c:	f7ff fe7c 	bl	8010b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e7a:	2b40      	cmp	r3, #64	@ 0x40
 8010e7c:	d109      	bne.n	8010e92 <UART_DMAError+0x62>
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b22      	cmp	r3, #34	@ 0x22
 8010e82:	d106      	bne.n	8010e92 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010e8c:	6978      	ldr	r0, [r7, #20]
 8010e8e:	f7ff feac 	bl	8010bea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e98:	f043 0210 	orr.w	r2, r3, #16
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ea8:	6978      	ldr	r0, [r7, #20]
 8010eaa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eac:	bf00      	nop
 8010eae:	3718      	adds	r7, #24
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ed4:	bf00      	nop
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	e853 3f00 	ldrex	r3, [r3]
 8010ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ef8:	61fb      	str	r3, [r7, #28]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	461a      	mov	r2, r3
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	61bb      	str	r3, [r7, #24]
 8010f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	6979      	ldr	r1, [r7, #20]
 8010f08:	69ba      	ldr	r2, [r7, #24]
 8010f0a:	e841 2300 	strex	r3, r2, [r1]
 8010f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1e6      	bne.n	8010ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2220      	movs	r2, #32
 8010f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f2e:	bf00      	nop
 8010f30:	3720      	adds	r7, #32
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010f36:	b480      	push	{r7}
 8010f38:	b083      	sub	sp, #12
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010f3e:	bf00      	nop
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010f4a:	b480      	push	{r7}
 8010f4c:	b083      	sub	sp, #12
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010f52:	bf00      	nop
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010f66:	bf00      	nop
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f72:	b480      	push	{r7}
 8010f74:	b085      	sub	sp, #20
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d101      	bne.n	8010f88 <HAL_UARTEx_DisableFifoMode+0x16>
 8010f84:	2302      	movs	r3, #2
 8010f86:	e027      	b.n	8010fd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2224      	movs	r2, #36	@ 0x24
 8010f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f022 0201 	bic.w	r2, r2, #1
 8010fae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2220      	movs	r2, #32
 8010fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d101      	bne.n	8010ffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ff8:	2302      	movs	r3, #2
 8010ffa:	e02d      	b.n	8011058 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2224      	movs	r2, #36	@ 0x24
 8011008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f022 0201 	bic.w	r2, r2, #1
 8011022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	683a      	ldr	r2, [r7, #0]
 8011034:	430a      	orrs	r2, r1
 8011036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 f84f 	bl	80110dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2220      	movs	r2, #32
 801104a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3710      	adds	r7, #16
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011070:	2b01      	cmp	r3, #1
 8011072:	d101      	bne.n	8011078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011074:	2302      	movs	r3, #2
 8011076:	e02d      	b.n	80110d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2224      	movs	r2, #36	@ 0x24
 8011084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f022 0201 	bic.w	r2, r2, #1
 801109e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	430a      	orrs	r2, r1
 80110b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 f811 	bl	80110dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2220      	movs	r2, #32
 80110c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110d2:	2300      	movs	r3, #0
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d108      	bne.n	80110fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2201      	movs	r2, #1
 80110f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2201      	movs	r2, #1
 80110f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80110fc:	e031      	b.n	8011162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80110fe:	2308      	movs	r3, #8
 8011100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011102:	2308      	movs	r3, #8
 8011104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	689b      	ldr	r3, [r3, #8]
 801110c:	0e5b      	lsrs	r3, r3, #25
 801110e:	b2db      	uxtb	r3, r3
 8011110:	f003 0307 	and.w	r3, r3, #7
 8011114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	0f5b      	lsrs	r3, r3, #29
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f003 0307 	and.w	r3, r3, #7
 8011124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011126:	7bbb      	ldrb	r3, [r7, #14]
 8011128:	7b3a      	ldrb	r2, [r7, #12]
 801112a:	4911      	ldr	r1, [pc, #68]	@ (8011170 <UARTEx_SetNbDataToProcess+0x94>)
 801112c:	5c8a      	ldrb	r2, [r1, r2]
 801112e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011132:	7b3a      	ldrb	r2, [r7, #12]
 8011134:	490f      	ldr	r1, [pc, #60]	@ (8011174 <UARTEx_SetNbDataToProcess+0x98>)
 8011136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011138:	fb93 f3f2 	sdiv	r3, r3, r2
 801113c:	b29a      	uxth	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011144:	7bfb      	ldrb	r3, [r7, #15]
 8011146:	7b7a      	ldrb	r2, [r7, #13]
 8011148:	4909      	ldr	r1, [pc, #36]	@ (8011170 <UARTEx_SetNbDataToProcess+0x94>)
 801114a:	5c8a      	ldrb	r2, [r1, r2]
 801114c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011150:	7b7a      	ldrb	r2, [r7, #13]
 8011152:	4908      	ldr	r1, [pc, #32]	@ (8011174 <UARTEx_SetNbDataToProcess+0x98>)
 8011154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011156:	fb93 f3f2 	sdiv	r3, r3, r2
 801115a:	b29a      	uxth	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011162:	bf00      	nop
 8011164:	3714      	adds	r7, #20
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop
 8011170:	08013c40 	.word	0x08013c40
 8011174:	08013c48 	.word	0x08013c48

08011178 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011178:	b480      	push	{r7}
 801117a:	b08b      	sub	sp, #44	@ 0x2c
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	461a      	mov	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	885b      	ldrh	r3, [r3, #2]
 80111a0:	fb02 f303 	mul.w	r3, r2, r3
 80111a4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80111aa:	e013      	b.n	80111d4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80111ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ae:	1d1a      	adds	r2, r3, #4
 80111b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80111b2:	ed93 7a00 	vldr	s14, [r3]
 80111b6:	6a3b      	ldr	r3, [r7, #32]
 80111b8:	1d1a      	adds	r2, r3, #4
 80111ba:	623a      	str	r2, [r7, #32]
 80111bc:	edd3 7a00 	vldr	s15, [r3]
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	1d1a      	adds	r2, r3, #4
 80111c4:	61fa      	str	r2, [r7, #28]
 80111c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111ca:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	3b01      	subs	r3, #1
 80111d2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e8      	bne.n	80111ac <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80111da:	2300      	movs	r3, #0
 80111dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80111de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	372c      	adds	r7, #44	@ 0x2c
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b085      	sub	sp, #20
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	60f8      	str	r0, [r7, #12]
 80111f6:	607b      	str	r3, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	817b      	strh	r3, [r7, #10]
 80111fc:	4613      	mov	r3, r2
 80111fe:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	897a      	ldrh	r2, [r7, #10]
 8011204:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	893a      	ldrh	r2, [r7, #8]
 801120a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	605a      	str	r2, [r3, #4]
}
 8011212:	bf00      	nop
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801121e:	b480      	push	{r7}
 8011220:	b0bb      	sub	sp, #236	@ 0xec
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	885b      	ldrh	r3, [r3, #2]
 801123e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011240:	f04f 0300 	mov.w	r3, #0
 8011244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011248:	f04f 0300 	mov.w	r3, #0
 801124c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 801124e:	2300      	movs	r3, #0
 8011250:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8011254:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 801125a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801125c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011260:	e03b      	b.n	80112da <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8011262:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801126e:	e00c      	b.n	801128a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011274:	1d1a      	adds	r2, r3, #4
 8011276:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801127a:	f04f 0200 	mov.w	r2, #0
 801127e:	601a      	str	r2, [r3, #0]
        j--;
 8011280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011284:	3b01      	subs	r3, #1
 8011286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801128a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1ee      	bne.n	8011270 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8011292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011296:	1d1a      	adds	r2, r3, #4
 8011298:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801129c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80112a0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80112a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80112a6:	3b01      	subs	r3, #1
 80112a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80112ac:	e00c      	b.n	80112c8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80112ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112b2:	1d1a      	adds	r2, r3, #4
 80112b4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80112b8:	f04f 0200 	mov.w	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]
        j--;
 80112be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80112c2:	3b01      	subs	r3, #1
 80112c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80112c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d1ee      	bne.n	80112ae <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80112d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80112d4:	3b01      	subs	r3, #1
 80112d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 80112da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1bf      	bne.n	8011262 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80112e2:	2300      	movs	r3, #0
 80112e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80112e8:	e2c7      	b.n	801187a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80112ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80112ee:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	685a      	ldr	r2, [r3, #4]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	885b      	ldrh	r3, [r3, #2]
 80112f8:	3301      	adds	r3, #1
 80112fa:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80112fe:	fb01 f303 	mul.w	r3, r1, r3
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	4413      	add	r3, r2
 8011306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 801130a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 801131c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011320:	3301      	adds	r3, #1
 8011322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011326:	e02c      	b.n	8011382 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	685a      	ldr	r2, [r3, #4]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	885b      	ldrh	r3, [r3, #2]
 8011330:	4619      	mov	r1, r3
 8011332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011336:	fb03 f101 	mul.w	r1, r3, r1
 801133a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801133e:	440b      	add	r3, r1
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4413      	add	r3, r2
 8011344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011350:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011354:	eeb0 7ae7 	vabs.f32	s14, s15
 8011358:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801135c:	eef0 7ae7 	vabs.f32	s15, s15
 8011360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011368:	dd06      	ble.n	8011378 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 801136a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801136e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8011372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801137c:	3301      	adds	r3, #1
 801137e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011382:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011388:	429a      	cmp	r2, r3
 801138a:	d3cd      	bcc.n	8011328 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 801138c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011390:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011398:	f000 809b 	beq.w	80114d2 <arm_mat_inverse_f32+0x2b4>
 801139c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80113a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113a4:	429a      	cmp	r2, r3
 80113a6:	f000 8094 	beq.w	80114d2 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	885b      	ldrh	r3, [r3, #2]
 80113be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113ce:	fb03 f202 	mul.w	r2, r3, r2
 80113d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113d6:	4413      	add	r3, r2
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80113de:	4413      	add	r3, r2
 80113e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80113e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80113ea:	fb03 f202 	mul.w	r2, r3, r2
 80113ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113f2:	4413      	add	r3, r2
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80113fa:	4413      	add	r3, r2
 80113fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011400:	2300      	movs	r3, #0
 8011402:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011406:	e018      	b.n	801143a <arm_mat_inverse_f32+0x21c>
 8011408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011414:	1d1a      	adds	r2, r3, #4
 8011416:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 801141a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801141e:	6812      	ldr	r2, [r2, #0]
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011426:	1d1a      	adds	r2, r3, #4
 8011428:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 801142c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011434:	3301      	adds	r3, #1
 8011436:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801143a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801143e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011440:	429a      	cmp	r2, r3
 8011442:	dbe1      	blt.n	8011408 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	885b      	ldrh	r3, [r3, #2]
 8011458:	647b      	str	r3, [r7, #68]	@ 0x44
 801145a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801145c:	643b      	str	r3, [r7, #64]	@ 0x40
 801145e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011460:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011462:	fb02 f303 	mul.w	r3, r2, r3
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801146c:	4413      	add	r3, r2
 801146e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011474:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011478:	fb02 f303 	mul.w	r3, r2, r3
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011482:	4413      	add	r3, r2
 8011484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011488:	2300      	movs	r3, #0
 801148a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801148e:	e018      	b.n	80114c2 <arm_mat_inverse_f32+0x2a4>
 8011490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801149c:	1d1a      	adds	r2, r3, #4
 801149e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80114a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80114a6:	6812      	ldr	r2, [r2, #0]
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80114ae:	1d1a      	adds	r2, r3, #4
 80114b0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80114b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80114b6:	601a      	str	r2, [r3, #0]
 80114b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80114bc:	3301      	adds	r3, #1
 80114be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80114c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80114c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114c8:	429a      	cmp	r2, r3
 80114ca:	dbe1      	blt.n	8011490 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80114cc:	2301      	movs	r3, #1
 80114ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80114d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d009      	beq.n	80114ee <arm_mat_inverse_f32+0x2d0>
 80114da:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80114de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80114e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e6:	d102      	bne.n	80114ee <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80114e8:	f06f 0304 	mvn.w	r3, #4
 80114ec:	e208      	b.n	8011900 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80114ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114f2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80114f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114fa:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	885b      	ldrh	r3, [r3, #2]
 801150a:	637b      	str	r3, [r7, #52]	@ 0x34
 801150c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801150e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	633b      	str	r3, [r7, #48]	@ 0x30
 8011516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011518:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801151a:	fb03 f202 	mul.w	r2, r3, r2
 801151e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011522:	4413      	add	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801152a:	4413      	add	r3, r2
 801152c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011530:	2300      	movs	r3, #0
 8011532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011536:	e011      	b.n	801155c <arm_mat_inverse_f32+0x33e>
 8011538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801153c:	1d1a      	adds	r2, r3, #4
 801153e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011542:	ed93 7a00 	vldr	s14, [r3]
 8011546:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801154a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801154e:	edc3 7a00 	vstr	s15, [r3]
 8011552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011556:	3301      	adds	r3, #1
 8011558:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801155c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011562:	429a      	cmp	r2, r3
 8011564:	dbe8      	blt.n	8011538 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	885b      	ldrh	r3, [r3, #2]
 8011572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801157c:	fb02 f303 	mul.w	r3, r2, r3
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011586:	4413      	add	r3, r2
 8011588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801158c:	2300      	movs	r3, #0
 801158e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011592:	e011      	b.n	80115b8 <arm_mat_inverse_f32+0x39a>
 8011594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011598:	1d1a      	adds	r2, r3, #4
 801159a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801159e:	ed93 7a00 	vldr	s14, [r3]
 80115a2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115aa:	edc3 7a00 	vstr	s15, [r3]
 80115ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80115b2:	3301      	adds	r3, #1
 80115b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80115b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80115bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115be:	429a      	cmp	r2, r3
 80115c0:	dbe8      	blt.n	8011594 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80115c8:	e0ae      	b.n	8011728 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	885b      	ldrh	r3, [r3, #2]
 80115d2:	4619      	mov	r1, r3
 80115d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80115d8:	fb03 f101 	mul.w	r1, r3, r1
 80115dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115e0:	440b      	add	r3, r1
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80115ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	885b      	ldrh	r3, [r3, #2]
 8011608:	617b      	str	r3, [r7, #20]
 801160a:	697a      	ldr	r2, [r7, #20]
 801160c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	613b      	str	r3, [r7, #16]
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801161a:	fb03 f202 	mul.w	r2, r3, r2
 801161e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011622:	4413      	add	r3, r2
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801162a:	4413      	add	r3, r2
 801162c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011634:	fb03 f202 	mul.w	r2, r3, r2
 8011638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801163c:	4413      	add	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011644:	4413      	add	r3, r2
 8011646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801164a:	2300      	movs	r3, #0
 801164c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011650:	e01a      	b.n	8011688 <arm_mat_inverse_f32+0x46a>
 8011652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011656:	1d1a      	adds	r2, r3, #4
 8011658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801165c:	ed93 7a00 	vldr	s14, [r3]
 8011660:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011668:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801166c:	1d1a      	adds	r2, r3, #4
 801166e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011672:	ed93 7a00 	vldr	s14, [r3]
 8011676:	ee77 7a67 	vsub.f32	s15, s14, s15
 801167a:	edc3 7a00 	vstr	s15, [r3]
 801167e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011682:	3301      	adds	r3, #1
 8011684:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011688:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	429a      	cmp	r2, r3
 8011690:	dbdf      	blt.n	8011652 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	885b      	ldrh	r3, [r3, #2]
 80116a6:	60fb      	str	r3, [r7, #12]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	60bb      	str	r3, [r7, #8]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80116b2:	fb02 f303 	mul.w	r3, r2, r3
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80116bc:	4413      	add	r3, r2
 80116be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80116c6:	fb02 f303 	mul.w	r3, r2, r3
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80116d0:	4413      	add	r3, r2
 80116d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80116d6:	2300      	movs	r3, #0
 80116d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80116dc:	e01a      	b.n	8011714 <arm_mat_inverse_f32+0x4f6>
 80116de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80116e2:	1d1a      	adds	r2, r3, #4
 80116e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80116e8:	ed93 7a00 	vldr	s14, [r3]
 80116ec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80116f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116f8:	1d1a      	adds	r2, r3, #4
 80116fa:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80116fe:	ed93 7a00 	vldr	s14, [r3]
 8011702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011706:	edc3 7a00 	vstr	s15, [r3]
 801170a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801170e:	3301      	adds	r3, #1
 8011710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011714:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	429a      	cmp	r2, r3
 801171c:	dbdf      	blt.n	80116de <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 801171e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011722:	3301      	adds	r3, #1
 8011724:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011728:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801172c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801172e:	429a      	cmp	r2, r3
 8011730:	f4ff af4b 	bcc.w	80115ca <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011736:	3301      	adds	r3, #1
 8011738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801173c:	e092      	b.n	8011864 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	885b      	ldrh	r3, [r3, #2]
 8011746:	4619      	mov	r1, r3
 8011748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801174c:	fb03 f101 	mul.w	r1, r3, r1
 8011750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011754:	440b      	add	r3, r1
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	4413      	add	r3, r2
 801175a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 801175e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	677b      	str	r3, [r7, #116]	@ 0x74
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	885b      	ldrh	r3, [r3, #2]
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
 801177a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801177c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	623b      	str	r3, [r7, #32]
 8011784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011786:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801178a:	fb03 f202 	mul.w	r2, r3, r2
 801178e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011792:	4413      	add	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011798:	4413      	add	r3, r2
 801179a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801179e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117a0:	fb03 f202 	mul.w	r2, r3, r2
 80117a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80117a8:	4413      	add	r3, r2
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80117ae:	4413      	add	r3, r2
 80117b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80117b2:	2300      	movs	r3, #0
 80117b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80117b6:	e014      	b.n	80117e2 <arm_mat_inverse_f32+0x5c4>
 80117b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117ba:	1d1a      	adds	r2, r3, #4
 80117bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80117be:	ed93 7a00 	vldr	s14, [r3]
 80117c2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80117c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80117cc:	1d1a      	adds	r2, r3, #4
 80117ce:	67ba      	str	r2, [r7, #120]	@ 0x78
 80117d0:	ed93 7a00 	vldr	s14, [r3]
 80117d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117d8:	edc3 7a00 	vstr	s15, [r3]
 80117dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80117de:	3301      	adds	r3, #1
 80117e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80117e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	dbe6      	blt.n	80117b8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	885b      	ldrh	r3, [r3, #2]
 80117fa:	61fb      	str	r3, [r7, #28]
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	61bb      	str	r3, [r7, #24]
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011806:	fb02 f303 	mul.w	r3, r2, r3
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801180e:	4413      	add	r3, r2
 8011810:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011816:	fb02 f303 	mul.w	r3, r2, r3
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801181e:	4413      	add	r3, r2
 8011820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011822:	2300      	movs	r3, #0
 8011824:	673b      	str	r3, [r7, #112]	@ 0x70
 8011826:	e014      	b.n	8011852 <arm_mat_inverse_f32+0x634>
 8011828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801182a:	1d1a      	adds	r2, r3, #4
 801182c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801182e:	ed93 7a00 	vldr	s14, [r3]
 8011832:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801183a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801183c:	1d1a      	adds	r2, r3, #4
 801183e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011840:	ed93 7a00 	vldr	s14, [r3]
 8011844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011848:	edc3 7a00 	vstr	s15, [r3]
 801184c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801184e:	3301      	adds	r3, #1
 8011850:	673b      	str	r3, [r7, #112]	@ 0x70
 8011852:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	429a      	cmp	r2, r3
 8011858:	dbe6      	blt.n	8011828 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801185a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801185e:	3301      	adds	r3, #1
 8011860:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011864:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801186a:	429a      	cmp	r2, r3
 801186c:	f4ff af67 	bcc.w	801173e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8011870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011874:	3301      	adds	r3, #1
 8011876:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801187a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801187e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011880:	429a      	cmp	r2, r3
 8011882:	f4ff ad32 	bcc.w	80112ea <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011886:	2300      	movs	r3, #0
 8011888:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 801188c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011890:	2b01      	cmp	r3, #1
 8011892:	d033      	beq.n	80118fc <arm_mat_inverse_f32+0x6de>
 8011894:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011898:	eef5 7a40 	vcmp.f32	s15, #0.0
 801189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a0:	d12c      	bne.n	80118fc <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80118a8:	2300      	movs	r3, #0
 80118aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80118ae:	e010      	b.n	80118d2 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80118b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80118b8:	4413      	add	r3, r2
 80118ba:	edd3 7a00 	vldr	s15, [r3]
 80118be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c6:	d10d      	bne.n	80118e4 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80118c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80118cc:	3301      	adds	r3, #1
 80118ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80118d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80118d6:	fb02 f303 	mul.w	r3, r2, r3
 80118da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80118de:	429a      	cmp	r2, r3
 80118e0:	d3e6      	bcc.n	80118b0 <arm_mat_inverse_f32+0x692>
 80118e2:	e000      	b.n	80118e6 <arm_mat_inverse_f32+0x6c8>
            break;
 80118e4:	bf00      	nop
      }

      if (i == numRows * numCols)
 80118e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80118ea:	fb02 f303 	mul.w	r3, r2, r3
 80118ee:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d102      	bne.n	80118fc <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80118f6:	23fb      	movs	r3, #251	@ 0xfb
 80118f8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 80118fc:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8011900:	4618      	mov	r0, r3
 8011902:	37ec      	adds	r7, #236	@ 0xec
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 801190c:	b480      	push	{r7}
 801190e:	b093      	sub	sp, #76	@ 0x4c
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	881b      	ldrh	r3, [r3, #0]
 801193a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	885b      	ldrh	r3, [r3, #2]
 8011940:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	885b      	ldrh	r3, [r3, #2]
 8011946:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8011948:	2300      	movs	r3, #0
 801194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801194c:	8b7b      	ldrh	r3, [r7, #26]
 801194e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8011950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	4413      	add	r3, r2
 8011958:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 801195a:	8b3b      	ldrh	r3, [r7, #24]
 801195c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8011964:	f04f 0300 	mov.w	r3, #0
 8011968:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 801196a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801196c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 801196e:	8afb      	ldrh	r3, [r7, #22]
 8011970:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8011972:	e017      	b.n	80119a4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8011974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011976:	1d1a      	adds	r2, r3, #4
 8011978:	647a      	str	r2, [r7, #68]	@ 0x44
 801197a:	ed93 7a00 	vldr	s14, [r3]
 801197e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011980:	edd3 7a00 	vldr	s15, [r3]
 8011984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011988:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011990:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8011994:	8b3b      	ldrh	r3, [r7, #24]
 8011996:	009b      	lsls	r3, r3, #2
 8011998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801199a:	4413      	add	r3, r2
 801199c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a0:	3b01      	subs	r3, #1
 80119a2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 80119a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1e4      	bne.n	8011974 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ac:	1d1a      	adds	r2, r3, #4
 80119ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80119b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119b2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80119b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119b6:	3b01      	subs	r3, #1
 80119b8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80119ba:	8b3a      	ldrh	r2, [r7, #24]
 80119bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	6a3a      	ldr	r2, [r7, #32]
 80119c4:	4413      	add	r3, r2
 80119c6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 80119c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d1ca      	bne.n	8011964 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80119ce:	8b3b      	ldrh	r3, [r7, #24]
 80119d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119d2:	4413      	add	r3, r2
 80119d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 80119d6:	8afb      	ldrh	r3, [r7, #22]
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119dc:	4413      	add	r3, r2
 80119de:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 80119e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e2:	3b01      	subs	r3, #1
 80119e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 80119e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d1b1      	bne.n	8011950 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80119ec:	2300      	movs	r3, #0
 80119ee:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80119f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	374c      	adds	r7, #76	@ 0x4c
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b08b      	sub	sp, #44	@ 0x2c
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8011a0c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	885b      	ldrh	r3, [r3, #2]
 8011a24:	fb02 f303 	mul.w	r3, r2, r3
 8011a28:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011a2e:	e010      	b.n	8011a52 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8011a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a32:	1d1a      	adds	r2, r3, #4
 8011a34:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a36:	ed93 7a00 	vldr	s14, [r3]
 8011a3a:	6a3b      	ldr	r3, [r7, #32]
 8011a3c:	1d1a      	adds	r2, r3, #4
 8011a3e:	623a      	str	r2, [r7, #32]
 8011a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a48:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d1eb      	bne.n	8011a30 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8011a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	372c      	adds	r7, #44	@ 0x2c
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b08b      	sub	sp, #44	@ 0x2c
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	885b      	ldrh	r3, [r3, #2]
 8011a94:	fb02 f303 	mul.w	r3, r2, r3
 8011a98:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011a9e:	e013      	b.n	8011ac8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8011aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa2:	1d1a      	adds	r2, r3, #4
 8011aa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8011aa6:	ed93 7a00 	vldr	s14, [r3]
 8011aaa:	6a3b      	ldr	r3, [r7, #32]
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	623a      	str	r2, [r7, #32]
 8011ab0:	edd3 7a00 	vldr	s15, [r3]
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	1d1a      	adds	r2, r3, #4
 8011ab8:	61fa      	str	r2, [r7, #28]
 8011aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011abe:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1e8      	bne.n	8011aa0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011ad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	372c      	adds	r7, #44	@ 0x2c
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr

08011ae2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011ae2:	b480      	push	{r7}
 8011ae4:	b08b      	sub	sp, #44	@ 0x2c
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	6078      	str	r0, [r7, #4]
 8011aea:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	885b      	ldrh	r3, [r3, #2]
 8011b02:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8011b04:	89fb      	ldrh	r3, [r7, #14]
 8011b06:	61bb      	str	r3, [r7, #24]
 8011b08:	2300      	movs	r3, #0
 8011b0a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	693a      	ldr	r2, [r7, #16]
 8011b12:	4413      	add	r3, r2
 8011b14:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8011b16:	89bb      	ldrh	r3, [r7, #12]
 8011b18:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8011b1a:	e00d      	b.n	8011b38 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8011b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1e:	1d1a      	adds	r2, r3, #4
 8011b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	6a3b      	ldr	r3, [r7, #32]
 8011b26:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8011b28:	89fb      	ldrh	r3, [r7, #14]
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	6a3a      	ldr	r2, [r7, #32]
 8011b2e:	4413      	add	r3, r2
 8011b30:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	3b01      	subs	r3, #1
 8011b36:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1ee      	bne.n	8011b1c <arm_mat_trans_f32+0x3a>
      }

      i++;
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	3301      	adds	r3, #1
 8011b42:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	3b01      	subs	r3, #1
 8011b48:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d1dd      	bne.n	8011b0c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011b50:	2300      	movs	r3, #0
 8011b52:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8011b54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	372c      	adds	r7, #44	@ 0x2c
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <malloc>:
 8011b64:	4b02      	ldr	r3, [pc, #8]	@ (8011b70 <malloc+0xc>)
 8011b66:	4601      	mov	r1, r0
 8011b68:	6818      	ldr	r0, [r3, #0]
 8011b6a:	f000 b825 	b.w	8011bb8 <_malloc_r>
 8011b6e:	bf00      	nop
 8011b70:	20000144 	.word	0x20000144

08011b74 <sbrk_aligned>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	4e0f      	ldr	r6, [pc, #60]	@ (8011bb4 <sbrk_aligned+0x40>)
 8011b78:	460c      	mov	r4, r1
 8011b7a:	6831      	ldr	r1, [r6, #0]
 8011b7c:	4605      	mov	r5, r0
 8011b7e:	b911      	cbnz	r1, 8011b86 <sbrk_aligned+0x12>
 8011b80:	f000 f8ae 	bl	8011ce0 <_sbrk_r>
 8011b84:	6030      	str	r0, [r6, #0]
 8011b86:	4621      	mov	r1, r4
 8011b88:	4628      	mov	r0, r5
 8011b8a:	f000 f8a9 	bl	8011ce0 <_sbrk_r>
 8011b8e:	1c43      	adds	r3, r0, #1
 8011b90:	d103      	bne.n	8011b9a <sbrk_aligned+0x26>
 8011b92:	f04f 34ff 	mov.w	r4, #4294967295
 8011b96:	4620      	mov	r0, r4
 8011b98:	bd70      	pop	{r4, r5, r6, pc}
 8011b9a:	1cc4      	adds	r4, r0, #3
 8011b9c:	f024 0403 	bic.w	r4, r4, #3
 8011ba0:	42a0      	cmp	r0, r4
 8011ba2:	d0f8      	beq.n	8011b96 <sbrk_aligned+0x22>
 8011ba4:	1a21      	subs	r1, r4, r0
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f000 f89a 	bl	8011ce0 <_sbrk_r>
 8011bac:	3001      	adds	r0, #1
 8011bae:	d1f2      	bne.n	8011b96 <sbrk_aligned+0x22>
 8011bb0:	e7ef      	b.n	8011b92 <sbrk_aligned+0x1e>
 8011bb2:	bf00      	nop
 8011bb4:	20002238 	.word	0x20002238

08011bb8 <_malloc_r>:
 8011bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bbc:	1ccd      	adds	r5, r1, #3
 8011bbe:	f025 0503 	bic.w	r5, r5, #3
 8011bc2:	3508      	adds	r5, #8
 8011bc4:	2d0c      	cmp	r5, #12
 8011bc6:	bf38      	it	cc
 8011bc8:	250c      	movcc	r5, #12
 8011bca:	2d00      	cmp	r5, #0
 8011bcc:	4606      	mov	r6, r0
 8011bce:	db01      	blt.n	8011bd4 <_malloc_r+0x1c>
 8011bd0:	42a9      	cmp	r1, r5
 8011bd2:	d904      	bls.n	8011bde <_malloc_r+0x26>
 8011bd4:	230c      	movs	r3, #12
 8011bd6:	6033      	str	r3, [r6, #0]
 8011bd8:	2000      	movs	r0, #0
 8011bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011cb4 <_malloc_r+0xfc>
 8011be2:	f000 f869 	bl	8011cb8 <__malloc_lock>
 8011be6:	f8d8 3000 	ldr.w	r3, [r8]
 8011bea:	461c      	mov	r4, r3
 8011bec:	bb44      	cbnz	r4, 8011c40 <_malloc_r+0x88>
 8011bee:	4629      	mov	r1, r5
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ff ffbf 	bl	8011b74 <sbrk_aligned>
 8011bf6:	1c43      	adds	r3, r0, #1
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	d158      	bne.n	8011cae <_malloc_r+0xf6>
 8011bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8011c00:	4627      	mov	r7, r4
 8011c02:	2f00      	cmp	r7, #0
 8011c04:	d143      	bne.n	8011c8e <_malloc_r+0xd6>
 8011c06:	2c00      	cmp	r4, #0
 8011c08:	d04b      	beq.n	8011ca2 <_malloc_r+0xea>
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	4630      	mov	r0, r6
 8011c10:	eb04 0903 	add.w	r9, r4, r3
 8011c14:	f000 f864 	bl	8011ce0 <_sbrk_r>
 8011c18:	4581      	cmp	r9, r0
 8011c1a:	d142      	bne.n	8011ca2 <_malloc_r+0xea>
 8011c1c:	6821      	ldr	r1, [r4, #0]
 8011c1e:	1a6d      	subs	r5, r5, r1
 8011c20:	4629      	mov	r1, r5
 8011c22:	4630      	mov	r0, r6
 8011c24:	f7ff ffa6 	bl	8011b74 <sbrk_aligned>
 8011c28:	3001      	adds	r0, #1
 8011c2a:	d03a      	beq.n	8011ca2 <_malloc_r+0xea>
 8011c2c:	6823      	ldr	r3, [r4, #0]
 8011c2e:	442b      	add	r3, r5
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	f8d8 3000 	ldr.w	r3, [r8]
 8011c36:	685a      	ldr	r2, [r3, #4]
 8011c38:	bb62      	cbnz	r2, 8011c94 <_malloc_r+0xdc>
 8011c3a:	f8c8 7000 	str.w	r7, [r8]
 8011c3e:	e00f      	b.n	8011c60 <_malloc_r+0xa8>
 8011c40:	6822      	ldr	r2, [r4, #0]
 8011c42:	1b52      	subs	r2, r2, r5
 8011c44:	d420      	bmi.n	8011c88 <_malloc_r+0xd0>
 8011c46:	2a0b      	cmp	r2, #11
 8011c48:	d917      	bls.n	8011c7a <_malloc_r+0xc2>
 8011c4a:	1961      	adds	r1, r4, r5
 8011c4c:	42a3      	cmp	r3, r4
 8011c4e:	6025      	str	r5, [r4, #0]
 8011c50:	bf18      	it	ne
 8011c52:	6059      	strne	r1, [r3, #4]
 8011c54:	6863      	ldr	r3, [r4, #4]
 8011c56:	bf08      	it	eq
 8011c58:	f8c8 1000 	streq.w	r1, [r8]
 8011c5c:	5162      	str	r2, [r4, r5]
 8011c5e:	604b      	str	r3, [r1, #4]
 8011c60:	4630      	mov	r0, r6
 8011c62:	f000 f82f 	bl	8011cc4 <__malloc_unlock>
 8011c66:	f104 000b 	add.w	r0, r4, #11
 8011c6a:	1d23      	adds	r3, r4, #4
 8011c6c:	f020 0007 	bic.w	r0, r0, #7
 8011c70:	1ac2      	subs	r2, r0, r3
 8011c72:	bf1c      	itt	ne
 8011c74:	1a1b      	subne	r3, r3, r0
 8011c76:	50a3      	strne	r3, [r4, r2]
 8011c78:	e7af      	b.n	8011bda <_malloc_r+0x22>
 8011c7a:	6862      	ldr	r2, [r4, #4]
 8011c7c:	42a3      	cmp	r3, r4
 8011c7e:	bf0c      	ite	eq
 8011c80:	f8c8 2000 	streq.w	r2, [r8]
 8011c84:	605a      	strne	r2, [r3, #4]
 8011c86:	e7eb      	b.n	8011c60 <_malloc_r+0xa8>
 8011c88:	4623      	mov	r3, r4
 8011c8a:	6864      	ldr	r4, [r4, #4]
 8011c8c:	e7ae      	b.n	8011bec <_malloc_r+0x34>
 8011c8e:	463c      	mov	r4, r7
 8011c90:	687f      	ldr	r7, [r7, #4]
 8011c92:	e7b6      	b.n	8011c02 <_malloc_r+0x4a>
 8011c94:	461a      	mov	r2, r3
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	42a3      	cmp	r3, r4
 8011c9a:	d1fb      	bne.n	8011c94 <_malloc_r+0xdc>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	6053      	str	r3, [r2, #4]
 8011ca0:	e7de      	b.n	8011c60 <_malloc_r+0xa8>
 8011ca2:	230c      	movs	r3, #12
 8011ca4:	6033      	str	r3, [r6, #0]
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f000 f80c 	bl	8011cc4 <__malloc_unlock>
 8011cac:	e794      	b.n	8011bd8 <_malloc_r+0x20>
 8011cae:	6005      	str	r5, [r0, #0]
 8011cb0:	e7d6      	b.n	8011c60 <_malloc_r+0xa8>
 8011cb2:	bf00      	nop
 8011cb4:	2000223c 	.word	0x2000223c

08011cb8 <__malloc_lock>:
 8011cb8:	4801      	ldr	r0, [pc, #4]	@ (8011cc0 <__malloc_lock+0x8>)
 8011cba:	f000 b84b 	b.w	8011d54 <__retarget_lock_acquire_recursive>
 8011cbe:	bf00      	nop
 8011cc0:	2000237c 	.word	0x2000237c

08011cc4 <__malloc_unlock>:
 8011cc4:	4801      	ldr	r0, [pc, #4]	@ (8011ccc <__malloc_unlock+0x8>)
 8011cc6:	f000 b846 	b.w	8011d56 <__retarget_lock_release_recursive>
 8011cca:	bf00      	nop
 8011ccc:	2000237c 	.word	0x2000237c

08011cd0 <memset>:
 8011cd0:	4402      	add	r2, r0
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d100      	bne.n	8011cda <memset+0xa>
 8011cd8:	4770      	bx	lr
 8011cda:	f803 1b01 	strb.w	r1, [r3], #1
 8011cde:	e7f9      	b.n	8011cd4 <memset+0x4>

08011ce0 <_sbrk_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	4d06      	ldr	r5, [pc, #24]	@ (8011cfc <_sbrk_r+0x1c>)
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	4608      	mov	r0, r1
 8011cea:	602b      	str	r3, [r5, #0]
 8011cec:	f7f7 f926 	bl	8008f3c <_sbrk>
 8011cf0:	1c43      	adds	r3, r0, #1
 8011cf2:	d102      	bne.n	8011cfa <_sbrk_r+0x1a>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	b103      	cbz	r3, 8011cfa <_sbrk_r+0x1a>
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	20002378 	.word	0x20002378

08011d00 <__errno>:
 8011d00:	4b01      	ldr	r3, [pc, #4]	@ (8011d08 <__errno+0x8>)
 8011d02:	6818      	ldr	r0, [r3, #0]
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	20000144 	.word	0x20000144

08011d0c <__libc_init_array>:
 8011d0c:	b570      	push	{r4, r5, r6, lr}
 8011d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8011d44 <__libc_init_array+0x38>)
 8011d10:	4c0d      	ldr	r4, [pc, #52]	@ (8011d48 <__libc_init_array+0x3c>)
 8011d12:	1b64      	subs	r4, r4, r5
 8011d14:	10a4      	asrs	r4, r4, #2
 8011d16:	2600      	movs	r6, #0
 8011d18:	42a6      	cmp	r6, r4
 8011d1a:	d109      	bne.n	8011d30 <__libc_init_array+0x24>
 8011d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8011d4c <__libc_init_array+0x40>)
 8011d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8011d50 <__libc_init_array+0x44>)
 8011d20:	f001 ff32 	bl	8013b88 <_init>
 8011d24:	1b64      	subs	r4, r4, r5
 8011d26:	10a4      	asrs	r4, r4, #2
 8011d28:	2600      	movs	r6, #0
 8011d2a:	42a6      	cmp	r6, r4
 8011d2c:	d105      	bne.n	8011d3a <__libc_init_array+0x2e>
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d34:	4798      	blx	r3
 8011d36:	3601      	adds	r6, #1
 8011d38:	e7ee      	b.n	8011d18 <__libc_init_array+0xc>
 8011d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d3e:	4798      	blx	r3
 8011d40:	3601      	adds	r6, #1
 8011d42:	e7f2      	b.n	8011d2a <__libc_init_array+0x1e>
 8011d44:	08014208 	.word	0x08014208
 8011d48:	08014208 	.word	0x08014208
 8011d4c:	08014208 	.word	0x08014208
 8011d50:	0801420c 	.word	0x0801420c

08011d54 <__retarget_lock_acquire_recursive>:
 8011d54:	4770      	bx	lr

08011d56 <__retarget_lock_release_recursive>:
 8011d56:	4770      	bx	lr

08011d58 <memcpy>:
 8011d58:	440a      	add	r2, r1
 8011d5a:	4291      	cmp	r1, r2
 8011d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d60:	d100      	bne.n	8011d64 <memcpy+0xc>
 8011d62:	4770      	bx	lr
 8011d64:	b510      	push	{r4, lr}
 8011d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d6e:	4291      	cmp	r1, r2
 8011d70:	d1f9      	bne.n	8011d66 <memcpy+0xe>
 8011d72:	bd10      	pop	{r4, pc}
 8011d74:	0000      	movs	r0, r0
	...

08011d78 <cos>:
 8011d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d7a:	ec53 2b10 	vmov	r2, r3, d0
 8011d7e:	4826      	ldr	r0, [pc, #152]	@ (8011e18 <cos+0xa0>)
 8011d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011d84:	4281      	cmp	r1, r0
 8011d86:	d806      	bhi.n	8011d96 <cos+0x1e>
 8011d88:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011e10 <cos+0x98>
 8011d8c:	b005      	add	sp, #20
 8011d8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d92:	f000 b9bd 	b.w	8012110 <__kernel_cos>
 8011d96:	4821      	ldr	r0, [pc, #132]	@ (8011e1c <cos+0xa4>)
 8011d98:	4281      	cmp	r1, r0
 8011d9a:	d908      	bls.n	8011dae <cos+0x36>
 8011d9c:	4610      	mov	r0, r2
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f7ee fa3e 	bl	8000220 <__aeabi_dsub>
 8011da4:	ec41 0b10 	vmov	d0, r0, r1
 8011da8:	b005      	add	sp, #20
 8011daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dae:	4668      	mov	r0, sp
 8011db0:	f000 fb32 	bl	8012418 <__ieee754_rem_pio2>
 8011db4:	f000 0003 	and.w	r0, r0, #3
 8011db8:	2801      	cmp	r0, #1
 8011dba:	d00b      	beq.n	8011dd4 <cos+0x5c>
 8011dbc:	2802      	cmp	r0, #2
 8011dbe:	d015      	beq.n	8011dec <cos+0x74>
 8011dc0:	b9d8      	cbnz	r0, 8011dfa <cos+0x82>
 8011dc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dc6:	ed9d 0b00 	vldr	d0, [sp]
 8011dca:	f000 f9a1 	bl	8012110 <__kernel_cos>
 8011dce:	ec51 0b10 	vmov	r0, r1, d0
 8011dd2:	e7e7      	b.n	8011da4 <cos+0x2c>
 8011dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dd8:	ed9d 0b00 	vldr	d0, [sp]
 8011ddc:	f000 fa60 	bl	80122a0 <__kernel_sin>
 8011de0:	ec53 2b10 	vmov	r2, r3, d0
 8011de4:	4610      	mov	r0, r2
 8011de6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011dea:	e7db      	b.n	8011da4 <cos+0x2c>
 8011dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011df0:	ed9d 0b00 	vldr	d0, [sp]
 8011df4:	f000 f98c 	bl	8012110 <__kernel_cos>
 8011df8:	e7f2      	b.n	8011de0 <cos+0x68>
 8011dfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dfe:	ed9d 0b00 	vldr	d0, [sp]
 8011e02:	2001      	movs	r0, #1
 8011e04:	f000 fa4c 	bl	80122a0 <__kernel_sin>
 8011e08:	e7e1      	b.n	8011dce <cos+0x56>
 8011e0a:	bf00      	nop
 8011e0c:	f3af 8000 	nop.w
	...
 8011e18:	3fe921fb 	.word	0x3fe921fb
 8011e1c:	7fefffff 	.word	0x7fefffff

08011e20 <sin>:
 8011e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e22:	ec53 2b10 	vmov	r2, r3, d0
 8011e26:	4826      	ldr	r0, [pc, #152]	@ (8011ec0 <sin+0xa0>)
 8011e28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011e2c:	4281      	cmp	r1, r0
 8011e2e:	d807      	bhi.n	8011e40 <sin+0x20>
 8011e30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011eb8 <sin+0x98>
 8011e34:	2000      	movs	r0, #0
 8011e36:	b005      	add	sp, #20
 8011e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e3c:	f000 ba30 	b.w	80122a0 <__kernel_sin>
 8011e40:	4820      	ldr	r0, [pc, #128]	@ (8011ec4 <sin+0xa4>)
 8011e42:	4281      	cmp	r1, r0
 8011e44:	d908      	bls.n	8011e58 <sin+0x38>
 8011e46:	4610      	mov	r0, r2
 8011e48:	4619      	mov	r1, r3
 8011e4a:	f7ee f9e9 	bl	8000220 <__aeabi_dsub>
 8011e4e:	ec41 0b10 	vmov	d0, r0, r1
 8011e52:	b005      	add	sp, #20
 8011e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e58:	4668      	mov	r0, sp
 8011e5a:	f000 fadd 	bl	8012418 <__ieee754_rem_pio2>
 8011e5e:	f000 0003 	and.w	r0, r0, #3
 8011e62:	2801      	cmp	r0, #1
 8011e64:	d00c      	beq.n	8011e80 <sin+0x60>
 8011e66:	2802      	cmp	r0, #2
 8011e68:	d011      	beq.n	8011e8e <sin+0x6e>
 8011e6a:	b9e8      	cbnz	r0, 8011ea8 <sin+0x88>
 8011e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e70:	ed9d 0b00 	vldr	d0, [sp]
 8011e74:	2001      	movs	r0, #1
 8011e76:	f000 fa13 	bl	80122a0 <__kernel_sin>
 8011e7a:	ec51 0b10 	vmov	r0, r1, d0
 8011e7e:	e7e6      	b.n	8011e4e <sin+0x2e>
 8011e80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e84:	ed9d 0b00 	vldr	d0, [sp]
 8011e88:	f000 f942 	bl	8012110 <__kernel_cos>
 8011e8c:	e7f5      	b.n	8011e7a <sin+0x5a>
 8011e8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e92:	ed9d 0b00 	vldr	d0, [sp]
 8011e96:	2001      	movs	r0, #1
 8011e98:	f000 fa02 	bl	80122a0 <__kernel_sin>
 8011e9c:	ec53 2b10 	vmov	r2, r3, d0
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011ea6:	e7d2      	b.n	8011e4e <sin+0x2e>
 8011ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011eac:	ed9d 0b00 	vldr	d0, [sp]
 8011eb0:	f000 f92e 	bl	8012110 <__kernel_cos>
 8011eb4:	e7f2      	b.n	8011e9c <sin+0x7c>
 8011eb6:	bf00      	nop
	...
 8011ec0:	3fe921fb 	.word	0x3fe921fb
 8011ec4:	7fefffff 	.word	0x7fefffff

08011ec8 <fmodf>:
 8011ec8:	b508      	push	{r3, lr}
 8011eca:	ed2d 8b02 	vpush	{d8}
 8011ece:	eef0 8a40 	vmov.f32	s17, s0
 8011ed2:	eeb0 8a60 	vmov.f32	s16, s1
 8011ed6:	f000 fd43 	bl	8012960 <__ieee754_fmodf>
 8011eda:	eef4 8a48 	vcmp.f32	s17, s16
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	d60c      	bvs.n	8011efe <fmodf+0x36>
 8011ee4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011f04 <fmodf+0x3c>
 8011ee8:	eeb4 8a68 	vcmp.f32	s16, s17
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	d105      	bne.n	8011efe <fmodf+0x36>
 8011ef2:	f7ff ff05 	bl	8011d00 <__errno>
 8011ef6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011efa:	2321      	movs	r3, #33	@ 0x21
 8011efc:	6003      	str	r3, [r0, #0]
 8011efe:	ecbd 8b02 	vpop	{d8}
 8011f02:	bd08      	pop	{r3, pc}
 8011f04:	00000000 	.word	0x00000000

08011f08 <sqrtf>:
 8011f08:	b508      	push	{r3, lr}
 8011f0a:	ed2d 8b02 	vpush	{d8}
 8011f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8011f12:	f000 f8f7 	bl	8012104 <__ieee754_sqrtf>
 8011f16:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	d60c      	bvs.n	8011f3a <sqrtf+0x32>
 8011f20:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011f40 <sqrtf+0x38>
 8011f24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2c:	d505      	bpl.n	8011f3a <sqrtf+0x32>
 8011f2e:	f7ff fee7 	bl	8011d00 <__errno>
 8011f32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011f36:	2321      	movs	r3, #33	@ 0x21
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	ecbd 8b02 	vpop	{d8}
 8011f3e:	bd08      	pop	{r3, pc}
 8011f40:	00000000 	.word	0x00000000

08011f44 <cosf>:
 8011f44:	ee10 3a10 	vmov	r3, s0
 8011f48:	b507      	push	{r0, r1, r2, lr}
 8011f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8011fc4 <cosf+0x80>)
 8011f4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011f50:	4293      	cmp	r3, r2
 8011f52:	d806      	bhi.n	8011f62 <cosf+0x1e>
 8011f54:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011fc8 <cosf+0x84>
 8011f58:	b003      	add	sp, #12
 8011f5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f5e:	f000 bc5f 	b.w	8012820 <__kernel_cosf>
 8011f62:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011f66:	d304      	bcc.n	8011f72 <cosf+0x2e>
 8011f68:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011f6c:	b003      	add	sp, #12
 8011f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f72:	4668      	mov	r0, sp
 8011f74:	f000 fd76 	bl	8012a64 <__ieee754_rem_pio2f>
 8011f78:	f000 0003 	and.w	r0, r0, #3
 8011f7c:	2801      	cmp	r0, #1
 8011f7e:	d009      	beq.n	8011f94 <cosf+0x50>
 8011f80:	2802      	cmp	r0, #2
 8011f82:	d010      	beq.n	8011fa6 <cosf+0x62>
 8011f84:	b9b0      	cbnz	r0, 8011fb4 <cosf+0x70>
 8011f86:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f8a:	ed9d 0a00 	vldr	s0, [sp]
 8011f8e:	f000 fc47 	bl	8012820 <__kernel_cosf>
 8011f92:	e7eb      	b.n	8011f6c <cosf+0x28>
 8011f94:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f98:	ed9d 0a00 	vldr	s0, [sp]
 8011f9c:	f000 fc98 	bl	80128d0 <__kernel_sinf>
 8011fa0:	eeb1 0a40 	vneg.f32	s0, s0
 8011fa4:	e7e2      	b.n	8011f6c <cosf+0x28>
 8011fa6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011faa:	ed9d 0a00 	vldr	s0, [sp]
 8011fae:	f000 fc37 	bl	8012820 <__kernel_cosf>
 8011fb2:	e7f5      	b.n	8011fa0 <cosf+0x5c>
 8011fb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8011fb8:	ed9d 0a00 	vldr	s0, [sp]
 8011fbc:	2001      	movs	r0, #1
 8011fbe:	f000 fc87 	bl	80128d0 <__kernel_sinf>
 8011fc2:	e7d3      	b.n	8011f6c <cosf+0x28>
 8011fc4:	3f490fd8 	.word	0x3f490fd8
 8011fc8:	00000000 	.word	0x00000000

08011fcc <sinf>:
 8011fcc:	ee10 3a10 	vmov	r3, s0
 8011fd0:	b507      	push	{r0, r1, r2, lr}
 8011fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8012050 <sinf+0x84>)
 8011fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d807      	bhi.n	8011fec <sinf+0x20>
 8011fdc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012054 <sinf+0x88>
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	b003      	add	sp, #12
 8011fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fe8:	f000 bc72 	b.w	80128d0 <__kernel_sinf>
 8011fec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ff0:	d304      	bcc.n	8011ffc <sinf+0x30>
 8011ff2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011ff6:	b003      	add	sp, #12
 8011ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ffc:	4668      	mov	r0, sp
 8011ffe:	f000 fd31 	bl	8012a64 <__ieee754_rem_pio2f>
 8012002:	f000 0003 	and.w	r0, r0, #3
 8012006:	2801      	cmp	r0, #1
 8012008:	d00a      	beq.n	8012020 <sinf+0x54>
 801200a:	2802      	cmp	r0, #2
 801200c:	d00f      	beq.n	801202e <sinf+0x62>
 801200e:	b9c0      	cbnz	r0, 8012042 <sinf+0x76>
 8012010:	eddd 0a01 	vldr	s1, [sp, #4]
 8012014:	ed9d 0a00 	vldr	s0, [sp]
 8012018:	2001      	movs	r0, #1
 801201a:	f000 fc59 	bl	80128d0 <__kernel_sinf>
 801201e:	e7ea      	b.n	8011ff6 <sinf+0x2a>
 8012020:	eddd 0a01 	vldr	s1, [sp, #4]
 8012024:	ed9d 0a00 	vldr	s0, [sp]
 8012028:	f000 fbfa 	bl	8012820 <__kernel_cosf>
 801202c:	e7e3      	b.n	8011ff6 <sinf+0x2a>
 801202e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012032:	ed9d 0a00 	vldr	s0, [sp]
 8012036:	2001      	movs	r0, #1
 8012038:	f000 fc4a 	bl	80128d0 <__kernel_sinf>
 801203c:	eeb1 0a40 	vneg.f32	s0, s0
 8012040:	e7d9      	b.n	8011ff6 <sinf+0x2a>
 8012042:	eddd 0a01 	vldr	s1, [sp, #4]
 8012046:	ed9d 0a00 	vldr	s0, [sp]
 801204a:	f000 fbe9 	bl	8012820 <__kernel_cosf>
 801204e:	e7f5      	b.n	801203c <sinf+0x70>
 8012050:	3f490fd8 	.word	0x3f490fd8
 8012054:	00000000 	.word	0x00000000

08012058 <fmaxf>:
 8012058:	b508      	push	{r3, lr}
 801205a:	ed2d 8b02 	vpush	{d8}
 801205e:	eeb0 8a40 	vmov.f32	s16, s0
 8012062:	eef0 8a60 	vmov.f32	s17, s1
 8012066:	f000 f831 	bl	80120cc <__fpclassifyf>
 801206a:	b930      	cbnz	r0, 801207a <fmaxf+0x22>
 801206c:	eeb0 8a68 	vmov.f32	s16, s17
 8012070:	eeb0 0a48 	vmov.f32	s0, s16
 8012074:	ecbd 8b02 	vpop	{d8}
 8012078:	bd08      	pop	{r3, pc}
 801207a:	eeb0 0a68 	vmov.f32	s0, s17
 801207e:	f000 f825 	bl	80120cc <__fpclassifyf>
 8012082:	2800      	cmp	r0, #0
 8012084:	d0f4      	beq.n	8012070 <fmaxf+0x18>
 8012086:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208e:	dded      	ble.n	801206c <fmaxf+0x14>
 8012090:	e7ee      	b.n	8012070 <fmaxf+0x18>

08012092 <fminf>:
 8012092:	b508      	push	{r3, lr}
 8012094:	ed2d 8b02 	vpush	{d8}
 8012098:	eeb0 8a40 	vmov.f32	s16, s0
 801209c:	eef0 8a60 	vmov.f32	s17, s1
 80120a0:	f000 f814 	bl	80120cc <__fpclassifyf>
 80120a4:	b930      	cbnz	r0, 80120b4 <fminf+0x22>
 80120a6:	eeb0 8a68 	vmov.f32	s16, s17
 80120aa:	eeb0 0a48 	vmov.f32	s0, s16
 80120ae:	ecbd 8b02 	vpop	{d8}
 80120b2:	bd08      	pop	{r3, pc}
 80120b4:	eeb0 0a68 	vmov.f32	s0, s17
 80120b8:	f000 f808 	bl	80120cc <__fpclassifyf>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d0f4      	beq.n	80120aa <fminf+0x18>
 80120c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80120c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c8:	d5ed      	bpl.n	80120a6 <fminf+0x14>
 80120ca:	e7ee      	b.n	80120aa <fminf+0x18>

080120cc <__fpclassifyf>:
 80120cc:	ee10 3a10 	vmov	r3, s0
 80120d0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80120d4:	d00d      	beq.n	80120f2 <__fpclassifyf+0x26>
 80120d6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80120da:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80120de:	d30a      	bcc.n	80120f6 <__fpclassifyf+0x2a>
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <__fpclassifyf+0x34>)
 80120e2:	1e42      	subs	r2, r0, #1
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d908      	bls.n	80120fa <__fpclassifyf+0x2e>
 80120e8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80120ec:	4258      	negs	r0, r3
 80120ee:	4158      	adcs	r0, r3
 80120f0:	4770      	bx	lr
 80120f2:	2002      	movs	r0, #2
 80120f4:	4770      	bx	lr
 80120f6:	2004      	movs	r0, #4
 80120f8:	4770      	bx	lr
 80120fa:	2003      	movs	r0, #3
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	007ffffe 	.word	0x007ffffe

08012104 <__ieee754_sqrtf>:
 8012104:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012108:	4770      	bx	lr
 801210a:	0000      	movs	r0, r0
 801210c:	0000      	movs	r0, r0
	...

08012110 <__kernel_cos>:
 8012110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	ec57 6b10 	vmov	r6, r7, d0
 8012118:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801211c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012120:	ed8d 1b00 	vstr	d1, [sp]
 8012124:	d206      	bcs.n	8012134 <__kernel_cos+0x24>
 8012126:	4630      	mov	r0, r6
 8012128:	4639      	mov	r1, r7
 801212a:	f7ee fccb 	bl	8000ac4 <__aeabi_d2iz>
 801212e:	2800      	cmp	r0, #0
 8012130:	f000 8088 	beq.w	8012244 <__kernel_cos+0x134>
 8012134:	4632      	mov	r2, r6
 8012136:	463b      	mov	r3, r7
 8012138:	4630      	mov	r0, r6
 801213a:	4639      	mov	r1, r7
 801213c:	f7ee fa28 	bl	8000590 <__aeabi_dmul>
 8012140:	4b51      	ldr	r3, [pc, #324]	@ (8012288 <__kernel_cos+0x178>)
 8012142:	2200      	movs	r2, #0
 8012144:	4604      	mov	r4, r0
 8012146:	460d      	mov	r5, r1
 8012148:	f7ee fa22 	bl	8000590 <__aeabi_dmul>
 801214c:	a340      	add	r3, pc, #256	@ (adr r3, 8012250 <__kernel_cos+0x140>)
 801214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012152:	4682      	mov	sl, r0
 8012154:	468b      	mov	fp, r1
 8012156:	4620      	mov	r0, r4
 8012158:	4629      	mov	r1, r5
 801215a:	f7ee fa19 	bl	8000590 <__aeabi_dmul>
 801215e:	a33e      	add	r3, pc, #248	@ (adr r3, 8012258 <__kernel_cos+0x148>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f85e 	bl	8000224 <__adddf3>
 8012168:	4622      	mov	r2, r4
 801216a:	462b      	mov	r3, r5
 801216c:	f7ee fa10 	bl	8000590 <__aeabi_dmul>
 8012170:	a33b      	add	r3, pc, #236	@ (adr r3, 8012260 <__kernel_cos+0x150>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f7ee f853 	bl	8000220 <__aeabi_dsub>
 801217a:	4622      	mov	r2, r4
 801217c:	462b      	mov	r3, r5
 801217e:	f7ee fa07 	bl	8000590 <__aeabi_dmul>
 8012182:	a339      	add	r3, pc, #228	@ (adr r3, 8012268 <__kernel_cos+0x158>)
 8012184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012188:	f7ee f84c 	bl	8000224 <__adddf3>
 801218c:	4622      	mov	r2, r4
 801218e:	462b      	mov	r3, r5
 8012190:	f7ee f9fe 	bl	8000590 <__aeabi_dmul>
 8012194:	a336      	add	r3, pc, #216	@ (adr r3, 8012270 <__kernel_cos+0x160>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	f7ee f841 	bl	8000220 <__aeabi_dsub>
 801219e:	4622      	mov	r2, r4
 80121a0:	462b      	mov	r3, r5
 80121a2:	f7ee f9f5 	bl	8000590 <__aeabi_dmul>
 80121a6:	a334      	add	r3, pc, #208	@ (adr r3, 8012278 <__kernel_cos+0x168>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f7ee f83a 	bl	8000224 <__adddf3>
 80121b0:	4622      	mov	r2, r4
 80121b2:	462b      	mov	r3, r5
 80121b4:	f7ee f9ec 	bl	8000590 <__aeabi_dmul>
 80121b8:	4622      	mov	r2, r4
 80121ba:	462b      	mov	r3, r5
 80121bc:	f7ee f9e8 	bl	8000590 <__aeabi_dmul>
 80121c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121c4:	4604      	mov	r4, r0
 80121c6:	460d      	mov	r5, r1
 80121c8:	4630      	mov	r0, r6
 80121ca:	4639      	mov	r1, r7
 80121cc:	f7ee f9e0 	bl	8000590 <__aeabi_dmul>
 80121d0:	460b      	mov	r3, r1
 80121d2:	4602      	mov	r2, r0
 80121d4:	4629      	mov	r1, r5
 80121d6:	4620      	mov	r0, r4
 80121d8:	f7ee f822 	bl	8000220 <__aeabi_dsub>
 80121dc:	4b2b      	ldr	r3, [pc, #172]	@ (801228c <__kernel_cos+0x17c>)
 80121de:	4598      	cmp	r8, r3
 80121e0:	4606      	mov	r6, r0
 80121e2:	460f      	mov	r7, r1
 80121e4:	d810      	bhi.n	8012208 <__kernel_cos+0xf8>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	4650      	mov	r0, sl
 80121ec:	4659      	mov	r1, fp
 80121ee:	f7ee f817 	bl	8000220 <__aeabi_dsub>
 80121f2:	460b      	mov	r3, r1
 80121f4:	4926      	ldr	r1, [pc, #152]	@ (8012290 <__kernel_cos+0x180>)
 80121f6:	4602      	mov	r2, r0
 80121f8:	2000      	movs	r0, #0
 80121fa:	f7ee f811 	bl	8000220 <__aeabi_dsub>
 80121fe:	ec41 0b10 	vmov	d0, r0, r1
 8012202:	b003      	add	sp, #12
 8012204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012208:	4b22      	ldr	r3, [pc, #136]	@ (8012294 <__kernel_cos+0x184>)
 801220a:	4921      	ldr	r1, [pc, #132]	@ (8012290 <__kernel_cos+0x180>)
 801220c:	4598      	cmp	r8, r3
 801220e:	bf8c      	ite	hi
 8012210:	4d21      	ldrhi	r5, [pc, #132]	@ (8012298 <__kernel_cos+0x188>)
 8012212:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012216:	2400      	movs	r4, #0
 8012218:	4622      	mov	r2, r4
 801221a:	462b      	mov	r3, r5
 801221c:	2000      	movs	r0, #0
 801221e:	f7ed ffff 	bl	8000220 <__aeabi_dsub>
 8012222:	4622      	mov	r2, r4
 8012224:	4680      	mov	r8, r0
 8012226:	4689      	mov	r9, r1
 8012228:	462b      	mov	r3, r5
 801222a:	4650      	mov	r0, sl
 801222c:	4659      	mov	r1, fp
 801222e:	f7ed fff7 	bl	8000220 <__aeabi_dsub>
 8012232:	4632      	mov	r2, r6
 8012234:	463b      	mov	r3, r7
 8012236:	f7ed fff3 	bl	8000220 <__aeabi_dsub>
 801223a:	4602      	mov	r2, r0
 801223c:	460b      	mov	r3, r1
 801223e:	4640      	mov	r0, r8
 8012240:	4649      	mov	r1, r9
 8012242:	e7da      	b.n	80121fa <__kernel_cos+0xea>
 8012244:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012280 <__kernel_cos+0x170>
 8012248:	e7db      	b.n	8012202 <__kernel_cos+0xf2>
 801224a:	bf00      	nop
 801224c:	f3af 8000 	nop.w
 8012250:	be8838d4 	.word	0xbe8838d4
 8012254:	bda8fae9 	.word	0xbda8fae9
 8012258:	bdb4b1c4 	.word	0xbdb4b1c4
 801225c:	3e21ee9e 	.word	0x3e21ee9e
 8012260:	809c52ad 	.word	0x809c52ad
 8012264:	3e927e4f 	.word	0x3e927e4f
 8012268:	19cb1590 	.word	0x19cb1590
 801226c:	3efa01a0 	.word	0x3efa01a0
 8012270:	16c15177 	.word	0x16c15177
 8012274:	3f56c16c 	.word	0x3f56c16c
 8012278:	5555554c 	.word	0x5555554c
 801227c:	3fa55555 	.word	0x3fa55555
 8012280:	00000000 	.word	0x00000000
 8012284:	3ff00000 	.word	0x3ff00000
 8012288:	3fe00000 	.word	0x3fe00000
 801228c:	3fd33332 	.word	0x3fd33332
 8012290:	3ff00000 	.word	0x3ff00000
 8012294:	3fe90000 	.word	0x3fe90000
 8012298:	3fd20000 	.word	0x3fd20000
 801229c:	00000000 	.word	0x00000000

080122a0 <__kernel_sin>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	ec55 4b10 	vmov	r4, r5, d0
 80122a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80122ac:	b085      	sub	sp, #20
 80122ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80122b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80122b6:	4680      	mov	r8, r0
 80122b8:	d205      	bcs.n	80122c6 <__kernel_sin+0x26>
 80122ba:	4620      	mov	r0, r4
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ee fc01 	bl	8000ac4 <__aeabi_d2iz>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d052      	beq.n	801236c <__kernel_sin+0xcc>
 80122c6:	4622      	mov	r2, r4
 80122c8:	462b      	mov	r3, r5
 80122ca:	4620      	mov	r0, r4
 80122cc:	4629      	mov	r1, r5
 80122ce:	f7ee f95f 	bl	8000590 <__aeabi_dmul>
 80122d2:	4682      	mov	sl, r0
 80122d4:	468b      	mov	fp, r1
 80122d6:	4602      	mov	r2, r0
 80122d8:	460b      	mov	r3, r1
 80122da:	4620      	mov	r0, r4
 80122dc:	4629      	mov	r1, r5
 80122de:	f7ee f957 	bl	8000590 <__aeabi_dmul>
 80122e2:	a342      	add	r3, pc, #264	@ (adr r3, 80123ec <__kernel_sin+0x14c>)
 80122e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e8:	e9cd 0100 	strd	r0, r1, [sp]
 80122ec:	4650      	mov	r0, sl
 80122ee:	4659      	mov	r1, fp
 80122f0:	f7ee f94e 	bl	8000590 <__aeabi_dmul>
 80122f4:	a33f      	add	r3, pc, #252	@ (adr r3, 80123f4 <__kernel_sin+0x154>)
 80122f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fa:	f7ed ff91 	bl	8000220 <__aeabi_dsub>
 80122fe:	4652      	mov	r2, sl
 8012300:	465b      	mov	r3, fp
 8012302:	f7ee f945 	bl	8000590 <__aeabi_dmul>
 8012306:	a33d      	add	r3, pc, #244	@ (adr r3, 80123fc <__kernel_sin+0x15c>)
 8012308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230c:	f7ed ff8a 	bl	8000224 <__adddf3>
 8012310:	4652      	mov	r2, sl
 8012312:	465b      	mov	r3, fp
 8012314:	f7ee f93c 	bl	8000590 <__aeabi_dmul>
 8012318:	a33a      	add	r3, pc, #232	@ (adr r3, 8012404 <__kernel_sin+0x164>)
 801231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231e:	f7ed ff7f 	bl	8000220 <__aeabi_dsub>
 8012322:	4652      	mov	r2, sl
 8012324:	465b      	mov	r3, fp
 8012326:	f7ee f933 	bl	8000590 <__aeabi_dmul>
 801232a:	a338      	add	r3, pc, #224	@ (adr r3, 801240c <__kernel_sin+0x16c>)
 801232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012330:	f7ed ff78 	bl	8000224 <__adddf3>
 8012334:	4606      	mov	r6, r0
 8012336:	460f      	mov	r7, r1
 8012338:	f1b8 0f00 	cmp.w	r8, #0
 801233c:	d11b      	bne.n	8012376 <__kernel_sin+0xd6>
 801233e:	4602      	mov	r2, r0
 8012340:	460b      	mov	r3, r1
 8012342:	4650      	mov	r0, sl
 8012344:	4659      	mov	r1, fp
 8012346:	f7ee f923 	bl	8000590 <__aeabi_dmul>
 801234a:	a325      	add	r3, pc, #148	@ (adr r3, 80123e0 <__kernel_sin+0x140>)
 801234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012350:	f7ed ff66 	bl	8000220 <__aeabi_dsub>
 8012354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012358:	f7ee f91a 	bl	8000590 <__aeabi_dmul>
 801235c:	4602      	mov	r2, r0
 801235e:	460b      	mov	r3, r1
 8012360:	4620      	mov	r0, r4
 8012362:	4629      	mov	r1, r5
 8012364:	f7ed ff5e 	bl	8000224 <__adddf3>
 8012368:	4604      	mov	r4, r0
 801236a:	460d      	mov	r5, r1
 801236c:	ec45 4b10 	vmov	d0, r4, r5
 8012370:	b005      	add	sp, #20
 8012372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801237a:	4b1b      	ldr	r3, [pc, #108]	@ (80123e8 <__kernel_sin+0x148>)
 801237c:	2200      	movs	r2, #0
 801237e:	f7ee f907 	bl	8000590 <__aeabi_dmul>
 8012382:	4632      	mov	r2, r6
 8012384:	4680      	mov	r8, r0
 8012386:	4689      	mov	r9, r1
 8012388:	463b      	mov	r3, r7
 801238a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801238e:	f7ee f8ff 	bl	8000590 <__aeabi_dmul>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	4640      	mov	r0, r8
 8012398:	4649      	mov	r1, r9
 801239a:	f7ed ff41 	bl	8000220 <__aeabi_dsub>
 801239e:	4652      	mov	r2, sl
 80123a0:	465b      	mov	r3, fp
 80123a2:	f7ee f8f5 	bl	8000590 <__aeabi_dmul>
 80123a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123aa:	f7ed ff39 	bl	8000220 <__aeabi_dsub>
 80123ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80123e0 <__kernel_sin+0x140>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	4606      	mov	r6, r0
 80123b6:	460f      	mov	r7, r1
 80123b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123bc:	f7ee f8e8 	bl	8000590 <__aeabi_dmul>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4630      	mov	r0, r6
 80123c6:	4639      	mov	r1, r7
 80123c8:	f7ed ff2c 	bl	8000224 <__adddf3>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	4620      	mov	r0, r4
 80123d2:	4629      	mov	r1, r5
 80123d4:	f7ed ff24 	bl	8000220 <__aeabi_dsub>
 80123d8:	e7c6      	b.n	8012368 <__kernel_sin+0xc8>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	55555549 	.word	0x55555549
 80123e4:	3fc55555 	.word	0x3fc55555
 80123e8:	3fe00000 	.word	0x3fe00000
 80123ec:	5acfd57c 	.word	0x5acfd57c
 80123f0:	3de5d93a 	.word	0x3de5d93a
 80123f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80123f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80123fc:	57b1fe7d 	.word	0x57b1fe7d
 8012400:	3ec71de3 	.word	0x3ec71de3
 8012404:	19c161d5 	.word	0x19c161d5
 8012408:	3f2a01a0 	.word	0x3f2a01a0
 801240c:	1110f8a6 	.word	0x1110f8a6
 8012410:	3f811111 	.word	0x3f811111
 8012414:	00000000 	.word	0x00000000

08012418 <__ieee754_rem_pio2>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	ec57 6b10 	vmov	r6, r7, d0
 8012420:	4bc5      	ldr	r3, [pc, #788]	@ (8012738 <__ieee754_rem_pio2+0x320>)
 8012422:	b08d      	sub	sp, #52	@ 0x34
 8012424:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012428:	4598      	cmp	r8, r3
 801242a:	4604      	mov	r4, r0
 801242c:	9704      	str	r7, [sp, #16]
 801242e:	d807      	bhi.n	8012440 <__ieee754_rem_pio2+0x28>
 8012430:	2200      	movs	r2, #0
 8012432:	2300      	movs	r3, #0
 8012434:	ed80 0b00 	vstr	d0, [r0]
 8012438:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801243c:	2500      	movs	r5, #0
 801243e:	e028      	b.n	8012492 <__ieee754_rem_pio2+0x7a>
 8012440:	4bbe      	ldr	r3, [pc, #760]	@ (801273c <__ieee754_rem_pio2+0x324>)
 8012442:	4598      	cmp	r8, r3
 8012444:	d878      	bhi.n	8012538 <__ieee754_rem_pio2+0x120>
 8012446:	9b04      	ldr	r3, [sp, #16]
 8012448:	4dbd      	ldr	r5, [pc, #756]	@ (8012740 <__ieee754_rem_pio2+0x328>)
 801244a:	2b00      	cmp	r3, #0
 801244c:	4630      	mov	r0, r6
 801244e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012700 <__ieee754_rem_pio2+0x2e8>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	4639      	mov	r1, r7
 8012456:	dd38      	ble.n	80124ca <__ieee754_rem_pio2+0xb2>
 8012458:	f7ed fee2 	bl	8000220 <__aeabi_dsub>
 801245c:	45a8      	cmp	r8, r5
 801245e:	4606      	mov	r6, r0
 8012460:	460f      	mov	r7, r1
 8012462:	d01a      	beq.n	801249a <__ieee754_rem_pio2+0x82>
 8012464:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012708 <__ieee754_rem_pio2+0x2f0>)
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f7ed fed9 	bl	8000220 <__aeabi_dsub>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4680      	mov	r8, r0
 8012474:	4689      	mov	r9, r1
 8012476:	4630      	mov	r0, r6
 8012478:	4639      	mov	r1, r7
 801247a:	f7ed fed1 	bl	8000220 <__aeabi_dsub>
 801247e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012708 <__ieee754_rem_pio2+0x2f0>)
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	f7ed fecc 	bl	8000220 <__aeabi_dsub>
 8012488:	e9c4 8900 	strd	r8, r9, [r4]
 801248c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012490:	2501      	movs	r5, #1
 8012492:	4628      	mov	r0, r5
 8012494:	b00d      	add	sp, #52	@ 0x34
 8012496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249a:	a39d      	add	r3, pc, #628	@ (adr r3, 8012710 <__ieee754_rem_pio2+0x2f8>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	f7ed febe 	bl	8000220 <__aeabi_dsub>
 80124a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8012718 <__ieee754_rem_pio2+0x300>)
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	4606      	mov	r6, r0
 80124ac:	460f      	mov	r7, r1
 80124ae:	f7ed feb7 	bl	8000220 <__aeabi_dsub>
 80124b2:	4602      	mov	r2, r0
 80124b4:	460b      	mov	r3, r1
 80124b6:	4680      	mov	r8, r0
 80124b8:	4689      	mov	r9, r1
 80124ba:	4630      	mov	r0, r6
 80124bc:	4639      	mov	r1, r7
 80124be:	f7ed feaf 	bl	8000220 <__aeabi_dsub>
 80124c2:	a395      	add	r3, pc, #596	@ (adr r3, 8012718 <__ieee754_rem_pio2+0x300>)
 80124c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c8:	e7dc      	b.n	8012484 <__ieee754_rem_pio2+0x6c>
 80124ca:	f7ed feab 	bl	8000224 <__adddf3>
 80124ce:	45a8      	cmp	r8, r5
 80124d0:	4606      	mov	r6, r0
 80124d2:	460f      	mov	r7, r1
 80124d4:	d018      	beq.n	8012508 <__ieee754_rem_pio2+0xf0>
 80124d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8012708 <__ieee754_rem_pio2+0x2f0>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	f7ed fea2 	bl	8000224 <__adddf3>
 80124e0:	4602      	mov	r2, r0
 80124e2:	460b      	mov	r3, r1
 80124e4:	4680      	mov	r8, r0
 80124e6:	4689      	mov	r9, r1
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ed fe98 	bl	8000220 <__aeabi_dsub>
 80124f0:	a385      	add	r3, pc, #532	@ (adr r3, 8012708 <__ieee754_rem_pio2+0x2f0>)
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ed fe95 	bl	8000224 <__adddf3>
 80124fa:	f04f 35ff 	mov.w	r5, #4294967295
 80124fe:	e9c4 8900 	strd	r8, r9, [r4]
 8012502:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012506:	e7c4      	b.n	8012492 <__ieee754_rem_pio2+0x7a>
 8012508:	a381      	add	r3, pc, #516	@ (adr r3, 8012710 <__ieee754_rem_pio2+0x2f8>)
 801250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250e:	f7ed fe89 	bl	8000224 <__adddf3>
 8012512:	a381      	add	r3, pc, #516	@ (adr r3, 8012718 <__ieee754_rem_pio2+0x300>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	4606      	mov	r6, r0
 801251a:	460f      	mov	r7, r1
 801251c:	f7ed fe82 	bl	8000224 <__adddf3>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	4680      	mov	r8, r0
 8012526:	4689      	mov	r9, r1
 8012528:	4630      	mov	r0, r6
 801252a:	4639      	mov	r1, r7
 801252c:	f7ed fe78 	bl	8000220 <__aeabi_dsub>
 8012530:	a379      	add	r3, pc, #484	@ (adr r3, 8012718 <__ieee754_rem_pio2+0x300>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	e7de      	b.n	80124f6 <__ieee754_rem_pio2+0xde>
 8012538:	4b82      	ldr	r3, [pc, #520]	@ (8012744 <__ieee754_rem_pio2+0x32c>)
 801253a:	4598      	cmp	r8, r3
 801253c:	f200 80d1 	bhi.w	80126e2 <__ieee754_rem_pio2+0x2ca>
 8012540:	f000 f966 	bl	8012810 <fabs>
 8012544:	ec57 6b10 	vmov	r6, r7, d0
 8012548:	a375      	add	r3, pc, #468	@ (adr r3, 8012720 <__ieee754_rem_pio2+0x308>)
 801254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254e:	4630      	mov	r0, r6
 8012550:	4639      	mov	r1, r7
 8012552:	f7ee f81d 	bl	8000590 <__aeabi_dmul>
 8012556:	4b7c      	ldr	r3, [pc, #496]	@ (8012748 <__ieee754_rem_pio2+0x330>)
 8012558:	2200      	movs	r2, #0
 801255a:	f7ed fe63 	bl	8000224 <__adddf3>
 801255e:	f7ee fab1 	bl	8000ac4 <__aeabi_d2iz>
 8012562:	4605      	mov	r5, r0
 8012564:	f7ed ffaa 	bl	80004bc <__aeabi_i2d>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012570:	a363      	add	r3, pc, #396	@ (adr r3, 8012700 <__ieee754_rem_pio2+0x2e8>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7ee f80b 	bl	8000590 <__aeabi_dmul>
 801257a:	4602      	mov	r2, r0
 801257c:	460b      	mov	r3, r1
 801257e:	4630      	mov	r0, r6
 8012580:	4639      	mov	r1, r7
 8012582:	f7ed fe4d 	bl	8000220 <__aeabi_dsub>
 8012586:	a360      	add	r3, pc, #384	@ (adr r3, 8012708 <__ieee754_rem_pio2+0x2f0>)
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	4682      	mov	sl, r0
 801258e:	468b      	mov	fp, r1
 8012590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012594:	f7ed fffc 	bl	8000590 <__aeabi_dmul>
 8012598:	2d1f      	cmp	r5, #31
 801259a:	4606      	mov	r6, r0
 801259c:	460f      	mov	r7, r1
 801259e:	dc0c      	bgt.n	80125ba <__ieee754_rem_pio2+0x1a2>
 80125a0:	4b6a      	ldr	r3, [pc, #424]	@ (801274c <__ieee754_rem_pio2+0x334>)
 80125a2:	1e6a      	subs	r2, r5, #1
 80125a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125a8:	4543      	cmp	r3, r8
 80125aa:	d006      	beq.n	80125ba <__ieee754_rem_pio2+0x1a2>
 80125ac:	4632      	mov	r2, r6
 80125ae:	463b      	mov	r3, r7
 80125b0:	4650      	mov	r0, sl
 80125b2:	4659      	mov	r1, fp
 80125b4:	f7ed fe34 	bl	8000220 <__aeabi_dsub>
 80125b8:	e00e      	b.n	80125d8 <__ieee754_rem_pio2+0x1c0>
 80125ba:	463b      	mov	r3, r7
 80125bc:	4632      	mov	r2, r6
 80125be:	4650      	mov	r0, sl
 80125c0:	4659      	mov	r1, fp
 80125c2:	f7ed fe2d 	bl	8000220 <__aeabi_dsub>
 80125c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80125ca:	9305      	str	r3, [sp, #20]
 80125cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80125d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80125d4:	2b10      	cmp	r3, #16
 80125d6:	dc02      	bgt.n	80125de <__ieee754_rem_pio2+0x1c6>
 80125d8:	e9c4 0100 	strd	r0, r1, [r4]
 80125dc:	e039      	b.n	8012652 <__ieee754_rem_pio2+0x23a>
 80125de:	a34c      	add	r3, pc, #304	@ (adr r3, 8012710 <__ieee754_rem_pio2+0x2f8>)
 80125e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125e8:	f7ed ffd2 	bl	8000590 <__aeabi_dmul>
 80125ec:	4606      	mov	r6, r0
 80125ee:	460f      	mov	r7, r1
 80125f0:	4602      	mov	r2, r0
 80125f2:	460b      	mov	r3, r1
 80125f4:	4650      	mov	r0, sl
 80125f6:	4659      	mov	r1, fp
 80125f8:	f7ed fe12 	bl	8000220 <__aeabi_dsub>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4680      	mov	r8, r0
 8012602:	4689      	mov	r9, r1
 8012604:	4650      	mov	r0, sl
 8012606:	4659      	mov	r1, fp
 8012608:	f7ed fe0a 	bl	8000220 <__aeabi_dsub>
 801260c:	4632      	mov	r2, r6
 801260e:	463b      	mov	r3, r7
 8012610:	f7ed fe06 	bl	8000220 <__aeabi_dsub>
 8012614:	a340      	add	r3, pc, #256	@ (adr r3, 8012718 <__ieee754_rem_pio2+0x300>)
 8012616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261a:	4606      	mov	r6, r0
 801261c:	460f      	mov	r7, r1
 801261e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012622:	f7ed ffb5 	bl	8000590 <__aeabi_dmul>
 8012626:	4632      	mov	r2, r6
 8012628:	463b      	mov	r3, r7
 801262a:	f7ed fdf9 	bl	8000220 <__aeabi_dsub>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	4606      	mov	r6, r0
 8012634:	460f      	mov	r7, r1
 8012636:	4640      	mov	r0, r8
 8012638:	4649      	mov	r1, r9
 801263a:	f7ed fdf1 	bl	8000220 <__aeabi_dsub>
 801263e:	9a05      	ldr	r2, [sp, #20]
 8012640:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012644:	1ad3      	subs	r3, r2, r3
 8012646:	2b31      	cmp	r3, #49	@ 0x31
 8012648:	dc20      	bgt.n	801268c <__ieee754_rem_pio2+0x274>
 801264a:	e9c4 0100 	strd	r0, r1, [r4]
 801264e:	46c2      	mov	sl, r8
 8012650:	46cb      	mov	fp, r9
 8012652:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012656:	4650      	mov	r0, sl
 8012658:	4642      	mov	r2, r8
 801265a:	464b      	mov	r3, r9
 801265c:	4659      	mov	r1, fp
 801265e:	f7ed fddf 	bl	8000220 <__aeabi_dsub>
 8012662:	463b      	mov	r3, r7
 8012664:	4632      	mov	r2, r6
 8012666:	f7ed fddb 	bl	8000220 <__aeabi_dsub>
 801266a:	9b04      	ldr	r3, [sp, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012672:	f6bf af0e 	bge.w	8012492 <__ieee754_rem_pio2+0x7a>
 8012676:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801267a:	6063      	str	r3, [r4, #4]
 801267c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012680:	f8c4 8000 	str.w	r8, [r4]
 8012684:	60a0      	str	r0, [r4, #8]
 8012686:	60e3      	str	r3, [r4, #12]
 8012688:	426d      	negs	r5, r5
 801268a:	e702      	b.n	8012492 <__ieee754_rem_pio2+0x7a>
 801268c:	a326      	add	r3, pc, #152	@ (adr r3, 8012728 <__ieee754_rem_pio2+0x310>)
 801268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012696:	f7ed ff7b 	bl	8000590 <__aeabi_dmul>
 801269a:	4606      	mov	r6, r0
 801269c:	460f      	mov	r7, r1
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	4640      	mov	r0, r8
 80126a4:	4649      	mov	r1, r9
 80126a6:	f7ed fdbb 	bl	8000220 <__aeabi_dsub>
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	4682      	mov	sl, r0
 80126b0:	468b      	mov	fp, r1
 80126b2:	4640      	mov	r0, r8
 80126b4:	4649      	mov	r1, r9
 80126b6:	f7ed fdb3 	bl	8000220 <__aeabi_dsub>
 80126ba:	4632      	mov	r2, r6
 80126bc:	463b      	mov	r3, r7
 80126be:	f7ed fdaf 	bl	8000220 <__aeabi_dsub>
 80126c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8012730 <__ieee754_rem_pio2+0x318>)
 80126c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126d0:	f7ed ff5e 	bl	8000590 <__aeabi_dmul>
 80126d4:	4632      	mov	r2, r6
 80126d6:	463b      	mov	r3, r7
 80126d8:	f7ed fda2 	bl	8000220 <__aeabi_dsub>
 80126dc:	4606      	mov	r6, r0
 80126de:	460f      	mov	r7, r1
 80126e0:	e764      	b.n	80125ac <__ieee754_rem_pio2+0x194>
 80126e2:	4b1b      	ldr	r3, [pc, #108]	@ (8012750 <__ieee754_rem_pio2+0x338>)
 80126e4:	4598      	cmp	r8, r3
 80126e6:	d935      	bls.n	8012754 <__ieee754_rem_pio2+0x33c>
 80126e8:	4632      	mov	r2, r6
 80126ea:	463b      	mov	r3, r7
 80126ec:	4630      	mov	r0, r6
 80126ee:	4639      	mov	r1, r7
 80126f0:	f7ed fd96 	bl	8000220 <__aeabi_dsub>
 80126f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80126f8:	e9c4 0100 	strd	r0, r1, [r4]
 80126fc:	e69e      	b.n	801243c <__ieee754_rem_pio2+0x24>
 80126fe:	bf00      	nop
 8012700:	54400000 	.word	0x54400000
 8012704:	3ff921fb 	.word	0x3ff921fb
 8012708:	1a626331 	.word	0x1a626331
 801270c:	3dd0b461 	.word	0x3dd0b461
 8012710:	1a600000 	.word	0x1a600000
 8012714:	3dd0b461 	.word	0x3dd0b461
 8012718:	2e037073 	.word	0x2e037073
 801271c:	3ba3198a 	.word	0x3ba3198a
 8012720:	6dc9c883 	.word	0x6dc9c883
 8012724:	3fe45f30 	.word	0x3fe45f30
 8012728:	2e000000 	.word	0x2e000000
 801272c:	3ba3198a 	.word	0x3ba3198a
 8012730:	252049c1 	.word	0x252049c1
 8012734:	397b839a 	.word	0x397b839a
 8012738:	3fe921fb 	.word	0x3fe921fb
 801273c:	4002d97b 	.word	0x4002d97b
 8012740:	3ff921fb 	.word	0x3ff921fb
 8012744:	413921fb 	.word	0x413921fb
 8012748:	3fe00000 	.word	0x3fe00000
 801274c:	08013c50 	.word	0x08013c50
 8012750:	7fefffff 	.word	0x7fefffff
 8012754:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012758:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801275c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012760:	4630      	mov	r0, r6
 8012762:	460f      	mov	r7, r1
 8012764:	f7ee f9ae 	bl	8000ac4 <__aeabi_d2iz>
 8012768:	f7ed fea8 	bl	80004bc <__aeabi_i2d>
 801276c:	4602      	mov	r2, r0
 801276e:	460b      	mov	r3, r1
 8012770:	4630      	mov	r0, r6
 8012772:	4639      	mov	r1, r7
 8012774:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012778:	f7ed fd52 	bl	8000220 <__aeabi_dsub>
 801277c:	4b22      	ldr	r3, [pc, #136]	@ (8012808 <__ieee754_rem_pio2+0x3f0>)
 801277e:	2200      	movs	r2, #0
 8012780:	f7ed ff06 	bl	8000590 <__aeabi_dmul>
 8012784:	460f      	mov	r7, r1
 8012786:	4606      	mov	r6, r0
 8012788:	f7ee f99c 	bl	8000ac4 <__aeabi_d2iz>
 801278c:	f7ed fe96 	bl	80004bc <__aeabi_i2d>
 8012790:	4602      	mov	r2, r0
 8012792:	460b      	mov	r3, r1
 8012794:	4630      	mov	r0, r6
 8012796:	4639      	mov	r1, r7
 8012798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801279c:	f7ed fd40 	bl	8000220 <__aeabi_dsub>
 80127a0:	4b19      	ldr	r3, [pc, #100]	@ (8012808 <__ieee754_rem_pio2+0x3f0>)
 80127a2:	2200      	movs	r2, #0
 80127a4:	f7ed fef4 	bl	8000590 <__aeabi_dmul>
 80127a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80127ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80127b0:	f04f 0803 	mov.w	r8, #3
 80127b4:	2600      	movs	r6, #0
 80127b6:	2700      	movs	r7, #0
 80127b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80127bc:	4632      	mov	r2, r6
 80127be:	463b      	mov	r3, r7
 80127c0:	46c2      	mov	sl, r8
 80127c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80127c6:	f7ee f94b 	bl	8000a60 <__aeabi_dcmpeq>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d1f4      	bne.n	80127b8 <__ieee754_rem_pio2+0x3a0>
 80127ce:	4b0f      	ldr	r3, [pc, #60]	@ (801280c <__ieee754_rem_pio2+0x3f4>)
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	2302      	movs	r3, #2
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	462a      	mov	r2, r5
 80127d8:	4653      	mov	r3, sl
 80127da:	4621      	mov	r1, r4
 80127dc:	a806      	add	r0, sp, #24
 80127de:	f000 fb5b 	bl	8012e98 <__kernel_rem_pio2>
 80127e2:	9b04      	ldr	r3, [sp, #16]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	4605      	mov	r5, r0
 80127e8:	f6bf ae53 	bge.w	8012492 <__ieee754_rem_pio2+0x7a>
 80127ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80127f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80127f4:	e9c4 2300 	strd	r2, r3, [r4]
 80127f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80127fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012800:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012804:	e740      	b.n	8012688 <__ieee754_rem_pio2+0x270>
 8012806:	bf00      	nop
 8012808:	41700000 	.word	0x41700000
 801280c:	08013cd0 	.word	0x08013cd0

08012810 <fabs>:
 8012810:	ec51 0b10 	vmov	r0, r1, d0
 8012814:	4602      	mov	r2, r0
 8012816:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801281a:	ec43 2b10 	vmov	d0, r2, r3
 801281e:	4770      	bx	lr

08012820 <__kernel_cosf>:
 8012820:	ee10 3a10 	vmov	r3, s0
 8012824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012828:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801282c:	eef0 6a40 	vmov.f32	s13, s0
 8012830:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012834:	d204      	bcs.n	8012840 <__kernel_cosf+0x20>
 8012836:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801283a:	ee17 2a90 	vmov	r2, s15
 801283e:	b342      	cbz	r2, 8012892 <__kernel_cosf+0x72>
 8012840:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012844:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80128b0 <__kernel_cosf+0x90>
 8012848:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80128b4 <__kernel_cosf+0x94>
 801284c:	4a1a      	ldr	r2, [pc, #104]	@ (80128b8 <__kernel_cosf+0x98>)
 801284e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012852:	4293      	cmp	r3, r2
 8012854:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80128bc <__kernel_cosf+0x9c>
 8012858:	eee6 7a07 	vfma.f32	s15, s12, s14
 801285c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80128c0 <__kernel_cosf+0xa0>
 8012860:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012864:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80128c4 <__kernel_cosf+0xa4>
 8012868:	eee6 7a07 	vfma.f32	s15, s12, s14
 801286c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80128c8 <__kernel_cosf+0xa8>
 8012870:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012874:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012878:	ee26 6a07 	vmul.f32	s12, s12, s14
 801287c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012880:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012888:	d804      	bhi.n	8012894 <__kernel_cosf+0x74>
 801288a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801288e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012892:	4770      	bx	lr
 8012894:	4a0d      	ldr	r2, [pc, #52]	@ (80128cc <__kernel_cosf+0xac>)
 8012896:	4293      	cmp	r3, r2
 8012898:	bf9a      	itte	ls
 801289a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801289e:	ee07 3a10 	vmovls	s14, r3
 80128a2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80128a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80128aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128ae:	e7ec      	b.n	801288a <__kernel_cosf+0x6a>
 80128b0:	ad47d74e 	.word	0xad47d74e
 80128b4:	310f74f6 	.word	0x310f74f6
 80128b8:	3e999999 	.word	0x3e999999
 80128bc:	b493f27c 	.word	0xb493f27c
 80128c0:	37d00d01 	.word	0x37d00d01
 80128c4:	bab60b61 	.word	0xbab60b61
 80128c8:	3d2aaaab 	.word	0x3d2aaaab
 80128cc:	3f480000 	.word	0x3f480000

080128d0 <__kernel_sinf>:
 80128d0:	ee10 3a10 	vmov	r3, s0
 80128d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80128dc:	d204      	bcs.n	80128e8 <__kernel_sinf+0x18>
 80128de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80128e2:	ee17 3a90 	vmov	r3, s15
 80128e6:	b35b      	cbz	r3, 8012940 <__kernel_sinf+0x70>
 80128e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80128ec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012944 <__kernel_sinf+0x74>
 80128f0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012948 <__kernel_sinf+0x78>
 80128f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80128f8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801294c <__kernel_sinf+0x7c>
 80128fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012900:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012950 <__kernel_sinf+0x80>
 8012904:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012908:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012954 <__kernel_sinf+0x84>
 801290c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012910:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012914:	b930      	cbnz	r0, 8012924 <__kernel_sinf+0x54>
 8012916:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012958 <__kernel_sinf+0x88>
 801291a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801291e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012922:	4770      	bx	lr
 8012924:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012928:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801292c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012930:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012934:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801295c <__kernel_sinf+0x8c>
 8012938:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801293c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	2f2ec9d3 	.word	0x2f2ec9d3
 8012948:	b2d72f34 	.word	0xb2d72f34
 801294c:	3638ef1b 	.word	0x3638ef1b
 8012950:	b9500d01 	.word	0xb9500d01
 8012954:	3c088889 	.word	0x3c088889
 8012958:	be2aaaab 	.word	0xbe2aaaab
 801295c:	3e2aaaab 	.word	0x3e2aaaab

08012960 <__ieee754_fmodf>:
 8012960:	b570      	push	{r4, r5, r6, lr}
 8012962:	ee10 6a90 	vmov	r6, s1
 8012966:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801296a:	1e5a      	subs	r2, r3, #1
 801296c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012970:	d206      	bcs.n	8012980 <__ieee754_fmodf+0x20>
 8012972:	ee10 4a10 	vmov	r4, s0
 8012976:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801297a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801297e:	d304      	bcc.n	801298a <__ieee754_fmodf+0x2a>
 8012980:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012984:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012988:	bd70      	pop	{r4, r5, r6, pc}
 801298a:	4299      	cmp	r1, r3
 801298c:	dbfc      	blt.n	8012988 <__ieee754_fmodf+0x28>
 801298e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8012992:	d105      	bne.n	80129a0 <__ieee754_fmodf+0x40>
 8012994:	4b32      	ldr	r3, [pc, #200]	@ (8012a60 <__ieee754_fmodf+0x100>)
 8012996:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801299a:	ed93 0a00 	vldr	s0, [r3]
 801299e:	e7f3      	b.n	8012988 <__ieee754_fmodf+0x28>
 80129a0:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80129a4:	d146      	bne.n	8012a34 <__ieee754_fmodf+0xd4>
 80129a6:	020a      	lsls	r2, r1, #8
 80129a8:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80129ac:	2a00      	cmp	r2, #0
 80129ae:	dc3e      	bgt.n	8012a2e <__ieee754_fmodf+0xce>
 80129b0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80129b4:	bf01      	itttt	eq
 80129b6:	021a      	lsleq	r2, r3, #8
 80129b8:	fab2 f282 	clzeq	r2, r2
 80129bc:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80129c0:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80129c4:	bf16      	itet	ne
 80129c6:	15da      	asrne	r2, r3, #23
 80129c8:	3282      	addeq	r2, #130	@ 0x82
 80129ca:	3a7f      	subne	r2, #127	@ 0x7f
 80129cc:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80129d0:	bfbb      	ittet	lt
 80129d2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80129d6:	1a24      	sublt	r4, r4, r0
 80129d8:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80129dc:	40a1      	lsllt	r1, r4
 80129de:	bfa8      	it	ge
 80129e0:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80129e4:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80129e8:	bfb5      	itete	lt
 80129ea:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80129ee:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80129f2:	1aa4      	sublt	r4, r4, r2
 80129f4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80129f8:	bfb8      	it	lt
 80129fa:	fa03 f404 	lsllt.w	r4, r3, r4
 80129fe:	1a80      	subs	r0, r0, r2
 8012a00:	1b0b      	subs	r3, r1, r4
 8012a02:	b9d0      	cbnz	r0, 8012a3a <__ieee754_fmodf+0xda>
 8012a04:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012a08:	bf28      	it	cs
 8012a0a:	460b      	movcs	r3, r1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d0c1      	beq.n	8012994 <__ieee754_fmodf+0x34>
 8012a10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012a14:	db19      	blt.n	8012a4a <__ieee754_fmodf+0xea>
 8012a16:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012a1a:	db19      	blt.n	8012a50 <__ieee754_fmodf+0xf0>
 8012a1c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8012a20:	327f      	adds	r2, #127	@ 0x7f
 8012a22:	432b      	orrs	r3, r5
 8012a24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012a28:	ee00 3a10 	vmov	s0, r3
 8012a2c:	e7ac      	b.n	8012988 <__ieee754_fmodf+0x28>
 8012a2e:	3801      	subs	r0, #1
 8012a30:	0052      	lsls	r2, r2, #1
 8012a32:	e7bb      	b.n	80129ac <__ieee754_fmodf+0x4c>
 8012a34:	15c8      	asrs	r0, r1, #23
 8012a36:	387f      	subs	r0, #127	@ 0x7f
 8012a38:	e7ba      	b.n	80129b0 <__ieee754_fmodf+0x50>
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	da02      	bge.n	8012a44 <__ieee754_fmodf+0xe4>
 8012a3e:	0049      	lsls	r1, r1, #1
 8012a40:	3801      	subs	r0, #1
 8012a42:	e7dd      	b.n	8012a00 <__ieee754_fmodf+0xa0>
 8012a44:	d0a6      	beq.n	8012994 <__ieee754_fmodf+0x34>
 8012a46:	0059      	lsls	r1, r3, #1
 8012a48:	e7fa      	b.n	8012a40 <__ieee754_fmodf+0xe0>
 8012a4a:	005b      	lsls	r3, r3, #1
 8012a4c:	3a01      	subs	r2, #1
 8012a4e:	e7df      	b.n	8012a10 <__ieee754_fmodf+0xb0>
 8012a50:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8012a54:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012a58:	3282      	adds	r2, #130	@ 0x82
 8012a5a:	4113      	asrs	r3, r2
 8012a5c:	432b      	orrs	r3, r5
 8012a5e:	e7e3      	b.n	8012a28 <__ieee754_fmodf+0xc8>
 8012a60:	08013dd8 	.word	0x08013dd8

08012a64 <__ieee754_rem_pio2f>:
 8012a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a66:	ee10 6a10 	vmov	r6, s0
 8012a6a:	4b88      	ldr	r3, [pc, #544]	@ (8012c8c <__ieee754_rem_pio2f+0x228>)
 8012a6c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012a70:	429d      	cmp	r5, r3
 8012a72:	b087      	sub	sp, #28
 8012a74:	4604      	mov	r4, r0
 8012a76:	d805      	bhi.n	8012a84 <__ieee754_rem_pio2f+0x20>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	ed80 0a00 	vstr	s0, [r0]
 8012a7e:	6043      	str	r3, [r0, #4]
 8012a80:	2000      	movs	r0, #0
 8012a82:	e022      	b.n	8012aca <__ieee754_rem_pio2f+0x66>
 8012a84:	4b82      	ldr	r3, [pc, #520]	@ (8012c90 <__ieee754_rem_pio2f+0x22c>)
 8012a86:	429d      	cmp	r5, r3
 8012a88:	d83a      	bhi.n	8012b00 <__ieee754_rem_pio2f+0x9c>
 8012a8a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012a8e:	2e00      	cmp	r6, #0
 8012a90:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012c94 <__ieee754_rem_pio2f+0x230>
 8012a94:	4a80      	ldr	r2, [pc, #512]	@ (8012c98 <__ieee754_rem_pio2f+0x234>)
 8012a96:	f023 030f 	bic.w	r3, r3, #15
 8012a9a:	dd18      	ble.n	8012ace <__ieee754_rem_pio2f+0x6a>
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012aa2:	bf09      	itett	eq
 8012aa4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012c9c <__ieee754_rem_pio2f+0x238>
 8012aa8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012ca0 <__ieee754_rem_pio2f+0x23c>
 8012aac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012ca4 <__ieee754_rem_pio2f+0x240>
 8012ab0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012ab4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012abc:	ed80 7a00 	vstr	s14, [r0]
 8012ac0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012ac4:	edc0 7a01 	vstr	s15, [r0, #4]
 8012ac8:	2001      	movs	r0, #1
 8012aca:	b007      	add	sp, #28
 8012acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012ad4:	bf09      	itett	eq
 8012ad6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012c9c <__ieee754_rem_pio2f+0x238>
 8012ada:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012ca0 <__ieee754_rem_pio2f+0x23c>
 8012ade:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012ca4 <__ieee754_rem_pio2f+0x240>
 8012ae2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012ae6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012aee:	ed80 7a00 	vstr	s14, [r0]
 8012af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012af6:	edc0 7a01 	vstr	s15, [r0, #4]
 8012afa:	f04f 30ff 	mov.w	r0, #4294967295
 8012afe:	e7e4      	b.n	8012aca <__ieee754_rem_pio2f+0x66>
 8012b00:	4b69      	ldr	r3, [pc, #420]	@ (8012ca8 <__ieee754_rem_pio2f+0x244>)
 8012b02:	429d      	cmp	r5, r3
 8012b04:	d873      	bhi.n	8012bee <__ieee754_rem_pio2f+0x18a>
 8012b06:	f000 f8dd 	bl	8012cc4 <fabsf>
 8012b0a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012cac <__ieee754_rem_pio2f+0x248>
 8012b0e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012b12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012b1e:	ee17 0a90 	vmov	r0, s15
 8012b22:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012c94 <__ieee754_rem_pio2f+0x230>
 8012b26:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012b2a:	281f      	cmp	r0, #31
 8012b2c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012ca0 <__ieee754_rem_pio2f+0x23c>
 8012b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b34:	eeb1 6a47 	vneg.f32	s12, s14
 8012b38:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012b3c:	ee16 1a90 	vmov	r1, s13
 8012b40:	dc09      	bgt.n	8012b56 <__ieee754_rem_pio2f+0xf2>
 8012b42:	4a5b      	ldr	r2, [pc, #364]	@ (8012cb0 <__ieee754_rem_pio2f+0x24c>)
 8012b44:	1e47      	subs	r7, r0, #1
 8012b46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012b4a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d107      	bne.n	8012b66 <__ieee754_rem_pio2f+0x102>
 8012b56:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012b5a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012b5e:	2a08      	cmp	r2, #8
 8012b60:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012b64:	dc14      	bgt.n	8012b90 <__ieee754_rem_pio2f+0x12c>
 8012b66:	6021      	str	r1, [r4, #0]
 8012b68:	ed94 7a00 	vldr	s14, [r4]
 8012b6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012b70:	2e00      	cmp	r6, #0
 8012b72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b76:	ed84 0a01 	vstr	s0, [r4, #4]
 8012b7a:	daa6      	bge.n	8012aca <__ieee754_rem_pio2f+0x66>
 8012b7c:	eeb1 7a47 	vneg.f32	s14, s14
 8012b80:	eeb1 0a40 	vneg.f32	s0, s0
 8012b84:	ed84 7a00 	vstr	s14, [r4]
 8012b88:	ed84 0a01 	vstr	s0, [r4, #4]
 8012b8c:	4240      	negs	r0, r0
 8012b8e:	e79c      	b.n	8012aca <__ieee754_rem_pio2f+0x66>
 8012b90:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012c9c <__ieee754_rem_pio2f+0x238>
 8012b94:	eef0 6a40 	vmov.f32	s13, s0
 8012b98:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012b9c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012ba0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012ba4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012ca4 <__ieee754_rem_pio2f+0x240>
 8012ba8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012bac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012bb0:	ee15 2a90 	vmov	r2, s11
 8012bb4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012bb8:	1a5b      	subs	r3, r3, r1
 8012bba:	2b19      	cmp	r3, #25
 8012bbc:	dc04      	bgt.n	8012bc8 <__ieee754_rem_pio2f+0x164>
 8012bbe:	edc4 5a00 	vstr	s11, [r4]
 8012bc2:	eeb0 0a66 	vmov.f32	s0, s13
 8012bc6:	e7cf      	b.n	8012b68 <__ieee754_rem_pio2f+0x104>
 8012bc8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012cb4 <__ieee754_rem_pio2f+0x250>
 8012bcc:	eeb0 0a66 	vmov.f32	s0, s13
 8012bd0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012bd4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012bd8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012cb8 <__ieee754_rem_pio2f+0x254>
 8012bdc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012be0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012be4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012be8:	ed84 7a00 	vstr	s14, [r4]
 8012bec:	e7bc      	b.n	8012b68 <__ieee754_rem_pio2f+0x104>
 8012bee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012bf2:	d306      	bcc.n	8012c02 <__ieee754_rem_pio2f+0x19e>
 8012bf4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012bf8:	edc0 7a01 	vstr	s15, [r0, #4]
 8012bfc:	edc0 7a00 	vstr	s15, [r0]
 8012c00:	e73e      	b.n	8012a80 <__ieee754_rem_pio2f+0x1c>
 8012c02:	15ea      	asrs	r2, r5, #23
 8012c04:	3a86      	subs	r2, #134	@ 0x86
 8012c06:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012c0a:	ee07 3a90 	vmov	s15, r3
 8012c0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012c12:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012cbc <__ieee754_rem_pio2f+0x258>
 8012c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c1e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012c2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c32:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c42:	edcd 7a05 	vstr	s15, [sp, #20]
 8012c46:	d11e      	bne.n	8012c86 <__ieee754_rem_pio2f+0x222>
 8012c48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c50:	bf0c      	ite	eq
 8012c52:	2301      	moveq	r3, #1
 8012c54:	2302      	movne	r3, #2
 8012c56:	491a      	ldr	r1, [pc, #104]	@ (8012cc0 <__ieee754_rem_pio2f+0x25c>)
 8012c58:	9101      	str	r1, [sp, #4]
 8012c5a:	2102      	movs	r1, #2
 8012c5c:	9100      	str	r1, [sp, #0]
 8012c5e:	a803      	add	r0, sp, #12
 8012c60:	4621      	mov	r1, r4
 8012c62:	f000 fc69 	bl	8013538 <__kernel_rem_pio2f>
 8012c66:	2e00      	cmp	r6, #0
 8012c68:	f6bf af2f 	bge.w	8012aca <__ieee754_rem_pio2f+0x66>
 8012c6c:	edd4 7a00 	vldr	s15, [r4]
 8012c70:	eef1 7a67 	vneg.f32	s15, s15
 8012c74:	edc4 7a00 	vstr	s15, [r4]
 8012c78:	edd4 7a01 	vldr	s15, [r4, #4]
 8012c7c:	eef1 7a67 	vneg.f32	s15, s15
 8012c80:	edc4 7a01 	vstr	s15, [r4, #4]
 8012c84:	e782      	b.n	8012b8c <__ieee754_rem_pio2f+0x128>
 8012c86:	2303      	movs	r3, #3
 8012c88:	e7e5      	b.n	8012c56 <__ieee754_rem_pio2f+0x1f2>
 8012c8a:	bf00      	nop
 8012c8c:	3f490fd8 	.word	0x3f490fd8
 8012c90:	4016cbe3 	.word	0x4016cbe3
 8012c94:	3fc90f80 	.word	0x3fc90f80
 8012c98:	3fc90fd0 	.word	0x3fc90fd0
 8012c9c:	37354400 	.word	0x37354400
 8012ca0:	37354443 	.word	0x37354443
 8012ca4:	2e85a308 	.word	0x2e85a308
 8012ca8:	43490f80 	.word	0x43490f80
 8012cac:	3f22f984 	.word	0x3f22f984
 8012cb0:	08013de0 	.word	0x08013de0
 8012cb4:	2e85a300 	.word	0x2e85a300
 8012cb8:	248d3132 	.word	0x248d3132
 8012cbc:	43800000 	.word	0x43800000
 8012cc0:	08013e60 	.word	0x08013e60

08012cc4 <fabsf>:
 8012cc4:	ee10 3a10 	vmov	r3, s0
 8012cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ccc:	ee00 3a10 	vmov	s0, r3
 8012cd0:	4770      	bx	lr
 8012cd2:	0000      	movs	r0, r0
 8012cd4:	0000      	movs	r0, r0
	...

08012cd8 <scalbn>:
 8012cd8:	b570      	push	{r4, r5, r6, lr}
 8012cda:	ec55 4b10 	vmov	r4, r5, d0
 8012cde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	b991      	cbnz	r1, 8012d0e <scalbn+0x36>
 8012ce8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012cec:	4323      	orrs	r3, r4
 8012cee:	d03b      	beq.n	8012d68 <scalbn+0x90>
 8012cf0:	4b33      	ldr	r3, [pc, #204]	@ (8012dc0 <scalbn+0xe8>)
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f7ed fc4a 	bl	8000590 <__aeabi_dmul>
 8012cfc:	4b31      	ldr	r3, [pc, #196]	@ (8012dc4 <scalbn+0xec>)
 8012cfe:	429e      	cmp	r6, r3
 8012d00:	4604      	mov	r4, r0
 8012d02:	460d      	mov	r5, r1
 8012d04:	da0f      	bge.n	8012d26 <scalbn+0x4e>
 8012d06:	a326      	add	r3, pc, #152	@ (adr r3, 8012da0 <scalbn+0xc8>)
 8012d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0c:	e01e      	b.n	8012d4c <scalbn+0x74>
 8012d0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012d12:	4291      	cmp	r1, r2
 8012d14:	d10b      	bne.n	8012d2e <scalbn+0x56>
 8012d16:	4622      	mov	r2, r4
 8012d18:	4620      	mov	r0, r4
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f7ed fa82 	bl	8000224 <__adddf3>
 8012d20:	4604      	mov	r4, r0
 8012d22:	460d      	mov	r5, r1
 8012d24:	e020      	b.n	8012d68 <scalbn+0x90>
 8012d26:	460b      	mov	r3, r1
 8012d28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012d2c:	3936      	subs	r1, #54	@ 0x36
 8012d2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012d32:	4296      	cmp	r6, r2
 8012d34:	dd0d      	ble.n	8012d52 <scalbn+0x7a>
 8012d36:	2d00      	cmp	r5, #0
 8012d38:	a11b      	add	r1, pc, #108	@ (adr r1, 8012da8 <scalbn+0xd0>)
 8012d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d3e:	da02      	bge.n	8012d46 <scalbn+0x6e>
 8012d40:	a11b      	add	r1, pc, #108	@ (adr r1, 8012db0 <scalbn+0xd8>)
 8012d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d46:	a318      	add	r3, pc, #96	@ (adr r3, 8012da8 <scalbn+0xd0>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	f7ed fc20 	bl	8000590 <__aeabi_dmul>
 8012d50:	e7e6      	b.n	8012d20 <scalbn+0x48>
 8012d52:	1872      	adds	r2, r6, r1
 8012d54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012d58:	428a      	cmp	r2, r1
 8012d5a:	dcec      	bgt.n	8012d36 <scalbn+0x5e>
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	dd06      	ble.n	8012d6e <scalbn+0x96>
 8012d60:	f36f 531e 	bfc	r3, #20, #11
 8012d64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d68:	ec45 4b10 	vmov	d0, r4, r5
 8012d6c:	bd70      	pop	{r4, r5, r6, pc}
 8012d6e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012d72:	da08      	bge.n	8012d86 <scalbn+0xae>
 8012d74:	2d00      	cmp	r5, #0
 8012d76:	a10a      	add	r1, pc, #40	@ (adr r1, 8012da0 <scalbn+0xc8>)
 8012d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d7c:	dac3      	bge.n	8012d06 <scalbn+0x2e>
 8012d7e:	a10e      	add	r1, pc, #56	@ (adr r1, 8012db8 <scalbn+0xe0>)
 8012d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d84:	e7bf      	b.n	8012d06 <scalbn+0x2e>
 8012d86:	3236      	adds	r2, #54	@ 0x36
 8012d88:	f36f 531e 	bfc	r3, #20, #11
 8012d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d90:	4620      	mov	r0, r4
 8012d92:	4b0d      	ldr	r3, [pc, #52]	@ (8012dc8 <scalbn+0xf0>)
 8012d94:	4629      	mov	r1, r5
 8012d96:	2200      	movs	r2, #0
 8012d98:	e7d8      	b.n	8012d4c <scalbn+0x74>
 8012d9a:	bf00      	nop
 8012d9c:	f3af 8000 	nop.w
 8012da0:	c2f8f359 	.word	0xc2f8f359
 8012da4:	01a56e1f 	.word	0x01a56e1f
 8012da8:	8800759c 	.word	0x8800759c
 8012dac:	7e37e43c 	.word	0x7e37e43c
 8012db0:	8800759c 	.word	0x8800759c
 8012db4:	fe37e43c 	.word	0xfe37e43c
 8012db8:	c2f8f359 	.word	0xc2f8f359
 8012dbc:	81a56e1f 	.word	0x81a56e1f
 8012dc0:	43500000 	.word	0x43500000
 8012dc4:	ffff3cb0 	.word	0xffff3cb0
 8012dc8:	3c900000 	.word	0x3c900000

08012dcc <scalbnf>:
 8012dcc:	ee10 3a10 	vmov	r3, s0
 8012dd0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012dd4:	d02b      	beq.n	8012e2e <scalbnf+0x62>
 8012dd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012dda:	d302      	bcc.n	8012de2 <scalbnf+0x16>
 8012ddc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012de0:	4770      	bx	lr
 8012de2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012de6:	d123      	bne.n	8012e30 <scalbnf+0x64>
 8012de8:	4b24      	ldr	r3, [pc, #144]	@ (8012e7c <scalbnf+0xb0>)
 8012dea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012e80 <scalbnf+0xb4>
 8012dee:	4298      	cmp	r0, r3
 8012df0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012df4:	db17      	blt.n	8012e26 <scalbnf+0x5a>
 8012df6:	ee10 3a10 	vmov	r3, s0
 8012dfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012dfe:	3a19      	subs	r2, #25
 8012e00:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012e04:	4288      	cmp	r0, r1
 8012e06:	dd15      	ble.n	8012e34 <scalbnf+0x68>
 8012e08:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012e84 <scalbnf+0xb8>
 8012e0c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012e88 <scalbnf+0xbc>
 8012e10:	ee10 3a10 	vmov	r3, s0
 8012e14:	eeb0 7a67 	vmov.f32	s14, s15
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	bfb8      	it	lt
 8012e1c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012e20:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012e24:	4770      	bx	lr
 8012e26:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012e8c <scalbnf+0xc0>
 8012e2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012e2e:	4770      	bx	lr
 8012e30:	0dd2      	lsrs	r2, r2, #23
 8012e32:	e7e5      	b.n	8012e00 <scalbnf+0x34>
 8012e34:	4410      	add	r0, r2
 8012e36:	28fe      	cmp	r0, #254	@ 0xfe
 8012e38:	dce6      	bgt.n	8012e08 <scalbnf+0x3c>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	dd06      	ble.n	8012e4c <scalbnf+0x80>
 8012e3e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012e42:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012e46:	ee00 3a10 	vmov	s0, r3
 8012e4a:	4770      	bx	lr
 8012e4c:	f110 0f16 	cmn.w	r0, #22
 8012e50:	da09      	bge.n	8012e66 <scalbnf+0x9a>
 8012e52:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012e8c <scalbnf+0xc0>
 8012e56:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012e90 <scalbnf+0xc4>
 8012e5a:	ee10 3a10 	vmov	r3, s0
 8012e5e:	eeb0 7a67 	vmov.f32	s14, s15
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	e7d9      	b.n	8012e1a <scalbnf+0x4e>
 8012e66:	3019      	adds	r0, #25
 8012e68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012e6c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012e70:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012e94 <scalbnf+0xc8>
 8012e74:	ee07 3a90 	vmov	s15, r3
 8012e78:	e7d7      	b.n	8012e2a <scalbnf+0x5e>
 8012e7a:	bf00      	nop
 8012e7c:	ffff3cb0 	.word	0xffff3cb0
 8012e80:	4c000000 	.word	0x4c000000
 8012e84:	7149f2ca 	.word	0x7149f2ca
 8012e88:	f149f2ca 	.word	0xf149f2ca
 8012e8c:	0da24260 	.word	0x0da24260
 8012e90:	8da24260 	.word	0x8da24260
 8012e94:	33000000 	.word	0x33000000

08012e98 <__kernel_rem_pio2>:
 8012e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9c:	ed2d 8b02 	vpush	{d8}
 8012ea0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012ea4:	f112 0f14 	cmn.w	r2, #20
 8012ea8:	9306      	str	r3, [sp, #24]
 8012eaa:	9104      	str	r1, [sp, #16]
 8012eac:	4bc2      	ldr	r3, [pc, #776]	@ (80131b8 <__kernel_rem_pio2+0x320>)
 8012eae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012eb0:	9008      	str	r0, [sp, #32]
 8012eb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	9b06      	ldr	r3, [sp, #24]
 8012eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ebe:	bfa8      	it	ge
 8012ec0:	1ed4      	subge	r4, r2, #3
 8012ec2:	9305      	str	r3, [sp, #20]
 8012ec4:	bfb2      	itee	lt
 8012ec6:	2400      	movlt	r4, #0
 8012ec8:	2318      	movge	r3, #24
 8012eca:	fb94 f4f3 	sdivge	r4, r4, r3
 8012ece:	f06f 0317 	mvn.w	r3, #23
 8012ed2:	fb04 3303 	mla	r3, r4, r3, r3
 8012ed6:	eb03 0b02 	add.w	fp, r3, r2
 8012eda:	9b00      	ldr	r3, [sp, #0]
 8012edc:	9a05      	ldr	r2, [sp, #20]
 8012ede:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80131a8 <__kernel_rem_pio2+0x310>
 8012ee2:	eb03 0802 	add.w	r8, r3, r2
 8012ee6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012ee8:	1aa7      	subs	r7, r4, r2
 8012eea:	ae20      	add	r6, sp, #128	@ 0x80
 8012eec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012ef0:	2500      	movs	r5, #0
 8012ef2:	4545      	cmp	r5, r8
 8012ef4:	dd12      	ble.n	8012f1c <__kernel_rem_pio2+0x84>
 8012ef6:	9b06      	ldr	r3, [sp, #24]
 8012ef8:	aa20      	add	r2, sp, #128	@ 0x80
 8012efa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012efe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012f02:	2700      	movs	r7, #0
 8012f04:	9b00      	ldr	r3, [sp, #0]
 8012f06:	429f      	cmp	r7, r3
 8012f08:	dc2e      	bgt.n	8012f68 <__kernel_rem_pio2+0xd0>
 8012f0a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80131a8 <__kernel_rem_pio2+0x310>
 8012f0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f16:	46a8      	mov	r8, r5
 8012f18:	2600      	movs	r6, #0
 8012f1a:	e01b      	b.n	8012f54 <__kernel_rem_pio2+0xbc>
 8012f1c:	42ef      	cmn	r7, r5
 8012f1e:	d407      	bmi.n	8012f30 <__kernel_rem_pio2+0x98>
 8012f20:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012f24:	f7ed faca 	bl	80004bc <__aeabi_i2d>
 8012f28:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f2c:	3501      	adds	r5, #1
 8012f2e:	e7e0      	b.n	8012ef2 <__kernel_rem_pio2+0x5a>
 8012f30:	ec51 0b18 	vmov	r0, r1, d8
 8012f34:	e7f8      	b.n	8012f28 <__kernel_rem_pio2+0x90>
 8012f36:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012f3a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012f3e:	f7ed fb27 	bl	8000590 <__aeabi_dmul>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f4a:	f7ed f96b 	bl	8000224 <__adddf3>
 8012f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f52:	3601      	adds	r6, #1
 8012f54:	9b05      	ldr	r3, [sp, #20]
 8012f56:	429e      	cmp	r6, r3
 8012f58:	dded      	ble.n	8012f36 <__kernel_rem_pio2+0x9e>
 8012f5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f5e:	3701      	adds	r7, #1
 8012f60:	ecaa 7b02 	vstmia	sl!, {d7}
 8012f64:	3508      	adds	r5, #8
 8012f66:	e7cd      	b.n	8012f04 <__kernel_rem_pio2+0x6c>
 8012f68:	9b00      	ldr	r3, [sp, #0]
 8012f6a:	f8dd 8000 	ldr.w	r8, [sp]
 8012f6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012f70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f74:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012f78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f7e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f84:	ab98      	add	r3, sp, #608	@ 0x260
 8012f86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012f8a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012f8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f92:	ac0c      	add	r4, sp, #48	@ 0x30
 8012f94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012f96:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012f9a:	46a1      	mov	r9, r4
 8012f9c:	46c2      	mov	sl, r8
 8012f9e:	f1ba 0f00 	cmp.w	sl, #0
 8012fa2:	dc77      	bgt.n	8013094 <__kernel_rem_pio2+0x1fc>
 8012fa4:	4658      	mov	r0, fp
 8012fa6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012faa:	f7ff fe95 	bl	8012cd8 <scalbn>
 8012fae:	ec57 6b10 	vmov	r6, r7, d0
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012fb8:	4630      	mov	r0, r6
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f7ed fae8 	bl	8000590 <__aeabi_dmul>
 8012fc0:	ec41 0b10 	vmov	d0, r0, r1
 8012fc4:	f000 fd20 	bl	8013a08 <floor>
 8012fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80131bc <__kernel_rem_pio2+0x324>)
 8012fca:	ec51 0b10 	vmov	r0, r1, d0
 8012fce:	2200      	movs	r2, #0
 8012fd0:	f7ed fade 	bl	8000590 <__aeabi_dmul>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	4630      	mov	r0, r6
 8012fda:	4639      	mov	r1, r7
 8012fdc:	f7ed f920 	bl	8000220 <__aeabi_dsub>
 8012fe0:	460f      	mov	r7, r1
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	f7ed fd6e 	bl	8000ac4 <__aeabi_d2iz>
 8012fe8:	9002      	str	r0, [sp, #8]
 8012fea:	f7ed fa67 	bl	80004bc <__aeabi_i2d>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	f7ed f913 	bl	8000220 <__aeabi_dsub>
 8012ffa:	f1bb 0f00 	cmp.w	fp, #0
 8012ffe:	4606      	mov	r6, r0
 8013000:	460f      	mov	r7, r1
 8013002:	dd6c      	ble.n	80130de <__kernel_rem_pio2+0x246>
 8013004:	f108 31ff 	add.w	r1, r8, #4294967295
 8013008:	ab0c      	add	r3, sp, #48	@ 0x30
 801300a:	9d02      	ldr	r5, [sp, #8]
 801300c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013010:	f1cb 0018 	rsb	r0, fp, #24
 8013014:	fa43 f200 	asr.w	r2, r3, r0
 8013018:	4415      	add	r5, r2
 801301a:	4082      	lsls	r2, r0
 801301c:	1a9b      	subs	r3, r3, r2
 801301e:	aa0c      	add	r2, sp, #48	@ 0x30
 8013020:	9502      	str	r5, [sp, #8]
 8013022:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013026:	f1cb 0217 	rsb	r2, fp, #23
 801302a:	fa43 f902 	asr.w	r9, r3, r2
 801302e:	f1b9 0f00 	cmp.w	r9, #0
 8013032:	dd64      	ble.n	80130fe <__kernel_rem_pio2+0x266>
 8013034:	9b02      	ldr	r3, [sp, #8]
 8013036:	2200      	movs	r2, #0
 8013038:	3301      	adds	r3, #1
 801303a:	9302      	str	r3, [sp, #8]
 801303c:	4615      	mov	r5, r2
 801303e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013042:	4590      	cmp	r8, r2
 8013044:	f300 80a1 	bgt.w	801318a <__kernel_rem_pio2+0x2f2>
 8013048:	f1bb 0f00 	cmp.w	fp, #0
 801304c:	dd07      	ble.n	801305e <__kernel_rem_pio2+0x1c6>
 801304e:	f1bb 0f01 	cmp.w	fp, #1
 8013052:	f000 80c1 	beq.w	80131d8 <__kernel_rem_pio2+0x340>
 8013056:	f1bb 0f02 	cmp.w	fp, #2
 801305a:	f000 80c8 	beq.w	80131ee <__kernel_rem_pio2+0x356>
 801305e:	f1b9 0f02 	cmp.w	r9, #2
 8013062:	d14c      	bne.n	80130fe <__kernel_rem_pio2+0x266>
 8013064:	4632      	mov	r2, r6
 8013066:	463b      	mov	r3, r7
 8013068:	4955      	ldr	r1, [pc, #340]	@ (80131c0 <__kernel_rem_pio2+0x328>)
 801306a:	2000      	movs	r0, #0
 801306c:	f7ed f8d8 	bl	8000220 <__aeabi_dsub>
 8013070:	4606      	mov	r6, r0
 8013072:	460f      	mov	r7, r1
 8013074:	2d00      	cmp	r5, #0
 8013076:	d042      	beq.n	80130fe <__kernel_rem_pio2+0x266>
 8013078:	4658      	mov	r0, fp
 801307a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80131b0 <__kernel_rem_pio2+0x318>
 801307e:	f7ff fe2b 	bl	8012cd8 <scalbn>
 8013082:	4630      	mov	r0, r6
 8013084:	4639      	mov	r1, r7
 8013086:	ec53 2b10 	vmov	r2, r3, d0
 801308a:	f7ed f8c9 	bl	8000220 <__aeabi_dsub>
 801308e:	4606      	mov	r6, r0
 8013090:	460f      	mov	r7, r1
 8013092:	e034      	b.n	80130fe <__kernel_rem_pio2+0x266>
 8013094:	4b4b      	ldr	r3, [pc, #300]	@ (80131c4 <__kernel_rem_pio2+0x32c>)
 8013096:	2200      	movs	r2, #0
 8013098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801309c:	f7ed fa78 	bl	8000590 <__aeabi_dmul>
 80130a0:	f7ed fd10 	bl	8000ac4 <__aeabi_d2iz>
 80130a4:	f7ed fa0a 	bl	80004bc <__aeabi_i2d>
 80130a8:	4b47      	ldr	r3, [pc, #284]	@ (80131c8 <__kernel_rem_pio2+0x330>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	4606      	mov	r6, r0
 80130ae:	460f      	mov	r7, r1
 80130b0:	f7ed fa6e 	bl	8000590 <__aeabi_dmul>
 80130b4:	4602      	mov	r2, r0
 80130b6:	460b      	mov	r3, r1
 80130b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130bc:	f7ed f8b0 	bl	8000220 <__aeabi_dsub>
 80130c0:	f7ed fd00 	bl	8000ac4 <__aeabi_d2iz>
 80130c4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80130c8:	f849 0b04 	str.w	r0, [r9], #4
 80130cc:	4639      	mov	r1, r7
 80130ce:	4630      	mov	r0, r6
 80130d0:	f7ed f8a8 	bl	8000224 <__adddf3>
 80130d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130dc:	e75f      	b.n	8012f9e <__kernel_rem_pio2+0x106>
 80130de:	d107      	bne.n	80130f0 <__kernel_rem_pio2+0x258>
 80130e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80130e4:	aa0c      	add	r2, sp, #48	@ 0x30
 80130e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130ea:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80130ee:	e79e      	b.n	801302e <__kernel_rem_pio2+0x196>
 80130f0:	4b36      	ldr	r3, [pc, #216]	@ (80131cc <__kernel_rem_pio2+0x334>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	f7ed fcd2 	bl	8000a9c <__aeabi_dcmpge>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	d143      	bne.n	8013184 <__kernel_rem_pio2+0x2ec>
 80130fc:	4681      	mov	r9, r0
 80130fe:	2200      	movs	r2, #0
 8013100:	2300      	movs	r3, #0
 8013102:	4630      	mov	r0, r6
 8013104:	4639      	mov	r1, r7
 8013106:	f7ed fcab 	bl	8000a60 <__aeabi_dcmpeq>
 801310a:	2800      	cmp	r0, #0
 801310c:	f000 80c1 	beq.w	8013292 <__kernel_rem_pio2+0x3fa>
 8013110:	f108 33ff 	add.w	r3, r8, #4294967295
 8013114:	2200      	movs	r2, #0
 8013116:	9900      	ldr	r1, [sp, #0]
 8013118:	428b      	cmp	r3, r1
 801311a:	da70      	bge.n	80131fe <__kernel_rem_pio2+0x366>
 801311c:	2a00      	cmp	r2, #0
 801311e:	f000 808b 	beq.w	8013238 <__kernel_rem_pio2+0x3a0>
 8013122:	f108 38ff 	add.w	r8, r8, #4294967295
 8013126:	ab0c      	add	r3, sp, #48	@ 0x30
 8013128:	f1ab 0b18 	sub.w	fp, fp, #24
 801312c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d0f6      	beq.n	8013122 <__kernel_rem_pio2+0x28a>
 8013134:	4658      	mov	r0, fp
 8013136:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80131b0 <__kernel_rem_pio2+0x318>
 801313a:	f7ff fdcd 	bl	8012cd8 <scalbn>
 801313e:	f108 0301 	add.w	r3, r8, #1
 8013142:	00da      	lsls	r2, r3, #3
 8013144:	9205      	str	r2, [sp, #20]
 8013146:	ec55 4b10 	vmov	r4, r5, d0
 801314a:	aa70      	add	r2, sp, #448	@ 0x1c0
 801314c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80131c4 <__kernel_rem_pio2+0x32c>
 8013150:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013154:	4646      	mov	r6, r8
 8013156:	f04f 0a00 	mov.w	sl, #0
 801315a:	2e00      	cmp	r6, #0
 801315c:	f280 80d1 	bge.w	8013302 <__kernel_rem_pio2+0x46a>
 8013160:	4644      	mov	r4, r8
 8013162:	2c00      	cmp	r4, #0
 8013164:	f2c0 80ff 	blt.w	8013366 <__kernel_rem_pio2+0x4ce>
 8013168:	4b19      	ldr	r3, [pc, #100]	@ (80131d0 <__kernel_rem_pio2+0x338>)
 801316a:	461f      	mov	r7, r3
 801316c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801316e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013172:	9306      	str	r3, [sp, #24]
 8013174:	f04f 0a00 	mov.w	sl, #0
 8013178:	f04f 0b00 	mov.w	fp, #0
 801317c:	2600      	movs	r6, #0
 801317e:	eba8 0504 	sub.w	r5, r8, r4
 8013182:	e0e4      	b.n	801334e <__kernel_rem_pio2+0x4b6>
 8013184:	f04f 0902 	mov.w	r9, #2
 8013188:	e754      	b.n	8013034 <__kernel_rem_pio2+0x19c>
 801318a:	f854 3b04 	ldr.w	r3, [r4], #4
 801318e:	bb0d      	cbnz	r5, 80131d4 <__kernel_rem_pio2+0x33c>
 8013190:	b123      	cbz	r3, 801319c <__kernel_rem_pio2+0x304>
 8013192:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013196:	f844 3c04 	str.w	r3, [r4, #-4]
 801319a:	2301      	movs	r3, #1
 801319c:	3201      	adds	r2, #1
 801319e:	461d      	mov	r5, r3
 80131a0:	e74f      	b.n	8013042 <__kernel_rem_pio2+0x1aa>
 80131a2:	bf00      	nop
 80131a4:	f3af 8000 	nop.w
	...
 80131b4:	3ff00000 	.word	0x3ff00000
 80131b8:	080141b8 	.word	0x080141b8
 80131bc:	40200000 	.word	0x40200000
 80131c0:	3ff00000 	.word	0x3ff00000
 80131c4:	3e700000 	.word	0x3e700000
 80131c8:	41700000 	.word	0x41700000
 80131cc:	3fe00000 	.word	0x3fe00000
 80131d0:	08014178 	.word	0x08014178
 80131d4:	1acb      	subs	r3, r1, r3
 80131d6:	e7de      	b.n	8013196 <__kernel_rem_pio2+0x2fe>
 80131d8:	f108 32ff 	add.w	r2, r8, #4294967295
 80131dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80131de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80131e6:	a90c      	add	r1, sp, #48	@ 0x30
 80131e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80131ec:	e737      	b.n	801305e <__kernel_rem_pio2+0x1c6>
 80131ee:	f108 32ff 	add.w	r2, r8, #4294967295
 80131f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80131f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80131fc:	e7f3      	b.n	80131e6 <__kernel_rem_pio2+0x34e>
 80131fe:	a90c      	add	r1, sp, #48	@ 0x30
 8013200:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013204:	3b01      	subs	r3, #1
 8013206:	430a      	orrs	r2, r1
 8013208:	e785      	b.n	8013116 <__kernel_rem_pio2+0x27e>
 801320a:	3401      	adds	r4, #1
 801320c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013210:	2a00      	cmp	r2, #0
 8013212:	d0fa      	beq.n	801320a <__kernel_rem_pio2+0x372>
 8013214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013216:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801321a:	eb0d 0503 	add.w	r5, sp, r3
 801321e:	9b06      	ldr	r3, [sp, #24]
 8013220:	aa20      	add	r2, sp, #128	@ 0x80
 8013222:	4443      	add	r3, r8
 8013224:	f108 0701 	add.w	r7, r8, #1
 8013228:	3d98      	subs	r5, #152	@ 0x98
 801322a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801322e:	4444      	add	r4, r8
 8013230:	42bc      	cmp	r4, r7
 8013232:	da04      	bge.n	801323e <__kernel_rem_pio2+0x3a6>
 8013234:	46a0      	mov	r8, r4
 8013236:	e6a2      	b.n	8012f7e <__kernel_rem_pio2+0xe6>
 8013238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801323a:	2401      	movs	r4, #1
 801323c:	e7e6      	b.n	801320c <__kernel_rem_pio2+0x374>
 801323e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013240:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013244:	f7ed f93a 	bl	80004bc <__aeabi_i2d>
 8013248:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013508 <__kernel_rem_pio2+0x670>
 801324c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013250:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013258:	46b2      	mov	sl, r6
 801325a:	f04f 0800 	mov.w	r8, #0
 801325e:	9b05      	ldr	r3, [sp, #20]
 8013260:	4598      	cmp	r8, r3
 8013262:	dd05      	ble.n	8013270 <__kernel_rem_pio2+0x3d8>
 8013264:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013268:	3701      	adds	r7, #1
 801326a:	eca5 7b02 	vstmia	r5!, {d7}
 801326e:	e7df      	b.n	8013230 <__kernel_rem_pio2+0x398>
 8013270:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013274:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013278:	f7ed f98a 	bl	8000590 <__aeabi_dmul>
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013284:	f7ec ffce 	bl	8000224 <__adddf3>
 8013288:	f108 0801 	add.w	r8, r8, #1
 801328c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013290:	e7e5      	b.n	801325e <__kernel_rem_pio2+0x3c6>
 8013292:	f1cb 0000 	rsb	r0, fp, #0
 8013296:	ec47 6b10 	vmov	d0, r6, r7
 801329a:	f7ff fd1d 	bl	8012cd8 <scalbn>
 801329e:	ec55 4b10 	vmov	r4, r5, d0
 80132a2:	4b9b      	ldr	r3, [pc, #620]	@ (8013510 <__kernel_rem_pio2+0x678>)
 80132a4:	2200      	movs	r2, #0
 80132a6:	4620      	mov	r0, r4
 80132a8:	4629      	mov	r1, r5
 80132aa:	f7ed fbf7 	bl	8000a9c <__aeabi_dcmpge>
 80132ae:	b300      	cbz	r0, 80132f2 <__kernel_rem_pio2+0x45a>
 80132b0:	4b98      	ldr	r3, [pc, #608]	@ (8013514 <__kernel_rem_pio2+0x67c>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	4620      	mov	r0, r4
 80132b6:	4629      	mov	r1, r5
 80132b8:	f7ed f96a 	bl	8000590 <__aeabi_dmul>
 80132bc:	f7ed fc02 	bl	8000ac4 <__aeabi_d2iz>
 80132c0:	4606      	mov	r6, r0
 80132c2:	f7ed f8fb 	bl	80004bc <__aeabi_i2d>
 80132c6:	4b92      	ldr	r3, [pc, #584]	@ (8013510 <__kernel_rem_pio2+0x678>)
 80132c8:	2200      	movs	r2, #0
 80132ca:	f7ed f961 	bl	8000590 <__aeabi_dmul>
 80132ce:	460b      	mov	r3, r1
 80132d0:	4602      	mov	r2, r0
 80132d2:	4629      	mov	r1, r5
 80132d4:	4620      	mov	r0, r4
 80132d6:	f7ec ffa3 	bl	8000220 <__aeabi_dsub>
 80132da:	f7ed fbf3 	bl	8000ac4 <__aeabi_d2iz>
 80132de:	ab0c      	add	r3, sp, #48	@ 0x30
 80132e0:	f10b 0b18 	add.w	fp, fp, #24
 80132e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80132e8:	f108 0801 	add.w	r8, r8, #1
 80132ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80132f0:	e720      	b.n	8013134 <__kernel_rem_pio2+0x29c>
 80132f2:	4620      	mov	r0, r4
 80132f4:	4629      	mov	r1, r5
 80132f6:	f7ed fbe5 	bl	8000ac4 <__aeabi_d2iz>
 80132fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80132fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013300:	e718      	b.n	8013134 <__kernel_rem_pio2+0x29c>
 8013302:	ab0c      	add	r3, sp, #48	@ 0x30
 8013304:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013308:	f7ed f8d8 	bl	80004bc <__aeabi_i2d>
 801330c:	4622      	mov	r2, r4
 801330e:	462b      	mov	r3, r5
 8013310:	f7ed f93e 	bl	8000590 <__aeabi_dmul>
 8013314:	4652      	mov	r2, sl
 8013316:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801331a:	465b      	mov	r3, fp
 801331c:	4620      	mov	r0, r4
 801331e:	4629      	mov	r1, r5
 8013320:	f7ed f936 	bl	8000590 <__aeabi_dmul>
 8013324:	3e01      	subs	r6, #1
 8013326:	4604      	mov	r4, r0
 8013328:	460d      	mov	r5, r1
 801332a:	e716      	b.n	801315a <__kernel_rem_pio2+0x2c2>
 801332c:	9906      	ldr	r1, [sp, #24]
 801332e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013332:	9106      	str	r1, [sp, #24]
 8013334:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013338:	f7ed f92a 	bl	8000590 <__aeabi_dmul>
 801333c:	4602      	mov	r2, r0
 801333e:	460b      	mov	r3, r1
 8013340:	4650      	mov	r0, sl
 8013342:	4659      	mov	r1, fp
 8013344:	f7ec ff6e 	bl	8000224 <__adddf3>
 8013348:	3601      	adds	r6, #1
 801334a:	4682      	mov	sl, r0
 801334c:	468b      	mov	fp, r1
 801334e:	9b00      	ldr	r3, [sp, #0]
 8013350:	429e      	cmp	r6, r3
 8013352:	dc01      	bgt.n	8013358 <__kernel_rem_pio2+0x4c0>
 8013354:	42ae      	cmp	r6, r5
 8013356:	dde9      	ble.n	801332c <__kernel_rem_pio2+0x494>
 8013358:	ab48      	add	r3, sp, #288	@ 0x120
 801335a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801335e:	e9c5 ab00 	strd	sl, fp, [r5]
 8013362:	3c01      	subs	r4, #1
 8013364:	e6fd      	b.n	8013162 <__kernel_rem_pio2+0x2ca>
 8013366:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013368:	2b02      	cmp	r3, #2
 801336a:	dc0b      	bgt.n	8013384 <__kernel_rem_pio2+0x4ec>
 801336c:	2b00      	cmp	r3, #0
 801336e:	dc35      	bgt.n	80133dc <__kernel_rem_pio2+0x544>
 8013370:	d059      	beq.n	8013426 <__kernel_rem_pio2+0x58e>
 8013372:	9b02      	ldr	r3, [sp, #8]
 8013374:	f003 0007 	and.w	r0, r3, #7
 8013378:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801337c:	ecbd 8b02 	vpop	{d8}
 8013380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013384:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013386:	2b03      	cmp	r3, #3
 8013388:	d1f3      	bne.n	8013372 <__kernel_rem_pio2+0x4da>
 801338a:	9b05      	ldr	r3, [sp, #20]
 801338c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013390:	eb0d 0403 	add.w	r4, sp, r3
 8013394:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013398:	4625      	mov	r5, r4
 801339a:	46c2      	mov	sl, r8
 801339c:	f1ba 0f00 	cmp.w	sl, #0
 80133a0:	dc69      	bgt.n	8013476 <__kernel_rem_pio2+0x5de>
 80133a2:	4645      	mov	r5, r8
 80133a4:	2d01      	cmp	r5, #1
 80133a6:	f300 8087 	bgt.w	80134b8 <__kernel_rem_pio2+0x620>
 80133aa:	9c05      	ldr	r4, [sp, #20]
 80133ac:	ab48      	add	r3, sp, #288	@ 0x120
 80133ae:	441c      	add	r4, r3
 80133b0:	2000      	movs	r0, #0
 80133b2:	2100      	movs	r1, #0
 80133b4:	f1b8 0f01 	cmp.w	r8, #1
 80133b8:	f300 809c 	bgt.w	80134f4 <__kernel_rem_pio2+0x65c>
 80133bc:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80133c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80133c4:	f1b9 0f00 	cmp.w	r9, #0
 80133c8:	f040 80a6 	bne.w	8013518 <__kernel_rem_pio2+0x680>
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	e9c3 5600 	strd	r5, r6, [r3]
 80133d2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80133d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80133da:	e7ca      	b.n	8013372 <__kernel_rem_pio2+0x4da>
 80133dc:	9d05      	ldr	r5, [sp, #20]
 80133de:	ab48      	add	r3, sp, #288	@ 0x120
 80133e0:	441d      	add	r5, r3
 80133e2:	4644      	mov	r4, r8
 80133e4:	2000      	movs	r0, #0
 80133e6:	2100      	movs	r1, #0
 80133e8:	2c00      	cmp	r4, #0
 80133ea:	da35      	bge.n	8013458 <__kernel_rem_pio2+0x5c0>
 80133ec:	f1b9 0f00 	cmp.w	r9, #0
 80133f0:	d038      	beq.n	8013464 <__kernel_rem_pio2+0x5cc>
 80133f2:	4602      	mov	r2, r0
 80133f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80133f8:	9c04      	ldr	r4, [sp, #16]
 80133fa:	e9c4 2300 	strd	r2, r3, [r4]
 80133fe:	4602      	mov	r2, r0
 8013400:	460b      	mov	r3, r1
 8013402:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013406:	f7ec ff0b 	bl	8000220 <__aeabi_dsub>
 801340a:	ad4a      	add	r5, sp, #296	@ 0x128
 801340c:	2401      	movs	r4, #1
 801340e:	45a0      	cmp	r8, r4
 8013410:	da2b      	bge.n	801346a <__kernel_rem_pio2+0x5d2>
 8013412:	f1b9 0f00 	cmp.w	r9, #0
 8013416:	d002      	beq.n	801341e <__kernel_rem_pio2+0x586>
 8013418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801341c:	4619      	mov	r1, r3
 801341e:	9b04      	ldr	r3, [sp, #16]
 8013420:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013424:	e7a5      	b.n	8013372 <__kernel_rem_pio2+0x4da>
 8013426:	9c05      	ldr	r4, [sp, #20]
 8013428:	ab48      	add	r3, sp, #288	@ 0x120
 801342a:	441c      	add	r4, r3
 801342c:	2000      	movs	r0, #0
 801342e:	2100      	movs	r1, #0
 8013430:	f1b8 0f00 	cmp.w	r8, #0
 8013434:	da09      	bge.n	801344a <__kernel_rem_pio2+0x5b2>
 8013436:	f1b9 0f00 	cmp.w	r9, #0
 801343a:	d002      	beq.n	8013442 <__kernel_rem_pio2+0x5aa>
 801343c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013440:	4619      	mov	r1, r3
 8013442:	9b04      	ldr	r3, [sp, #16]
 8013444:	e9c3 0100 	strd	r0, r1, [r3]
 8013448:	e793      	b.n	8013372 <__kernel_rem_pio2+0x4da>
 801344a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801344e:	f7ec fee9 	bl	8000224 <__adddf3>
 8013452:	f108 38ff 	add.w	r8, r8, #4294967295
 8013456:	e7eb      	b.n	8013430 <__kernel_rem_pio2+0x598>
 8013458:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801345c:	f7ec fee2 	bl	8000224 <__adddf3>
 8013460:	3c01      	subs	r4, #1
 8013462:	e7c1      	b.n	80133e8 <__kernel_rem_pio2+0x550>
 8013464:	4602      	mov	r2, r0
 8013466:	460b      	mov	r3, r1
 8013468:	e7c6      	b.n	80133f8 <__kernel_rem_pio2+0x560>
 801346a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801346e:	f7ec fed9 	bl	8000224 <__adddf3>
 8013472:	3401      	adds	r4, #1
 8013474:	e7cb      	b.n	801340e <__kernel_rem_pio2+0x576>
 8013476:	ed35 7b02 	vldmdb	r5!, {d7}
 801347a:	ed8d 7b00 	vstr	d7, [sp]
 801347e:	ed95 7b02 	vldr	d7, [r5, #8]
 8013482:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013486:	ec53 2b17 	vmov	r2, r3, d7
 801348a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801348e:	f7ec fec9 	bl	8000224 <__adddf3>
 8013492:	4602      	mov	r2, r0
 8013494:	460b      	mov	r3, r1
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801349e:	f7ec febf 	bl	8000220 <__aeabi_dsub>
 80134a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80134a6:	f7ec febd 	bl	8000224 <__adddf3>
 80134aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80134b2:	e9c5 6700 	strd	r6, r7, [r5]
 80134b6:	e771      	b.n	801339c <__kernel_rem_pio2+0x504>
 80134b8:	ed34 7b02 	vldmdb	r4!, {d7}
 80134bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80134c0:	ec51 0b17 	vmov	r0, r1, d7
 80134c4:	4652      	mov	r2, sl
 80134c6:	465b      	mov	r3, fp
 80134c8:	ed8d 7b00 	vstr	d7, [sp]
 80134cc:	f7ec feaa 	bl	8000224 <__adddf3>
 80134d0:	4602      	mov	r2, r0
 80134d2:	460b      	mov	r3, r1
 80134d4:	4606      	mov	r6, r0
 80134d6:	460f      	mov	r7, r1
 80134d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134dc:	f7ec fea0 	bl	8000220 <__aeabi_dsub>
 80134e0:	4652      	mov	r2, sl
 80134e2:	465b      	mov	r3, fp
 80134e4:	f7ec fe9e 	bl	8000224 <__adddf3>
 80134e8:	3d01      	subs	r5, #1
 80134ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80134ee:	e9c4 6700 	strd	r6, r7, [r4]
 80134f2:	e757      	b.n	80133a4 <__kernel_rem_pio2+0x50c>
 80134f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80134f8:	f7ec fe94 	bl	8000224 <__adddf3>
 80134fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8013500:	e758      	b.n	80133b4 <__kernel_rem_pio2+0x51c>
 8013502:	bf00      	nop
 8013504:	f3af 8000 	nop.w
	...
 8013510:	41700000 	.word	0x41700000
 8013514:	3e700000 	.word	0x3e700000
 8013518:	9b04      	ldr	r3, [sp, #16]
 801351a:	9a04      	ldr	r2, [sp, #16]
 801351c:	601d      	str	r5, [r3, #0]
 801351e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8013522:	605c      	str	r4, [r3, #4]
 8013524:	609f      	str	r7, [r3, #8]
 8013526:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801352a:	60d3      	str	r3, [r2, #12]
 801352c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013530:	6110      	str	r0, [r2, #16]
 8013532:	6153      	str	r3, [r2, #20]
 8013534:	e71d      	b.n	8013372 <__kernel_rem_pio2+0x4da>
 8013536:	bf00      	nop

08013538 <__kernel_rem_pio2f>:
 8013538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353c:	ed2d 8b04 	vpush	{d8-d9}
 8013540:	b0d9      	sub	sp, #356	@ 0x164
 8013542:	4690      	mov	r8, r2
 8013544:	9001      	str	r0, [sp, #4]
 8013546:	4ab6      	ldr	r2, [pc, #728]	@ (8013820 <__kernel_rem_pio2f+0x2e8>)
 8013548:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801354a:	f118 0f04 	cmn.w	r8, #4
 801354e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013552:	460f      	mov	r7, r1
 8013554:	f103 3bff 	add.w	fp, r3, #4294967295
 8013558:	db26      	blt.n	80135a8 <__kernel_rem_pio2f+0x70>
 801355a:	f1b8 0203 	subs.w	r2, r8, #3
 801355e:	bf48      	it	mi
 8013560:	f108 0204 	addmi.w	r2, r8, #4
 8013564:	10d2      	asrs	r2, r2, #3
 8013566:	1c55      	adds	r5, r2, #1
 8013568:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801356a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 801356e:	00e8      	lsls	r0, r5, #3
 8013570:	eba2 060b 	sub.w	r6, r2, fp
 8013574:	9002      	str	r0, [sp, #8]
 8013576:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801357a:	eb0a 0c0b 	add.w	ip, sl, fp
 801357e:	ac1c      	add	r4, sp, #112	@ 0x70
 8013580:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013584:	2000      	movs	r0, #0
 8013586:	4560      	cmp	r0, ip
 8013588:	dd10      	ble.n	80135ac <__kernel_rem_pio2f+0x74>
 801358a:	a91c      	add	r1, sp, #112	@ 0x70
 801358c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013590:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013594:	2600      	movs	r6, #0
 8013596:	4556      	cmp	r6, sl
 8013598:	dc24      	bgt.n	80135e4 <__kernel_rem_pio2f+0xac>
 801359a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801359e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 80135a2:	4684      	mov	ip, r0
 80135a4:	2400      	movs	r4, #0
 80135a6:	e016      	b.n	80135d6 <__kernel_rem_pio2f+0x9e>
 80135a8:	2200      	movs	r2, #0
 80135aa:	e7dc      	b.n	8013566 <__kernel_rem_pio2f+0x2e>
 80135ac:	42c6      	cmn	r6, r0
 80135ae:	bf5d      	ittte	pl
 80135b0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80135b4:	ee07 1a90 	vmovpl	s15, r1
 80135b8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80135bc:	eef0 7a47 	vmovmi.f32	s15, s14
 80135c0:	ece4 7a01 	vstmia	r4!, {s15}
 80135c4:	3001      	adds	r0, #1
 80135c6:	e7de      	b.n	8013586 <__kernel_rem_pio2f+0x4e>
 80135c8:	ecfe 6a01 	vldmia	lr!, {s13}
 80135cc:	ed3c 7a01 	vldmdb	ip!, {s14}
 80135d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135d4:	3401      	adds	r4, #1
 80135d6:	455c      	cmp	r4, fp
 80135d8:	ddf6      	ble.n	80135c8 <__kernel_rem_pio2f+0x90>
 80135da:	ece9 7a01 	vstmia	r9!, {s15}
 80135de:	3601      	adds	r6, #1
 80135e0:	3004      	adds	r0, #4
 80135e2:	e7d8      	b.n	8013596 <__kernel_rem_pio2f+0x5e>
 80135e4:	a908      	add	r1, sp, #32
 80135e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80135ea:	9104      	str	r1, [sp, #16]
 80135ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80135ee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801382c <__kernel_rem_pio2f+0x2f4>
 80135f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013828 <__kernel_rem_pio2f+0x2f0>
 80135f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80135fa:	9203      	str	r2, [sp, #12]
 80135fc:	4654      	mov	r4, sl
 80135fe:	00a2      	lsls	r2, r4, #2
 8013600:	9205      	str	r2, [sp, #20]
 8013602:	aa58      	add	r2, sp, #352	@ 0x160
 8013604:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013608:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801360c:	a944      	add	r1, sp, #272	@ 0x110
 801360e:	aa08      	add	r2, sp, #32
 8013610:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013614:	4694      	mov	ip, r2
 8013616:	4626      	mov	r6, r4
 8013618:	2e00      	cmp	r6, #0
 801361a:	dc4c      	bgt.n	80136b6 <__kernel_rem_pio2f+0x17e>
 801361c:	4628      	mov	r0, r5
 801361e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013622:	f7ff fbd3 	bl	8012dcc <scalbnf>
 8013626:	eeb0 8a40 	vmov.f32	s16, s0
 801362a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801362e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013632:	f000 fa65 	bl	8013b00 <floorf>
 8013636:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801363a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801363e:	2d00      	cmp	r5, #0
 8013640:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013644:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013648:	ee17 9a90 	vmov	r9, s15
 801364c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013650:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013654:	dd41      	ble.n	80136da <__kernel_rem_pio2f+0x1a2>
 8013656:	f104 3cff 	add.w	ip, r4, #4294967295
 801365a:	a908      	add	r1, sp, #32
 801365c:	f1c5 0e08 	rsb	lr, r5, #8
 8013660:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013664:	fa46 f00e 	asr.w	r0, r6, lr
 8013668:	4481      	add	r9, r0
 801366a:	fa00 f00e 	lsl.w	r0, r0, lr
 801366e:	1a36      	subs	r6, r6, r0
 8013670:	f1c5 0007 	rsb	r0, r5, #7
 8013674:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013678:	4106      	asrs	r6, r0
 801367a:	2e00      	cmp	r6, #0
 801367c:	dd3c      	ble.n	80136f8 <__kernel_rem_pio2f+0x1c0>
 801367e:	f04f 0e00 	mov.w	lr, #0
 8013682:	f109 0901 	add.w	r9, r9, #1
 8013686:	4670      	mov	r0, lr
 8013688:	4574      	cmp	r4, lr
 801368a:	dc68      	bgt.n	801375e <__kernel_rem_pio2f+0x226>
 801368c:	2d00      	cmp	r5, #0
 801368e:	dd03      	ble.n	8013698 <__kernel_rem_pio2f+0x160>
 8013690:	2d01      	cmp	r5, #1
 8013692:	d074      	beq.n	801377e <__kernel_rem_pio2f+0x246>
 8013694:	2d02      	cmp	r5, #2
 8013696:	d07d      	beq.n	8013794 <__kernel_rem_pio2f+0x25c>
 8013698:	2e02      	cmp	r6, #2
 801369a:	d12d      	bne.n	80136f8 <__kernel_rem_pio2f+0x1c0>
 801369c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80136a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80136a4:	b340      	cbz	r0, 80136f8 <__kernel_rem_pio2f+0x1c0>
 80136a6:	4628      	mov	r0, r5
 80136a8:	9306      	str	r3, [sp, #24]
 80136aa:	f7ff fb8f 	bl	8012dcc <scalbnf>
 80136ae:	9b06      	ldr	r3, [sp, #24]
 80136b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80136b4:	e020      	b.n	80136f8 <__kernel_rem_pio2f+0x1c0>
 80136b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80136ba:	3e01      	subs	r6, #1
 80136bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80136c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136cc:	ecac 0a01 	vstmia	ip!, {s0}
 80136d0:	ed30 0a01 	vldmdb	r0!, {s0}
 80136d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80136d8:	e79e      	b.n	8013618 <__kernel_rem_pio2f+0xe0>
 80136da:	d105      	bne.n	80136e8 <__kernel_rem_pio2f+0x1b0>
 80136dc:	1e60      	subs	r0, r4, #1
 80136de:	a908      	add	r1, sp, #32
 80136e0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80136e4:	11f6      	asrs	r6, r6, #7
 80136e6:	e7c8      	b.n	801367a <__kernel_rem_pio2f+0x142>
 80136e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80136ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80136f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f4:	da31      	bge.n	801375a <__kernel_rem_pio2f+0x222>
 80136f6:	2600      	movs	r6, #0
 80136f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013700:	f040 8098 	bne.w	8013834 <__kernel_rem_pio2f+0x2fc>
 8013704:	1e60      	subs	r0, r4, #1
 8013706:	2200      	movs	r2, #0
 8013708:	4550      	cmp	r0, sl
 801370a:	da4b      	bge.n	80137a4 <__kernel_rem_pio2f+0x26c>
 801370c:	2a00      	cmp	r2, #0
 801370e:	d065      	beq.n	80137dc <__kernel_rem_pio2f+0x2a4>
 8013710:	3c01      	subs	r4, #1
 8013712:	ab08      	add	r3, sp, #32
 8013714:	3d08      	subs	r5, #8
 8013716:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d0f8      	beq.n	8013710 <__kernel_rem_pio2f+0x1d8>
 801371e:	4628      	mov	r0, r5
 8013720:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013724:	f7ff fb52 	bl	8012dcc <scalbnf>
 8013728:	1c63      	adds	r3, r4, #1
 801372a:	aa44      	add	r2, sp, #272	@ 0x110
 801372c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801382c <__kernel_rem_pio2f+0x2f4>
 8013730:	0099      	lsls	r1, r3, #2
 8013732:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013736:	4623      	mov	r3, r4
 8013738:	2b00      	cmp	r3, #0
 801373a:	f280 80a9 	bge.w	8013890 <__kernel_rem_pio2f+0x358>
 801373e:	4623      	mov	r3, r4
 8013740:	2b00      	cmp	r3, #0
 8013742:	f2c0 80c7 	blt.w	80138d4 <__kernel_rem_pio2f+0x39c>
 8013746:	aa44      	add	r2, sp, #272	@ 0x110
 8013748:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801374c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013824 <__kernel_rem_pio2f+0x2ec>
 8013750:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 8013754:	2000      	movs	r0, #0
 8013756:	1ae2      	subs	r2, r4, r3
 8013758:	e0b1      	b.n	80138be <__kernel_rem_pio2f+0x386>
 801375a:	2602      	movs	r6, #2
 801375c:	e78f      	b.n	801367e <__kernel_rem_pio2f+0x146>
 801375e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013762:	b948      	cbnz	r0, 8013778 <__kernel_rem_pio2f+0x240>
 8013764:	b121      	cbz	r1, 8013770 <__kernel_rem_pio2f+0x238>
 8013766:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801376a:	f842 1c04 	str.w	r1, [r2, #-4]
 801376e:	2101      	movs	r1, #1
 8013770:	f10e 0e01 	add.w	lr, lr, #1
 8013774:	4608      	mov	r0, r1
 8013776:	e787      	b.n	8013688 <__kernel_rem_pio2f+0x150>
 8013778:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801377c:	e7f5      	b.n	801376a <__kernel_rem_pio2f+0x232>
 801377e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013782:	aa08      	add	r2, sp, #32
 8013784:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013788:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801378c:	a908      	add	r1, sp, #32
 801378e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013792:	e781      	b.n	8013698 <__kernel_rem_pio2f+0x160>
 8013794:	f104 3cff 	add.w	ip, r4, #4294967295
 8013798:	aa08      	add	r2, sp, #32
 801379a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801379e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80137a2:	e7f3      	b.n	801378c <__kernel_rem_pio2f+0x254>
 80137a4:	a908      	add	r1, sp, #32
 80137a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80137aa:	3801      	subs	r0, #1
 80137ac:	430a      	orrs	r2, r1
 80137ae:	e7ab      	b.n	8013708 <__kernel_rem_pio2f+0x1d0>
 80137b0:	3201      	adds	r2, #1
 80137b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80137b6:	2e00      	cmp	r6, #0
 80137b8:	d0fa      	beq.n	80137b0 <__kernel_rem_pio2f+0x278>
 80137ba:	9905      	ldr	r1, [sp, #20]
 80137bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80137c0:	eb0d 0001 	add.w	r0, sp, r1
 80137c4:	18e6      	adds	r6, r4, r3
 80137c6:	a91c      	add	r1, sp, #112	@ 0x70
 80137c8:	f104 0c01 	add.w	ip, r4, #1
 80137cc:	384c      	subs	r0, #76	@ 0x4c
 80137ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80137d2:	4422      	add	r2, r4
 80137d4:	4562      	cmp	r2, ip
 80137d6:	da04      	bge.n	80137e2 <__kernel_rem_pio2f+0x2aa>
 80137d8:	4614      	mov	r4, r2
 80137da:	e710      	b.n	80135fe <__kernel_rem_pio2f+0xc6>
 80137dc:	9804      	ldr	r0, [sp, #16]
 80137de:	2201      	movs	r2, #1
 80137e0:	e7e7      	b.n	80137b2 <__kernel_rem_pio2f+0x27a>
 80137e2:	9903      	ldr	r1, [sp, #12]
 80137e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80137e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80137ec:	9105      	str	r1, [sp, #20]
 80137ee:	ee07 1a90 	vmov	s15, r1
 80137f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137f6:	2400      	movs	r4, #0
 80137f8:	ece6 7a01 	vstmia	r6!, {s15}
 80137fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 8013800:	46b1      	mov	r9, r6
 8013802:	455c      	cmp	r4, fp
 8013804:	dd04      	ble.n	8013810 <__kernel_rem_pio2f+0x2d8>
 8013806:	ece0 7a01 	vstmia	r0!, {s15}
 801380a:	f10c 0c01 	add.w	ip, ip, #1
 801380e:	e7e1      	b.n	80137d4 <__kernel_rem_pio2f+0x29c>
 8013810:	ecfe 6a01 	vldmia	lr!, {s13}
 8013814:	ed39 7a01 	vldmdb	r9!, {s14}
 8013818:	3401      	adds	r4, #1
 801381a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801381e:	e7f0      	b.n	8013802 <__kernel_rem_pio2f+0x2ca>
 8013820:	080141f4 	.word	0x080141f4
 8013824:	080141c8 	.word	0x080141c8
 8013828:	43800000 	.word	0x43800000
 801382c:	3b800000 	.word	0x3b800000
 8013830:	00000000 	.word	0x00000000
 8013834:	9b02      	ldr	r3, [sp, #8]
 8013836:	eeb0 0a48 	vmov.f32	s0, s16
 801383a:	eba3 0008 	sub.w	r0, r3, r8
 801383e:	f7ff fac5 	bl	8012dcc <scalbnf>
 8013842:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013828 <__kernel_rem_pio2f+0x2f0>
 8013846:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384e:	db19      	blt.n	8013884 <__kernel_rem_pio2f+0x34c>
 8013850:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801382c <__kernel_rem_pio2f+0x2f4>
 8013854:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013858:	aa08      	add	r2, sp, #32
 801385a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801385e:	3508      	adds	r5, #8
 8013860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013864:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801386c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013870:	ee10 3a10 	vmov	r3, s0
 8013874:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013878:	ee17 3a90 	vmov	r3, s15
 801387c:	3401      	adds	r4, #1
 801387e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013882:	e74c      	b.n	801371e <__kernel_rem_pio2f+0x1e6>
 8013884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013888:	aa08      	add	r2, sp, #32
 801388a:	ee10 3a10 	vmov	r3, s0
 801388e:	e7f6      	b.n	801387e <__kernel_rem_pio2f+0x346>
 8013890:	a808      	add	r0, sp, #32
 8013892:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013896:	9001      	str	r0, [sp, #4]
 8013898:	ee07 0a90 	vmov	s15, r0
 801389c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138a0:	3b01      	subs	r3, #1
 80138a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80138a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80138aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80138ae:	e743      	b.n	8013738 <__kernel_rem_pio2f+0x200>
 80138b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80138b4:	ecb5 7a01 	vldmia	r5!, {s14}
 80138b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138bc:	3001      	adds	r0, #1
 80138be:	4550      	cmp	r0, sl
 80138c0:	dc01      	bgt.n	80138c6 <__kernel_rem_pio2f+0x38e>
 80138c2:	4290      	cmp	r0, r2
 80138c4:	ddf4      	ble.n	80138b0 <__kernel_rem_pio2f+0x378>
 80138c6:	a858      	add	r0, sp, #352	@ 0x160
 80138c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80138cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80138d0:	3b01      	subs	r3, #1
 80138d2:	e735      	b.n	8013740 <__kernel_rem_pio2f+0x208>
 80138d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80138d6:	2b02      	cmp	r3, #2
 80138d8:	dc09      	bgt.n	80138ee <__kernel_rem_pio2f+0x3b6>
 80138da:	2b00      	cmp	r3, #0
 80138dc:	dc27      	bgt.n	801392e <__kernel_rem_pio2f+0x3f6>
 80138de:	d040      	beq.n	8013962 <__kernel_rem_pio2f+0x42a>
 80138e0:	f009 0007 	and.w	r0, r9, #7
 80138e4:	b059      	add	sp, #356	@ 0x164
 80138e6:	ecbd 8b04 	vpop	{d8-d9}
 80138ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80138f0:	2b03      	cmp	r3, #3
 80138f2:	d1f5      	bne.n	80138e0 <__kernel_rem_pio2f+0x3a8>
 80138f4:	aa30      	add	r2, sp, #192	@ 0xc0
 80138f6:	1f0b      	subs	r3, r1, #4
 80138f8:	4413      	add	r3, r2
 80138fa:	461a      	mov	r2, r3
 80138fc:	4620      	mov	r0, r4
 80138fe:	2800      	cmp	r0, #0
 8013900:	dc50      	bgt.n	80139a4 <__kernel_rem_pio2f+0x46c>
 8013902:	4622      	mov	r2, r4
 8013904:	2a01      	cmp	r2, #1
 8013906:	dc5d      	bgt.n	80139c4 <__kernel_rem_pio2f+0x48c>
 8013908:	ab30      	add	r3, sp, #192	@ 0xc0
 801390a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 801390e:	440b      	add	r3, r1
 8013910:	2c01      	cmp	r4, #1
 8013912:	dc67      	bgt.n	80139e4 <__kernel_rem_pio2f+0x4ac>
 8013914:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013918:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801391c:	2e00      	cmp	r6, #0
 801391e:	d167      	bne.n	80139f0 <__kernel_rem_pio2f+0x4b8>
 8013920:	edc7 6a00 	vstr	s13, [r7]
 8013924:	ed87 7a01 	vstr	s14, [r7, #4]
 8013928:	edc7 7a02 	vstr	s15, [r7, #8]
 801392c:	e7d8      	b.n	80138e0 <__kernel_rem_pio2f+0x3a8>
 801392e:	ab30      	add	r3, sp, #192	@ 0xc0
 8013930:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 8013934:	440b      	add	r3, r1
 8013936:	4622      	mov	r2, r4
 8013938:	2a00      	cmp	r2, #0
 801393a:	da24      	bge.n	8013986 <__kernel_rem_pio2f+0x44e>
 801393c:	b34e      	cbz	r6, 8013992 <__kernel_rem_pio2f+0x45a>
 801393e:	eef1 7a47 	vneg.f32	s15, s14
 8013942:	edc7 7a00 	vstr	s15, [r7]
 8013946:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801394a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801394e:	aa31      	add	r2, sp, #196	@ 0xc4
 8013950:	2301      	movs	r3, #1
 8013952:	429c      	cmp	r4, r3
 8013954:	da20      	bge.n	8013998 <__kernel_rem_pio2f+0x460>
 8013956:	b10e      	cbz	r6, 801395c <__kernel_rem_pio2f+0x424>
 8013958:	eef1 7a67 	vneg.f32	s15, s15
 801395c:	edc7 7a01 	vstr	s15, [r7, #4]
 8013960:	e7be      	b.n	80138e0 <__kernel_rem_pio2f+0x3a8>
 8013962:	ab30      	add	r3, sp, #192	@ 0xc0
 8013964:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013830 <__kernel_rem_pio2f+0x2f8>
 8013968:	440b      	add	r3, r1
 801396a:	2c00      	cmp	r4, #0
 801396c:	da05      	bge.n	801397a <__kernel_rem_pio2f+0x442>
 801396e:	b10e      	cbz	r6, 8013974 <__kernel_rem_pio2f+0x43c>
 8013970:	eef1 7a67 	vneg.f32	s15, s15
 8013974:	edc7 7a00 	vstr	s15, [r7]
 8013978:	e7b2      	b.n	80138e0 <__kernel_rem_pio2f+0x3a8>
 801397a:	ed33 7a01 	vldmdb	r3!, {s14}
 801397e:	3c01      	subs	r4, #1
 8013980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013984:	e7f1      	b.n	801396a <__kernel_rem_pio2f+0x432>
 8013986:	ed73 7a01 	vldmdb	r3!, {s15}
 801398a:	3a01      	subs	r2, #1
 801398c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013990:	e7d2      	b.n	8013938 <__kernel_rem_pio2f+0x400>
 8013992:	eef0 7a47 	vmov.f32	s15, s14
 8013996:	e7d4      	b.n	8013942 <__kernel_rem_pio2f+0x40a>
 8013998:	ecb2 7a01 	vldmia	r2!, {s14}
 801399c:	3301      	adds	r3, #1
 801399e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139a2:	e7d6      	b.n	8013952 <__kernel_rem_pio2f+0x41a>
 80139a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80139a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80139ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80139b0:	3801      	subs	r0, #1
 80139b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139b6:	ed82 7a00 	vstr	s14, [r2]
 80139ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139be:	edc2 7a01 	vstr	s15, [r2, #4]
 80139c2:	e79c      	b.n	80138fe <__kernel_rem_pio2f+0x3c6>
 80139c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80139c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80139cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80139d0:	3a01      	subs	r2, #1
 80139d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139d6:	ed83 7a00 	vstr	s14, [r3]
 80139da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139de:	edc3 7a01 	vstr	s15, [r3, #4]
 80139e2:	e78f      	b.n	8013904 <__kernel_rem_pio2f+0x3cc>
 80139e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80139e8:	3c01      	subs	r4, #1
 80139ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139ee:	e78f      	b.n	8013910 <__kernel_rem_pio2f+0x3d8>
 80139f0:	eef1 6a66 	vneg.f32	s13, s13
 80139f4:	eeb1 7a47 	vneg.f32	s14, s14
 80139f8:	edc7 6a00 	vstr	s13, [r7]
 80139fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8013a00:	eef1 7a67 	vneg.f32	s15, s15
 8013a04:	e790      	b.n	8013928 <__kernel_rem_pio2f+0x3f0>
 8013a06:	bf00      	nop

08013a08 <floor>:
 8013a08:	ec51 0b10 	vmov	r0, r1, d0
 8013a0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013a18:	2e13      	cmp	r6, #19
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	4605      	mov	r5, r0
 8013a1e:	4680      	mov	r8, r0
 8013a20:	dc34      	bgt.n	8013a8c <floor+0x84>
 8013a22:	2e00      	cmp	r6, #0
 8013a24:	da17      	bge.n	8013a56 <floor+0x4e>
 8013a26:	a332      	add	r3, pc, #200	@ (adr r3, 8013af0 <floor+0xe8>)
 8013a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2c:	f7ec fbfa 	bl	8000224 <__adddf3>
 8013a30:	2200      	movs	r2, #0
 8013a32:	2300      	movs	r3, #0
 8013a34:	f7ed f83c 	bl	8000ab0 <__aeabi_dcmpgt>
 8013a38:	b150      	cbz	r0, 8013a50 <floor+0x48>
 8013a3a:	2c00      	cmp	r4, #0
 8013a3c:	da55      	bge.n	8013aea <floor+0xe2>
 8013a3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013a42:	432c      	orrs	r4, r5
 8013a44:	2500      	movs	r5, #0
 8013a46:	42ac      	cmp	r4, r5
 8013a48:	4c2b      	ldr	r4, [pc, #172]	@ (8013af8 <floor+0xf0>)
 8013a4a:	bf08      	it	eq
 8013a4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013a50:	4621      	mov	r1, r4
 8013a52:	4628      	mov	r0, r5
 8013a54:	e023      	b.n	8013a9e <floor+0x96>
 8013a56:	4f29      	ldr	r7, [pc, #164]	@ (8013afc <floor+0xf4>)
 8013a58:	4137      	asrs	r7, r6
 8013a5a:	ea01 0307 	and.w	r3, r1, r7
 8013a5e:	4303      	orrs	r3, r0
 8013a60:	d01d      	beq.n	8013a9e <floor+0x96>
 8013a62:	a323      	add	r3, pc, #140	@ (adr r3, 8013af0 <floor+0xe8>)
 8013a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a68:	f7ec fbdc 	bl	8000224 <__adddf3>
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f7ed f81e 	bl	8000ab0 <__aeabi_dcmpgt>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d0eb      	beq.n	8013a50 <floor+0x48>
 8013a78:	2c00      	cmp	r4, #0
 8013a7a:	bfbe      	ittt	lt
 8013a7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013a80:	4133      	asrlt	r3, r6
 8013a82:	18e4      	addlt	r4, r4, r3
 8013a84:	ea24 0407 	bic.w	r4, r4, r7
 8013a88:	2500      	movs	r5, #0
 8013a8a:	e7e1      	b.n	8013a50 <floor+0x48>
 8013a8c:	2e33      	cmp	r6, #51	@ 0x33
 8013a8e:	dd0a      	ble.n	8013aa6 <floor+0x9e>
 8013a90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013a94:	d103      	bne.n	8013a9e <floor+0x96>
 8013a96:	4602      	mov	r2, r0
 8013a98:	460b      	mov	r3, r1
 8013a9a:	f7ec fbc3 	bl	8000224 <__adddf3>
 8013a9e:	ec41 0b10 	vmov	d0, r0, r1
 8013aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013aaa:	f04f 37ff 	mov.w	r7, #4294967295
 8013aae:	40df      	lsrs	r7, r3
 8013ab0:	4207      	tst	r7, r0
 8013ab2:	d0f4      	beq.n	8013a9e <floor+0x96>
 8013ab4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013af0 <floor+0xe8>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	f7ec fbb3 	bl	8000224 <__adddf3>
 8013abe:	2200      	movs	r2, #0
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	f7ec fff5 	bl	8000ab0 <__aeabi_dcmpgt>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d0c2      	beq.n	8013a50 <floor+0x48>
 8013aca:	2c00      	cmp	r4, #0
 8013acc:	da0a      	bge.n	8013ae4 <floor+0xdc>
 8013ace:	2e14      	cmp	r6, #20
 8013ad0:	d101      	bne.n	8013ad6 <floor+0xce>
 8013ad2:	3401      	adds	r4, #1
 8013ad4:	e006      	b.n	8013ae4 <floor+0xdc>
 8013ad6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013ada:	2301      	movs	r3, #1
 8013adc:	40b3      	lsls	r3, r6
 8013ade:	441d      	add	r5, r3
 8013ae0:	4545      	cmp	r5, r8
 8013ae2:	d3f6      	bcc.n	8013ad2 <floor+0xca>
 8013ae4:	ea25 0507 	bic.w	r5, r5, r7
 8013ae8:	e7b2      	b.n	8013a50 <floor+0x48>
 8013aea:	2500      	movs	r5, #0
 8013aec:	462c      	mov	r4, r5
 8013aee:	e7af      	b.n	8013a50 <floor+0x48>
 8013af0:	8800759c 	.word	0x8800759c
 8013af4:	7e37e43c 	.word	0x7e37e43c
 8013af8:	bff00000 	.word	0xbff00000
 8013afc:	000fffff 	.word	0x000fffff

08013b00 <floorf>:
 8013b00:	ee10 3a10 	vmov	r3, s0
 8013b04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013b08:	3a7f      	subs	r2, #127	@ 0x7f
 8013b0a:	2a16      	cmp	r2, #22
 8013b0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013b10:	dc2b      	bgt.n	8013b6a <floorf+0x6a>
 8013b12:	2a00      	cmp	r2, #0
 8013b14:	da12      	bge.n	8013b3c <floorf+0x3c>
 8013b16:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013b7c <floorf+0x7c>
 8013b1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b26:	dd06      	ble.n	8013b36 <floorf+0x36>
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	da24      	bge.n	8013b76 <floorf+0x76>
 8013b2c:	2900      	cmp	r1, #0
 8013b2e:	4b14      	ldr	r3, [pc, #80]	@ (8013b80 <floorf+0x80>)
 8013b30:	bf08      	it	eq
 8013b32:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013b36:	ee00 3a10 	vmov	s0, r3
 8013b3a:	4770      	bx	lr
 8013b3c:	4911      	ldr	r1, [pc, #68]	@ (8013b84 <floorf+0x84>)
 8013b3e:	4111      	asrs	r1, r2
 8013b40:	420b      	tst	r3, r1
 8013b42:	d0fa      	beq.n	8013b3a <floorf+0x3a>
 8013b44:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013b7c <floorf+0x7c>
 8013b48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b54:	ddef      	ble.n	8013b36 <floorf+0x36>
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	bfbe      	ittt	lt
 8013b5a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013b5e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013b62:	189b      	addlt	r3, r3, r2
 8013b64:	ea23 0301 	bic.w	r3, r3, r1
 8013b68:	e7e5      	b.n	8013b36 <floorf+0x36>
 8013b6a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013b6e:	d3e4      	bcc.n	8013b3a <floorf+0x3a>
 8013b70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b74:	4770      	bx	lr
 8013b76:	2300      	movs	r3, #0
 8013b78:	e7dd      	b.n	8013b36 <floorf+0x36>
 8013b7a:	bf00      	nop
 8013b7c:	7149f2ca 	.word	0x7149f2ca
 8013b80:	bf800000 	.word	0xbf800000
 8013b84:	007fffff 	.word	0x007fffff

08013b88 <_init>:
 8013b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8a:	bf00      	nop
 8013b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b8e:	bc08      	pop	{r3}
 8013b90:	469e      	mov	lr, r3
 8013b92:	4770      	bx	lr

08013b94 <_fini>:
 8013b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b96:	bf00      	nop
 8013b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b9a:	bc08      	pop	{r3}
 8013b9c:	469e      	mov	lr, r3
 8013b9e:	4770      	bx	lr
