
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e1b0  0800e1b0  0000f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e610  0800e610  000101e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e618  0800e618  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e618  0800e618  0000f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e61c  0800e61c  0000f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e620  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  200001e8  0800e808  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022d0  0800e808  000102d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b6a4  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053aa  00000000  00000000  0003b8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c4  00000000  00000000  00042860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7e8  00000000  00000000  00043e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a709  00000000  00000000  0007160c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a32  00000000  00000000  0009bd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b5747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c28  00000000  00000000  001b578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e198 	.word	0x0800e198

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800e198 	.word	0x0800e198

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	60fa      	str	r2, [r7, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e22:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e3e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e008      	b.n	8000e64 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3f2      	bcc.n	8000e52 <ADC_DMA_Init+0x42>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	217f      	movs	r1, #127	@ 0x7f
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fb2f 	bl	80074ec <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f005 fc18 	bl	80066d0 <HAL_ADC_Start_DMA>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e012      	b.n	8000ee8 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
        samples++;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3e7      	bcc.n	8000ec2 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00f      	beq.n	8000f18 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f10:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	e001      	b.n	8000f1c <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000f18:	f04f 0300 	mov.w	r3, #0
}
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f3e:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	4619      	mov	r1, r3
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ffaf 	bl	8000ea8 <ADC_DMA_GetValue>
 8000f4a:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f54:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f58:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f7c <ADC_DMA_GetJoystick+0x4c>
 8000f5c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f60:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f7c <ADC_DMA_GetJoystick+0x4c>
 8000f64:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f68:	f000 fb54 	bl	8001614 <mapf>
 8000f6c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f70:	eeb0 0a67 	vmov.f32	s0, s15
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	00000000 	.word	0x00000000

08000f80 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f8a:	60b8      	str	r0, [r7, #8]
 8000f8c:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	dd01      	ble.n	8000faa <PWM_Satuation+0x2a>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	e013      	b.n	8000fd2 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d501      	bpl.n	8000fc6 <PWM_Satuation+0x46>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e005      	b.n	8000fd2 <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6178      	str	r0, [r7, #20]
 8000fe6:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fea:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fee:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ff2:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	619a      	str	r2, [r3, #24]

}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	ed93 7a06 	vldr	s14, [r3, #24]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edd3 7a03 	vldr	s15, [r3, #12]
 800104a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	bfac      	ite	ge
 8001054:	2301      	movge	r3, #1
 8001056:	2300      	movlt	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10e      	bne.n	8001082 <PID_CONTROLLER_Compute+0x50>
 8001064:	edd7 7a00 	vldr	s15, [r7]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	bfcc      	ite	gt
 8001072:	2301      	movgt	r3, #1
 8001074:	2300      	movle	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d057      	beq.n	8001132 <PID_CONTROLLER_Compute+0x100>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a06 	vldr	s14, [r3, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 7a03 	vldr	s15, [r3, #12]
 800108e:	eef1 7a67 	vneg.f32	s15, s15
 8001092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	bf94      	ite	ls
 800109c:	2301      	movls	r3, #1
 800109e:	2300      	movhi	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10e      	bne.n	80010ca <PID_CONTROLLER_Compute+0x98>
 80010ac:	edd7 7a00 	vldr	s15, [r7]
 80010b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	bf4c      	ite	mi
 80010ba:	2301      	movmi	r3, #1
 80010bc:	2300      	movpl	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d033      	beq.n	8001132 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	edd3 6a00 	vldr	s13, [r3]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010ea:	edd7 7a00 	vldr	s15, [r7]
 80010ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	ed93 6a00 	vldr	s12, [r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001102:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edd3 7a04 	vldr	s15, [r3, #16]
 800110c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001110:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 6a02 	vldr	s12, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001120:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001124:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	ee07 3a90 	vmov	s15, r3
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3328      	adds	r3, #40	@ 0x28
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fd38 	bl	8002bf0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8b3a      	ldrh	r2, [r7, #24]
 800118a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ac:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d15f      	bne.n	800127a <MDXX_set_range+0xda>
		if (duty == 0) {
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d115      	bne.n	80011f4 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3310      	adds	r3, #16
 80011cc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800134c <MDXX_set_range+0x1ac>
 80011d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 fe33 	bl	8002e40 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3328      	adds	r3, #40	@ 0x28
 80011de:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800134c <MDXX_set_range+0x1ac>
 80011e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fe2a 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80011f2:	e0a6      	b.n	8001342 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dd1a      	ble.n	8001238 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3310      	adds	r3, #16
 8001206:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800134c <MDXX_set_range+0x1ac>
 800120a:	ed97 0a02 	vldr	s0, [r7, #8]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fe16 	bl	8002e40 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3328      	adds	r3, #40	@ 0x28
 8001218:	edd7 0a01 	vldr	s1, [r7, #4]
 800121c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fe0d 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = duty;
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001236:	e084      	b.n	8001342 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3310      	adds	r3, #16
 800123c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001350 <MDXX_set_range+0x1b0>
 8001240:	ed97 0a02 	vldr	s0, [r7, #8]
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fdfb 	bl	8002e40 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001252:	eef0 7ae7 	vabs.f32	s15, s15
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	ed97 0a02 	vldr	s0, [r7, #8]
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fdee 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	eef0 7ae7 	vabs.f32	s15, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001278:	e063      	b.n	8001342 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001280:	2b01      	cmp	r3, #1
 8001282:	d15e      	bne.n	8001342 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d115      	bne.n	80012be <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	f007 f86a 	bl	8008378 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3328      	adds	r3, #40	@ 0x28
 80012a8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800134c <MDXX_set_range+0x1ac>
 80012ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fdc5 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = 0;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012bc:	e041      	b.n	8001342 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	dd1a      	ble.n	8001302 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f007 f84d 	bl	8008378 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3328      	adds	r3, #40	@ 0x28
 80012e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fda8 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = duty;
 80012f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f8:	ee17 2a90 	vmov	r2, s15
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001300:	e01f      	b.n	8001342 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f007 f832 	bl	8008378 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3328      	adds	r3, #40	@ 0x28
 8001318:	edd7 7a01 	vldr	s15, [r7, #4]
 800131c:	eef0 7ae7 	vabs.f32	s15, s15
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	ed97 0a02 	vldr	s0, [r7, #8]
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fd89 	bl	8002e40 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800132e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001332:	eef0 7ae7 	vabs.f32	s15, s15
 8001336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133a:	ee17 2a90 	vmov	r2, s15
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	00000000 	.word	0x00000000
 8001350:	42c80000 	.word	0x42c80000

08001354 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	ed2d 8b02 	vpush	{d8}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013e6:	edc7 0a00 	vstr	s1, [r7]
 80013ea:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80013ec:	897b      	ldrh	r3, [r7, #10]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <FIR_init+0x2a>
        numTaps += 1;
 80013f8:	897b      	ldrh	r3, [r7, #10]
 80013fa:	3301      	adds	r3, #1
 80013fc:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	897a      	ldrh	r2, [r7, #10]
 8001402:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f00c f824 	bl	800d45c <malloc>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 800141c:	897b      	ldrh	r3, [r7, #10]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4618      	mov	r0, r3
 8001422:	f00c f81b 	bl	800d45c <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80e0 	beq.w	80015f8 <FIR_init+0x224>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80db 	beq.w	80015f8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001446:	e00a      	b.n	800145e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001458:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800145a:	3301      	adds	r3, #1
 800145c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800145e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3f0      	bcc.n	8001448 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001466:	edd7 6a01 	vldr	s13, [r7, #4]
 800146a:	ed97 7a00 	vldr	s14, [r7]
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001476:	897b      	ldrh	r3, [r7, #10]
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001482:	e077      	b.n	8001574 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001484:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800148c:	429a      	cmp	r2, r3
 800148e:	d10c      	bne.n	80014aa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014a4:	edc3 7a00 	vstr	s15, [r3]
 80014a8:	e02c      	b.n	8001504 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80014aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014ac:	8afb      	ldrh	r3, [r7, #22]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001604 <FIR_init+0x230>
 80014bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	f00c f92c 	bl	800d730 <sinf>
 80014d8:	eef0 6a40 	vmov.f32	s13, s0
 80014dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001608 <FIR_init+0x234>
 80014ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	ed93 8a00 	vldr	s16, [r3]
 8001514:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001520:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001604 <FIR_init+0x230>
 8001524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	3b01      	subs	r3, #1
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001538:	eeb0 0a66 	vmov.f32	s0, s13
 800153c:	f00c f8b4 	bl	800d6a8 <cosf>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800160c <FIR_init+0x238>
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001610 <FIR_init+0x23c>
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001564:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001568:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	b29b      	uxth	r3, r3
 8001572:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001574:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001578:	897b      	ldrh	r3, [r7, #10]
 800157a:	429a      	cmp	r2, r3
 800157c:	db82      	blt.n	8001484 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	83fb      	strh	r3, [r7, #30]
 8001588:	e00f      	b.n	80015aa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	8bfb      	ldrh	r3, [r7, #30]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a08 	vldr	s14, [r7, #32]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015a4:	8bfb      	ldrh	r3, [r7, #30]
 80015a6:	3301      	adds	r3, #1
 80015a8:	83fb      	strh	r3, [r7, #30]
 80015aa:	8bfa      	ldrh	r2, [r7, #30]
 80015ac:	897b      	ldrh	r3, [r7, #10]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3eb      	bcc.n	800158a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80015b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80015b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d01b      	beq.n	80015f8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	83bb      	strh	r3, [r7, #28]
 80015c4:	e014      	b.n	80015f0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	edd3 6a00 	vldr	s13, [r3]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	8bbb      	ldrh	r3, [r7, #28]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	ed97 7a08 	vldr	s14, [r7, #32]
 80015e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80015ea:	8bbb      	ldrh	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	83bb      	strh	r3, [r7, #28]
 80015f0:	8bba      	ldrh	r2, [r7, #28]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3e6      	bcc.n	80015c6 <FIR_init+0x1f2>
            }
        }
    }
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	ecbd 8b02 	vpop	{d8}
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40c90fdb 	.word	0x40c90fdb
 8001608:	40490fdb 	.word	0x40490fdb
 800160c:	3eeb851f 	.word	0x3eeb851f
 8001610:	3f0a3d71 	.word	0x3f0a3d71

08001614 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a05 	vstr	s0, [r7, #20]
 800161e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001622:	ed87 1a03 	vstr	s2, [r7, #12]
 8001626:	edc7 1a02 	vstr	s3, [r7, #8]
 800162a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800162e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001632:	edd7 7a04 	vldr	s15, [r7, #16]
 8001636:	ee77 6a67 	vsub.f32	s13, s14, s15
 800163a:	ed97 7a03 	vldr	s14, [r7, #12]
 800163e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800164e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001652:	edd7 7a02 	vldr	s15, [r7, #8]
 8001656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	ee07 3a90 	vmov	s15, r3
}
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <modbus_1t5_Timeout+0x3c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000204 	.word	0x20000204

080016c4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <modbus_3t5_Timeout+0x1c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	755a      	strb	r2, [r3, #21]

}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000204 	.word	0x20000204

080016e4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f00a fced 	bl	800c0cc <HAL_UART_GetError>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d101      	bne.n	80016fc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80016f8:	f7ff ffc4 	bl	8001684 <modbus_1t5_Timeout>

	}
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001712:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <Modbus_init+0xc4>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001718:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <Modbus_init+0xc4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <Modbus_init+0xc4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <Modbus_init+0xc4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <Modbus_init+0xc4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	7e3a      	ldrb	r2, [r7, #24]
 8001736:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <Modbus_init+0xc4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <Modbus_init+0xc8>)
 8001746:	210e      	movs	r1, #14
 8001748:	4618      	mov	r0, r3
 800174a:	f008 ff6d 	bl	800a628 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2110      	movs	r1, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f00a fc63 	bl	800c020 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f00a fc7a 	bl	800c058 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <Modbus_init+0xcc>)
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f009 ffab 	bl	800b6c8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <Modbus_init+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <Modbus_init+0xc4>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <Modbus_init+0xc4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001784:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001788:	4413      	add	r3, r2
 800178a:	3302      	adds	r3, #2
 800178c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001790:	4619      	mov	r1, r3
 8001792:	f00a f853 	bl	800b83c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <Modbus_init+0xc4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10c      	bne.n	80017c0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <Modbus_init+0xc4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 ff17 	bl	80095e0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <Modbus_init+0xc4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f008 f966 	bl	8009a8c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000204 	.word	0x20000204
 80017cc:	080016c5 	.word	0x080016c5
 80017d0:	080016e5 	.word	0x080016e5

080017d4 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	@ 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6278      	str	r0, [r7, #36]	@ 0x24
 80017dc:	ed87 0a08 	vstr	s0, [r7, #32]
 80017e0:	edc7 0a07 	vstr	s1, [r7, #28]
 80017e4:	ed87 1a06 	vstr	s2, [r7, #24]
 80017e8:	edc7 1a05 	vstr	s3, [r7, #20]
 80017ec:	ed87 2a04 	vstr	s4, [r7, #16]
 80017f0:	edc7 2a03 	vstr	s5, [r7, #12]
 80017f4:	ed87 3a02 	vstr	s6, [r7, #8]
 80017f8:	edc7 3a01 	vstr	s7, [r7, #4]
 80017fc:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	6a3a      	ldr	r2, [r7, #32]
 8001804:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	2210      	movs	r2, #16
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00b fec2 	bl	800d5c8 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	3310      	adds	r3, #16
 8001848:	2240      	movs	r2, #64	@ 0x40
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00b febb 	bl	800d5c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	e00c      	b.n	8001872 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001862:	3304      	adds	r3, #4
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	4a79      	ldr	r2, [pc, #484]	@ (8001a50 <MotorKalman_Init+0x27c>)
 800186a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	3301      	adds	r3, #1
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	2b03      	cmp	r3, #3
 8001876:	ddef      	ble.n	8001858 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800187e:	2240      	movs	r2, #64	@ 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f00b fea0 	bl	800d5c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188c:	e00d      	b.n	80018aa <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800188e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001898:	33be      	adds	r3, #190	@ 0xbe
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018a2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80018a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a6:	3301      	adds	r3, #1
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	ddee      	ble.n	800188e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	33f0      	adds	r3, #240	@ 0xf0
 80018b4:	2210      	movs	r2, #16
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b fe85 	bl	800d5c8 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018c4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80018ce:	2210      	movs	r2, #16
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00b fe78 	bl	800d5c8 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018de:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80018e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80018e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018e8:	f000 f922 	bl	8001b30 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80018ec:	ed97 0a00 	vldr	s0, [r7]
 80018f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018f2:	f000 f94d 	bl	8001b90 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	2201      	movs	r2, #1
 8001900:	2104      	movs	r1, #4
 8001902:	f00b fce2 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	3310      	adds	r3, #16
 8001910:	2204      	movs	r2, #4
 8001912:	2104      	movs	r1, #4
 8001914:	f00b fcd9 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001924:	2204      	movs	r2, #4
 8001926:	2104      	movs	r1, #4
 8001928:	f00b fccf 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001938:	2201      	movs	r2, #1
 800193a:	2101      	movs	r1, #1
 800193c:	f00b fcc5 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800194c:	2201      	movs	r2, #1
 800194e:	2101      	movs	r1, #1
 8001950:	f00b fcbb 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001960:	2201      	movs	r2, #1
 8001962:	2101      	movs	r1, #1
 8001964:	f00b fcb1 	bl	800d2ca <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001974:	2204      	movs	r2, #4
 8001976:	2104      	movs	r1, #4
 8001978:	f00b fca7 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001988:	2201      	movs	r2, #1
 800198a:	2104      	movs	r1, #4
 800198c:	f00b fc9d 	bl	800d2ca <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800199c:	2201      	movs	r2, #1
 800199e:	2104      	movs	r1, #4
 80019a0:	f00b fc93 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80019b0:	2204      	movs	r2, #4
 80019b2:	2104      	movs	r1, #4
 80019b4:	f00b fc89 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80019c4:	2204      	movs	r2, #4
 80019c6:	2101      	movs	r1, #1
 80019c8:	f00b fc7f 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80019d8:	2201      	movs	r2, #1
 80019da:	2101      	movs	r1, #1
 80019dc:	f00b fc75 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80019ec:	2201      	movs	r2, #1
 80019ee:	2104      	movs	r1, #4
 80019f0:	f00b fc6b 	bl	800d2ca <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80019f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019f6:	f000 f82d 	bl	8001a54 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	3390      	adds	r3, #144	@ 0x90
 8001a04:	2204      	movs	r2, #4
 8001a06:	2104      	movs	r1, #4
 8001a08:	f00b fc5f 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	33e0      	adds	r3, #224	@ 0xe0
 8001a16:	2201      	movs	r2, #1
 8001a18:	2104      	movs	r1, #4
 8001a1a:	f00b fc56 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	f00b fc4c 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2104      	movs	r1, #4
 8001a42:	f00b fc42 	bl	800d2ca <arm_mat_init_f32>
}
 8001a46:	bf00      	nop
 8001a48:	3730      	adds	r7, #48	@ 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	42c80000 	.word	0x42c80000

08001a54 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	eeb0 3a64 	vmov.f32	s6, s9
 8001a98:	eef0 2a45 	vmov.f32	s5, s10
 8001a9c:	eeb0 2a65 	vmov.f32	s4, s11
 8001aa0:	eef0 1a46 	vmov.f32	s3, s12
 8001aa4:	eeb0 1a66 	vmov.f32	s2, s13
 8001aa8:	eef0 0a47 	vmov.f32	s1, s14
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f001 f836 	bl	8002b20 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b fd82 	bl	800d5c8 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001aca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b28 <MotorKalman_DiscretizeModel+0xd4>
 8001ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001afe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001b2c <MotorKalman_DiscretizeModel+0xd8>
 8001b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001b12:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001b28 <MotorKalman_DiscretizeModel+0xd4>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	3c23d70a 	.word	0x3c23d70a
 8001b2c:	3dcccccd 	.word	0x3dcccccd

08001b30 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00b fd3e 	bl	800d5c8 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001b4c:	edd7 7a00 	vldr	s15, [r7]
 8001b50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d107      	bne.n	8001b82 <MotorKalman_SetProcessNoise+0x52>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001b78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d002      	beq.n	8001b88 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff66 	bl	8001a54 <MotorKalman_DiscretizeModel>
    }
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001b9c:	ed97 0a00 	vldr	s0, [r7]
 8001ba0:	f00b fd64 	bl	800d66c <sqrtf>
 8001ba4:	eef0 7a40 	vmov.f32	s15, s0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b0b2      	sub	sp, #200	@ 0xc8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8001bd2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001be6:	e041      	b.n	8001c6c <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8001be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	33c8      	adds	r3, #200	@ 0xc8
 8001bf0:	443b      	add	r3, r7
 8001bf2:	3b3c      	subs	r3, #60	@ 0x3c
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c00:	e02b      	b.n	8001c5a <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8001c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	33c8      	adds	r3, #200	@ 0xc8
 8001c0a:	443b      	add	r3, r7
 8001c0c:	3b3c      	subs	r3, #60	@ 0x3c
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c16:	009a      	lsls	r2, r3, #2
 8001c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c1c:	4413      	add	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	3324      	adds	r3, #36	@ 0x24
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	edd3 6a00 	vldr	s13, [r3]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	33c8      	adds	r3, #200	@ 0xc8
 8001c48:	443b      	add	r3, r7
 8001c4a:	3b3c      	subs	r3, #60	@ 0x3c
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c54:	3301      	adds	r3, #1
 8001c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	ddcf      	ble.n	8001c02 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c66:	3301      	adds	r3, #1
 8001c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	ddb9      	ble.n	8001be8 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c7a:	e021      	b.n	8001cc0 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8001c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	33c8      	adds	r3, #200	@ 0xc8
 8001c84:	443b      	add	r3, r7
 8001c86:	3b3c      	subs	r3, #60	@ 0x3c
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c92:	3338      	adds	r3, #56	@ 0x38
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	edd3 6a00 	vldr	s13, [r3]
 8001c9c:	edd7 7a00 	vldr	s15, [r7]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	ddd9      	ble.n	8001c7c <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8001cc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00b fc79 	bl	800d5c8 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00b fc72 	bl	800d5c8 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001cea:	e05f      	b.n	8001dac <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cf2:	e052      	b.n	8001d9a <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8001cf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cf8:	009a      	lsls	r2, r3, #2
 8001cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	33c8      	adds	r3, #200	@ 0xc8
 8001d04:	443b      	add	r3, r7
 8001d06:	3b7c      	subs	r3, #124	@ 0x7c
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d14:	e038      	b.n	8001d88 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	33c8      	adds	r3, #200	@ 0xc8
 8001d26:	443b      	add	r3, r7
 8001d28:	3b7c      	subs	r3, #124	@ 0x7c
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8001d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d38:	4413      	add	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	3324      	adds	r3, #36	@ 0x24
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	edd3 6a00 	vldr	s13, [r3]
 8001d46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d50:	4413      	add	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	33c8      	adds	r3, #200	@ 0xc8
 8001d76:	443b      	add	r3, r7
 8001d78:	3b7c      	subs	r3, #124	@ 0x7c
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d82:	3301      	adds	r3, #1
 8001d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	ddc2      	ble.n	8001d16 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d94:	3301      	adds	r3, #1
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	dda8      	ble.n	8001cf4 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001da6:	3301      	adds	r3, #1
 8001da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	dd9b      	ble.n	8001cec <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001dba:	e05f      	b.n	8001e7c <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001dc2:	e052      	b.n	8001e6a <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8001dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	33c8      	adds	r3, #200	@ 0xc8
 8001dd4:	443b      	add	r3, r7
 8001dd6:	3bbc      	subs	r3, #188	@ 0xbc
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001de4:	e038      	b.n	8001e58 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dea:	009a      	lsls	r2, r3, #2
 8001dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	33c8      	adds	r3, #200	@ 0xc8
 8001df6:	443b      	add	r3, r7
 8001df8:	3bbc      	subs	r3, #188	@ 0xbc
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8001dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e02:	009a      	lsls	r2, r3, #2
 8001e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	33c8      	adds	r3, #200	@ 0xc8
 8001e0e:	443b      	add	r3, r7
 8001e10:	3b7c      	subs	r3, #124	@ 0x7c
 8001e12:	edd3 6a00 	vldr	s13, [r3]
 8001e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e1a:	009a      	lsls	r2, r3, #2
 8001e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e20:	4413      	add	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	3324      	adds	r3, #36	@ 0x24
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e3c:	4413      	add	r3, r2
 8001e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	33c8      	adds	r3, #200	@ 0xc8
 8001e46:	443b      	add	r3, r7
 8001e48:	3bbc      	subs	r3, #188	@ 0xbc
 8001e4a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e52:	3301      	adds	r3, #1
 8001e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	ddc2      	ble.n	8001de6 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e64:	3301      	adds	r3, #1
 8001e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	dda8      	ble.n	8001dc4 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e76:	3301      	adds	r3, #1
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	dd9b      	ble.n	8001dbc <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e8a:	e037      	b.n	8001efc <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e92:	e02a      	b.n	8001eea <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001e94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	33c8      	adds	r3, #200	@ 0xc8
 8001ea4:	443b      	add	r3, r7
 8001ea6:	3bbc      	subs	r3, #188	@ 0xbc
 8001ea8:	ed93 7a00 	vldr	s14, [r3]
 8001eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001eb0:	009a      	lsls	r2, r3, #2
 8001eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	3354      	adds	r3, #84	@ 0x54
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001ec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ec8:	009a      	lsls	r2, r3, #2
 8001eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ece:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	ddd0      	ble.n	8001e94 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	ddc3      	ble.n	8001e8c <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	2104      	movs	r1, #4
 8001f38:	f00b f9c7 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3310      	adds	r3, #16
 8001f46:	2204      	movs	r2, #4
 8001f48:	2104      	movs	r1, #4
 8001f4a:	f00b f9be 	bl	800d2ca <arm_mat_init_f32>
}
 8001f4e:	bf00      	nop
 8001f50:	37c8      	adds	r7, #200	@ 0xc8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0d0      	sub	sp, #320	@ 0x140
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f66:	6018      	str	r0, [r3, #0]
 8001f68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f70:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8001f74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001f82:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8001f8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8001f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8001fba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fbe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8001fd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8001fde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fe2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8001ff4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ff8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002002:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002006:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002018:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800201c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002020:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002034:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002048:	e04d      	b.n	80020e6 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800204a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002054:	443b      	add	r3, r7
 8002056:	3b58      	subs	r3, #88	@ 0x58
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002064:	e036      	b.n	80020d4 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002066:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002070:	443b      	add	r3, r7
 8002072:	3b58      	subs	r3, #88	@ 0x58
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800207c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002086:	333c      	adds	r3, #60	@ 0x3c
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	edd3 6a00 	vldr	s13, [r3]
 8002090:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002094:	009a      	lsls	r2, r3, #2
 8002096:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800209a:	4413      	add	r3, r2
 800209c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80020a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	3304      	adds	r3, #4
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80020c2:	443b      	add	r3, r7
 80020c4:	3b58      	subs	r3, #88	@ 0x58
 80020c6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80020ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80020ce:	3301      	adds	r3, #1
 80020d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80020d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80020d8:	2b03      	cmp	r3, #3
 80020da:	ddc4      	ble.n	8002066 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020e0:	3301      	adds	r3, #1
 80020e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80020e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	ddad      	ble.n	800204a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80020fc:	e021      	b.n	8002142 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80020fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002108:	443b      	add	r3, r7
 800210a:	3b58      	subs	r3, #88	@ 0x58
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002114:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800211e:	333c      	adds	r3, #60	@ 0x3c
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002134:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002138:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800213c:	3301      	adds	r3, #1
 800213e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002142:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002146:	2b03      	cmp	r3, #3
 8002148:	ddd9      	ble.n	80020fe <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800214a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800214e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002158:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002164:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002178:	e04d      	b.n	8002216 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800217a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002184:	443b      	add	r3, r7
 8002186:	3b68      	subs	r3, #104	@ 0x68
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002194:	e036      	b.n	8002204 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80021a0:	443b      	add	r3, r7
 80021a2:	3b68      	subs	r3, #104	@ 0x68
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021ac:	009a      	lsls	r2, r3, #2
 80021ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021b2:	4413      	add	r3, r2
 80021b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80021b8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	3304      	adds	r3, #4
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	edd3 6a00 	vldr	s13, [r3]
 80021c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021d6:	333c      	adds	r3, #60	@ 0x3c
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80021f2:	443b      	add	r3, r7
 80021f4:	3b68      	subs	r3, #104	@ 0x68
 80021f6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80021fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021fe:	3301      	adds	r3, #1
 8002200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002204:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002208:	2b03      	cmp	r3, #3
 800220a:	ddc4      	ble.n	8002196 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800220c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002210:	3301      	adds	r3, #1
 8002212:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002216:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800221a:	2b03      	cmp	r3, #3
 800221c:	ddad      	ble.n	800217a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800221e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002232:	e01a      	b.n	800226a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002234:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800223e:	443b      	add	r3, r7
 8002240:	3b68      	subs	r3, #104	@ 0x68
 8002242:	edd3 6a00 	vldr	s13, [r3]
 8002246:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800224a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002258:	443b      	add	r3, r7
 800225a:	3b78      	subs	r3, #120	@ 0x78
 800225c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002260:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002264:	3301      	adds	r3, #1
 8002266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800226a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800226e:	2b03      	cmp	r3, #3
 8002270:	dde0      	ble.n	8002234 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002278:	e029      	b.n	80022ce <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800227a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800227e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800229a:	443b      	add	r3, r7
 800229c:	3b78      	subs	r3, #120	@ 0x78
 800229e:	edd3 6a00 	vldr	s13, [r3]
 80022a2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80022a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022c8:	3301      	adds	r3, #1
 80022ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80022ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	ddd1      	ble.n	800227a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80022d6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f00b f972 	bl	800d5c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80022ea:	e035      	b.n	8002358 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80022f2:	e028      	b.n	8002346 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 80022f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80022fe:	443b      	add	r3, r7
 8002300:	3b78      	subs	r3, #120	@ 0x78
 8002302:	ed93 7a00 	vldr	s14, [r3]
 8002306:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800230a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002314:	333c      	adds	r3, #60	@ 0x3c
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002328:	4413      	add	r3, r2
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002334:	443b      	add	r3, r7
 8002336:	3bb8      	subs	r3, #184	@ 0xb8
 8002338:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800233c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002340:	3301      	adds	r3, #1
 8002342:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002346:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800234a:	2b03      	cmp	r3, #3
 800234c:	ddd2      	ble.n	80022f4 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800234e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002352:	3301      	adds	r3, #1
 8002354:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800235c:	2b03      	cmp	r3, #3
 800235e:	ddc5      	ble.n	80022ec <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002360:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00b f92d 	bl	800d5c8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002374:	e038      	b.n	80023e8 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800237c:	e02b      	b.n	80023d6 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 800237e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002382:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002386:	429a      	cmp	r2, r3
 8002388:	d102      	bne.n	8002390 <MotorKalman_Update+0x438>
 800238a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800238e:	e001      	b.n	8002394 <MotorKalman_Update+0x43c>
 8002390:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80025ac <MotorKalman_Update+0x654>
 8002394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80023a6:	443b      	add	r3, r7
 80023a8:	3bb8      	subs	r3, #184	@ 0xb8
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b2:	009a      	lsls	r2, r3, #2
 80023b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023b8:	4413      	add	r3, r2
 80023ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80023c4:	443b      	add	r3, r7
 80023c6:	3bf8      	subs	r3, #248	@ 0xf8
 80023c8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80023d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023da:	2b03      	cmp	r3, #3
 80023dc:	ddcf      	ble.n	800237e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80023e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	ddc2      	ble.n	8002376 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80023f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f103 0110 	add.w	r1, r3, #16
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2240      	movs	r2, #64	@ 0x40
 8002404:	4618      	mov	r0, r3
 8002406:	f00b f923 	bl	800d650 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002410:	e06e      	b.n	80024f0 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002418:	e061      	b.n	80024de <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 800241a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002424:	4413      	add	r3, r2
 8002426:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800242a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	3304      	adds	r3, #4
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002442:	e043      	b.n	80024cc <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800244e:	4413      	add	r3, r2
 8002450:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002454:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	3304      	adds	r3, #4
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002476:	443b      	add	r3, r7
 8002478:	3bf8      	subs	r3, #248	@ 0xf8
 800247a:	edd3 6a00 	vldr	s13, [r3]
 800247e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002488:	4413      	add	r3, r2
 800248a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800248e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800249e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024a2:	009a      	lsls	r2, r3, #2
 80024a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024a8:	4413      	add	r3, r2
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80024b2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	3304      	adds	r3, #4
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	ddb7      	ble.n	8002444 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024d8:	3301      	adds	r3, #1
 80024da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80024de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	dd99      	ble.n	800241a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024ea:	3301      	adds	r3, #1
 80024ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80024f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	dd8c      	ble.n	8002412 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80024f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002508:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002512:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002516:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002522:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 800252c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002530:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800253c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002546:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800254a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002556:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002560:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002564:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800256e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002572:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	2104      	movs	r1, #4
 800257c:	f00a fea5 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002580:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002584:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800258e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002592:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3310      	adds	r3, #16
 800259a:	2204      	movs	r2, #4
 800259c:	2104      	movs	r1, #4
 800259e:	f00a fe94 	bl	800d2ca <arm_mat_init_f32>
}
 80025a2:	bf00      	nop
 80025a4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00000000 	.word	0x00000000

080025b0 <MotorKalman_Estimate>:

void MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80025bc:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 80025c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fafa 	bl	8001bbe <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 80025ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fcc2 	bl	8001f58 <MotorKalman_Update>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00c      	b.n	8002608 <matrix_copy+0x2c>
        dst[i] = src[i];
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	441a      	add	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	440b      	add	r3, r1
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbee      	blt.n	80025ee <matrix_copy+0x12>
    }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002626:	af00      	add	r7, sp, #0
 8002628:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 800262c:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002630:	6020      	str	r0, [r4, #0]
 8002632:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002636:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 800263a:	6001      	str	r1, [r0, #0]
 800263c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002640:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002644:	ed81 0a00 	vstr	s0, [r1]
 8002648:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800264c:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002650:	600a      	str	r2, [r1, #0]
 8002652:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002656:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 800265a:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 800265c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002660:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002664:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2204      	movs	r2, #4
 800266c:	2104      	movs	r1, #4
 800266e:	f00a fe2c 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002672:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002676:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800267a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2204      	movs	r2, #4
 8002682:	2104      	movs	r1, #4
 8002684:	f00a fe21 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002688:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800268c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002690:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	2104      	movs	r1, #4
 800269a:	f00a fe16 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800269e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026a2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80026a6:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	2104      	movs	r1, #4
 80026b0:	f00a fe0b 	bl	800d2ca <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 80026b4:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80026b8:	2240      	movs	r2, #64	@ 0x40
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a ff83 	bl	800d5c8 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 80026c2:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80026c6:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 80026ca:	2204      	movs	r2, #4
 80026cc:	2104      	movs	r1, #4
 80026ce:	f00a fdfc 	bl	800d2ca <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80026d8:	e011      	b.n	80026fe <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 80026da:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80026ea:	443b      	add	r3, r7
 80026ec:	3b6c      	subs	r3, #108	@ 0x6c
 80026ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80026f2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80026f4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80026fe:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002702:	2b03      	cmp	r3, #3
 8002704:	dde9      	ble.n	80026da <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002706:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800270a:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 800270e:	2204      	movs	r2, #4
 8002710:	2104      	movs	r1, #4
 8002712:	f00a fdda 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002716:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800271a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800271e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002722:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002726:	ed93 0a00 	vldr	s0, [r3]
 800272a:	4610      	mov	r0, r2
 800272c:	f00a fe5f 	bl	800d3ee <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002730:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002734:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002738:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 800273c:	2210      	movs	r2, #16
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	f7ff ff4c 	bl	80025dc <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002744:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002748:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 800274c:	2204      	movs	r2, #4
 800274e:	2104      	movs	r1, #4
 8002750:	f00a fdbb 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002754:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002758:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 800275c:	2204      	movs	r2, #4
 800275e:	2104      	movs	r1, #4
 8002760:	f00a fdb3 	bl	800d2ca <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002764:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002768:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800276c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002770:	4618      	mov	r0, r3
 8002772:	f00a fd6f 	bl	800d254 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002776:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800277a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800277e:	2210      	movs	r2, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff2b 	bl	80025dc <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002786:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800278a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002794:	e03a      	b.n	800280c <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002796:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a2:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 80027ae:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80027b2:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80027b6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00a fd9d 	bl	800d2fa <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 80027c0:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80027c4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80027c8:	2210      	movs	r2, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff06 	bl	80025dc <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 80027d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027d4:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 80027d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027dc:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80027e0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80027e4:	4611      	mov	r1, r2
 80027e6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00a fdff 	bl	800d3ee <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 80027f0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80027f4:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 80027f8:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a fd29 	bl	800d254 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002802:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002806:	3301      	adds	r3, #1
 8002808:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800280c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002810:	2b0a      	cmp	r3, #10
 8002812:	ddc0      	ble.n	8002796 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002814:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002818:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800281c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002820:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002824:	ed93 0a00 	vldr	s0, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	f00a fde0 	bl	800d3ee <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800282e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002832:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002836:	461a      	mov	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	6053      	str	r3, [r2, #4]
 800283e:	6093      	str	r3, [r2, #8]
 8002840:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002842:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002846:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800284a:	2201      	movs	r2, #1
 800284c:	2104      	movs	r1, #4
 800284e:	f00a fd3c 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002852:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002856:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800285a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800285e:	4618      	mov	r0, r3
 8002860:	f00a fd4b 	bl	800d2fa <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002864:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002868:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800286c:	2201      	movs	r2, #1
 800286e:	2104      	movs	r1, #4
 8002870:	f00a fd2b 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002874:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002878:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002884:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002888:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800288c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002890:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002894:	4611      	mov	r1, r2
 8002896:	eeb0 0a47 	vmov.f32	s0, s14
 800289a:	4618      	mov	r0, r3
 800289c:	f00a fda7 	bl	800d3ee <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80028a0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80028a4:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80028a8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00a fcd1 	bl	800d254 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 80028b2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80028b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ba:	4618      	mov	r0, r3
 80028bc:	2340      	movs	r3, #64	@ 0x40
 80028be:	461a      	mov	r2, r3
 80028c0:	2100      	movs	r1, #0
 80028c2:	f00a fe81 	bl	800d5c8 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80028c6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80028ca:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80028ce:	2204      	movs	r2, #4
 80028d0:	2104      	movs	r1, #4
 80028d2:	f00a fcfa 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80028d6:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80028da:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80028de:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f00a fd09 	bl	800d2fa <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80028e8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80028ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028f0:	461a      	mov	r2, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	6053      	str	r3, [r2, #4]
 80028f8:	6093      	str	r3, [r2, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80028fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002900:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8002904:	2201      	movs	r2, #1
 8002906:	2104      	movs	r1, #4
 8002908:	f00a fcdf 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 800290c:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8002910:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002914:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002918:	4618      	mov	r0, r3
 800291a:	f00a fcee 	bl	800d2fa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800291e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002922:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800292e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002932:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002942:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002946:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800294a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800294e:	4611      	mov	r1, r2
 8002950:	eeb0 0a47 	vmov.f32	s0, s14
 8002954:	4618      	mov	r0, r3
 8002956:	f00a fd4a 	bl	800d3ee <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800295a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800295e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002962:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002966:	4618      	mov	r0, r3
 8002968:	f00a fc74 	bl	800d254 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 800296c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002970:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002974:	4618      	mov	r0, r3
 8002976:	2340      	movs	r3, #64	@ 0x40
 8002978:	461a      	mov	r2, r3
 800297a:	2100      	movs	r1, #0
 800297c:	f00a fe24 	bl	800d5c8 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002980:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002984:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002988:	2204      	movs	r2, #4
 800298a:	2104      	movs	r1, #4
 800298c:	f00a fc9d 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002990:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002994:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002998:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800299c:	4618      	mov	r0, r3
 800299e:	f00a fcac 	bl	800d2fa <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80029a2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029a6:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80029aa:	461a      	mov	r2, r3
 80029ac:	2300      	movs	r3, #0
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	6093      	str	r3, [r2, #8]
 80029b4:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80029b6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80029ba:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80029be:	2201      	movs	r2, #1
 80029c0:	2104      	movs	r1, #4
 80029c2:	f00a fc82 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80029c6:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80029ca:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80029ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00a fc91 	bl	800d2fa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80029d8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029dc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029e8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029ec:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029fc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a08:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002a0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a10:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002a14:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a18:	4611      	mov	r1, r2
 8002a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00a fce5 	bl	800d3ee <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002a24:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002a28:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002a2c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002a30:	4618      	mov	r0, r3
 8002a32:	f00a fc0f 	bl	800d254 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8002a36:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a3a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002a3e:	4618      	mov	r0, r3
 8002a40:	2340      	movs	r3, #64	@ 0x40
 8002a42:	461a      	mov	r2, r3
 8002a44:	2100      	movs	r1, #0
 8002a46:	f00a fdbf 	bl	800d5c8 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a4e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002a52:	2204      	movs	r2, #4
 8002a54:	2104      	movs	r1, #4
 8002a56:	f00a fc38 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8002a5a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002a5e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002a62:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a66:	4618      	mov	r0, r3
 8002a68:	f00a fc47 	bl	800d2fa <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002a6c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a70:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002a74:	461a      	mov	r2, r3
 8002a76:	2300      	movs	r3, #0
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	6053      	str	r3, [r2, #4]
 8002a7c:	6093      	str	r3, [r2, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a84:	f107 001c 	add.w	r0, r7, #28
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	f00a fc1d 	bl	800d2ca <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002a90:	f107 021c 	add.w	r2, r7, #28
 8002a94:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002a98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00a fc2c 	bl	800d2fa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002aa2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002aa6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ab2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ab6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ac6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ad6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002b1c <discretize_system_with_arm+0x4fc>
 8002ae6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aea:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4611      	mov	r1, r2
 8002af4:	eeb0 0a47 	vmov.f32	s0, s14
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00a fc78 	bl	800d3ee <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002afe:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002b02:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002b06:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a fba2 	bl	800d254 <arm_mat_add_f32>
}
 8002b10:	bf00      	nop
 8002b12:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	42f00000 	.word	0x42f00000

08002b20 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	@ 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002b2a:	edc7 0a08 	vstr	s1, [r7, #32]
 8002b2e:	ed87 1a07 	vstr	s2, [r7, #28]
 8002b32:	edc7 1a06 	vstr	s3, [r7, #24]
 8002b36:	ed87 2a05 	vstr	s4, [r7, #20]
 8002b3a:	edc7 2a04 	vstr	s5, [r7, #16]
 8002b3e:	ed87 3a03 	vstr	s6, [r7, #12]
 8002b42:	60b8      	str	r0, [r7, #8]
 8002b44:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8002b46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00a fd3a 	bl	800d5c8 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002b62:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b66:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b6c:	eef1 6a67 	vneg.f32	s13, s15
 8002b70:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002b7c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b88:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002b8c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b90:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b98:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba0:	eef1 6a67 	vneg.f32	s13, s15
 8002ba4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bac:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002bb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002bb4:	eef1 6a67 	vneg.f32	s13, s15
 8002bb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002bd4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002bd8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002be4:	f7ff fd1c 	bl	8002620 <discretize_system_with_arm>
}
 8002be8:	bf00      	nop
 8002bea:	3778      	adds	r7, #120	@ 0x78
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <PWM_init+0x40>)
 8002c02:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8002c16:	68b8      	ldr	r0, [r7, #8]
 8002c18:	f006 fc72 	bl	8009500 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	68b8      	ldr	r0, [r7, #8]
 8002c22:	f006 fdb9 	bl	8009798 <HAL_TIM_PWM_Start>
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0a21fe80 	.word	0x0a21fe80

08002c34 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c40:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	d137      	bne.n	8002cc2 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	889b      	ldrh	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <PWM_write_duty+0x32>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002c64:	e0e1      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	889b      	ldrh	r3, [r3, #4]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d105      	bne.n	8002c7a <PWM_write_duty+0x46>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	6393      	str	r3, [r2, #56]	@ 0x38
 8002c78:	e0d7      	b.n	8002e2a <PWM_write_duty+0x1f6>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	889b      	ldrh	r3, [r3, #4]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d105      	bne.n	8002c8e <PWM_write_duty+0x5a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002c8c:	e0cd      	b.n	8002e2a <PWM_write_duty+0x1f6>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	889b      	ldrh	r3, [r3, #4]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d105      	bne.n	8002ca2 <PWM_write_duty+0x6e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	e0c3      	b.n	8002e2a <PWM_write_duty+0x1f6>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	889b      	ldrh	r3, [r3, #4]
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d105      	bne.n	8002cb6 <PWM_write_duty+0x82>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6493      	str	r3, [r2, #72]	@ 0x48
 8002cb4:	e0b9      	b.n	8002e2a <PWM_write_duty+0x1f6>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002cc0:	e0b3      	b.n	8002e2a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cce:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cda:	ee17 2a90 	vmov	r2, s15
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002cea:	33fe      	adds	r3, #254	@ 0xfe
 8002cec:	4a51      	ldr	r2, [pc, #324]	@ (8002e34 <PWM_write_duty+0x200>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0bdb      	lsrs	r3, r3, #15
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	899b      	ldrh	r3, [r3, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d30:	ee17 3a90 	vmov	r3, s15
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	89db      	ldrh	r3, [r3, #14]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fbbc 	bl	80004bc <__aeabi_i2d>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
 8002d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d50:	ee17 0a90 	vmov	r0, s15
 8002d54:	f7fd fbc4 	bl	80004e0 <__aeabi_f2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd fc16 	bl	8000590 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <PWM_write_duty+0x204>)
 8002d72:	f7fd fd37 	bl	80007e4 <__aeabi_ddiv>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd fe41 	bl	8000a04 <__aeabi_d2uiz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	899a      	ldrh	r2, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	89da      	ldrh	r2, [r3, #14]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	89da      	ldrh	r2, [r3, #14]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	889b      	ldrh	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <PWM_write_duty+0x190>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	6952      	ldr	r2, [r2, #20]
 8002dc0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002dc2:	e032      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	889b      	ldrh	r3, [r3, #4]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d106      	bne.n	8002dda <PWM_write_duty+0x1a6>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002dd8:	e027      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d106      	bne.n	8002df0 <PWM_write_duty+0x1bc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002dee:	e01c      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	889b      	ldrh	r3, [r3, #4]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d106      	bne.n	8002e06 <PWM_write_duty+0x1d2>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002e04:	e011      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	889b      	ldrh	r3, [r3, #4]
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d106      	bne.n	8002e1c <PWM_write_duty+0x1e8>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002e1a:	e006      	b.n	8002e2a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002e28:	e7ff      	b.n	8002e2a <PWM_write_duty+0x1f6>
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdb0      	pop	{r4, r5, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	80008001 	.word	0x80008001
 8002e38:	40590000 	.word	0x40590000
 8002e3c:	00000000 	.word	0x00000000

08002e40 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e4c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d137      	bne.n	8002ece <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <PWM_write_range+0x32>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002e70:	e0e1      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	889b      	ldrh	r3, [r3, #4]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d105      	bne.n	8002e86 <PWM_write_range+0x46>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2300      	movs	r3, #0
 8002e82:	6393      	str	r3, [r2, #56]	@ 0x38
 8002e84:	e0d7      	b.n	8003036 <PWM_write_range+0x1f6>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	889b      	ldrh	r3, [r3, #4]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d105      	bne.n	8002e9a <PWM_write_range+0x5a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002e98:	e0cd      	b.n	8003036 <PWM_write_range+0x1f6>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	889b      	ldrh	r3, [r3, #4]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d105      	bne.n	8002eae <PWM_write_range+0x6e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eac:	e0c3      	b.n	8003036 <PWM_write_range+0x1f6>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	889b      	ldrh	r3, [r3, #4]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d105      	bne.n	8002ec2 <PWM_write_range+0x82>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ec0:	e0b9      	b.n	8003036 <PWM_write_range+0x1f6>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002ecc:	e0b3      	b.n	8003036 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee6:	ee17 2a90 	vmov	r2, s15
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002ef6:	33fe      	adds	r3, #254	@ 0xfe
 8002ef8:	4a53      	ldr	r2, [pc, #332]	@ (8003048 <PWM_write_range+0x208>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0bdb      	lsrs	r3, r3, #15
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	899b      	ldrh	r3, [r3, #12]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f28:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3c:	ee17 3a90 	vmov	r3, s15
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	89db      	ldrh	r3, [r3, #14]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fab6 	bl	80004bc <__aeabi_i2d>
 8002f50:	4604      	mov	r4, r0
 8002f52:	460d      	mov	r5, r1
 8002f54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f58:	eef0 7ae7 	vabs.f32	s15, s15
 8002f5c:	ee17 0a90 	vmov	r0, s15
 8002f60:	f7fd fabe 	bl	80004e0 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd fb10 	bl	8000590 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	a331      	add	r3, pc, #196	@ (adr r3, 8003040 <PWM_write_range+0x200>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd fc31 	bl	80007e4 <__aeabi_ddiv>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fd3b 	bl	8000a04 <__aeabi_d2uiz>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	899a      	ldrh	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	89da      	ldrh	r2, [r3, #14]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	89da      	ldrh	r2, [r3, #14]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	889b      	ldrh	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <PWM_write_range+0x190>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	6952      	ldr	r2, [r2, #20]
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002fce:	e032      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	889b      	ldrh	r3, [r3, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d106      	bne.n	8002fe6 <PWM_write_range+0x1a6>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002fe4:	e027      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	889b      	ldrh	r3, [r3, #4]
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d106      	bne.n	8002ffc <PWM_write_range+0x1bc>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ffa:	e01c      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	889b      	ldrh	r3, [r3, #4]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d106      	bne.n	8003012 <PWM_write_range+0x1d2>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003010:	e011      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	889b      	ldrh	r3, [r3, #4]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d106      	bne.n	8003028 <PWM_write_range+0x1e8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003026:	e006      	b.n	8003036 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003034:	e7ff      	b.n	8003036 <PWM_write_range+0x1f6>
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	bf00      	nop
 8003040:	00000000 	.word	0x00000000
 8003044:	40efffe0 	.word	0x40efffe0
 8003048:	80008001 	.word	0x80008001

0800304c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6178      	str	r0, [r7, #20]
 8003054:	6139      	str	r1, [r7, #16]
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	ed87 0a01 	vstr	s0, [r7, #4]
 800305e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80030ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	fb01 f202 	mul.w	r2, r1, r2
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800311a:	213c      	movs	r1, #60	@ 0x3c
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f006 fdf7 	bl	8009d10 <HAL_TIM_Encoder_Start>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	0000      	movs	r0, r0
 800312c:	0000      	movs	r0, r0
	...

08003130 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	0fda      	lsrs	r2, r3, #31
 8003158:	4413      	add	r3, r2
 800315a:	105b      	asrs	r3, r3, #1
 800315c:	461a      	mov	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4293      	cmp	r3, r2
 8003162:	dd05      	ble.n	8003170 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e00e      	b.n	800318e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	0fda      	lsrs	r2, r3, #31
 8003176:	4413      	add	r3, r2
 8003178:	105b      	asrs	r3, r3, #1
 800317a:	425b      	negs	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4293      	cmp	r3, r2
 8003182:	da04      	bge.n	800318e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80031ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f97f 	bl	80004e0 <__aeabi_f2d>
 80031e2:	4604      	mov	r4, r0
 80031e4:	460d      	mov	r5, r1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003206:	ee17 0a90 	vmov	r0, s15
 800320a:	f7fd f969 	bl	80004e0 <__aeabi_f2d>
 800320e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003300 <QEI_get_diff_count+0x1d0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd f9bc 	bl	8000590 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4690      	mov	r8, r2
 800321e:	4699      	mov	r9, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f95b 	bl	80004e0 <__aeabi_f2d>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4640      	mov	r0, r8
 8003230:	4649      	mov	r1, r9
 8003232:	f7fd f9ad 	bl	8000590 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4620      	mov	r0, r4
 800323c:	4629      	mov	r1, r5
 800323e:	f7fc fff1 	bl	8000224 <__adddf3>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f7fd fbfb 	bl	8000a44 <__aeabi_d2f>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f941 	bl	80004e0 <__aeabi_f2d>
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800327e:	ee16 0a90 	vmov	r0, s13
 8003282:	f7fd f92d 	bl	80004e0 <__aeabi_f2d>
 8003286:	a31e      	add	r3, pc, #120	@ (adr r3, 8003300 <QEI_get_diff_count+0x1d0>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd f980 	bl	8000590 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4690      	mov	r8, r2
 8003296:	4699      	mov	r9, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f91f 	bl	80004e0 <__aeabi_f2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4640      	mov	r0, r8
 80032a8:	4649      	mov	r1, r9
 80032aa:	f7fd f971 	bl	8000590 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f910 	bl	80004e0 <__aeabi_f2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4640      	mov	r0, r8
 80032c6:	4649      	mov	r1, r9
 80032c8:	f7fd f962 	bl	8000590 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc ffa6 	bl	8000224 <__adddf3>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fbb0 	bl	8000a44 <__aeabi_d2f>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	605a      	str	r2, [r3, #4]
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032fc:	f3af 8000 	nop.w
 8003300:	54442d18 	.word	0x54442d18
 8003304:	400921fb 	.word	0x400921fb

08003308 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f8d6 	bl	80004e0 <__aeabi_f2d>
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	4b83      	ldr	r3, [pc, #524]	@ (8003548 <QEI_compute_data+0x240>)
 800333a:	f7fd f929 	bl	8000590 <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4614      	mov	r4, r2
 8003344:	461d      	mov	r5, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003352:	ee17 0a90 	vmov	r0, s15
 8003356:	f7fd f8c3 	bl	80004e0 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4620      	mov	r0, r4
 8003360:	4629      	mov	r1, r5
 8003362:	f7fd fa3f 	bl	80007e4 <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f8b4 	bl	80004e0 <__aeabi_f2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f906 	bl	8000590 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd fb5a 	bl	8000a44 <__aeabi_d2f>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800339c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033a0:	ee17 0a90 	vmov	r0, s15
 80033a4:	f7fd f89c 	bl	80004e0 <__aeabi_f2d>
 80033a8:	a365      	add	r3, pc, #404	@ (adr r3, 8003540 <QEI_compute_data+0x238>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd f8ef 	bl	8000590 <__aeabi_dmul>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	461d      	mov	r5, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c6:	ee17 0a90 	vmov	r0, s15
 80033ca:	f7fd f889 	bl	80004e0 <__aeabi_f2d>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fd fa05 	bl	80007e4 <__aeabi_ddiv>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f87a 	bl	80004e0 <__aeabi_f2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7fd f8cc 	bl	8000590 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fb20 	bl	8000a44 <__aeabi_d2f>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f866 	bl	80004e0 <__aeabi_f2d>
 8003414:	a34a      	add	r3, pc, #296	@ (adr r3, 8003540 <QEI_compute_data+0x238>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f8b9 	bl	8000590 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4614      	mov	r4, r2
 8003424:	461d      	mov	r5, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f858 	bl	80004e0 <__aeabi_f2d>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4620      	mov	r0, r4
 8003436:	4629      	mov	r1, r5
 8003438:	f7fd f8aa 	bl	8000590 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003450:	ee17 0a90 	vmov	r0, s15
 8003454:	f7fd f844 	bl	80004e0 <__aeabi_f2d>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fd f9c0 	bl	80007e4 <__aeabi_ddiv>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f835 	bl	80004e0 <__aeabi_f2d>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fd f887 	bl	8000590 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fadb 	bl	8000a44 <__aeabi_d2f>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80034b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b4:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 80034b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d00a      	beq.n	80034dc <QEI_compute_data+0x1d4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	e001      	b.n	80034e0 <QEI_compute_data+0x1d8>
 80034dc:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800354c <QEI_compute_data+0x244>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80034fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80034fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003506:	d00a      	beq.n	800351e <QEI_compute_data+0x216>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003514:	edd7 7a02 	vldr	s15, [r7, #8]
 8003518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351c:	e001      	b.n	8003522 <QEI_compute_data+0x21a>
 800351e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800354c <QEI_compute_data+0x244>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	54442d18 	.word	0x54442d18
 8003544:	400921fb 	.word	0x400921fb
 8003548:	404e0000 	.word	0x404e0000
 800354c:	00000000 	.word	0x00000000

08003550 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	@ 0x38
 8003554:	af00      	add	r7, sp, #0
 8003556:	6178      	str	r0, [r7, #20]
 8003558:	ed87 0a04 	vstr	s0, [r7, #16]
 800355c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003560:	ed87 1a02 	vstr	s2, [r7, #8]
 8003564:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800358e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003592:	edd7 7a04 	vldr	s15, [r7, #16]
 8003596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359a:	eef0 7ae7 	vabs.f32	s15, s15
 800359e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80035a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80035a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	d503      	bpl.n	80035c0 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	22ff      	movs	r2, #255	@ 0xff
 80035bc:	741a      	strb	r2, [r3, #16]
 80035be:	e002      	b.n	80035c6 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2201      	movs	r2, #1
 80035c4:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80035c6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80035ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d006      	beq.n	80035e2 <Trapezoidal_Generator+0x92>
 80035d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d104      	bne.n	80035ec <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
        return;
 80035ea:	e06f      	b.n	80036cc <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80035ec:	edd7 6a02 	vldr	s13, [r7, #8]
 80035f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80035fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003600:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003604:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003608:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 800361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003620:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003624:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003630:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003634:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	db27      	blt.n	8003692 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003642:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003646:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800364a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364e:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003652:	edd7 6a07 	vldr	s13, [r7, #28]
 8003656:	ed97 7a02 	vldr	s14, [r7, #8]
 800365a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365e:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003666:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003668:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800366c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800367a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800367e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003682:	edd7 7a06 	vldr	s15, [r7, #24]
 8003686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003690:	e018      	b.n	80036c4 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003692:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003696:	edd7 7a01 	vldr	s15, [r7, #4]
 800369a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800369e:	eeb0 0a66 	vmov.f32	s0, s13
 80036a2:	f009 ffe3 	bl	800d66c <sqrtf>
 80036a6:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	6a3a      	ldr	r2, [r7, #32]
 80036ae:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	6a3a      	ldr	r2, [r7, #32]
 80036b4:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80036b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80036ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	3738      	adds	r7, #56	@ 0x38
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80036d4:	b480      	push	{r7}
 80036d6:	b08d      	sub	sp, #52	@ 0x34
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6178      	str	r0, [r7, #20]
 80036dc:	6139      	str	r1, [r7, #16]
 80036de:	ed87 0a03 	vstr	s0, [r7, #12]
 80036e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80036e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80036ea:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80036f4:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003978 <Trapezoidal_Evaluated+0x2a4>
 80036f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	ed93 7a03 	vldr	s14, [r3, #12]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	edd3 7a03 	vldr	s15, [r3, #12]
 800370e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	f200 811b 	bhi.w	8003950 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2200      	movs	r2, #0
 800371e:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	7c1b      	ldrb	r3, [r3, #16]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372e:	ed97 7a00 	vldr	s14, [r7]
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	ed93 7a00 	vldr	s14, [r3]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	edd3 7a01 	vldr	s15, [r3, #4]
 8003746:	eeb4 7a67 	vcmp.f32	s14, s15
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d109      	bne.n	8003764 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003762:	e00c      	b.n	800377e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	7c1b      	ldrb	r3, [r3, #16]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003772:	ed97 7a01 	vldr	s14, [r7, #4]
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	ed93 7a03 	vldr	s14, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d824      	bhi.n	80037de <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003798:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800379c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80037a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80037dc:	e0c6      	b.n	800396c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d830      	bhi.n	8003856 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80037f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80037f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003814:	ed97 7a03 	vldr	s14, [r7, #12]
 8003818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381c:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	ed93 7a03 	vldr	s14, [r3, #12]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003830:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003838:	edd7 7a06 	vldr	s15, [r7, #24]
 800383c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	e08a      	b.n	800396c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	ed93 7a03 	vldr	s14, [r3, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d900      	bls.n	800386e <Trapezoidal_Evaluated+0x19a>
}
 800386c:	e07e      	b.n	800396c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800386e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003872:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003876:	ee27 7a87 	vmul.f32	s14, s15, s14
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003896:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	dd11      	ble.n	80038d8 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038c4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80038c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80038d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	ed93 7a03 	vldr	s14, [r3, #12]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e8:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80038ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80038f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80038fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003900:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003904:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003908:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800390c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003914:	edd7 7a07 	vldr	s15, [r7, #28]
 8003918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800391c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8003926:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800392a:	edd7 7a07 	vldr	s15, [r7, #28]
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003940:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003944:	eef1 7a67 	vneg.f32	s15, s15
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800394e:	e00d      	b.n	800396c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2201      	movs	r2, #1
 8003954:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3734      	adds	r7, #52	@ 0x34
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	3a83126f 	.word	0x3a83126f

0800397c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	@ 0x30
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	2220      	movs	r2, #32
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f009 fe17 	bl	800d5c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800399a:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <MX_ADC1_Init+0x104>)
 800399c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80039a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039a2:	4b37      	ldr	r3, [pc, #220]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039aa:	4b35      	ldr	r3, [pc, #212]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039b0:	4b33      	ldr	r3, [pc, #204]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80039b6:	4b32      	ldr	r3, [pc, #200]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039bc:	4b30      	ldr	r3, [pc, #192]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039c4:	2204      	movs	r2, #4
 80039c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80039c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039d6:	2202      	movs	r2, #2
 80039d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039da:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039e2:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039e8:	4b25      	ldr	r3, [pc, #148]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039ee:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039f6:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80039fc:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <MX_ADC1_Init+0x104>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a04:	481e      	ldr	r0, [pc, #120]	@ (8003a80 <MX_ADC1_Init+0x104>)
 8003a06:	f002 fca7 	bl	8006358 <HAL_ADC_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003a10:	f000 fdfe 	bl	8004610 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4818      	ldr	r0, [pc, #96]	@ (8003a80 <MX_ADC1_Init+0x104>)
 8003a20:	f003 fdc6 	bl	80075b0 <HAL_ADCEx_MultiModeConfigChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003a2a:	f000 fdf1 	bl	8004610 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <MX_ADC1_Init+0x108>)
 8003a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a32:	2306      	movs	r3, #6
 8003a34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003a36:	2307      	movs	r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003a3a:	237f      	movs	r3, #127	@ 0x7f
 8003a3c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480d      	ldr	r0, [pc, #52]	@ (8003a80 <MX_ADC1_Init+0x104>)
 8003a4c:	f002 ff32 	bl	80068b4 <HAL_ADC_ConfigChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003a56:	f000 fddb 	bl	8004610 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <MX_ADC1_Init+0x10c>)
 8003a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a5e:	230c      	movs	r3, #12
 8003a60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4806      	ldr	r0, [pc, #24]	@ (8003a80 <MX_ADC1_Init+0x104>)
 8003a68:	f002 ff24 	bl	80068b4 <HAL_ADC_ConfigChannel>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003a72:	f000 fdcd 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	3730      	adds	r7, #48	@ 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000208 	.word	0x20000208
 8003a84:	19200040 	.word	0x19200040
 8003a88:	1d500080 	.word	0x1d500080

08003a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b09e      	sub	sp, #120	@ 0x78
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2254      	movs	r2, #84	@ 0x54
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f009 fd8b 	bl	800d5c8 <memset>
  if(adcHandle->Instance==ADC1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aba:	d15e      	bne.n	8003b7a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ac0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003ac2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003ac6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4618      	mov	r0, r3
 8003ace:	f005 fa65 	bl	8008f9c <HAL_RCCEx_PeriphCLKConfig>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ad8:	f000 fd9a 	bl	8004610 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003adc:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003ae2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae8:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af4:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b00:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_ADC_MspInit+0xf8>)
 8003b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b10:	2303      	movs	r3, #3
 8003b12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	481a      	ldr	r0, [pc, #104]	@ (8003b88 <HAL_ADC_MspInit+0xfc>)
 8003b20:	f004 fa90 	bl	8008044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b26:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <HAL_ADC_MspInit+0x104>)
 8003b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b2c:	2205      	movs	r2, #5
 8003b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b3e:	2280      	movs	r2, #128	@ 0x80
 8003b40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b54:	2220      	movs	r2, #32
 8003b56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b5e:	480b      	ldr	r0, [pc, #44]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b60:	f003 ff3e 	bl	80079e0 <HAL_DMA_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8003b6a:	f000 fd51 	bl	8004610 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a06      	ldr	r2, [pc, #24]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b72:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <HAL_ADC_MspInit+0x100>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3778      	adds	r7, #120	@ 0x78
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	48000800 	.word	0x48000800
 8003b8c:	20000274 	.word	0x20000274
 8003b90:	40020008 	.word	0x40020008

08003b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8003bbe:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <MX_DMA_Init+0x90>)
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	200b      	movs	r0, #11
 8003bd0:	f003 fed1 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bd4:	200b      	movs	r0, #11
 8003bd6:	f003 fee8 	bl	80079aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	200c      	movs	r0, #12
 8003be0:	f003 fec9 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003be4:	200c      	movs	r0, #12
 8003be6:	f003 fee0 	bl	80079aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	200d      	movs	r0, #13
 8003bf0:	f003 fec1 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003bf4:	200d      	movs	r0, #13
 8003bf6:	f003 fed8 	bl	80079aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	200e      	movs	r0, #14
 8003c00:	f003 feb9 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c04:	200e      	movs	r0, #14
 8003c06:	f003 fed0 	bl	80079aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f003 feb1 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003c14:	200f      	movs	r0, #15
 8003c16:	f003 fec8 	bl	80079aa <HAL_NVIC_EnableIRQ>

}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000

08003c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2e:	f107 0314 	add.w	r3, r7, #20
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	4a4e      	ldr	r2, [pc, #312]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c56:	4b49      	ldr	r3, [pc, #292]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	4a48      	ldr	r2, [pc, #288]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c5c:	f043 0320 	orr.w	r3, r3, #32
 8003c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c62:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	4b43      	ldr	r3, [pc, #268]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	4a42      	ldr	r2, [pc, #264]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7a:	4b40      	ldr	r3, [pc, #256]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	4b3d      	ldr	r3, [pc, #244]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c92:	4b3a      	ldr	r3, [pc, #232]	@ (8003d7c <MX_GPIO_Init+0x154>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ca8:	f004 fb66 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cb2:	4833      	ldr	r0, [pc, #204]	@ (8003d80 <MX_GPIO_Init+0x158>)
 8003cb4:	f004 fb60 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4619      	mov	r1, r3
 8003cce:	482c      	ldr	r0, [pc, #176]	@ (8003d80 <MX_GPIO_Init+0x158>)
 8003cd0:	f004 f9b8 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8003cd4:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8003cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cf0:	f004 f9a8 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 8003cf4:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8003cf8:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4619      	mov	r1, r3
 8003d08:	481e      	ldr	r0, [pc, #120]	@ (8003d84 <MX_GPIO_Init+0x15c>)
 8003d0a:	f004 f99b 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d14:	2301      	movs	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	4619      	mov	r1, r3
 8003d26:	4816      	ldr	r0, [pc, #88]	@ (8003d80 <MX_GPIO_Init+0x158>)
 8003d28:	f004 f98c 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 8003d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d44:	f004 f97e 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8003d48:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4808      	ldr	r0, [pc, #32]	@ (8003d80 <MX_GPIO_Init+0x158>)
 8003d5e:	f004 f971 	bl	8008044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2028      	movs	r0, #40	@ 0x28
 8003d68:	f003 fe05 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d6c:	2028      	movs	r0, #40	@ 0x28
 8003d6e:	f003 fe1c 	bl	80079aa <HAL_NVIC_EnableIRQ>

}
 8003d72:	bf00      	nop
 8003d74:	3728      	adds	r7, #40	@ 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	48000800 	.word	0x48000800
 8003d84:	48000400 	.word	0x48000400

08003d88 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003d88:	b5b0      	push	{r4, r5, r7, lr}
 8003d8a:	b0a4      	sub	sp, #144	@ 0x90
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6178      	str	r0, [r7, #20]
 8003d90:	6139      	str	r1, [r7, #16]
 8003d92:	60fa      	str	r2, [r7, #12]
 8003d94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d98:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003dac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003de2:	4bc6      	ldr	r3, [pc, #792]	@ (80040fc <Kalman_Start+0x374>)
 8003de4:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003de8:	461d      	mov	r5, r3
 8003dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e1c:	e028      	b.n	8003e70 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8003e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e30:	3314      	adds	r3, #20
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3390      	adds	r3, #144	@ 0x90
 8003e40:	443b      	add	r3, r7
 8003e42:	3b64      	subs	r3, #100	@ 0x64
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4c:	3398      	adds	r3, #152	@ 0x98
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	ddd2      	ble.n	8003e1e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e7e:	e03a      	b.n	8003ef6 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3390      	adds	r3, #144	@ 0x90
 8003e88:	443b      	add	r3, r7
 8003e8a:	3b74      	subs	r3, #116	@ 0x74
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8003e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eac:	3324      	adds	r3, #36	@ 0x24
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3390      	adds	r3, #144	@ 0x90
 8003ebc:	443b      	add	r3, r7
 8003ebe:	3b14      	subs	r3, #20
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec8:	3328      	adds	r3, #40	@ 0x28
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3390      	adds	r3, #144	@ 0x90
 8003ed8:	443b      	add	r3, r7
 8003eda:	3b24      	subs	r3, #36	@ 0x24
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	332c      	adds	r3, #44	@ 0x2c
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	ddc0      	ble.n	8003e80 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2201      	movs	r2, #1
 8003f08:	2104      	movs	r1, #4
 8003f0a:	f009 f9de 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3310      	adds	r3, #16
 8003f18:	2204      	movs	r2, #4
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	f009 f9d5 	bl	800d2ca <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3350      	adds	r3, #80	@ 0x50
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	2104      	movs	r1, #4
 8003f2e:	f009 f9cc 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3390      	adds	r3, #144	@ 0x90
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2104      	movs	r1, #4
 8003f40:	f009 f9c3 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	33a0      	adds	r3, #160	@ 0xa0
 8003f4e:	2204      	movs	r2, #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	f009 f9ba 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	33b0      	adds	r3, #176	@ 0xb0
 8003f60:	2201      	movs	r2, #1
 8003f62:	2104      	movs	r1, #4
 8003f64:	f009 f9b1 	bl	800d2ca <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	33c8      	adds	r3, #200	@ 0xc8
 8003f72:	2204      	movs	r2, #4
 8003f74:	2104      	movs	r1, #4
 8003f76:	f009 f9a8 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003f86:	2201      	movs	r2, #1
 8003f88:	2104      	movs	r1, #4
 8003f8a:	f009 f99e 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	f009 f994 	bl	800d2ca <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fae:	2204      	movs	r2, #4
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	f009 f98a 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	f009 f980 	bl	800d2ca <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	2104      	movs	r1, #4
 8003fda:	f009 f976 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003fea:	2201      	movs	r2, #1
 8003fec:	2104      	movs	r1, #4
 8003fee:	f009 f96c 	bl	800d2ca <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003ffe:	2204      	movs	r2, #4
 8004000:	2101      	movs	r1, #1
 8004002:	f009 f962 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004012:	2201      	movs	r2, #1
 8004014:	2101      	movs	r1, #1
 8004016:	f009 f958 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004026:	2201      	movs	r2, #1
 8004028:	2101      	movs	r1, #1
 800402a:	f009 f94e 	bl	800d2ca <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800403a:	2201      	movs	r2, #1
 800403c:	2104      	movs	r1, #4
 800403e:	f009 f944 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800404e:	2201      	movs	r2, #1
 8004050:	2104      	movs	r1, #4
 8004052:	f009 f93a 	bl	800d2ca <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8004062:	2201      	movs	r2, #1
 8004064:	2101      	movs	r1, #1
 8004066:	f009 f930 	bl	800d2ca <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8004076:	2201      	movs	r2, #1
 8004078:	2101      	movs	r1, #1
 800407a:	f009 f926 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800408a:	2201      	movs	r2, #1
 800408c:	2101      	movs	r1, #1
 800408e:	f009 f91c 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800409e:	2201      	movs	r2, #1
 80040a0:	2104      	movs	r1, #4
 80040a2:	f009 f912 	bl	800d2ca <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80040b2:	2201      	movs	r2, #1
 80040b4:	2101      	movs	r1, #1
 80040b6:	f009 f908 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80040c6:	2204      	movs	r2, #4
 80040c8:	2104      	movs	r1, #4
 80040ca:	f009 f8fe 	bl	800d2ca <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	33c4      	adds	r3, #196	@ 0xc4
 80040d8:	2201      	movs	r2, #1
 80040da:	2101      	movs	r1, #1
 80040dc:	f009 f8f5 	bl	800d2ca <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80040ec:	2201      	movs	r2, #1
 80040ee:	2101      	movs	r1, #1
 80040f0:	f009 f8eb 	bl	800d2ca <arm_mat_init_f32>
}
 80040f4:	bf00      	nop
 80040f6:	3790      	adds	r7, #144	@ 0x90
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bdb0      	pop	{r4, r5, r7, pc}
 80040fc:	0800e1b0 	.word	0x0800e1b0

08004100 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004104:	f3bf 8f4f 	dsb	sy
}
 8004108:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <__NVIC_SystemReset+0x24>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004112:	4904      	ldr	r1, [pc, #16]	@ (8004124 <__NVIC_SystemReset+0x24>)
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__NVIC_SystemReset+0x28>)
 8004116:	4313      	orrs	r3, r2
 8004118:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800411a:	f3bf 8f4f 	dsb	sy
}
 800411e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <__NVIC_SystemReset+0x20>
 8004124:	e000ed00 	.word	0xe000ed00
 8004128:	05fa0004 	.word	0x05fa0004

0800412c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004130:	ed2d 8b02 	vpush	{d8}
 8004134:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8004136:	f001 fe5a 	bl	8005dee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800413a:	f000 f8dd 	bl	80042f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800413e:	f7ff fd73 	bl	8003c28 <MX_GPIO_Init>
	MX_DMA_Init();
 8004142:	f7ff fd27 	bl	8003b94 <MX_DMA_Init>
	MX_ADC1_Init();
 8004146:	f7ff fc19 	bl	800397c <MX_ADC1_Init>
	MX_TIM2_Init();
 800414a:	f001 f863 	bl	8005214 <MX_TIM2_Init>
	MX_TIM3_Init();
 800414e:	f001 f8af 	bl	80052b0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004152:	f001 f903 	bl	800535c <MX_TIM4_Init>
	MX_TIM5_Init();
 8004156:	f001 f957 	bl	8005408 <MX_TIM5_Init>
	MX_TIM8_Init();
 800415a:	f001 f9a3 	bl	80054a4 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800415e:	f001 fc6f 	bl	8005a40 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004162:	f001 fa67 	bl	8005634 <MX_TIM16_Init>
	MX_TIM1_Init();
 8004166:	f000 ffc1 	bl	80050ec <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800416a:	f001 fc1f 	bl	80059ac <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800416e:	f000 fa55 	bl	800461c <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8004172:	4b52      	ldr	r3, [pc, #328]	@ (80042bc <main+0x190>)
 8004174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f7fc fc62 	bl	8000a44 <__aeabi_d2f>
 8004180:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8004182:	4b4e      	ldr	r3, [pc, #312]	@ (80042bc <main+0x190>)
 8004184:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	f7fc fc5a 	bl	8000a44 <__aeabi_d2f>
 8004190:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8004192:	4b4a      	ldr	r3, [pc, #296]	@ (80042bc <main+0x190>)
 8004194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fc52 	bl	8000a44 <__aeabi_d2f>
 80041a0:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80041a2:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <main+0x190>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fc fc4a 	bl	8000a44 <__aeabi_d2f>
 80041b0:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80041b2:	4b42      	ldr	r3, [pc, #264]	@ (80042bc <main+0x190>)
 80041b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7fc fc42 	bl	8000a44 <__aeabi_d2f>
 80041c0:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 0.05);
 80041c2:	4b3e      	ldr	r3, [pc, #248]	@ (80042bc <main+0x190>)
 80041c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f7fc fc3a 	bl	8000a44 <__aeabi_d2f>
 80041d0:	4603      	mov	r3, r0
 80041d2:	ed9f 4a3b 	vldr	s8, [pc, #236]	@ 80042c0 <main+0x194>
 80041d6:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80041da:	ee03 3a10 	vmov	s6, r3
 80041de:	ee02 9a90 	vmov	s5, r9
 80041e2:	ee02 8a10 	vmov	s4, r8
 80041e6:	ee01 6a90 	vmov	s3, r6
 80041ea:	ee01 5a10 	vmov	s2, r5
 80041ee:	ee00 4a90 	vmov	s1, r4
 80041f2:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 80042c4 <main+0x198>
 80041f6:	4834      	ldr	r0, [pc, #208]	@ (80042c8 <main+0x19c>)
 80041f8:	f7fd faec 	bl	80017d4 <MotorKalman_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		plotter_update_sensors();
 80041fc:	f000 fcc4 	bl	8004b88 <plotter_update_sensors>

		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !revtrajectoryActive) {
 8004200:	4b32      	ldr	r3, [pc, #200]	@ (80042cc <main+0x1a0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04e      	beq.n	80042a6 <main+0x17a>
 8004208:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <main+0x1a4>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d14a      	bne.n	80042a6 <main+0x17a>
 8004210:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <main+0x1a8>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d043      	beq.n	80042a6 <main+0x17a>
			revEva.t = 0.0f;
 800421e:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <main+0x1ac>)
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
			revEva.isFinised = false;
 8004226:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <main+0x1ac>)
 8004228:	2200      	movs	r2, #0
 800422a:	741a      	strb	r2, [r3, #16]

			rev_initial_p = revolute_encoder.rads;
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <main+0x1b0>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <main+0x1b4>)
 8004232:	6013      	str	r3, [r2, #0]

			rev_target_p = trajectory_sequence[trajectory_sequence_index];
 8004234:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <main+0x1b8>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <main+0x1bc>)
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <main+0x1c0>)
 8004242:	6013      	str	r3, [r2, #0]

			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004244:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <main+0x1b4>)
 8004246:	ed93 8a00 	vldr	s16, [r3]
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <main+0x1c0>)
 800424c:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8004250:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <main+0x190>)
 8004252:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f7fc fbf3 	bl	8000a44 <__aeabi_d2f>
 800425e:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8004260:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <main+0x190>)
 8004262:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f7fc fbeb 	bl	8000a44 <__aeabi_d2f>
 800426e:	4603      	mov	r3, r0
 8004270:	ee01 3a90 	vmov	s3, r3
 8004274:	ee01 4a10 	vmov	s2, r4
 8004278:	eef0 0a68 	vmov.f32	s1, s17
 800427c:	eeb0 0a48 	vmov.f32	s0, s16
 8004280:	481b      	ldr	r0, [pc, #108]	@ (80042f0 <main+0x1c4>)
 8004282:	f7ff f965 	bl	8003550 <Trapezoidal_Generator>

			revtrajectoryActive = true;
 8004286:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <main+0x1a8>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 800428c:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <main+0x1b8>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	425a      	negs	r2, r3
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	f002 0203 	and.w	r2, r2, #3
 800429c:	bf58      	it	pl
 800429e:	4253      	negpl	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <main+0x1b8>)
 80042a4:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <main+0x1a0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <main+0x1a4>)
 80042ae:	701a      	strb	r2, [r3, #0]

		if(b2){
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <main+0x1c8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0a1      	beq.n	80041fc <main+0xd0>
			NVIC_SystemReset();
 80042b8:	f7ff ff22 	bl	8004100 <__NVIC_SystemReset>
 80042bc:	20000000 	.word	0x20000000
 80042c0:	3d4ccccd 	.word	0x3d4ccccd
 80042c4:	3a83126f 	.word	0x3a83126f
 80042c8:	200002d4 	.word	0x200002d4
 80042cc:	200018ac 	.word	0x200018ac
 80042d0:	20000691 	.word	0x20000691
 80042d4:	20000668 	.word	0x20000668
 80042d8:	20000654 	.word	0x20000654
 80042dc:	20000788 	.word	0x20000788
 80042e0:	2000066c 	.word	0x2000066c
 80042e4:	20000690 	.word	0x20000690
 80042e8:	0800e1f0 	.word	0x0800e1f0
 80042ec:	20000670 	.word	0x20000670
 80042f0:	20000640 	.word	0x20000640
 80042f4:	200018b0 	.word	0x200018b0

080042f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b094      	sub	sp, #80	@ 0x50
 80042fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80042fe:	f107 0318 	add.w	r3, r7, #24
 8004302:	2238      	movs	r2, #56	@ 0x38
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f009 f95e 	bl	800d5c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800431a:	2000      	movs	r0, #0
 800431c:	f004 f85c 	bl	80083d8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004320:	2302      	movs	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800432a:	2340      	movs	r3, #64	@ 0x40
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800432e:	2302      	movs	r3, #2
 8004330:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004332:	2302      	movs	r3, #2
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004336:	2304      	movs	r3, #4
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800433a:	2355      	movs	r3, #85	@ 0x55
 800433c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800433e:	2302      	movs	r3, #2
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004342:	2302      	movs	r3, #2
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004346:	2302      	movs	r3, #2
 8004348:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800434a:	f107 0318 	add.w	r3, r7, #24
 800434e:	4618      	mov	r0, r3
 8004350:	f004 f8f6 	bl	8008540 <HAL_RCC_OscConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <SystemClock_Config+0x66>
		Error_Handler();
 800435a:	f000 f959 	bl	8004610 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800435e:	230f      	movs	r3, #15
 8004360:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004362:	2303      	movs	r3, #3
 8004364:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	2104      	movs	r1, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f004 fbf4 	bl	8008b64 <HAL_RCC_ClockConfig>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <SystemClock_Config+0x8e>
		Error_Handler();
 8004382:	f000 f945 	bl	8004610 <Error_Handler>
	}
}
 8004386:	bf00      	nop
 8004388:	3750      	adds	r7, #80	@ 0x50
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_GPIO_EXTI_Callback>:
	default:
		return 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d105      	bne.n	80043ac <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_GPIO_EXTI_Callback+0x28>)
 80043a2:	2205      	movs	r2, #5
 80043a4:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 80043a6:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_GPIO_EXTI_Callback+0x2c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
	}
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	200000e8 	.word	0x200000e8
 80043bc:	200000eb 	.word	0x200000eb

080043c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	ed2d 8b02 	vpush	{d8}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a74      	ldr	r2, [pc, #464]	@ (80045b4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	f040 80de 	bne.w	80045a6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
//		rev_kal_filt = SteadyStateKalmanFilter(&revolute_kalman, rev_vin,
//				revolute_encoder.rads);
//
//		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);

		if (revtrajectoryActive && !revEva.isFinised) {
 80043ea:	4b73      	ldr	r3, [pc, #460]	@ (80045b8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80b7 	beq.w	8004562 <HAL_TIM_PeriodElapsedCallback+0x18e>
 80043f4:	4b71      	ldr	r3, [pc, #452]	@ (80045bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80043f6:	7c1b      	ldrb	r3, [r3, #16]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80af 	beq.w	8004562 <HAL_TIM_PeriodElapsedCallback+0x18e>
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004404:	4b6e      	ldr	r3, [pc, #440]	@ (80045c0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8004406:	ed93 8a00 	vldr	s16, [r3]
 800440a:	4b6e      	ldr	r3, [pc, #440]	@ (80045c4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800440c:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8004410:	4b6d      	ldr	r3, [pc, #436]	@ (80045c8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004412:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	f7fc fb13 	bl	8000a44 <__aeabi_d2f>
 800441e:	4606      	mov	r6, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8004420:	4b69      	ldr	r3, [pc, #420]	@ (80045c8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004422:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f7fc fb0b 	bl	8000a44 <__aeabi_d2f>
 800442e:	4603      	mov	r3, r0
 8004430:	ee01 3a90 	vmov	s3, r3
 8004434:	ee01 6a10 	vmov	s2, r6
 8004438:	eef0 0a68 	vmov.f32	s1, s17
 800443c:	eeb0 0a48 	vmov.f32	s0, s16
 8004440:	495e      	ldr	r1, [pc, #376]	@ (80045bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8004442:	4862      	ldr	r0, [pc, #392]	@ (80045cc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004444:	f7ff f946 	bl	80036d4 <Trapezoidal_Evaluated>

			revolute_pos = revEva.setposition;
 8004448:	4b5c      	ldr	r3, [pc, #368]	@ (80045bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800444e:	6013      	str	r3, [r2, #0]
			revolute_vel = revEva.setvelocity;
 8004450:	4b5a      	ldr	r3, [pc, #360]	@ (80045bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a5f      	ldr	r2, [pc, #380]	@ (80045d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004456:	6013      	str	r3, [r2, #0]

			QEI_get_diff_count(&revolute_encoder);
 8004458:	485f      	ldr	r0, [pc, #380]	@ (80045d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800445a:	f7fe fe69 	bl	8003130 <QEI_get_diff_count>
			QEI_compute_data(&revolute_encoder);
 800445e:	485e      	ldr	r0, [pc, #376]	@ (80045d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004460:	f7fe ff52 	bl	8003308 <QEI_compute_data>

			rev_vin = mapf(rev_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 8004464:	4b5d      	ldr	r3, [pc, #372]	@ (80045dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800446e:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8004472:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 80045e0 <HAL_TIM_PeriodElapsedCallback+0x20c>
 8004476:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80045e4 <HAL_TIM_PeriodElapsedCallback+0x210>
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	f7fd f8c9 	bl	8001614 <mapf>
 8004482:	eef0 7a40 	vmov.f32	s15, s0
 8004486:	4b58      	ldr	r3, [pc, #352]	@ (80045e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004488:	edc3 7a00 	vstr	s15, [r3]

			MotorKalman_Estimate(&motor_filter, rev_vin, revolute_encoder.rads);
 800448c:	4b56      	ldr	r3, [pc, #344]	@ (80045e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800448e:	edd3 7a00 	vldr	s15, [r3]
 8004492:	4b51      	ldr	r3, [pc, #324]	@ (80045d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004494:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004498:	eef0 0a47 	vmov.f32	s1, s14
 800449c:	eeb0 0a67 	vmov.f32	s0, s15
 80044a0:	4852      	ldr	r0, [pc, #328]	@ (80045ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 80044a2:	f7fe f885 	bl	80025b0 <MotorKalman_Estimate>

			rev_pos_error = revolute_pos - revolute_encoder.rads;
 80044a6:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80044a8:	ed93 7a00 	vldr	s14, [r3]
 80044ac:	4b4a      	ldr	r3, [pc, #296]	@ (80045d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80044ae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80044b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b6:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80044b8:	edc3 7a00 	vstr	s15, [r3]

			rev_cmd_vx = PWM_Satuation(
 80044bc:	4b4c      	ldr	r3, [pc, #304]	@ (80045f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	484b      	ldr	r0, [pc, #300]	@ (80045f4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80044c8:	f7fc fdb3 	bl	8001032 <PID_CONTROLLER_Compute>
 80044cc:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							rev_pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 80044d0:	4b3d      	ldr	r3, [pc, #244]	@ (80045c8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80044d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			rev_cmd_vx = PWM_Satuation(
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fa6b 	bl	80009b4 <__aeabi_d2iz>
 80044de:	4606      	mov	r6, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 80044e0:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80044e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80044e6:	4614      	mov	r4, r2
 80044e8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
			rev_cmd_vx = PWM_Satuation(
 80044ec:	4620      	mov	r0, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	f7fc fa60 	bl	80009b4 <__aeabi_d2iz>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4619      	mov	r1, r3
 80044f8:	4630      	mov	r0, r6
 80044fa:	eeb0 0a48 	vmov.f32	s0, s16
 80044fe:	f7fc fd3f 	bl	8000f80 <PWM_Satuation>
 8004502:	ee07 0a90 	vmov	s15, r0
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	4b3b      	ldr	r3, [pc, #236]	@ (80045f8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800450c:	edc3 7a00 	vstr	s15, [r3]

			rev_vel_error = rev_cmd_vx + revolute_vel - motor_filter.velocity;
 8004510:	4b39      	ldr	r3, [pc, #228]	@ (80045f8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004512:	ed93 7a00 	vldr	s14, [r3]
 8004516:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004520:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8004522:	edd3 7ad8 	vldr	s15, [r3, #864]	@ 0x360
 8004526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452a:	4b34      	ldr	r3, [pc, #208]	@ (80045fc <HAL_TIM_PeriodElapsedCallback+0x228>)
 800452c:	edc3 7a00 	vstr	s15, [r3]

			rev_cmd_ux = PWM_Satuation(
 8004530:	4b32      	ldr	r3, [pc, #200]	@ (80045fc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	eeb0 0a67 	vmov.f32	s0, s15
 800453a:	4831      	ldr	r0, [pc, #196]	@ (8004600 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800453c:	f7fc fd79 	bl	8001032 <PID_CONTROLLER_Compute>
 8004540:	eef0 7a40 	vmov.f32	s15, s0
 8004544:	492f      	ldr	r1, [pc, #188]	@ (8004604 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004546:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	f7fc fd17 	bl	8000f80 <PWM_Satuation>
 8004552:	ee07 0a90 	vmov	s15, r0
 8004556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800455a:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800455c:	edc3 7a00 	vstr	s15, [r3]
 8004560:	e017      	b.n	8004592 <HAL_TIM_PeriodElapsedCallback+0x1be>
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							rev_vel_error), 65535, -65535);
		} else {
			revtrajectoryActive = false;
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
			rev_cmd_ux = 0;
 8004568:	4b1c      	ldr	r3, [pc, #112]	@ (80045dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
			rev_vin = 0;
 8004570:	4b1d      	ldr	r3, [pc, #116]	@ (80045e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
			MotorKalman_Estimate(&motor_filter, rev_vin, revolute_encoder.rads);
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800457a:	edd3 7a00 	vldr	s15, [r3]
 800457e:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004580:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004584:	eef0 0a47 	vmov.f32	s1, s14
 8004588:	eeb0 0a67 	vmov.f32	s0, s15
 800458c:	4817      	ldr	r0, [pc, #92]	@ (80045ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 800458e:	f7fe f80f 	bl	80025b0 <MotorKalman_Estimate>
		}

		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 8004592:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	eef0 0a67 	vmov.f32	s1, s15
 800459c:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8004608 <HAL_TIM_PeriodElapsedCallback+0x234>
 80045a0:	481a      	ldr	r0, [pc, #104]	@ (800460c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80045a2:	f7fc fdfd 	bl	80011a0 <MDXX_set_range>
	}
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	ecbd 8b02 	vpop	{d8}
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200019a4 	.word	0x200019a4
 80045b8:	20000668 	.word	0x20000668
 80045bc:	20000654 	.word	0x20000654
 80045c0:	2000066c 	.word	0x2000066c
 80045c4:	20000670 	.word	0x20000670
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000640 	.word	0x20000640
 80045d0:	20000674 	.word	0x20000674
 80045d4:	20000678 	.word	0x20000678
 80045d8:	20000788 	.word	0x20000788
 80045dc:	20000688 	.word	0x20000688
 80045e0:	477fff00 	.word	0x477fff00
 80045e4:	c77fff00 	.word	0xc77fff00
 80045e8:	20000684 	.word	0x20000684
 80045ec:	200002d4 	.word	0x200002d4
 80045f0:	2000067c 	.word	0x2000067c
 80045f4:	2000081c 	.word	0x2000081c
 80045f8:	2000068c 	.word	0x2000068c
 80045fc:	20000680 	.word	0x20000680
 8004600:	20000838 	.word	0x20000838
 8004604:	ffff0001 	.word	0xffff0001
 8004608:	44fa0000 	.word	0x44fa0000
 800460c:	200006e0 	.word	0x200006e0

08004610 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004614:	b672      	cpsid	i
}
 8004616:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <Error_Handler+0x8>

0800461c <plotter_begin>:
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, up_photo, low_photo, up_lim, low_lim;
void plotter_begin() {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	ed2d 8b02 	vpush	{d8}
 8004622:	b083      	sub	sp, #12
 8004624:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8004626:	2100      	movs	r1, #0
 8004628:	48c8      	ldr	r0, [pc, #800]	@ (800494c <plotter_begin+0x330>)
 800462a:	f000 fb8f 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800462e:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8004950 <plotter_begin+0x334>
 8004632:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8004954 <plotter_begin+0x338>
 8004636:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8004958 <plotter_begin+0x33c>
 800463a:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 8004958 <plotter_begin+0x33c>
 800463e:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 800495c <plotter_begin+0x340>
 8004642:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8004950 <plotter_begin+0x334>
 8004646:	48c1      	ldr	r0, [pc, #772]	@ (800494c <plotter_begin+0x330>)
 8004648:	f000 fbde 	bl	8004e08 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800464c:	2102      	movs	r1, #2
 800464e:	48c4      	ldr	r0, [pc, #784]	@ (8004960 <plotter_begin+0x344>)
 8004650:	f000 fb7c 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8004654:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 8004950 <plotter_begin+0x334>
 8004658:	eddf 2abe 	vldr	s5, [pc, #760]	@ 8004954 <plotter_begin+0x338>
 800465c:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 8004958 <plotter_begin+0x33c>
 8004660:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8004958 <plotter_begin+0x33c>
 8004664:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004668:	eddf 0abc 	vldr	s1, [pc, #752]	@ 800495c <plotter_begin+0x340>
 800466c:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8004950 <plotter_begin+0x334>
 8004670:	48bb      	ldr	r0, [pc, #748]	@ (8004960 <plotter_begin+0x344>)
 8004672:	f000 fbf4 	bl	8004e5e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8004676:	2100      	movs	r1, #0
 8004678:	48ba      	ldr	r0, [pc, #744]	@ (8004964 <plotter_begin+0x348>)
 800467a:	f000 fb67 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800467e:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8004682:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8004686:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8004958 <plotter_begin+0x33c>
 800468a:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8004958 <plotter_begin+0x33c>
 800468e:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 800495c <plotter_begin+0x340>
 8004692:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004696:	48b3      	ldr	r0, [pc, #716]	@ (8004964 <plotter_begin+0x348>)
 8004698:	f000 fbb6 	bl	8004e08 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800469c:	2102      	movs	r1, #2
 800469e:	48b2      	ldr	r0, [pc, #712]	@ (8004968 <plotter_begin+0x34c>)
 80046a0:	f000 fb54 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80046a4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80046a8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80046ac:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8004958 <plotter_begin+0x33c>
 80046b0:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8004958 <plotter_begin+0x33c>
 80046b4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80046b8:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 800495c <plotter_begin+0x340>
 80046bc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046c0:	48a9      	ldr	r0, [pc, #676]	@ (8004968 <plotter_begin+0x34c>)
 80046c2:	f000 fbcc 	bl	8004e5e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80046c6:	2100      	movs	r1, #0
 80046c8:	48a8      	ldr	r0, [pc, #672]	@ (800496c <plotter_begin+0x350>)
 80046ca:	f000 fb3f 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80046ce:	4ba8      	ldr	r3, [pc, #672]	@ (8004970 <plotter_begin+0x354>)
 80046d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc f9b4 	bl	8000a44 <__aeabi_d2f>
 80046dc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80046de:	4ba4      	ldr	r3, [pc, #656]	@ (8004970 <plotter_begin+0x354>)
 80046e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	f7fc f9ac 	bl	8000a44 <__aeabi_d2f>
 80046ec:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80046f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004970 <plotter_begin+0x354>)
 80046f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fc f9a0 	bl	8000a44 <__aeabi_d2f>
 8004704:	4603      	mov	r3, r0
 8004706:	ee02 3a90 	vmov	s5, r3
 800470a:	eeb0 2a48 	vmov.f32	s4, s16
 800470e:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8004958 <plotter_begin+0x33c>
 8004712:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8004958 <plotter_begin+0x33c>
 8004716:	eddf 0a91 	vldr	s1, [pc, #580]	@ 800495c <plotter_begin+0x340>
 800471a:	ee00 4a10 	vmov	s0, r4
 800471e:	4893      	ldr	r0, [pc, #588]	@ (800496c <plotter_begin+0x350>)
 8004720:	f000 fb72 	bl	8004e08 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8004724:	2102      	movs	r1, #2
 8004726:	4893      	ldr	r0, [pc, #588]	@ (8004974 <plotter_begin+0x358>)
 8004728:	f000 fb10 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800472c:	4b90      	ldr	r3, [pc, #576]	@ (8004970 <plotter_begin+0x354>)
 800472e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	f7fc f985 	bl	8000a44 <__aeabi_d2f>
 800473a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800473c:	4b8c      	ldr	r3, [pc, #560]	@ (8004970 <plotter_begin+0x354>)
 800473e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fc f97d 	bl	8000a44 <__aeabi_d2f>
 800474a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004754:	4b86      	ldr	r3, [pc, #536]	@ (8004970 <plotter_begin+0x354>)
 8004756:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	f7fc f971 	bl	8000a44 <__aeabi_d2f>
 8004762:	4603      	mov	r3, r0
 8004764:	ee03 3a10 	vmov	s6, r3
 8004768:	eef0 2a48 	vmov.f32	s5, s16
 800476c:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8004958 <plotter_begin+0x33c>
 8004770:	eddf 1a79 	vldr	s3, [pc, #484]	@ 8004958 <plotter_begin+0x33c>
 8004774:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004778:	eddf 0a78 	vldr	s1, [pc, #480]	@ 800495c <plotter_begin+0x340>
 800477c:	ee00 4a10 	vmov	s0, r4
 8004780:	487c      	ldr	r0, [pc, #496]	@ (8004974 <plotter_begin+0x358>)
 8004782:	f000 fb6c 	bl	8004e5e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8004786:	2100      	movs	r1, #0
 8004788:	487b      	ldr	r0, [pc, #492]	@ (8004978 <plotter_begin+0x35c>)
 800478a:	f000 fadf 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800478e:	4b7b      	ldr	r3, [pc, #492]	@ (800497c <plotter_begin+0x360>)
 8004790:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f7fc f954 	bl	8000a44 <__aeabi_d2f>
 800479c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800479e:	4b77      	ldr	r3, [pc, #476]	@ (800497c <plotter_begin+0x360>)
 80047a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7fc f94c 	bl	8000a44 <__aeabi_d2f>
 80047ac:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80047b6:	4b71      	ldr	r3, [pc, #452]	@ (800497c <plotter_begin+0x360>)
 80047b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	f7fc f940 	bl	8000a44 <__aeabi_d2f>
 80047c4:	4603      	mov	r3, r0
 80047c6:	ee02 3a90 	vmov	s5, r3
 80047ca:	eeb0 2a48 	vmov.f32	s4, s16
 80047ce:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8004958 <plotter_begin+0x33c>
 80047d2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8004958 <plotter_begin+0x33c>
 80047d6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 800495c <plotter_begin+0x340>
 80047da:	ee00 4a10 	vmov	s0, r4
 80047de:	4866      	ldr	r0, [pc, #408]	@ (8004978 <plotter_begin+0x35c>)
 80047e0:	f000 fb12 	bl	8004e08 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80047e4:	2102      	movs	r1, #2
 80047e6:	4866      	ldr	r0, [pc, #408]	@ (8004980 <plotter_begin+0x364>)
 80047e8:	f000 fab0 	bl	8004d4c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80047ec:	4b63      	ldr	r3, [pc, #396]	@ (800497c <plotter_begin+0x360>)
 80047ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7fc f925 	bl	8000a44 <__aeabi_d2f>
 80047fa:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80047fc:	4b5f      	ldr	r3, [pc, #380]	@ (800497c <plotter_begin+0x360>)
 80047fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	f7fc f91d 	bl	8000a44 <__aeabi_d2f>
 800480a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004814:	4b59      	ldr	r3, [pc, #356]	@ (800497c <plotter_begin+0x360>)
 8004816:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f7fc f911 	bl	8000a44 <__aeabi_d2f>
 8004822:	4603      	mov	r3, r0
 8004824:	ee03 3a10 	vmov	s6, r3
 8004828:	eef0 2a48 	vmov.f32	s5, s16
 800482c:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8004958 <plotter_begin+0x33c>
 8004830:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8004958 <plotter_begin+0x33c>
 8004834:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004838:	eddf 0a48 	vldr	s1, [pc, #288]	@ 800495c <plotter_begin+0x340>
 800483c:	ee00 4a10 	vmov	s0, r4
 8004840:	484f      	ldr	r0, [pc, #316]	@ (8004980 <plotter_begin+0x364>)
 8004842:	f000 fb0c 	bl	8004e5e <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004846:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <plotter_begin+0x354>)
 8004848:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 800484c:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <plotter_begin+0x368>)
 800484e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004852:	f7fb fe9d 	bl	8000590 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800485a:	4945      	ldr	r1, [pc, #276]	@ (8004970 <plotter_begin+0x354>)
 800485c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8004860:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <plotter_begin+0x354>)
 8004862:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <plotter_begin+0x36c>)
 800486c:	f7fb fe90 	bl	8000590 <__aeabi_dmul>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	493e      	ldr	r1, [pc, #248]	@ (8004970 <plotter_begin+0x354>)
 8004876:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 800487a:	4b42      	ldr	r3, [pc, #264]	@ (8004984 <plotter_begin+0x368>)
 800487c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	f7fb fcce 	bl	8000224 <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f7fc f8d8 	bl	8000a44 <__aeabi_d2f>
 8004894:	4603      	mov	r3, r0
 8004896:	ee00 3a90 	vmov	s1, r3
 800489a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800489e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048a6:	4939      	ldr	r1, [pc, #228]	@ (800498c <plotter_begin+0x370>)
 80048a8:	4839      	ldr	r0, [pc, #228]	@ (8004990 <plotter_begin+0x374>)
 80048aa:	f7fe fbcf 	bl	800304c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80048ae:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004958 <plotter_begin+0x33c>
 80048b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80048b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048be:	4935      	ldr	r1, [pc, #212]	@ (8004994 <plotter_begin+0x378>)
 80048c0:	4835      	ldr	r0, [pc, #212]	@ (8004998 <plotter_begin+0x37c>)
 80048c2:	f7fe fbc3 	bl	800304c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80048c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048d0:	2204      	movs	r2, #4
 80048d2:	4932      	ldr	r1, [pc, #200]	@ (800499c <plotter_begin+0x380>)
 80048d4:	4832      	ldr	r0, [pc, #200]	@ (80049a0 <plotter_begin+0x384>)
 80048d6:	f7fc fc3e 	bl	8001156 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80048da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	4b30      	ldr	r3, [pc, #192]	@ (80049a4 <plotter_begin+0x388>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	492d      	ldr	r1, [pc, #180]	@ (800499c <plotter_begin+0x380>)
 80048e6:	4830      	ldr	r0, [pc, #192]	@ (80049a8 <plotter_begin+0x38c>)
 80048e8:	f7fc fc35 	bl	8001156 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80048ec:	220c      	movs	r2, #12
 80048ee:	492f      	ldr	r1, [pc, #188]	@ (80049ac <plotter_begin+0x390>)
 80048f0:	482f      	ldr	r0, [pc, #188]	@ (80049b0 <plotter_begin+0x394>)
 80048f2:	f7fe f97d 	bl	8002bf0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80048f6:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004958 <plotter_begin+0x33c>
 80048fa:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80049b4 <plotter_begin+0x398>
 80048fe:	4828      	ldr	r0, [pc, #160]	@ (80049a0 <plotter_begin+0x384>)
 8004900:	f7fc fc4e 	bl	80011a0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8004904:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8004958 <plotter_begin+0x33c>
 8004908:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80049b4 <plotter_begin+0x398>
 800490c:	4826      	ldr	r0, [pc, #152]	@ (80049a8 <plotter_begin+0x38c>)
 800490e:	f7fc fc47 	bl	80011a0 <MDXX_set_range>
	plotter_pen_up();
 8004912:	f000 fa0b 	bl	8004d2c <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
			ZGX45RGG_400RPM_Constant.qd_max);
 8004916:	4b16      	ldr	r3, [pc, #88]	@ (8004970 <plotter_begin+0x354>)
 8004918:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	f7fc f890 	bl	8000a44 <__aeabi_d2f>
 8004924:	4603      	mov	r3, r0
 8004926:	ee01 3a90 	vmov	s3, r3
 800492a:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80049b8 <plotter_begin+0x39c>
 800492e:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8004932:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80049c4 <plotter_begin+0x3a8>
 8004936:	4821      	ldr	r0, [pc, #132]	@ (80049bc <plotter_begin+0x3a0>)
 8004938:	f7fc fb51 	bl	8000fde <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <plotter_begin+0x354>)
 800493e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	f7fc f87d 	bl	8000a44 <__aeabi_d2f>
 800494a:	e03d      	b.n	80049c8 <plotter_begin+0x3ac>
 800494c:	2000089c 	.word	0x2000089c
 8004950:	477fff00 	.word	0x477fff00
 8004954:	c77fff00 	.word	0xc77fff00
 8004958:	00000000 	.word	0x00000000
 800495c:	3dcccccd 	.word	0x3dcccccd
 8004960:	200008e0 	.word	0x200008e0
 8004964:	20000924 	.word	0x20000924
 8004968:	20000968 	.word	0x20000968
 800496c:	200009ac 	.word	0x200009ac
 8004970:	20000060 	.word	0x20000060
 8004974:	200009f0 	.word	0x200009f0
 8004978:	20000a34 	.word	0x20000a34
 800497c:	20000000 	.word	0x20000000
 8004980:	20000a78 	.word	0x20000a78
 8004984:	200000c0 	.word	0x200000c0
 8004988:	3fe00000 	.word	0x3fe00000
 800498c:	20001b3c 	.word	0x20001b3c
 8004990:	2000072c 	.word	0x2000072c
 8004994:	20001a70 	.word	0x20001a70
 8004998:	20000788 	.word	0x20000788
 800499c:	20001cd4 	.word	0x20001cd4
 80049a0:	20000694 	.word	0x20000694
 80049a4:	48000800 	.word	0x48000800
 80049a8:	200006e0 	.word	0x200006e0
 80049ac:	200018d8 	.word	0x200018d8
 80049b0:	2000086c 	.word	0x2000086c
 80049b4:	44fa0000 	.word	0x44fa0000
 80049b8:	428c0000 	.word	0x428c0000
 80049bc:	200007e4 	.word	0x200007e4
 80049c0:	00000000 	.word	0x00000000
 80049c4:	43fa0000 	.word	0x43fa0000
 80049c8:	4603      	mov	r3, r0
 80049ca:	ee01 3a90 	vmov	s3, r3
 80049ce:	ed1f 1a04 	vldr	s2, [pc, #-16]	@ 80049c0 <plotter_begin+0x3a4>
 80049d2:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80049d6:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 80049c4 <plotter_begin+0x3a8>
 80049da:	4847      	ldr	r0, [pc, #284]	@ (8004af8 <plotter_begin+0x4dc>)
 80049dc:	f7fc faff 	bl	8000fde <PID_CONTROLLER_Init>

	//unit test
	//25 1e-8 0
	//2000 80 0
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
			ZGX45RGG_150RPM_Constant.qd_max);
 80049e0:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <plotter_begin+0x4e0>)
 80049e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	f7fc f82b 	bl	8000a44 <__aeabi_d2f>
 80049ee:	4603      	mov	r3, r0
 80049f0:	ee01 3a90 	vmov	s3, r3
 80049f4:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8004b00 <plotter_begin+0x4e4>
 80049f8:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8004b04 <plotter_begin+0x4e8>
 80049fc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004a00:	4841      	ldr	r0, [pc, #260]	@ (8004b08 <plotter_begin+0x4ec>)
 8004a02:	f7fc faec 	bl	8000fde <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8004a06:	4b3d      	ldr	r3, [pc, #244]	@ (8004afc <plotter_begin+0x4e0>)
 8004a08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7fc f818 	bl	8000a44 <__aeabi_d2f>
 8004a14:	4603      	mov	r3, r0
 8004a16:	ee01 3a90 	vmov	s3, r3
 8004a1a:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8004b00 <plotter_begin+0x4e4>
 8004a1e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8004b0c <plotter_begin+0x4f0>
 8004a22:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8004b10 <plotter_begin+0x4f4>
 8004a26:	483b      	ldr	r0, [pc, #236]	@ (8004b14 <plotter_begin+0x4f8>)
 8004a28:	f7fc fad9 	bl	8000fde <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8004a2c:	4933      	ldr	r1, [pc, #204]	@ (8004afc <plotter_begin+0x4e0>)
 8004a2e:	483a      	ldr	r0, [pc, #232]	@ (8004b18 <plotter_begin+0x4fc>)
 8004a30:	f7fc fc90 	bl	8001354 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8004a34:	4939      	ldr	r1, [pc, #228]	@ (8004b1c <plotter_begin+0x500>)
 8004a36:	483a      	ldr	r0, [pc, #232]	@ (8004b20 <plotter_begin+0x504>)
 8004a38:	f7fc fcac 	bl	8001394 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8004a3c:	4a39      	ldr	r2, [pc, #228]	@ (8004b24 <plotter_begin+0x508>)
 8004a3e:	492f      	ldr	r1, [pc, #188]	@ (8004afc <plotter_begin+0x4e0>)
 8004a40:	4839      	ldr	r0, [pc, #228]	@ (8004b28 <plotter_begin+0x50c>)
 8004a42:	f7fc fc95 	bl	8001370 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8004a46:	4a37      	ldr	r2, [pc, #220]	@ (8004b24 <plotter_begin+0x508>)
 8004a48:	4934      	ldr	r1, [pc, #208]	@ (8004b1c <plotter_begin+0x500>)
 8004a4a:	4838      	ldr	r0, [pc, #224]	@ (8004b2c <plotter_begin+0x510>)
 8004a4c:	f7fc fcb0 	bl	80013b0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8004a50:	2304      	movs	r3, #4
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8004b30 <plotter_begin+0x514>
 8004a58:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8004b34 <plotter_begin+0x518>
 8004a5c:	2328      	movs	r3, #40	@ 0x28
 8004a5e:	4a36      	ldr	r2, [pc, #216]	@ (8004b38 <plotter_begin+0x51c>)
 8004a60:	4936      	ldr	r1, [pc, #216]	@ (8004b3c <plotter_begin+0x520>)
 8004a62:	4837      	ldr	r0, [pc, #220]	@ (8004b40 <plotter_begin+0x524>)
 8004a64:	f7fc f9d4 	bl	8000e10 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8004a68:	4835      	ldr	r0, [pc, #212]	@ (8004b40 <plotter_begin+0x524>)
 8004a6a:	f7fc fa06 	bl	8000e7a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004a6e:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8004b44 <plotter_begin+0x528>
 8004a72:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004a76:	211f      	movs	r1, #31
 8004a78:	4833      	ldr	r0, [pc, #204]	@ (8004b48 <plotter_begin+0x52c>)
 8004a7a:	f7fc fcab 	bl	80013d4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004a7e:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8004b44 <plotter_begin+0x528>
 8004a82:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004a86:	211f      	movs	r1, #31
 8004a88:	4830      	ldr	r0, [pc, #192]	@ (8004b4c <plotter_begin+0x530>)
 8004a8a:	f7fc fca3 	bl	80013d4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004a8e:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8004b44 <plotter_begin+0x528>
 8004a92:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004a96:	211f      	movs	r1, #31
 8004a98:	482d      	ldr	r0, [pc, #180]	@ (8004b50 <plotter_begin+0x534>)
 8004a9a:	f7fc fc9b 	bl	80013d4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004a9e:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8004b44 <plotter_begin+0x528>
 8004aa2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004aa6:	211f      	movs	r1, #31
 8004aa8:	482a      	ldr	r0, [pc, #168]	@ (8004b54 <plotter_begin+0x538>)
 8004aaa:	f7fc fc93 	bl	80013d4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8004aae:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004b58 <plotter_begin+0x53c>
 8004ab2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ab6:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <plotter_begin+0x540>)
 8004ab8:	4929      	ldr	r1, [pc, #164]	@ (8004b60 <plotter_begin+0x544>)
 8004aba:	482a      	ldr	r0, [pc, #168]	@ (8004b64 <plotter_begin+0x548>)
 8004abc:	f7ff f964 	bl	8003d88 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8004ac0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8004b58 <plotter_begin+0x53c>
 8004ac4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ac8:	4a27      	ldr	r2, [pc, #156]	@ (8004b68 <plotter_begin+0x54c>)
 8004aca:	4928      	ldr	r1, [pc, #160]	@ (8004b6c <plotter_begin+0x550>)
 8004acc:	4828      	ldr	r0, [pc, #160]	@ (8004b70 <plotter_begin+0x554>)
 8004ace:	f7ff f95b 	bl	8003d88 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8004ad2:	23c8      	movs	r3, #200	@ 0xc8
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2315      	movs	r3, #21
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	4b26      	ldr	r3, [pc, #152]	@ (8004b74 <plotter_begin+0x558>)
 8004adc:	4a26      	ldr	r2, [pc, #152]	@ (8004b78 <plotter_begin+0x55c>)
 8004ade:	4927      	ldr	r1, [pc, #156]	@ (8004b7c <plotter_begin+0x560>)
 8004ae0:	4827      	ldr	r0, [pc, #156]	@ (8004b80 <plotter_begin+0x564>)
 8004ae2:	f7fc fe0f 	bl	8001704 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8004ae6:	4827      	ldr	r0, [pc, #156]	@ (8004b84 <plotter_begin+0x568>)
 8004ae8:	f004 fd7a 	bl	80095e0 <HAL_TIM_Base_Start_IT>
}
 8004aec:	bf00      	nop
 8004aee:	3704      	adds	r7, #4
 8004af0:	46bd      	mov	sp, r7
 8004af2:	ecbd 8b02 	vpop	{d8}
 8004af6:	bd90      	pop	{r4, r7, pc}
 8004af8:	20000800 	.word	0x20000800
 8004afc:	20000000 	.word	0x20000000
 8004b00:	00000000 	.word	0x00000000
 8004b04:	3089705f 	.word	0x3089705f
 8004b08:	2000081c 	.word	0x2000081c
 8004b0c:	42a00000 	.word	0x42a00000
 8004b10:	44fa0000 	.word	0x44fa0000
 8004b14:	20000838 	.word	0x20000838
 8004b18:	20000860 	.word	0x20000860
 8004b1c:	20000060 	.word	0x20000060
 8004b20:	20000854 	.word	0x20000854
 8004b24:	200000c0 	.word	0x200000c0
 8004b28:	20000864 	.word	0x20000864
 8004b2c:	20000858 	.word	0x20000858
 8004b30:	457ff000 	.word	0x457ff000
 8004b34:	40533333 	.word	0x40533333
 8004b38:	200011ec 	.word	0x200011ec
 8004b3c:	20000208 	.word	0x20000208
 8004b40:	20000884 	.word	0x20000884
 8004b44:	447a0000 	.word	0x447a0000
 8004b48:	20000ac8 	.word	0x20000ac8
 8004b4c:	20000abc 	.word	0x20000abc
 8004b50:	20000ae0 	.word	0x20000ae0
 8004b54:	20000ad4 	.word	0x20000ad4
 8004b58:	3d4ccccd 	.word	0x3d4ccccd
 8004b5c:	2000017c 	.word	0x2000017c
 8004b60:	2000013c 	.word	0x2000013c
 8004b64:	20000e6c 	.word	0x20000e6c
 8004b68:	2000012c 	.word	0x2000012c
 8004b6c:	200000ec 	.word	0x200000ec
 8004b70:	20000aec 	.word	0x20000aec
 8004b74:	20001714 	.word	0x20001714
 8004b78:	20001da0 	.word	0x20001da0
 8004b7c:	20001f38 	.word	0x20001f38
 8004b80:	2000123c 	.word	0x2000123c
 8004b84:	200019a4 	.word	0x200019a4

08004b88 <plotter_update_sensors>:
void plotter_reset() {
	QEI_reset(&prismatic_encoder);
	QEI_reset(&revolute_encoder);
}

void plotter_update_sensors() {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8004b8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004b90:	2106      	movs	r1, #6
 8004b92:	4854      	ldr	r0, [pc, #336]	@ (8004ce4 <plotter_update_sensors+0x15c>)
 8004b94:	f7fc f9cc 	bl	8000f30 <ADC_DMA_GetJoystick>
 8004b98:	eef0 7a40 	vmov.f32	s15, s0
 8004b9c:	4b52      	ldr	r3, [pc, #328]	@ (8004ce8 <plotter_update_sensors+0x160>)
 8004b9e:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8004ba2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ba6:	2107      	movs	r1, #7
 8004ba8:	484e      	ldr	r0, [pc, #312]	@ (8004ce4 <plotter_update_sensors+0x15c>)
 8004baa:	f7fc f9c1 	bl	8000f30 <ADC_DMA_GetJoystick>
 8004bae:	eef0 7a40 	vmov.f32	s15, s0
 8004bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8004cec <plotter_update_sensors+0x164>)
 8004bb4:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8004bb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004bbc:	484c      	ldr	r0, [pc, #304]	@ (8004cf0 <plotter_update_sensors+0x168>)
 8004bbe:	f003 fbc3 	bl	8008348 <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <plotter_update_sensors+0x16c>)
 8004bd2:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8004bd4:	2180      	movs	r1, #128	@ 0x80
 8004bd6:	4848      	ldr	r0, [pc, #288]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004bd8:	f003 fbb6 	bl	8008348 <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b44      	ldr	r3, [pc, #272]	@ (8004cfc <plotter_update_sensors+0x174>)
 8004bec:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8004bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bf2:	483f      	ldr	r0, [pc, #252]	@ (8004cf0 <plotter_update_sensors+0x168>)
 8004bf4:	f003 fba8 	bl	8008348 <HAL_GPIO_ReadPin>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b3e      	ldr	r3, [pc, #248]	@ (8004d00 <plotter_update_sensors+0x178>)
 8004c08:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8004c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c0e:	4838      	ldr	r0, [pc, #224]	@ (8004cf0 <plotter_update_sensors+0x168>)
 8004c10:	f003 fb9a 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b38      	ldr	r3, [pc, #224]	@ (8004d04 <plotter_update_sensors+0x17c>)
 8004c24:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8004c26:	2120      	movs	r1, #32
 8004c28:	4833      	ldr	r0, [pc, #204]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004c2a:	f003 fb8d 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b35      	ldr	r3, [pc, #212]	@ (8004d08 <plotter_update_sensors+0x180>)
 8004c34:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8004c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c3a:	482f      	ldr	r0, [pc, #188]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004c3c:	f003 fb84 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	4b31      	ldr	r3, [pc, #196]	@ (8004d0c <plotter_update_sensors+0x184>)
 8004c46:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8004c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c50:	f003 fb7a 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b2d      	ldr	r3, [pc, #180]	@ (8004d10 <plotter_update_sensors+0x188>)
 8004c5a:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	4826      	ldr	r0, [pc, #152]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004c60:	f003 fb72 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <plotter_update_sensors+0x18c>)
 8004c6a:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	4822      	ldr	r0, [pc, #136]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004c70:	f003 fb6a 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <plotter_update_sensors+0x190>)
 8004c7a:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	481e      	ldr	r0, [pc, #120]	@ (8004cf8 <plotter_update_sensors+0x170>)
 8004c80:	f003 fb62 	bl	8008348 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b24      	ldr	r3, [pc, #144]	@ (8004d1c <plotter_update_sensors+0x194>)
 8004c8a:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8004c8c:	4b21      	ldr	r3, [pc, #132]	@ (8004d14 <plotter_update_sensors+0x18c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <plotter_update_sensors+0x114>
		servo_state = PEN_UP;
 8004c94:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <plotter_update_sensors+0x198>)
 8004c96:	2202      	movs	r2, #2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e00a      	b.n	8004cb2 <plotter_update_sensors+0x12a>
	} else if (low_lim) {
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <plotter_update_sensors+0x190>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <plotter_update_sensors+0x124>
		servo_state = PEN_DOWN;
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <plotter_update_sensors+0x198>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <plotter_update_sensors+0x12a>
	} else {
		servo_state = PEN_IDLE;
 8004cac:	4b1c      	ldr	r3, [pc, #112]	@ (8004d20 <plotter_update_sensors+0x198>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8004cb2:	4b16      	ldr	r3, [pc, #88]	@ (8004d0c <plotter_update_sensors+0x184>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <plotter_update_sensors+0x13a>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <plotter_update_sensors+0x19c>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e006      	b.n	8004cd0 <plotter_update_sensors+0x148>
	} else if (low_photo) {
 8004cc2:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <plotter_update_sensors+0x188>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <plotter_update_sensors+0x148>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8004cca:	4b16      	ldr	r3, [pc, #88]	@ (8004d24 <plotter_update_sensors+0x19c>)
 8004ccc:	2202      	movs	r2, #2
 8004cce:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <plotter_update_sensors+0x180>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <plotter_update_sensors+0x156>
		revolute_state = RP_AT_HOME_POSITION;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	@ (8004d28 <plotter_update_sensors+0x1a0>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000884 	.word	0x20000884
 8004ce8:	200018a4 	.word	0x200018a4
 8004cec:	200018a8 	.word	0x200018a8
 8004cf0:	48000800 	.word	0x48000800
 8004cf4:	200018ac 	.word	0x200018ac
 8004cf8:	48000400 	.word	0x48000400
 8004cfc:	200018b0 	.word	0x200018b0
 8004d00:	200018b4 	.word	0x200018b4
 8004d04:	200018b8 	.word	0x200018b8
 8004d08:	200018bc 	.word	0x200018bc
 8004d0c:	200018c4 	.word	0x200018c4
 8004d10:	200018c8 	.word	0x200018c8
 8004d14:	200018cc 	.word	0x200018cc
 8004d18:	200018d0 	.word	0x200018d0
 8004d1c:	200018c0 	.word	0x200018c0
 8004d20:	20000692 	.word	0x20000692
 8004d24:	200000e9 	.word	0x200000e9
 8004d28:	200000ea 	.word	0x200000ea

08004d2c <plotter_pen_up>:

void plotter_pen_up() {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8004d30:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8004d34:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8004d44 <plotter_pen_up+0x18>
 8004d38:	4803      	ldr	r0, [pc, #12]	@ (8004d48 <plotter_pen_up+0x1c>)
 8004d3a:	f7fd ff7b 	bl	8002c34 <PWM_write_duty>
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	42480000 	.word	0x42480000
 8004d48:	2000086c 	.word	0x2000086c

08004d4c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004d64:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004d6c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1b      	ldr	r2, [pc, #108]	@ (8004e00 <SIGNAL_init+0xb4>)
 8004d92:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d828      	bhi.n	8004df4 <SIGNAL_init+0xa8>
 8004da2:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <SIGNAL_init+0x5c>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004df3 	.word	0x08004df3
 8004dac:	08004db9 	.word	0x08004db9
 8004db0:	08004dd7 	.word	0x08004dd7
 8004db4:	08004de1 	.word	0x08004de1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004dc4:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e04 <SIGNAL_init+0xb8>)
 8004dca:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004dd2:	621a      	str	r2, [r3, #32]
            break;
 8004dd4:	e00e      	b.n	8004df4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8004ddc:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8004dde:	e009      	b.n	8004df4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8004df0:	e000      	b.n	8004df4 <SIGNAL_init+0xa8>
            break;
 8004df2:	bf00      	nop
    }
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	bf800000 	.word	0xbf800000
 8004e04:	41200000 	.word	0x41200000

08004e08 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	@ 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	61f8      	str	r0, [r7, #28]
 8004e10:	ed87 0a06 	vstr	s0, [r7, #24]
 8004e14:	edc7 0a05 	vstr	s1, [r7, #20]
 8004e18:	ed87 1a04 	vstr	s2, [r7, #16]
 8004e1c:	edc7 1a03 	vstr	s3, [r7, #12]
 8004e20:	ed87 2a02 	vstr	s4, [r7, #8]
 8004e24:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004e52:	bf00      	nop
 8004e54:	3724      	adds	r7, #36	@ 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8004e5e:	b480      	push	{r7}
 8004e60:	b089      	sub	sp, #36	@ 0x24
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	61f8      	str	r0, [r7, #28]
 8004e66:	ed87 0a06 	vstr	s0, [r7, #24]
 8004e6a:	edc7 0a05 	vstr	s1, [r7, #20]
 8004e6e:	ed87 1a04 	vstr	s2, [r7, #16]
 8004e72:	edc7 1a03 	vstr	s3, [r7, #12]
 8004e76:	ed87 2a02 	vstr	s4, [r7, #8]
 8004e7a:	edc7 2a01 	vstr	s5, [r7, #4]
 8004e7e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2202      	movs	r2, #2
 8004e86:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004eb2:	bf00      	nop
 8004eb4:	3724      	adds	r7, #36	@ 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f04 <HAL_MspInit+0x44>)
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eca:	4a0e      	ldr	r2, [pc, #56]	@ (8004f04 <HAL_MspInit+0x44>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <HAL_MspInit+0x44>)
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <HAL_MspInit+0x44>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee2:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <HAL_MspInit+0x44>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_MspInit+0x44>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004ef6:	f003 fb13 	bl	8008520 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000

08004f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <NMI_Handler+0x4>

08004f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <HardFault_Handler+0x4>

08004f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <MemManage_Handler+0x4>

08004f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <BusFault_Handler+0x4>

08004f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <UsageFault_Handler+0x4>

08004f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f5e:	f000 ff99 	bl	8005e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f6c:	4802      	ldr	r0, [pc, #8]	@ (8004f78 <DMA1_Channel1_IRQHandler+0x10>)
 8004f6e:	f002 ff1a 	bl	8007da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000274 	.word	0x20000274

08004f7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f80:	4802      	ldr	r0, [pc, #8]	@ (8004f8c <DMA1_Channel2_IRQHandler+0x10>)
 8004f82:	f002 ff10 	bl	8007da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200020c4 	.word	0x200020c4

08004f90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f94:	4802      	ldr	r0, [pc, #8]	@ (8004fa0 <DMA1_Channel3_IRQHandler+0x10>)
 8004f96:	f002 ff06 	bl	8007da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20002124 	.word	0x20002124

08004fa4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004fa8:	4802      	ldr	r0, [pc, #8]	@ (8004fb4 <DMA1_Channel4_IRQHandler+0x10>)
 8004faa:	f002 fefc 	bl	8007da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20002004 	.word	0x20002004

08004fb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004fbc:	4802      	ldr	r0, [pc, #8]	@ (8004fc8 <DMA1_Channel5_IRQHandler+0x10>)
 8004fbe:	f002 fef2 	bl	8007da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20002064 	.word	0x20002064

08004fcc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fd0:	4803      	ldr	r0, [pc, #12]	@ (8004fe0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004fd2:	f004 ff2b 	bl	8009e2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004fd6:	4803      	ldr	r0, [pc, #12]	@ (8004fe4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004fd8:	f004 ff28 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200018d8 	.word	0x200018d8
 8004fe4:	20001da0 	.word	0x20001da0

08004fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fec:	4802      	ldr	r0, [pc, #8]	@ (8004ff8 <TIM2_IRQHandler+0x10>)
 8004fee:	f004 ff1d 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200019a4 	.word	0x200019a4

08004ffc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005000:	4802      	ldr	r0, [pc, #8]	@ (800500c <TIM3_IRQHandler+0x10>)
 8005002:	f004 ff13 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20001a70 	.word	0x20001a70

08005010 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005014:	4802      	ldr	r0, [pc, #8]	@ (8005020 <TIM4_IRQHandler+0x10>)
 8005016:	f004 ff09 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20001b3c 	.word	0x20001b3c

08005024 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005028:	4802      	ldr	r0, [pc, #8]	@ (8005034 <USART2_IRQHandler+0x10>)
 800502a:	f006 fc53 	bl	800b8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20001f38 	.word	0x20001f38

08005038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800503c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005040:	f003 f9b2 	bl	80083a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}

08005048 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800504c:	4802      	ldr	r0, [pc, #8]	@ (8005058 <LPUART1_IRQHandler+0x10>)
 800504e:	f006 fc41 	bl	800b8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20001e6c 	.word	0x20001e6c

0800505c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005064:	4a14      	ldr	r2, [pc, #80]	@ (80050b8 <_sbrk+0x5c>)
 8005066:	4b15      	ldr	r3, [pc, #84]	@ (80050bc <_sbrk+0x60>)
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <_sbrk+0x64>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005078:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <_sbrk+0x64>)
 800507a:	4a12      	ldr	r2, [pc, #72]	@ (80050c4 <_sbrk+0x68>)
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800507e:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <_sbrk+0x64>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d207      	bcs.n	800509c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800508c:	f008 fab4 	bl	800d5f8 <__errno>
 8005090:	4603      	mov	r3, r0
 8005092:	220c      	movs	r2, #12
 8005094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	e009      	b.n	80050b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800509c:	4b08      	ldr	r3, [pc, #32]	@ (80050c0 <_sbrk+0x64>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a2:	4b07      	ldr	r3, [pc, #28]	@ (80050c0 <_sbrk+0x64>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	4a05      	ldr	r2, [pc, #20]	@ (80050c0 <_sbrk+0x64>)
 80050ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20020000 	.word	0x20020000
 80050bc:	00000400 	.word	0x00000400
 80050c0:	200018d4 	.word	0x200018d4
 80050c4:	200022d0 	.word	0x200022d0

080050c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050cc:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <SystemInit+0x20>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d2:	4a05      	ldr	r2, [pc, #20]	@ (80050e8 <SystemInit+0x20>)
 80050d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b098      	sub	sp, #96	@ 0x60
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	60da      	str	r2, [r3, #12]
 800510c:	611a      	str	r2, [r3, #16]
 800510e:	615a      	str	r2, [r3, #20]
 8005110:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	2234      	movs	r2, #52	@ 0x34
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f008 fa55 	bl	800d5c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800511e:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <MX_TIM1_Init+0x120>)
 8005120:	4a3b      	ldr	r2, [pc, #236]	@ (8005210 <MX_TIM1_Init+0x124>)
 8005122:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005124:	4b39      	ldr	r3, [pc, #228]	@ (800520c <MX_TIM1_Init+0x120>)
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800512a:	4b38      	ldr	r3, [pc, #224]	@ (800520c <MX_TIM1_Init+0x120>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005130:	4b36      	ldr	r3, [pc, #216]	@ (800520c <MX_TIM1_Init+0x120>)
 8005132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005136:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005138:	4b34      	ldr	r3, [pc, #208]	@ (800520c <MX_TIM1_Init+0x120>)
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800513e:	4b33      	ldr	r3, [pc, #204]	@ (800520c <MX_TIM1_Init+0x120>)
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005144:	4b31      	ldr	r3, [pc, #196]	@ (800520c <MX_TIM1_Init+0x120>)
 8005146:	2200      	movs	r2, #0
 8005148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800514a:	4830      	ldr	r0, [pc, #192]	@ (800520c <MX_TIM1_Init+0x120>)
 800514c:	f004 fac0 	bl	80096d0 <HAL_TIM_PWM_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005156:	f7ff fa5b 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005162:	2300      	movs	r3, #0
 8005164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005166:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800516a:	4619      	mov	r1, r3
 800516c:	4827      	ldr	r0, [pc, #156]	@ (800520c <MX_TIM1_Init+0x120>)
 800516e:	f006 f8d1 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005178:	f7ff fa4a 	bl	8004610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800517c:	2360      	movs	r3, #96	@ 0x60
 800517e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005184:	2300      	movs	r3, #0
 8005186:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005188:	2300      	movs	r3, #0
 800518a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800518c:	2300      	movs	r3, #0
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005190:	2300      	movs	r3, #0
 8005192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005198:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800519c:	220c      	movs	r2, #12
 800519e:	4619      	mov	r1, r3
 80051a0:	481a      	ldr	r0, [pc, #104]	@ (800520c <MX_TIM1_Init+0x120>)
 80051a2:	f004 ffbd 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80051ac:	f7ff fa30 	bl	8004610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80051ce:	2300      	movs	r3, #0
 80051d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80051d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80051e0:	2300      	movs	r3, #0
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4807      	ldr	r0, [pc, #28]	@ (800520c <MX_TIM1_Init+0x120>)
 80051ee:	f006 f927 	bl	800b440 <HAL_TIMEx_ConfigBreakDeadTime>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80051f8:	f7ff fa0a 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051fc:	4803      	ldr	r0, [pc, #12]	@ (800520c <MX_TIM1_Init+0x120>)
 80051fe:	f000 fb5b 	bl	80058b8 <HAL_TIM_MspPostInit>

}
 8005202:	bf00      	nop
 8005204:	3760      	adds	r7, #96	@ 0x60
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	200018d8 	.word	0x200018d8
 8005210:	40012c00 	.word	0x40012c00

08005214 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800521a:	f107 0310 	add.w	r3, r7, #16
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005232:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800523a:	4b1c      	ldr	r3, [pc, #112]	@ (80052ac <MX_TIM2_Init+0x98>)
 800523c:	22a9      	movs	r2, #169	@ 0xa9
 800523e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005246:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005248:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800524c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800524e:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005254:	4b15      	ldr	r3, [pc, #84]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005256:	2200      	movs	r2, #0
 8005258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800525a:	4814      	ldr	r0, [pc, #80]	@ (80052ac <MX_TIM2_Init+0x98>)
 800525c:	f004 f8ec 	bl	8009438 <HAL_TIM_Base_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005266:	f7ff f9d3 	bl	8004610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800526a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800526e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	4619      	mov	r1, r3
 8005276:	480d      	ldr	r0, [pc, #52]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005278:	f005 f866 	bl	800a348 <HAL_TIM_ConfigClockSource>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005282:	f7ff f9c5 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4806      	ldr	r0, [pc, #24]	@ (80052ac <MX_TIM2_Init+0x98>)
 8005294:	f006 f83e 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800529e:	f7ff f9b7 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052a2:	bf00      	nop
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200019a4 	.word	0x200019a4

080052b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	2224      	movs	r2, #36	@ 0x24
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f008 f982 	bl	800d5c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052c4:	463b      	mov	r3, r7
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052ce:	4b21      	ldr	r3, [pc, #132]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052d0:	4a21      	ldr	r2, [pc, #132]	@ (8005358 <MX_TIM3_Init+0xa8>)
 80052d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80052d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80052e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ee:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <MX_TIM3_Init+0xa4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052f4:	2303      	movs	r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005308:	2300      	movs	r3, #0
 800530a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800530c:	2301      	movs	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005310:	2300      	movs	r3, #0
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005318:	f107 030c 	add.w	r3, r7, #12
 800531c:	4619      	mov	r1, r3
 800531e:	480d      	ldr	r0, [pc, #52]	@ (8005354 <MX_TIM3_Init+0xa4>)
 8005320:	f004 fc42 	bl	8009ba8 <HAL_TIM_Encoder_Init>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800532a:	f7ff f971 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005336:	463b      	mov	r3, r7
 8005338:	4619      	mov	r1, r3
 800533a:	4806      	ldr	r0, [pc, #24]	@ (8005354 <MX_TIM3_Init+0xa4>)
 800533c:	f005 ffea 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005346:	f7ff f963 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800534a:	bf00      	nop
 800534c:	3730      	adds	r7, #48	@ 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20001a70 	.word	0x20001a70
 8005358:	40000400 	.word	0x40000400

0800535c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	2224      	movs	r2, #36	@ 0x24
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f008 f92c 	bl	800d5c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005370:	463b      	mov	r3, r7
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800537a:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <MX_TIM4_Init+0xa4>)
 800537c:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <MX_TIM4_Init+0xa8>)
 800537e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005380:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <MX_TIM4_Init+0xa4>)
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005386:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <MX_TIM4_Init+0xa4>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800538c:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <MX_TIM4_Init+0xa4>)
 800538e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005392:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <MX_TIM4_Init+0xa4>)
 8005396:	2200      	movs	r2, #0
 8005398:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800539a:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <MX_TIM4_Init+0xa4>)
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80053a0:	2303      	movs	r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80053b4:	2300      	movs	r3, #0
 80053b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80053b8:	2301      	movs	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80053bc:	2300      	movs	r3, #0
 80053be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4619      	mov	r1, r3
 80053ca:	480d      	ldr	r0, [pc, #52]	@ (8005400 <MX_TIM4_Init+0xa4>)
 80053cc:	f004 fbec 	bl	8009ba8 <HAL_TIM_Encoder_Init>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80053d6:	f7ff f91b 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053da:	2300      	movs	r3, #0
 80053dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80053e2:	463b      	mov	r3, r7
 80053e4:	4619      	mov	r1, r3
 80053e6:	4806      	ldr	r0, [pc, #24]	@ (8005400 <MX_TIM4_Init+0xa4>)
 80053e8:	f005 ff94 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80053f2:	f7ff f90d 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80053f6:	bf00      	nop
 80053f8:	3730      	adds	r7, #48	@ 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20001b3c 	.word	0x20001b3c
 8005404:	40000800 	.word	0x40000800

08005408 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800540e:	f107 0310 	add.w	r3, r7, #16
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005426:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <MX_TIM5_Init+0x94>)
 8005428:	4a1d      	ldr	r2, [pc, #116]	@ (80054a0 <MX_TIM5_Init+0x98>)
 800542a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800542c:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <MX_TIM5_Init+0x94>)
 800542e:	22a9      	movs	r2, #169	@ 0xa9
 8005430:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005432:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <MX_TIM5_Init+0x94>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005438:	4b18      	ldr	r3, [pc, #96]	@ (800549c <MX_TIM5_Init+0x94>)
 800543a:	f04f 32ff 	mov.w	r2, #4294967295
 800543e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005440:	4b16      	ldr	r3, [pc, #88]	@ (800549c <MX_TIM5_Init+0x94>)
 8005442:	2200      	movs	r2, #0
 8005444:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005446:	4b15      	ldr	r3, [pc, #84]	@ (800549c <MX_TIM5_Init+0x94>)
 8005448:	2200      	movs	r2, #0
 800544a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800544c:	4813      	ldr	r0, [pc, #76]	@ (800549c <MX_TIM5_Init+0x94>)
 800544e:	f003 fff3 	bl	8009438 <HAL_TIM_Base_Init>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005458:	f7ff f8da 	bl	8004610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800545c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005462:	f107 0310 	add.w	r3, r7, #16
 8005466:	4619      	mov	r1, r3
 8005468:	480c      	ldr	r0, [pc, #48]	@ (800549c <MX_TIM5_Init+0x94>)
 800546a:	f004 ff6d 	bl	800a348 <HAL_TIM_ConfigClockSource>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005474:	f7ff f8cc 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4805      	ldr	r0, [pc, #20]	@ (800549c <MX_TIM5_Init+0x94>)
 8005486:	f005 ff45 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005490:	f7ff f8be 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20001c08 	.word	0x20001c08
 80054a0:	40000c00 	.word	0x40000c00

080054a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b09c      	sub	sp, #112	@ 0x70
 80054a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	609a      	str	r2, [r3, #8]
 80054b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	611a      	str	r2, [r3, #16]
 80054d4:	615a      	str	r2, [r3, #20]
 80054d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054d8:	1d3b      	adds	r3, r7, #4
 80054da:	2234      	movs	r2, #52	@ 0x34
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f008 f872 	bl	800d5c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80054e4:	4b51      	ldr	r3, [pc, #324]	@ (800562c <MX_TIM8_Init+0x188>)
 80054e6:	4a52      	ldr	r2, [pc, #328]	@ (8005630 <MX_TIM8_Init+0x18c>)
 80054e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80054ea:	4b50      	ldr	r3, [pc, #320]	@ (800562c <MX_TIM8_Init+0x188>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f0:	4b4e      	ldr	r3, [pc, #312]	@ (800562c <MX_TIM8_Init+0x188>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80054f6:	4b4d      	ldr	r3, [pc, #308]	@ (800562c <MX_TIM8_Init+0x188>)
 80054f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054fe:	4b4b      	ldr	r3, [pc, #300]	@ (800562c <MX_TIM8_Init+0x188>)
 8005500:	2200      	movs	r2, #0
 8005502:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005504:	4b49      	ldr	r3, [pc, #292]	@ (800562c <MX_TIM8_Init+0x188>)
 8005506:	2200      	movs	r2, #0
 8005508:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800550a:	4b48      	ldr	r3, [pc, #288]	@ (800562c <MX_TIM8_Init+0x188>)
 800550c:	2200      	movs	r2, #0
 800550e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005510:	4846      	ldr	r0, [pc, #280]	@ (800562c <MX_TIM8_Init+0x188>)
 8005512:	f003 ff91 	bl	8009438 <HAL_TIM_Base_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800551c:	f7ff f878 	bl	8004610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005524:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005526:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800552a:	4619      	mov	r1, r3
 800552c:	483f      	ldr	r0, [pc, #252]	@ (800562c <MX_TIM8_Init+0x188>)
 800552e:	f004 ff0b 	bl	800a348 <HAL_TIM_ConfigClockSource>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005538:	f7ff f86a 	bl	8004610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800553c:	483b      	ldr	r0, [pc, #236]	@ (800562c <MX_TIM8_Init+0x188>)
 800553e:	f004 f8c7 	bl	80096d0 <HAL_TIM_PWM_Init>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005548:	f7ff f862 	bl	8004610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800554c:	2300      	movs	r3, #0
 800554e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005550:	2300      	movs	r3, #0
 8005552:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005558:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800555c:	4619      	mov	r1, r3
 800555e:	4833      	ldr	r0, [pc, #204]	@ (800562c <MX_TIM8_Init+0x188>)
 8005560:	f005 fed8 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800556a:	f7ff f851 	bl	8004610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800556e:	2360      	movs	r3, #96	@ 0x60
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005576:	2300      	movs	r3, #0
 8005578:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800557a:	2300      	movs	r3, #0
 800557c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800557e:	2300      	movs	r3, #0
 8005580:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800558a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800558e:	2200      	movs	r2, #0
 8005590:	4619      	mov	r1, r3
 8005592:	4826      	ldr	r0, [pc, #152]	@ (800562c <MX_TIM8_Init+0x188>)
 8005594:	f004 fdc4 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800559e:	f7ff f837 	bl	8004610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80055a6:	2204      	movs	r2, #4
 80055a8:	4619      	mov	r1, r3
 80055aa:	4820      	ldr	r0, [pc, #128]	@ (800562c <MX_TIM8_Init+0x188>)
 80055ac:	f004 fdb8 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80055b6:	f7ff f82b 	bl	8004610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80055be:	2208      	movs	r2, #8
 80055c0:	4619      	mov	r1, r3
 80055c2:	481a      	ldr	r0, [pc, #104]	@ (800562c <MX_TIM8_Init+0x188>)
 80055c4:	f004 fdac 	bl	800a120 <HAL_TIM_PWM_ConfigChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80055ce:	f7ff f81f 	bl	8004610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80055e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80055f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005602:	2300      	movs	r3, #0
 8005604:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4807      	ldr	r0, [pc, #28]	@ (800562c <MX_TIM8_Init+0x188>)
 8005610:	f005 ff16 	bl	800b440 <HAL_TIMEx_ConfigBreakDeadTime>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800561a:	f7fe fff9 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800561e:	4803      	ldr	r0, [pc, #12]	@ (800562c <MX_TIM8_Init+0x188>)
 8005620:	f000 f94a 	bl	80058b8 <HAL_TIM_MspPostInit>

}
 8005624:	bf00      	nop
 8005626:	3770      	adds	r7, #112	@ 0x70
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20001cd4 	.word	0x20001cd4
 8005630:	40013400 	.word	0x40013400

08005634 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <MX_TIM16_Init+0x58>)
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <MX_TIM16_Init+0x5c>)
 800563c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800563e:	4b13      	ldr	r3, [pc, #76]	@ (800568c <MX_TIM16_Init+0x58>)
 8005640:	22a9      	movs	r2, #169	@ 0xa9
 8005642:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005644:	4b11      	ldr	r3, [pc, #68]	@ (800568c <MX_TIM16_Init+0x58>)
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800564a:	4b10      	ldr	r3, [pc, #64]	@ (800568c <MX_TIM16_Init+0x58>)
 800564c:	f240 4279 	movw	r2, #1145	@ 0x479
 8005650:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005652:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <MX_TIM16_Init+0x58>)
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005658:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <MX_TIM16_Init+0x58>)
 800565a:	2200      	movs	r2, #0
 800565c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <MX_TIM16_Init+0x58>)
 8005660:	2200      	movs	r2, #0
 8005662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005664:	4809      	ldr	r0, [pc, #36]	@ (800568c <MX_TIM16_Init+0x58>)
 8005666:	f003 fee7 	bl	8009438 <HAL_TIM_Base_Init>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005670:	f7fe ffce 	bl	8004610 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005674:	2108      	movs	r1, #8
 8005676:	4805      	ldr	r0, [pc, #20]	@ (800568c <MX_TIM16_Init+0x58>)
 8005678:	f004 f9a0 	bl	80099bc <HAL_TIM_OnePulse_Init>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8005682:	f7fe ffc5 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20001da0 	.word	0x20001da0
 8005690:	40014400 	.word	0x40014400

08005694 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0d      	ldr	r2, [pc, #52]	@ (80056d8 <HAL_TIM_PWM_MspInit+0x44>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d113      	bne.n	80056ce <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <HAL_TIM_PWM_MspInit+0x48>)
 80056a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056aa:	4a0c      	ldr	r2, [pc, #48]	@ (80056dc <HAL_TIM_PWM_MspInit+0x48>)
 80056ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80056b2:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <HAL_TIM_PWM_MspInit+0x48>)
 80056b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	2019      	movs	r0, #25
 80056c4:	f002 f957 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80056c8:	2019      	movs	r0, #25
 80056ca:	f002 f96e 	bl	80079aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40021000 	.word	0x40021000

080056e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f0:	d114      	bne.n	800571c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056f2:	4b2b      	ldr	r3, [pc, #172]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f6:	4a2a      	ldr	r2, [pc, #168]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fe:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	201c      	movs	r0, #28
 8005710:	f002 f931 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005714:	201c      	movs	r0, #28
 8005716:	f002 f948 	bl	80079aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800571a:	e03c      	b.n	8005796 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a20      	ldr	r2, [pc, #128]	@ (80057a4 <HAL_TIM_Base_MspInit+0xc4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d10c      	bne.n	8005740 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
}
 800573e:	e02a      	b.n	8005796 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <HAL_TIM_Base_MspInit+0xc8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10c      	bne.n	8005764 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800574a:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 800574c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574e:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005754:	6613      	str	r3, [r2, #96]	@ 0x60
 8005756:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	e018      	b.n	8005796 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a10      	ldr	r2, [pc, #64]	@ (80057ac <HAL_TIM_Base_MspInit+0xcc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d113      	bne.n	8005796 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005772:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 8005774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005778:	6613      	str	r3, [r2, #96]	@ 0x60
 800577a:	4b09      	ldr	r3, [pc, #36]	@ (80057a0 <HAL_TIM_Base_MspInit+0xc0>)
 800577c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005786:	2200      	movs	r2, #0
 8005788:	2100      	movs	r1, #0
 800578a:	2019      	movs	r0, #25
 800578c:	f002 f8f3 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005790:	2019      	movs	r0, #25
 8005792:	f002 f90a 	bl	80079aa <HAL_NVIC_EnableIRQ>
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40013400 	.word	0x40013400
 80057ac:	40014400 	.word	0x40014400

080057b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	@ 0x30
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b8:	f107 031c 	add.w	r3, r7, #28
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a37      	ldr	r2, [pc, #220]	@ (80058ac <HAL_TIM_Encoder_MspInit+0xfc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d131      	bne.n	8005836 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057d2:	4b37      	ldr	r3, [pc, #220]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d6:	4a36      	ldr	r2, [pc, #216]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057de:	4b34      	ldr	r3, [pc, #208]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ea:	4b31      	ldr	r3, [pc, #196]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ee:	4a30      	ldr	r2, [pc, #192]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057f6:	4b2e      	ldr	r3, [pc, #184]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005802:	23c0      	movs	r3, #192	@ 0xc0
 8005804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005806:	2302      	movs	r3, #2
 8005808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580e:	2300      	movs	r3, #0
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005812:	2302      	movs	r3, #2
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005816:	f107 031c 	add.w	r3, r7, #28
 800581a:	4619      	mov	r1, r3
 800581c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005820:	f002 fc10 	bl	8008044 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	2100      	movs	r1, #0
 8005828:	201d      	movs	r0, #29
 800582a:	f002 f8a4 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800582e:	201d      	movs	r0, #29
 8005830:	f002 f8bb 	bl	80079aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005834:	e036      	b.n	80058a4 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <HAL_TIM_Encoder_MspInit+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d131      	bne.n	80058a4 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005840:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6593      	str	r3, [r2, #88]	@ 0x58
 800584c:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 800584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005858:	4b15      	ldr	r3, [pc, #84]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	4a14      	ldr	r2, [pc, #80]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005864:	4b12      	ldr	r3, [pc, #72]	@ (80058b0 <HAL_TIM_Encoder_MspInit+0x100>)
 8005866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005870:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005876:	2302      	movs	r3, #2
 8005878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800587e:	2300      	movs	r3, #0
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005882:	230a      	movs	r3, #10
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	f107 031c 	add.w	r3, r7, #28
 800588a:	4619      	mov	r1, r3
 800588c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005890:	f002 fbd8 	bl	8008044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	201e      	movs	r0, #30
 800589a:	f002 f86c 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800589e:	201e      	movs	r0, #30
 80058a0:	f002 f883 	bl	80079aa <HAL_NVIC_EnableIRQ>
}
 80058a4:	bf00      	nop
 80058a6:	3730      	adds	r7, #48	@ 0x30
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40000800 	.word	0x40000800

080058b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	@ 0x28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a30      	ldr	r2, [pc, #192]	@ (8005998 <HAL_TIM_MspPostInit+0xe0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d11c      	bne.n	8005914 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058da:	4b30      	ldr	r3, [pc, #192]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	4a2f      	ldr	r2, [pc, #188]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 80058e0:	f043 0304 	orr.w	r3, r3, #4
 80058e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e6:	4b2d      	ldr	r3, [pc, #180]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058f2:	2308      	movs	r3, #8
 80058f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f6:	2302      	movs	r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005902:	2302      	movs	r3, #2
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	4619      	mov	r1, r3
 800590c:	4824      	ldr	r0, [pc, #144]	@ (80059a0 <HAL_TIM_MspPostInit+0xe8>)
 800590e:	f002 fb99 	bl	8008044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005912:	e03d      	b.n	8005990 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <HAL_TIM_MspPostInit+0xec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d138      	bne.n	8005990 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800591e:	4b1f      	ldr	r3, [pc, #124]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 8005920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005922:	4a1e      	ldr	r2, [pc, #120]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800592a:	4b1c      	ldr	r3, [pc, #112]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 800592c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005936:	4b19      	ldr	r3, [pc, #100]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	4a18      	ldr	r2, [pc, #96]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 800593c:	f043 0302 	orr.w	r3, r3, #2
 8005940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005942:	4b16      	ldr	r3, [pc, #88]	@ (800599c <HAL_TIM_MspPostInit+0xe4>)
 8005944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800594e:	23c0      	movs	r3, #192	@ 0xc0
 8005950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005952:	2302      	movs	r3, #2
 8005954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800595e:	2304      	movs	r3, #4
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005962:	f107 0314 	add.w	r3, r7, #20
 8005966:	4619      	mov	r1, r3
 8005968:	480d      	ldr	r0, [pc, #52]	@ (80059a0 <HAL_TIM_MspPostInit+0xe8>)
 800596a:	f002 fb6b 	bl	8008044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800596e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005974:	2302      	movs	r3, #2
 8005976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8005980:	230a      	movs	r3, #10
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	4619      	mov	r1, r3
 800598a:	4807      	ldr	r0, [pc, #28]	@ (80059a8 <HAL_TIM_MspPostInit+0xf0>)
 800598c:	f002 fb5a 	bl	8008044 <HAL_GPIO_Init>
}
 8005990:	bf00      	nop
 8005992:	3728      	adds	r7, #40	@ 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40021000 	.word	0x40021000
 80059a0:	48000800 	.word	0x48000800
 80059a4:	40013400 	.word	0x40013400
 80059a8:	48000400 	.word	0x48000400

080059ac <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80059b0:	4b20      	ldr	r3, [pc, #128]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059b2:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <MX_LPUART1_UART_Init+0x8c>)
 80059b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80059b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059b8:	4a20      	ldr	r2, [pc, #128]	@ (8005a3c <MX_LPUART1_UART_Init+0x90>)
 80059ba:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80059c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059d0:	220c      	movs	r2, #12
 80059d2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059d4:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059da:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059e0:	4b14      	ldr	r3, [pc, #80]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059e6:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80059ec:	4811      	ldr	r0, [pc, #68]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 80059ee:	f005 fe0b 	bl	800b608 <HAL_UART_Init>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80059f8:	f7fe fe0a 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059fc:	2100      	movs	r1, #0
 80059fe:	480d      	ldr	r0, [pc, #52]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 8005a00:	f007 fb5e 	bl	800d0c0 <HAL_UARTEx_SetTxFifoThreshold>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8005a0a:	f7fe fe01 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4808      	ldr	r0, [pc, #32]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 8005a12:	f007 fb93 	bl	800d13c <HAL_UARTEx_SetRxFifoThreshold>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8005a1c:	f7fe fdf8 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005a20:	4804      	ldr	r0, [pc, #16]	@ (8005a34 <MX_LPUART1_UART_Init+0x88>)
 8005a22:	f007 fb14 	bl	800d04e <HAL_UARTEx_DisableFifoMode>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8005a2c:	f7fe fdf0 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20001e6c 	.word	0x20001e6c
 8005a38:	40008000 	.word	0x40008000
 8005a3c:	001e8480 	.word	0x001e8480

08005a40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a44:	4b23      	ldr	r3, [pc, #140]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a46:	4a24      	ldr	r2, [pc, #144]	@ (8005ad8 <MX_USART2_UART_Init+0x98>)
 8005a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005a4a:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a4c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005a52:	4b20      	ldr	r3, [pc, #128]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a58:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005a60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a6a:	220c      	movs	r2, #12
 8005a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a74:	4b17      	ldr	r3, [pc, #92]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a7a:	4b16      	ldr	r3, [pc, #88]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a80:	4b14      	ldr	r3, [pc, #80]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a86:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a8c:	4811      	ldr	r0, [pc, #68]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005a8e:	f005 fdbb 	bl	800b608 <HAL_UART_Init>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005a98:	f7fe fdba 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	480d      	ldr	r0, [pc, #52]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005aa0:	f007 fb0e 	bl	800d0c0 <HAL_UARTEx_SetTxFifoThreshold>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8005aaa:	f7fe fdb1 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4808      	ldr	r0, [pc, #32]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005ab2:	f007 fb43 	bl	800d13c <HAL_UARTEx_SetRxFifoThreshold>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005abc:	f7fe fda8 	bl	8004610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ac0:	4804      	ldr	r0, [pc, #16]	@ (8005ad4 <MX_USART2_UART_Init+0x94>)
 8005ac2:	f007 fac4 	bl	800d04e <HAL_UARTEx_DisableFifoMode>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005acc:	f7fe fda0 	bl	8004610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ad0:	bf00      	nop
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20001f38 	.word	0x20001f38
 8005ad8:	40004400 	.word	0x40004400

08005adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b0a0      	sub	sp, #128	@ 0x80
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005af4:	f107 0318 	add.w	r3, r7, #24
 8005af8:	2254      	movs	r2, #84	@ 0x54
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f007 fd63 	bl	800d5c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a99      	ldr	r2, [pc, #612]	@ (8005d6c <HAL_UART_MspInit+0x290>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	f040 8093 	bne.w	8005c34 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005b0e:	2320      	movs	r3, #32
 8005b10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005b12:	2300      	movs	r3, #0
 8005b14:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b16:	f107 0318 	add.w	r3, r7, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f003 fa3e 	bl	8008f9c <HAL_RCCEx_PeriphCLKConfig>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005b26:	f7fe fd73 	bl	8004610 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005b2a:	4b91      	ldr	r3, [pc, #580]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b2e:	4a90      	ldr	r2, [pc, #576]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8005b36:	4b8e      	ldr	r3, [pc, #568]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b42:	4b8b      	ldr	r3, [pc, #556]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b46:	4a8a      	ldr	r2, [pc, #552]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b4e:	4b88      	ldr	r3, [pc, #544]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005b5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b60:	2302      	movs	r3, #2
 8005b62:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005b74:	4619      	mov	r1, r3
 8005b76:	487f      	ldr	r0, [pc, #508]	@ (8005d74 <HAL_UART_MspInit+0x298>)
 8005b78:	f002 fa64 	bl	8008044 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8005b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d7c <HAL_UART_MspInit+0x2a0>)
 8005b80:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005b82:	4b7d      	ldr	r3, [pc, #500]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b84:	2222      	movs	r2, #34	@ 0x22
 8005b86:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b88:	4b7b      	ldr	r3, [pc, #492]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b94:	4b78      	ldr	r3, [pc, #480]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b96:	2280      	movs	r2, #128	@ 0x80
 8005b98:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b9a:	4b77      	ldr	r3, [pc, #476]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ba0:	4b75      	ldr	r3, [pc, #468]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8005ba6:	4b74      	ldr	r3, [pc, #464]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bac:	4b72      	ldr	r3, [pc, #456]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005bb2:	4871      	ldr	r0, [pc, #452]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005bb4:	f001 ff14 	bl	80079e0 <HAL_DMA_Init>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005bbe:	f7fe fd27 	bl	8004610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005bca:	4a6b      	ldr	r2, [pc, #428]	@ (8005d78 <HAL_UART_MspInit+0x29c>)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8005bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8005d84 <HAL_UART_MspInit+0x2a8>)
 8005bd4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bd8:	2223      	movs	r2, #35	@ 0x23
 8005bda:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bdc:	4b68      	ldr	r3, [pc, #416]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bde:	2210      	movs	r2, #16
 8005be0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be2:	4b67      	ldr	r3, [pc, #412]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005be8:	4b65      	ldr	r3, [pc, #404]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bea:	2280      	movs	r2, #128	@ 0x80
 8005bec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bee:	4b64      	ldr	r3, [pc, #400]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf4:	4b62      	ldr	r3, [pc, #392]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005bfa:	4b61      	ldr	r3, [pc, #388]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c00:	4b5f      	ldr	r3, [pc, #380]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005c06:	485e      	ldr	r0, [pc, #376]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005c08:	f001 feea 	bl	80079e0 <HAL_DMA_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005c12:	f7fe fcfd 	bl	8004610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a59      	ldr	r2, [pc, #356]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005c1a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005c1c:	4a58      	ldr	r2, [pc, #352]	@ (8005d80 <HAL_UART_MspInit+0x2a4>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	2100      	movs	r1, #0
 8005c26:	205b      	movs	r0, #91	@ 0x5b
 8005c28:	f001 fea5 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005c2c:	205b      	movs	r0, #91	@ 0x5b
 8005c2e:	f001 febc 	bl	80079aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005c32:	e097      	b.n	8005d64 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a53      	ldr	r2, [pc, #332]	@ (8005d88 <HAL_UART_MspInit+0x2ac>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f040 8092 	bne.w	8005d64 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c40:	2302      	movs	r3, #2
 8005c42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c44:	2300      	movs	r3, #0
 8005c46:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c48:	f107 0318 	add.w	r3, r7, #24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 f9a5 	bl	8008f9c <HAL_RCCEx_PeriphCLKConfig>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8005c58:	f7fe fcda 	bl	8004610 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c5c:	4b44      	ldr	r3, [pc, #272]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c60:	4a43      	ldr	r2, [pc, #268]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c68:	4b41      	ldr	r3, [pc, #260]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c74:	4b3e      	ldr	r3, [pc, #248]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c78:	4a3d      	ldr	r2, [pc, #244]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c80:	4b3b      	ldr	r3, [pc, #236]	@ (8005d70 <HAL_UART_MspInit+0x294>)
 8005c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c90:	2302      	movs	r3, #2
 8005c92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005caa:	f002 f9cb 	bl	8008044 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005cae:	4b37      	ldr	r3, [pc, #220]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cb0:	4a37      	ldr	r2, [pc, #220]	@ (8005d90 <HAL_UART_MspInit+0x2b4>)
 8005cb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005cb4:	4b35      	ldr	r3, [pc, #212]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cb6:	221a      	movs	r2, #26
 8005cb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cba:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cc0:	4b32      	ldr	r3, [pc, #200]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cc6:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cc8:	2280      	movs	r2, #128	@ 0x80
 8005cca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cde:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ce4:	4829      	ldr	r0, [pc, #164]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005ce6:	f001 fe7b 	bl	80079e0 <HAL_DMA_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005cf0:	f7fe fc8e 	bl	8004610 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005cfc:	4a23      	ldr	r2, [pc, #140]	@ (8005d8c <HAL_UART_MspInit+0x2b0>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005d02:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d04:	4a24      	ldr	r2, [pc, #144]	@ (8005d98 <HAL_UART_MspInit+0x2bc>)
 8005d06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005d08:	4b22      	ldr	r3, [pc, #136]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d0a:	221b      	movs	r2, #27
 8005d0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d0e:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d10:	2210      	movs	r2, #16
 8005d12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d14:	4b1f      	ldr	r3, [pc, #124]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d26:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d2c:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d32:	4b18      	ldr	r3, [pc, #96]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d38:	4816      	ldr	r0, [pc, #88]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d3a:	f001 fe51 	bl	80079e0 <HAL_DMA_Init>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8005d44:	f7fe fc64 	bl	8004610 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a12      	ldr	r2, [pc, #72]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d4c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005d4e:	4a11      	ldr	r2, [pc, #68]	@ (8005d94 <HAL_UART_MspInit+0x2b8>)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	2026      	movs	r0, #38	@ 0x26
 8005d5a:	f001 fe0c 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5e:	2026      	movs	r0, #38	@ 0x26
 8005d60:	f001 fe23 	bl	80079aa <HAL_NVIC_EnableIRQ>
}
 8005d64:	bf00      	nop
 8005d66:	3780      	adds	r7, #128	@ 0x80
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40008000 	.word	0x40008000
 8005d70:	40021000 	.word	0x40021000
 8005d74:	48000400 	.word	0x48000400
 8005d78:	20002004 	.word	0x20002004
 8005d7c:	40020044 	.word	0x40020044
 8005d80:	20002064 	.word	0x20002064
 8005d84:	40020058 	.word	0x40020058
 8005d88:	40004400 	.word	0x40004400
 8005d8c:	200020c4 	.word	0x200020c4
 8005d90:	4002001c 	.word	0x4002001c
 8005d94:	20002124 	.word	0x20002124
 8005d98:	40020030 	.word	0x40020030

08005d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d9c:	480d      	ldr	r0, [pc, #52]	@ (8005dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005da0:	f7ff f992 	bl	80050c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005da4:	480c      	ldr	r0, [pc, #48]	@ (8005dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005da6:	490d      	ldr	r1, [pc, #52]	@ (8005ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005da8:	4a0d      	ldr	r2, [pc, #52]	@ (8005de0 <LoopForever+0xe>)
  movs r3, #0
 8005daa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005dac:	e002      	b.n	8005db4 <LoopCopyDataInit>

08005dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005db2:	3304      	adds	r3, #4

08005db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db8:	d3f9      	bcc.n	8005dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dba:	4a0a      	ldr	r2, [pc, #40]	@ (8005de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8005de8 <LoopForever+0x16>)
  movs r3, #0
 8005dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dc0:	e001      	b.n	8005dc6 <LoopFillZerobss>

08005dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dc4:	3204      	adds	r2, #4

08005dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc8:	d3fb      	bcc.n	8005dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dca:	f007 fc1b 	bl	800d604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dce:	f7fe f9ad 	bl	800412c <main>

08005dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8005dd2:	e7fe      	b.n	8005dd2 <LoopForever>
  ldr   r0, =_estack
 8005dd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ddc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005de0:	0800e620 	.word	0x0800e620
  ldr r2, =_sbss
 8005de4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005de8:	200022d0 	.word	0x200022d0

08005dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005dec:	e7fe      	b.n	8005dec <ADC1_2_IRQHandler>

08005dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005df8:	2003      	movs	r0, #3
 8005dfa:	f001 fdb1 	bl	8007960 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f000 f80e 	bl	8005e20 <HAL_InitTick>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	71fb      	strb	r3, [r7, #7]
 8005e0e:	e001      	b.n	8005e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e10:	f7ff f856 	bl	8004ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e14:	79fb      	ldrb	r3, [r7, #7]

}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e2c:	4b16      	ldr	r3, [pc, #88]	@ (8005e88 <HAL_InitTick+0x68>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d022      	beq.n	8005e7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e34:	4b15      	ldr	r3, [pc, #84]	@ (8005e8c <HAL_InitTick+0x6c>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <HAL_InitTick+0x68>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fdbc 	bl	80079c6 <HAL_SYSTICK_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d809      	bhi.n	8005e6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e62:	f001 fd88 	bl	8007976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e66:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <HAL_InitTick+0x70>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e007      	b.n	8005e7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	e004      	b.n	8005e7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e001      	b.n	8005e7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000194 	.word	0x20000194
 8005e8c:	2000018c 	.word	0x2000018c
 8005e90:	20000190 	.word	0x20000190

08005e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_IncTick+0x1c>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <HAL_IncTick+0x20>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4a03      	ldr	r2, [pc, #12]	@ (8005eb0 <HAL_IncTick+0x1c>)
 8005ea4:	6013      	str	r3, [r2, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20002184 	.word	0x20002184
 8005eb4:	20000194 	.word	0x20000194

08005eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return uwTick;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <HAL_GetTick+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20002184 	.word	0x20002184

08005ed0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3360      	adds	r3, #96	@ 0x60
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <LL_ADC_SetOffset+0x44>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	03fff000 	.word	0x03fff000

08005f80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3360      	adds	r3, #96	@ 0x60
 8005f8e:	461a      	mov	r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3360      	adds	r3, #96	@ 0x60
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3360      	adds	r3, #96	@ 0x60
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	431a      	orrs	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3360      	adds	r3, #96	@ 0x60
 8006028:	461a      	mov	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	431a      	orrs	r2, r3
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	615a      	str	r2, [r3, #20]
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800609a:	b480      	push	{r7}
 800609c:	b087      	sub	sp, #28
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3330      	adds	r3, #48	@ 0x30
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	4413      	add	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	211f      	movs	r1, #31
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	401a      	ands	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0e9b      	lsrs	r3, r3, #26
 80060d2:	f003 011f 	and.w	r1, r3, #31
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	fa01 f303 	lsl.w	r3, r1, r3
 80060e0:	431a      	orrs	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b087      	sub	sp, #28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3314      	adds	r3, #20
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	0e5b      	lsrs	r3, r3, #25
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	4413      	add	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	0d1b      	lsrs	r3, r3, #20
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2107      	movs	r1, #7
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	0d1b      	lsrs	r3, r3, #20
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	431a      	orrs	r2, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006160:	43db      	mvns	r3, r3
 8006162:	401a      	ands	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0318 	and.w	r3, r3, #24
 800616a:	4908      	ldr	r1, [pc, #32]	@ (800618c <LL_ADC_SetChannelSingleDiff+0x44>)
 800616c:	40d9      	lsrs	r1, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	400b      	ands	r3, r1
 8006172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006176:	431a      	orrs	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	0007ffff 	.word	0x0007ffff

08006190 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 031f 	and.w	r3, r3, #31
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80061bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6093      	str	r3, [r2, #8]
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e4:	d101      	bne.n	80061ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006208:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800620c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006234:	d101      	bne.n	800623a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006258:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800625c:	f043 0201 	orr.w	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006284:	f043 0202 	orr.w	r2, r3, #2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <LL_ADC_IsEnabled+0x18>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <LL_ADC_IsEnabled+0x1a>
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d101      	bne.n	80062d6 <LL_ADC_IsDisableOngoing+0x18>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_ADC_IsDisableOngoing+0x1a>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062f8:	f043 0204 	orr.w	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b04      	cmp	r3, #4
 800631e:	d101      	bne.n	8006324 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b08      	cmp	r3, #8
 8006344:	d101      	bne.n	800634a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b089      	sub	sp, #36	@ 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e1a9      	b.n	80066c6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7fd fb83 	bl	8003a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff ff19 	bl	80061d0 <LL_ADC_IsDeepPowerDownEnabled>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff feff 	bl	80061ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ff34 	bl	8006220 <LL_ADC_IsInternalRegulatorEnabled>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d115      	bne.n	80063ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff18 	bl	80061f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063c8:	4b9c      	ldr	r3, [pc, #624]	@ (800663c <HAL_ADC_Init+0x2e4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	099b      	lsrs	r3, r3, #6
 80063ce:	4a9c      	ldr	r2, [pc, #624]	@ (8006640 <HAL_ADC_Init+0x2e8>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	099b      	lsrs	r3, r3, #6
 80063d6:	3301      	adds	r3, #1
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80063dc:	e002      	b.n	80063e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f9      	bne.n	80063de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff ff16 	bl	8006220 <LL_ADC_IsInternalRegulatorEnabled>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fe:	f043 0210 	orr.w	r2, r3, #16
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff76 	bl	800630c <LL_ADC_REG_IsConversionOngoing>
 8006420:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 8142 	bne.w	80066b4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 813e 	bne.w	80066b4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006440:	f043 0202 	orr.w	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ff23 	bl	8006298 <LL_ADC_IsEnabled>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d141      	bne.n	80064dc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006460:	d004      	beq.n	800646c <HAL_ADC_Init+0x114>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a77      	ldr	r2, [pc, #476]	@ (8006644 <HAL_ADC_Init+0x2ec>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10f      	bne.n	800648c <HAL_ADC_Init+0x134>
 800646c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006470:	f7ff ff12 	bl	8006298 <LL_ADC_IsEnabled>
 8006474:	4604      	mov	r4, r0
 8006476:	4873      	ldr	r0, [pc, #460]	@ (8006644 <HAL_ADC_Init+0x2ec>)
 8006478:	f7ff ff0e 	bl	8006298 <LL_ADC_IsEnabled>
 800647c:	4603      	mov	r3, r0
 800647e:	4323      	orrs	r3, r4
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e012      	b.n	80064b2 <HAL_ADC_Init+0x15a>
 800648c:	486e      	ldr	r0, [pc, #440]	@ (8006648 <HAL_ADC_Init+0x2f0>)
 800648e:	f7ff ff03 	bl	8006298 <LL_ADC_IsEnabled>
 8006492:	4604      	mov	r4, r0
 8006494:	486d      	ldr	r0, [pc, #436]	@ (800664c <HAL_ADC_Init+0x2f4>)
 8006496:	f7ff feff 	bl	8006298 <LL_ADC_IsEnabled>
 800649a:	4603      	mov	r3, r0
 800649c:	431c      	orrs	r4, r3
 800649e:	486c      	ldr	r0, [pc, #432]	@ (8006650 <HAL_ADC_Init+0x2f8>)
 80064a0:	f7ff fefa 	bl	8006298 <LL_ADC_IsEnabled>
 80064a4:	4603      	mov	r3, r0
 80064a6:	4323      	orrs	r3, r4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064be:	d004      	beq.n	80064ca <HAL_ADC_Init+0x172>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5f      	ldr	r2, [pc, #380]	@ (8006644 <HAL_ADC_Init+0x2ec>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d101      	bne.n	80064ce <HAL_ADC_Init+0x176>
 80064ca:	4a62      	ldr	r2, [pc, #392]	@ (8006654 <HAL_ADC_Init+0x2fc>)
 80064cc:	e000      	b.n	80064d0 <HAL_ADC_Init+0x178>
 80064ce:	4a62      	ldr	r2, [pc, #392]	@ (8006658 <HAL_ADC_Init+0x300>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7ff fcfa 	bl	8005ed0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7f5b      	ldrb	r3, [r3, #29]
 80064e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80064ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80064f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006506:	2b01      	cmp	r3, #1
 8006508:	d106      	bne.n	8006518 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	045b      	lsls	r3, r3, #17
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	4b48      	ldr	r3, [pc, #288]	@ (800665c <HAL_ADC_Init+0x304>)
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	69b9      	ldr	r1, [r7, #24]
 8006544:	430b      	orrs	r3, r1
 8006546:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fee5 	bl	8006332 <LL_ADC_INJ_IsConversionOngoing>
 8006568:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d17f      	bne.n	8006670 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d17c      	bne.n	8006670 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800657a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006582:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006584:	4313      	orrs	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006592:	f023 0302 	bic.w	r3, r3, #2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	430b      	orrs	r3, r1
 800659e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d017      	beq.n	80065d8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80065b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80065c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6911      	ldr	r1, [r2, #16]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	430b      	orrs	r3, r1
 80065d2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80065d6:	e013      	b.n	8006600 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80065e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80065f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006606:	2b01      	cmp	r3, #1
 8006608:	d12a      	bne.n	8006660 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006614:	f023 0304 	bic.w	r3, r3, #4
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006620:	4311      	orrs	r1, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006626:	4311      	orrs	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800662c:	430a      	orrs	r2, r1
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	611a      	str	r2, [r3, #16]
 800663a:	e019      	b.n	8006670 <HAL_ADC_Init+0x318>
 800663c:	2000018c 	.word	0x2000018c
 8006640:	053e2d63 	.word	0x053e2d63
 8006644:	50000100 	.word	0x50000100
 8006648:	50000400 	.word	0x50000400
 800664c:	50000500 	.word	0x50000500
 8006650:	50000600 	.word	0x50000600
 8006654:	50000300 	.word	0x50000300
 8006658:	50000700 	.word	0x50000700
 800665c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d10c      	bne.n	8006692 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	f023 010f 	bic.w	r1, r3, #15
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	1e5a      	subs	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006690:	e007      	b.n	80066a2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 020f 	bic.w	r2, r2, #15
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066b2:	e007      	b.n	80066c4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b8:	f043 0210 	orr.w	r2, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3724      	adds	r7, #36	@ 0x24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd90      	pop	{r4, r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066e4:	d004      	beq.n	80066f0 <HAL_ADC_Start_DMA+0x20>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5a      	ldr	r2, [pc, #360]	@ (8006854 <HAL_ADC_Start_DMA+0x184>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <HAL_ADC_Start_DMA+0x24>
 80066f0:	4b59      	ldr	r3, [pc, #356]	@ (8006858 <HAL_ADC_Start_DMA+0x188>)
 80066f2:	e000      	b.n	80066f6 <HAL_ADC_Start_DMA+0x26>
 80066f4:	4b59      	ldr	r3, [pc, #356]	@ (800685c <HAL_ADC_Start_DMA+0x18c>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fd4a 	bl	8006190 <LL_ADC_GetMultimode>
 80066fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fe02 	bl	800630c <LL_ADC_REG_IsConversionOngoing>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 809b 	bne.w	8006846 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_ADC_Start_DMA+0x4e>
 800671a:	2302      	movs	r3, #2
 800671c:	e096      	b.n	800684c <HAL_ADC_Start_DMA+0x17c>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a4d      	ldr	r2, [pc, #308]	@ (8006860 <HAL_ADC_Start_DMA+0x190>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d008      	beq.n	8006742 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b05      	cmp	r3, #5
 800673a:	d002      	beq.n	8006742 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b09      	cmp	r3, #9
 8006740:	d17a      	bne.n	8006838 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fcf6 	bl	8007134 <ADC_Enable>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d16d      	bne.n	800682e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006756:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a3a      	ldr	r2, [pc, #232]	@ (8006854 <HAL_ADC_Start_DMA+0x184>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_ADC_Start_DMA+0xb4>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a3b      	ldr	r2, [pc, #236]	@ (8006864 <HAL_ADC_Start_DMA+0x194>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d002      	beq.n	8006780 <HAL_ADC_Start_DMA+0xb0>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	e003      	b.n	8006788 <HAL_ADC_Start_DMA+0xb8>
 8006780:	4b39      	ldr	r3, [pc, #228]	@ (8006868 <HAL_ADC_Start_DMA+0x198>)
 8006782:	e001      	b.n	8006788 <HAL_ADC_Start_DMA+0xb8>
 8006784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	4293      	cmp	r3, r2
 800678e:	d002      	beq.n	8006796 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b2:	f023 0206 	bic.w	r2, r3, #6
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80067ba:	e002      	b.n	80067c2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	4a29      	ldr	r2, [pc, #164]	@ (800686c <HAL_ADC_Start_DMA+0x19c>)
 80067c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	4a28      	ldr	r2, [pc, #160]	@ (8006870 <HAL_ADC_Start_DMA+0x1a0>)
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	4a27      	ldr	r2, [pc, #156]	@ (8006874 <HAL_ADC_Start_DMA+0x1a4>)
 80067d8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	221c      	movs	r2, #28
 80067e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0210 	orr.w	r2, r2, #16
 80067f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0201 	orr.w	r2, r2, #1
 8006808:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3340      	adds	r3, #64	@ 0x40
 8006814:	4619      	mov	r1, r3
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f001 f989 	bl	8007b30 <HAL_DMA_Start_IT>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fd5c 	bl	80062e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800682c:	e00d      	b.n	800684a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006836:	e008      	b.n	800684a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006844:	e001      	b.n	800684a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006846:	2302      	movs	r3, #2
 8006848:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	50000100 	.word	0x50000100
 8006858:	50000300 	.word	0x50000300
 800685c:	50000700 	.word	0x50000700
 8006860:	50000600 	.word	0x50000600
 8006864:	50000500 	.word	0x50000500
 8006868:	50000400 	.word	0x50000400
 800686c:	0800731f 	.word	0x0800731f
 8006870:	080073f7 	.word	0x080073f7
 8006874:	08007413 	.word	0x08007413

08006878 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b0b6      	sub	sp, #216	@ 0xd8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d102      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x24>
 80068d2:	2302      	movs	r3, #2
 80068d4:	f000 bc13 	b.w	80070fe <HAL_ADC_ConfigChannel+0x84a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fd11 	bl	800630c <LL_ADC_REG_IsConversionOngoing>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 83f3 	bne.w	80070d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	f7ff fbcb 	bl	800609a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fcff 	bl	800630c <LL_ADC_REG_IsConversionOngoing>
 800690e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fd0b 	bl	8006332 <LL_ADC_INJ_IsConversionOngoing>
 800691c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006920:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 81d9 	bne.w	8006cdc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800692a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 81d4 	bne.w	8006cdc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800693c:	d10f      	bne.n	800695e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	4619      	mov	r1, r3
 800694a:	f7ff fbd2 	bl	80060f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fb79 	bl	800604e <LL_ADC_SetSamplingTimeCommonConfig>
 800695c:	e00e      	b.n	800697c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6819      	ldr	r1, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	461a      	mov	r2, r3
 800696c:	f7ff fbc1 	bl	80060f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fb69 	bl	800604e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d022      	beq.n	80069e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6919      	ldr	r1, [r3, #16]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069ae:	f7ff fac3 	bl	8005f38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7ff fb0f 	bl	8005fe2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d102      	bne.n	80069da <HAL_ADC_ConfigChannel+0x126>
 80069d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069d8:	e000      	b.n	80069dc <HAL_ADC_ConfigChannel+0x128>
 80069da:	2300      	movs	r3, #0
 80069dc:	461a      	mov	r2, r3
 80069de:	f7ff fb1b 	bl	8006018 <LL_ADC_SetOffsetSaturation>
 80069e2:	e17b      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fac8 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x15c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fabd 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006a06:	4603      	mov	r3, r0
 8006a08:	0e9b      	lsrs	r3, r3, #26
 8006a0a:	f003 021f 	and.w	r2, r3, #31
 8006a0e:	e01e      	b.n	8006a4e <HAL_ADC_ConfigChannel+0x19a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fab2 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a26:	fa93 f3a3 	rbit	r3, r3
 8006a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006a3e:	2320      	movs	r3, #32
 8006a40:	e004      	b.n	8006a4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a46:	fab3 f383 	clz	r3, r3
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d105      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x1b2>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	0e9b      	lsrs	r3, r3, #26
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	e018      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x1e4>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a72:	fa93 f3a3 	rbit	r3, r3
 8006a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006a8a:	2320      	movs	r3, #32
 8006a8c:	e004      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d106      	bne.n	8006aaa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fa81 	bl	8005fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fa65 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0x222>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fa5a 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006acc:	4603      	mov	r3, r0
 8006ace:	0e9b      	lsrs	r3, r3, #26
 8006ad0:	f003 021f 	and.w	r2, r3, #31
 8006ad4:	e01e      	b.n	8006b14 <HAL_ADC_ConfigChannel+0x260>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2101      	movs	r1, #1
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fa4f 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006aec:	fa93 f3a3 	rbit	r3, r3
 8006af0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006b04:	2320      	movs	r3, #32
 8006b06:	e004      	b.n	8006b12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b0c:	fab3 f383 	clz	r3, r3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_ADC_ConfigChannel+0x278>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	0e9b      	lsrs	r3, r3, #26
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	e018      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x2aa>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b38:	fa93 f3a3 	rbit	r3, r3
 8006b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006b50:	2320      	movs	r3, #32
 8006b52:	e004      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b58:	fab3 f383 	clz	r3, r3
 8006b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d106      	bne.n	8006b70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	2101      	movs	r1, #1
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fa1e 	bl	8005fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2102      	movs	r1, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fa02 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x2e8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff f9f7 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006b92:	4603      	mov	r3, r0
 8006b94:	0e9b      	lsrs	r3, r3, #26
 8006b96:	f003 021f 	and.w	r2, r3, #31
 8006b9a:	e01e      	b.n	8006bda <HAL_ADC_ConfigChannel+0x326>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff f9ec 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bb2:	fa93 f3a3 	rbit	r3, r3
 8006bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006bca:	2320      	movs	r3, #32
 8006bcc:	e004      	b.n	8006bd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006bd2:	fab3 f383 	clz	r3, r3
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <HAL_ADC_ConfigChannel+0x33e>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	0e9b      	lsrs	r3, r3, #26
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	e016      	b.n	8006c20 <HAL_ADC_ConfigChannel+0x36c>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bfe:	fa93 f3a3 	rbit	r3, r3
 8006c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006c12:	2320      	movs	r3, #32
 8006c14:	e004      	b.n	8006c20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c1a:	fab3 f383 	clz	r3, r3
 8006c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d106      	bne.n	8006c32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2102      	movs	r1, #2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff f9bd 	bl	8005fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2103      	movs	r1, #3
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f9a1 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <HAL_ADC_ConfigChannel+0x3aa>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2103      	movs	r1, #3
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff f996 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006c54:	4603      	mov	r3, r0
 8006c56:	0e9b      	lsrs	r3, r3, #26
 8006c58:	f003 021f 	and.w	r2, r3, #31
 8006c5c:	e017      	b.n	8006c8e <HAL_ADC_ConfigChannel+0x3da>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2103      	movs	r1, #3
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff f98b 	bl	8005f80 <LL_ADC_GetOffsetChannel>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c78:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006c80:	2320      	movs	r3, #32
 8006c82:	e003      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <HAL_ADC_ConfigChannel+0x3f2>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	0e9b      	lsrs	r3, r3, #26
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	e011      	b.n	8006cca <HAL_ADC_ConfigChannel+0x416>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cae:	fa93 f3a3 	rbit	r3, r3
 8006cb2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006cbe:	2320      	movs	r3, #32
 8006cc0:	e003      	b.n	8006cca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc4:	fab3 f383 	clz	r3, r3
 8006cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d106      	bne.n	8006cdc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2103      	movs	r1, #3
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff f968 	bl	8005fac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fad9 	bl	8006298 <LL_ADC_IsEnabled>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 813d 	bne.w	8006f68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f7ff fa24 	bl	8006148 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4aa2      	ldr	r2, [pc, #648]	@ (8006f90 <HAL_ADC_ConfigChannel+0x6dc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f040 812e 	bne.w	8006f68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <HAL_ADC_ConfigChannel+0x480>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	0e9b      	lsrs	r3, r3, #26
 8006d22:	3301      	adds	r3, #1
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	bf94      	ite	ls
 8006d2c:	2301      	movls	r3, #1
 8006d2e:	2300      	movhi	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	e019      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x4b4>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d3c:	fa93 f3a3 	rbit	r3, r3
 8006d40:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006d42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	e003      	b.n	8006d58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d52:	fab3 f383 	clz	r3, r3
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	bf94      	ite	ls
 8006d62:	2301      	movls	r3, #1
 8006d64:	2300      	movhi	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d079      	beq.n	8006e60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d107      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x4d4>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	0e9b      	lsrs	r3, r3, #26
 8006d7e:	3301      	adds	r3, #1
 8006d80:	069b      	lsls	r3, r3, #26
 8006d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006d86:	e015      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x500>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d90:	fa93 f3a3 	rbit	r3, r3
 8006d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006da0:	2320      	movs	r3, #32
 8006da2:	e003      	b.n	8006dac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da6:	fab3 f383 	clz	r3, r3
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	3301      	adds	r3, #1
 8006dae:	069b      	lsls	r3, r3, #26
 8006db0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x520>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	0e9b      	lsrs	r3, r3, #26
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	e017      	b.n	8006e04 <HAL_ADC_ConfigChannel+0x550>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ddc:	fa93 f3a3 	rbit	r3, r3
 8006de0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006dec:	2320      	movs	r3, #32
 8006dee:	e003      	b.n	8006df8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df2:	fab3 f383 	clz	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2101      	movs	r1, #1
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	ea42 0103 	orr.w	r1, r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x576>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	0e9b      	lsrs	r3, r3, #26
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f003 021f 	and.w	r2, r3, #31
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	051b      	lsls	r3, r3, #20
 8006e28:	e018      	b.n	8006e5c <HAL_ADC_ConfigChannel+0x5a8>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	fa93 f3a3 	rbit	r3, r3
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006e42:	2320      	movs	r3, #32
 8006e44:	e003      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e48:	fab3 f383 	clz	r3, r3
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	3301      	adds	r3, #1
 8006e50:	f003 021f 	and.w	r2, r3, #31
 8006e54:	4613      	mov	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	4413      	add	r3, r2
 8006e5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	e07e      	b.n	8006f5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_ADC_ConfigChannel+0x5c8>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	0e9b      	lsrs	r3, r3, #26
 8006e72:	3301      	adds	r3, #1
 8006e74:	069b      	lsls	r3, r3, #26
 8006e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e7a:	e015      	b.n	8006ea8 <HAL_ADC_ConfigChannel+0x5f4>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	fa93 f3a3 	rbit	r3, r3
 8006e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006e94:	2320      	movs	r3, #32
 8006e96:	e003      	b.n	8006ea0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	fab3 f383 	clz	r3, r3
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	069b      	lsls	r3, r3, #26
 8006ea4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x614>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	0e9b      	lsrs	r3, r3, #26
 8006eba:	3301      	adds	r3, #1
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	e017      	b.n	8006ef8 <HAL_ADC_ConfigChannel+0x644>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	fa93 f3a3 	rbit	r3, r3
 8006ed4:	61fb      	str	r3, [r7, #28]
  return result;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	e003      	b.n	8006eec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	fab3 f383 	clz	r3, r3
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	3301      	adds	r3, #1
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	ea42 0103 	orr.w	r1, r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10d      	bne.n	8006f24 <HAL_ADC_ConfigChannel+0x670>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	0e9b      	lsrs	r3, r3, #26
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f003 021f 	and.w	r2, r3, #31
 8006f14:	4613      	mov	r3, r2
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	4413      	add	r3, r2
 8006f1a:	3b1e      	subs	r3, #30
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f22:	e01b      	b.n	8006f5c <HAL_ADC_ConfigChannel+0x6a8>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	fa93 f3a3 	rbit	r3, r3
 8006f30:	613b      	str	r3, [r7, #16]
  return result;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	e003      	b.n	8006f48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	fab3 f383 	clz	r3, r3
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f003 021f 	and.w	r2, r3, #31
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	3b1e      	subs	r3, #30
 8006f56:	051b      	lsls	r3, r3, #20
 8006f58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f62:	4619      	mov	r1, r3
 8006f64:	f7ff f8c5 	bl	80060f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_ADC_ConfigChannel+0x6e0>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80be 	beq.w	80070f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f7e:	d004      	beq.n	8006f8a <HAL_ADC_ConfigChannel+0x6d6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a04      	ldr	r2, [pc, #16]	@ (8006f98 <HAL_ADC_ConfigChannel+0x6e4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d10a      	bne.n	8006fa0 <HAL_ADC_ConfigChannel+0x6ec>
 8006f8a:	4b04      	ldr	r3, [pc, #16]	@ (8006f9c <HAL_ADC_ConfigChannel+0x6e8>)
 8006f8c:	e009      	b.n	8006fa2 <HAL_ADC_ConfigChannel+0x6ee>
 8006f8e:	bf00      	nop
 8006f90:	407f0000 	.word	0x407f0000
 8006f94:	80080000 	.word	0x80080000
 8006f98:	50000100 	.word	0x50000100
 8006f9c:	50000300 	.word	0x50000300
 8006fa0:	4b59      	ldr	r3, [pc, #356]	@ (8007108 <HAL_ADC_ConfigChannel+0x854>)
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe ffba 	bl	8005f1c <LL_ADC_GetCommonPathInternalCh>
 8006fa8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a56      	ldr	r2, [pc, #344]	@ (800710c <HAL_ADC_ConfigChannel+0x858>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_ADC_ConfigChannel+0x70c>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a55      	ldr	r2, [pc, #340]	@ (8007110 <HAL_ADC_ConfigChannel+0x85c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d13a      	bne.n	8007036 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d134      	bne.n	8007036 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd4:	d005      	beq.n	8006fe2 <HAL_ADC_ConfigChannel+0x72e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a4e      	ldr	r2, [pc, #312]	@ (8007114 <HAL_ADC_ConfigChannel+0x860>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	f040 8085 	bne.w	80070ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fea:	d004      	beq.n	8006ff6 <HAL_ADC_ConfigChannel+0x742>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a49      	ldr	r2, [pc, #292]	@ (8007118 <HAL_ADC_ConfigChannel+0x864>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <HAL_ADC_ConfigChannel+0x746>
 8006ff6:	4a49      	ldr	r2, [pc, #292]	@ (800711c <HAL_ADC_ConfigChannel+0x868>)
 8006ff8:	e000      	b.n	8006ffc <HAL_ADC_ConfigChannel+0x748>
 8006ffa:	4a43      	ldr	r2, [pc, #268]	@ (8007108 <HAL_ADC_ConfigChannel+0x854>)
 8006ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f7fe ff75 	bl	8005ef6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800700c:	4b44      	ldr	r3, [pc, #272]	@ (8007120 <HAL_ADC_ConfigChannel+0x86c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	4a44      	ldr	r2, [pc, #272]	@ (8007124 <HAL_ADC_ConfigChannel+0x870>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	099b      	lsrs	r3, r3, #6
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007026:	e002      	b.n	800702e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3b01      	subs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f9      	bne.n	8007028 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007034:	e05a      	b.n	80070ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3b      	ldr	r2, [pc, #236]	@ (8007128 <HAL_ADC_ConfigChannel+0x874>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d125      	bne.n	800708c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11f      	bne.n	800708c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a31      	ldr	r2, [pc, #196]	@ (8007118 <HAL_ADC_ConfigChannel+0x864>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d104      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x7ac>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a34      	ldr	r2, [pc, #208]	@ (800712c <HAL_ADC_ConfigChannel+0x878>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d047      	beq.n	80070f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007068:	d004      	beq.n	8007074 <HAL_ADC_ConfigChannel+0x7c0>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2a      	ldr	r2, [pc, #168]	@ (8007118 <HAL_ADC_ConfigChannel+0x864>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_ADC_ConfigChannel+0x7c4>
 8007074:	4a29      	ldr	r2, [pc, #164]	@ (800711c <HAL_ADC_ConfigChannel+0x868>)
 8007076:	e000      	b.n	800707a <HAL_ADC_ConfigChannel+0x7c6>
 8007078:	4a23      	ldr	r2, [pc, #140]	@ (8007108 <HAL_ADC_ConfigChannel+0x854>)
 800707a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800707e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7fe ff36 	bl	8005ef6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800708a:	e031      	b.n	80070f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a27      	ldr	r2, [pc, #156]	@ (8007130 <HAL_ADC_ConfigChannel+0x87c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d12d      	bne.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800709a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d127      	bne.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007118 <HAL_ADC_ConfigChannel+0x864>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d022      	beq.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070b4:	d004      	beq.n	80070c0 <HAL_ADC_ConfigChannel+0x80c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a17      	ldr	r2, [pc, #92]	@ (8007118 <HAL_ADC_ConfigChannel+0x864>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d101      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x810>
 80070c0:	4a16      	ldr	r2, [pc, #88]	@ (800711c <HAL_ADC_ConfigChannel+0x868>)
 80070c2:	e000      	b.n	80070c6 <HAL_ADC_ConfigChannel+0x812>
 80070c4:	4a10      	ldr	r2, [pc, #64]	@ (8007108 <HAL_ADC_ConfigChannel+0x854>)
 80070c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe ff10 	bl	8005ef6 <LL_ADC_SetCommonPathInternalCh>
 80070d6:	e00c      	b.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80070ea:	e002      	b.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80070ec:	bf00      	nop
 80070ee:	e000      	b.n	80070f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80070fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80070fe:	4618      	mov	r0, r3
 8007100:	37d8      	adds	r7, #216	@ 0xd8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	50000700 	.word	0x50000700
 800710c:	c3210000 	.word	0xc3210000
 8007110:	90c00010 	.word	0x90c00010
 8007114:	50000600 	.word	0x50000600
 8007118:	50000100 	.word	0x50000100
 800711c:	50000300 	.word	0x50000300
 8007120:	2000018c 	.word	0x2000018c
 8007124:	053e2d63 	.word	0x053e2d63
 8007128:	c7520000 	.word	0xc7520000
 800712c:	50000500 	.word	0x50000500
 8007130:	cb840000 	.word	0xcb840000

08007134 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff f8a7 	bl	8006298 <LL_ADC_IsEnabled>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d176      	bne.n	800723e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	4b3c      	ldr	r3, [pc, #240]	@ (8007248 <ADC_Enable+0x114>)
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007162:	f043 0210 	orr.w	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e062      	b.n	8007240 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff f862 	bl	8006248 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800718c:	d004      	beq.n	8007198 <ADC_Enable+0x64>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2e      	ldr	r2, [pc, #184]	@ (800724c <ADC_Enable+0x118>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <ADC_Enable+0x68>
 8007198:	4b2d      	ldr	r3, [pc, #180]	@ (8007250 <ADC_Enable+0x11c>)
 800719a:	e000      	b.n	800719e <ADC_Enable+0x6a>
 800719c:	4b2d      	ldr	r3, [pc, #180]	@ (8007254 <ADC_Enable+0x120>)
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe febc 	bl	8005f1c <LL_ADC_GetCommonPathInternalCh>
 80071a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80071a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d013      	beq.n	80071d6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007258 <ADC_Enable+0x124>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	099b      	lsrs	r3, r3, #6
 80071b4:	4a29      	ldr	r2, [pc, #164]	@ (800725c <ADC_Enable+0x128>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	099b      	lsrs	r3, r3, #6
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80071c8:	e002      	b.n	80071d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f9      	bne.n	80071ca <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80071d6:	f7fe fe6f 	bl	8005eb8 <HAL_GetTick>
 80071da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071dc:	e028      	b.n	8007230 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff f858 	bl	8006298 <LL_ADC_IsEnabled>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff f828 	bl	8006248 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071f8:	f7fe fe5e 	bl	8005eb8 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d914      	bls.n	8007230 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d00d      	beq.n	8007230 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007218:	f043 0210 	orr.w	r2, r3, #16
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007224:	f043 0201 	orr.w	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e007      	b.n	8007240 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b01      	cmp	r3, #1
 800723c:	d1cf      	bne.n	80071de <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	8000003f 	.word	0x8000003f
 800724c:	50000100 	.word	0x50000100
 8007250:	50000300 	.word	0x50000300
 8007254:	50000700 	.word	0x50000700
 8007258:	2000018c 	.word	0x2000018c
 800725c:	053e2d63 	.word	0x053e2d63

08007260 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff f826 	bl	80062be <LL_ADC_IsDisableOngoing>
 8007272:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff f80d 	bl	8006298 <LL_ADC_IsEnabled>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d047      	beq.n	8007314 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d144      	bne.n	8007314 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 030d 	and.w	r3, r3, #13
 8007294:	2b01      	cmp	r3, #1
 8007296:	d10c      	bne.n	80072b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe ffe7 	bl	8006270 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2203      	movs	r2, #3
 80072a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80072aa:	f7fe fe05 	bl	8005eb8 <HAL_GetTick>
 80072ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80072b0:	e029      	b.n	8007306 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b6:	f043 0210 	orr.w	r2, r3, #16
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c2:	f043 0201 	orr.w	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e023      	b.n	8007316 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80072ce:	f7fe fdf3 	bl	8005eb8 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d914      	bls.n	8007306 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00d      	beq.n	8007306 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ee:	f043 0210 	orr.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e007      	b.n	8007316 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1dc      	bne.n	80072ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007330:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007334:	2b00      	cmp	r3, #0
 8007336:	d14b      	bne.n	80073d0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800733c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d021      	beq.n	8007396 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fe8c 	bl	8006074 <LL_ADC_REG_IsTriggerSourceSWStart>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d032      	beq.n	80073c8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d12b      	bne.n	80073c8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11f      	bne.n	80073c8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	f043 0201 	orr.w	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007394:	e018      	b.n	80073c8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d111      	bne.n	80073c8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d105      	bne.n	80073c8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c0:	f043 0201 	orr.w	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff fa55 	bl	8006878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80073ce:	e00e      	b.n	80073ee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff fa5f 	bl	80068a0 <HAL_ADC_ErrorCallback>
}
 80073e2:	e004      	b.n	80073ee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fa41 	bl	800688c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007430:	f043 0204 	orr.w	r2, r3, #4
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fa31 	bl	80068a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <LL_ADC_IsEnabled>:
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <LL_ADC_IsEnabled+0x18>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <LL_ADC_IsEnabled+0x1a>
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <LL_ADC_StartCalibration>:
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800747e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007488:	4313      	orrs	r3, r2
 800748a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	609a      	str	r2, [r3, #8]
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <LL_ADC_IsCalibrationOnGoing>:
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b2:	d101      	bne.n	80074b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d101      	bne.n	80074de <LL_ADC_REG_IsConversionOngoing+0x18>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_ADCEx_Calibration_Start+0x1c>
 8007504:	2302      	movs	r3, #2
 8007506:	e04d      	b.n	80075a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fea5 	bl	8007260 <ADC_Disable>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d136      	bne.n	800758e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007524:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007528:	f023 0302 	bic.w	r3, r3, #2
 800752c:	f043 0202 	orr.w	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ff96 	bl	800746c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007540:	e014      	b.n	800756c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	3301      	adds	r3, #1
 8007546:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4a18      	ldr	r2, [pc, #96]	@ (80075ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d90d      	bls.n	800756c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007554:	f023 0312 	bic.w	r3, r3, #18
 8007558:	f043 0210 	orr.w	r2, r3, #16
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e01b      	b.n	80075a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff94 	bl	800749e <LL_ADC_IsCalibrationOnGoing>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e2      	bne.n	8007542 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007580:	f023 0303 	bic.w	r3, r3, #3
 8007584:	f043 0201 	orr.w	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800758c:	e005      	b.n	800759a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007592:	f043 0210 	orr.w	r2, r3, #16
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	0004de01 	.word	0x0004de01

080075b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b0a1      	sub	sp, #132	@ 0x84
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e0e7      	b.n	800779e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80075d6:	2300      	movs	r3, #0
 80075d8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80075da:	2300      	movs	r3, #0
 80075dc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075e6:	d102      	bne.n	80075ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80075e8:	4b6f      	ldr	r3, [pc, #444]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	e009      	b.n	8007602 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a6e      	ldr	r2, [pc, #440]	@ (80077ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d102      	bne.n	80075fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80075f8:	4b6d      	ldr	r3, [pc, #436]	@ (80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	e001      	b.n	8007602 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0be      	b.n	800779e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff4f 	bl	80074c6 <LL_ADC_REG_IsConversionOngoing>
 8007628:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff ff49 	bl	80074c6 <LL_ADC_REG_IsConversionOngoing>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 80a0 	bne.w	800777c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800763c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800763e:	2b00      	cmp	r3, #0
 8007640:	f040 809c 	bne.w	800777c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800764c:	d004      	beq.n	8007658 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a55      	ldr	r2, [pc, #340]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d101      	bne.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007658:	4b56      	ldr	r3, [pc, #344]	@ (80077b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800765a:	e000      	b.n	800765e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800765c:	4b56      	ldr	r3, [pc, #344]	@ (80077b8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800765e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d04b      	beq.n	8007700 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007668:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	6859      	ldr	r1, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800767a:	035b      	lsls	r3, r3, #13
 800767c:	430b      	orrs	r3, r1
 800767e:	431a      	orrs	r2, r3
 8007680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007682:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800768c:	d004      	beq.n	8007698 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a45      	ldr	r2, [pc, #276]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d10f      	bne.n	80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007698:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800769c:	f7ff fed3 	bl	8007446 <LL_ADC_IsEnabled>
 80076a0:	4604      	mov	r4, r0
 80076a2:	4841      	ldr	r0, [pc, #260]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076a4:	f7ff fecf 	bl	8007446 <LL_ADC_IsEnabled>
 80076a8:	4603      	mov	r3, r0
 80076aa:	4323      	orrs	r3, r4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	e012      	b.n	80076de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80076b8:	483c      	ldr	r0, [pc, #240]	@ (80077ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80076ba:	f7ff fec4 	bl	8007446 <LL_ADC_IsEnabled>
 80076be:	4604      	mov	r4, r0
 80076c0:	483b      	ldr	r0, [pc, #236]	@ (80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80076c2:	f7ff fec0 	bl	8007446 <LL_ADC_IsEnabled>
 80076c6:	4603      	mov	r3, r0
 80076c8:	431c      	orrs	r4, r3
 80076ca:	483c      	ldr	r0, [pc, #240]	@ (80077bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80076cc:	f7ff febb 	bl	8007446 <LL_ADC_IsEnabled>
 80076d0:	4603      	mov	r3, r0
 80076d2:	4323      	orrs	r3, r4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf0c      	ite	eq
 80076d8:	2301      	moveq	r3, #1
 80076da:	2300      	movne	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d056      	beq.n	8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80076e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80076ea:	f023 030f 	bic.w	r3, r3, #15
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	6811      	ldr	r1, [r2, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	6892      	ldr	r2, [r2, #8]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	431a      	orrs	r2, r3
 80076fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076fe:	e047      	b.n	8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800770a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007714:	d004      	beq.n	8007720 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a23      	ldr	r2, [pc, #140]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10f      	bne.n	8007740 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007720:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007724:	f7ff fe8f 	bl	8007446 <LL_ADC_IsEnabled>
 8007728:	4604      	mov	r4, r0
 800772a:	481f      	ldr	r0, [pc, #124]	@ (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800772c:	f7ff fe8b 	bl	8007446 <LL_ADC_IsEnabled>
 8007730:	4603      	mov	r3, r0
 8007732:	4323      	orrs	r3, r4
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e012      	b.n	8007766 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007740:	481a      	ldr	r0, [pc, #104]	@ (80077ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007742:	f7ff fe80 	bl	8007446 <LL_ADC_IsEnabled>
 8007746:	4604      	mov	r4, r0
 8007748:	4819      	ldr	r0, [pc, #100]	@ (80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800774a:	f7ff fe7c 	bl	8007446 <LL_ADC_IsEnabled>
 800774e:	4603      	mov	r3, r0
 8007750:	431c      	orrs	r4, r3
 8007752:	481a      	ldr	r0, [pc, #104]	@ (80077bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007754:	f7ff fe77 	bl	8007446 <LL_ADC_IsEnabled>
 8007758:	4603      	mov	r3, r0
 800775a:	4323      	orrs	r3, r4
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf0c      	ite	eq
 8007760:	2301      	moveq	r3, #1
 8007762:	2300      	movne	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d012      	beq.n	8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800776a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007772:	f023 030f 	bic.w	r3, r3, #15
 8007776:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007778:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800777a:	e009      	b.n	8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007780:	f043 0220 	orr.w	r2, r3, #32
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800778e:	e000      	b.n	8007792 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007790:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800779a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3784      	adds	r7, #132	@ 0x84
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd90      	pop	{r4, r7, pc}
 80077a6:	bf00      	nop
 80077a8:	50000100 	.word	0x50000100
 80077ac:	50000400 	.word	0x50000400
 80077b0:	50000500 	.word	0x50000500
 80077b4:	50000300 	.word	0x50000300
 80077b8:	50000700 	.word	0x50000700
 80077bc:	50000600 	.word	0x50000600

080077c0 <__NVIC_SetPriorityGrouping>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <__NVIC_SetPriorityGrouping+0x44>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077dc:	4013      	ands	r3, r2
 80077de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077f2:	4a04      	ldr	r2, [pc, #16]	@ (8007804 <__NVIC_SetPriorityGrouping+0x44>)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	60d3      	str	r3, [r2, #12]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	e000ed00 	.word	0xe000ed00

08007808 <__NVIC_GetPriorityGrouping>:
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__NVIC_GetPriorityGrouping+0x18>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	f003 0307 	and.w	r3, r3, #7
}
 8007816:	4618      	mov	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	e000ed00 	.word	0xe000ed00

08007824 <__NVIC_EnableIRQ>:
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800782e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007832:	2b00      	cmp	r3, #0
 8007834:	db0b      	blt.n	800784e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	f003 021f 	and.w	r2, r3, #31
 800783c:	4907      	ldr	r1, [pc, #28]	@ (800785c <__NVIC_EnableIRQ+0x38>)
 800783e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2001      	movs	r0, #1
 8007846:	fa00 f202 	lsl.w	r2, r0, r2
 800784a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	e000e100 	.word	0xe000e100

08007860 <__NVIC_SetPriority>:
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800786c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007870:	2b00      	cmp	r3, #0
 8007872:	db0a      	blt.n	800788a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	490c      	ldr	r1, [pc, #48]	@ (80078ac <__NVIC_SetPriority+0x4c>)
 800787a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787e:	0112      	lsls	r2, r2, #4
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	440b      	add	r3, r1
 8007884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007888:	e00a      	b.n	80078a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	4908      	ldr	r1, [pc, #32]	@ (80078b0 <__NVIC_SetPriority+0x50>)
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	3b04      	subs	r3, #4
 8007898:	0112      	lsls	r2, r2, #4
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	440b      	add	r3, r1
 800789e:	761a      	strb	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	e000e100 	.word	0xe000e100
 80078b0:	e000ed00 	.word	0xe000ed00

080078b4 <NVIC_EncodePriority>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	@ 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f1c3 0307 	rsb	r3, r3, #7
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	bf28      	it	cs
 80078d2:	2304      	movcs	r3, #4
 80078d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3304      	adds	r3, #4
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d902      	bls.n	80078e4 <NVIC_EncodePriority+0x30>
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3b03      	subs	r3, #3
 80078e2:	e000      	b.n	80078e6 <NVIC_EncodePriority+0x32>
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43da      	mvns	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	401a      	ands	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	fa01 f303 	lsl.w	r3, r1, r3
 8007906:	43d9      	mvns	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	4313      	orrs	r3, r2
}
 800790e:	4618      	mov	r0, r3
 8007910:	3724      	adds	r7, #36	@ 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b01      	subs	r3, #1
 8007928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800792c:	d301      	bcc.n	8007932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800792e:	2301      	movs	r3, #1
 8007930:	e00f      	b.n	8007952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007932:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <SysTick_Config+0x40>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3b01      	subs	r3, #1
 8007938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800793a:	210f      	movs	r1, #15
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	f7ff ff8e 	bl	8007860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007944:	4b05      	ldr	r3, [pc, #20]	@ (800795c <SysTick_Config+0x40>)
 8007946:	2200      	movs	r2, #0
 8007948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800794a:	4b04      	ldr	r3, [pc, #16]	@ (800795c <SysTick_Config+0x40>)
 800794c:	2207      	movs	r2, #7
 800794e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000e010 	.word	0xe000e010

08007960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff29 	bl	80077c0 <__NVIC_SetPriorityGrouping>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	4603      	mov	r3, r0
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007984:	f7ff ff40 	bl	8007808 <__NVIC_GetPriorityGrouping>
 8007988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	6978      	ldr	r0, [r7, #20]
 8007990:	f7ff ff90 	bl	80078b4 <NVIC_EncodePriority>
 8007994:	4602      	mov	r2, r0
 8007996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff ff5f 	bl	8007860 <__NVIC_SetPriority>
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	4603      	mov	r3, r0
 80079b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ff33 	bl	8007824 <__NVIC_EnableIRQ>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff ffa4 	bl	800791c <SysTick_Config>
 80079d4:	4603      	mov	r3, r0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e08d      	b.n	8007b0e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	4b47      	ldr	r3, [pc, #284]	@ (8007b18 <HAL_DMA_Init+0x138>)
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d80f      	bhi.n	8007a1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	4b45      	ldr	r3, [pc, #276]	@ (8007b1c <HAL_DMA_Init+0x13c>)
 8007a06:	4413      	add	r3, r2
 8007a08:	4a45      	ldr	r2, [pc, #276]	@ (8007b20 <HAL_DMA_Init+0x140>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	091b      	lsrs	r3, r3, #4
 8007a10:	009a      	lsls	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a42      	ldr	r2, [pc, #264]	@ (8007b24 <HAL_DMA_Init+0x144>)
 8007a1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a1c:	e00e      	b.n	8007a3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	4b40      	ldr	r3, [pc, #256]	@ (8007b28 <HAL_DMA_Init+0x148>)
 8007a26:	4413      	add	r3, r2
 8007a28:	4a3d      	ldr	r2, [pc, #244]	@ (8007b20 <HAL_DMA_Init+0x140>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	009a      	lsls	r2, r3, #2
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a3c      	ldr	r2, [pc, #240]	@ (8007b2c <HAL_DMA_Init+0x14c>)
 8007a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa76 	bl	8007f80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a9c:	d102      	bne.n	8007aa4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ab8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d010      	beq.n	8007ae4 <HAL_DMA_Init+0x104>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d80c      	bhi.n	8007ae4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa96 	bl	8007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	e008      	b.n	8007af6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40020407 	.word	0x40020407
 8007b1c:	bffdfff8 	.word	0xbffdfff8
 8007b20:	cccccccd 	.word	0xcccccccd
 8007b24:	40020000 	.word	0x40020000
 8007b28:	bffdfbf8 	.word	0xbffdfbf8
 8007b2c:	40020400 	.word	0x40020400

08007b30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_DMA_Start_IT+0x20>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e066      	b.n	8007c1e <HAL_DMA_Start_IT+0xee>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d155      	bne.n	8007c10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f9bb 	bl	8007f04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 020e 	orr.w	r2, r2, #14
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e00f      	b.n	8007bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0204 	bic.w	r2, r2, #4
 8007bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 020a 	orr.w	r2, r2, #10
 8007bc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007be4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e005      	b.n	8007c1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d005      	beq.n	8007c4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
 8007c48:	e037      	b.n	8007cba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 020e 	bic.w	r2, r2, #14
 8007c58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7e:	f003 021f 	and.w	r2, r3, #31
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	2101      	movs	r1, #1
 8007c88:	fa01 f202 	lsl.w	r2, r1, r2
 8007c8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00c      	beq.n	8007cba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007caa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007cb8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d00d      	beq.n	8007d0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	e047      	b.n	8007d9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 020e 	bic.w	r2, r2, #14
 8007d1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d40:	f003 021f 	and.w	r2, r3, #31
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d48:	2101      	movs	r1, #1
 8007d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00c      	beq.n	8007d7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
    }
  }
  return status;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	409a      	lsls	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d026      	beq.n	8007e20 <HAL_DMA_IRQHandler+0x7a>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d021      	beq.n	8007e20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0204 	bic.w	r2, r2, #4
 8007df8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfe:	f003 021f 	and.w	r2, r3, #31
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	2104      	movs	r1, #4
 8007e08:	fa01 f202 	lsl.w	r2, r1, r2
 8007e0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d071      	beq.n	8007efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e1e:	e06c      	b.n	8007efa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2202      	movs	r2, #2
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02e      	beq.n	8007e92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d029      	beq.n	8007e92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 020a 	bic.w	r2, r2, #10
 8007e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e68:	f003 021f 	and.w	r2, r3, #31
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	2102      	movs	r1, #2
 8007e72:	fa01 f202 	lsl.w	r2, r1, r2
 8007e76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d038      	beq.n	8007efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e90:	e033      	b.n	8007efa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d02a      	beq.n	8007efc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d025      	beq.n	8007efc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 020e 	bic.w	r2, r2, #14
 8007ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec4:	f003 021f 	and.w	r2, r3, #31
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ecc:	2101      	movs	r1, #1
 8007ece:	fa01 f202 	lsl.w	r2, r1, r2
 8007ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
}
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	f003 021f 	and.w	r2, r3, #31
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d108      	bne.n	8007f64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f62:	e007      	b.n	8007f74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4b16      	ldr	r3, [pc, #88]	@ (8007fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d802      	bhi.n	8007f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007f94:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e001      	b.n	8007f9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007f9a:	4b15      	ldr	r3, [pc, #84]	@ (8007ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	3b08      	subs	r3, #8
 8007faa:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb8:	089b      	lsrs	r3, r3, #2
 8007fba:	009a      	lsls	r2, r3, #2
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007fca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40020407 	.word	0x40020407
 8007fec:	40020800 	.word	0x40020800
 8007ff0:	40020820 	.word	0x40020820
 8007ff4:	cccccccd 	.word	0xcccccccd
 8007ff8:	40020880 	.word	0x40020880

08007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a08      	ldr	r2, [pc, #32]	@ (8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800801e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b01      	subs	r3, #1
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	2201      	movs	r2, #1
 800802a:	409a      	lsls	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	1000823f 	.word	0x1000823f
 8008040:	40020940 	.word	0x40020940

08008044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008052:	e15a      	b.n	800830a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	2101      	movs	r1, #1
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	fa01 f303 	lsl.w	r3, r1, r3
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 814c 	beq.w	8008304 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	2b01      	cmp	r3, #1
 8008076:	d005      	beq.n	8008084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008080:	2b02      	cmp	r3, #2
 8008082:	d130      	bne.n	80080e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	2203      	movs	r2, #3
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080ba:	2201      	movs	r2, #1
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	43db      	mvns	r3, r3
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4013      	ands	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	091b      	lsrs	r3, r3, #4
 80080d0:	f003 0201 	and.w	r2, r3, #1
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d017      	beq.n	8008122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	2203      	movs	r2, #3
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	43db      	mvns	r3, r3
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d123      	bne.n	8008176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	08da      	lsrs	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3208      	adds	r2, #8
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	220f      	movs	r2, #15
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	08da      	lsrs	r2, r3, #3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3208      	adds	r2, #8
 8008170:	6939      	ldr	r1, [r7, #16]
 8008172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	2203      	movs	r2, #3
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f003 0203 	and.w	r2, r3, #3
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80a6 	beq.w	8008304 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80081c4:	4b58      	ldr	r3, [pc, #352]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081d0:	4a56      	ldr	r2, [pc, #344]	@ (800832c <HAL_GPIO_Init+0x2e8>)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	3302      	adds	r3, #2
 80081d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	220f      	movs	r2, #15
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43db      	mvns	r3, r3
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4013      	ands	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80081fa:	d01f      	beq.n	800823c <HAL_GPIO_Init+0x1f8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a4c      	ldr	r2, [pc, #304]	@ (8008330 <HAL_GPIO_Init+0x2ec>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d019      	beq.n	8008238 <HAL_GPIO_Init+0x1f4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <HAL_GPIO_Init+0x2f0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d013      	beq.n	8008234 <HAL_GPIO_Init+0x1f0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a4a      	ldr	r2, [pc, #296]	@ (8008338 <HAL_GPIO_Init+0x2f4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00d      	beq.n	8008230 <HAL_GPIO_Init+0x1ec>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a49      	ldr	r2, [pc, #292]	@ (800833c <HAL_GPIO_Init+0x2f8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <HAL_GPIO_Init+0x1e8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a48      	ldr	r2, [pc, #288]	@ (8008340 <HAL_GPIO_Init+0x2fc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d101      	bne.n	8008228 <HAL_GPIO_Init+0x1e4>
 8008224:	2305      	movs	r3, #5
 8008226:	e00a      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008228:	2306      	movs	r3, #6
 800822a:	e008      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 800822c:	2304      	movs	r3, #4
 800822e:	e006      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008230:	2303      	movs	r3, #3
 8008232:	e004      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008234:	2302      	movs	r3, #2
 8008236:	e002      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 800823c:	2300      	movs	r3, #0
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	f002 0203 	and.w	r2, r2, #3
 8008244:	0092      	lsls	r2, r2, #2
 8008246:	4093      	lsls	r3, r2
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800824e:	4937      	ldr	r1, [pc, #220]	@ (800832c <HAL_GPIO_Init+0x2e8>)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	3302      	adds	r3, #2
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800825c:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <HAL_GPIO_Init+0x300>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	43db      	mvns	r3, r3
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4013      	ands	r3, r2
 800826a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008280:	4a30      	ldr	r2, [pc, #192]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008286:	4b2f      	ldr	r3, [pc, #188]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	43db      	mvns	r3, r3
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4013      	ands	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082aa:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	43db      	mvns	r3, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80082da:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	43db      	mvns	r3, r3
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4013      	ands	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082fe:	4a11      	ldr	r2, [pc, #68]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	3301      	adds	r3, #1
 8008308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	fa22 f303 	lsr.w	r3, r2, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f47f ae9d 	bne.w	8008054 <HAL_GPIO_Init+0x10>
  }
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	40021000 	.word	0x40021000
 800832c:	40010000 	.word	0x40010000
 8008330:	48000400 	.word	0x48000400
 8008334:	48000800 	.word	0x48000800
 8008338:	48000c00 	.word	0x48000c00
 800833c:	48001000 	.word	0x48001000
 8008340:	48001400 	.word	0x48001400
 8008344:	40010400 	.word	0x40010400

08008348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	887b      	ldrh	r3, [r7, #2]
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
 8008364:	e001      	b.n	800836a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	807b      	strh	r3, [r7, #2]
 8008384:	4613      	mov	r3, r2
 8008386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008388:	787b      	ldrb	r3, [r7, #1]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800838e:	887a      	ldrh	r2, [r7, #2]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008394:	e002      	b.n	800839c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008396:	887a      	ldrh	r2, [r7, #2]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083b2:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083b4:	695a      	ldr	r2, [r3, #20]
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083be:	4a05      	ldr	r2, [pc, #20]	@ (80083d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fb ffe2 	bl	8004390 <HAL_GPIO_EXTI_Callback>
  }
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40010400 	.word	0x40010400

080083d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d141      	bne.n	800846a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80083e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f2:	d131      	bne.n	8008458 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083f4:	4b47      	ldr	r3, [pc, #284]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fa:	4a46      	ldr	r2, [pc, #280]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008404:	4b43      	ldr	r3, [pc, #268]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800840c:	4a41      	ldr	r2, [pc, #260]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800840e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008414:	4b40      	ldr	r3, [pc, #256]	@ (8008518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2232      	movs	r2, #50	@ 0x32
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	4a3f      	ldr	r2, [pc, #252]	@ (800851c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	0c9b      	lsrs	r3, r3, #18
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800842a:	e002      	b.n	8008432 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3b01      	subs	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008432:	4b38      	ldr	r3, [pc, #224]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800843a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800843e:	d102      	bne.n	8008446 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1f2      	bne.n	800842c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008446:	4b33      	ldr	r3, [pc, #204]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008452:	d158      	bne.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e057      	b.n	8008508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008458:	4b2e      	ldr	r3, [pc, #184]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800845a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845e:	4a2d      	ldr	r2, [pc, #180]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008468:	e04d      	b.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008470:	d141      	bne.n	80084f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008472:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800847a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800847e:	d131      	bne.n	80084e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008480:	4b24      	ldr	r3, [pc, #144]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008486:	4a23      	ldr	r2, [pc, #140]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800848c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008490:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008498:	4a1e      	ldr	r2, [pc, #120]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800849a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800849e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2232      	movs	r2, #50	@ 0x32
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	4a1c      	ldr	r2, [pc, #112]	@ (800851c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80084ac:	fba2 2303 	umull	r2, r3, r2, r3
 80084b0:	0c9b      	lsrs	r3, r3, #18
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084b6:	e002      	b.n	80084be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084be:	4b15      	ldr	r3, [pc, #84]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ca:	d102      	bne.n	80084d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f2      	bne.n	80084b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084d2:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084de:	d112      	bne.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e011      	b.n	8008508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80084f4:	e007      	b.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80084f6:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80084fe:	4a05      	ldr	r2, [pc, #20]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008504:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	40007000 	.word	0x40007000
 8008518:	2000018c 	.word	0x2000018c
 800851c:	431bde83 	.word	0x431bde83

08008520 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008524:	4b05      	ldr	r3, [pc, #20]	@ (800853c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	4a04      	ldr	r2, [pc, #16]	@ (800853c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800852a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800852e:	6093      	str	r3, [r2, #8]
}
 8008530:	bf00      	nop
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40007000 	.word	0x40007000

08008540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e2fe      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d075      	beq.n	800864a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800855e:	4b97      	ldr	r3, [pc, #604]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 030c 	and.w	r3, r3, #12
 8008566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008568:	4b94      	ldr	r3, [pc, #592]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b0c      	cmp	r3, #12
 8008576:	d102      	bne.n	800857e <HAL_RCC_OscConfig+0x3e>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d002      	beq.n	8008584 <HAL_RCC_OscConfig+0x44>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008584:	4b8d      	ldr	r3, [pc, #564]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d05b      	beq.n	8008648 <HAL_RCC_OscConfig+0x108>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d157      	bne.n	8008648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e2d9      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a4:	d106      	bne.n	80085b4 <HAL_RCC_OscConfig+0x74>
 80085a6:	4b85      	ldr	r3, [pc, #532]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a84      	ldr	r2, [pc, #528]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	e01d      	b.n	80085f0 <HAL_RCC_OscConfig+0xb0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCC_OscConfig+0x98>
 80085be:	4b7f      	ldr	r3, [pc, #508]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a7e      	ldr	r2, [pc, #504]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	4b7c      	ldr	r3, [pc, #496]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7b      	ldr	r2, [pc, #492]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e00b      	b.n	80085f0 <HAL_RCC_OscConfig+0xb0>
 80085d8:	4b78      	ldr	r3, [pc, #480]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a77      	ldr	r2, [pc, #476]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	4b75      	ldr	r3, [pc, #468]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a74      	ldr	r2, [pc, #464]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80085ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d013      	beq.n	8008620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f8:	f7fd fc5e 	bl	8005eb8 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008600:	f7fd fc5a 	bl	8005eb8 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b64      	cmp	r3, #100	@ 0x64
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e29e      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008612:	4b6a      	ldr	r3, [pc, #424]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0f0      	beq.n	8008600 <HAL_RCC_OscConfig+0xc0>
 800861e:	e014      	b.n	800864a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008620:	f7fd fc4a 	bl	8005eb8 <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008628:	f7fd fc46 	bl	8005eb8 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	@ 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e28a      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800863a:	4b60      	ldr	r3, [pc, #384]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f0      	bne.n	8008628 <HAL_RCC_OscConfig+0xe8>
 8008646:	e000      	b.n	800864a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d075      	beq.n	8008742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008656:	4b59      	ldr	r3, [pc, #356]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 030c 	and.w	r3, r3, #12
 800865e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008660:	4b56      	ldr	r3, [pc, #344]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b0c      	cmp	r3, #12
 800866e:	d102      	bne.n	8008676 <HAL_RCC_OscConfig+0x136>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d002      	beq.n	800867c <HAL_RCC_OscConfig+0x13c>
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b04      	cmp	r3, #4
 800867a:	d11f      	bne.n	80086bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800867c:	4b4f      	ldr	r3, [pc, #316]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_RCC_OscConfig+0x154>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e25d      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008694:	4b49      	ldr	r3, [pc, #292]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	061b      	lsls	r3, r3, #24
 80086a2:	4946      	ldr	r1, [pc, #280]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086a8:	4b45      	ldr	r3, [pc, #276]	@ (80087c0 <HAL_RCC_OscConfig+0x280>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fd fbb7 	bl	8005e20 <HAL_InitTick>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d043      	beq.n	8008740 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e249      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d023      	beq.n	800870c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086c4:	4b3d      	ldr	r3, [pc, #244]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a3c      	ldr	r2, [pc, #240]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80086ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d0:	f7fd fbf2 	bl	8005eb8 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086d8:	f7fd fbee 	bl	8005eb8 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e232      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086ea:	4b34      	ldr	r3, [pc, #208]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0f0      	beq.n	80086d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f6:	4b31      	ldr	r3, [pc, #196]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	061b      	lsls	r3, r3, #24
 8008704:	492d      	ldr	r1, [pc, #180]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008706:	4313      	orrs	r3, r2
 8008708:	604b      	str	r3, [r1, #4]
 800870a:	e01a      	b.n	8008742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800870c:	4b2b      	ldr	r3, [pc, #172]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a2a      	ldr	r2, [pc, #168]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fd fbce 	bl	8005eb8 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008720:	f7fd fbca 	bl	8005eb8 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e20e      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008732:	4b22      	ldr	r3, [pc, #136]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x1e0>
 800873e:	e000      	b.n	8008742 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0308 	and.w	r3, r3, #8
 800874a:	2b00      	cmp	r3, #0
 800874c:	d041      	beq.n	80087d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01c      	beq.n	8008790 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008756:	4b19      	ldr	r3, [pc, #100]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800875c:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008766:	f7fd fba7 	bl	8005eb8 <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800876c:	e008      	b.n	8008780 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800876e:	f7fd fba3 	bl	8005eb8 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e1e7      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008780:	4b0e      	ldr	r3, [pc, #56]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0ef      	beq.n	800876e <HAL_RCC_OscConfig+0x22e>
 800878e:	e020      	b.n	80087d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008790:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008796:	4a09      	ldr	r2, [pc, #36]	@ (80087bc <HAL_RCC_OscConfig+0x27c>)
 8008798:	f023 0301 	bic.w	r3, r3, #1
 800879c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a0:	f7fd fb8a 	bl	8005eb8 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087a6:	e00d      	b.n	80087c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a8:	f7fd fb86 	bl	8005eb8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d906      	bls.n	80087c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e1ca      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
 80087ba:	bf00      	nop
 80087bc:	40021000 	.word	0x40021000
 80087c0:	20000190 	.word	0x20000190
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087c4:	4b8c      	ldr	r3, [pc, #560]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80087c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1ea      	bne.n	80087a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80a6 	beq.w	800892c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087e0:	2300      	movs	r3, #0
 80087e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80087e4:	4b84      	ldr	r3, [pc, #528]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80087e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_RCC_OscConfig+0x2b4>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <HAL_RCC_OscConfig+0x2b6>
 80087f4:	2300      	movs	r3, #0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087fa:	4b7f      	ldr	r3, [pc, #508]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fe:	4a7e      	ldr	r2, [pc, #504]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008804:	6593      	str	r3, [r2, #88]	@ 0x58
 8008806:	4b7c      	ldr	r3, [pc, #496]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008812:	2301      	movs	r3, #1
 8008814:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008816:	4b79      	ldr	r3, [pc, #484]	@ (80089fc <HAL_RCC_OscConfig+0x4bc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d118      	bne.n	8008854 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008822:	4b76      	ldr	r3, [pc, #472]	@ (80089fc <HAL_RCC_OscConfig+0x4bc>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a75      	ldr	r2, [pc, #468]	@ (80089fc <HAL_RCC_OscConfig+0x4bc>)
 8008828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800882c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800882e:	f7fd fb43 	bl	8005eb8 <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008836:	f7fd fb3f 	bl	8005eb8 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e183      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008848:	4b6c      	ldr	r3, [pc, #432]	@ (80089fc <HAL_RCC_OscConfig+0x4bc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d108      	bne.n	800886e <HAL_RCC_OscConfig+0x32e>
 800885c:	4b66      	ldr	r3, [pc, #408]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800885e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008862:	4a65      	ldr	r2, [pc, #404]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800886c:	e024      	b.n	80088b8 <HAL_RCC_OscConfig+0x378>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b05      	cmp	r3, #5
 8008874:	d110      	bne.n	8008898 <HAL_RCC_OscConfig+0x358>
 8008876:	4b60      	ldr	r3, [pc, #384]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887c:	4a5e      	ldr	r2, [pc, #376]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800887e:	f043 0304 	orr.w	r3, r3, #4
 8008882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008886:	4b5c      	ldr	r3, [pc, #368]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800888c:	4a5a      	ldr	r2, [pc, #360]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008896:	e00f      	b.n	80088b8 <HAL_RCC_OscConfig+0x378>
 8008898:	4b57      	ldr	r3, [pc, #348]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889e:	4a56      	ldr	r2, [pc, #344]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088a8:	4b53      	ldr	r3, [pc, #332]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80088aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ae:	4a52      	ldr	r2, [pc, #328]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80088b0:	f023 0304 	bic.w	r3, r3, #4
 80088b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d016      	beq.n	80088ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fd fafa 	bl	8005eb8 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088c6:	e00a      	b.n	80088de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c8:	f7fd faf6 	bl	8005eb8 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e138      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088de:	4b46      	ldr	r3, [pc, #280]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0ed      	beq.n	80088c8 <HAL_RCC_OscConfig+0x388>
 80088ec:	e015      	b.n	800891a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ee:	f7fd fae3 	bl	8005eb8 <HAL_GetTick>
 80088f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088f4:	e00a      	b.n	800890c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088f6:	f7fd fadf 	bl	8005eb8 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008904:	4293      	cmp	r3, r2
 8008906:	d901      	bls.n	800890c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e121      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800890c:	4b3a      	ldr	r3, [pc, #232]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800890e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1ed      	bne.n	80088f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800891a:	7ffb      	ldrb	r3, [r7, #31]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d105      	bne.n	800892c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008920:	4b35      	ldr	r3, [pc, #212]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008924:	4a34      	ldr	r2, [pc, #208]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800892a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d03c      	beq.n	80089b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01c      	beq.n	800897a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008940:	4b2d      	ldr	r3, [pc, #180]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008946:	4a2c      	ldr	r2, [pc, #176]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008948:	f043 0301 	orr.w	r3, r3, #1
 800894c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7fd fab2 	bl	8005eb8 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008958:	f7fd faae 	bl	8005eb8 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e0f2      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800896a:	4b23      	ldr	r3, [pc, #140]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800896c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0ef      	beq.n	8008958 <HAL_RCC_OscConfig+0x418>
 8008978:	e01b      	b.n	80089b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800897a:	4b1f      	ldr	r3, [pc, #124]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 800897c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008980:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898a:	f7fd fa95 	bl	8005eb8 <HAL_GetTick>
 800898e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008990:	e008      	b.n	80089a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008992:	f7fd fa91 	bl	8005eb8 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0d5      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089a4:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80089a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ef      	bne.n	8008992 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80c9 	beq.w	8008b4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089bc:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 030c 	and.w	r3, r3, #12
 80089c4:	2b0c      	cmp	r3, #12
 80089c6:	f000 8083 	beq.w	8008ad0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d15e      	bne.n	8008a90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a08      	ldr	r2, [pc, #32]	@ (80089f8 <HAL_RCC_OscConfig+0x4b8>)
 80089d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089de:	f7fd fa6b 	bl	8005eb8 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089e4:	e00c      	b.n	8008a00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e6:	f7fd fa67 	bl	8005eb8 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d905      	bls.n	8008a00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e0ab      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
 80089f8:	40021000 	.word	0x40021000
 80089fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a00:	4b55      	ldr	r3, [pc, #340]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1ec      	bne.n	80089e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a0c:	4b52      	ldr	r3, [pc, #328]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	4b52      	ldr	r3, [pc, #328]	@ (8008b5c <HAL_RCC_OscConfig+0x61c>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6a11      	ldr	r1, [r2, #32]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	0112      	lsls	r2, r2, #4
 8008a20:	4311      	orrs	r1, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a26:	0212      	lsls	r2, r2, #8
 8008a28:	4311      	orrs	r1, r2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a2e:	0852      	lsrs	r2, r2, #1
 8008a30:	3a01      	subs	r2, #1
 8008a32:	0552      	lsls	r2, r2, #21
 8008a34:	4311      	orrs	r1, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a3a:	0852      	lsrs	r2, r2, #1
 8008a3c:	3a01      	subs	r2, #1
 8008a3e:	0652      	lsls	r2, r2, #25
 8008a40:	4311      	orrs	r1, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a46:	06d2      	lsls	r2, r2, #27
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	4943      	ldr	r1, [pc, #268]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a50:	4b41      	ldr	r3, [pc, #260]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a40      	ldr	r2, [pc, #256]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	4a3d      	ldr	r2, [pc, #244]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a68:	f7fd fa26 	bl	8005eb8 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a70:	f7fd fa22 	bl	8005eb8 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e066      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a82:	4b35      	ldr	r3, [pc, #212]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f0      	beq.n	8008a70 <HAL_RCC_OscConfig+0x530>
 8008a8e:	e05e      	b.n	8008b4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a90:	4b31      	ldr	r3, [pc, #196]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a30      	ldr	r2, [pc, #192]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9c:	f7fd fa0c 	bl	8005eb8 <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa4:	f7fd fa08 	bl	8005eb8 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e04c      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ab6:	4b28      	ldr	r3, [pc, #160]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008ac2:	4b25      	ldr	r3, [pc, #148]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	4924      	ldr	r1, [pc, #144]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008ac8:	4b25      	ldr	r3, [pc, #148]	@ (8008b60 <HAL_RCC_OscConfig+0x620>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	60cb      	str	r3, [r1, #12]
 8008ace:	e03e      	b.n	8008b4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e039      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008adc:	4b1e      	ldr	r3, [pc, #120]	@ (8008b58 <HAL_RCC_OscConfig+0x618>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f003 0203 	and.w	r2, r3, #3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d12c      	bne.n	8008b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afa:	3b01      	subs	r3, #1
 8008afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d123      	bne.n	8008b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d11b      	bne.n	8008b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d113      	bne.n	8008b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d109      	bne.n	8008b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	3b01      	subs	r3, #1
 8008b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d001      	beq.n	8008b4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	019f800c 	.word	0x019f800c
 8008b60:	feeefffc 	.word	0xfeeefffc

08008b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e11e      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b7c:	4b91      	ldr	r3, [pc, #580]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 030f 	and.w	r3, r3, #15
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d910      	bls.n	8008bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f023 020f 	bic.w	r2, r3, #15
 8008b92:	498c      	ldr	r1, [pc, #560]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9a:	4b8a      	ldr	r3, [pc, #552]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 030f 	and.w	r3, r3, #15
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d001      	beq.n	8008bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e106      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d073      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d129      	bne.n	8008c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bc0:	4b81      	ldr	r3, [pc, #516]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e0f4      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008bd0:	f000 f99e 	bl	8008f10 <RCC_GetSysClockFreqFromPLLSource>
 8008bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4a7c      	ldr	r2, [pc, #496]	@ (8008dcc <HAL_RCC_ClockConfig+0x268>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d93f      	bls.n	8008c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bde:	4b7a      	ldr	r3, [pc, #488]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d033      	beq.n	8008c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d12f      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008bfe:	4b72      	ldr	r3, [pc, #456]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c06:	4a70      	ldr	r2, [pc, #448]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c0e:	2380      	movs	r3, #128	@ 0x80
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e024      	b.n	8008c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d107      	bne.n	8008c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d109      	bne.n	8008c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e0c6      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c2c:	4b66      	ldr	r3, [pc, #408]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0be      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c3c:	f000 f8ce 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 8008c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4a61      	ldr	r2, [pc, #388]	@ (8008dcc <HAL_RCC_ClockConfig+0x268>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d909      	bls.n	8008c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c52:	4a5d      	ldr	r2, [pc, #372]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c5a:	2380      	movs	r3, #128	@ 0x80
 8008c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f023 0203 	bic.w	r2, r3, #3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4957      	ldr	r1, [pc, #348]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c70:	f7fd f922 	bl	8005eb8 <HAL_GetTick>
 8008c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c78:	f7fd f91e 	bl	8005eb8 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e095      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 020c 	and.w	r2, r3, #12
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d1eb      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d023      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cb8:	4b43      	ldr	r3, [pc, #268]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	4a42      	ldr	r2, [pc, #264]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ce0:	4b39      	ldr	r3, [pc, #228]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	4936      	ldr	r1, [pc, #216]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	608b      	str	r3, [r1, #8]
 8008cf2:	e008      	b.n	8008d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b80      	cmp	r3, #128	@ 0x80
 8008cf8:	d105      	bne.n	8008d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008cfa:	4b33      	ldr	r3, [pc, #204]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	4a32      	ldr	r2, [pc, #200]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d06:	4b2f      	ldr	r3, [pc, #188]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d21d      	bcs.n	8008d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d14:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f023 020f 	bic.w	r2, r3, #15
 8008d1c:	4929      	ldr	r1, [pc, #164]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d24:	f7fd f8c8 	bl	8005eb8 <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d2a:	e00a      	b.n	8008d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d2c:	f7fd f8c4 	bl	8005eb8 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e03b      	b.n	8008dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d42:	4b20      	ldr	r3, [pc, #128]	@ (8008dc4 <HAL_RCC_ClockConfig+0x260>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d1ed      	bne.n	8008d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4917      	ldr	r1, [pc, #92]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d7a:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	490f      	ldr	r1, [pc, #60]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d8e:	f000 f825 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 8008d92:	4602      	mov	r2, r0
 8008d94:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <HAL_RCC_ClockConfig+0x264>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	091b      	lsrs	r3, r3, #4
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	490c      	ldr	r1, [pc, #48]	@ (8008dd0 <HAL_RCC_ClockConfig+0x26c>)
 8008da0:	5ccb      	ldrb	r3, [r1, r3]
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd4 <HAL_RCC_ClockConfig+0x270>)
 8008dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008dae:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd8 <HAL_RCC_ClockConfig+0x274>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fd f834 	bl	8005e20 <HAL_InitTick>
 8008db8:	4603      	mov	r3, r0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40022000 	.word	0x40022000
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	04c4b400 	.word	0x04c4b400
 8008dd0:	0800e200 	.word	0x0800e200
 8008dd4:	2000018c 	.word	0x2000018c
 8008dd8:	20000190 	.word	0x20000190

08008ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008de2:	4b2c      	ldr	r3, [pc, #176]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f003 030c 	and.w	r3, r3, #12
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d102      	bne.n	8008df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008dee:	4b2a      	ldr	r3, [pc, #168]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	e047      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008df4:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f003 030c 	and.w	r3, r3, #12
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e00:	4b26      	ldr	r3, [pc, #152]	@ (8008e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e02:	613b      	str	r3, [r7, #16]
 8008e04:	e03e      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e06:	4b23      	ldr	r3, [pc, #140]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b0c      	cmp	r3, #12
 8008e10:	d136      	bne.n	8008e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e12:	4b20      	ldr	r3, [pc, #128]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	091b      	lsrs	r3, r3, #4
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	3301      	adds	r3, #1
 8008e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d10c      	bne.n	8008e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e30:	4a1a      	ldr	r2, [pc, #104]	@ (8008e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	4a16      	ldr	r2, [pc, #88]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e3a:	68d2      	ldr	r2, [r2, #12]
 8008e3c:	0a12      	lsrs	r2, r2, #8
 8008e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
 8008e46:	617b      	str	r3, [r7, #20]
      break;
 8008e48:	e00c      	b.n	8008e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e4a:	4a13      	ldr	r2, [pc, #76]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	4a10      	ldr	r2, [pc, #64]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e54:	68d2      	ldr	r2, [r2, #12]
 8008e56:	0a12      	lsrs	r2, r2, #8
 8008e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e5c:	fb02 f303 	mul.w	r3, r2, r3
 8008e60:	617b      	str	r3, [r7, #20]
      break;
 8008e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e64:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	0e5b      	lsrs	r3, r3, #25
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	3301      	adds	r3, #1
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	e001      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e84:	693b      	ldr	r3, [r7, #16]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40021000 	.word	0x40021000
 8008e98:	00f42400 	.word	0x00f42400
 8008e9c:	016e3600 	.word	0x016e3600

08008ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ea4:	4b03      	ldr	r3, [pc, #12]	@ (8008eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	2000018c 	.word	0x2000018c

08008eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ebc:	f7ff fff0 	bl	8008ea0 <HAL_RCC_GetHCLKFreq>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	4904      	ldr	r1, [pc, #16]	@ (8008ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ece:	5ccb      	ldrb	r3, [r1, r3]
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	0800e210 	.word	0x0800e210

08008ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ee8:	f7ff ffda 	bl	8008ea0 <HAL_RCC_GetHCLKFreq>
 8008eec:	4602      	mov	r2, r0
 8008eee:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	0adb      	lsrs	r3, r3, #11
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	4904      	ldr	r1, [pc, #16]	@ (8008f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008efa:	5ccb      	ldrb	r3, [r1, r3]
 8008efc:	f003 031f 	and.w	r3, r3, #31
 8008f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	0800e210 	.word	0x0800e210

08008f10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f16:	4b1e      	ldr	r3, [pc, #120]	@ (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f20:	4b1b      	ldr	r3, [pc, #108]	@ (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d10c      	bne.n	8008f4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f34:	4a17      	ldr	r2, [pc, #92]	@ (8008f94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3c:	4a14      	ldr	r2, [pc, #80]	@ (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f3e:	68d2      	ldr	r2, [r2, #12]
 8008f40:	0a12      	lsrs	r2, r2, #8
 8008f42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f46:	fb02 f303 	mul.w	r3, r2, r3
 8008f4a:	617b      	str	r3, [r7, #20]
    break;
 8008f4c:	e00c      	b.n	8008f68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f4e:	4a12      	ldr	r2, [pc, #72]	@ (8008f98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	4a0e      	ldr	r2, [pc, #56]	@ (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f58:	68d2      	ldr	r2, [r2, #12]
 8008f5a:	0a12      	lsrs	r2, r2, #8
 8008f5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f60:	fb02 f303 	mul.w	r3, r2, r3
 8008f64:	617b      	str	r3, [r7, #20]
    break;
 8008f66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f68:	4b09      	ldr	r3, [pc, #36]	@ (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	0e5b      	lsrs	r3, r3, #25
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	3301      	adds	r3, #1
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008f82:	687b      	ldr	r3, [r7, #4]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	40021000 	.word	0x40021000
 8008f94:	016e3600 	.word	0x016e3600
 8008f98:	00f42400 	.word	0x00f42400

08008f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fa8:	2300      	movs	r3, #0
 8008faa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8098 	beq.w	80090ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fbe:	4b43      	ldr	r3, [pc, #268]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fca:	4b40      	ldr	r3, [pc, #256]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fce:	4a3f      	ldr	r2, [pc, #252]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fde:	60bb      	str	r3, [r7, #8]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a39      	ldr	r2, [pc, #228]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ff0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ff2:	f7fc ff61 	bl	8005eb8 <HAL_GetTick>
 8008ff6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ff8:	e009      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ffa:	f7fc ff5d 	bl	8005eb8 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d902      	bls.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	74fb      	strb	r3, [r7, #19]
        break;
 800900c:	e005      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800900e:	4b30      	ldr	r3, [pc, #192]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0ef      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800901a:	7cfb      	ldrb	r3, [r7, #19]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d159      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009020:	4b2a      	ldr	r3, [pc, #168]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800902a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01e      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	429a      	cmp	r2, r3
 800903a:	d019      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800903c:	4b23      	ldr	r3, [pc, #140]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009048:	4b20      	ldr	r3, [pc, #128]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800904a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904e:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009058:	4b1c      	ldr	r3, [pc, #112]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905e:	4a1b      	ldr	r2, [pc, #108]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009068:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d016      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907a:	f7fc ff1d 	bl	8005eb8 <HAL_GetTick>
 800907e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009080:	e00b      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009082:	f7fc ff19 	bl	8005eb8 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009090:	4293      	cmp	r3, r2
 8009092:	d902      	bls.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	74fb      	strb	r3, [r7, #19]
            break;
 8009098:	e006      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800909a:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0ec      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090a8:	7cfb      	ldrb	r3, [r7, #19]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10b      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ae:	4b07      	ldr	r3, [pc, #28]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	4903      	ldr	r1, [pc, #12]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80090c4:	e008      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090c6:	7cfb      	ldrb	r3, [r7, #19]
 80090c8:	74bb      	strb	r3, [r7, #18]
 80090ca:	e005      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80090cc:	40021000 	.word	0x40021000
 80090d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d4:	7cfb      	ldrb	r3, [r7, #19]
 80090d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090d8:	7c7b      	ldrb	r3, [r7, #17]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d105      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090de:	4ba7      	ldr	r3, [pc, #668]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e2:	4aa6      	ldr	r2, [pc, #664]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090f6:	4ba1      	ldr	r3, [pc, #644]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090fc:	f023 0203 	bic.w	r2, r3, #3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	499d      	ldr	r1, [pc, #628]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009106:	4313      	orrs	r3, r2
 8009108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009118:	4b98      	ldr	r3, [pc, #608]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800911a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800911e:	f023 020c 	bic.w	r2, r3, #12
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	4995      	ldr	r1, [pc, #596]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009128:	4313      	orrs	r3, r2
 800912a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800913a:	4b90      	ldr	r3, [pc, #576]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009140:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	498c      	ldr	r1, [pc, #560]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800915c:	4b87      	ldr	r3, [pc, #540]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009162:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	4984      	ldr	r1, [pc, #528]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800916c:	4313      	orrs	r3, r2
 800916e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800917e:	4b7f      	ldr	r3, [pc, #508]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	497b      	ldr	r1, [pc, #492]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091a0:	4b76      	ldr	r3, [pc, #472]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	4973      	ldr	r1, [pc, #460]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091c2:	4b6e      	ldr	r3, [pc, #440]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	496a      	ldr	r1, [pc, #424]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091e4:	4b65      	ldr	r3, [pc, #404]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	4962      	ldr	r1, [pc, #392]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009206:	4b5d      	ldr	r3, [pc, #372]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	4959      	ldr	r1, [pc, #356]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009228:	4b54      	ldr	r3, [pc, #336]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800922a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800922e:	f023 0203 	bic.w	r2, r3, #3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009236:	4951      	ldr	r1, [pc, #324]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009238:	4313      	orrs	r3, r2
 800923a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800924a:	4b4c      	ldr	r3, [pc, #304]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009250:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	4948      	ldr	r1, [pc, #288]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800925a:	4313      	orrs	r3, r2
 800925c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009268:	2b00      	cmp	r3, #0
 800926a:	d015      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800926c:	4b43      	ldr	r3, [pc, #268]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009272:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927a:	4940      	ldr	r1, [pc, #256]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800927c:	4313      	orrs	r3, r2
 800927e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928a:	d105      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800928c:	4b3b      	ldr	r3, [pc, #236]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4a3a      	ldr	r2, [pc, #232]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009296:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d015      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092a4:	4b35      	ldr	r3, [pc, #212]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b2:	4932      	ldr	r1, [pc, #200]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092c2:	d105      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092c4:	4b2d      	ldr	r3, [pc, #180]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4a2c      	ldr	r2, [pc, #176]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d015      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092dc:	4b27      	ldr	r3, [pc, #156]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ea:	4924      	ldr	r1, [pc, #144]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092fa:	d105      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092fc:	4b1f      	ldr	r3, [pc, #124]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	4a1e      	ldr	r2, [pc, #120]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009306:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d015      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009314:	4b19      	ldr	r3, [pc, #100]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009322:	4916      	ldr	r1, [pc, #88]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009332:	d105      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009334:	4b11      	ldr	r3, [pc, #68]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	4a10      	ldr	r2, [pc, #64]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800933a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800933e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d019      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800934c:	4b0b      	ldr	r3, [pc, #44]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935a:	4908      	ldr	r1, [pc, #32]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800936a:	d109      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800936c:	4b03      	ldr	r3, [pc, #12]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4a02      	ldr	r2, [pc, #8]	@ (800937c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009376:	60d3      	str	r3, [r2, #12]
 8009378:	e002      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800937a:	bf00      	nop
 800937c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d015      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800938c:	4b29      	ldr	r3, [pc, #164]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009392:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800939a:	4926      	ldr	r1, [pc, #152]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800939c:	4313      	orrs	r3, r2
 800939e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093aa:	d105      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093ac:	4b21      	ldr	r3, [pc, #132]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4a20      	ldr	r2, [pc, #128]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d015      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80093c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d2:	4918      	ldr	r1, [pc, #96]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e2:	d105      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093e4:	4b13      	ldr	r3, [pc, #76]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	4a12      	ldr	r2, [pc, #72]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d015      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800940a:	490a      	ldr	r1, [pc, #40]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009416:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800941a:	d105      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800941c:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	4a04      	ldr	r2, [pc, #16]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009426:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009428:	7cbb      	ldrb	r3, [r7, #18]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40021000 	.word	0x40021000

08009438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e054      	b.n	80094f4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d111      	bne.n	800947a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 fee2 	bl	800b228 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a23      	ldr	r2, [pc, #140]	@ (80094fc <HAL_TIM_Base_Init+0xc4>)
 8009470:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f001 fa2b 	bl	800a8e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	080056e1 	.word	0x080056e1

08009500 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	d001      	beq.n	8009518 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e04c      	b.n	80095b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a26      	ldr	r2, [pc, #152]	@ (80095c0 <HAL_TIM_Base_Start+0xc0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d022      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009532:	d01d      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a22      	ldr	r2, [pc, #136]	@ (80095c4 <HAL_TIM_Base_Start+0xc4>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d018      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a21      	ldr	r2, [pc, #132]	@ (80095c8 <HAL_TIM_Base_Start+0xc8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d013      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1f      	ldr	r2, [pc, #124]	@ (80095cc <HAL_TIM_Base_Start+0xcc>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00e      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <HAL_TIM_Base_Start+0xd0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d009      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1c      	ldr	r2, [pc, #112]	@ (80095d4 <HAL_TIM_Base_Start+0xd4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d004      	beq.n	8009570 <HAL_TIM_Base_Start+0x70>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1b      	ldr	r2, [pc, #108]	@ (80095d8 <HAL_TIM_Base_Start+0xd8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d115      	bne.n	800959c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	4b19      	ldr	r3, [pc, #100]	@ (80095dc <HAL_TIM_Base_Start+0xdc>)
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b06      	cmp	r3, #6
 8009580:	d015      	beq.n	80095ae <HAL_TIM_Base_Start+0xae>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009588:	d011      	beq.n	80095ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0201 	orr.w	r2, r2, #1
 8009598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800959a:	e008      	b.n	80095ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e000      	b.n	80095b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	40012c00 	.word	0x40012c00
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40000c00 	.word	0x40000c00
 80095d0:	40013400 	.word	0x40013400
 80095d4:	40014000 	.word	0x40014000
 80095d8:	40015000 	.word	0x40015000
 80095dc:	00010007 	.word	0x00010007

080095e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d001      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e054      	b.n	80096a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0201 	orr.w	r2, r2, #1
 800960e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a26      	ldr	r2, [pc, #152]	@ (80096b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d022      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009622:	d01d      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a22      	ldr	r2, [pc, #136]	@ (80096b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a21      	ldr	r2, [pc, #132]	@ (80096b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d013      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1f      	ldr	r2, [pc, #124]	@ (80096bc <HAL_TIM_Base_Start_IT+0xdc>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1e      	ldr	r2, [pc, #120]	@ (80096c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1c      	ldr	r2, [pc, #112]	@ (80096c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x80>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1b      	ldr	r2, [pc, #108]	@ (80096c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d115      	bne.n	800968c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	4b19      	ldr	r3, [pc, #100]	@ (80096cc <HAL_TIM_Base_Start_IT+0xec>)
 8009668:	4013      	ands	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b06      	cmp	r3, #6
 8009670:	d015      	beq.n	800969e <HAL_TIM_Base_Start_IT+0xbe>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009678:	d011      	beq.n	800969e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f042 0201 	orr.w	r2, r2, #1
 8009688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968a:	e008      	b.n	800969e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	e000      	b.n	80096a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800969e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	40012c00 	.word	0x40012c00
 80096b4:	40000400 	.word	0x40000400
 80096b8:	40000800 	.word	0x40000800
 80096bc:	40000c00 	.word	0x40000c00
 80096c0:	40013400 	.word	0x40013400
 80096c4:	40014000 	.word	0x40014000
 80096c8:	40015000 	.word	0x40015000
 80096cc:	00010007 	.word	0x00010007

080096d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e054      	b.n	800978c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d111      	bne.n	8009712 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fd96 	bl	800b228 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a23      	ldr	r2, [pc, #140]	@ (8009794 <HAL_TIM_PWM_Init+0xc4>)
 8009708:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3304      	adds	r3, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f001 f8df 	bl	800a8e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08005695 	.word	0x08005695

08009798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <HAL_TIM_PWM_Start+0x24>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e03c      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d109      	bne.n	80097d6 <HAL_TIM_PWM_Start+0x3e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	bf14      	ite	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	2300      	moveq	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	e02f      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d109      	bne.n	80097f0 <HAL_TIM_PWM_Start+0x58>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	bf14      	ite	ne
 80097e8:	2301      	movne	r3, #1
 80097ea:	2300      	moveq	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	e022      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b0c      	cmp	r3, #12
 80097f4:	d109      	bne.n	800980a <HAL_TIM_PWM_Start+0x72>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	bf14      	ite	ne
 8009802:	2301      	movne	r3, #1
 8009804:	2300      	moveq	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	e015      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b10      	cmp	r3, #16
 800980e:	d109      	bne.n	8009824 <HAL_TIM_PWM_Start+0x8c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b01      	cmp	r3, #1
 800981a:	bf14      	ite	ne
 800981c:	2301      	movne	r3, #1
 800981e:	2300      	moveq	r3, #0
 8009820:	b2db      	uxtb	r3, r3
 8009822:	e008      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b01      	cmp	r3, #1
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0a6      	b.n	800998c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <HAL_TIM_PWM_Start+0xb6>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800984c:	e023      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d104      	bne.n	800985e <HAL_TIM_PWM_Start+0xc6>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800985c:	e01b      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d104      	bne.n	800986e <HAL_TIM_PWM_Start+0xd6>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800986c:	e013      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d104      	bne.n	800987e <HAL_TIM_PWM_Start+0xe6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800987c:	e00b      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b10      	cmp	r3, #16
 8009882:	d104      	bne.n	800988e <HAL_TIM_PWM_Start+0xf6>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800988c:	e003      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fc9c 	bl	800b1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a3a      	ldr	r2, [pc, #232]	@ (8009994 <HAL_TIM_PWM_Start+0x1fc>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d018      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a39      	ldr	r2, [pc, #228]	@ (8009998 <HAL_TIM_PWM_Start+0x200>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a37      	ldr	r2, [pc, #220]	@ (800999c <HAL_TIM_PWM_Start+0x204>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00e      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a36      	ldr	r2, [pc, #216]	@ (80099a0 <HAL_TIM_PWM_Start+0x208>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d009      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a34      	ldr	r2, [pc, #208]	@ (80099a4 <HAL_TIM_PWM_Start+0x20c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d004      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a33      	ldr	r2, [pc, #204]	@ (80099a8 <HAL_TIM_PWM_Start+0x210>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d101      	bne.n	80098e4 <HAL_TIM_PWM_Start+0x14c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e000      	b.n	80098e6 <HAL_TIM_PWM_Start+0x14e>
 80098e4:	2300      	movs	r3, #0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d007      	beq.n	80098fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a25      	ldr	r2, [pc, #148]	@ (8009994 <HAL_TIM_PWM_Start+0x1fc>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d022      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990c:	d01d      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a26      	ldr	r2, [pc, #152]	@ (80099ac <HAL_TIM_PWM_Start+0x214>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d018      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a24      	ldr	r2, [pc, #144]	@ (80099b0 <HAL_TIM_PWM_Start+0x218>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d013      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a23      	ldr	r2, [pc, #140]	@ (80099b4 <HAL_TIM_PWM_Start+0x21c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00e      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a19      	ldr	r2, [pc, #100]	@ (8009998 <HAL_TIM_PWM_Start+0x200>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d009      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a18      	ldr	r2, [pc, #96]	@ (800999c <HAL_TIM_PWM_Start+0x204>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d004      	beq.n	800994a <HAL_TIM_PWM_Start+0x1b2>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a18      	ldr	r2, [pc, #96]	@ (80099a8 <HAL_TIM_PWM_Start+0x210>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d115      	bne.n	8009976 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	4b19      	ldr	r3, [pc, #100]	@ (80099b8 <HAL_TIM_PWM_Start+0x220>)
 8009952:	4013      	ands	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b06      	cmp	r3, #6
 800995a:	d015      	beq.n	8009988 <HAL_TIM_PWM_Start+0x1f0>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009962:	d011      	beq.n	8009988 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0201 	orr.w	r2, r2, #1
 8009972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009974:	e008      	b.n	8009988 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f042 0201 	orr.w	r2, r2, #1
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e000      	b.n	800998a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40012c00 	.word	0x40012c00
 8009998:	40013400 	.word	0x40013400
 800999c:	40014000 	.word	0x40014000
 80099a0:	40014400 	.word	0x40014400
 80099a4:	40014800 	.word	0x40014800
 80099a8:	40015000 	.word	0x40015000
 80099ac:	40000400 	.word	0x40000400
 80099b0:	40000800 	.word	0x40000800
 80099b4:	40000c00 	.word	0x40000c00
 80099b8:	00010007 	.word	0x00010007

080099bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e04c      	b.n	8009a6a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d111      	bne.n	8009a00 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fc1f 	bl	800b228 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009a74 <HAL_TIM_OnePulse_Init+0xb8>)
 80099f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f000 ff68 	bl	800a8e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0208 	bic.w	r2, r2, #8
 8009a26:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6819      	ldr	r1, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	430a      	orrs	r2, r1
 8009a36:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	08009a79 	.word	0x08009a79

08009a78 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009aa4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009aac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ab4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d108      	bne.n	8009ace <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d105      	bne.n	8009ace <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ac2:	7b7b      	ldrb	r3, [r7, #13]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d102      	bne.n	8009ace <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ac8:	7b3b      	ldrb	r3, [r7, #12]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d001      	beq.n	8009ad2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e059      	b.n	8009b86 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f042 0202 	orr.w	r2, r2, #2
 8009b00:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0204 	orr.w	r2, r2, #4
 8009b10:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2201      	movs	r2, #1
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 fb5e 	bl	800b1dc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2201      	movs	r2, #1
 8009b26:	2104      	movs	r1, #4
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fb57 	bl	800b1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a17      	ldr	r2, [pc, #92]	@ (8009b90 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d018      	beq.n	8009b6a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a15      	ldr	r2, [pc, #84]	@ (8009b94 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a14      	ldr	r2, [pc, #80]	@ (8009b98 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a12      	ldr	r2, [pc, #72]	@ (8009b9c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a11      	ldr	r2, [pc, #68]	@ (8009ba0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_TIM_OnePulse_Start_IT+0xde>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a0f      	ldr	r2, [pc, #60]	@ (8009ba4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d101      	bne.n	8009b6e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d007      	beq.n	8009b84 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	40012c00 	.word	0x40012c00
 8009b94:	40013400 	.word	0x40013400
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40014400 	.word	0x40014400
 8009ba0:	40014800 	.word	0x40014800
 8009ba4:	40015000 	.word	0x40015000

08009ba8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a2      	b.n	8009d02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d111      	bne.n	8009bec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fb29 	bl	800b228 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d102      	bne.n	8009be4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a4a      	ldr	r2, [pc, #296]	@ (8009d0c <HAL_TIM_Encoder_Init+0x164>)
 8009be2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f000 fe68 	bl	800a8e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	4313      	orrs	r3, r2
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009c5e:	f023 030c 	bic.w	r3, r3, #12
 8009c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	011a      	lsls	r2, r3, #4
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009c9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009ca4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	080057b1 	.word	0x080057b1

08009d10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d110      	bne.n	8009d62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d102      	bne.n	8009d4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d46:	7b7b      	ldrb	r3, [r7, #13]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d001      	beq.n	8009d50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e069      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d60:	e031      	b.n	8009dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d110      	bne.n	8009d8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d102      	bne.n	8009d74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d6e:	7b3b      	ldrb	r3, [r7, #12]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d001      	beq.n	8009d78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e055      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d88:	e01d      	b.n	8009dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d108      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d105      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d96:	7b7b      	ldrb	r3, [r7, #13]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d102      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d9c:	7b3b      	ldrb	r3, [r7, #12]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d001      	beq.n	8009da6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e03e      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_TIM_Encoder_Start+0xc4>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d008      	beq.n	8009de4 <HAL_TIM_Encoder_Start+0xd4>
 8009dd2:	e00f      	b.n	8009df4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f9fd 	bl	800b1dc <TIM_CCxChannelCmd>
      break;
 8009de2:	e016      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	2104      	movs	r1, #4
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 f9f5 	bl	800b1dc <TIM_CCxChannelCmd>
      break;
 8009df2:	e00e      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 f9ed 	bl	800b1dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2201      	movs	r2, #1
 8009e08:	2104      	movs	r1, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 f9e6 	bl	800b1dc <TIM_CCxChannelCmd>
      break;
 8009e10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d026      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d021      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f06f 0202 	mvn.w	r2, #2
 8009e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	4798      	blx	r3
 8009e80:	e009      	b.n	8009e96 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d026      	beq.n	8009ef4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d021      	beq.n	8009ef4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0204 	mvn.w	r2, #4
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
 8009ed8:	e009      	b.n	8009eee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 0308 	and.w	r3, r3, #8
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d026      	beq.n	8009f4c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f003 0308 	and.w	r3, r3, #8
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d021      	beq.n	8009f4c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f06f 0208 	mvn.w	r2, #8
 8009f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2204      	movs	r2, #4
 8009f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
 8009f30:	e009      	b.n	8009f46 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d026      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d021      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0210 	mvn.w	r2, #16
 8009f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
 8009f88:	e009      	b.n	8009f9e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00e      	beq.n	8009fcc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0201 	mvn.w	r2, #1
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d104      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00e      	beq.n	8009ffe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00e      	beq.n	800a076 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d009      	beq.n	800a076 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f06f 0220 	mvn.w	r2, #32
 800a06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00e      	beq.n	800a09e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00e      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00e      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00e      	beq.n	800a116 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d009      	beq.n	800a116 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a136:	2b01      	cmp	r3, #1
 800a138:	d101      	bne.n	800a13e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	e0ff      	b.n	800a33e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b14      	cmp	r3, #20
 800a14a:	f200 80f0 	bhi.w	800a32e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a14e:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1a9 	.word	0x0800a1a9
 800a158:	0800a32f 	.word	0x0800a32f
 800a15c:	0800a32f 	.word	0x0800a32f
 800a160:	0800a32f 	.word	0x0800a32f
 800a164:	0800a1e9 	.word	0x0800a1e9
 800a168:	0800a32f 	.word	0x0800a32f
 800a16c:	0800a32f 	.word	0x0800a32f
 800a170:	0800a32f 	.word	0x0800a32f
 800a174:	0800a22b 	.word	0x0800a22b
 800a178:	0800a32f 	.word	0x0800a32f
 800a17c:	0800a32f 	.word	0x0800a32f
 800a180:	0800a32f 	.word	0x0800a32f
 800a184:	0800a26b 	.word	0x0800a26b
 800a188:	0800a32f 	.word	0x0800a32f
 800a18c:	0800a32f 	.word	0x0800a32f
 800a190:	0800a32f 	.word	0x0800a32f
 800a194:	0800a2ad 	.word	0x0800a2ad
 800a198:	0800a32f 	.word	0x0800a32f
 800a19c:	0800a32f 	.word	0x0800a32f
 800a1a0:	0800a32f 	.word	0x0800a32f
 800a1a4:	0800a2ed 	.word	0x0800a2ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fc4e 	bl	800aa50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0208 	orr.w	r2, r2, #8
 800a1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0204 	bic.w	r2, r2, #4
 800a1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6999      	ldr	r1, [r3, #24]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	619a      	str	r2, [r3, #24]
      break;
 800a1e6:	e0a5      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fcc8 	bl	800ab84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	699a      	ldr	r2, [r3, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6999      	ldr	r1, [r3, #24]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	021a      	lsls	r2, r3, #8
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	619a      	str	r2, [r3, #24]
      break;
 800a228:	e084      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fd3b 	bl	800acac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69da      	ldr	r2, [r3, #28]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0208 	orr.w	r2, r2, #8
 800a244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69da      	ldr	r2, [r3, #28]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 0204 	bic.w	r2, r2, #4
 800a254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	69d9      	ldr	r1, [r3, #28]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	61da      	str	r2, [r3, #28]
      break;
 800a268:	e064      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fdad 	bl	800add0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69d9      	ldr	r1, [r3, #28]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	021a      	lsls	r2, r3, #8
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	61da      	str	r2, [r3, #28]
      break;
 800a2aa:	e043      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fe20 	bl	800aef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0208 	orr.w	r2, r2, #8
 800a2c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0204 	bic.w	r2, r2, #4
 800a2d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2ea:	e023      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fe6a 	bl	800afcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a306:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a316:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	021a      	lsls	r2, r3, #8
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a32c:	e002      	b.n	800a334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
      break;
 800a332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop

0800a348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_TIM_ConfigClockSource+0x1c>
 800a360:	2302      	movs	r3, #2
 800a362:	e0f6      	b.n	800a552 <HAL_TIM_ConfigClockSource+0x20a>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a382:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a38e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a6f      	ldr	r2, [pc, #444]	@ (800a55c <HAL_TIM_ConfigClockSource+0x214>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	f000 80c1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3a4:	4a6d      	ldr	r2, [pc, #436]	@ (800a55c <HAL_TIM_ConfigClockSource+0x214>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	f200 80c6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3ac:	4a6c      	ldr	r2, [pc, #432]	@ (800a560 <HAL_TIM_ConfigClockSource+0x218>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	f000 80b9 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3b4:	4a6a      	ldr	r2, [pc, #424]	@ (800a560 <HAL_TIM_ConfigClockSource+0x218>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f200 80be 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3bc:	4a69      	ldr	r2, [pc, #420]	@ (800a564 <HAL_TIM_ConfigClockSource+0x21c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	f000 80b1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3c4:	4a67      	ldr	r2, [pc, #412]	@ (800a564 <HAL_TIM_ConfigClockSource+0x21c>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	f200 80b6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3cc:	4a66      	ldr	r2, [pc, #408]	@ (800a568 <HAL_TIM_ConfigClockSource+0x220>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	f000 80a9 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3d4:	4a64      	ldr	r2, [pc, #400]	@ (800a568 <HAL_TIM_ConfigClockSource+0x220>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	f200 80ae 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3dc:	4a63      	ldr	r2, [pc, #396]	@ (800a56c <HAL_TIM_ConfigClockSource+0x224>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f000 80a1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3e4:	4a61      	ldr	r2, [pc, #388]	@ (800a56c <HAL_TIM_ConfigClockSource+0x224>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	f200 80a6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3ec:	4a60      	ldr	r2, [pc, #384]	@ (800a570 <HAL_TIM_ConfigClockSource+0x228>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f000 8099 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a3f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a570 <HAL_TIM_ConfigClockSource+0x228>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	f200 809e 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a400:	f000 8091 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a408:	f200 8096 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a40c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a410:	f000 8089 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a418:	f200 808e 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a420:	d03e      	beq.n	800a4a0 <HAL_TIM_ConfigClockSource+0x158>
 800a422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a426:	f200 8087 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42e:	f000 8086 	beq.w	800a53e <HAL_TIM_ConfigClockSource+0x1f6>
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a436:	d87f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a438:	2b70      	cmp	r3, #112	@ 0x70
 800a43a:	d01a      	beq.n	800a472 <HAL_TIM_ConfigClockSource+0x12a>
 800a43c:	2b70      	cmp	r3, #112	@ 0x70
 800a43e:	d87b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a440:	2b60      	cmp	r3, #96	@ 0x60
 800a442:	d050      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x19e>
 800a444:	2b60      	cmp	r3, #96	@ 0x60
 800a446:	d877      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a448:	2b50      	cmp	r3, #80	@ 0x50
 800a44a:	d03c      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x17e>
 800a44c:	2b50      	cmp	r3, #80	@ 0x50
 800a44e:	d873      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a450:	2b40      	cmp	r3, #64	@ 0x40
 800a452:	d058      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1be>
 800a454:	2b40      	cmp	r3, #64	@ 0x40
 800a456:	d86f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a458:	2b30      	cmp	r3, #48	@ 0x30
 800a45a:	d064      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a45c:	2b30      	cmp	r3, #48	@ 0x30
 800a45e:	d86b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a460:	2b20      	cmp	r3, #32
 800a462:	d060      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a464:	2b20      	cmp	r3, #32
 800a466:	d867      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05c      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d05a      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1de>
 800a470:	e062      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a482:	f000 fe8b 	bl	800b19c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	609a      	str	r2, [r3, #8]
      break;
 800a49e:	e04f      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4b0:	f000 fe74 	bl	800b19c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4c2:	609a      	str	r2, [r3, #8]
      break;
 800a4c4:	e03c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 fde6 	bl	800b0a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2150      	movs	r1, #80	@ 0x50
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fe3f 	bl	800b162 <TIM_ITRx_SetConfig>
      break;
 800a4e4:	e02c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 fe05 	bl	800b102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2160      	movs	r1, #96	@ 0x60
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fe2f 	bl	800b162 <TIM_ITRx_SetConfig>
      break;
 800a504:	e01c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a512:	461a      	mov	r2, r3
 800a514:	f000 fdc6 	bl	800b0a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2140      	movs	r1, #64	@ 0x40
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fe1f 	bl	800b162 <TIM_ITRx_SetConfig>
      break;
 800a524:	e00c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f000 fe16 	bl	800b162 <TIM_ITRx_SetConfig>
      break;
 800a536:	e003      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	e000      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	00100070 	.word	0x00100070
 800a560:	00100060 	.word	0x00100060
 800a564:	00100050 	.word	0x00100050
 800a568:	00100040 	.word	0x00100040
 800a56c:	00100030 	.word	0x00100030
 800a570:	00100020 	.word	0x00100020

0800a574 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	460b      	mov	r3, r1
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e14a      	b.n	800a8da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	f040 80dd 	bne.w	800a80c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	2b1f      	cmp	r3, #31
 800a656:	f200 80d6 	bhi.w	800a806 <HAL_TIM_RegisterCallback+0x1de>
 800a65a:	a201      	add	r2, pc, #4	@ (adr r2, 800a660 <HAL_TIM_RegisterCallback+0x38>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a6e1 	.word	0x0800a6e1
 800a664:	0800a6e9 	.word	0x0800a6e9
 800a668:	0800a6f1 	.word	0x0800a6f1
 800a66c:	0800a6f9 	.word	0x0800a6f9
 800a670:	0800a701 	.word	0x0800a701
 800a674:	0800a709 	.word	0x0800a709
 800a678:	0800a711 	.word	0x0800a711
 800a67c:	0800a719 	.word	0x0800a719
 800a680:	0800a721 	.word	0x0800a721
 800a684:	0800a729 	.word	0x0800a729
 800a688:	0800a731 	.word	0x0800a731
 800a68c:	0800a739 	.word	0x0800a739
 800a690:	0800a741 	.word	0x0800a741
 800a694:	0800a749 	.word	0x0800a749
 800a698:	0800a753 	.word	0x0800a753
 800a69c:	0800a75d 	.word	0x0800a75d
 800a6a0:	0800a767 	.word	0x0800a767
 800a6a4:	0800a771 	.word	0x0800a771
 800a6a8:	0800a77b 	.word	0x0800a77b
 800a6ac:	0800a785 	.word	0x0800a785
 800a6b0:	0800a78f 	.word	0x0800a78f
 800a6b4:	0800a799 	.word	0x0800a799
 800a6b8:	0800a7a3 	.word	0x0800a7a3
 800a6bc:	0800a7ad 	.word	0x0800a7ad
 800a6c0:	0800a7b7 	.word	0x0800a7b7
 800a6c4:	0800a7c1 	.word	0x0800a7c1
 800a6c8:	0800a7cb 	.word	0x0800a7cb
 800a6cc:	0800a7d5 	.word	0x0800a7d5
 800a6d0:	0800a7df 	.word	0x0800a7df
 800a6d4:	0800a7e9 	.word	0x0800a7e9
 800a6d8:	0800a7f3 	.word	0x0800a7f3
 800a6dc:	0800a7fd 	.word	0x0800a7fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a6e6:	e0f7      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a6ee:	e0f3      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a6f6:	e0ef      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a6fe:	e0eb      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a706:	e0e7      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a70e:	e0e3      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a716:	e0df      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a71e:	e0db      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a726:	e0d7      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a72e:	e0d3      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a736:	e0cf      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a73e:	e0cb      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a746:	e0c7      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a750:	e0c2      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a75a:	e0bd      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a764:	e0b8      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a76e:	e0b3      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a778:	e0ae      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a782:	e0a9      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a78c:	e0a4      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a796:	e09f      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a7a0:	e09a      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a7aa:	e095      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a7b4:	e090      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a7be:	e08b      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a7c8:	e086      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a7d2:	e081      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a7dc:	e07c      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a7e6:	e077      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a7f0:	e072      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a7fa:	e06d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a804:	e068      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	75fb      	strb	r3, [r7, #23]
        break;
 800a80a:	e065      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d15d      	bne.n	800a8d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	2b0d      	cmp	r3, #13
 800a81c:	d857      	bhi.n	800a8ce <HAL_TIM_RegisterCallback+0x2a6>
 800a81e:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <HAL_TIM_RegisterCallback+0x1fc>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a85d 	.word	0x0800a85d
 800a828:	0800a865 	.word	0x0800a865
 800a82c:	0800a86d 	.word	0x0800a86d
 800a830:	0800a875 	.word	0x0800a875
 800a834:	0800a87d 	.word	0x0800a87d
 800a838:	0800a885 	.word	0x0800a885
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a895 	.word	0x0800a895
 800a844:	0800a89d 	.word	0x0800a89d
 800a848:	0800a8a5 	.word	0x0800a8a5
 800a84c:	0800a8ad 	.word	0x0800a8ad
 800a850:	0800a8b5 	.word	0x0800a8b5
 800a854:	0800a8bd 	.word	0x0800a8bd
 800a858:	0800a8c5 	.word	0x0800a8c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a862:	e039      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a86a:	e035      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a872:	e031      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a87a:	e02d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a882:	e029      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a88a:	e025      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a892:	e021      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a89a:	e01d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a8a2:	e019      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a8aa:	e015      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a8b2:	e011      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a8ba:	e00d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a8c2:	e009      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a8cc:	e004      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	75fb      	strb	r3, [r7, #23]
        break;
 800a8d2:	e001      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop

0800a8e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a4c      	ldr	r2, [pc, #304]	@ (800aa2c <TIM_Base_SetConfig+0x144>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d017      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a906:	d013      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a49      	ldr	r2, [pc, #292]	@ (800aa30 <TIM_Base_SetConfig+0x148>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00f      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a48      	ldr	r2, [pc, #288]	@ (800aa34 <TIM_Base_SetConfig+0x14c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00b      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a47      	ldr	r2, [pc, #284]	@ (800aa38 <TIM_Base_SetConfig+0x150>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d007      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a46      	ldr	r2, [pc, #280]	@ (800aa3c <TIM_Base_SetConfig+0x154>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d003      	beq.n	800a930 <TIM_Base_SetConfig+0x48>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a45      	ldr	r2, [pc, #276]	@ (800aa40 <TIM_Base_SetConfig+0x158>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d108      	bne.n	800a942 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a39      	ldr	r2, [pc, #228]	@ (800aa2c <TIM_Base_SetConfig+0x144>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d023      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a950:	d01f      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a36      	ldr	r2, [pc, #216]	@ (800aa30 <TIM_Base_SetConfig+0x148>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01b      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a35      	ldr	r2, [pc, #212]	@ (800aa34 <TIM_Base_SetConfig+0x14c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d017      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a34      	ldr	r2, [pc, #208]	@ (800aa38 <TIM_Base_SetConfig+0x150>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a33      	ldr	r2, [pc, #204]	@ (800aa3c <TIM_Base_SetConfig+0x154>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00f      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a33      	ldr	r2, [pc, #204]	@ (800aa44 <TIM_Base_SetConfig+0x15c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a32      	ldr	r2, [pc, #200]	@ (800aa48 <TIM_Base_SetConfig+0x160>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a31      	ldr	r2, [pc, #196]	@ (800aa4c <TIM_Base_SetConfig+0x164>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_Base_SetConfig+0xaa>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a2c      	ldr	r2, [pc, #176]	@ (800aa40 <TIM_Base_SetConfig+0x158>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d108      	bne.n	800a9a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a18      	ldr	r2, [pc, #96]	@ (800aa2c <TIM_Base_SetConfig+0x144>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d013      	beq.n	800a9f8 <TIM_Base_SetConfig+0x110>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a1a      	ldr	r2, [pc, #104]	@ (800aa3c <TIM_Base_SetConfig+0x154>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d00f      	beq.n	800a9f8 <TIM_Base_SetConfig+0x110>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1a      	ldr	r2, [pc, #104]	@ (800aa44 <TIM_Base_SetConfig+0x15c>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d00b      	beq.n	800a9f8 <TIM_Base_SetConfig+0x110>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a19      	ldr	r2, [pc, #100]	@ (800aa48 <TIM_Base_SetConfig+0x160>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d007      	beq.n	800a9f8 <TIM_Base_SetConfig+0x110>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a18      	ldr	r2, [pc, #96]	@ (800aa4c <TIM_Base_SetConfig+0x164>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d003      	beq.n	800a9f8 <TIM_Base_SetConfig+0x110>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a13      	ldr	r2, [pc, #76]	@ (800aa40 <TIM_Base_SetConfig+0x158>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d103      	bne.n	800aa00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d105      	bne.n	800aa1e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f023 0201 	bic.w	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	611a      	str	r2, [r3, #16]
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	40012c00 	.word	0x40012c00
 800aa30:	40000400 	.word	0x40000400
 800aa34:	40000800 	.word	0x40000800
 800aa38:	40000c00 	.word	0x40000c00
 800aa3c:	40013400 	.word	0x40013400
 800aa40:	40015000 	.word	0x40015000
 800aa44:	40014000 	.word	0x40014000
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800

0800aa50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	f023 0201 	bic.w	r2, r3, #1
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f023 0302 	bic.w	r3, r3, #2
 800aa9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a30      	ldr	r2, [pc, #192]	@ (800ab6c <TIM_OC1_SetConfig+0x11c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d013      	beq.n	800aad8 <TIM_OC1_SetConfig+0x88>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a2f      	ldr	r2, [pc, #188]	@ (800ab70 <TIM_OC1_SetConfig+0x120>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00f      	beq.n	800aad8 <TIM_OC1_SetConfig+0x88>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a2e      	ldr	r2, [pc, #184]	@ (800ab74 <TIM_OC1_SetConfig+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <TIM_OC1_SetConfig+0x88>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a2d      	ldr	r2, [pc, #180]	@ (800ab78 <TIM_OC1_SetConfig+0x128>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d007      	beq.n	800aad8 <TIM_OC1_SetConfig+0x88>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a2c      	ldr	r2, [pc, #176]	@ (800ab7c <TIM_OC1_SetConfig+0x12c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_OC1_SetConfig+0x88>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a2b      	ldr	r2, [pc, #172]	@ (800ab80 <TIM_OC1_SetConfig+0x130>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d10c      	bne.n	800aaf2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f023 0308 	bic.w	r3, r3, #8
 800aade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f023 0304 	bic.w	r3, r3, #4
 800aaf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ab6c <TIM_OC1_SetConfig+0x11c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d013      	beq.n	800ab22 <TIM_OC1_SetConfig+0xd2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a1c      	ldr	r2, [pc, #112]	@ (800ab70 <TIM_OC1_SetConfig+0x120>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00f      	beq.n	800ab22 <TIM_OC1_SetConfig+0xd2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a1b      	ldr	r2, [pc, #108]	@ (800ab74 <TIM_OC1_SetConfig+0x124>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00b      	beq.n	800ab22 <TIM_OC1_SetConfig+0xd2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a1a      	ldr	r2, [pc, #104]	@ (800ab78 <TIM_OC1_SetConfig+0x128>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d007      	beq.n	800ab22 <TIM_OC1_SetConfig+0xd2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a19      	ldr	r2, [pc, #100]	@ (800ab7c <TIM_OC1_SetConfig+0x12c>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d003      	beq.n	800ab22 <TIM_OC1_SetConfig+0xd2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a18      	ldr	r2, [pc, #96]	@ (800ab80 <TIM_OC1_SetConfig+0x130>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d111      	bne.n	800ab46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	621a      	str	r2, [r3, #32]
}
 800ab60:	bf00      	nop
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	40012c00 	.word	0x40012c00
 800ab70:	40013400 	.word	0x40013400
 800ab74:	40014000 	.word	0x40014000
 800ab78:	40014400 	.word	0x40014400
 800ab7c:	40014800 	.word	0x40014800
 800ab80:	40015000 	.word	0x40015000

0800ab84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	f023 0210 	bic.w	r2, r3, #16
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	021b      	lsls	r3, r3, #8
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4313      	orrs	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f023 0320 	bic.w	r3, r3, #32
 800abd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a2c      	ldr	r2, [pc, #176]	@ (800ac94 <TIM_OC2_SetConfig+0x110>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d007      	beq.n	800abf8 <TIM_OC2_SetConfig+0x74>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a2b      	ldr	r2, [pc, #172]	@ (800ac98 <TIM_OC2_SetConfig+0x114>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d003      	beq.n	800abf8 <TIM_OC2_SetConfig+0x74>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a2a      	ldr	r2, [pc, #168]	@ (800ac9c <TIM_OC2_SetConfig+0x118>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d10d      	bne.n	800ac14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a1f      	ldr	r2, [pc, #124]	@ (800ac94 <TIM_OC2_SetConfig+0x110>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <TIM_OC2_SetConfig+0xc0>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ac98 <TIM_OC2_SetConfig+0x114>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d00f      	beq.n	800ac44 <TIM_OC2_SetConfig+0xc0>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a1e      	ldr	r2, [pc, #120]	@ (800aca0 <TIM_OC2_SetConfig+0x11c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00b      	beq.n	800ac44 <TIM_OC2_SetConfig+0xc0>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a1d      	ldr	r2, [pc, #116]	@ (800aca4 <TIM_OC2_SetConfig+0x120>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d007      	beq.n	800ac44 <TIM_OC2_SetConfig+0xc0>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a1c      	ldr	r2, [pc, #112]	@ (800aca8 <TIM_OC2_SetConfig+0x124>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d003      	beq.n	800ac44 <TIM_OC2_SetConfig+0xc0>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a17      	ldr	r2, [pc, #92]	@ (800ac9c <TIM_OC2_SetConfig+0x118>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d113      	bne.n	800ac6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	621a      	str	r2, [r3, #32]
}
 800ac86:	bf00      	nop
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	40012c00 	.word	0x40012c00
 800ac98:	40013400 	.word	0x40013400
 800ac9c:	40015000 	.word	0x40015000
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40014400 	.word	0x40014400
 800aca8:	40014800 	.word	0x40014800

0800acac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0303 	bic.w	r3, r3, #3
 800ace6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	021b      	lsls	r3, r3, #8
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a2b      	ldr	r2, [pc, #172]	@ (800adb8 <TIM_OC3_SetConfig+0x10c>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d007      	beq.n	800ad1e <TIM_OC3_SetConfig+0x72>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a2a      	ldr	r2, [pc, #168]	@ (800adbc <TIM_OC3_SetConfig+0x110>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d003      	beq.n	800ad1e <TIM_OC3_SetConfig+0x72>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a29      	ldr	r2, [pc, #164]	@ (800adc0 <TIM_OC3_SetConfig+0x114>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d10d      	bne.n	800ad3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a1e      	ldr	r2, [pc, #120]	@ (800adb8 <TIM_OC3_SetConfig+0x10c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d013      	beq.n	800ad6a <TIM_OC3_SetConfig+0xbe>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a1d      	ldr	r2, [pc, #116]	@ (800adbc <TIM_OC3_SetConfig+0x110>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00f      	beq.n	800ad6a <TIM_OC3_SetConfig+0xbe>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	@ (800adc4 <TIM_OC3_SetConfig+0x118>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00b      	beq.n	800ad6a <TIM_OC3_SetConfig+0xbe>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a1c      	ldr	r2, [pc, #112]	@ (800adc8 <TIM_OC3_SetConfig+0x11c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d007      	beq.n	800ad6a <TIM_OC3_SetConfig+0xbe>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1b      	ldr	r2, [pc, #108]	@ (800adcc <TIM_OC3_SetConfig+0x120>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_OC3_SetConfig+0xbe>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a16      	ldr	r2, [pc, #88]	@ (800adc0 <TIM_OC3_SetConfig+0x114>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d113      	bne.n	800ad92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	621a      	str	r2, [r3, #32]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40012c00 	.word	0x40012c00
 800adbc:	40013400 	.word	0x40013400
 800adc0:	40015000 	.word	0x40015000
 800adc4:	40014000 	.word	0x40014000
 800adc8:	40014400 	.word	0x40014400
 800adcc:	40014800 	.word	0x40014800

0800add0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	031b      	lsls	r3, r3, #12
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a2c      	ldr	r2, [pc, #176]	@ (800aee0 <TIM_OC4_SetConfig+0x110>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d007      	beq.n	800ae44 <TIM_OC4_SetConfig+0x74>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a2b      	ldr	r2, [pc, #172]	@ (800aee4 <TIM_OC4_SetConfig+0x114>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_OC4_SetConfig+0x74>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a2a      	ldr	r2, [pc, #168]	@ (800aee8 <TIM_OC4_SetConfig+0x118>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d10d      	bne.n	800ae60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	031b      	lsls	r3, r3, #12
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a1f      	ldr	r2, [pc, #124]	@ (800aee0 <TIM_OC4_SetConfig+0x110>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d013      	beq.n	800ae90 <TIM_OC4_SetConfig+0xc0>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	@ (800aee4 <TIM_OC4_SetConfig+0x114>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00f      	beq.n	800ae90 <TIM_OC4_SetConfig+0xc0>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1e      	ldr	r2, [pc, #120]	@ (800aeec <TIM_OC4_SetConfig+0x11c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_OC4_SetConfig+0xc0>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <TIM_OC4_SetConfig+0x120>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_OC4_SetConfig+0xc0>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1c      	ldr	r2, [pc, #112]	@ (800aef4 <TIM_OC4_SetConfig+0x124>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC4_SetConfig+0xc0>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a17      	ldr	r2, [pc, #92]	@ (800aee8 <TIM_OC4_SetConfig+0x118>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d113      	bne.n	800aeb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	019b      	lsls	r3, r3, #6
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	019b      	lsls	r3, r3, #6
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	621a      	str	r2, [r3, #32]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	40012c00 	.word	0x40012c00
 800aee4:	40013400 	.word	0x40013400
 800aee8:	40015000 	.word	0x40015000
 800aeec:	40014000 	.word	0x40014000
 800aef0:	40014400 	.word	0x40014400
 800aef4:	40014800 	.word	0x40014800

0800aef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4313      	orrs	r3, r2
 800af34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a19      	ldr	r2, [pc, #100]	@ (800afb4 <TIM_OC5_SetConfig+0xbc>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d013      	beq.n	800af7a <TIM_OC5_SetConfig+0x82>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a18      	ldr	r2, [pc, #96]	@ (800afb8 <TIM_OC5_SetConfig+0xc0>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00f      	beq.n	800af7a <TIM_OC5_SetConfig+0x82>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <TIM_OC5_SetConfig+0xc4>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00b      	beq.n	800af7a <TIM_OC5_SetConfig+0x82>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a16      	ldr	r2, [pc, #88]	@ (800afc0 <TIM_OC5_SetConfig+0xc8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d007      	beq.n	800af7a <TIM_OC5_SetConfig+0x82>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a15      	ldr	r2, [pc, #84]	@ (800afc4 <TIM_OC5_SetConfig+0xcc>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC5_SetConfig+0x82>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a14      	ldr	r2, [pc, #80]	@ (800afc8 <TIM_OC5_SetConfig+0xd0>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d109      	bne.n	800af8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	621a      	str	r2, [r3, #32]
}
 800afa8:	bf00      	nop
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	40012c00 	.word	0x40012c00
 800afb8:	40013400 	.word	0x40013400
 800afbc:	40014000 	.word	0x40014000
 800afc0:	40014400 	.word	0x40014400
 800afc4:	40014800 	.word	0x40014800
 800afc8:	40015000 	.word	0x40015000

0800afcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800affa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800affe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	051b      	lsls	r3, r3, #20
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1a      	ldr	r2, [pc, #104]	@ (800b08c <TIM_OC6_SetConfig+0xc0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d013      	beq.n	800b050 <TIM_OC6_SetConfig+0x84>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a19      	ldr	r2, [pc, #100]	@ (800b090 <TIM_OC6_SetConfig+0xc4>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00f      	beq.n	800b050 <TIM_OC6_SetConfig+0x84>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a18      	ldr	r2, [pc, #96]	@ (800b094 <TIM_OC6_SetConfig+0xc8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00b      	beq.n	800b050 <TIM_OC6_SetConfig+0x84>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a17      	ldr	r2, [pc, #92]	@ (800b098 <TIM_OC6_SetConfig+0xcc>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d007      	beq.n	800b050 <TIM_OC6_SetConfig+0x84>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a16      	ldr	r2, [pc, #88]	@ (800b09c <TIM_OC6_SetConfig+0xd0>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d003      	beq.n	800b050 <TIM_OC6_SetConfig+0x84>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a15      	ldr	r2, [pc, #84]	@ (800b0a0 <TIM_OC6_SetConfig+0xd4>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d109      	bne.n	800b064 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b056:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	029b      	lsls	r3, r3, #10
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	4313      	orrs	r3, r2
 800b062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	621a      	str	r2, [r3, #32]
}
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40013400 	.word	0x40013400
 800b094:	40014000 	.word	0x40014000
 800b098:	40014400 	.word	0x40014400
 800b09c:	40014800 	.word	0x40014800
 800b0a0:	40015000 	.word	0x40015000

0800b0a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	f023 0201 	bic.w	r2, r3, #1
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f023 030a 	bic.w	r3, r3, #10
 800b0e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	621a      	str	r2, [r3, #32]
}
 800b0f6:	bf00      	nop
 800b0f8:	371c      	adds	r7, #28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b102:	b480      	push	{r7}
 800b104:	b087      	sub	sp, #28
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	f023 0210 	bic.w	r2, r3, #16
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b12c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	031b      	lsls	r3, r3, #12
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b13e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	011b      	lsls	r3, r3, #4
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	4313      	orrs	r3, r2
 800b148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	621a      	str	r2, [r3, #32]
}
 800b156:	bf00      	nop
 800b158:	371c      	adds	r7, #28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b162:	b480      	push	{r7}
 800b164:	b085      	sub	sp, #20
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b17c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4313      	orrs	r3, r2
 800b184:	f043 0307 	orr.w	r3, r3, #7
 800b188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	609a      	str	r2, [r3, #8]
}
 800b190:	bf00      	nop
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	021a      	lsls	r2, r3, #8
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	609a      	str	r2, [r3, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	371c      	adds	r7, #28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f003 031f 	and.w	r3, r3, #31
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	401a      	ands	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a1a      	ldr	r2, [r3, #32]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f003 031f 	and.w	r3, r3, #31
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	fa01 f303 	lsl.w	r3, r1, r3
 800b214:	431a      	orrs	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
	...

0800b228 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a26      	ldr	r2, [pc, #152]	@ (800b2cc <TIM_ResetCallback+0xa4>)
 800b234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a25      	ldr	r2, [pc, #148]	@ (800b2d0 <TIM_ResetCallback+0xa8>)
 800b23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a24      	ldr	r2, [pc, #144]	@ (800b2d4 <TIM_ResetCallback+0xac>)
 800b244:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a23      	ldr	r2, [pc, #140]	@ (800b2d8 <TIM_ResetCallback+0xb0>)
 800b24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a22      	ldr	r2, [pc, #136]	@ (800b2dc <TIM_ResetCallback+0xb4>)
 800b254:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a21      	ldr	r2, [pc, #132]	@ (800b2e0 <TIM_ResetCallback+0xb8>)
 800b25c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a20      	ldr	r2, [pc, #128]	@ (800b2e4 <TIM_ResetCallback+0xbc>)
 800b264:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a1f      	ldr	r2, [pc, #124]	@ (800b2e8 <TIM_ResetCallback+0xc0>)
 800b26c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a1e      	ldr	r2, [pc, #120]	@ (800b2ec <TIM_ResetCallback+0xc4>)
 800b274:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a1d      	ldr	r2, [pc, #116]	@ (800b2f0 <TIM_ResetCallback+0xc8>)
 800b27c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a1c      	ldr	r2, [pc, #112]	@ (800b2f4 <TIM_ResetCallback+0xcc>)
 800b284:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a1b      	ldr	r2, [pc, #108]	@ (800b2f8 <TIM_ResetCallback+0xd0>)
 800b28c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a1a      	ldr	r2, [pc, #104]	@ (800b2fc <TIM_ResetCallback+0xd4>)
 800b294:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a19      	ldr	r2, [pc, #100]	@ (800b300 <TIM_ResetCallback+0xd8>)
 800b29c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a18      	ldr	r2, [pc, #96]	@ (800b304 <TIM_ResetCallback+0xdc>)
 800b2a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	@ (800b308 <TIM_ResetCallback+0xe0>)
 800b2ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a16      	ldr	r2, [pc, #88]	@ (800b30c <TIM_ResetCallback+0xe4>)
 800b2b4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a15      	ldr	r2, [pc, #84]	@ (800b310 <TIM_ResetCallback+0xe8>)
 800b2bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	080043d5 	.word	0x080043d5
 800b2d0:	0800a575 	.word	0x0800a575
 800b2d4:	0800a5ed 	.word	0x0800a5ed
 800b2d8:	0800a601 	.word	0x0800a601
 800b2dc:	0800a59d 	.word	0x0800a59d
 800b2e0:	0800a5b1 	.word	0x0800a5b1
 800b2e4:	0800a589 	.word	0x0800a589
 800b2e8:	0800a5c5 	.word	0x0800a5c5
 800b2ec:	0800a5d9 	.word	0x0800a5d9
 800b2f0:	0800a615 	.word	0x0800a615
 800b2f4:	0800b569 	.word	0x0800b569
 800b2f8:	0800b57d 	.word	0x0800b57d
 800b2fc:	0800b591 	.word	0x0800b591
 800b300:	0800b5a5 	.word	0x0800b5a5
 800b304:	0800b5b9 	.word	0x0800b5b9
 800b308:	0800b5cd 	.word	0x0800b5cd
 800b30c:	0800b5e1 	.word	0x0800b5e1
 800b310:	0800b5f5 	.word	0x0800b5f5

0800b314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b328:	2302      	movs	r3, #2
 800b32a:	e074      	b.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a34      	ldr	r2, [pc, #208]	@ (800b424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d009      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a33      	ldr	r2, [pc, #204]	@ (800b428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d004      	beq.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a31      	ldr	r2, [pc, #196]	@ (800b42c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d108      	bne.n	800b37c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b370:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	4313      	orrs	r3, r2
 800b390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a21      	ldr	r2, [pc, #132]	@ (800b424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d022      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ac:	d01d      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b430 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d018      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b434 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d013      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b438 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00e      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a15      	ldr	r2, [pc, #84]	@ (800b428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d009      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a18      	ldr	r2, [pc, #96]	@ (800b43c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d004      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a11      	ldr	r2, [pc, #68]	@ (800b42c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d10c      	bne.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	40012c00 	.word	0x40012c00
 800b428:	40013400 	.word	0x40013400
 800b42c:	40015000 	.word	0x40015000
 800b430:	40000400 	.word	0x40000400
 800b434:	40000800 	.word	0x40000800
 800b438:	40000c00 	.word	0x40000c00
 800b43c:	40014000 	.word	0x40014000

0800b440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b454:	2b01      	cmp	r3, #1
 800b456:	d101      	bne.n	800b45c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b458:	2302      	movs	r3, #2
 800b45a:	e078      	b.n	800b54e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4313      	orrs	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	041b      	lsls	r3, r3, #16
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b55c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d009      	beq.n	800b502 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b560 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d004      	beq.n	800b502 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a19      	ldr	r2, [pc, #100]	@ (800b564 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d11c      	bne.n	800b53c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50c:	051b      	lsls	r3, r3, #20
 800b50e:	4313      	orrs	r3, r2
 800b510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40012c00 	.word	0x40012c00
 800b560:	40013400 	.word	0x40013400
 800b564:	40015000 	.word	0x40015000

0800b568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e050      	b.n	800b6bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b620:	2b00      	cmp	r3, #0
 800b622:	d114      	bne.n	800b64e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fd5b 	bl	800c0e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d103      	bne.n	800b644 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a21      	ldr	r2, [pc, #132]	@ (800b6c4 <HAL_UART_Init+0xbc>)
 800b640:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2224      	movs	r2, #36	@ 0x24
 800b652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0201 	bic.w	r2, r2, #1
 800b664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f001 f888 	bl	800c784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fd89 	bl	800c18c <UART_SetConfig>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e01b      	b.n	800b6bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689a      	ldr	r2, [r3, #8]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f907 	bl	800c8c8 <UART_CheckIdleState>
 800b6ba:	4603      	mov	r3, r0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	08005add 	.word	0x08005add

0800b6c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d109      	bne.n	800b6f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e09c      	b.n	800b82e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d16c      	bne.n	800b7d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	2b0c      	cmp	r3, #12
 800b702:	d85e      	bhi.n	800b7c2 <HAL_UART_RegisterCallback+0xfa>
 800b704:	a201      	add	r2, pc, #4	@ (adr r2, 800b70c <HAL_UART_RegisterCallback+0x44>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b741 	.word	0x0800b741
 800b710:	0800b74b 	.word	0x0800b74b
 800b714:	0800b755 	.word	0x0800b755
 800b718:	0800b75f 	.word	0x0800b75f
 800b71c:	0800b769 	.word	0x0800b769
 800b720:	0800b773 	.word	0x0800b773
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b787 	.word	0x0800b787
 800b72c:	0800b791 	.word	0x0800b791
 800b730:	0800b79b 	.word	0x0800b79b
 800b734:	0800b7a5 	.word	0x0800b7a5
 800b738:	0800b7af 	.word	0x0800b7af
 800b73c:	0800b7b9 	.word	0x0800b7b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b748:	e070      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b752:	e06b      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b75c:	e066      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b766:	e061      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b770:	e05c      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b77a:	e057      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b784:	e052      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b78e:	e04d      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b798:	e048      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b7a2:	e043      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b7ac:	e03e      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b7b6:	e039      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b7c0:	e034      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	75fb      	strb	r3, [r7, #23]
        break;
 800b7d6:	e029      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d11a      	bne.n	800b818 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	2b0b      	cmp	r3, #11
 800b7e6:	d002      	beq.n	800b7ee <HAL_UART_RegisterCallback+0x126>
 800b7e8:	2b0c      	cmp	r3, #12
 800b7ea:	d005      	beq.n	800b7f8 <HAL_UART_RegisterCallback+0x130>
 800b7ec:	e009      	b.n	800b802 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b7f6:	e019      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b800:	e014      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b808:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	75fb      	strb	r3, [r7, #23]
        break;
 800b816:	e009      	b.n	800b82c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b81e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop

0800b83c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	@ 0x28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b850:	2b20      	cmp	r3, #32
 800b852:	d137      	bne.n	800b8c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <HAL_UART_Receive_DMA+0x24>
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e030      	b.n	800b8c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a18      	ldr	r2, [pc, #96]	@ (800b8d0 <HAL_UART_Receive_DMA+0x94>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d01f      	beq.n	800b8b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d018      	beq.n	800b8b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	e853 3f00 	ldrex	r3, [r3]
 800b88e:	613b      	str	r3, [r7, #16]
   return(result);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b896:	627b      	str	r3, [r7, #36]	@ 0x24
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	623b      	str	r3, [r7, #32]
 800b8a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a4:	69f9      	ldr	r1, [r7, #28]
 800b8a6:	6a3a      	ldr	r2, [r7, #32]
 800b8a8:	e841 2300 	strex	r3, r2, [r1]
 800b8ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e6      	bne.n	800b882 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b8b4:	88fb      	ldrh	r3, [r7, #6]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f001 f91c 	bl	800caf8 <UART_Start_Receive_DMA>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	e000      	b.n	800b8c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b8c4:	2302      	movs	r3, #2
  }
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3728      	adds	r7, #40	@ 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40008000 	.word	0x40008000

0800b8d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b0ba      	sub	sp, #232	@ 0xe8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b8fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b8fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b902:	4013      	ands	r3, r2
 800b904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d11b      	bne.n	800b948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b914:	f003 0320 	and.w	r3, r3, #32
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d015      	beq.n	800b948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b920:	f003 0320 	and.w	r3, r3, #32
 800b924:	2b00      	cmp	r3, #0
 800b926:	d105      	bne.n	800b934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b92c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d009      	beq.n	800b948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 8312 	beq.w	800bf62 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
      }
      return;
 800b946:	e30c      	b.n	800bf62 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 8129 	beq.w	800bba4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b956:	4b90      	ldr	r3, [pc, #576]	@ (800bb98 <HAL_UART_IRQHandler+0x2c4>)
 800b958:	4013      	ands	r3, r2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b95e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b962:	4b8e      	ldr	r3, [pc, #568]	@ (800bb9c <HAL_UART_IRQHandler+0x2c8>)
 800b964:	4013      	ands	r3, r2
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 811c 	beq.w	800bba4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d011      	beq.n	800b99c <HAL_UART_IRQHandler+0xc8>
 800b978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2201      	movs	r2, #1
 800b98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b992:	f043 0201 	orr.w	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a0:	f003 0302 	and.w	r3, r3, #2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d011      	beq.n	800b9cc <HAL_UART_IRQHandler+0xf8>
 800b9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c2:	f043 0204 	orr.w	r2, r3, #4
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d011      	beq.n	800b9fc <HAL_UART_IRQHandler+0x128>
 800b9d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00b      	beq.n	800b9fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f2:	f043 0202 	orr.w	r2, r3, #2
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba00:	f003 0308 	and.w	r3, r3, #8
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d017      	beq.n	800ba38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba0c:	f003 0320 	and.w	r3, r3, #32
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d105      	bne.n	800ba20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba18:	4b5f      	ldr	r3, [pc, #380]	@ (800bb98 <HAL_UART_IRQHandler+0x2c4>)
 800ba1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00b      	beq.n	800ba38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2208      	movs	r2, #8
 800ba26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba2e:	f043 0208 	orr.w	r2, r3, #8
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d012      	beq.n	800ba6a <HAL_UART_IRQHandler+0x196>
 800ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00c      	beq.n	800ba6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba60:	f043 0220 	orr.w	r2, r3, #32
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8278 	beq.w	800bf66 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba7a:	f003 0320 	and.w	r3, r3, #32
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d013      	beq.n	800baaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba86:	f003 0320 	and.w	r3, r3, #32
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d105      	bne.n	800ba9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d007      	beq.n	800baaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d003      	beq.n	800baaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800babe:	2b40      	cmp	r3, #64	@ 0x40
 800bac0:	d005      	beq.n	800bace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d058      	beq.n	800bb80 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f001 f8f9 	bl	800ccc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bade:	2b40      	cmp	r3, #64	@ 0x40
 800bae0:	d148      	bne.n	800bb74 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3308      	adds	r3, #8
 800bae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800baf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bafc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3308      	adds	r3, #8
 800bb0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb1e:	e841 2300 	strex	r3, r2, [r1]
 800bb22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1d9      	bne.n	800bae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d017      	beq.n	800bb68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb3e:	4a18      	ldr	r2, [pc, #96]	@ (800bba0 <HAL_UART_IRQHandler+0x2cc>)
 800bb40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fc f8c5 	bl	8007cd8 <HAL_DMA_Abort_IT>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01f      	beq.n	800bb94 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bb62:	4610      	mov	r0, r2
 800bb64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb66:	e015      	b.n	800bb94 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb72:	e00f      	b.n	800bb94 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb7e:	e009      	b.n	800bb94 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb92:	e1e8      	b.n	800bf66 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb94:	bf00      	nop
    return;
 800bb96:	e1e6      	b.n	800bf66 <HAL_UART_IRQHandler+0x692>
 800bb98:	10000001 	.word	0x10000001
 800bb9c:	04000120 	.word	0x04000120
 800bba0:	0800cf91 	.word	0x0800cf91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	f040 8176 	bne.w	800be9a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 816f 	beq.w	800be9a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbc0:	f003 0310 	and.w	r3, r3, #16
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8168 	beq.w	800be9a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2210      	movs	r2, #16
 800bbd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbdc:	2b40      	cmp	r3, #64	@ 0x40
 800bbde:	f040 80dc 	bne.w	800bd9a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80b1 	beq.w	800bd5c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc04:	429a      	cmp	r2, r3
 800bc06:	f080 80a9 	bcs.w	800bd5c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0320 	and.w	r3, r3, #32
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 8087 	bne.w	800bd36 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc34:	e853 3f00 	ldrex	r3, [r3]
 800bc38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1da      	bne.n	800bc28 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc84:	f023 0301 	bic.w	r3, r3, #1
 800bc88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3308      	adds	r3, #8
 800bc92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bca2:	e841 2300 	strex	r3, r2, [r1]
 800bca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1e1      	bne.n	800bc72 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bcbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3308      	adds	r3, #8
 800bcce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bcd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bcd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e3      	bne.n	800bcae <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcfc:	e853 3f00 	ldrex	r3, [r3]
 800bd00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd04:	f023 0310 	bic.w	r3, r3, #16
 800bd08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd1e:	e841 2300 	strex	r3, r2, [r1]
 800bd22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1e4      	bne.n	800bcf4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fb ff78 	bl	8007c26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2202      	movs	r2, #2
 800bd3a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800bd4e:	b292      	uxth	r2, r2
 800bd50:	1a8a      	subs	r2, r1, r2
 800bd52:	b292      	uxth	r2, r2
 800bd54:	4611      	mov	r1, r2
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bd5a:	e106      	b.n	800bf6a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd66:	429a      	cmp	r2, r3
 800bd68:	f040 80ff 	bne.w	800bf6a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	f040 80f5 	bne.w	800bf6a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2202      	movs	r2, #2
 800bd84:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bd92:	4611      	mov	r1, r2
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	4798      	blx	r3
      return;
 800bd98:	e0e7      	b.n	800bf6a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 80d9 	beq.w	800bf6e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800bdbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 80d4 	beq.w	800bf6e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bde8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdf0:	e841 2300 	strex	r3, r2, [r1]
 800bdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1e4      	bne.n	800bdc6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3308      	adds	r3, #8
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	623b      	str	r3, [r7, #32]
   return(result);
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be12:	f023 0301 	bic.w	r3, r3, #1
 800be16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3308      	adds	r3, #8
 800be20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be24:	633a      	str	r2, [r7, #48]	@ 0x30
 800be26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e1      	bne.n	800bdfc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2220      	movs	r2, #32
 800be3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	60fb      	str	r3, [r7, #12]
   return(result);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f023 0310 	bic.w	r3, r3, #16
 800be60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	69b9      	ldr	r1, [r7, #24]
 800be74:	69fa      	ldr	r2, [r7, #28]
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	617b      	str	r3, [r7, #20]
   return(result);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e4      	bne.n	800be4c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2202      	movs	r2, #2
 800be86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be8e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800be92:	4611      	mov	r1, r2
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be98:	e069      	b.n	800bf6e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d010      	beq.n	800bec8 <HAL_UART_IRQHandler+0x5f4>
 800bea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800beba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bec6:	e055      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800becc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d014      	beq.n	800befe <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d03e      	beq.n	800bf72 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
    }
    return;
 800befc:	e039      	b.n	800bf72 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <HAL_UART_IRQHandler+0x64a>
 800bf0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 f84e 	bl	800cfb8 <UART_EndTransmit_IT>
    return;
 800bf1c:	e02a      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <HAL_UART_IRQHandler+0x66e>
 800bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf40:	e018      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d012      	beq.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da0e      	bge.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf60:	e008      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bf62:	bf00      	nop
 800bf64:	e006      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800bf66:	bf00      	nop
 800bf68:	e004      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800bf72:	bf00      	nop
  }
}
 800bf74:	37e8      	adds	r7, #232	@ 0xe8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop

0800bf7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bffc:	bf00      	nop
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a09      	ldr	r2, [pc, #36]	@ (800c054 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d009      	beq.n	800c048 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	615a      	str	r2, [r3, #20]
  }
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	40008000 	.word	0x40008000

0800c058 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a18      	ldr	r2, [pc, #96]	@ (800c0c8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d027      	beq.n	800c0ba <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c070:	2b20      	cmp	r3, #32
 800c072:	d120      	bne.n	800c0b6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d101      	bne.n	800c082 <HAL_UART_EnableReceiverTimeout+0x2a>
 800c07e:	2302      	movs	r3, #2
 800c080:	e01c      	b.n	800c0bc <HAL_UART_EnableReceiverTimeout+0x64>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2224      	movs	r2, #36	@ 0x24
 800c08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800c0a0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e002      	b.n	800c0bc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	e000      	b.n	800c0bc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
  }
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	40008000 	.word	0x40008000

0800c0cc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c15c <UART_InitCallbacksToDefault+0x74>)
 800c0f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a19      	ldr	r2, [pc, #100]	@ (800c160 <UART_InitCallbacksToDefault+0x78>)
 800c0fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a18      	ldr	r2, [pc, #96]	@ (800c164 <UART_InitCallbacksToDefault+0x7c>)
 800c104:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a17      	ldr	r2, [pc, #92]	@ (800c168 <UART_InitCallbacksToDefault+0x80>)
 800c10c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a16      	ldr	r2, [pc, #88]	@ (800c16c <UART_InitCallbacksToDefault+0x84>)
 800c114:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a15      	ldr	r2, [pc, #84]	@ (800c170 <UART_InitCallbacksToDefault+0x88>)
 800c11c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a14      	ldr	r2, [pc, #80]	@ (800c174 <UART_InitCallbacksToDefault+0x8c>)
 800c124:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a13      	ldr	r2, [pc, #76]	@ (800c178 <UART_InitCallbacksToDefault+0x90>)
 800c12c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a12      	ldr	r2, [pc, #72]	@ (800c17c <UART_InitCallbacksToDefault+0x94>)
 800c134:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a11      	ldr	r2, [pc, #68]	@ (800c180 <UART_InitCallbacksToDefault+0x98>)
 800c13c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a10      	ldr	r2, [pc, #64]	@ (800c184 <UART_InitCallbacksToDefault+0x9c>)
 800c144:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a0f      	ldr	r2, [pc, #60]	@ (800c188 <UART_InitCallbacksToDefault+0xa0>)
 800c14c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	0800bf91 	.word	0x0800bf91
 800c160:	0800bf7d 	.word	0x0800bf7d
 800c164:	0800bfa5 	.word	0x0800bfa5
 800c168:	080043c1 	.word	0x080043c1
 800c16c:	0800bfb9 	.word	0x0800bfb9
 800c170:	0800bfcd 	.word	0x0800bfcd
 800c174:	0800bfe1 	.word	0x0800bfe1
 800c178:	0800bff5 	.word	0x0800bff5
 800c17c:	0800d013 	.word	0x0800d013
 800c180:	0800d027 	.word	0x0800d027
 800c184:	0800d03b 	.word	0x0800d03b
 800c188:	0800c009 	.word	0x0800c009

0800c18c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c18c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c190:	b08c      	sub	sp, #48	@ 0x30
 800c192:	af00      	add	r7, sp, #0
 800c194:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	689a      	ldr	r2, [r3, #8]
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4baa      	ldr	r3, [pc, #680]	@ (800c464 <UART_SetConfig+0x2d8>)
 800c1bc:	4013      	ands	r3, r2
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	6812      	ldr	r2, [r2, #0]
 800c1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a9f      	ldr	r2, [pc, #636]	@ (800c468 <UART_SetConfig+0x2dc>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d004      	beq.n	800c1f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c202:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	6812      	ldr	r2, [r2, #0]
 800c20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c20c:	430b      	orrs	r3, r1
 800c20e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c216:	f023 010f 	bic.w	r1, r3, #15
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	430a      	orrs	r2, r1
 800c224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a90      	ldr	r2, [pc, #576]	@ (800c46c <UART_SetConfig+0x2e0>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d125      	bne.n	800c27c <UART_SetConfig+0xf0>
 800c230:	4b8f      	ldr	r3, [pc, #572]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d81a      	bhi.n	800c274 <UART_SetConfig+0xe8>
 800c23e:	a201      	add	r2, pc, #4	@ (adr r2, 800c244 <UART_SetConfig+0xb8>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c265 	.word	0x0800c265
 800c24c:	0800c25d 	.word	0x0800c25d
 800c250:	0800c26d 	.word	0x0800c26d
 800c254:	2301      	movs	r3, #1
 800c256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c25a:	e116      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c25c:	2302      	movs	r3, #2
 800c25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c262:	e112      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c26a:	e10e      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c272:	e10a      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c27a:	e106      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a7c      	ldr	r2, [pc, #496]	@ (800c474 <UART_SetConfig+0x2e8>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d138      	bne.n	800c2f8 <UART_SetConfig+0x16c>
 800c286:	4b7a      	ldr	r3, [pc, #488]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c28c:	f003 030c 	and.w	r3, r3, #12
 800c290:	2b0c      	cmp	r3, #12
 800c292:	d82d      	bhi.n	800c2f0 <UART_SetConfig+0x164>
 800c294:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x110>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c2d1 	.word	0x0800c2d1
 800c2a0:	0800c2f1 	.word	0x0800c2f1
 800c2a4:	0800c2f1 	.word	0x0800c2f1
 800c2a8:	0800c2f1 	.word	0x0800c2f1
 800c2ac:	0800c2e1 	.word	0x0800c2e1
 800c2b0:	0800c2f1 	.word	0x0800c2f1
 800c2b4:	0800c2f1 	.word	0x0800c2f1
 800c2b8:	0800c2f1 	.word	0x0800c2f1
 800c2bc:	0800c2d9 	.word	0x0800c2d9
 800c2c0:	0800c2f1 	.word	0x0800c2f1
 800c2c4:	0800c2f1 	.word	0x0800c2f1
 800c2c8:	0800c2f1 	.word	0x0800c2f1
 800c2cc:	0800c2e9 	.word	0x0800c2e9
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2d6:	e0d8      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c2d8:	2302      	movs	r3, #2
 800c2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2de:	e0d4      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c2e0:	2304      	movs	r3, #4
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2e6:	e0d0      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c2e8:	2308      	movs	r3, #8
 800c2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ee:	e0cc      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c2f0:	2310      	movs	r3, #16
 800c2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2f6:	e0c8      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a5e      	ldr	r2, [pc, #376]	@ (800c478 <UART_SetConfig+0x2ec>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d125      	bne.n	800c34e <UART_SetConfig+0x1c2>
 800c302:	4b5b      	ldr	r3, [pc, #364]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c308:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c30c:	2b30      	cmp	r3, #48	@ 0x30
 800c30e:	d016      	beq.n	800c33e <UART_SetConfig+0x1b2>
 800c310:	2b30      	cmp	r3, #48	@ 0x30
 800c312:	d818      	bhi.n	800c346 <UART_SetConfig+0x1ba>
 800c314:	2b20      	cmp	r3, #32
 800c316:	d00a      	beq.n	800c32e <UART_SetConfig+0x1a2>
 800c318:	2b20      	cmp	r3, #32
 800c31a:	d814      	bhi.n	800c346 <UART_SetConfig+0x1ba>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <UART_SetConfig+0x19a>
 800c320:	2b10      	cmp	r3, #16
 800c322:	d008      	beq.n	800c336 <UART_SetConfig+0x1aa>
 800c324:	e00f      	b.n	800c346 <UART_SetConfig+0x1ba>
 800c326:	2300      	movs	r3, #0
 800c328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c32c:	e0ad      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c32e:	2302      	movs	r3, #2
 800c330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c334:	e0a9      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c336:	2304      	movs	r3, #4
 800c338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c33c:	e0a5      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c33e:	2308      	movs	r3, #8
 800c340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c344:	e0a1      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c346:	2310      	movs	r3, #16
 800c348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c34c:	e09d      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a4a      	ldr	r2, [pc, #296]	@ (800c47c <UART_SetConfig+0x2f0>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d125      	bne.n	800c3a4 <UART_SetConfig+0x218>
 800c358:	4b45      	ldr	r3, [pc, #276]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c35e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c362:	2bc0      	cmp	r3, #192	@ 0xc0
 800c364:	d016      	beq.n	800c394 <UART_SetConfig+0x208>
 800c366:	2bc0      	cmp	r3, #192	@ 0xc0
 800c368:	d818      	bhi.n	800c39c <UART_SetConfig+0x210>
 800c36a:	2b80      	cmp	r3, #128	@ 0x80
 800c36c:	d00a      	beq.n	800c384 <UART_SetConfig+0x1f8>
 800c36e:	2b80      	cmp	r3, #128	@ 0x80
 800c370:	d814      	bhi.n	800c39c <UART_SetConfig+0x210>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <UART_SetConfig+0x1f0>
 800c376:	2b40      	cmp	r3, #64	@ 0x40
 800c378:	d008      	beq.n	800c38c <UART_SetConfig+0x200>
 800c37a:	e00f      	b.n	800c39c <UART_SetConfig+0x210>
 800c37c:	2300      	movs	r3, #0
 800c37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c382:	e082      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c384:	2302      	movs	r3, #2
 800c386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c38a:	e07e      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c38c:	2304      	movs	r3, #4
 800c38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c392:	e07a      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c394:	2308      	movs	r3, #8
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c39a:	e076      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c39c:	2310      	movs	r3, #16
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3a2:	e072      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a35      	ldr	r2, [pc, #212]	@ (800c480 <UART_SetConfig+0x2f4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d12a      	bne.n	800c404 <UART_SetConfig+0x278>
 800c3ae:	4b30      	ldr	r3, [pc, #192]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3bc:	d01a      	beq.n	800c3f4 <UART_SetConfig+0x268>
 800c3be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3c2:	d81b      	bhi.n	800c3fc <UART_SetConfig+0x270>
 800c3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3c8:	d00c      	beq.n	800c3e4 <UART_SetConfig+0x258>
 800c3ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3ce:	d815      	bhi.n	800c3fc <UART_SetConfig+0x270>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d003      	beq.n	800c3dc <UART_SetConfig+0x250>
 800c3d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3d8:	d008      	beq.n	800c3ec <UART_SetConfig+0x260>
 800c3da:	e00f      	b.n	800c3fc <UART_SetConfig+0x270>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3e2:	e052      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ea:	e04e      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c3ec:	2304      	movs	r3, #4
 800c3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3f2:	e04a      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c3f4:	2308      	movs	r3, #8
 800c3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3fa:	e046      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c3fc:	2310      	movs	r3, #16
 800c3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c402:	e042      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a17      	ldr	r2, [pc, #92]	@ (800c468 <UART_SetConfig+0x2dc>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d13a      	bne.n	800c484 <UART_SetConfig+0x2f8>
 800c40e:	4b18      	ldr	r3, [pc, #96]	@ (800c470 <UART_SetConfig+0x2e4>)
 800c410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c414:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c418:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c41c:	d01a      	beq.n	800c454 <UART_SetConfig+0x2c8>
 800c41e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c422:	d81b      	bhi.n	800c45c <UART_SetConfig+0x2d0>
 800c424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c428:	d00c      	beq.n	800c444 <UART_SetConfig+0x2b8>
 800c42a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c42e:	d815      	bhi.n	800c45c <UART_SetConfig+0x2d0>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d003      	beq.n	800c43c <UART_SetConfig+0x2b0>
 800c434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c438:	d008      	beq.n	800c44c <UART_SetConfig+0x2c0>
 800c43a:	e00f      	b.n	800c45c <UART_SetConfig+0x2d0>
 800c43c:	2300      	movs	r3, #0
 800c43e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c442:	e022      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c444:	2302      	movs	r3, #2
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c44a:	e01e      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c452:	e01a      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c454:	2308      	movs	r3, #8
 800c456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c45a:	e016      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c45c:	2310      	movs	r3, #16
 800c45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c462:	e012      	b.n	800c48a <UART_SetConfig+0x2fe>
 800c464:	cfff69f3 	.word	0xcfff69f3
 800c468:	40008000 	.word	0x40008000
 800c46c:	40013800 	.word	0x40013800
 800c470:	40021000 	.word	0x40021000
 800c474:	40004400 	.word	0x40004400
 800c478:	40004800 	.word	0x40004800
 800c47c:	40004c00 	.word	0x40004c00
 800c480:	40005000 	.word	0x40005000
 800c484:	2310      	movs	r3, #16
 800c486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4aae      	ldr	r2, [pc, #696]	@ (800c748 <UART_SetConfig+0x5bc>)
 800c490:	4293      	cmp	r3, r2
 800c492:	f040 8097 	bne.w	800c5c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c496:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c49a:	2b08      	cmp	r3, #8
 800c49c:	d823      	bhi.n	800c4e6 <UART_SetConfig+0x35a>
 800c49e:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a4 <UART_SetConfig+0x318>)
 800c4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4e7 	.word	0x0800c4e7
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4e7 	.word	0x0800c4e7
 800c4b4:	0800c4d7 	.word	0x0800c4d7
 800c4b8:	0800c4e7 	.word	0x0800c4e7
 800c4bc:	0800c4e7 	.word	0x0800c4e7
 800c4c0:	0800c4e7 	.word	0x0800c4e7
 800c4c4:	0800c4df 	.word	0x0800c4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4c8:	f7fc fcf6 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 800c4cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4ce:	e010      	b.n	800c4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4d0:	4b9e      	ldr	r3, [pc, #632]	@ (800c74c <UART_SetConfig+0x5c0>)
 800c4d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4d4:	e00d      	b.n	800c4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4d6:	f7fc fc81 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 800c4da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4dc:	e009      	b.n	800c4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4e4:	e005      	b.n	800c4f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c4f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 8130 	beq.w	800c75a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fe:	4a94      	ldr	r2, [pc, #592]	@ (800c750 <UART_SetConfig+0x5c4>)
 800c500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c504:	461a      	mov	r2, r3
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	fbb3 f3f2 	udiv	r3, r3, r2
 800c50c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	4613      	mov	r3, r2
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4413      	add	r3, r2
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d305      	bcc.n	800c52a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c524:	69ba      	ldr	r2, [r7, #24]
 800c526:	429a      	cmp	r2, r3
 800c528:	d903      	bls.n	800c532 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c530:	e113      	b.n	800c75a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c534:	2200      	movs	r2, #0
 800c536:	60bb      	str	r3, [r7, #8]
 800c538:	60fa      	str	r2, [r7, #12]
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c53e:	4a84      	ldr	r2, [pc, #528]	@ (800c750 <UART_SetConfig+0x5c4>)
 800c540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c544:	b29b      	uxth	r3, r3
 800c546:	2200      	movs	r2, #0
 800c548:	603b      	str	r3, [r7, #0]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c550:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c554:	f7f4 fac6 	bl	8000ae4 <__aeabi_uldivmod>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4610      	mov	r0, r2
 800c55e:	4619      	mov	r1, r3
 800c560:	f04f 0200 	mov.w	r2, #0
 800c564:	f04f 0300 	mov.w	r3, #0
 800c568:	020b      	lsls	r3, r1, #8
 800c56a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c56e:	0202      	lsls	r2, r0, #8
 800c570:	6979      	ldr	r1, [r7, #20]
 800c572:	6849      	ldr	r1, [r1, #4]
 800c574:	0849      	lsrs	r1, r1, #1
 800c576:	2000      	movs	r0, #0
 800c578:	460c      	mov	r4, r1
 800c57a:	4605      	mov	r5, r0
 800c57c:	eb12 0804 	adds.w	r8, r2, r4
 800c580:	eb43 0905 	adc.w	r9, r3, r5
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	469a      	mov	sl, r3
 800c58c:	4693      	mov	fp, r2
 800c58e:	4652      	mov	r2, sl
 800c590:	465b      	mov	r3, fp
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f4 faa5 	bl	8000ae4 <__aeabi_uldivmod>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4613      	mov	r3, r2
 800c5a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5a8:	d308      	bcc.n	800c5bc <UART_SetConfig+0x430>
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5b0:	d204      	bcs.n	800c5bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6a3a      	ldr	r2, [r7, #32]
 800c5b8:	60da      	str	r2, [r3, #12]
 800c5ba:	e0ce      	b.n	800c75a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5c2:	e0ca      	b.n	800c75a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5cc:	d166      	bne.n	800c69c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d827      	bhi.n	800c626 <UART_SetConfig+0x49a>
 800c5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5dc <UART_SetConfig+0x450>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c601 	.word	0x0800c601
 800c5e0:	0800c609 	.word	0x0800c609
 800c5e4:	0800c611 	.word	0x0800c611
 800c5e8:	0800c627 	.word	0x0800c627
 800c5ec:	0800c617 	.word	0x0800c617
 800c5f0:	0800c627 	.word	0x0800c627
 800c5f4:	0800c627 	.word	0x0800c627
 800c5f8:	0800c627 	.word	0x0800c627
 800c5fc:	0800c61f 	.word	0x0800c61f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c600:	f7fc fc5a 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 800c604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c606:	e014      	b.n	800c632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c608:	f7fc fc6c 	bl	8008ee4 <HAL_RCC_GetPCLK2Freq>
 800c60c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c60e:	e010      	b.n	800c632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c610:	4b4e      	ldr	r3, [pc, #312]	@ (800c74c <UART_SetConfig+0x5c0>)
 800c612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c614:	e00d      	b.n	800c632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c616:	f7fc fbe1 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 800c61a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c61c:	e009      	b.n	800c632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c624:	e005      	b.n	800c632 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 8090 	beq.w	800c75a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63e:	4a44      	ldr	r2, [pc, #272]	@ (800c750 <UART_SetConfig+0x5c4>)
 800c640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c644:	461a      	mov	r2, r3
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	fbb3 f3f2 	udiv	r3, r3, r2
 800c64c:	005a      	lsls	r2, r3, #1
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	085b      	lsrs	r3, r3, #1
 800c654:	441a      	add	r2, r3
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	2b0f      	cmp	r3, #15
 800c664:	d916      	bls.n	800c694 <UART_SetConfig+0x508>
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c66c:	d212      	bcs.n	800c694 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	b29b      	uxth	r3, r3
 800c672:	f023 030f 	bic.w	r3, r3, #15
 800c676:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	085b      	lsrs	r3, r3, #1
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f003 0307 	and.w	r3, r3, #7
 800c682:	b29a      	uxth	r2, r3
 800c684:	8bfb      	ldrh	r3, [r7, #30]
 800c686:	4313      	orrs	r3, r2
 800c688:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	8bfa      	ldrh	r2, [r7, #30]
 800c690:	60da      	str	r2, [r3, #12]
 800c692:	e062      	b.n	800c75a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c69a:	e05e      	b.n	800c75a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c69c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	d828      	bhi.n	800c6f6 <UART_SetConfig+0x56a>
 800c6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c6ac <UART_SetConfig+0x520>)
 800c6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6aa:	bf00      	nop
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6e1 	.word	0x0800c6e1
 800c6b8:	0800c6f7 	.word	0x0800c6f7
 800c6bc:	0800c6e7 	.word	0x0800c6e7
 800c6c0:	0800c6f7 	.word	0x0800c6f7
 800c6c4:	0800c6f7 	.word	0x0800c6f7
 800c6c8:	0800c6f7 	.word	0x0800c6f7
 800c6cc:	0800c6ef 	.word	0x0800c6ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6d0:	f7fc fbf2 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 800c6d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6d6:	e014      	b.n	800c702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6d8:	f7fc fc04 	bl	8008ee4 <HAL_RCC_GetPCLK2Freq>
 800c6dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6de:	e010      	b.n	800c702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c74c <UART_SetConfig+0x5c0>)
 800c6e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c6e4:	e00d      	b.n	800c702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6e6:	f7fc fb79 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 800c6ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6ec:	e009      	b.n	800c702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c6f4:	e005      	b.n	800c702 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c700:	bf00      	nop
    }

    if (pclk != 0U)
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	d028      	beq.n	800c75a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70c:	4a10      	ldr	r2, [pc, #64]	@ (800c750 <UART_SetConfig+0x5c4>)
 800c70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c712:	461a      	mov	r2, r3
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	fbb3 f2f2 	udiv	r2, r3, r2
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	085b      	lsrs	r3, r3, #1
 800c720:	441a      	add	r2, r3
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	fbb2 f3f3 	udiv	r3, r2, r3
 800c72a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	2b0f      	cmp	r3, #15
 800c730:	d910      	bls.n	800c754 <UART_SetConfig+0x5c8>
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c738:	d20c      	bcs.n	800c754 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60da      	str	r2, [r3, #12]
 800c744:	e009      	b.n	800c75a <UART_SetConfig+0x5ce>
 800c746:	bf00      	nop
 800c748:	40008000 	.word	0x40008000
 800c74c:	00f42400 	.word	0x00f42400
 800c750:	0800e218 	.word	0x0800e218
      }
      else
      {
        ret = HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	2201      	movs	r2, #1
 800c766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2200      	movs	r2, #0
 800c76e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2200      	movs	r2, #0
 800c774:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c776:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3730      	adds	r7, #48	@ 0x30
 800c77e:	46bd      	mov	sp, r7
 800c780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c790:	f003 0308 	and.w	r3, r3, #8
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00a      	beq.n	800c7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00a      	beq.n	800c7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f6:	f003 0304 	and.w	r3, r3, #4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c818:	f003 0310 	and.w	r3, r3, #16
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00a      	beq.n	800c836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83a:	f003 0320 	and.w	r3, r3, #32
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c87e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c882:	d10a      	bne.n	800c89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	430a      	orrs	r2, r1
 800c898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00a      	beq.n	800c8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	605a      	str	r2, [r3, #4]
  }
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b098      	sub	sp, #96	@ 0x60
 800c8cc:	af02      	add	r7, sp, #8
 800c8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8d8:	f7f9 faee 	bl	8005eb8 <HAL_GetTick>
 800c8dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0308 	and.w	r3, r3, #8
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	d12f      	bne.n	800c94c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f88e 	bl	800ca1c <UART_WaitOnFlagUntilTimeout>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d022      	beq.n	800c94c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c91a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c924:	647b      	str	r3, [r7, #68]	@ 0x44
 800c926:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c92a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e6      	bne.n	800c906 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	e063      	b.n	800ca14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0304 	and.w	r3, r3, #4
 800c956:	2b04      	cmp	r3, #4
 800c958:	d149      	bne.n	800c9ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c95a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c962:	2200      	movs	r2, #0
 800c964:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f857 	bl	800ca1c <UART_WaitOnFlagUntilTimeout>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d03c      	beq.n	800c9ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97c:	e853 3f00 	ldrex	r3, [r3]
 800c980:	623b      	str	r3, [r7, #32]
   return(result);
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c992:	633b      	str	r3, [r7, #48]	@ 0x30
 800c994:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c99a:	e841 2300 	strex	r3, r2, [r1]
 800c99e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1e6      	bne.n	800c974 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f023 0301 	bic.w	r3, r3, #1
 800c9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9c6:	61fa      	str	r2, [r7, #28]
 800c9c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	69b9      	ldr	r1, [r7, #24]
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e5      	bne.n	800c9a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e012      	b.n	800ca14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2220      	movs	r2, #32
 800c9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3758      	adds	r7, #88	@ 0x58
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca2c:	e04f      	b.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca34:	d04b      	beq.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca36:	f7f9 fa3f 	bl	8005eb8 <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	69ba      	ldr	r2, [r7, #24]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d302      	bcc.n	800ca4c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d101      	bne.n	800ca50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	e04e      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0304 	and.w	r3, r3, #4
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d037      	beq.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b80      	cmp	r3, #128	@ 0x80
 800ca62:	d034      	beq.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b40      	cmp	r3, #64	@ 0x40
 800ca68:	d031      	beq.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	69db      	ldr	r3, [r3, #28]
 800ca70:	f003 0308 	and.w	r3, r3, #8
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d110      	bne.n	800ca9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2208      	movs	r2, #8
 800ca7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f920 	bl	800ccc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2208      	movs	r2, #8
 800ca8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e029      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800caa8:	d111      	bne.n	800cace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 f906 	bl	800ccc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2220      	movs	r2, #32
 800cabe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e00f      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69da      	ldr	r2, [r3, #28]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4013      	ands	r3, r2
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	429a      	cmp	r2, r3
 800cadc:	bf0c      	ite	eq
 800cade:	2301      	moveq	r3, #1
 800cae0:	2300      	movne	r3, #0
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	461a      	mov	r2, r3
 800cae6:	79fb      	ldrb	r3, [r7, #7]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d0a0      	beq.n	800ca2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b096      	sub	sp, #88	@ 0x58
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	88fa      	ldrh	r2, [r7, #6]
 800cb10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2222      	movs	r2, #34	@ 0x22
 800cb20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d02d      	beq.n	800cb8a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb34:	4a40      	ldr	r2, [pc, #256]	@ (800cc38 <UART_Start_Receive_DMA+0x140>)
 800cb36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb3e:	4a3f      	ldr	r2, [pc, #252]	@ (800cc3c <UART_Start_Receive_DMA+0x144>)
 800cb40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb48:	4a3d      	ldr	r2, [pc, #244]	@ (800cc40 <UART_Start_Receive_DMA+0x148>)
 800cb4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb52:	2200      	movs	r2, #0
 800cb54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3324      	adds	r3, #36	@ 0x24
 800cb62:	4619      	mov	r1, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb68:	461a      	mov	r2, r3
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	f7fa ffe0 	bl	8007b30 <HAL_DMA_Start_IT>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2210      	movs	r2, #16
 800cb7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e051      	b.n	800cc2e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d018      	beq.n	800cbc4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9a:	e853 3f00 	ldrex	r3, [r3]
 800cb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cba6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbb2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cbb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbb8:	e841 2300 	strex	r3, r2, [r1]
 800cbbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cbbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1e6      	bne.n	800cb92 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	3308      	adds	r3, #8
 800cbca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	e853 3f00 	ldrex	r3, [r3]
 800cbd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbe4:	637a      	str	r2, [r7, #52]	@ 0x34
 800cbe6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbec:	e841 2300 	strex	r3, r2, [r1]
 800cbf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1e5      	bne.n	800cbc4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	e853 3f00 	ldrex	r3, [r3]
 800cc06:	613b      	str	r3, [r7, #16]
   return(result);
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3308      	adds	r3, #8
 800cc16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc18:	623a      	str	r2, [r7, #32]
 800cc1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1c:	69f9      	ldr	r1, [r7, #28]
 800cc1e:	6a3a      	ldr	r2, [r7, #32]
 800cc20:	e841 2300 	strex	r3, r2, [r1]
 800cc24:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1e5      	bne.n	800cbf8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3758      	adds	r7, #88	@ 0x58
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0800cd93 	.word	0x0800cd93
 800cc3c:	0800cec7 	.word	0x0800cec7
 800cc40:	0800cf0d 	.word	0x0800cf0d

0800cc44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b08f      	sub	sp, #60	@ 0x3c
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	e853 3f00 	ldrex	r3, [r3]
 800cc58:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cc60:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc72:	e841 2300 	strex	r3, r2, [r1]
 800cc76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1e6      	bne.n	800cc4c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3308      	adds	r3, #8
 800cc84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	e853 3f00 	ldrex	r3, [r3]
 800cc8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cc94:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc9e:	61ba      	str	r2, [r7, #24]
 800cca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca2:	6979      	ldr	r1, [r7, #20]
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	e841 2300 	strex	r3, r2, [r1]
 800ccaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1e5      	bne.n	800cc7e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ccba:	bf00      	nop
 800ccbc:	373c      	adds	r7, #60	@ 0x3c
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b095      	sub	sp, #84	@ 0x54
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd6:	e853 3f00 	ldrex	r3, [r3]
 800ccda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	461a      	mov	r2, r3
 800ccea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccec:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ccf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccf4:	e841 2300 	strex	r3, r2, [r1]
 800ccf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1e6      	bne.n	800ccce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3308      	adds	r3, #8
 800cd06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	e853 3f00 	ldrex	r3, [r3]
 800cd0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd16:	f023 0301 	bic.w	r3, r3, #1
 800cd1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e3      	bne.n	800cd00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d118      	bne.n	800cd72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f023 0310 	bic.w	r3, r3, #16
 800cd54:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5e:	61bb      	str	r3, [r7, #24]
 800cd60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	6979      	ldr	r1, [r7, #20]
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e6      	bne.n	800cd40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2220      	movs	r2, #32
 800cd76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd86:	bf00      	nop
 800cd88:	3754      	adds	r7, #84	@ 0x54
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b09c      	sub	sp, #112	@ 0x70
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f003 0320 	and.w	r3, r3, #32
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d171      	bne.n	800ce92 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cdae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdbe:	e853 3f00 	ldrex	r3, [r3]
 800cdc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cddc:	e841 2300 	strex	r3, r2, [r1]
 800cde0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cde2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1e6      	bne.n	800cdb6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3308      	adds	r3, #8
 800cdee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfa:	f023 0301 	bic.w	r3, r3, #1
 800cdfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3308      	adds	r3, #8
 800ce06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce08:	647a      	str	r2, [r7, #68]	@ 0x44
 800ce0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce10:	e841 2300 	strex	r3, r2, [r1]
 800ce14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1e5      	bne.n	800cde8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	3308      	adds	r3, #8
 800ce22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	e853 3f00 	ldrex	r3, [r3]
 800ce2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce44:	e841 2300 	strex	r3, r2, [r1]
 800ce48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e5      	bne.n	800ce1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce52:	2220      	movs	r2, #32
 800ce54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d118      	bne.n	800ce92 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	e853 3f00 	ldrex	r3, [r3]
 800ce6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f023 0310 	bic.w	r3, r3, #16
 800ce74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce7e:	61fb      	str	r3, [r7, #28]
 800ce80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	69b9      	ldr	r1, [r7, #24]
 800ce84:	69fa      	ldr	r2, [r7, #28]
 800ce86:	e841 2300 	strex	r3, r2, [r1]
 800ce8a:	617b      	str	r3, [r7, #20]
   return(result);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1e6      	bne.n	800ce60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce94:	2200      	movs	r2, #0
 800ce96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d109      	bne.n	800ceb4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cea2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cea6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cea8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ceac:	4611      	mov	r1, r2
 800ceae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ceb0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ceb2:	e004      	b.n	800cebe <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ceb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ceba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cebc:	4798      	blx	r3
}
 800cebe:	bf00      	nop
 800cec0:	3770      	adds	r7, #112	@ 0x70
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2201      	movs	r2, #1
 800ced8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d10b      	bne.n	800cefa <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ceee:	0852      	lsrs	r2, r2, #1
 800cef0:	b292      	uxth	r2, r2
 800cef2:	4611      	mov	r1, r2
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cef8:	e004      	b.n	800cf04 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	4798      	blx	r3
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf34:	2b80      	cmp	r3, #128	@ 0x80
 800cf36:	d109      	bne.n	800cf4c <UART_DMAError+0x40>
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b21      	cmp	r3, #33	@ 0x21
 800cf3c:	d106      	bne.n	800cf4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cf46:	6978      	ldr	r0, [r7, #20]
 800cf48:	f7ff fe7c 	bl	800cc44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf56:	2b40      	cmp	r3, #64	@ 0x40
 800cf58:	d109      	bne.n	800cf6e <UART_DMAError+0x62>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b22      	cmp	r3, #34	@ 0x22
 800cf5e:	d106      	bne.n	800cf6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cf68:	6978      	ldr	r0, [r7, #20]
 800cf6a:	f7ff feac 	bl	800ccc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf74:	f043 0210 	orr.w	r2, r3, #16
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cf84:	6978      	ldr	r0, [r7, #20]
 800cf86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf88:	bf00      	nop
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe2:	6979      	ldr	r1, [r7, #20]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	e841 2300 	strex	r3, r2, [r1]
 800cfea:	613b      	str	r3, [r7, #16]
   return(result);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e6      	bne.n	800cfc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2220      	movs	r2, #32
 800cff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d00a:	bf00      	nop
 800d00c:	3720      	adds	r7, #32
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d01a:	bf00      	nop
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <HAL_UARTEx_DisableFifoMode+0x16>
 800d060:	2302      	movs	r3, #2
 800d062:	e027      	b.n	800d0b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2224      	movs	r2, #36	@ 0x24
 800d070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f022 0201 	bic.w	r2, r2, #1
 800d08a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d101      	bne.n	800d0d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	e02d      	b.n	800d134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2224      	movs	r2, #36	@ 0x24
 800d0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f022 0201 	bic.w	r2, r2, #1
 800d0fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f84f 	bl	800d1b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2220      	movs	r2, #32
 800d126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d101      	bne.n	800d154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d150:	2302      	movs	r3, #2
 800d152:	e02d      	b.n	800d1b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2224      	movs	r2, #36	@ 0x24
 800d160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f022 0201 	bic.w	r2, r2, #1
 800d17a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	430a      	orrs	r2, r1
 800d18e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f811 	bl	800d1b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d108      	bne.n	800d1da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1d8:	e031      	b.n	800d23e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1da:	2308      	movs	r3, #8
 800d1dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1de:	2308      	movs	r3, #8
 800d1e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	0e5b      	lsrs	r3, r3, #25
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 0307 	and.w	r3, r3, #7
 800d1f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	0f5b      	lsrs	r3, r3, #29
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 0307 	and.w	r3, r3, #7
 800d200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d202:	7bbb      	ldrb	r3, [r7, #14]
 800d204:	7b3a      	ldrb	r2, [r7, #12]
 800d206:	4911      	ldr	r1, [pc, #68]	@ (800d24c <UARTEx_SetNbDataToProcess+0x94>)
 800d208:	5c8a      	ldrb	r2, [r1, r2]
 800d20a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d20e:	7b3a      	ldrb	r2, [r7, #12]
 800d210:	490f      	ldr	r1, [pc, #60]	@ (800d250 <UARTEx_SetNbDataToProcess+0x98>)
 800d212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d214:	fb93 f3f2 	sdiv	r3, r3, r2
 800d218:	b29a      	uxth	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	7b7a      	ldrb	r2, [r7, #13]
 800d224:	4909      	ldr	r1, [pc, #36]	@ (800d24c <UARTEx_SetNbDataToProcess+0x94>)
 800d226:	5c8a      	ldrb	r2, [r1, r2]
 800d228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d22c:	7b7a      	ldrb	r2, [r7, #13]
 800d22e:	4908      	ldr	r1, [pc, #32]	@ (800d250 <UARTEx_SetNbDataToProcess+0x98>)
 800d230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d232:	fb93 f3f2 	sdiv	r3, r3, r2
 800d236:	b29a      	uxth	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d23e:	bf00      	nop
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	0800e230 	.word	0x0800e230
 800d250:	0800e238 	.word	0x0800e238

0800d254 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d254:	b480      	push	{r7}
 800d256:	b08b      	sub	sp, #44	@ 0x2c
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	885b      	ldrh	r3, [r3, #2]
 800d27c:	fb02 f303 	mul.w	r3, r2, r3
 800d280:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d286:	e013      	b.n	800d2b0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800d288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28a:	1d1a      	adds	r2, r3, #4
 800d28c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d28e:	ed93 7a00 	vldr	s14, [r3]
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	1d1a      	adds	r2, r3, #4
 800d296:	623a      	str	r2, [r7, #32]
 800d298:	edd3 7a00 	vldr	s15, [r3]
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	1d1a      	adds	r2, r3, #4
 800d2a0:	61fa      	str	r2, [r7, #28]
 800d2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2a6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1e8      	bne.n	800d288 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d2ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	372c      	adds	r7, #44	@ 0x2c
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b085      	sub	sp, #20
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	817b      	strh	r3, [r7, #10]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	897a      	ldrh	r2, [r7, #10]
 800d2e0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	893a      	ldrh	r2, [r7, #8]
 800d2e6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	605a      	str	r2, [r3, #4]
}
 800d2ee:	bf00      	nop
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b093      	sub	sp, #76	@ 0x4c
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	885b      	ldrh	r3, [r3, #2]
 800d32e:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	885b      	ldrh	r3, [r3, #2]
 800d334:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d336:	2300      	movs	r3, #0
 800d338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d33a:	8b7b      	ldrh	r3, [r7, #26]
 800d33c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	69fa      	ldr	r2, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d348:	8b3b      	ldrh	r3, [r7, #24]
 800d34a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d352:	f04f 0300 	mov.w	r3, #0
 800d356:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d35a:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d35c:	8afb      	ldrh	r3, [r7, #22]
 800d35e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d360:	e017      	b.n	800d392 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d364:	1d1a      	adds	r2, r3, #4
 800d366:	647a      	str	r2, [r7, #68]	@ 0x44
 800d368:	ed93 7a00 	vldr	s14, [r3]
 800d36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d36e:	edd3 7a00 	vldr	s15, [r3]
 800d372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d376:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d37e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d382:	8b3b      	ldrh	r3, [r7, #24]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d388:	4413      	add	r3, r2
 800d38a:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	3b01      	subs	r3, #1
 800d390:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e4      	bne.n	800d362 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39a:	1d1a      	adds	r2, r3, #4
 800d39c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d39e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3a0:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d3a8:	8b3a      	ldrh	r2, [r7, #24]
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	6a3a      	ldr	r2, [r7, #32]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1ca      	bne.n	800d352 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d3bc:	8b3b      	ldrh	r3, [r7, #24]
 800d3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3c0:	4413      	add	r3, r2
 800d3c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d3c4:	8afb      	ldrh	r3, [r7, #22]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3ca:	4413      	add	r3, r2
 800d3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1b1      	bne.n	800d33e <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d3de:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	374c      	adds	r7, #76	@ 0x4c
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b08b      	sub	sp, #44	@ 0x2c
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	ed87 0a02 	vstr	s0, [r7, #8]
 800d3fa:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	461a      	mov	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	885b      	ldrh	r3, [r3, #2]
 800d412:	fb02 f303 	mul.w	r3, r2, r3
 800d416:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d41c:	e010      	b.n	800d440 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	627a      	str	r2, [r7, #36]	@ 0x24
 800d424:	ed93 7a00 	vldr	s14, [r3]
 800d428:	6a3b      	ldr	r3, [r7, #32]
 800d42a:	1d1a      	adds	r2, r3, #4
 800d42c:	623a      	str	r2, [r7, #32]
 800d42e:	edd7 7a02 	vldr	s15, [r7, #8]
 800d432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d436:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1eb      	bne.n	800d41e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d446:	2300      	movs	r3, #0
 800d448:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800d44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	372c      	adds	r7, #44	@ 0x2c
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
	...

0800d45c <malloc>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	@ (800d468 <malloc+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f000 b825 	b.w	800d4b0 <_malloc_r>
 800d466:	bf00      	nop
 800d468:	20000198 	.word	0x20000198

0800d46c <sbrk_aligned>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	4e0f      	ldr	r6, [pc, #60]	@ (800d4ac <sbrk_aligned+0x40>)
 800d470:	460c      	mov	r4, r1
 800d472:	6831      	ldr	r1, [r6, #0]
 800d474:	4605      	mov	r5, r0
 800d476:	b911      	cbnz	r1, 800d47e <sbrk_aligned+0x12>
 800d478:	f000 f8ae 	bl	800d5d8 <_sbrk_r>
 800d47c:	6030      	str	r0, [r6, #0]
 800d47e:	4621      	mov	r1, r4
 800d480:	4628      	mov	r0, r5
 800d482:	f000 f8a9 	bl	800d5d8 <_sbrk_r>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d103      	bne.n	800d492 <sbrk_aligned+0x26>
 800d48a:	f04f 34ff 	mov.w	r4, #4294967295
 800d48e:	4620      	mov	r0, r4
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	1cc4      	adds	r4, r0, #3
 800d494:	f024 0403 	bic.w	r4, r4, #3
 800d498:	42a0      	cmp	r0, r4
 800d49a:	d0f8      	beq.n	800d48e <sbrk_aligned+0x22>
 800d49c:	1a21      	subs	r1, r4, r0
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f000 f89a 	bl	800d5d8 <_sbrk_r>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d1f2      	bne.n	800d48e <sbrk_aligned+0x22>
 800d4a8:	e7ef      	b.n	800d48a <sbrk_aligned+0x1e>
 800d4aa:	bf00      	nop
 800d4ac:	20002188 	.word	0x20002188

0800d4b0 <_malloc_r>:
 800d4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b4:	1ccd      	adds	r5, r1, #3
 800d4b6:	f025 0503 	bic.w	r5, r5, #3
 800d4ba:	3508      	adds	r5, #8
 800d4bc:	2d0c      	cmp	r5, #12
 800d4be:	bf38      	it	cc
 800d4c0:	250c      	movcc	r5, #12
 800d4c2:	2d00      	cmp	r5, #0
 800d4c4:	4606      	mov	r6, r0
 800d4c6:	db01      	blt.n	800d4cc <_malloc_r+0x1c>
 800d4c8:	42a9      	cmp	r1, r5
 800d4ca:	d904      	bls.n	800d4d6 <_malloc_r+0x26>
 800d4cc:	230c      	movs	r3, #12
 800d4ce:	6033      	str	r3, [r6, #0]
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5ac <_malloc_r+0xfc>
 800d4da:	f000 f869 	bl	800d5b0 <__malloc_lock>
 800d4de:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e2:	461c      	mov	r4, r3
 800d4e4:	bb44      	cbnz	r4, 800d538 <_malloc_r+0x88>
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7ff ffbf 	bl	800d46c <sbrk_aligned>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	d158      	bne.n	800d5a6 <_malloc_r+0xf6>
 800d4f4:	f8d8 4000 	ldr.w	r4, [r8]
 800d4f8:	4627      	mov	r7, r4
 800d4fa:	2f00      	cmp	r7, #0
 800d4fc:	d143      	bne.n	800d586 <_malloc_r+0xd6>
 800d4fe:	2c00      	cmp	r4, #0
 800d500:	d04b      	beq.n	800d59a <_malloc_r+0xea>
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	4639      	mov	r1, r7
 800d506:	4630      	mov	r0, r6
 800d508:	eb04 0903 	add.w	r9, r4, r3
 800d50c:	f000 f864 	bl	800d5d8 <_sbrk_r>
 800d510:	4581      	cmp	r9, r0
 800d512:	d142      	bne.n	800d59a <_malloc_r+0xea>
 800d514:	6821      	ldr	r1, [r4, #0]
 800d516:	1a6d      	subs	r5, r5, r1
 800d518:	4629      	mov	r1, r5
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7ff ffa6 	bl	800d46c <sbrk_aligned>
 800d520:	3001      	adds	r0, #1
 800d522:	d03a      	beq.n	800d59a <_malloc_r+0xea>
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	442b      	add	r3, r5
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	f8d8 3000 	ldr.w	r3, [r8]
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	bb62      	cbnz	r2, 800d58c <_malloc_r+0xdc>
 800d532:	f8c8 7000 	str.w	r7, [r8]
 800d536:	e00f      	b.n	800d558 <_malloc_r+0xa8>
 800d538:	6822      	ldr	r2, [r4, #0]
 800d53a:	1b52      	subs	r2, r2, r5
 800d53c:	d420      	bmi.n	800d580 <_malloc_r+0xd0>
 800d53e:	2a0b      	cmp	r2, #11
 800d540:	d917      	bls.n	800d572 <_malloc_r+0xc2>
 800d542:	1961      	adds	r1, r4, r5
 800d544:	42a3      	cmp	r3, r4
 800d546:	6025      	str	r5, [r4, #0]
 800d548:	bf18      	it	ne
 800d54a:	6059      	strne	r1, [r3, #4]
 800d54c:	6863      	ldr	r3, [r4, #4]
 800d54e:	bf08      	it	eq
 800d550:	f8c8 1000 	streq.w	r1, [r8]
 800d554:	5162      	str	r2, [r4, r5]
 800d556:	604b      	str	r3, [r1, #4]
 800d558:	4630      	mov	r0, r6
 800d55a:	f000 f82f 	bl	800d5bc <__malloc_unlock>
 800d55e:	f104 000b 	add.w	r0, r4, #11
 800d562:	1d23      	adds	r3, r4, #4
 800d564:	f020 0007 	bic.w	r0, r0, #7
 800d568:	1ac2      	subs	r2, r0, r3
 800d56a:	bf1c      	itt	ne
 800d56c:	1a1b      	subne	r3, r3, r0
 800d56e:	50a3      	strne	r3, [r4, r2]
 800d570:	e7af      	b.n	800d4d2 <_malloc_r+0x22>
 800d572:	6862      	ldr	r2, [r4, #4]
 800d574:	42a3      	cmp	r3, r4
 800d576:	bf0c      	ite	eq
 800d578:	f8c8 2000 	streq.w	r2, [r8]
 800d57c:	605a      	strne	r2, [r3, #4]
 800d57e:	e7eb      	b.n	800d558 <_malloc_r+0xa8>
 800d580:	4623      	mov	r3, r4
 800d582:	6864      	ldr	r4, [r4, #4]
 800d584:	e7ae      	b.n	800d4e4 <_malloc_r+0x34>
 800d586:	463c      	mov	r4, r7
 800d588:	687f      	ldr	r7, [r7, #4]
 800d58a:	e7b6      	b.n	800d4fa <_malloc_r+0x4a>
 800d58c:	461a      	mov	r2, r3
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	42a3      	cmp	r3, r4
 800d592:	d1fb      	bne.n	800d58c <_malloc_r+0xdc>
 800d594:	2300      	movs	r3, #0
 800d596:	6053      	str	r3, [r2, #4]
 800d598:	e7de      	b.n	800d558 <_malloc_r+0xa8>
 800d59a:	230c      	movs	r3, #12
 800d59c:	6033      	str	r3, [r6, #0]
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 f80c 	bl	800d5bc <__malloc_unlock>
 800d5a4:	e794      	b.n	800d4d0 <_malloc_r+0x20>
 800d5a6:	6005      	str	r5, [r0, #0]
 800d5a8:	e7d6      	b.n	800d558 <_malloc_r+0xa8>
 800d5aa:	bf00      	nop
 800d5ac:	2000218c 	.word	0x2000218c

0800d5b0 <__malloc_lock>:
 800d5b0:	4801      	ldr	r0, [pc, #4]	@ (800d5b8 <__malloc_lock+0x8>)
 800d5b2:	f000 b84b 	b.w	800d64c <__retarget_lock_acquire_recursive>
 800d5b6:	bf00      	nop
 800d5b8:	200022cc 	.word	0x200022cc

0800d5bc <__malloc_unlock>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	@ (800d5c4 <__malloc_unlock+0x8>)
 800d5be:	f000 b846 	b.w	800d64e <__retarget_lock_release_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	200022cc 	.word	0x200022cc

0800d5c8 <memset>:
 800d5c8:	4402      	add	r2, r0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d100      	bne.n	800d5d2 <memset+0xa>
 800d5d0:	4770      	bx	lr
 800d5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d5d6:	e7f9      	b.n	800d5cc <memset+0x4>

0800d5d8 <_sbrk_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4d06      	ldr	r5, [pc, #24]	@ (800d5f4 <_sbrk_r+0x1c>)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	f7f7 fd3a 	bl	800505c <_sbrk>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_sbrk_r+0x1a>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_sbrk_r+0x1a>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	200022c8 	.word	0x200022c8

0800d5f8 <__errno>:
 800d5f8:	4b01      	ldr	r3, [pc, #4]	@ (800d600 <__errno+0x8>)
 800d5fa:	6818      	ldr	r0, [r3, #0]
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	20000198 	.word	0x20000198

0800d604 <__libc_init_array>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4d0d      	ldr	r5, [pc, #52]	@ (800d63c <__libc_init_array+0x38>)
 800d608:	4c0d      	ldr	r4, [pc, #52]	@ (800d640 <__libc_init_array+0x3c>)
 800d60a:	1b64      	subs	r4, r4, r5
 800d60c:	10a4      	asrs	r4, r4, #2
 800d60e:	2600      	movs	r6, #0
 800d610:	42a6      	cmp	r6, r4
 800d612:	d109      	bne.n	800d628 <__libc_init_array+0x24>
 800d614:	4d0b      	ldr	r5, [pc, #44]	@ (800d644 <__libc_init_array+0x40>)
 800d616:	4c0c      	ldr	r4, [pc, #48]	@ (800d648 <__libc_init_array+0x44>)
 800d618:	f000 fdbe 	bl	800e198 <_init>
 800d61c:	1b64      	subs	r4, r4, r5
 800d61e:	10a4      	asrs	r4, r4, #2
 800d620:	2600      	movs	r6, #0
 800d622:	42a6      	cmp	r6, r4
 800d624:	d105      	bne.n	800d632 <__libc_init_array+0x2e>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62c:	4798      	blx	r3
 800d62e:	3601      	adds	r6, #1
 800d630:	e7ee      	b.n	800d610 <__libc_init_array+0xc>
 800d632:	f855 3b04 	ldr.w	r3, [r5], #4
 800d636:	4798      	blx	r3
 800d638:	3601      	adds	r6, #1
 800d63a:	e7f2      	b.n	800d622 <__libc_init_array+0x1e>
 800d63c:	0800e618 	.word	0x0800e618
 800d640:	0800e618 	.word	0x0800e618
 800d644:	0800e618 	.word	0x0800e618
 800d648:	0800e61c 	.word	0x0800e61c

0800d64c <__retarget_lock_acquire_recursive>:
 800d64c:	4770      	bx	lr

0800d64e <__retarget_lock_release_recursive>:
 800d64e:	4770      	bx	lr

0800d650 <memcpy>:
 800d650:	440a      	add	r2, r1
 800d652:	4291      	cmp	r1, r2
 800d654:	f100 33ff 	add.w	r3, r0, #4294967295
 800d658:	d100      	bne.n	800d65c <memcpy+0xc>
 800d65a:	4770      	bx	lr
 800d65c:	b510      	push	{r4, lr}
 800d65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d662:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d666:	4291      	cmp	r1, r2
 800d668:	d1f9      	bne.n	800d65e <memcpy+0xe>
 800d66a:	bd10      	pop	{r4, pc}

0800d66c <sqrtf>:
 800d66c:	b508      	push	{r3, lr}
 800d66e:	ed2d 8b02 	vpush	{d8}
 800d672:	eeb0 8a40 	vmov.f32	s16, s0
 800d676:	f000 f8a1 	bl	800d7bc <__ieee754_sqrtf>
 800d67a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d682:	d60c      	bvs.n	800d69e <sqrtf+0x32>
 800d684:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d6a4 <sqrtf+0x38>
 800d688:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d690:	d505      	bpl.n	800d69e <sqrtf+0x32>
 800d692:	f7ff ffb1 	bl	800d5f8 <__errno>
 800d696:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d69a:	2321      	movs	r3, #33	@ 0x21
 800d69c:	6003      	str	r3, [r0, #0]
 800d69e:	ecbd 8b02 	vpop	{d8}
 800d6a2:	bd08      	pop	{r3, pc}
 800d6a4:	00000000 	.word	0x00000000

0800d6a8 <cosf>:
 800d6a8:	ee10 3a10 	vmov	r3, s0
 800d6ac:	b507      	push	{r0, r1, r2, lr}
 800d6ae:	4a1e      	ldr	r2, [pc, #120]	@ (800d728 <cosf+0x80>)
 800d6b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d806      	bhi.n	800d6c6 <cosf+0x1e>
 800d6b8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d72c <cosf+0x84>
 800d6bc:	b003      	add	sp, #12
 800d6be:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c2:	f000 b87f 	b.w	800d7c4 <__kernel_cosf>
 800d6c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d6ca:	d304      	bcc.n	800d6d6 <cosf+0x2e>
 800d6cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d6d0:	b003      	add	sp, #12
 800d6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d6:	4668      	mov	r0, sp
 800d6d8:	f000 f914 	bl	800d904 <__ieee754_rem_pio2f>
 800d6dc:	f000 0003 	and.w	r0, r0, #3
 800d6e0:	2801      	cmp	r0, #1
 800d6e2:	d009      	beq.n	800d6f8 <cosf+0x50>
 800d6e4:	2802      	cmp	r0, #2
 800d6e6:	d010      	beq.n	800d70a <cosf+0x62>
 800d6e8:	b9b0      	cbnz	r0, 800d718 <cosf+0x70>
 800d6ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6ee:	ed9d 0a00 	vldr	s0, [sp]
 800d6f2:	f000 f867 	bl	800d7c4 <__kernel_cosf>
 800d6f6:	e7eb      	b.n	800d6d0 <cosf+0x28>
 800d6f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6fc:	ed9d 0a00 	vldr	s0, [sp]
 800d700:	f000 f8b8 	bl	800d874 <__kernel_sinf>
 800d704:	eeb1 0a40 	vneg.f32	s0, s0
 800d708:	e7e2      	b.n	800d6d0 <cosf+0x28>
 800d70a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d70e:	ed9d 0a00 	vldr	s0, [sp]
 800d712:	f000 f857 	bl	800d7c4 <__kernel_cosf>
 800d716:	e7f5      	b.n	800d704 <cosf+0x5c>
 800d718:	eddd 0a01 	vldr	s1, [sp, #4]
 800d71c:	ed9d 0a00 	vldr	s0, [sp]
 800d720:	2001      	movs	r0, #1
 800d722:	f000 f8a7 	bl	800d874 <__kernel_sinf>
 800d726:	e7d3      	b.n	800d6d0 <cosf+0x28>
 800d728:	3f490fd8 	.word	0x3f490fd8
 800d72c:	00000000 	.word	0x00000000

0800d730 <sinf>:
 800d730:	ee10 3a10 	vmov	r3, s0
 800d734:	b507      	push	{r0, r1, r2, lr}
 800d736:	4a1f      	ldr	r2, [pc, #124]	@ (800d7b4 <sinf+0x84>)
 800d738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d807      	bhi.n	800d750 <sinf+0x20>
 800d740:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d7b8 <sinf+0x88>
 800d744:	2000      	movs	r0, #0
 800d746:	b003      	add	sp, #12
 800d748:	f85d eb04 	ldr.w	lr, [sp], #4
 800d74c:	f000 b892 	b.w	800d874 <__kernel_sinf>
 800d750:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d754:	d304      	bcc.n	800d760 <sinf+0x30>
 800d756:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d75a:	b003      	add	sp, #12
 800d75c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d760:	4668      	mov	r0, sp
 800d762:	f000 f8cf 	bl	800d904 <__ieee754_rem_pio2f>
 800d766:	f000 0003 	and.w	r0, r0, #3
 800d76a:	2801      	cmp	r0, #1
 800d76c:	d00a      	beq.n	800d784 <sinf+0x54>
 800d76e:	2802      	cmp	r0, #2
 800d770:	d00f      	beq.n	800d792 <sinf+0x62>
 800d772:	b9c0      	cbnz	r0, 800d7a6 <sinf+0x76>
 800d774:	eddd 0a01 	vldr	s1, [sp, #4]
 800d778:	ed9d 0a00 	vldr	s0, [sp]
 800d77c:	2001      	movs	r0, #1
 800d77e:	f000 f879 	bl	800d874 <__kernel_sinf>
 800d782:	e7ea      	b.n	800d75a <sinf+0x2a>
 800d784:	eddd 0a01 	vldr	s1, [sp, #4]
 800d788:	ed9d 0a00 	vldr	s0, [sp]
 800d78c:	f000 f81a 	bl	800d7c4 <__kernel_cosf>
 800d790:	e7e3      	b.n	800d75a <sinf+0x2a>
 800d792:	eddd 0a01 	vldr	s1, [sp, #4]
 800d796:	ed9d 0a00 	vldr	s0, [sp]
 800d79a:	2001      	movs	r0, #1
 800d79c:	f000 f86a 	bl	800d874 <__kernel_sinf>
 800d7a0:	eeb1 0a40 	vneg.f32	s0, s0
 800d7a4:	e7d9      	b.n	800d75a <sinf+0x2a>
 800d7a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7aa:	ed9d 0a00 	vldr	s0, [sp]
 800d7ae:	f000 f809 	bl	800d7c4 <__kernel_cosf>
 800d7b2:	e7f5      	b.n	800d7a0 <sinf+0x70>
 800d7b4:	3f490fd8 	.word	0x3f490fd8
 800d7b8:	00000000 	.word	0x00000000

0800d7bc <__ieee754_sqrtf>:
 800d7bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <__kernel_cosf>:
 800d7c4:	ee10 3a10 	vmov	r3, s0
 800d7c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d7d0:	eef0 6a40 	vmov.f32	s13, s0
 800d7d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d7d8:	d204      	bcs.n	800d7e4 <__kernel_cosf+0x20>
 800d7da:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d7de:	ee17 2a90 	vmov	r2, s15
 800d7e2:	b342      	cbz	r2, 800d836 <__kernel_cosf+0x72>
 800d7e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d7e8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d854 <__kernel_cosf+0x90>
 800d7ec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d858 <__kernel_cosf+0x94>
 800d7f0:	4a1a      	ldr	r2, [pc, #104]	@ (800d85c <__kernel_cosf+0x98>)
 800d7f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d860 <__kernel_cosf+0x9c>
 800d7fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d800:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d864 <__kernel_cosf+0xa0>
 800d804:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d808:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d868 <__kernel_cosf+0xa4>
 800d80c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d810:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d86c <__kernel_cosf+0xa8>
 800d814:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d818:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d81c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d820:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d824:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d82c:	d804      	bhi.n	800d838 <__kernel_cosf+0x74>
 800d82e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d832:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d836:	4770      	bx	lr
 800d838:	4a0d      	ldr	r2, [pc, #52]	@ (800d870 <__kernel_cosf+0xac>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	bf9a      	itte	ls
 800d83e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d842:	ee07 3a10 	vmovls	s14, r3
 800d846:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d84a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d84e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d852:	e7ec      	b.n	800d82e <__kernel_cosf+0x6a>
 800d854:	ad47d74e 	.word	0xad47d74e
 800d858:	310f74f6 	.word	0x310f74f6
 800d85c:	3e999999 	.word	0x3e999999
 800d860:	b493f27c 	.word	0xb493f27c
 800d864:	37d00d01 	.word	0x37d00d01
 800d868:	bab60b61 	.word	0xbab60b61
 800d86c:	3d2aaaab 	.word	0x3d2aaaab
 800d870:	3f480000 	.word	0x3f480000

0800d874 <__kernel_sinf>:
 800d874:	ee10 3a10 	vmov	r3, s0
 800d878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d87c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d880:	d204      	bcs.n	800d88c <__kernel_sinf+0x18>
 800d882:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d886:	ee17 3a90 	vmov	r3, s15
 800d88a:	b35b      	cbz	r3, 800d8e4 <__kernel_sinf+0x70>
 800d88c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d890:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d8e8 <__kernel_sinf+0x74>
 800d894:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d8ec <__kernel_sinf+0x78>
 800d898:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d89c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d8f0 <__kernel_sinf+0x7c>
 800d8a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8a4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d8f4 <__kernel_sinf+0x80>
 800d8a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d8ac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d8f8 <__kernel_sinf+0x84>
 800d8b0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d8b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8b8:	b930      	cbnz	r0, 800d8c8 <__kernel_sinf+0x54>
 800d8ba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d8fc <__kernel_sinf+0x88>
 800d8be:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d8c2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d8c6:	4770      	bx	lr
 800d8c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d8cc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d8d0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d8d4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d8d8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d900 <__kernel_sinf+0x8c>
 800d8dc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d8e0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	2f2ec9d3 	.word	0x2f2ec9d3
 800d8ec:	b2d72f34 	.word	0xb2d72f34
 800d8f0:	3638ef1b 	.word	0x3638ef1b
 800d8f4:	b9500d01 	.word	0xb9500d01
 800d8f8:	3c088889 	.word	0x3c088889
 800d8fc:	be2aaaab 	.word	0xbe2aaaab
 800d900:	3e2aaaab 	.word	0x3e2aaaab

0800d904 <__ieee754_rem_pio2f>:
 800d904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d906:	ee10 6a10 	vmov	r6, s0
 800d90a:	4b88      	ldr	r3, [pc, #544]	@ (800db2c <__ieee754_rem_pio2f+0x228>)
 800d90c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d910:	429d      	cmp	r5, r3
 800d912:	b087      	sub	sp, #28
 800d914:	4604      	mov	r4, r0
 800d916:	d805      	bhi.n	800d924 <__ieee754_rem_pio2f+0x20>
 800d918:	2300      	movs	r3, #0
 800d91a:	ed80 0a00 	vstr	s0, [r0]
 800d91e:	6043      	str	r3, [r0, #4]
 800d920:	2000      	movs	r0, #0
 800d922:	e022      	b.n	800d96a <__ieee754_rem_pio2f+0x66>
 800d924:	4b82      	ldr	r3, [pc, #520]	@ (800db30 <__ieee754_rem_pio2f+0x22c>)
 800d926:	429d      	cmp	r5, r3
 800d928:	d83a      	bhi.n	800d9a0 <__ieee754_rem_pio2f+0x9c>
 800d92a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d92e:	2e00      	cmp	r6, #0
 800d930:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800db34 <__ieee754_rem_pio2f+0x230>
 800d934:	4a80      	ldr	r2, [pc, #512]	@ (800db38 <__ieee754_rem_pio2f+0x234>)
 800d936:	f023 030f 	bic.w	r3, r3, #15
 800d93a:	dd18      	ble.n	800d96e <__ieee754_rem_pio2f+0x6a>
 800d93c:	4293      	cmp	r3, r2
 800d93e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d942:	bf09      	itett	eq
 800d944:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800db3c <__ieee754_rem_pio2f+0x238>
 800d948:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800db40 <__ieee754_rem_pio2f+0x23c>
 800d94c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800db44 <__ieee754_rem_pio2f+0x240>
 800d950:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d954:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d95c:	ed80 7a00 	vstr	s14, [r0]
 800d960:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d964:	edc0 7a01 	vstr	s15, [r0, #4]
 800d968:	2001      	movs	r0, #1
 800d96a:	b007      	add	sp, #28
 800d96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d96e:	4293      	cmp	r3, r2
 800d970:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d974:	bf09      	itett	eq
 800d976:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800db3c <__ieee754_rem_pio2f+0x238>
 800d97a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800db40 <__ieee754_rem_pio2f+0x23c>
 800d97e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800db44 <__ieee754_rem_pio2f+0x240>
 800d982:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d986:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d98a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d98e:	ed80 7a00 	vstr	s14, [r0]
 800d992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d996:	edc0 7a01 	vstr	s15, [r0, #4]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295
 800d99e:	e7e4      	b.n	800d96a <__ieee754_rem_pio2f+0x66>
 800d9a0:	4b69      	ldr	r3, [pc, #420]	@ (800db48 <__ieee754_rem_pio2f+0x244>)
 800d9a2:	429d      	cmp	r5, r3
 800d9a4:	d873      	bhi.n	800da8e <__ieee754_rem_pio2f+0x18a>
 800d9a6:	f000 f8dd 	bl	800db64 <fabsf>
 800d9aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800db4c <__ieee754_rem_pio2f+0x248>
 800d9ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d9b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d9be:	ee17 0a90 	vmov	r0, s15
 800d9c2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800db34 <__ieee754_rem_pio2f+0x230>
 800d9c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d9ca:	281f      	cmp	r0, #31
 800d9cc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800db40 <__ieee754_rem_pio2f+0x23c>
 800d9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d4:	eeb1 6a47 	vneg.f32	s12, s14
 800d9d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d9dc:	ee16 1a90 	vmov	r1, s13
 800d9e0:	dc09      	bgt.n	800d9f6 <__ieee754_rem_pio2f+0xf2>
 800d9e2:	4a5b      	ldr	r2, [pc, #364]	@ (800db50 <__ieee754_rem_pio2f+0x24c>)
 800d9e4:	1e47      	subs	r7, r0, #1
 800d9e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d9ea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d9ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d107      	bne.n	800da06 <__ieee754_rem_pio2f+0x102>
 800d9f6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d9fa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d9fe:	2a08      	cmp	r2, #8
 800da00:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800da04:	dc14      	bgt.n	800da30 <__ieee754_rem_pio2f+0x12c>
 800da06:	6021      	str	r1, [r4, #0]
 800da08:	ed94 7a00 	vldr	s14, [r4]
 800da0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800da10:	2e00      	cmp	r6, #0
 800da12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800da16:	ed84 0a01 	vstr	s0, [r4, #4]
 800da1a:	daa6      	bge.n	800d96a <__ieee754_rem_pio2f+0x66>
 800da1c:	eeb1 7a47 	vneg.f32	s14, s14
 800da20:	eeb1 0a40 	vneg.f32	s0, s0
 800da24:	ed84 7a00 	vstr	s14, [r4]
 800da28:	ed84 0a01 	vstr	s0, [r4, #4]
 800da2c:	4240      	negs	r0, r0
 800da2e:	e79c      	b.n	800d96a <__ieee754_rem_pio2f+0x66>
 800da30:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800db3c <__ieee754_rem_pio2f+0x238>
 800da34:	eef0 6a40 	vmov.f32	s13, s0
 800da38:	eee6 6a25 	vfma.f32	s13, s12, s11
 800da3c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800da40:	eee6 7a25 	vfma.f32	s15, s12, s11
 800da44:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800db44 <__ieee754_rem_pio2f+0x240>
 800da48:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800da4c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800da50:	ee15 2a90 	vmov	r2, s11
 800da54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800da58:	1a5b      	subs	r3, r3, r1
 800da5a:	2b19      	cmp	r3, #25
 800da5c:	dc04      	bgt.n	800da68 <__ieee754_rem_pio2f+0x164>
 800da5e:	edc4 5a00 	vstr	s11, [r4]
 800da62:	eeb0 0a66 	vmov.f32	s0, s13
 800da66:	e7cf      	b.n	800da08 <__ieee754_rem_pio2f+0x104>
 800da68:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800db54 <__ieee754_rem_pio2f+0x250>
 800da6c:	eeb0 0a66 	vmov.f32	s0, s13
 800da70:	eea6 0a25 	vfma.f32	s0, s12, s11
 800da74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800da78:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800db58 <__ieee754_rem_pio2f+0x254>
 800da7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800da80:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800da84:	ee30 7a67 	vsub.f32	s14, s0, s15
 800da88:	ed84 7a00 	vstr	s14, [r4]
 800da8c:	e7bc      	b.n	800da08 <__ieee754_rem_pio2f+0x104>
 800da8e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800da92:	d306      	bcc.n	800daa2 <__ieee754_rem_pio2f+0x19e>
 800da94:	ee70 7a40 	vsub.f32	s15, s0, s0
 800da98:	edc0 7a01 	vstr	s15, [r0, #4]
 800da9c:	edc0 7a00 	vstr	s15, [r0]
 800daa0:	e73e      	b.n	800d920 <__ieee754_rem_pio2f+0x1c>
 800daa2:	15ea      	asrs	r2, r5, #23
 800daa4:	3a86      	subs	r2, #134	@ 0x86
 800daa6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dab2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800db5c <__ieee754_rem_pio2f+0x258>
 800dab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800daba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dabe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dac2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dac6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800daca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dad2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dada:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	edcd 7a05 	vstr	s15, [sp, #20]
 800dae6:	d11e      	bne.n	800db26 <__ieee754_rem_pio2f+0x222>
 800dae8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800daec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf0:	bf0c      	ite	eq
 800daf2:	2301      	moveq	r3, #1
 800daf4:	2302      	movne	r3, #2
 800daf6:	491a      	ldr	r1, [pc, #104]	@ (800db60 <__ieee754_rem_pio2f+0x25c>)
 800daf8:	9101      	str	r1, [sp, #4]
 800dafa:	2102      	movs	r1, #2
 800dafc:	9100      	str	r1, [sp, #0]
 800dafe:	a803      	add	r0, sp, #12
 800db00:	4621      	mov	r1, r4
 800db02:	f000 f89d 	bl	800dc40 <__kernel_rem_pio2f>
 800db06:	2e00      	cmp	r6, #0
 800db08:	f6bf af2f 	bge.w	800d96a <__ieee754_rem_pio2f+0x66>
 800db0c:	edd4 7a00 	vldr	s15, [r4]
 800db10:	eef1 7a67 	vneg.f32	s15, s15
 800db14:	edc4 7a00 	vstr	s15, [r4]
 800db18:	edd4 7a01 	vldr	s15, [r4, #4]
 800db1c:	eef1 7a67 	vneg.f32	s15, s15
 800db20:	edc4 7a01 	vstr	s15, [r4, #4]
 800db24:	e782      	b.n	800da2c <__ieee754_rem_pio2f+0x128>
 800db26:	2303      	movs	r3, #3
 800db28:	e7e5      	b.n	800daf6 <__ieee754_rem_pio2f+0x1f2>
 800db2a:	bf00      	nop
 800db2c:	3f490fd8 	.word	0x3f490fd8
 800db30:	4016cbe3 	.word	0x4016cbe3
 800db34:	3fc90f80 	.word	0x3fc90f80
 800db38:	3fc90fd0 	.word	0x3fc90fd0
 800db3c:	37354400 	.word	0x37354400
 800db40:	37354443 	.word	0x37354443
 800db44:	2e85a308 	.word	0x2e85a308
 800db48:	43490f80 	.word	0x43490f80
 800db4c:	3f22f984 	.word	0x3f22f984
 800db50:	0800e240 	.word	0x0800e240
 800db54:	2e85a300 	.word	0x2e85a300
 800db58:	248d3132 	.word	0x248d3132
 800db5c:	43800000 	.word	0x43800000
 800db60:	0800e2c0 	.word	0x0800e2c0

0800db64 <fabsf>:
 800db64:	ee10 3a10 	vmov	r3, s0
 800db68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db6c:	ee00 3a10 	vmov	s0, r3
 800db70:	4770      	bx	lr
	...

0800db74 <scalbnf>:
 800db74:	ee10 3a10 	vmov	r3, s0
 800db78:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800db7c:	d02b      	beq.n	800dbd6 <scalbnf+0x62>
 800db7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800db82:	d302      	bcc.n	800db8a <scalbnf+0x16>
 800db84:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db88:	4770      	bx	lr
 800db8a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800db8e:	d123      	bne.n	800dbd8 <scalbnf+0x64>
 800db90:	4b24      	ldr	r3, [pc, #144]	@ (800dc24 <scalbnf+0xb0>)
 800db92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dc28 <scalbnf+0xb4>
 800db96:	4298      	cmp	r0, r3
 800db98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800db9c:	db17      	blt.n	800dbce <scalbnf+0x5a>
 800db9e:	ee10 3a10 	vmov	r3, s0
 800dba2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dba6:	3a19      	subs	r2, #25
 800dba8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dbac:	4288      	cmp	r0, r1
 800dbae:	dd15      	ble.n	800dbdc <scalbnf+0x68>
 800dbb0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800dc2c <scalbnf+0xb8>
 800dbb4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dc30 <scalbnf+0xbc>
 800dbb8:	ee10 3a10 	vmov	r3, s0
 800dbbc:	eeb0 7a67 	vmov.f32	s14, s15
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bfb8      	it	lt
 800dbc4:	eef0 7a66 	vmovlt.f32	s15, s13
 800dbc8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dbcc:	4770      	bx	lr
 800dbce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dc34 <scalbnf+0xc0>
 800dbd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dbd6:	4770      	bx	lr
 800dbd8:	0dd2      	lsrs	r2, r2, #23
 800dbda:	e7e5      	b.n	800dba8 <scalbnf+0x34>
 800dbdc:	4410      	add	r0, r2
 800dbde:	28fe      	cmp	r0, #254	@ 0xfe
 800dbe0:	dce6      	bgt.n	800dbb0 <scalbnf+0x3c>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	dd06      	ble.n	800dbf4 <scalbnf+0x80>
 800dbe6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dbea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dbee:	ee00 3a10 	vmov	s0, r3
 800dbf2:	4770      	bx	lr
 800dbf4:	f110 0f16 	cmn.w	r0, #22
 800dbf8:	da09      	bge.n	800dc0e <scalbnf+0x9a>
 800dbfa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dc34 <scalbnf+0xc0>
 800dbfe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dc38 <scalbnf+0xc4>
 800dc02:	ee10 3a10 	vmov	r3, s0
 800dc06:	eeb0 7a67 	vmov.f32	s14, s15
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	e7d9      	b.n	800dbc2 <scalbnf+0x4e>
 800dc0e:	3019      	adds	r0, #25
 800dc10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dc14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dc18:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dc3c <scalbnf+0xc8>
 800dc1c:	ee07 3a90 	vmov	s15, r3
 800dc20:	e7d7      	b.n	800dbd2 <scalbnf+0x5e>
 800dc22:	bf00      	nop
 800dc24:	ffff3cb0 	.word	0xffff3cb0
 800dc28:	4c000000 	.word	0x4c000000
 800dc2c:	7149f2ca 	.word	0x7149f2ca
 800dc30:	f149f2ca 	.word	0xf149f2ca
 800dc34:	0da24260 	.word	0x0da24260
 800dc38:	8da24260 	.word	0x8da24260
 800dc3c:	33000000 	.word	0x33000000

0800dc40 <__kernel_rem_pio2f>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	ed2d 8b04 	vpush	{d8-d9}
 800dc48:	b0d9      	sub	sp, #356	@ 0x164
 800dc4a:	4690      	mov	r8, r2
 800dc4c:	9001      	str	r0, [sp, #4]
 800dc4e:	4ab6      	ldr	r2, [pc, #728]	@ (800df28 <__kernel_rem_pio2f+0x2e8>)
 800dc50:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800dc52:	f118 0f04 	cmn.w	r8, #4
 800dc56:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800dc5a:	460f      	mov	r7, r1
 800dc5c:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc60:	db26      	blt.n	800dcb0 <__kernel_rem_pio2f+0x70>
 800dc62:	f1b8 0203 	subs.w	r2, r8, #3
 800dc66:	bf48      	it	mi
 800dc68:	f108 0204 	addmi.w	r2, r8, #4
 800dc6c:	10d2      	asrs	r2, r2, #3
 800dc6e:	1c55      	adds	r5, r2, #1
 800dc70:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dc72:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800dc76:	00e8      	lsls	r0, r5, #3
 800dc78:	eba2 060b 	sub.w	r6, r2, fp
 800dc7c:	9002      	str	r0, [sp, #8]
 800dc7e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800dc82:	eb0a 0c0b 	add.w	ip, sl, fp
 800dc86:	ac1c      	add	r4, sp, #112	@ 0x70
 800dc88:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4560      	cmp	r0, ip
 800dc90:	dd10      	ble.n	800dcb4 <__kernel_rem_pio2f+0x74>
 800dc92:	a91c      	add	r1, sp, #112	@ 0x70
 800dc94:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800dc98:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800dc9c:	2600      	movs	r6, #0
 800dc9e:	4556      	cmp	r6, sl
 800dca0:	dc24      	bgt.n	800dcec <__kernel_rem_pio2f+0xac>
 800dca2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dca6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800dcaa:	4684      	mov	ip, r0
 800dcac:	2400      	movs	r4, #0
 800dcae:	e016      	b.n	800dcde <__kernel_rem_pio2f+0x9e>
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	e7dc      	b.n	800dc6e <__kernel_rem_pio2f+0x2e>
 800dcb4:	42c6      	cmn	r6, r0
 800dcb6:	bf5d      	ittte	pl
 800dcb8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dcbc:	ee07 1a90 	vmovpl	s15, r1
 800dcc0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dcc4:	eef0 7a47 	vmovmi.f32	s15, s14
 800dcc8:	ece4 7a01 	vstmia	r4!, {s15}
 800dccc:	3001      	adds	r0, #1
 800dcce:	e7de      	b.n	800dc8e <__kernel_rem_pio2f+0x4e>
 800dcd0:	ecfe 6a01 	vldmia	lr!, {s13}
 800dcd4:	ed3c 7a01 	vldmdb	ip!, {s14}
 800dcd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcdc:	3401      	adds	r4, #1
 800dcde:	455c      	cmp	r4, fp
 800dce0:	ddf6      	ble.n	800dcd0 <__kernel_rem_pio2f+0x90>
 800dce2:	ece9 7a01 	vstmia	r9!, {s15}
 800dce6:	3601      	adds	r6, #1
 800dce8:	3004      	adds	r0, #4
 800dcea:	e7d8      	b.n	800dc9e <__kernel_rem_pio2f+0x5e>
 800dcec:	a908      	add	r1, sp, #32
 800dcee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcf2:	9104      	str	r1, [sp, #16]
 800dcf4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dcf6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800df34 <__kernel_rem_pio2f+0x2f4>
 800dcfa:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800df30 <__kernel_rem_pio2f+0x2f0>
 800dcfe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dd02:	9203      	str	r2, [sp, #12]
 800dd04:	4654      	mov	r4, sl
 800dd06:	00a2      	lsls	r2, r4, #2
 800dd08:	9205      	str	r2, [sp, #20]
 800dd0a:	aa58      	add	r2, sp, #352	@ 0x160
 800dd0c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800dd10:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800dd14:	a944      	add	r1, sp, #272	@ 0x110
 800dd16:	aa08      	add	r2, sp, #32
 800dd18:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800dd1c:	4694      	mov	ip, r2
 800dd1e:	4626      	mov	r6, r4
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	dc4c      	bgt.n	800ddbe <__kernel_rem_pio2f+0x17e>
 800dd24:	4628      	mov	r0, r5
 800dd26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd2a:	f7ff ff23 	bl	800db74 <scalbnf>
 800dd2e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd32:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800dd36:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dd3a:	f000 f9e9 	bl	800e110 <floorf>
 800dd3e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800dd42:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dd46:	2d00      	cmp	r5, #0
 800dd48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd4c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dd50:	ee17 9a90 	vmov	r9, s15
 800dd54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd58:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dd5c:	dd41      	ble.n	800dde2 <__kernel_rem_pio2f+0x1a2>
 800dd5e:	f104 3cff 	add.w	ip, r4, #4294967295
 800dd62:	a908      	add	r1, sp, #32
 800dd64:	f1c5 0e08 	rsb	lr, r5, #8
 800dd68:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800dd6c:	fa46 f00e 	asr.w	r0, r6, lr
 800dd70:	4481      	add	r9, r0
 800dd72:	fa00 f00e 	lsl.w	r0, r0, lr
 800dd76:	1a36      	subs	r6, r6, r0
 800dd78:	f1c5 0007 	rsb	r0, r5, #7
 800dd7c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800dd80:	4106      	asrs	r6, r0
 800dd82:	2e00      	cmp	r6, #0
 800dd84:	dd3c      	ble.n	800de00 <__kernel_rem_pio2f+0x1c0>
 800dd86:	f04f 0e00 	mov.w	lr, #0
 800dd8a:	f109 0901 	add.w	r9, r9, #1
 800dd8e:	4670      	mov	r0, lr
 800dd90:	4574      	cmp	r4, lr
 800dd92:	dc68      	bgt.n	800de66 <__kernel_rem_pio2f+0x226>
 800dd94:	2d00      	cmp	r5, #0
 800dd96:	dd03      	ble.n	800dda0 <__kernel_rem_pio2f+0x160>
 800dd98:	2d01      	cmp	r5, #1
 800dd9a:	d074      	beq.n	800de86 <__kernel_rem_pio2f+0x246>
 800dd9c:	2d02      	cmp	r5, #2
 800dd9e:	d07d      	beq.n	800de9c <__kernel_rem_pio2f+0x25c>
 800dda0:	2e02      	cmp	r6, #2
 800dda2:	d12d      	bne.n	800de00 <__kernel_rem_pio2f+0x1c0>
 800dda4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dda8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ddac:	b340      	cbz	r0, 800de00 <__kernel_rem_pio2f+0x1c0>
 800ddae:	4628      	mov	r0, r5
 800ddb0:	9306      	str	r3, [sp, #24]
 800ddb2:	f7ff fedf 	bl	800db74 <scalbnf>
 800ddb6:	9b06      	ldr	r3, [sp, #24]
 800ddb8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ddbc:	e020      	b.n	800de00 <__kernel_rem_pio2f+0x1c0>
 800ddbe:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ddc2:	3e01      	subs	r6, #1
 800ddc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddcc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ddd0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ddd4:	ecac 0a01 	vstmia	ip!, {s0}
 800ddd8:	ed30 0a01 	vldmdb	r0!, {s0}
 800dddc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dde0:	e79e      	b.n	800dd20 <__kernel_rem_pio2f+0xe0>
 800dde2:	d105      	bne.n	800ddf0 <__kernel_rem_pio2f+0x1b0>
 800dde4:	1e60      	subs	r0, r4, #1
 800dde6:	a908      	add	r1, sp, #32
 800dde8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800ddec:	11f6      	asrs	r6, r6, #7
 800ddee:	e7c8      	b.n	800dd82 <__kernel_rem_pio2f+0x142>
 800ddf0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ddf4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfc:	da31      	bge.n	800de62 <__kernel_rem_pio2f+0x222>
 800ddfe:	2600      	movs	r6, #0
 800de00:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de08:	f040 8098 	bne.w	800df3c <__kernel_rem_pio2f+0x2fc>
 800de0c:	1e60      	subs	r0, r4, #1
 800de0e:	2200      	movs	r2, #0
 800de10:	4550      	cmp	r0, sl
 800de12:	da4b      	bge.n	800deac <__kernel_rem_pio2f+0x26c>
 800de14:	2a00      	cmp	r2, #0
 800de16:	d065      	beq.n	800dee4 <__kernel_rem_pio2f+0x2a4>
 800de18:	3c01      	subs	r4, #1
 800de1a:	ab08      	add	r3, sp, #32
 800de1c:	3d08      	subs	r5, #8
 800de1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0f8      	beq.n	800de18 <__kernel_rem_pio2f+0x1d8>
 800de26:	4628      	mov	r0, r5
 800de28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800de2c:	f7ff fea2 	bl	800db74 <scalbnf>
 800de30:	1c63      	adds	r3, r4, #1
 800de32:	aa44      	add	r2, sp, #272	@ 0x110
 800de34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800df34 <__kernel_rem_pio2f+0x2f4>
 800de38:	0099      	lsls	r1, r3, #2
 800de3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de3e:	4623      	mov	r3, r4
 800de40:	2b00      	cmp	r3, #0
 800de42:	f280 80a9 	bge.w	800df98 <__kernel_rem_pio2f+0x358>
 800de46:	4623      	mov	r3, r4
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f2c0 80c7 	blt.w	800dfdc <__kernel_rem_pio2f+0x39c>
 800de4e:	aa44      	add	r2, sp, #272	@ 0x110
 800de50:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800de54:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800df2c <__kernel_rem_pio2f+0x2ec>
 800de58:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800de5c:	2000      	movs	r0, #0
 800de5e:	1ae2      	subs	r2, r4, r3
 800de60:	e0b1      	b.n	800dfc6 <__kernel_rem_pio2f+0x386>
 800de62:	2602      	movs	r6, #2
 800de64:	e78f      	b.n	800dd86 <__kernel_rem_pio2f+0x146>
 800de66:	f852 1b04 	ldr.w	r1, [r2], #4
 800de6a:	b948      	cbnz	r0, 800de80 <__kernel_rem_pio2f+0x240>
 800de6c:	b121      	cbz	r1, 800de78 <__kernel_rem_pio2f+0x238>
 800de6e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800de72:	f842 1c04 	str.w	r1, [r2, #-4]
 800de76:	2101      	movs	r1, #1
 800de78:	f10e 0e01 	add.w	lr, lr, #1
 800de7c:	4608      	mov	r0, r1
 800de7e:	e787      	b.n	800dd90 <__kernel_rem_pio2f+0x150>
 800de80:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800de84:	e7f5      	b.n	800de72 <__kernel_rem_pio2f+0x232>
 800de86:	f104 3cff 	add.w	ip, r4, #4294967295
 800de8a:	aa08      	add	r2, sp, #32
 800de8c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800de90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800de94:	a908      	add	r1, sp, #32
 800de96:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800de9a:	e781      	b.n	800dda0 <__kernel_rem_pio2f+0x160>
 800de9c:	f104 3cff 	add.w	ip, r4, #4294967295
 800dea0:	aa08      	add	r2, sp, #32
 800dea2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dea6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800deaa:	e7f3      	b.n	800de94 <__kernel_rem_pio2f+0x254>
 800deac:	a908      	add	r1, sp, #32
 800deae:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800deb2:	3801      	subs	r0, #1
 800deb4:	430a      	orrs	r2, r1
 800deb6:	e7ab      	b.n	800de10 <__kernel_rem_pio2f+0x1d0>
 800deb8:	3201      	adds	r2, #1
 800deba:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800debe:	2e00      	cmp	r6, #0
 800dec0:	d0fa      	beq.n	800deb8 <__kernel_rem_pio2f+0x278>
 800dec2:	9905      	ldr	r1, [sp, #20]
 800dec4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dec8:	eb0d 0001 	add.w	r0, sp, r1
 800decc:	18e6      	adds	r6, r4, r3
 800dece:	a91c      	add	r1, sp, #112	@ 0x70
 800ded0:	f104 0c01 	add.w	ip, r4, #1
 800ded4:	384c      	subs	r0, #76	@ 0x4c
 800ded6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800deda:	4422      	add	r2, r4
 800dedc:	4562      	cmp	r2, ip
 800dede:	da04      	bge.n	800deea <__kernel_rem_pio2f+0x2aa>
 800dee0:	4614      	mov	r4, r2
 800dee2:	e710      	b.n	800dd06 <__kernel_rem_pio2f+0xc6>
 800dee4:	9804      	ldr	r0, [sp, #16]
 800dee6:	2201      	movs	r2, #1
 800dee8:	e7e7      	b.n	800deba <__kernel_rem_pio2f+0x27a>
 800deea:	9903      	ldr	r1, [sp, #12]
 800deec:	f8dd e004 	ldr.w	lr, [sp, #4]
 800def0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800def4:	9105      	str	r1, [sp, #20]
 800def6:	ee07 1a90 	vmov	s15, r1
 800defa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800defe:	2400      	movs	r4, #0
 800df00:	ece6 7a01 	vstmia	r6!, {s15}
 800df04:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800df08:	46b1      	mov	r9, r6
 800df0a:	455c      	cmp	r4, fp
 800df0c:	dd04      	ble.n	800df18 <__kernel_rem_pio2f+0x2d8>
 800df0e:	ece0 7a01 	vstmia	r0!, {s15}
 800df12:	f10c 0c01 	add.w	ip, ip, #1
 800df16:	e7e1      	b.n	800dedc <__kernel_rem_pio2f+0x29c>
 800df18:	ecfe 6a01 	vldmia	lr!, {s13}
 800df1c:	ed39 7a01 	vldmdb	r9!, {s14}
 800df20:	3401      	adds	r4, #1
 800df22:	eee6 7a87 	vfma.f32	s15, s13, s14
 800df26:	e7f0      	b.n	800df0a <__kernel_rem_pio2f+0x2ca>
 800df28:	0800e604 	.word	0x0800e604
 800df2c:	0800e5d8 	.word	0x0800e5d8
 800df30:	43800000 	.word	0x43800000
 800df34:	3b800000 	.word	0x3b800000
 800df38:	00000000 	.word	0x00000000
 800df3c:	9b02      	ldr	r3, [sp, #8]
 800df3e:	eeb0 0a48 	vmov.f32	s0, s16
 800df42:	eba3 0008 	sub.w	r0, r3, r8
 800df46:	f7ff fe15 	bl	800db74 <scalbnf>
 800df4a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800df30 <__kernel_rem_pio2f+0x2f0>
 800df4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800df52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df56:	db19      	blt.n	800df8c <__kernel_rem_pio2f+0x34c>
 800df58:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800df34 <__kernel_rem_pio2f+0x2f4>
 800df5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800df60:	aa08      	add	r2, sp, #32
 800df62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df66:	3508      	adds	r5, #8
 800df68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800df70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800df78:	ee10 3a10 	vmov	r3, s0
 800df7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800df80:	ee17 3a90 	vmov	r3, s15
 800df84:	3401      	adds	r4, #1
 800df86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800df8a:	e74c      	b.n	800de26 <__kernel_rem_pio2f+0x1e6>
 800df8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800df90:	aa08      	add	r2, sp, #32
 800df92:	ee10 3a10 	vmov	r3, s0
 800df96:	e7f6      	b.n	800df86 <__kernel_rem_pio2f+0x346>
 800df98:	a808      	add	r0, sp, #32
 800df9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800df9e:	9001      	str	r0, [sp, #4]
 800dfa0:	ee07 0a90 	vmov	s15, r0
 800dfa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dfae:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dfb2:	ed62 7a01 	vstmdb	r2!, {s15}
 800dfb6:	e743      	b.n	800de40 <__kernel_rem_pio2f+0x200>
 800dfb8:	ecfc 6a01 	vldmia	ip!, {s13}
 800dfbc:	ecb5 7a01 	vldmia	r5!, {s14}
 800dfc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dfc4:	3001      	adds	r0, #1
 800dfc6:	4550      	cmp	r0, sl
 800dfc8:	dc01      	bgt.n	800dfce <__kernel_rem_pio2f+0x38e>
 800dfca:	4290      	cmp	r0, r2
 800dfcc:	ddf4      	ble.n	800dfb8 <__kernel_rem_pio2f+0x378>
 800dfce:	a858      	add	r0, sp, #352	@ 0x160
 800dfd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800dfd4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	e735      	b.n	800de48 <__kernel_rem_pio2f+0x208>
 800dfdc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	dc09      	bgt.n	800dff6 <__kernel_rem_pio2f+0x3b6>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	dc27      	bgt.n	800e036 <__kernel_rem_pio2f+0x3f6>
 800dfe6:	d040      	beq.n	800e06a <__kernel_rem_pio2f+0x42a>
 800dfe8:	f009 0007 	and.w	r0, r9, #7
 800dfec:	b059      	add	sp, #356	@ 0x164
 800dfee:	ecbd 8b04 	vpop	{d8-d9}
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d1f5      	bne.n	800dfe8 <__kernel_rem_pio2f+0x3a8>
 800dffc:	aa30      	add	r2, sp, #192	@ 0xc0
 800dffe:	1f0b      	subs	r3, r1, #4
 800e000:	4413      	add	r3, r2
 800e002:	461a      	mov	r2, r3
 800e004:	4620      	mov	r0, r4
 800e006:	2800      	cmp	r0, #0
 800e008:	dc50      	bgt.n	800e0ac <__kernel_rem_pio2f+0x46c>
 800e00a:	4622      	mov	r2, r4
 800e00c:	2a01      	cmp	r2, #1
 800e00e:	dc5d      	bgt.n	800e0cc <__kernel_rem_pio2f+0x48c>
 800e010:	ab30      	add	r3, sp, #192	@ 0xc0
 800e012:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800e016:	440b      	add	r3, r1
 800e018:	2c01      	cmp	r4, #1
 800e01a:	dc67      	bgt.n	800e0ec <__kernel_rem_pio2f+0x4ac>
 800e01c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e020:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e024:	2e00      	cmp	r6, #0
 800e026:	d167      	bne.n	800e0f8 <__kernel_rem_pio2f+0x4b8>
 800e028:	edc7 6a00 	vstr	s13, [r7]
 800e02c:	ed87 7a01 	vstr	s14, [r7, #4]
 800e030:	edc7 7a02 	vstr	s15, [r7, #8]
 800e034:	e7d8      	b.n	800dfe8 <__kernel_rem_pio2f+0x3a8>
 800e036:	ab30      	add	r3, sp, #192	@ 0xc0
 800e038:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800e03c:	440b      	add	r3, r1
 800e03e:	4622      	mov	r2, r4
 800e040:	2a00      	cmp	r2, #0
 800e042:	da24      	bge.n	800e08e <__kernel_rem_pio2f+0x44e>
 800e044:	b34e      	cbz	r6, 800e09a <__kernel_rem_pio2f+0x45a>
 800e046:	eef1 7a47 	vneg.f32	s15, s14
 800e04a:	edc7 7a00 	vstr	s15, [r7]
 800e04e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e056:	aa31      	add	r2, sp, #196	@ 0xc4
 800e058:	2301      	movs	r3, #1
 800e05a:	429c      	cmp	r4, r3
 800e05c:	da20      	bge.n	800e0a0 <__kernel_rem_pio2f+0x460>
 800e05e:	b10e      	cbz	r6, 800e064 <__kernel_rem_pio2f+0x424>
 800e060:	eef1 7a67 	vneg.f32	s15, s15
 800e064:	edc7 7a01 	vstr	s15, [r7, #4]
 800e068:	e7be      	b.n	800dfe8 <__kernel_rem_pio2f+0x3a8>
 800e06a:	ab30      	add	r3, sp, #192	@ 0xc0
 800e06c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800df38 <__kernel_rem_pio2f+0x2f8>
 800e070:	440b      	add	r3, r1
 800e072:	2c00      	cmp	r4, #0
 800e074:	da05      	bge.n	800e082 <__kernel_rem_pio2f+0x442>
 800e076:	b10e      	cbz	r6, 800e07c <__kernel_rem_pio2f+0x43c>
 800e078:	eef1 7a67 	vneg.f32	s15, s15
 800e07c:	edc7 7a00 	vstr	s15, [r7]
 800e080:	e7b2      	b.n	800dfe8 <__kernel_rem_pio2f+0x3a8>
 800e082:	ed33 7a01 	vldmdb	r3!, {s14}
 800e086:	3c01      	subs	r4, #1
 800e088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e08c:	e7f1      	b.n	800e072 <__kernel_rem_pio2f+0x432>
 800e08e:	ed73 7a01 	vldmdb	r3!, {s15}
 800e092:	3a01      	subs	r2, #1
 800e094:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e098:	e7d2      	b.n	800e040 <__kernel_rem_pio2f+0x400>
 800e09a:	eef0 7a47 	vmov.f32	s15, s14
 800e09e:	e7d4      	b.n	800e04a <__kernel_rem_pio2f+0x40a>
 800e0a0:	ecb2 7a01 	vldmia	r2!, {s14}
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0aa:	e7d6      	b.n	800e05a <__kernel_rem_pio2f+0x41a>
 800e0ac:	ed72 7a01 	vldmdb	r2!, {s15}
 800e0b0:	edd2 6a01 	vldr	s13, [r2, #4]
 800e0b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e0b8:	3801      	subs	r0, #1
 800e0ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0be:	ed82 7a00 	vstr	s14, [r2]
 800e0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0c6:	edc2 7a01 	vstr	s15, [r2, #4]
 800e0ca:	e79c      	b.n	800e006 <__kernel_rem_pio2f+0x3c6>
 800e0cc:	ed73 7a01 	vldmdb	r3!, {s15}
 800e0d0:	edd3 6a01 	vldr	s13, [r3, #4]
 800e0d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e0d8:	3a01      	subs	r2, #1
 800e0da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0de:	ed83 7a00 	vstr	s14, [r3]
 800e0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0e6:	edc3 7a01 	vstr	s15, [r3, #4]
 800e0ea:	e78f      	b.n	800e00c <__kernel_rem_pio2f+0x3cc>
 800e0ec:	ed33 7a01 	vldmdb	r3!, {s14}
 800e0f0:	3c01      	subs	r4, #1
 800e0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0f6:	e78f      	b.n	800e018 <__kernel_rem_pio2f+0x3d8>
 800e0f8:	eef1 6a66 	vneg.f32	s13, s13
 800e0fc:	eeb1 7a47 	vneg.f32	s14, s14
 800e100:	edc7 6a00 	vstr	s13, [r7]
 800e104:	ed87 7a01 	vstr	s14, [r7, #4]
 800e108:	eef1 7a67 	vneg.f32	s15, s15
 800e10c:	e790      	b.n	800e030 <__kernel_rem_pio2f+0x3f0>
 800e10e:	bf00      	nop

0800e110 <floorf>:
 800e110:	ee10 3a10 	vmov	r3, s0
 800e114:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e118:	3a7f      	subs	r2, #127	@ 0x7f
 800e11a:	2a16      	cmp	r2, #22
 800e11c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e120:	dc2b      	bgt.n	800e17a <floorf+0x6a>
 800e122:	2a00      	cmp	r2, #0
 800e124:	da12      	bge.n	800e14c <floorf+0x3c>
 800e126:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e18c <floorf+0x7c>
 800e12a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e12e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e136:	dd06      	ble.n	800e146 <floorf+0x36>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	da24      	bge.n	800e186 <floorf+0x76>
 800e13c:	2900      	cmp	r1, #0
 800e13e:	4b14      	ldr	r3, [pc, #80]	@ (800e190 <floorf+0x80>)
 800e140:	bf08      	it	eq
 800e142:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e146:	ee00 3a10 	vmov	s0, r3
 800e14a:	4770      	bx	lr
 800e14c:	4911      	ldr	r1, [pc, #68]	@ (800e194 <floorf+0x84>)
 800e14e:	4111      	asrs	r1, r2
 800e150:	420b      	tst	r3, r1
 800e152:	d0fa      	beq.n	800e14a <floorf+0x3a>
 800e154:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e18c <floorf+0x7c>
 800e158:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e15c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e164:	ddef      	ble.n	800e146 <floorf+0x36>
 800e166:	2b00      	cmp	r3, #0
 800e168:	bfbe      	ittt	lt
 800e16a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e16e:	fa40 f202 	asrlt.w	r2, r0, r2
 800e172:	189b      	addlt	r3, r3, r2
 800e174:	ea23 0301 	bic.w	r3, r3, r1
 800e178:	e7e5      	b.n	800e146 <floorf+0x36>
 800e17a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e17e:	d3e4      	bcc.n	800e14a <floorf+0x3a>
 800e180:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e184:	4770      	bx	lr
 800e186:	2300      	movs	r3, #0
 800e188:	e7dd      	b.n	800e146 <floorf+0x36>
 800e18a:	bf00      	nop
 800e18c:	7149f2ca 	.word	0x7149f2ca
 800e190:	bf800000 	.word	0xbf800000
 800e194:	007fffff 	.word	0x007fffff

0800e198 <_init>:
 800e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19a:	bf00      	nop
 800e19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19e:	bc08      	pop	{r3}
 800e1a0:	469e      	mov	lr, r3
 800e1a2:	4770      	bx	lr

0800e1a4 <_fini>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	bf00      	nop
 800e1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1aa:	bc08      	pop	{r3}
 800e1ac:	469e      	mov	lr, r3
 800e1ae:	4770      	bx	lr
