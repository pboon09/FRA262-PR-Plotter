
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c20  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08013df8  08013df8  00014df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014458  08014458  00016194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014458  08014458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014460  08014460  00016194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014460  08014460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014464  08014464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08014468  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002224  20000194  080145fc  00016194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b8  080145fc  000163b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c4f2  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bc  00000000  00000000  000426b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00047c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b0  00000000  00000000  00049980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bcb5  00000000  00000000  00078bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a0cf  00000000  00000000  000a487b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be94a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  001be990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c6e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08013de0 	.word	0x08013de0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08013de0 	.word	0x08013de0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fb20 	bl	800b624 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 fc09 	bl	800a808 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe6b 	bl	8001e16 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f829 	bl	80033fc <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f923 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f91a 	bl	8003648 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f906 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8fd 	bl	8003648 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f8eb 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f8de 	bl	8003648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00a fff2 	bl	800c4b0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8b5 	bl	8003648 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00a ffd5 	bl	800c4b0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f898 	bl	8003648 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00a ffba 	bl	800c4b0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f879 	bl	8003648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbc7 	bl	8001e16 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 fcba 	bl	8012078 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 fc7d 	bl	8012078 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fad8 	bl	8001e16 <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	ed2d 8b02 	vpush	{d8}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b4:	f7fe fe6c 	bl	8000590 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe fe5e 	bl	8000590 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f0:	f7fe ff78 	bl	80007e4 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f92a 	bl	8000b54 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001904:	ed97 7a00 	vldr	s14, [r7]
 8001908:	edd7 7a03 	vldr	s15, [r7, #12]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f918 	bl	8000b54 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb1 8a67 	vneg.f32	s16, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f90b 	bl	8000b54 <__aeabi_d2f>
 800193e:	4604      	mov	r4, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f902 	bl	8000b54 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef1 8a67 	vneg.f32	s17, s15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8f5 	bl	8000b54 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee02 3a10 	vmov	s4, r3
 8001970:	eef0 1a68 	vmov.f32	s3, s17
 8001974:	ee01 4a10 	vmov	s2, r4
 8001978:	eef0 0a48 	vmov.f32	s1, s16
 800197c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001980:	f000 fa49 	bl	8001e16 <mapf>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ba:	b5b0      	push	{r4, r5, r7, lr}
 80019bc:	ed2d 8b02 	vpush	{d8}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ce:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fd74 	bl	80004e0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f010 fae6 	bl	8011fd0 <cos>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fdc0 	bl	8000590 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f89c 	bl	8000b54 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ed97 7a00 	vldr	s14, [r7]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd44 	bl	80004e0 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f868 	bl	8000b54 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f852 	bl	8000b54 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb1 8a67 	vneg.f32	s16, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f845 	bl	8000b54 <__aeabi_d2f>
 8001aca:	4604      	mov	r4, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f83c 	bl	8000b54 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef1 8a67 	vneg.f32	s17, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	ee02 3a10 	vmov	s4, r3
 8001afc:	eef0 1a68 	vmov.f32	s3, s17
 8001b00:	ee01 4a10 	vmov	s2, r4
 8001b04:	eef0 0a48 	vmov.f32	s1, s16
 8001b08:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0c:	f000 f983 	bl	8001e16 <mapf>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	ed2d 8b02 	vpush	{d8}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
 8001b3a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <FIR_init+0x2a>
        numTaps += 1;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f010 f92e 	bl	8011dc0 <malloc>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 f925 	bl	8011dc0 <malloc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e0 	beq.w	8001d48 <FIR_init+0x224>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80db 	beq.w	8001d48 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b96:	e00a      	b.n	8001bae <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f0      	bcc.n	8001b98 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bba:	ed97 7a00 	vldr	s14, [r7]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bd2:	e077      	b.n	8001cc4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10c      	bne.n	8001bfa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
 8001bf8:	e02c      	b.n	8001c54 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <FIR_init+0x230>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f010 fafe 	bl	8012224 <sinf>
 8001c28:	eef0 6a40 	vmov.f32	s13, s0
 8001c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d58 <FIR_init+0x234>
 8001c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 8a00 	vldr	s16, [r3]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d54 <FIR_init+0x230>
 8001c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	f010 fa86 	bl	801219c <cosf>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d5c <FIR_init+0x238>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d60 <FIR_init+0x23c>
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	db82      	blt.n	8001bd4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	83fb      	strh	r3, [r7, #30]
 8001cd8:	e00f      	b.n	8001cfa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3eb      	bcc.n	8001cda <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d01b      	beq.n	8001d48 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	e014      	b.n	8001d40 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	8bbb      	ldrh	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	8bba      	ldrh	r2, [r7, #28]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e6      	bcc.n	8001d16 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	ecbd 8b02 	vpop	{d8}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40c90fdb 	.word	0x40c90fdb
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	3eeb851f 	.word	0x3eeb851f
 8001d60:	3f0a3d71 	.word	0x3f0a3d71

08001d64 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	895b      	ldrh	r3, [r3, #10]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	895b      	ldrh	r3, [r3, #10]
 8001d8a:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	813b      	strh	r3, [r7, #8]
 8001d90:	e023      	b.n	8001dda <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	891b      	ldrh	r3, [r3, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	e002      	b.n	8001dd4 <FIR_process+0x70>
        } else {
            index--;
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001dd4:	893b      	ldrh	r3, [r7, #8]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	891b      	ldrh	r3, [r3, #8]
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3d6      	bcc.n	8001d92 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	895b      	ldrh	r3, [r3, #10]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895a      	ldrh	r2, [r3, #10]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	891b      	ldrh	r3, [r3, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ee07 3a90 	vmov	s15, r3
}
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e16:	b480      	push	{r7}
 8001e18:	b089      	sub	sp, #36	@ 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e20:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e24:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e28:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e2c:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e50:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	ee07 3a90 	vmov	s15, r3
}
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	3724      	adds	r7, #36	@ 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200001b0 	.word	0x200001b0

08001ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <modbus_3t5_Timeout+0x1c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	755a      	strb	r2, [r3, #21]

}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	200001b0 	.word	0x200001b0

08001ee4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f00e f9ad 	bl	801024c <HAL_UART_GetError>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d101      	bne.n	8001efc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001ef8:	f7ff ffc4 	bl	8001e84 <modbus_1t5_Timeout>

	}
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f20:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f28:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	7e3a      	ldrb	r2, [r7, #24]
 8001f36:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <Modbus_init+0xc8>)
 8001f46:	210e      	movs	r1, #14
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c fc23 	bl	800e794 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2110      	movs	r1, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00e f923 	bl	80101a0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00e f93a 	bl	80101d8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <Modbus_init+0xcc>)
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00d fc61 	bl	800f834 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f84:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f88:	4413      	add	r3, r2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f90:	4619      	mov	r1, r3
 8001f92:	f00d fd09 	bl	800f9a8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10c      	bne.n	8001fc0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <Modbus_init+0xc4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b fbcd 	bl	800d74c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b fe1c 	bl	800dbf8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200001b0 	.word	0x200001b0
 8001fcc:	08001ec5 	.word	0x08001ec5
 8001fd0:	08001ee5 	.word	0x08001ee5

08001fd4 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fdc:	ed87 0a08 	vstr	s0, [r7, #32]
 8001fe0:	edc7 0a07 	vstr	s1, [r7, #28]
 8001fe4:	ed87 1a06 	vstr	s2, [r7, #24]
 8001fe8:	edc7 1a05 	vstr	s3, [r7, #20]
 8001fec:	ed87 2a04 	vstr	s4, [r7, #16]
 8001ff0:	edc7 2a03 	vstr	s5, [r7, #12]
 8001ff4:	ed87 3a02 	vstr	s6, [r7, #8]
 8001ff8:	edc7 3a01 	vstr	s7, [r7, #4]
 8001ffc:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	2210      	movs	r2, #16
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f00f ff74 	bl	8011f2c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	3310      	adds	r3, #16
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00f ff6d 	bl	8011f2c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002056:	e00c      	b.n	8002072 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8002058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002062:	3304      	adds	r3, #4
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	4a79      	ldr	r2, [pc, #484]	@ (8002250 <MotorKalman_Init+0x27c>)
 800206a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206e:	3301      	adds	r3, #1
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002074:	2b03      	cmp	r3, #3
 8002076:	ddef      	ble.n	8002058 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f00f ff52 	bl	8011f2c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208c:	e00d      	b.n	80020aa <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800208e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002098:	33be      	adds	r3, #190	@ 0xbe
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020a2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a6:	3301      	adds	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	ddee      	ble.n	800208e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	33f0      	adds	r3, #240	@ 0xf0
 80020b4:	2210      	movs	r2, #16
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00f ff37 	bl	8011f2c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020c4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020ce:	2210      	movs	r2, #16
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00f ff2a 	bl	8011f2c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020de:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80020e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80020e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e8:	f000 f922 	bl	8002330 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80020ec:	ed97 0a00 	vldr	s0, [r7]
 80020f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020f2:	f000 f94d 	bl	8002390 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	2201      	movs	r2, #1
 8002100:	2104      	movs	r1, #4
 8002102:	f00f f9a2 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3310      	adds	r3, #16
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00f f999 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002124:	2204      	movs	r2, #4
 8002126:	2104      	movs	r1, #4
 8002128:	f00f f98f 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002138:	2201      	movs	r2, #1
 800213a:	2101      	movs	r1, #1
 800213c:	f00f f985 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800214c:	2201      	movs	r2, #1
 800214e:	2101      	movs	r1, #1
 8002150:	f00f f97b 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002160:	2201      	movs	r2, #1
 8002162:	2101      	movs	r1, #1
 8002164:	f00f f971 	bl	801144a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002174:	2204      	movs	r2, #4
 8002176:	2104      	movs	r1, #4
 8002178:	f00f f967 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002188:	2201      	movs	r2, #1
 800218a:	2104      	movs	r1, #4
 800218c:	f00f f95d 	bl	801144a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800219c:	2201      	movs	r2, #1
 800219e:	2104      	movs	r1, #4
 80021a0:	f00f f953 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80021b0:	2204      	movs	r2, #4
 80021b2:	2104      	movs	r1, #4
 80021b4:	f00f f949 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80021c4:	2204      	movs	r2, #4
 80021c6:	2101      	movs	r1, #1
 80021c8:	f00f f93f 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80021d8:	2201      	movs	r2, #1
 80021da:	2101      	movs	r1, #1
 80021dc:	f00f f935 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80021ec:	2201      	movs	r2, #1
 80021ee:	2104      	movs	r1, #4
 80021f0:	f00f f92b 	bl	801144a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80021f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021f6:	f000 f82d 	bl	8002254 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	3390      	adds	r3, #144	@ 0x90
 8002204:	2204      	movs	r2, #4
 8002206:	2104      	movs	r1, #4
 8002208:	f00f f91f 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	33e0      	adds	r3, #224	@ 0xe0
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	f00f f916 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800222a:	2204      	movs	r2, #4
 800222c:	2104      	movs	r1, #4
 800222e:	f00f f90c 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800223e:	2201      	movs	r2, #1
 8002240:	2104      	movs	r1, #4
 8002242:	f00f f902 	bl	801144a <arm_mat_init_f32>
}
 8002246:	bf00      	nop
 8002248:	3730      	adds	r7, #48	@ 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	42c80000 	.word	0x42c80000

08002254 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	eeb0 3a64 	vmov.f32	s6, s9
 8002298:	eef0 2a45 	vmov.f32	s5, s10
 800229c:	eeb0 2a65 	vmov.f32	s4, s11
 80022a0:	eef0 1a46 	vmov.f32	s3, s12
 80022a4:	eeb0 1a66 	vmov.f32	s2, s13
 80022a8:	eef0 0a47 	vmov.f32	s1, s14
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	f001 f83c 	bl	800332c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022ba:	2240      	movs	r2, #64	@ 0x40
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f00f fe34 	bl	8011f2c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022ca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002328 <MotorKalman_DiscretizeModel+0xd4>
 80022ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800232c <MotorKalman_DiscretizeModel+0xd8>
 8002302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002312:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002328 <MotorKalman_DiscretizeModel+0xd4>
 8002316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	3c23d70a 	.word	0x3c23d70a
 800232c:	3dcccccd 	.word	0x3dcccccd

08002330 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f00f fdf0 	bl	8011f2c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 800234c:	edd7 7a00 	vldr	s15, [r7]
 8002350:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d107      	bne.n	8002382 <MotorKalman_SetProcessNoise+0x52>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002378:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d002      	beq.n	8002388 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff66 	bl	8002254 <MotorKalman_DiscretizeModel>
    }
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 800239c:	ed97 0a00 	vldr	s0, [r7]
 80023a0:	f00f fede 	bl	8012160 <sqrtf>
 80023a4:	eef0 7a40 	vmov.f32	s15, s0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80023be:	b580      	push	{r7, lr}
 80023c0:	b0b2      	sub	sp, #200	@ 0xc8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80023d2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023e6:	e041      	b.n	800246c <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	33c8      	adds	r3, #200	@ 0xc8
 80023f0:	443b      	add	r3, r7
 80023f2:	3b3c      	subs	r3, #60	@ 0x3c
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002400:	e02b      	b.n	800245a <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	33c8      	adds	r3, #200	@ 0xc8
 800240a:	443b      	add	r3, r7
 800240c:	3b3c      	subs	r3, #60	@ 0x3c
 800240e:	ed93 7a00 	vldr	s14, [r3]
 8002412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800241c:	4413      	add	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	3324      	adds	r3, #36	@ 0x24
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	edd3 6a00 	vldr	s13, [r3]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	33c8      	adds	r3, #200	@ 0xc8
 8002448:	443b      	add	r3, r7
 800244a:	3b3c      	subs	r3, #60	@ 0x3c
 800244c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002454:	3301      	adds	r3, #1
 8002456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800245a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800245e:	2b03      	cmp	r3, #3
 8002460:	ddcf      	ble.n	8002402 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002466:	3301      	adds	r3, #1
 8002468:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800246c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002470:	2b03      	cmp	r3, #3
 8002472:	ddb9      	ble.n	80023e8 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800247a:	e021      	b.n	80024c0 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 800247c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	33c8      	adds	r3, #200	@ 0xc8
 8002484:	443b      	add	r3, r7
 8002486:	3b3c      	subs	r3, #60	@ 0x3c
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002492:	3338      	adds	r3, #56	@ 0x38
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 6a00 	vldr	s13, [r3]
 800249c:	edd7 7a00 	vldr	s15, [r7]
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	ddd9      	ble.n	800247c <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00f fd2b 	bl	8011f2c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f00f fd24 	bl	8011f2c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024ea:	e05f      	b.n	80025ac <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024f2:	e052      	b.n	800259a <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	33c8      	adds	r3, #200	@ 0xc8
 8002504:	443b      	add	r3, r7
 8002506:	3b7c      	subs	r3, #124	@ 0x7c
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002514:	e038      	b.n	8002588 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	33c8      	adds	r3, #200	@ 0xc8
 8002526:	443b      	add	r3, r7
 8002528:	3b7c      	subs	r3, #124	@ 0x7c
 800252a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800252e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002538:	4413      	add	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	3324      	adds	r3, #36	@ 0x24
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	edd3 6a00 	vldr	s13, [r3]
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800254a:	009a      	lsls	r2, r3, #2
 800254c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002550:	4413      	add	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800256c:	4413      	add	r3, r2
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	33c8      	adds	r3, #200	@ 0xc8
 8002576:	443b      	add	r3, r7
 8002578:	3b7c      	subs	r3, #124	@ 0x7c
 800257a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800257e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258c:	2b03      	cmp	r3, #3
 800258e:	ddc2      	ble.n	8002516 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002594:	3301      	adds	r3, #1
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800259a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800259e:	2b03      	cmp	r3, #3
 80025a0:	dda8      	ble.n	80024f4 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025a6:	3301      	adds	r3, #1
 80025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	dd9b      	ble.n	80024ec <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025ba:	e05f      	b.n	800267c <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025c2:	e052      	b.n	800266a <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80025c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	33c8      	adds	r3, #200	@ 0xc8
 80025d4:	443b      	add	r3, r7
 80025d6:	3bbc      	subs	r3, #188	@ 0xbc
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025e4:	e038      	b.n	8002658 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	33c8      	adds	r3, #200	@ 0xc8
 80025f6:	443b      	add	r3, r7
 80025f8:	3bbc      	subs	r3, #188	@ 0xbc
 80025fa:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 80025fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	33c8      	adds	r3, #200	@ 0xc8
 800260e:	443b      	add	r3, r7
 8002610:	3b7c      	subs	r3, #124	@ 0x7c
 8002612:	edd3 6a00 	vldr	s13, [r3]
 8002616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261a:	009a      	lsls	r2, r3, #2
 800261c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	3324      	adds	r3, #36	@ 0x24
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002636:	009a      	lsls	r2, r3, #2
 8002638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800263c:	4413      	add	r3, r2
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	33c8      	adds	r3, #200	@ 0xc8
 8002646:	443b      	add	r3, r7
 8002648:	3bbc      	subs	r3, #188	@ 0xbc
 800264a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002652:	3301      	adds	r3, #1
 8002654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800265c:	2b03      	cmp	r3, #3
 800265e:	ddc2      	ble.n	80025e6 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800266a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266e:	2b03      	cmp	r3, #3
 8002670:	dda8      	ble.n	80025c4 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002676:	3301      	adds	r3, #1
 8002678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800267c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002680:	2b03      	cmp	r3, #3
 8002682:	dd9b      	ble.n	80025bc <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800268a:	e037      	b.n	80026fc <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002692:	e02a      	b.n	80026ea <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	33c8      	adds	r3, #200	@ 0xc8
 80026a4:	443b      	add	r3, r7
 80026a6:	3bbc      	subs	r3, #188	@ 0xbc
 80026a8:	ed93 7a00 	vldr	s14, [r3]
 80026ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b6:	4413      	add	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	3354      	adds	r3, #84	@ 0x54
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ce:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80026d0:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	ddd0      	ble.n	8002694 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026f6:	3301      	adds	r3, #1
 80026f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002700:	2b03      	cmp	r3, #3
 8002702:	ddc3      	ble.n	800268c <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	2104      	movs	r1, #4
 8002738:	f00e fe87 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3310      	adds	r3, #16
 8002746:	2204      	movs	r2, #4
 8002748:	2104      	movs	r1, #4
 800274a:	f00e fe7e 	bl	801144a <arm_mat_init_f32>
}
 800274e:	bf00      	nop
 8002750:	37c8      	adds	r7, #200	@ 0xc8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b0d0      	sub	sp, #320	@ 0x140
 800275c:	af00      	add	r7, sp, #0
 800275e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002762:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002766:	6018      	str	r0, [r3, #0]
 8002768:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002770:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002774:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002778:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002782:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 800278c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002790:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800279a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800279e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80027ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80027de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027f0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002802:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002806:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002810:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002834:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002848:	e04d      	b.n	80028e6 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800284a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002854:	443b      	add	r3, r7
 8002856:	3b58      	subs	r3, #88	@ 0x58
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002864:	e036      	b.n	80028d4 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002866:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002870:	443b      	add	r3, r7
 8002872:	3b58      	subs	r3, #88	@ 0x58
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800287c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002886:	333c      	adds	r3, #60	@ 0x3c
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	edd3 6a00 	vldr	s13, [r3]
 8002890:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800289a:	4413      	add	r3, r2
 800289c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	3304      	adds	r3, #4
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028c2:	443b      	add	r3, r7
 80028c4:	3b58      	subs	r3, #88	@ 0x58
 80028c6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028ce:	3301      	adds	r3, #1
 80028d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80028d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028d8:	2b03      	cmp	r3, #3
 80028da:	ddc4      	ble.n	8002866 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028e0:	3301      	adds	r3, #1
 80028e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80028e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	ddad      	ble.n	800284a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80028fc:	e021      	b.n	8002942 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80028fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002908:	443b      	add	r3, r7
 800290a:	3b58      	subs	r3, #88	@ 0x58
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002914:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800291e:	333c      	adds	r3, #60	@ 0x3c
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800293c:	3301      	adds	r3, #1
 800293e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002942:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002946:	2b03      	cmp	r3, #3
 8002948:	ddd9      	ble.n	80028fe <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800294a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800294e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002958:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002964:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002978:	e04d      	b.n	8002a16 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800297a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002984:	443b      	add	r3, r7
 8002986:	3b68      	subs	r3, #104	@ 0x68
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002994:	e036      	b.n	8002a04 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a0:	443b      	add	r3, r7
 80029a2:	3b68      	subs	r3, #104	@ 0x68
 80029a4:	ed93 7a00 	vldr	s14, [r3]
 80029a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ac:	009a      	lsls	r2, r3, #2
 80029ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029b2:	4413      	add	r3, r2
 80029b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80029b8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029d6:	333c      	adds	r3, #60	@ 0x3c
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029f2:	443b      	add	r3, r7
 80029f4:	3b68      	subs	r3, #104	@ 0x68
 80029f6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029fe:	3301      	adds	r3, #1
 8002a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	ddc4      	ble.n	8002996 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a10:	3301      	adds	r3, #1
 8002a12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	ddad      	ble.n	800297a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002a1e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a32:	e01a      	b.n	8002a6a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002a34:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a3e:	443b      	add	r3, r7
 8002a40:	3b68      	subs	r3, #104	@ 0x68
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a58:	443b      	add	r3, r7
 8002a5a:	3b78      	subs	r3, #120	@ 0x78
 8002a5c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	dde0      	ble.n	8002a34 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a78:	e029      	b.n	8002ace <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002a7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	ed93 7a00 	vldr	s14, [r3]
 8002a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a9a:	443b      	add	r3, r7
 8002a9c:	3b78      	subs	r3, #120	@ 0x78
 8002a9e:	edd3 6a00 	vldr	s13, [r3]
 8002aa2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ab2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ac4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	ddd1      	ble.n	8002a7a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ad6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002ada:	2240      	movs	r2, #64	@ 0x40
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00f fa24 	bl	8011f2c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aea:	e035      	b.n	8002b58 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002af2:	e028      	b.n	8002b46 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002afe:	443b      	add	r3, r7
 8002b00:	3b78      	subs	r3, #120	@ 0x78
 8002b02:	ed93 7a00 	vldr	s14, [r3]
 8002b06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b14:	333c      	adds	r3, #60	@ 0x3c
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b28:	4413      	add	r3, r2
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b34:	443b      	add	r3, r7
 8002b36:	3bb8      	subs	r3, #184	@ 0xb8
 8002b38:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	ddd2      	ble.n	8002af4 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b52:	3301      	adds	r3, #1
 8002b54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	ddc5      	ble.n	8002aec <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b64:	2240      	movs	r2, #64	@ 0x40
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00f f9df 	bl	8011f2c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b74:	e038      	b.n	8002be8 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b7c:	e02b      	b.n	8002bd6 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d102      	bne.n	8002b90 <MotorKalman_Update+0x438>
 8002b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b8e:	e001      	b.n	8002b94 <MotorKalman_Update+0x43c>
 8002b90:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002dac <MotorKalman_Update+0x654>
 8002b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ba6:	443b      	add	r3, r7
 8002ba8:	3bb8      	subs	r3, #184	@ 0xb8
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bb8:	4413      	add	r3, r2
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bc4:	443b      	add	r3, r7
 8002bc6:	3bf8      	subs	r3, #248	@ 0xf8
 8002bc8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	ddcf      	ble.n	8002b7e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be2:	3301      	adds	r3, #1
 8002be4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	ddc2      	ble.n	8002b76 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002bf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f103 0110 	add.w	r1, r3, #16
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00f f9d5 	bl	8011fb4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c10:	e06e      	b.n	8002cf0 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c18:	e061      	b.n	8002cde <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c24:	4413      	add	r3, r2
 8002c26:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c2a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	3304      	adds	r3, #4
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c42:	e043      	b.n	8002ccc <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c4e:	4413      	add	r3, r2
 8002c50:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c54:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002c76:	443b      	add	r3, r7
 8002c78:	3bf8      	subs	r3, #248	@ 0xf8
 8002c7a:	edd3 6a00 	vldr	s13, [r3]
 8002c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c88:	4413      	add	r3, r2
 8002c8a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c8e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ca2:	009a      	lsls	r2, r3, #2
 8002ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca8:	4413      	add	r3, r2
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cb2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	ddb7      	ble.n	8002c44 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002cd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	dd99      	ble.n	8002c1a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	dd8c      	ble.n	8002c12 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002d12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002d2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002d46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002d6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	f00e fb65 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002d8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	f00e fb54 	bl	801144a <arm_mat_init_f32>
}
 8002da2:	bf00      	nop
 8002da4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00000000 	.word	0x00000000

08002db0 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dbc:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002dc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fafa 	bl	80023be <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002dca:	ed97 0a01 	vldr	s0, [r7, #4]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fcc2 	bl	8002758 <MotorKalman_Update>

    return filter->velocity;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002dda:	ee07 3a90 	vmov	s15, r3
}
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00c      	b.n	8002e14 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	440b      	add	r3, r1
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbee      	blt.n	8002dfa <matrix_copy+0x12>
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002e38:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002e3c:	6020      	str	r0, [r4, #0]
 8002e3e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002e42:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002e46:	6001      	str	r1, [r0, #0]
 8002e48:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e4c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002e50:	ed81 0a00 	vstr	s0, [r1]
 8002e54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e58:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002e5c:	600a      	str	r2, [r1, #0]
 8002e5e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002e62:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002e66:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002e68:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e6c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002e70:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	2104      	movs	r1, #4
 8002e7a:	f00e fae6 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002e7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e82:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e86:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	2104      	movs	r1, #4
 8002e90:	f00e fadb 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002e94:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e98:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002e9c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	f00e fad0 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002eaa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002eae:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002eb2:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2104      	movs	r1, #4
 8002ebc:	f00e fac5 	bl	801144a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002ec0:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002ec4:	2240      	movs	r2, #64	@ 0x40
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00f f82f 	bl	8011f2c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002ece:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002ed2:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	2104      	movs	r1, #4
 8002eda:	f00e fab6 	bl	801144a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002ee4:	e011      	b.n	8002f0a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002ee6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002ef6:	443b      	add	r3, r7
 8002ef8:	3b6c      	subs	r3, #108	@ 0x6c
 8002efa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002efe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002f00:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f0a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	dde9      	ble.n	8002ee6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002f12:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f16:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	f00e fa94 	bl	801144a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002f22:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f26:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f2a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f2e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002f32:	ed93 0a00 	vldr	s0, [r3]
 8002f36:	4610      	mov	r0, r2
 8002f38:	f00e fe90 	bl	8011c5c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002f3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f40:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f44:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002f48:	2210      	movs	r2, #16
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	f7ff ff4c 	bl	8002de8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002f50:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002f54:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002f58:	2204      	movs	r2, #4
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	f00e fa75 	bl	801144a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002f60:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f64:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002f68:	2204      	movs	r2, #4
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	f00e fa6d 	bl	801144a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002f70:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f74:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f78:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00e fa29 	bl	80113d4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002f82:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f86:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff2b 	bl	8002de8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002f92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f96:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002fa0:	e03a      	b.n	8003018 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002fa2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fae:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002fba:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002fbe:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002fc2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f00e fdce 	bl	8011b68 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002fcc:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002fd0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff06 	bl	8002de8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fe0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002fec:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00e fe30 	bl	8011c5c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002ffc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003000:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003004:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003008:	4618      	mov	r0, r3
 800300a:	f00e f9e3 	bl	80113d4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800300e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003012:	3301      	adds	r3, #1
 8003014:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003018:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800301c:	2b0a      	cmp	r3, #10
 800301e:	ddc0      	ble.n	8002fa2 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8003020:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003024:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003028:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800302c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8003030:	ed93 0a00 	vldr	s0, [r3]
 8003034:	4610      	mov	r0, r2
 8003036:	f00e fe11 	bl	8011c5c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800303a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003042:	461a      	mov	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	6053      	str	r3, [r2, #4]
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800304e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8003052:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003056:	2201      	movs	r2, #1
 8003058:	2104      	movs	r1, #4
 800305a:	f00e f9f6 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 800305e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8003062:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003066:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800306a:	4618      	mov	r0, r3
 800306c:	f00e fd7c 	bl	8011b68 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003070:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003074:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8003078:	2201      	movs	r2, #1
 800307a:	2104      	movs	r1, #4
 800307c:	f00e f9e5 	bl	801144a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003080:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003084:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003090:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003098:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800309c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80030a0:	4611      	mov	r1, r2
 80030a2:	eeb0 0a47 	vmov.f32	s0, s14
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00e fdd8 	bl	8011c5c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030ac:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030b0:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030b4:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030b8:	4618      	mov	r0, r3
 80030ba:	f00e f98b 	bl	80113d4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 80030be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030c6:	4618      	mov	r0, r3
 80030c8:	2340      	movs	r3, #64	@ 0x40
 80030ca:	461a      	mov	r2, r3
 80030cc:	2100      	movs	r1, #0
 80030ce:	f00e ff2d 	bl	8011f2c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80030d2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80030d6:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80030da:	2204      	movs	r2, #4
 80030dc:	2104      	movs	r1, #4
 80030de:	f00e f9b4 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80030e2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80030e6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030ea:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f00e fd3a 	bl	8011b68 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80030f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030fc:	461a      	mov	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	6053      	str	r3, [r2, #4]
 8003104:	6093      	str	r3, [r2, #8]
 8003106:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003108:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800310c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003110:	2201      	movs	r2, #1
 8003112:	2104      	movs	r1, #4
 8003114:	f00e f999 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003118:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800311c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003120:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003124:	4618      	mov	r0, r3
 8003126:	f00e fd1f 	bl	8011b68 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800312a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800312e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800313a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800313e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800314e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003152:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003156:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800315a:	4611      	mov	r1, r2
 800315c:	eeb0 0a47 	vmov.f32	s0, s14
 8003160:	4618      	mov	r0, r3
 8003162:	f00e fd7b 	bl	8011c5c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003166:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800316a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800316e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003172:	4618      	mov	r0, r3
 8003174:	f00e f92e 	bl	80113d4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003178:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800317c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003180:	4618      	mov	r0, r3
 8003182:	2340      	movs	r3, #64	@ 0x40
 8003184:	461a      	mov	r2, r3
 8003186:	2100      	movs	r1, #0
 8003188:	f00e fed0 	bl	8011f2c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 800318c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003190:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003194:	2204      	movs	r2, #4
 8003196:	2104      	movs	r1, #4
 8003198:	f00e f957 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 800319c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80031a0:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00e fcdd 	bl	8011b68 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80031ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031b2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80031b6:	461a      	mov	r2, r3
 80031b8:	2300      	movs	r3, #0
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80031c2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80031c6:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80031ca:	2201      	movs	r2, #1
 80031cc:	2104      	movs	r1, #4
 80031ce:	f00e f93c 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80031d2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80031d6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031de:	4618      	mov	r0, r3
 80031e0:	f00e fcc2 	bl	8011b68 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80031e4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031e8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031f8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003204:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003208:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800321c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003220:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003224:	4611      	mov	r1, r2
 8003226:	eeb0 0a47 	vmov.f32	s0, s14
 800322a:	4618      	mov	r0, r3
 800322c:	f00e fd16 	bl	8011c5c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003230:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003234:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003238:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800323c:	4618      	mov	r0, r3
 800323e:	f00e f8c9 	bl	80113d4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003242:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003246:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800324a:	4618      	mov	r0, r3
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	461a      	mov	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	f00e fe6b 	bl	8011f2c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003256:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800325a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800325e:	2204      	movs	r2, #4
 8003260:	2104      	movs	r1, #4
 8003262:	f00e f8f2 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003266:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800326a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800326e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003272:	4618      	mov	r0, r3
 8003274:	f00e fc78 	bl	8011b68 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003278:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800327c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003280:	461a      	mov	r2, r3
 8003282:	2300      	movs	r3, #0
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	6093      	str	r3, [r2, #8]
 800328a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 800328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003290:	f107 001c 	add.w	r0, r7, #28
 8003294:	2201      	movs	r2, #1
 8003296:	2104      	movs	r1, #4
 8003298:	f00e f8d7 	bl	801144a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 800329c:	f107 021c 	add.w	r2, r7, #28
 80032a0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80032a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00e fc5d 	bl	8011b68 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80032ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032b2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80032be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032d2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032e2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003328 <discretize_system_with_arm+0x4fc>
 80032f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032f6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4611      	mov	r1, r2
 8003300:	eeb0 0a47 	vmov.f32	s0, s14
 8003304:	4618      	mov	r0, r3
 8003306:	f00e fca9 	bl	8011c5c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800330a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800330e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003312:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003316:	4618      	mov	r0, r3
 8003318:	f00e f85c 	bl	80113d4 <arm_mat_add_f32>
}
 800331c:	bf00      	nop
 800331e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	bf00      	nop
 8003328:	42f00000 	.word	0x42f00000

0800332c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b09e      	sub	sp, #120	@ 0x78
 8003330:	af00      	add	r7, sp, #0
 8003332:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003336:	edc7 0a08 	vstr	s1, [r7, #32]
 800333a:	ed87 1a07 	vstr	s2, [r7, #28]
 800333e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003342:	ed87 2a05 	vstr	s4, [r7, #20]
 8003346:	edc7 2a04 	vstr	s5, [r7, #16]
 800334a:	ed87 3a03 	vstr	s6, [r7, #12]
 800334e:	60b8      	str	r0, [r7, #8]
 8003350:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8003352:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003356:	2240      	movs	r2, #64	@ 0x40
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f00e fde6 	bl	8011f2c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8003360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800336e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003374:	edd7 7a06 	vldr	s15, [r7, #24]
 8003378:	eef1 6a67 	vneg.f32	s13, s15
 800337c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003384:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003388:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800338c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003394:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003398:	edd7 6a04 	vldr	s13, [r7, #16]
 800339c:	ed97 7a07 	vldr	s14, [r7, #28]
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80033a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ac:	eef1 6a67 	vneg.f32	s13, s15
 80033b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80033b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80033bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033c0:	eef1 6a67 	vneg.f32	s13, s15
 80033c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033cc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80033d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80033e0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80033e4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80033f0:	f7ff fd1c 	bl	8002e2c <discretize_system_with_arm>
}
 80033f4:	bf00      	nop
 80033f6:	3778      	adds	r7, #120	@ 0x78
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <PWM_init+0x40>)
 800340e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f00a f922 	bl	800d66c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	4619      	mov	r1, r3
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f00a fa69 	bl	800d904 <HAL_TIM_PWM_Start>
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0a21fe80 	.word	0x0a21fe80

08003440 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	ed87 0a02 	vstr	s0, [r7, #8]
 800344c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003450:	edd7 7a02 	vldr	s15, [r7, #8]
 8003454:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d137      	bne.n	80034ce <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	889b      	ldrh	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <PWM_write_duty+0x32>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003470:	e0e1      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	889b      	ldrh	r3, [r3, #4]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d105      	bne.n	8003486 <PWM_write_duty+0x46>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	6393      	str	r3, [r2, #56]	@ 0x38
 8003484:	e0d7      	b.n	8003636 <PWM_write_duty+0x1f6>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	889b      	ldrh	r3, [r3, #4]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d105      	bne.n	800349a <PWM_write_duty+0x5a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003498:	e0cd      	b.n	8003636 <PWM_write_duty+0x1f6>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	889b      	ldrh	r3, [r3, #4]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d105      	bne.n	80034ae <PWM_write_duty+0x6e>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ac:	e0c3      	b.n	8003636 <PWM_write_duty+0x1f6>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	889b      	ldrh	r3, [r3, #4]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d105      	bne.n	80034c2 <PWM_write_duty+0x82>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	6493      	str	r3, [r2, #72]	@ 0x48
 80034c0:	e0b9      	b.n	8003636 <PWM_write_duty+0x1f6>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80034cc:	e0b3      	b.n	8003636 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034da:	ed97 7a02 	vldr	s14, [r7, #8]
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e6:	ee17 2a90 	vmov	r2, s15
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80034f6:	33fe      	adds	r3, #254	@ 0xfe
 80034f8:	4a51      	ldr	r2, [pc, #324]	@ (8003640 <PWM_write_duty+0x200>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0bdb      	lsrs	r3, r3, #15
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	899b      	ldrh	r3, [r3, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003524:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003528:	ed97 7a02 	vldr	s14, [r7, #8]
 800352c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353c:	ee17 3a90 	vmov	r3, s15
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	89db      	ldrh	r3, [r3, #14]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc ffb6 	bl	80004bc <__aeabi_i2d>
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	edd7 7a01 	vldr	s15, [r7, #4]
 8003558:	eef0 7ae7 	vabs.f32	s15, s15
 800355c:	ee17 0a90 	vmov	r0, s15
 8003560:	f7fc ffbe 	bl	80004e0 <__aeabi_f2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4620      	mov	r0, r4
 800356a:	4629      	mov	r1, r5
 800356c:	f7fd f810 	bl	8000590 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <PWM_write_duty+0x204>)
 800357e:	f7fd f931 	bl	80007e4 <__aeabi_ddiv>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fac3 	bl	8000b14 <__aeabi_d2uiz>
 800358e:	4603      	mov	r3, r0
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	899a      	ldrh	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	89da      	ldrh	r2, [r3, #14]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	89da      	ldrh	r2, [r3, #14]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	889b      	ldrh	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <PWM_write_duty+0x190>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6952      	ldr	r2, [r2, #20]
 80035cc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035ce:	e032      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	889b      	ldrh	r3, [r3, #4]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d106      	bne.n	80035e6 <PWM_write_duty+0x1a6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035e4:	e027      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d106      	bne.n	80035fc <PWM_write_duty+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80035fa:	e01c      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	889b      	ldrh	r3, [r3, #4]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d106      	bne.n	8003612 <PWM_write_duty+0x1d2>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003610:	e011      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	2b10      	cmp	r3, #16
 8003618:	d106      	bne.n	8003628 <PWM_write_duty+0x1e8>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003626:	e006      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003634:	e7ff      	b.n	8003636 <PWM_write_duty+0x1f6>
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	bf00      	nop
 8003640:	80008001 	.word	0x80008001
 8003644:	40590000 	.word	0x40590000

08003648 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	ed87 0a02 	vstr	s0, [r7, #8]
 8003654:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003658:	edd7 7a02 	vldr	s15, [r7, #8]
 800365c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d137      	bne.n	80036d6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <PWM_write_range+0x32>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003678:	e0e1      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	889b      	ldrh	r3, [r3, #4]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d105      	bne.n	800368e <PWM_write_range+0x46>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	6393      	str	r3, [r2, #56]	@ 0x38
 800368c:	e0d7      	b.n	800383e <PWM_write_range+0x1f6>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	889b      	ldrh	r3, [r3, #4]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d105      	bne.n	80036a2 <PWM_write_range+0x5a>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80036a0:	e0cd      	b.n	800383e <PWM_write_range+0x1f6>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	889b      	ldrh	r3, [r3, #4]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d105      	bne.n	80036b6 <PWM_write_range+0x6e>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b4:	e0c3      	b.n	800383e <PWM_write_range+0x1f6>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d105      	bne.n	80036ca <PWM_write_range+0x82>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	6493      	str	r3, [r2, #72]	@ 0x48
 80036c8:	e0b9      	b.n	800383e <PWM_write_range+0x1f6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2300      	movs	r3, #0
 80036d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80036d4:	e0b3      	b.n	800383e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80036e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ee:	ee17 2a90 	vmov	r2, s15
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80036fe:	33fe      	adds	r3, #254	@ 0xfe
 8003700:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <PWM_write_range+0x208>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0bdb      	lsrs	r3, r3, #15
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	899b      	ldrh	r3, [r3, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003730:	ed97 7a02 	vldr	s14, [r7, #8]
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800373c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003744:	ee17 3a90 	vmov	r3, s15
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	89db      	ldrh	r3, [r3, #14]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc feb2 	bl	80004bc <__aeabi_i2d>
 8003758:	4604      	mov	r4, r0
 800375a:	460d      	mov	r5, r1
 800375c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003760:	eef0 7ae7 	vabs.f32	s15, s15
 8003764:	ee17 0a90 	vmov	r0, s15
 8003768:	f7fc feba 	bl	80004e0 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc ff0c 	bl	8000590 <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	a331      	add	r3, pc, #196	@ (adr r3, 8003848 <PWM_write_range+0x200>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fd f82d 	bl	80007e4 <__aeabi_ddiv>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f9bf 	bl	8000b14 <__aeabi_d2uiz>
 8003796:	4603      	mov	r3, r0
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	899a      	ldrh	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	89da      	ldrh	r2, [r3, #14]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	89da      	ldrh	r2, [r3, #14]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <PWM_write_range+0x190>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6952      	ldr	r2, [r2, #20]
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037d6:	e032      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	889b      	ldrh	r3, [r3, #4]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d106      	bne.n	80037ee <PWM_write_range+0x1a6>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037ec:	e027      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	889b      	ldrh	r3, [r3, #4]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d106      	bne.n	8003804 <PWM_write_range+0x1bc>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003802:	e01c      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	889b      	ldrh	r3, [r3, #4]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d106      	bne.n	800381a <PWM_write_range+0x1d2>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003818:	e011      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d106      	bne.n	8003830 <PWM_write_range+0x1e8>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800382e:	e006      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800383c:	e7ff      	b.n	800383e <PWM_write_range+0x1f6>
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	bf00      	nop
 8003848:	00000000 	.word	0x00000000
 800384c:	40efffe0 	.word	0x40efffe0
 8003850:	80008001 	.word	0x80008001

08003854 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6178      	str	r0, [r7, #20]
 800385c:	6139      	str	r1, [r7, #16]
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	ed87 0a01 	vstr	s0, [r7, #4]
 8003866:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80038b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	fb01 f202 	mul.w	r2, r1, r2
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003922:	213c      	movs	r1, #60	@ 0x3c
 8003924:	6938      	ldr	r0, [r7, #16]
 8003926:	f00a faa9 	bl	800de7c <HAL_TIM_Encoder_Start>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	0000      	movs	r0, r0
 8003934:	0000      	movs	r0, r0
	...

08003938 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	0fda      	lsrs	r2, r3, #31
 8003960:	4413      	add	r3, r2
 8003962:	105b      	asrs	r3, r3, #1
 8003964:	461a      	mov	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4293      	cmp	r3, r2
 800396a:	dd05      	ble.n	8003978 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00e      	b.n	8003996 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	0fda      	lsrs	r2, r3, #31
 800397e:	4413      	add	r3, r2
 8003980:	105b      	asrs	r3, r3, #1
 8003982:	425b      	negs	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4293      	cmp	r3, r2
 800398a:	da04      	bge.n	8003996 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80039d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fd7b 	bl	80004e0 <__aeabi_f2d>
 80039ea:	4604      	mov	r4, r0
 80039ec:	460d      	mov	r5, r1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a0e:	ee17 0a90 	vmov	r0, s15
 8003a12:	f7fc fd65 	bl	80004e0 <__aeabi_f2d>
 8003a16:	a33c      	add	r3, pc, #240	@ (adr r3, 8003b08 <QEI_get_diff_count+0x1d0>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fdb8 	bl	8000590 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fd57 	bl	80004e0 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4640      	mov	r0, r8
 8003a38:	4649      	mov	r1, r9
 8003a3a:	f7fc fda9 	bl	8000590 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4620      	mov	r0, r4
 8003a44:	4629      	mov	r1, r5
 8003a46:	f7fc fbed 	bl	8000224 <__adddf3>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	f7fd f87f 	bl	8000b54 <__aeabi_d2f>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fd3d 	bl	80004e0 <__aeabi_f2d>
 8003a66:	4604      	mov	r4, r0
 8003a68:	460d      	mov	r5, r1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a86:	ee16 0a90 	vmov	r0, s13
 8003a8a:	f7fc fd29 	bl	80004e0 <__aeabi_f2d>
 8003a8e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b08 <QEI_get_diff_count+0x1d0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fd7c 	bl	8000590 <__aeabi_dmul>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4690      	mov	r8, r2
 8003a9e:	4699      	mov	r9, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fd1b 	bl	80004e0 <__aeabi_f2d>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7fc fd6d 	bl	8000590 <__aeabi_dmul>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd0c 	bl	80004e0 <__aeabi_f2d>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4640      	mov	r0, r8
 8003ace:	4649      	mov	r1, r9
 8003ad0:	f7fc fd5e 	bl	8000590 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	4629      	mov	r1, r5
 8003adc:	f7fc fba2 	bl	8000224 <__adddf3>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f834 	bl	8000b54 <__aeabi_d2f>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b04:	f3af 8000 	nop.w
 8003b08:	54442d18 	.word	0x54442d18
 8003b0c:	400921fb 	.word	0x400921fb

08003b10 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fcd2 	bl	80004e0 <__aeabi_f2d>
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	4b83      	ldr	r3, [pc, #524]	@ (8003d50 <QEI_compute_data+0x240>)
 8003b42:	f7fc fd25 	bl	8000590 <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	461d      	mov	r5, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5a:	ee17 0a90 	vmov	r0, s15
 8003b5e:	f7fc fcbf 	bl	80004e0 <__aeabi_f2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fe3b 	bl	80007e4 <__aeabi_ddiv>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fcb0 	bl	80004e0 <__aeabi_f2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fd02 	bl	8000590 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7fc ffde 	bl	8000b54 <__aeabi_d2f>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ba4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ba8:	ee17 0a90 	vmov	r0, s15
 8003bac:	f7fc fc98 	bl	80004e0 <__aeabi_f2d>
 8003bb0:	a365      	add	r3, pc, #404	@ (adr r3, 8003d48 <QEI_compute_data+0x238>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	f7fc fceb 	bl	8000590 <__aeabi_dmul>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bce:	ee17 0a90 	vmov	r0, s15
 8003bd2:	f7fc fc85 	bl	80004e0 <__aeabi_f2d>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4620      	mov	r0, r4
 8003bdc:	4629      	mov	r1, r5
 8003bde:	f7fc fe01 	bl	80007e4 <__aeabi_ddiv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fc76 	bl	80004e0 <__aeabi_f2d>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc fcc8 	bl	8000590 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7fc ffa4 	bl	8000b54 <__aeabi_d2f>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fc62 	bl	80004e0 <__aeabi_f2d>
 8003c1c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003d48 <QEI_compute_data+0x238>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc fcb5 	bl	8000590 <__aeabi_dmul>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fc54 	bl	80004e0 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fca6 	bl	8000590 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c58:	ee17 0a90 	vmov	r0, s15
 8003c5c:	f7fc fc40 	bl	80004e0 <__aeabi_f2d>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fdbc 	bl	80007e4 <__aeabi_ddiv>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc31 	bl	80004e0 <__aeabi_f2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc fc83 	bl	8000590 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ff5f 	bl	8000b54 <__aeabi_d2f>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	ed93 7a02 	vldr	s14, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d00a      	beq.n	8003ce4 <QEI_compute_data+0x1d4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	e001      	b.n	8003ce8 <QEI_compute_data+0x1d8>
 8003ce4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003d54 <QEI_compute_data+0x244>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfe:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	d00a      	beq.n	8003d26 <QEI_compute_data+0x216>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	e001      	b.n	8003d2a <QEI_compute_data+0x21a>
 8003d26:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003d54 <QEI_compute_data+0x244>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	615a      	str	r2, [r3, #20]
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}
 8003d48:	54442d18 	.word	0x54442d18
 8003d4c:	400921fb 	.word	0x400921fb
 8003d50:	404e0000 	.word	0x404e0000
 8003d54:	00000000 	.word	0x00000000

08003d58 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	@ 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6178      	str	r0, [r7, #20]
 8003dcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8003dd0:	edc7 0a03 	vstr	s1, [r7, #12]
 8003dd4:	ed87 1a02 	vstr	s2, [r7, #8]
 8003dd8:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003e02:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8003e12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	d503      	bpl.n	8003e34 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	22ff      	movs	r2, #255	@ 0xff
 8003e30:	741a      	strb	r2, [r3, #16]
 8003e32:	e002      	b.n	8003e3a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2201      	movs	r2, #1
 8003e38:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003e3a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	d006      	beq.n	8003e56 <Trapezoidal_Generator+0x92>
 8003e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	d104      	bne.n	8003e60 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
        return;
 8003e5e:	e06f      	b.n	8003f40 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003e60:	edd7 6a02 	vldr	s13, [r7, #8]
 8003e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e84:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003e94:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e98:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003ea4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ea8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	db27      	blt.n	8003f06 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003eb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003eba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eca:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eda:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003edc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003eee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ef2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f04:	e018      	b.n	8003f38 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003f06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f12:	eeb0 0a66 	vmov.f32	s0, s13
 8003f16:	f00e f923 	bl	8012160 <sqrtf>
 8003f1a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	60da      	str	r2, [r3, #12]
}
 8003f40:	3738      	adds	r7, #56	@ 0x38
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b08d      	sub	sp, #52	@ 0x34
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6178      	str	r0, [r7, #20]
 8003f50:	6139      	str	r1, [r7, #16]
 8003f52:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f56:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f5a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f5e:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f68:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80041ec <Trapezoidal_Evaluated+0x2a4>
 8003f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	f200 811b 	bhi.w	80041c4 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2200      	movs	r2, #0
 8003f92:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	7c1b      	ldrb	r3, [r3, #16]
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa2:	ed97 7a00 	vldr	s14, [r7]
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	ed93 7a00 	vldr	s14, [r3]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fba:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	d109      	bne.n	8003fd8 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003fd6:	e00c      	b.n	8003ff2 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	7c1b      	ldrb	r3, [r3, #16]
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d824      	bhi.n	8004052 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004008:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800400c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004010:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	edd3 7a03 	vldr	s15, [r3, #12]
 800401a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	edd3 7a03 	vldr	s15, [r3, #12]
 8004024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004028:	edd7 7a03 	vldr	s15, [r7, #12]
 800402c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	ed93 7a03 	vldr	s14, [r3, #12]
 800403c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8004050:	e0c6      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ed93 7a03 	vldr	s14, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	edd3 7a01 	vldr	s15, [r3, #4]
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d830      	bhi.n	80040ca <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004068:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800406c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004070:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	edd3 7a00 	vldr	s15, [r3]
 800407a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	ed97 7a03 	vldr	s14, [r7, #12]
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	ed93 7a03 	vldr	s14, [r3, #12]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80040a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040be:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	e08a      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80040d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	d900      	bls.n	80040e2 <Trapezoidal_Evaluated+0x19a>
}
 80040e0:	e07e      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80040e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	ed97 7a03 	vldr	s14, [r7, #12]
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	ed93 7a01 	vldr	s14, [r3, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	dd11      	ble.n	800414c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ed93 7a01 	vldr	s14, [r3, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004138:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800413c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004140:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004148:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	edd3 7a01 	vldr	s15, [r3, #4]
 8004158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415c:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004160:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004164:	edd7 7a07 	vldr	s15, [r7, #28]
 8004168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800416c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004174:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004178:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800417c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004180:	edd7 7a07 	vldr	s15, [r7, #28]
 8004184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004188:	edd7 7a07 	vldr	s15, [r7, #28]
 800418c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800419a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800419e:	edd7 7a07 	vldr	s15, [r7, #28]
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80041b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041b8:	eef1 7a67 	vneg.f32	s15, s15
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80041c2:	e00d      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2201      	movs	r2, #1
 80041c8:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3734      	adds	r7, #52	@ 0x34
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	3a83126f 	.word	0x3a83126f

080041f0 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041fa:	4603      	mov	r3, r0
 80041fc:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	2b1a      	cmp	r3, #26
 8004202:	d018      	beq.n	8004236 <temperature_to_base+0x46>
 8004204:	2b1a      	cmp	r3, #26
 8004206:	dc1d      	bgt.n	8004244 <temperature_to_base+0x54>
 8004208:	2b18      	cmp	r3, #24
 800420a:	d002      	beq.n	8004212 <temperature_to_base+0x22>
 800420c:	2b19      	cmp	r3, #25
 800420e:	d003      	beq.n	8004218 <temperature_to_base+0x28>
 8004210:	e018      	b.n	8004244 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004212:	edd7 7a01 	vldr	s15, [r7, #4]
 8004216:	e017      	b.n	8004248 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004218:	edd7 7a01 	vldr	s15, [r7, #4]
 800421c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004258 <temperature_to_base+0x68>
 8004220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004224:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800422c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004234:	e008      	b.n	8004248 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004236:	edd7 7a01 	vldr	s15, [r7, #4]
 800423a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800425c <temperature_to_base+0x6c>
 800423e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004242:	e001      	b.n	8004248 <temperature_to_base+0x58>
        default:
            return value;
 8004244:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004248:	eeb0 0a67 	vmov.f32	s0, s15
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	42000000 	.word	0x42000000
 800425c:	43889333 	.word	0x43889333

08004260 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	ed87 0a01 	vstr	s0, [r7, #4]
 800426a:	4603      	mov	r3, r0
 800426c:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	2b1a      	cmp	r3, #26
 8004272:	d018      	beq.n	80042a6 <temperature_from_base+0x46>
 8004274:	2b1a      	cmp	r3, #26
 8004276:	dc1d      	bgt.n	80042b4 <temperature_from_base+0x54>
 8004278:	2b18      	cmp	r3, #24
 800427a:	d002      	beq.n	8004282 <temperature_from_base+0x22>
 800427c:	2b19      	cmp	r3, #25
 800427e:	d003      	beq.n	8004288 <temperature_from_base+0x28>
 8004280:	e018      	b.n	80042b4 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	e017      	b.n	80042b8 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004288:	edd7 7a01 	vldr	s15, [r7, #4]
 800428c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004294:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800429c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80042c8 <temperature_from_base+0x68>
 80042a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a4:	e008      	b.n	80042b8 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80042a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042aa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80042cc <temperature_from_base+0x6c>
 80042ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042b2:	e001      	b.n	80042b8 <temperature_from_base+0x58>
        default:
            return value;
 80042b4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80042b8:	eeb0 0a67 	vmov.f32	s0, s15
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	42000000 	.word	0x42000000
 80042cc:	43889333 	.word	0x43889333

080042d0 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e00a      	b.n	8004300 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	3304      	adds	r3, #4
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b1a      	cmp	r3, #26
 8004304:	ddf1      	ble.n	80042ea <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <init_length_converter+0x80>)
 800430a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a11      	ldr	r2, [pc, #68]	@ (8004354 <init_length_converter+0x84>)
 8004310:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004318:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <init_length_converter+0x88>)
 800431e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <init_length_converter+0x8c>)
 8004324:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <init_length_converter+0x90>)
 800432a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <init_length_converter+0x94>)
 8004330:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <init_length_converter+0x98>)
 8004336:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	3a83126f 	.word	0x3a83126f
 8004354:	3c23d70a 	.word	0x3c23d70a
 8004358:	447a0000 	.word	0x447a0000
 800435c:	3cd013a9 	.word	0x3cd013a9
 8004360:	3e9c0ebf 	.word	0x3e9c0ebf
 8004364:	3f6a161e 	.word	0x3f6a161e
 8004368:	44c92b02 	.word	0x44c92b02

0800436c <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	220a      	movs	r2, #10
 800437e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e00a      	b.n	800439c <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b1a      	cmp	r3, #26
 80043a0:	ddf1      	ble.n	8004386 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <init_mass_converter+0x74>)
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <init_mass_converter+0x78>)
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a0b      	ldr	r2, [pc, #44]	@ (80043e8 <init_mass_converter+0x7c>)
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0b      	ldr	r2, [pc, #44]	@ (80043ec <init_mass_converter+0x80>)
 80043c0:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <init_mass_converter+0x84>)
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	358637bd 	.word	0x358637bd
 80043e4:	3a83126f 	.word	0x3a83126f
 80043e8:	447a0000 	.word	0x447a0000
 80043ec:	3ce83d36 	.word	0x3ce83d36
 80043f0:	3ee83d36 	.word	0x3ee83d36

080043f4 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	220f      	movs	r2, #15
 8004406:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e00a      	b.n	8004424 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b1a      	cmp	r3, #26
 8004428:	ddf1      	ble.n	800440e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <init_angle_converter+0x64>)
 800442e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a08      	ldr	r2, [pc, #32]	@ (800445c <init_angle_converter+0x68>)
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	3c8efa35 	.word	0x3c8efa35
 800445c:	3c80adfd 	.word	0x3c80adfd

08004460 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2203      	movs	r2, #3
 800446c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2214      	movs	r2, #20
 8004472:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00a      	b.n	8004490 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b1a      	cmp	r3, #26
 8004494:	ddf1      	ble.n	800447a <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <init_time_converter+0x7c>)
 800449a:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a10      	ldr	r2, [pc, #64]	@ (80044e0 <init_time_converter+0x80>)
 80044a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <init_time_converter+0x84>)
 80044a6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <init_time_converter+0x88>)
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <init_time_converter+0x8c>)
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <init_time_converter+0x90>)
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	3089705f 	.word	0x3089705f
 80044e0:	358637bd 	.word	0x358637bd
 80044e4:	3a83126f 	.word	0x3a83126f
 80044e8:	42700000 	.word	0x42700000
 80044ec:	45610000 	.word	0x45610000
 80044f0:	47a8c000 	.word	0x47a8c000

080044f4 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2218      	movs	r2, #24
 8004506:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e00a      	b.n	8004524 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b1a      	cmp	r3, #26
 8004528:	ddf1      	ble.n	800450e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <init_temperature_converter+0x50>)
 800452e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a05      	ldr	r2, [pc, #20]	@ (8004548 <init_temperature_converter+0x54>)
 8004534:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	080041f1 	.word	0x080041f1
 8004548:	08004261 	.word	0x08004261

0800454c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff feba 	bl	80042d0 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3378      	adds	r3, #120	@ 0x78
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff03 	bl	800436c <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	33f0      	adds	r3, #240	@ 0xf0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff42 	bl	80043f4 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff72 	bl	8004460 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ffb6 	bl	80044f4 <init_temperature_converter>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b1a      	cmp	r3, #26
 800459e:	d803      	bhi.n	80045a8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	4a05      	ldr	r2, [pc, #20]	@ (80045b8 <UnitConverter_get_unit_type+0x28>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	e000      	b.n	80045aa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000118 	.word	0x20000118

080045bc <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80045c8:	460b      	mov	r3, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffdc 	bl	8004590 <UnitConverter_get_unit_type>
 80045d8:	4603      	mov	r3, r0
 80045da:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80045dc:	79bb      	ldrb	r3, [r7, #6]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ffd6 	bl	8004590 <UnitConverter_get_unit_type>
 80045e4:	4603      	mov	r3, r0
 80045e6:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80045e8:	7efa      	ldrb	r2, [r7, #27]
 80045ea:	7ebb      	ldrb	r3, [r7, #26]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d002      	beq.n	80045f6 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80045f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f4:	e03b      	b.n	800466e <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80045f6:	7efa      	ldrb	r2, [r7, #27]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	4610      	mov	r0, r2
 8004616:	ed97 0a02 	vldr	s0, [r7, #8]
 800461a:	4798      	blx	r3
 800461c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004620:	e00c      	b.n	800463c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	3304      	adds	r3, #4
 800462c:	edd3 7a00 	vldr	s15, [r3]
 8004630:	ed97 7a02 	vldr	s14, [r7, #8]
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004648:	79ba      	ldrb	r2, [r7, #6]
 800464a:	4610      	mov	r0, r2
 800464c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004650:	4798      	blx	r3
 8004652:	eef0 7a40 	vmov.f32	s15, s0
 8004656:	e00a      	b.n	800466e <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004658:	79bb      	ldrb	r3, [r7, #6]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	ed93 7a00 	vldr	s14, [r3]
 8004666:	edd7 6a07 	vldr	s13, [r7, #28]
 800466a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	ed87 0a02 	vstr	s0, [r7, #8]
 8004684:	460b      	mov	r3, r1
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	4613      	mov	r3, r2
 800468a:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff7e 	bl	8004590 <UnitConverter_get_unit_type>
 8004694:	4603      	mov	r3, r0
 8004696:	2b02      	cmp	r3, #2
 8004698:	d111      	bne.n	80046be <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800469a:	79bb      	ldrb	r3, [r7, #6]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff77 	bl	8004590 <UnitConverter_get_unit_type>
 80046a2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d10a      	bne.n	80046be <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80046a8:	79ba      	ldrb	r2, [r7, #6]
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4619      	mov	r1, r3
 80046ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff82 	bl	80045bc <UnitConverter_convert>
 80046b8:	eef0 7a40 	vmov.f32	s15, s0
 80046bc:	e001      	b.n	80046c2 <UnitConverter_angle+0x4a>
    }
    return value;
 80046be:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	@ 0x30
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80046d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2220      	movs	r2, #32
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f00d fc21 	bl	8011f2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80046ea:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80046f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80046f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046fa:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004700:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004702:	2200      	movs	r2, #0
 8004704:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004706:	4b32      	ldr	r3, [pc, #200]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800470c:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800470e:	2201      	movs	r2, #1
 8004710:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004714:	2204      	movs	r2, #4
 8004716:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004718:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800471a:	2200      	movs	r2, #0
 800471c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004720:	2201      	movs	r2, #1
 8004722:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004726:	2202      	movs	r2, #2
 8004728:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800472a:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004732:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004734:	2200      	movs	r2, #0
 8004736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004738:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004746:	4b22      	ldr	r3, [pc, #136]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004748:	2200      	movs	r2, #0
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004754:	481e      	ldr	r0, [pc, #120]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004756:	f005 fe9b 	bl	800a490 <HAL_ADC_Init>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004760:	f003 fec2 	bl	80084e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800476c:	4619      	mov	r1, r3
 800476e:	4818      	ldr	r0, [pc, #96]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004770:	f006 ffba 	bl	800b6e8 <HAL_ADCEx_MultiModeConfigChannel>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800477a:	f003 feb5 	bl	80084e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <MX_ADC1_Init+0x108>)
 8004780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004782:	2306      	movs	r3, #6
 8004784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004786:	2307      	movs	r3, #7
 8004788:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800478a:	237f      	movs	r3, #127	@ 0x7f
 800478c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800478e:	2304      	movs	r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	4619      	mov	r1, r3
 800479a:	480d      	ldr	r0, [pc, #52]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800479c:	f006 f926 	bl	800a9ec <HAL_ADC_ConfigChannel>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80047a6:	f003 fe9f 	bl	80084e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <MX_ADC1_Init+0x10c>)
 80047ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80047ae:	230c      	movs	r3, #12
 80047b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4806      	ldr	r0, [pc, #24]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80047b8:	f006 f918 	bl	800a9ec <HAL_ADC_ConfigChannel>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80047c2:	f003 fe91 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047c6:	bf00      	nop
 80047c8:	3730      	adds	r7, #48	@ 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200001b4 	.word	0x200001b4
 80047d4:	19200040 	.word	0x19200040
 80047d8:	1d500080 	.word	0x1d500080

080047dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b09e      	sub	sp, #120	@ 0x78
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	2254      	movs	r2, #84	@ 0x54
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f00d fb95 	bl	8011f2c <memset>
  if(adcHandle->Instance==ADC1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800480a:	d15e      	bne.n	80048ca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800480c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004810:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004812:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4618      	mov	r0, r3
 800481e:	f008 fc73 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004828:	f003 fe5e 	bl	80084e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800482c:	4b29      	ldr	r3, [pc, #164]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004832:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800483a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004850:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800485c:	2303      	movs	r3, #3
 800485e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004860:	2303      	movs	r3, #3
 8004862:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	2300      	movs	r3, #0
 8004866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004868:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800486c:	4619      	mov	r1, r3
 800486e:	481a      	ldr	r0, [pc, #104]	@ (80048d8 <HAL_ADC_MspInit+0xfc>)
 8004870:	f007 fc84 	bl	800c17c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004876:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <HAL_ADC_MspInit+0x104>)
 8004878:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800487a:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800487c:	2205      	movs	r2, #5
 800487e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004880:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004886:	4b15      	ldr	r3, [pc, #84]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004888:	2200      	movs	r2, #0
 800488a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800489c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048a4:	2220      	movs	r2, #32
 80048a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048ae:	480b      	ldr	r0, [pc, #44]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048b0:	f007 f932 	bl	800bb18 <HAL_DMA_Init>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80048ba:	f003 fe15 	bl	80084e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a06      	ldr	r2, [pc, #24]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80048c4:	4a05      	ldr	r2, [pc, #20]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80048ca:	bf00      	nop
 80048cc:	3778      	adds	r7, #120	@ 0x78
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	48000800 	.word	0x48000800
 80048dc:	20000220 	.word	0x20000220
 80048e0:	40020008 	.word	0x40020008

080048e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <MX_DMA_Init+0x90>)
 80048ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ee:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <MX_DMA_Init+0x90>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80048f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004974 <MX_DMA_Init+0x90>)
 80048f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004902:	4b1c      	ldr	r3, [pc, #112]	@ (8004974 <MX_DMA_Init+0x90>)
 8004904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004906:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <MX_DMA_Init+0x90>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6493      	str	r3, [r2, #72]	@ 0x48
 800490e:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <MX_DMA_Init+0x90>)
 8004910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	200b      	movs	r0, #11
 8004920:	f007 f8c5 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004924:	200b      	movs	r0, #11
 8004926:	f007 f8dc 	bl	800bae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	200c      	movs	r0, #12
 8004930:	f007 f8bd 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004934:	200c      	movs	r0, #12
 8004936:	f007 f8d4 	bl	800bae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	200d      	movs	r0, #13
 8004940:	f007 f8b5 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004944:	200d      	movs	r0, #13
 8004946:	f007 f8cc 	bl	800bae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2100      	movs	r1, #0
 800494e:	200e      	movs	r0, #14
 8004950:	f007 f8ad 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004954:	200e      	movs	r0, #14
 8004956:	f007 f8c4 	bl	800bae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	200f      	movs	r0, #15
 8004960:	f007 f8a5 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004964:	200f      	movs	r0, #15
 8004966:	f007 f8bc 	bl	800bae2 <HAL_NVIC_EnableIRQ>

}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800498e:	4b75      	ldr	r3, [pc, #468]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	4a74      	ldr	r2, [pc, #464]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800499a:	4b72      	ldr	r3, [pc, #456]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	4b69      	ldr	r3, [pc, #420]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c2:	4a68      	ldr	r2, [pc, #416]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ca:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	4a62      	ldr	r2, [pc, #392]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80049ee:	2200      	movs	r2, #0
 80049f0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80049f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049f8:	f007 fd5a 	bl	800c4b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a02:	4859      	ldr	r0, [pc, #356]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a04:	f007 fd54 	bl	800c4b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4852      	ldr	r0, [pc, #328]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a20:	f007 fbac 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004a24:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a40:	f007 fb9c 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004a44:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4844      	ldr	r0, [pc, #272]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004a5c:	f007 fb8e 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004a60:	2306      	movs	r3, #6
 8004a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4619      	mov	r1, r3
 8004a72:	483e      	ldr	r0, [pc, #248]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004a74:	f007 fb82 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4835      	ldr	r0, [pc, #212]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a92:	f007 fb73 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004a96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	482e      	ldr	r0, [pc, #184]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004aae:	f007 fb65 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004abc:	2302      	movs	r3, #2
 8004abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4828      	ldr	r0, [pc, #160]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004ac8:	f007 fb58 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004acc:	2310      	movs	r3, #16
 8004ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ad0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4822      	ldr	r0, [pc, #136]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004ae2:	f007 fb4b 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004ae6:	2340      	movs	r3, #64	@ 0x40
 8004ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af0:	2301      	movs	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	4619      	mov	r1, r3
 8004afa:	481c      	ldr	r0, [pc, #112]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004afc:	f007 fb3e 	bl	800c17c <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	4815      	ldr	r0, [pc, #84]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004b16:	f007 fb31 	bl	800c17c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2006      	movs	r0, #6
 8004b20:	f006 ffc5 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b24:	2006      	movs	r0, #6
 8004b26:	f006 ffdc 	bl	800bae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	200a      	movs	r0, #10
 8004b30:	f006 ffbd 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b34:	200a      	movs	r0, #10
 8004b36:	f006 ffd4 	bl	800bae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2017      	movs	r0, #23
 8004b40:	f006 ffb5 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b44:	2017      	movs	r0, #23
 8004b46:	f006 ffcc 	bl	800bae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2028      	movs	r0, #40	@ 0x28
 8004b50:	f006 ffad 	bl	800baae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b54:	2028      	movs	r0, #40	@ 0x28
 8004b56:	f006 ffc4 	bl	800bae2 <HAL_NVIC_EnableIRQ>

}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	@ 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	48000800 	.word	0x48000800
 8004b6c:	48000400 	.word	0x48000400

08004b70 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b096      	sub	sp, #88	@ 0x58
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b7c:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	f00c fc5d 	bl	801144a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f00d f8cd 	bl	8011d3e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f00d f8c3 	bl	8011d3e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f00d f8b9 	bl	8011d3e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004bd8:	4619      	mov	r1, r3
 8004bda:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bde:	4610      	mov	r0, r2
 8004be0:	f00d f83c 	bl	8011c5c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f00c ffb6 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f00c fbe0 	bl	80113d4 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c26:	461a      	mov	r2, r3
 8004c28:	f00c ff9e 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f00c ff92 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004c56:	461a      	mov	r2, r3
 8004c58:	f00c ff86 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004c6e:	4619      	mov	r1, r3
 8004c70:	eeb0 0a67 	vmov.f32	s0, s15
 8004c74:	4610      	mov	r0, r2
 8004c76:	f00c fff1 	bl	8011c5c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f00c fba1 	bl	80113d4 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f00c ff5f 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f00c ff53 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f00c fb7d 	bl	80113d4 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f00c fbc6 	bl	801147a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004d00:	461a      	mov	r2, r3
 8004d02:	f00c ff31 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f00c ff25 	bl	8011b68 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004d30:	461a      	mov	r2, r3
 8004d32:	f00c ff19 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f00c ffbd 	bl	8011cc8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004d60:	461a      	mov	r2, r3
 8004d62:	f00c ff01 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f00c fb2b 	bl	80113d4 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004d90:	461a      	mov	r2, r3
 8004d92:	f00c fee9 	bl	8011b68 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004d96:	f107 0310 	add.w	r3, r7, #16
 8004d9a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004d9e:	2204      	movs	r2, #4
 8004da0:	2104      	movs	r1, #4
 8004da2:	f00c fb52 	bl	801144a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004db2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004db6:	4619      	mov	r1, r3
 8004db8:	f00c fed6 	bl	8011b68 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004dc2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004dc6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f00c ff7c 	bl	8011cc8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004ddc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004de0:	4618      	mov	r0, r3
 8004de2:	f00c fec1 	bl	8011b68 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004df6:	ee07 3a90 	vmov	s15, r3
}
 8004dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dfe:	3758      	adds	r7, #88	@ 0x58
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b0a4      	sub	sp, #144	@ 0x90
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6178      	str	r0, [r7, #20]
 8004e0c:	6139      	str	r1, [r7, #16]
 8004e0e:	60fa      	str	r2, [r7, #12]
 8004e10:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e14:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004e28:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e4c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004e5e:	4bc6      	ldr	r3, [pc, #792]	@ (8005178 <Kalman_Start+0x374>)
 8004e60:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004e64:	461d      	mov	r5, r3
 8004e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004e7a:	f107 031c 	add.w	r3, r7, #28
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e98:	e028      	b.n	8004eec <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	6979      	ldr	r1, [r7, #20]
 8004ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eac:	3314      	adds	r3, #20
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	3390      	adds	r3, #144	@ 0x90
 8004ebc:	443b      	add	r3, r7
 8004ebe:	3b64      	subs	r3, #100	@ 0x64
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	3398      	adds	r3, #152	@ 0x98
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	ddd2      	ble.n	8004e9a <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004efa:	e03a      	b.n	8004f72 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	3390      	adds	r3, #144	@ 0x90
 8004f04:	443b      	add	r3, r7
 8004f06:	3b74      	subs	r3, #116	@ 0x74
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f28:	3324      	adds	r3, #36	@ 0x24
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3390      	adds	r3, #144	@ 0x90
 8004f38:	443b      	add	r3, r7
 8004f3a:	3b14      	subs	r3, #20
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3390      	adds	r3, #144	@ 0x90
 8004f54:	443b      	add	r3, r7
 8004f56:	3b24      	subs	r3, #36	@ 0x24
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f60:	332c      	adds	r3, #44	@ 0x2c
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	ddc0      	ble.n	8004efc <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2201      	movs	r2, #1
 8004f84:	2104      	movs	r1, #4
 8004f86:	f00c fa60 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3310      	adds	r3, #16
 8004f94:	2204      	movs	r2, #4
 8004f96:	2104      	movs	r1, #4
 8004f98:	f00c fa57 	bl	801144a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3350      	adds	r3, #80	@ 0x50
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	2104      	movs	r1, #4
 8004faa:	f00c fa4e 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3390      	adds	r3, #144	@ 0x90
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2104      	movs	r1, #4
 8004fbc:	f00c fa45 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	33a0      	adds	r3, #160	@ 0xa0
 8004fca:	2204      	movs	r2, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00c fa3c 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	33b0      	adds	r3, #176	@ 0xb0
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2104      	movs	r1, #4
 8004fe0:	f00c fa33 	bl	801144a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	33c8      	adds	r3, #200	@ 0xc8
 8004fee:	2204      	movs	r2, #4
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	f00c fa2a 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005002:	2201      	movs	r2, #1
 8005004:	2104      	movs	r1, #4
 8005006:	f00c fa20 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005016:	2204      	movs	r2, #4
 8005018:	2101      	movs	r1, #1
 800501a:	f00c fa16 	bl	801144a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800502a:	2204      	movs	r2, #4
 800502c:	2104      	movs	r1, #4
 800502e:	f00c fa0c 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800503e:	2204      	movs	r2, #4
 8005040:	2104      	movs	r1, #4
 8005042:	f00c fa02 	bl	801144a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005052:	2201      	movs	r2, #1
 8005054:	2104      	movs	r1, #4
 8005056:	f00c f9f8 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8005066:	2201      	movs	r2, #1
 8005068:	2104      	movs	r1, #4
 800506a:	f00c f9ee 	bl	801144a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800507a:	2204      	movs	r2, #4
 800507c:	2101      	movs	r1, #1
 800507e:	f00c f9e4 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800508e:	2201      	movs	r2, #1
 8005090:	2101      	movs	r1, #1
 8005092:	f00c f9da 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80050a2:	2201      	movs	r2, #1
 80050a4:	2101      	movs	r1, #1
 80050a6:	f00c f9d0 	bl	801144a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80050b6:	2201      	movs	r2, #1
 80050b8:	2104      	movs	r1, #4
 80050ba:	f00c f9c6 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050ca:	2201      	movs	r2, #1
 80050cc:	2104      	movs	r1, #4
 80050ce:	f00c f9bc 	bl	801144a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80050de:	2201      	movs	r2, #1
 80050e0:	2101      	movs	r1, #1
 80050e2:	f00c f9b2 	bl	801144a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80050f2:	2201      	movs	r2, #1
 80050f4:	2101      	movs	r1, #1
 80050f6:	f00c f9a8 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005106:	2201      	movs	r2, #1
 8005108:	2101      	movs	r1, #1
 800510a:	f00c f99e 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800511a:	2201      	movs	r2, #1
 800511c:	2104      	movs	r1, #4
 800511e:	f00c f994 	bl	801144a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800512e:	2201      	movs	r2, #1
 8005130:	2101      	movs	r1, #1
 8005132:	f00c f98a 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005142:	2204      	movs	r2, #4
 8005144:	2104      	movs	r1, #4
 8005146:	f00c f980 	bl	801144a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	33c4      	adds	r3, #196	@ 0xc4
 8005154:	2201      	movs	r2, #1
 8005156:	2101      	movs	r1, #1
 8005158:	f00c f977 	bl	801144a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005168:	2201      	movs	r2, #1
 800516a:	2101      	movs	r1, #1
 800516c:	f00c f96d 	bl	801144a <arm_mat_init_f32>
}
 8005170:	bf00      	nop
 8005172:	3790      	adds	r7, #144	@ 0x90
 8005174:	46bd      	mov	sp, r7
 8005176:	bdb0      	pop	{r4, r5, r7, pc}
 8005178:	08013df8 	.word	0x08013df8

0800517c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005180:	f3bf 8f4f 	dsb	sy
}
 8005184:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <__NVIC_SystemReset+0x24>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800518e:	4904      	ldr	r1, [pc, #16]	@ (80051a0 <__NVIC_SystemReset+0x24>)
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <__NVIC_SystemReset+0x28>)
 8005192:	4313      	orrs	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005196:	f3bf 8f4f 	dsb	sy
}
 800519a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <__NVIC_SystemReset+0x20>
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	05fa0004 	.word	0x05fa0004

080051a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80051ae:	f004 feba 	bl	8009f26 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80051b2:	f000 f88d 	bl	80052d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80051b6:	f7ff fbdf 	bl	8004978 <MX_GPIO_Init>
	MX_DMA_Init();
 80051ba:	f7ff fb93 	bl	80048e4 <MX_DMA_Init>
	MX_ADC1_Init();
 80051be:	f7ff fa85 	bl	80046cc <MX_ADC1_Init>
	MX_TIM2_Init();
 80051c2:	f004 f8c5 	bl	8009350 <MX_TIM2_Init>
	MX_TIM3_Init();
 80051c6:	f004 f911 	bl	80093ec <MX_TIM3_Init>
	MX_TIM4_Init();
 80051ca:	f004 f965 	bl	8009498 <MX_TIM4_Init>
	MX_TIM5_Init();
 80051ce:	f004 f9b9 	bl	8009544 <MX_TIM5_Init>
	MX_TIM8_Init();
 80051d2:	f004 fa0d 	bl	80095f0 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80051d6:	f004 fccf 	bl	8009b78 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80051da:	f004 fac7 	bl	800976c <MX_TIM16_Init>
	MX_TIM1_Init();
 80051de:	f004 f823 	bl	8009228 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80051e2:	f004 fc7f 	bl	8009ae4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80051e6:	f003 f987 	bl	80084f8 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 80051ea:	4b28      	ldr	r3, [pc, #160]	@ (800528c <main+0xe4>)
 80051ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ee:	4a28      	ldr	r2, [pc, #160]	@ (8005290 <main+0xe8>)
 80051f0:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80051f2:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <main+0xec>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a28      	ldr	r2, [pc, #160]	@ (8005298 <main+0xf0>)
 80051f8:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 80051fa:	4b28      	ldr	r3, [pc, #160]	@ (800529c <main+0xf4>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <main+0xf8>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <main+0xfc>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800520c:	4b26      	ldr	r3, [pc, #152]	@ (80052a8 <main+0x100>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005212:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <main+0x104>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <main+0x108>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d032      	beq.n	8005286 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005220:	2101      	movs	r1, #1
 8005222:	4824      	ldr	r0, [pc, #144]	@ (80052b4 <main+0x10c>)
 8005224:	f007 f92c 	bl	800c480 <HAL_GPIO_ReadPin>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	481f      	ldr	r0, [pc, #124]	@ (80052b4 <main+0x10c>)
 8005238:	f007 f922 	bl	800c480 <HAL_GPIO_ReadPin>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <main+0xd8>
 800524e:	79bb      	ldrb	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 8005254:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <main+0x108>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <main+0x110>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <main+0x114>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 8005266:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <main+0x118>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800526c:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <main+0x11c>)
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <main+0x120>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005278:	4b14      	ldr	r3, [pc, #80]	@ (80052cc <main+0x124>)
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e002      	b.n	8005286 <main+0xde>

		} else {
			start_homing_sequence(true);
 8005280:	2001      	movs	r0, #1
 8005282:	f000 f871 	bl	8005368 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 8005286:	f002 fea7 	bl	8007fd8 <handle_b2_button_polling>
 800528a:	e7fc      	b.n	8005286 <main+0xde>
 800528c:	200004cc 	.word	0x200004cc
 8005290:	20000280 	.word	0x20000280
 8005294:	20000528 	.word	0x20000528
 8005298:	200002c4 	.word	0x200002c4
 800529c:	2000036c 	.word	0x2000036c
 80052a0:	20000375 	.word	0x20000375
 80052a4:	20000374 	.word	0x20000374
 80052a8:	20000370 	.word	0x20000370
 80052ac:	200003a8 	.word	0x200003a8
 80052b0:	20000133 	.word	0x20000133
 80052b4:	48000400 	.word	0x48000400
 80052b8:	2000036b 	.word	0x2000036b
 80052bc:	2000036a 	.word	0x2000036a
 80052c0:	20000368 	.word	0x20000368
 80052c4:	20000369 	.word	0x20000369
 80052c8:	20000364 	.word	0x20000364
 80052cc:	20000308 	.word	0x20000308

080052d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b094      	sub	sp, #80	@ 0x50
 80052d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80052d6:	f107 0318 	add.w	r3, r7, #24
 80052da:	2238      	movs	r2, #56	@ 0x38
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f00c fe24 	bl	8011f2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80052f2:	2000      	movs	r0, #0
 80052f4:	f007 f926 	bl	800c544 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80052f8:	2302      	movs	r3, #2
 80052fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005302:	2340      	movs	r3, #64	@ 0x40
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005306:	2302      	movs	r3, #2
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800530a:	2302      	movs	r3, #2
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800530e:	2304      	movs	r3, #4
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005312:	2355      	movs	r3, #85	@ 0x55
 8005314:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005316:	2302      	movs	r3, #2
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800531a:	2302      	movs	r3, #2
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800531e:	2302      	movs	r3, #2
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005322:	f107 0318 	add.w	r3, r7, #24
 8005326:	4618      	mov	r0, r3
 8005328:	f007 f9c0 	bl	800c6ac <HAL_RCC_OscConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <SystemClock_Config+0x66>
		Error_Handler();
 8005332:	f003 f8d9 	bl	80084e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005336:	230f      	movs	r3, #15
 8005338:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800533a:	2303      	movs	r3, #3
 800533c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	2104      	movs	r1, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f007 fcbe 	bl	800ccd0 <HAL_RCC_ClockConfig>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <SystemClock_Config+0x8e>
		Error_Handler();
 800535a:	f003 f8c5 	bl	80084e8 <Error_Handler>
	}
}
 800535e:	bf00      	nop
 8005360:	3750      	adds	r7, #80	@ 0x50
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <start_homing_sequence+0x14c>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 8098 	bne.w	80054ac <start_homing_sequence+0x144>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800537c:	2101      	movs	r1, #1
 800537e:	484e      	ldr	r0, [pc, #312]	@ (80054b8 <start_homing_sequence+0x150>)
 8005380:	f007 f87e 	bl	800c480 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005390:	2140      	movs	r1, #64	@ 0x40
 8005392:	4849      	ldr	r0, [pc, #292]	@ (80054b8 <start_homing_sequence+0x150>)
 8005394:	f007 f874 	bl	800c480 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <start_homing_sequence+0x4a>
 80053aa:	4b44      	ldr	r3, [pc, #272]	@ (80054bc <start_homing_sequence+0x154>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02e      	beq.n	8005410 <start_homing_sequence+0xa8>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <start_homing_sequence+0x82>
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <start_homing_sequence+0x82>
			// Already at home position - no need to home
			homing_active = false;
 80053be:	4b3d      	ldr	r3, [pc, #244]	@ (80054b4 <start_homing_sequence+0x14c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80053c4:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <start_homing_sequence+0x158>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 80053ca:	4b3c      	ldr	r3, [pc, #240]	@ (80054bc <start_homing_sequence+0x154>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 80053d0:	4b3c      	ldr	r3, [pc, #240]	@ (80054c4 <start_homing_sequence+0x15c>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80053d6:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <start_homing_sequence+0x160>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80053dc:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <start_homing_sequence+0x164>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80053e2:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <start_homing_sequence+0x168>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
			return;
 80053e8:	e061      	b.n	80054ae <start_homing_sequence+0x146>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 80053ea:	4b32      	ldr	r3, [pc, #200]	@ (80054b4 <start_homing_sequence+0x14c>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 80053f0:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <start_homing_sequence+0x168>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 80053f6:	4b35      	ldr	r3, [pc, #212]	@ (80054cc <start_homing_sequence+0x164>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
		up_photo = false;
 80053fc:	4b31      	ldr	r3, [pc, #196]	@ (80054c4 <start_homing_sequence+0x15c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <start_homing_sequence+0x160>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <start_homing_sequence+0x158>)
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e04e      	b.n	80054ae <start_homing_sequence+0x146>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <start_homing_sequence+0xe0>
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d015      	beq.n	8005448 <start_homing_sequence+0xe0>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 800541c:	4b25      	ldr	r3, [pc, #148]	@ (80054b4 <start_homing_sequence+0x14c>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005422:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <start_homing_sequence+0x158>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 8005428:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <start_homing_sequence+0x154>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 800542e:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <start_homing_sequence+0x15c>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005434:	4b24      	ldr	r3, [pc, #144]	@ (80054c8 <start_homing_sequence+0x160>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800543a:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <start_homing_sequence+0x164>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <start_homing_sequence+0x168>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
			return;
 8005446:	e032      	b.n	80054ae <start_homing_sequence+0x146>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01b      	beq.n	8005486 <start_homing_sequence+0x11e>
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d015      	beq.n	8005486 <start_homing_sequence+0x11e>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 800545a:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <start_homing_sequence+0x14c>)
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <start_homing_sequence+0x168>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <start_homing_sequence+0x164>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
			up_photo = false;
 800546c:	4b15      	ldr	r3, [pc, #84]	@ (80054c4 <start_homing_sequence+0x15c>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005472:	4b15      	ldr	r3, [pc, #84]	@ (80054c8 <start_homing_sequence+0x160>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <start_homing_sequence+0x158>)
 800547a:	2207      	movs	r2, #7
 800547c:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <start_homing_sequence+0x16c>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e013      	b.n	80054ae <start_homing_sequence+0x146>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <start_homing_sequence+0x14c>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <start_homing_sequence+0x168>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <start_homing_sequence+0x164>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <start_homing_sequence+0x15c>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <start_homing_sequence+0x160>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <start_homing_sequence+0x158>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e000      	b.n	80054ae <start_homing_sequence+0x146>
		return;
 80054ac:	bf00      	nop
		}
	}
}
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000036b 	.word	0x2000036b
 80054b8:	48000400 	.word	0x48000400
 80054bc:	20000133 	.word	0x20000133
 80054c0:	2000036a 	.word	0x2000036a
 80054c4:	20000368 	.word	0x20000368
 80054c8:	20000369 	.word	0x20000369
 80054cc:	20000364 	.word	0x20000364
 80054d0:	20000308 	.word	0x20000308
 80054d4:	20000376 	.word	0x20000376

080054d8 <update_homing_sequence>:

void update_homing_sequence(void) {
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ed2d 8b02 	vpush	{d8}
 80054e0:	b095      	sub	sp, #84	@ 0x54
 80054e2:	af00      	add	r7, sp, #0
	if (!homing_active)
 80054e4:	4b98      	ldr	r3, [pc, #608]	@ (8005748 <update_homing_sequence+0x270>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f083 0301 	eor.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 85b4 	bne.w	800605c <update_homing_sequence+0xb84>
		return;

	switch (homing_state) {
 80054f4:	4b95      	ldr	r3, [pc, #596]	@ (800574c <update_homing_sequence+0x274>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	2b0a      	cmp	r3, #10
 80054fc:	f200 85b0 	bhi.w	8006060 <update_homing_sequence+0xb88>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <update_homing_sequence+0x30>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005535 	.word	0x08005535
 800550c:	08005559 	.word	0x08005559
 8005510:	080055c9 	.word	0x080055c9
 8005514:	08005717 	.word	0x08005717
 8005518:	0800578d 	.word	0x0800578d
 800551c:	080058d3 	.word	0x080058d3
 8005520:	08005999 	.word	0x08005999
 8005524:	08005def 	.word	0x08005def
 8005528:	08005e55 	.word	0x08005e55
 800552c:	0800602d 	.word	0x0800602d
 8005530:	08006059 	.word	0x08006059
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005534:	f003 fc64 	bl	8008e00 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005538:	4b85      	ldr	r3, [pc, #532]	@ (8005750 <update_homing_sequence+0x278>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005540:	4b84      	ldr	r3, [pc, #528]	@ (8005754 <update_homing_sequence+0x27c>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005548:	4b83      	ldr	r3, [pc, #524]	@ (8005758 <update_homing_sequence+0x280>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800554e:	4b7f      	ldr	r3, [pc, #508]	@ (800574c <update_homing_sequence+0x274>)
 8005550:	2202      	movs	r2, #2
 8005552:	701a      	strb	r2, [r3, #0]
		break;
 8005554:	f000 bd97 	b.w	8006086 <update_homing_sequence+0xbae>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005558:	4b7d      	ldr	r3, [pc, #500]	@ (8005750 <update_homing_sequence+0x278>)
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005560:	4b7c      	ldr	r3, [pc, #496]	@ (8005754 <update_homing_sequence+0x27c>)
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005568:	4b7b      	ldr	r3, [pc, #492]	@ (8005758 <update_homing_sequence+0x280>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a7a      	ldr	r2, [pc, #488]	@ (8005758 <update_homing_sequence+0x280>)
 8005570:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005572:	4b79      	ldr	r3, [pc, #484]	@ (8005758 <update_homing_sequence+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800557a:	f0c0 8573 	bcc.w	8006064 <update_homing_sequence+0xb8c>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 800557e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005582:	4876      	ldr	r0, [pc, #472]	@ (800575c <update_homing_sequence+0x284>)
 8005584:	f006 ff7c 	bl	800c480 <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2da      	uxtb	r2, r3
 8005594:	4b72      	ldr	r3, [pc, #456]	@ (8005760 <update_homing_sequence+0x288>)
 8005596:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005598:	4b71      	ldr	r3, [pc, #452]	@ (8005760 <update_homing_sequence+0x288>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <update_homing_sequence+0xe6>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80055a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005758 <update_homing_sequence+0x280>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80055a8:	4b68      	ldr	r3, [pc, #416]	@ (800574c <update_homing_sequence+0x274>)
 80055aa:	2204      	movs	r2, #4
 80055ac:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 80055ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <update_homing_sequence+0x288>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 80055b4:	4b6b      	ldr	r3, [pc, #428]	@ (8005764 <update_homing_sequence+0x28c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 80055ba:	f000 bd53 	b.w	8006064 <update_homing_sequence+0xb8c>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 80055be:	4b63      	ldr	r3, [pc, #396]	@ (800574c <update_homing_sequence+0x274>)
 80055c0:	2203      	movs	r2, #3
 80055c2:	701a      	strb	r2, [r3, #0]
		break;
 80055c4:	f000 bd4e 	b.w	8006064 <update_homing_sequence+0xb8c>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80055c8:	4b61      	ldr	r3, [pc, #388]	@ (8005750 <update_homing_sequence+0x278>)
 80055ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80055ce:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005768 <update_homing_sequence+0x290>
 80055d2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 80055d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005750 <update_homing_sequence+0x278>)
 80055d8:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80055dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005750 <update_homing_sequence+0x278>)
 80055de:	edd3 7a06 	vldr	s15, [r3, #24]
 80055e2:	eeb0 0a67 	vmov.f32	s0, s15
 80055e6:	4861      	ldr	r0, [pc, #388]	@ (800576c <update_homing_sequence+0x294>)
 80055e8:	f7fb fe16 	bl	8001218 <PID_CONTROLLER_Compute>
 80055ec:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80055f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005770 <update_homing_sequence+0x298>)
 80055f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	f7fb fa63 	bl	8000ac4 <__aeabi_d2iz>
 80055fe:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005600:	4b5b      	ldr	r3, [pc, #364]	@ (8005770 <update_homing_sequence+0x298>)
 8005602:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005606:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005608:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 800560e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005612:	f7fb fa57 	bl	8000ac4 <__aeabi_d2iz>
 8005616:	4603      	mov	r3, r0
 8005618:	4619      	mov	r1, r3
 800561a:	4620      	mov	r0, r4
 800561c:	eeb0 0a48 	vmov.f32	s0, s16
 8005620:	f7fb fd98 	bl	8001154 <PWM_Satuation>
 8005624:	ee07 0a90 	vmov	s15, r0
 8005628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800562c:	4b48      	ldr	r3, [pc, #288]	@ (8005750 <update_homing_sequence+0x278>)
 800562e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005632:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005636:	484f      	ldr	r0, [pc, #316]	@ (8005774 <update_homing_sequence+0x29c>)
 8005638:	f7fc f92c 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800563c:	eef0 7a40 	vmov.f32	s15, s0
 8005640:	4b43      	ldr	r3, [pc, #268]	@ (8005750 <update_homing_sequence+0x278>)
 8005642:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005646:	4b4c      	ldr	r3, [pc, #304]	@ (8005778 <update_homing_sequence+0x2a0>)
 8005648:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800564c:	4b4b      	ldr	r3, [pc, #300]	@ (800577c <update_homing_sequence+0x2a4>)
 800564e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005652:	ed9f 6a4b 	vldr	s12, [pc, #300]	@ 8005780 <update_homing_sequence+0x2a8>
 8005656:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800565a:	eeb0 1a66 	vmov.f32	s2, s13
 800565e:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8005784 <update_homing_sequence+0x2ac>
 8005662:	eeb0 0a47 	vmov.f32	s0, s14
 8005666:	4848      	ldr	r0, [pc, #288]	@ (8005788 <update_homing_sequence+0x2b0>)
 8005668:	f7fc f9a7 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 800566c:	eef0 7a40 	vmov.f32	s15, s0
 8005670:	4b37      	ldr	r3, [pc, #220]	@ (8005750 <update_homing_sequence+0x278>)
 8005672:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005676:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <update_homing_sequence+0x278>)
 8005678:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800567c:	4b34      	ldr	r3, [pc, #208]	@ (8005750 <update_homing_sequence+0x278>)
 800567e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <update_homing_sequence+0x278>)
 8005684:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005690:	4b2f      	ldr	r3, [pc, #188]	@ (8005750 <update_homing_sequence+0x278>)
 8005692:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005696:	4b2e      	ldr	r3, [pc, #184]	@ (8005750 <update_homing_sequence+0x278>)
 8005698:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 800569c:	4b34      	ldr	r3, [pc, #208]	@ (8005770 <update_homing_sequence+0x298>)
 800569e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fb fa0d 	bl	8000ac4 <__aeabi_d2iz>
 80056aa:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80056ac:	4b30      	ldr	r3, [pc, #192]	@ (8005770 <update_homing_sequence+0x298>)
 80056ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80056b2:	623a      	str	r2, [r7, #32]
 80056b4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056be:	f7fb fa01 	bl	8000ac4 <__aeabi_d2iz>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4619      	mov	r1, r3
 80056c6:	4620      	mov	r0, r4
 80056c8:	eeb0 0a48 	vmov.f32	s0, s16
 80056cc:	f7fb fd42 	bl	8001154 <PWM_Satuation>
 80056d0:	ee07 0a90 	vmov	s15, r0
 80056d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005750 <update_homing_sequence+0x278>)
 80056da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 80056de:	4b20      	ldr	r3, [pc, #128]	@ (8005760 <update_homing_sequence+0x288>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 84bf 	beq.w	8006068 <update_homing_sequence+0xb90>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80056ea:	4b19      	ldr	r3, [pc, #100]	@ (8005750 <update_homing_sequence+0x278>)
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80056f2:	4b18      	ldr	r3, [pc, #96]	@ (8005754 <update_homing_sequence+0x27c>)
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80056fa:	4b17      	ldr	r3, [pc, #92]	@ (8005758 <update_homing_sequence+0x280>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005700:	4b12      	ldr	r3, [pc, #72]	@ (800574c <update_homing_sequence+0x274>)
 8005702:	2204      	movs	r2, #4
 8005704:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005706:	4b16      	ldr	r3, [pc, #88]	@ (8005760 <update_homing_sequence+0x288>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 800570c:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <update_homing_sequence+0x28c>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005712:	f000 bca9 	b.w	8006068 <update_homing_sequence+0xb90>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005716:	4b0e      	ldr	r3, [pc, #56]	@ (8005750 <update_homing_sequence+0x278>)
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <update_homing_sequence+0x27c>)
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005726:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <update_homing_sequence+0x280>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a0a      	ldr	r2, [pc, #40]	@ (8005758 <update_homing_sequence+0x280>)
 800572e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005730:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <update_homing_sequence+0x280>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005738:	f0c0 8498 	bcc.w	800606c <update_homing_sequence+0xb94>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 800573c:	4b03      	ldr	r3, [pc, #12]	@ (800574c <update_homing_sequence+0x274>)
 800573e:	2205      	movs	r2, #5
 8005740:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005742:	f000 bc93 	b.w	800606c <update_homing_sequence+0xb94>
 8005746:	bf00      	nop
 8005748:	2000036b 	.word	0x2000036b
 800574c:	2000036a 	.word	0x2000036a
 8005750:	20000280 	.word	0x20000280
 8005754:	200002c4 	.word	0x200002c4
 8005758:	20000360 	.word	0x20000360
 800575c:	48000400 	.word	0x48000400
 8005760:	20000369 	.word	0x20000369
 8005764:	20000368 	.word	0x20000368
 8005768:	437a0000 	.word	0x437a0000
 800576c:	200005ac 	.word	0x200005ac
 8005770:	20000080 	.word	0x20000080
 8005774:	2000064c 	.word	0x2000064c
 8005778:	20000528 	.word	0x20000528
 800577c:	200004cc 	.word	0x200004cc
 8005780:	447a0000 	.word	0x447a0000
 8005784:	00000000 	.word	0x00000000
 8005788:	20000650 	.word	0x20000650

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 800578c:	4b70      	ldr	r3, [pc, #448]	@ (8005950 <update_homing_sequence+0x478>)
 800578e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005792:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8005954 <update_homing_sequence+0x47c>
 8005796:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 800579a:	4b6d      	ldr	r3, [pc, #436]	@ (8005950 <update_homing_sequence+0x478>)
 800579c:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80057a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <update_homing_sequence+0x478>)
 80057a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80057a6:	eeb0 0a67 	vmov.f32	s0, s15
 80057aa:	486b      	ldr	r0, [pc, #428]	@ (8005958 <update_homing_sequence+0x480>)
 80057ac:	f7fb fd34 	bl	8001218 <PID_CONTROLLER_Compute>
 80057b0:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80057b4:	4b69      	ldr	r3, [pc, #420]	@ (800595c <update_homing_sequence+0x484>)
 80057b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	f7fb f981 	bl	8000ac4 <__aeabi_d2iz>
 80057c2:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80057c4:	4b65      	ldr	r3, [pc, #404]	@ (800595c <update_homing_sequence+0x484>)
 80057c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057ca:	61ba      	str	r2, [r7, #24]
 80057cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80057d0:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 80057d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057d6:	f7fb f975 	bl	8000ac4 <__aeabi_d2iz>
 80057da:	4603      	mov	r3, r0
 80057dc:	4619      	mov	r1, r3
 80057de:	4620      	mov	r0, r4
 80057e0:	eeb0 0a48 	vmov.f32	s0, s16
 80057e4:	f7fb fcb6 	bl	8001154 <PWM_Satuation>
 80057e8:	ee07 0a90 	vmov	s15, r0
 80057ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f0:	4b57      	ldr	r3, [pc, #348]	@ (8005950 <update_homing_sequence+0x478>)
 80057f2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80057f6:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 80057fa:	4859      	ldr	r0, [pc, #356]	@ (8005960 <update_homing_sequence+0x488>)
 80057fc:	f7fc f84a 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8005800:	eef0 7a40 	vmov.f32	s15, s0
 8005804:	4b52      	ldr	r3, [pc, #328]	@ (8005950 <update_homing_sequence+0x478>)
 8005806:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800580a:	4b56      	ldr	r3, [pc, #344]	@ (8005964 <update_homing_sequence+0x48c>)
 800580c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005810:	4b55      	ldr	r3, [pc, #340]	@ (8005968 <update_homing_sequence+0x490>)
 8005812:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005816:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800596c <update_homing_sequence+0x494>
 800581a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800581e:	eeb0 1a66 	vmov.f32	s2, s13
 8005822:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8005970 <update_homing_sequence+0x498>
 8005826:	eeb0 0a47 	vmov.f32	s0, s14
 800582a:	4852      	ldr	r0, [pc, #328]	@ (8005974 <update_homing_sequence+0x49c>)
 800582c:	f7fc f8c5 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8005830:	eef0 7a40 	vmov.f32	s15, s0
 8005834:	4b46      	ldr	r3, [pc, #280]	@ (8005950 <update_homing_sequence+0x478>)
 8005836:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 800583a:	4b45      	ldr	r3, [pc, #276]	@ (8005950 <update_homing_sequence+0x478>)
 800583c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005840:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <update_homing_sequence+0x478>)
 8005842:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005846:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <update_homing_sequence+0x478>)
 8005848:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800584c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005854:	4b3e      	ldr	r3, [pc, #248]	@ (8005950 <update_homing_sequence+0x478>)
 8005856:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800585a:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <update_homing_sequence+0x478>)
 800585c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005860:	4b3e      	ldr	r3, [pc, #248]	@ (800595c <update_homing_sequence+0x484>)
 8005862:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	f7fb f92b 	bl	8000ac4 <__aeabi_d2iz>
 800586e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005870:	4b3a      	ldr	r3, [pc, #232]	@ (800595c <update_homing_sequence+0x484>)
 8005872:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005876:	613a      	str	r2, [r7, #16]
 8005878:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800587e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005882:	f7fb f91f 	bl	8000ac4 <__aeabi_d2iz>
 8005886:	4603      	mov	r3, r0
 8005888:	4619      	mov	r1, r3
 800588a:	4620      	mov	r0, r4
 800588c:	eeb0 0a48 	vmov.f32	s0, s16
 8005890:	f7fb fc60 	bl	8001154 <PWM_Satuation>
 8005894:	ee07 0a90 	vmov	s15, r0
 8005898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800589c:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <update_homing_sequence+0x478>)
 800589e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80058a2:	4b35      	ldr	r3, [pc, #212]	@ (8005978 <update_homing_sequence+0x4a0>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 83e1 	beq.w	8006070 <update_homing_sequence+0xb98>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <update_homing_sequence+0x478>)
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <update_homing_sequence+0x4a4>)
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80058be:	4b30      	ldr	r3, [pc, #192]	@ (8005980 <update_homing_sequence+0x4a8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 80058c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005984 <update_homing_sequence+0x4ac>)
 80058c6:	2206      	movs	r2, #6
 80058c8:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 80058ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <update_homing_sequence+0x4a0>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80058d0:	e3ce      	b.n	8006070 <update_homing_sequence+0xb98>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 80058d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005950 <update_homing_sequence+0x478>)
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80058da:	4b28      	ldr	r3, [pc, #160]	@ (800597c <update_homing_sequence+0x4a4>)
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80058e2:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <update_homing_sequence+0x4a8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	4a25      	ldr	r2, [pc, #148]	@ (8005980 <update_homing_sequence+0x4a8>)
 80058ea:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80058ec:	4b24      	ldr	r3, [pc, #144]	@ (8005980 <update_homing_sequence+0x4a8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80058f4:	f0c0 83be 	bcc.w	8006074 <update_homing_sequence+0xb9c>
			if (first_startup) {
 80058f8:	4b23      	ldr	r3, [pc, #140]	@ (8005988 <update_homing_sequence+0x4b0>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01f      	beq.n	8005940 <update_homing_sequence+0x468>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005900:	2140      	movs	r1, #64	@ 0x40
 8005902:	4822      	ldr	r0, [pc, #136]	@ (800598c <update_homing_sequence+0x4b4>)
 8005904:	f006 fdbc 	bl	800c480 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf14      	ite	ne
 800590e:	2301      	movne	r3, #1
 8005910:	2300      	moveq	r3, #0
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

				if (prox_detected) {
 8005916:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <update_homing_sequence+0x45a>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <update_homing_sequence+0x4a8>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005924:	4b17      	ldr	r3, [pc, #92]	@ (8005984 <update_homing_sequence+0x4ac>)
 8005926:	220a      	movs	r2, #10
 8005928:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 800592a:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <update_homing_sequence+0x4b8>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005930:	e3a0      	b.n	8006074 <update_homing_sequence+0xb9c>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <update_homing_sequence+0x4ac>)
 8005934:	2209      	movs	r2, #9
 8005936:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005938:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <update_homing_sequence+0x4b8>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
		break;
 800593e:	e399      	b.n	8006074 <update_homing_sequence+0xb9c>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <update_homing_sequence+0x4ac>)
 8005942:	2207      	movs	r2, #7
 8005944:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005946:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <update_homing_sequence+0x4bc>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
		break;
 800594c:	e392      	b.n	8006074 <update_homing_sequence+0xb9c>
 800594e:	bf00      	nop
 8005950:	20000280 	.word	0x20000280
 8005954:	c37a0000 	.word	0xc37a0000
 8005958:	200005ac 	.word	0x200005ac
 800595c:	20000080 	.word	0x20000080
 8005960:	2000064c 	.word	0x2000064c
 8005964:	20000528 	.word	0x20000528
 8005968:	200004cc 	.word	0x200004cc
 800596c:	447a0000 	.word	0x447a0000
 8005970:	00000000 	.word	0x00000000
 8005974:	20000650 	.word	0x20000650
 8005978:	20000368 	.word	0x20000368
 800597c:	200002c4 	.word	0x200002c4
 8005980:	20000360 	.word	0x20000360
 8005984:	2000036a 	.word	0x2000036a
 8005988:	20000133 	.word	0x20000133
 800598c:	48000400 	.word	0x48000400
 8005990:	20000364 	.word	0x20000364
 8005994:	20000376 	.word	0x20000376

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005998:	4bc6      	ldr	r3, [pc, #792]	@ (8005cb4 <update_homing_sequence+0x7dc>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f083 0301 	eor.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d06c      	beq.n	8005a80 <update_homing_sequence+0x5a8>
			// Clear/initialize the static structures
			memset(&revZeroEva, 0, sizeof(Trapezoidal_EvaStruct));
 80059a6:	2214      	movs	r2, #20
 80059a8:	2100      	movs	r1, #0
 80059aa:	48c3      	ldr	r0, [pc, #780]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 80059ac:	f00c fabe 	bl	8011f2c <memset>
			memset(&revZeroGen, 0, sizeof(Trapezoidal_GenStruct));
 80059b0:	2214      	movs	r2, #20
 80059b2:	2100      	movs	r1, #0
 80059b4:	48c1      	ldr	r0, [pc, #772]	@ (8005cbc <update_homing_sequence+0x7e4>)
 80059b6:	f00c fab9 	bl	8011f2c <memset>

			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 80059ba:	4bc1      	ldr	r3, [pc, #772]	@ (8005cc0 <update_homing_sequence+0x7e8>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
			float normalized_current = normalize_angle(current_rev_pos);
 80059c0:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80059c4:	f000 fb6e 	bl	80060a4 <normalize_angle>
 80059c8:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
			float current_deg = normalized_current * 180.0f / PI;
 80059cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80059d0:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8005cc4 <update_homing_sequence+0x7ec>
 80059d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059d8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8005cc8 <update_homing_sequence+0x7f0>
 80059dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059e0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float movement_deg = calculate_movement_deg(current_deg,
 80059ea:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 80059ee:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80059f2:	f000 fb7d 	bl	80060f0 <calculate_movement_deg>
 80059f6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 80059fa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80059fe:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8005cc8 <update_homing_sequence+0x7f0>
 8005a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a06:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8005cc4 <update_homing_sequence+0x7ec>
 8005a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a0e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 8005a12:	4aae      	ldr	r2, [pc, #696]	@ (8005ccc <update_homing_sequence+0x7f4>)
 8005a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a16:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005a18:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005a1c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a24:	4baa      	ldr	r3, [pc, #680]	@ (8005cd0 <update_homing_sequence+0x7f8>)
 8005a26:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a2a:	4ba8      	ldr	r3, [pc, #672]	@ (8005ccc <update_homing_sequence+0x7f4>)
 8005a2c:	ed93 8a00 	vldr	s16, [r3]
 8005a30:	4ba7      	ldr	r3, [pc, #668]	@ (8005cd0 <update_homing_sequence+0x7f8>)
 8005a32:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005a36:	4ba7      	ldr	r3, [pc, #668]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005a38:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f7fb f888 	bl	8000b54 <__aeabi_d2f>
 8005a44:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005a46:	4ba3      	ldr	r3, [pc, #652]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005a48:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f7fb f880 	bl	8000b54 <__aeabi_d2f>
 8005a54:	4603      	mov	r3, r0
 8005a56:	ee01 3a90 	vmov	s3, r3
 8005a5a:	ee01 4a10 	vmov	s2, r4
 8005a5e:	eef0 0a68 	vmov.f32	s1, s17
 8005a62:	eeb0 0a48 	vmov.f32	s0, s16
 8005a66:	4895      	ldr	r0, [pc, #596]	@ (8005cbc <update_homing_sequence+0x7e4>)
 8005a68:	f7fe f9ac 	bl	8003dc4 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 8005a6c:	4b92      	ldr	r3, [pc, #584]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 8005a74:	4b90      	ldr	r3, [pc, #576]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 8005a7a:	4b8e      	ldr	r3, [pc, #568]	@ (8005cb4 <update_homing_sequence+0x7dc>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 8005a80:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005a82:	7c1b      	ldrb	r3, [r3, #16]
 8005a84:	f083 0301 	eor.w	r3, r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 82f4 	beq.w	8006078 <update_homing_sequence+0xba0>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005a90:	4b8e      	ldr	r3, [pc, #568]	@ (8005ccc <update_homing_sequence+0x7f4>)
 8005a92:	ed93 8a00 	vldr	s16, [r3]
 8005a96:	4b8e      	ldr	r3, [pc, #568]	@ (8005cd0 <update_homing_sequence+0x7f8>)
 8005a98:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005a9e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fb f855 	bl	8000b54 <__aeabi_d2f>
 8005aaa:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005aac:	4b89      	ldr	r3, [pc, #548]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005aae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f7fb f84d 	bl	8000b54 <__aeabi_d2f>
 8005aba:	4603      	mov	r3, r0
 8005abc:	ee01 3a90 	vmov	s3, r3
 8005ac0:	ee01 4a10 	vmov	s2, r4
 8005ac4:	eef0 0a68 	vmov.f32	s1, s17
 8005ac8:	eeb0 0a48 	vmov.f32	s0, s16
 8005acc:	497a      	ldr	r1, [pc, #488]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005ace:	487b      	ldr	r0, [pc, #492]	@ (8005cbc <update_homing_sequence+0x7e4>)
 8005ad0:	f7fe fa3a 	bl	8003f48 <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 8005ad4:	4b78      	ldr	r3, [pc, #480]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005ada:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 8005adc:	4b76      	ldr	r3, [pc, #472]	@ (8005cb8 <update_homing_sequence+0x7e0>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005ae2:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 8005ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005ae6:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 8005aea:	4b75      	ldr	r3, [pc, #468]	@ (8005cc0 <update_homing_sequence+0x7e8>)
 8005aec:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005af0:	eeb0 0a67 	vmov.f32	s0, s15
 8005af4:	f000 fad6 	bl	80060a4 <normalize_angle>
 8005af8:	eef0 7a40 	vmov.f32	s15, s0
 8005afc:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 8005b00:	4b75      	ldr	r3, [pc, #468]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b02:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 8005b06:	4b74      	ldr	r3, [pc, #464]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b08:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b0c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8005cc8 <update_homing_sequence+0x7f0>
 8005b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	dd09      	ble.n	8005b2e <update_homing_sequence+0x656>
				revolute_axis.pos_error -= 2.0f * PI;
 8005b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b20:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8005cdc <update_homing_sequence+0x804>
 8005b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b28:	4b6b      	ldr	r3, [pc, #428]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b2a:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b30:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b34:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8005ce0 <update_homing_sequence+0x808>
 8005b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	d509      	bpl.n	8005b56 <update_homing_sequence+0x67e>
				revolute_axis.pos_error += 2.0f * PI;
 8005b42:	4b65      	ldr	r3, [pc, #404]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b44:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b48:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005cdc <update_homing_sequence+0x804>
 8005b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b50:	4b61      	ldr	r3, [pc, #388]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b52:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005b56:	4b60      	ldr	r3, [pc, #384]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005b58:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b60:	4860      	ldr	r0, [pc, #384]	@ (8005ce4 <update_homing_sequence+0x80c>)
 8005b62:	f7fb fb59 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b66:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 8005b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005b6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fa ffa6 	bl	8000ac4 <__aeabi_d2iz>
 8005b78:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 8005b7a:	4b56      	ldr	r3, [pc, #344]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005b7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005b80:	60ba      	str	r2, [r7, #8]
 8005b82:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b86:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8005b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b8c:	f7fa ff9a 	bl	8000ac4 <__aeabi_d2iz>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4619      	mov	r1, r3
 8005b94:	4620      	mov	r0, r4
 8005b96:	eeb0 0a48 	vmov.f32	s0, s16
 8005b9a:	f7fb fadb 	bl	8001154 <PWM_Satuation>
 8005b9e:	ee07 0a90 	vmov	s15, r0
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005ba8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 8005bac:	4b4a      	ldr	r3, [pc, #296]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005bae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8005bb2:	4b49      	ldr	r3, [pc, #292]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bbc:	4b46      	ldr	r3, [pc, #280]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8005bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 8005bc6:	4b44      	ldr	r3, [pc, #272]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005bc8:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 8005bcc:	4b42      	ldr	r3, [pc, #264]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005bce:	edd3 7a06 	vldr	s15, [r3, #24]
 8005bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd6:	4844      	ldr	r0, [pc, #272]	@ (8005ce8 <update_homing_sequence+0x810>)
 8005bd8:	f7fb fb1e 	bl	8001218 <PID_CONTROLLER_Compute>
 8005bdc:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 8005be0:	4b3c      	ldr	r3, [pc, #240]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005be2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fa ff6b 	bl	8000ac4 <__aeabi_d2iz>
 8005bee:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005bf0:	4b38      	ldr	r3, [pc, #224]	@ (8005cd4 <update_homing_sequence+0x7fc>)
 8005bf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bf6:	4615      	mov	r5, r2
 8005bf8:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
			revolute_axis.command_pos = PWM_Satuation(
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	4631      	mov	r1, r6
 8005c00:	f7fa ff60 	bl	8000ac4 <__aeabi_d2iz>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4619      	mov	r1, r3
 8005c08:	4620      	mov	r0, r4
 8005c0a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c0e:	f7fb faa1 	bl	8001154 <PWM_Satuation>
 8005c12:	ee07 0a90 	vmov	s15, r0
 8005c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c1c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005c20:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c22:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c26:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2a:	4830      	ldr	r0, [pc, #192]	@ (8005cec <update_homing_sequence+0x814>)
 8005c2c:	f7fb fcb4 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005c30:	eef0 7a40 	vmov.f32	s15, s0
 8005c34:	4b28      	ldr	r3, [pc, #160]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c36:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005c3a:	4b21      	ldr	r3, [pc, #132]	@ (8005cc0 <update_homing_sequence+0x7e8>)
 8005c3c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005c40:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf0 <update_homing_sequence+0x818>)
 8005c42:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005c46:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8005cf4 <update_homing_sequence+0x81c>
 8005c4a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005c4e:	eef0 0a66 	vmov.f32	s1, s13
 8005c52:	eeb0 0a47 	vmov.f32	s0, s14
 8005c56:	4828      	ldr	r0, [pc, #160]	@ (8005cf8 <update_homing_sequence+0x820>)
 8005c58:	f7fb fd31 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8005c5c:	eef0 7a40 	vmov.f32	s15, s0
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c62:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		    static float ffd_filtered = 0.0f;
		    static float dfd_filtered = 0.0f;

		    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8005c66:	4b25      	ldr	r3, [pc, #148]	@ (8005cfc <update_homing_sequence+0x824>)
 8005c68:	edd3 7a00 	vldr	s15, [r3]
 8005c6c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005d00 <update_homing_sequence+0x828>
 8005c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c74:	4b18      	ldr	r3, [pc, #96]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c76:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005c7a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8005d04 <update_homing_sequence+0x82c>
 8005c7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c86:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <update_homing_sequence+0x824>)
 8005c88:	edc3 7a00 	vstr	s15, [r3]
		    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <update_homing_sequence+0x830>)
 8005c8e:	edd3 7a00 	vldr	s15, [r3]
 8005c92:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005d00 <update_homing_sequence+0x828>
 8005c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd8 <update_homing_sequence+0x800>)
 8005c9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005ca0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005d04 <update_homing_sequence+0x82c>
 8005ca4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cac:	4b16      	ldr	r3, [pc, #88]	@ (8005d08 <update_homing_sequence+0x830>)
 8005cae:	edc3 7a00 	vstr	s15, [r3]
 8005cb2:	e02b      	b.n	8005d0c <update_homing_sequence+0x834>
 8005cb4:	20000376 	.word	0x20000376
 8005cb8:	20000378 	.word	0x20000378
 8005cbc:	2000038c 	.word	0x2000038c
 8005cc0:	20000528 	.word	0x20000528
 8005cc4:	43340000 	.word	0x43340000
 8005cc8:	40490fdb 	.word	0x40490fdb
 8005ccc:	200003a0 	.word	0x200003a0
 8005cd0:	200003a4 	.word	0x200003a4
 8005cd4:	20000000 	.word	0x20000000
 8005cd8:	200002c4 	.word	0x200002c4
 8005cdc:	40c90fdb 	.word	0x40c90fdb
 8005ce0:	c0490fdb 	.word	0xc0490fdb
 8005ce4:	200005d4 	.word	0x200005d4
 8005ce8:	200005fc 	.word	0x200005fc
 8005cec:	20000658 	.word	0x20000658
 8005cf0:	200004cc 	.word	0x200004cc
 8005cf4:	447a0000 	.word	0x447a0000
 8005cf8:	2000065c 	.word	0x2000065c
 8005cfc:	2000041c 	.word	0x2000041c
 8005d00:	3f4ccccd 	.word	0x3f4ccccd
 8005d04:	3e4ccccd 	.word	0x3e4ccccd
 8005d08:	20000420 	.word	0x20000420

		    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8005d0c:	4bb6      	ldr	r3, [pc, #728]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fbe5 	bl	80004e0 <__aeabi_f2d>
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
 8005d1a:	4bb4      	ldr	r3, [pc, #720]	@ (8005fec <update_homing_sequence+0xb14>)
 8005d1c:	ed93 7a00 	vldr	s14, [r3]
 8005d20:	4bb3      	ldr	r3, [pc, #716]	@ (8005ff0 <update_homing_sequence+0xb18>)
 8005d22:	edd3 7a00 	vldr	s15, [r3]
 8005d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2a:	ee17 0a90 	vmov	r0, s15
 8005d2e:	f7fa fbd7 	bl	80004e0 <__aeabi_f2d>
 8005d32:	a3ab      	add	r3, pc, #684	@ (adr r3, 8005fe0 <update_homing_sequence+0xb08>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fc2a 	bl	8000590 <__aeabi_dmul>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7fa fa6e 	bl	8000224 <__adddf3>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f7fa ff00 	bl	8000b54 <__aeabi_d2f>
 8005d54:	4603      	mov	r3, r0
 8005d56:	4aa4      	ldr	r2, [pc, #656]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005d58:	6253      	str	r3, [r2, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005d5a:	4ba3      	ldr	r3, [pc, #652]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005d5c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8005d60:	4ba4      	ldr	r3, [pc, #656]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005d62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f7fa feab 	bl	8000ac4 <__aeabi_d2iz>
 8005d6e:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005d70:	4ba0      	ldr	r3, [pc, #640]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005d72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d76:	603a      	str	r2, [r7, #0]
 8005d78:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d7c:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d82:	f7fa fe9f 	bl	8000ac4 <__aeabi_d2iz>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005d90:	f7fb f9e0 	bl	8001154 <PWM_Satuation>
 8005d94:	ee07 0a90 	vmov	s15, r0
 8005d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9c:	4b92      	ldr	r3, [pc, #584]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005d9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 8005da2:	4b95      	ldr	r3, [pc, #596]	@ (8005ff8 <update_homing_sequence+0xb20>)
 8005da4:	7c1b      	ldrb	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8166 	beq.w	8006078 <update_homing_sequence+0xba0>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 8005dac:	4b8e      	ldr	r3, [pc, #568]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 8005db4:	4b91      	ldr	r3, [pc, #580]	@ (8005ffc <update_homing_sequence+0xb24>)
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 8005dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 8005dc4:	4b88      	ldr	r3, [pc, #544]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 8005dcc:	4b86      	ldr	r3, [pc, #536]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 8005dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8006000 <update_homing_sequence+0xb28>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005dda:	4b8a      	ldr	r3, [pc, #552]	@ (8006004 <update_homing_sequence+0xb2c>)
 8005ddc:	2208      	movs	r2, #8
 8005dde:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 8005de0:	4b89      	ldr	r3, [pc, #548]	@ (8006008 <update_homing_sequence+0xb30>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 8005de6:	4b89      	ldr	r3, [pc, #548]	@ (800600c <update_homing_sequence+0xb34>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8005dec:	e144      	b.n	8006078 <update_homing_sequence+0xba0>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005dee:	4b83      	ldr	r3, [pc, #524]	@ (8005ffc <update_homing_sequence+0xb24>)
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005df6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005dfe:	4b80      	ldr	r3, [pc, #512]	@ (8006000 <update_homing_sequence+0xb28>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a7e      	ldr	r2, [pc, #504]	@ (8006000 <update_homing_sequence+0xb28>)
 8005e06:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e08:	4b7d      	ldr	r3, [pc, #500]	@ (8006000 <update_homing_sequence+0xb28>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e10:	f0c0 8134 	bcc.w	800607c <update_homing_sequence+0xba4>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	487e      	ldr	r0, [pc, #504]	@ (8006010 <update_homing_sequence+0xb38>)
 8005e18:	f006 fb32 	bl	800c480 <HAL_GPIO_ReadPin>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			if (prox_detected) {
 8005e2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <update_homing_sequence+0x96e>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005e32:	4b73      	ldr	r3, [pc, #460]	@ (8006000 <update_homing_sequence+0xb28>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005e38:	4b72      	ldr	r3, [pc, #456]	@ (8006004 <update_homing_sequence+0xb2c>)
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005e3e:	4b72      	ldr	r3, [pc, #456]	@ (8006008 <update_homing_sequence+0xb30>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005e44:	e11a      	b.n	800607c <update_homing_sequence+0xba4>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005e46:	4b6f      	ldr	r3, [pc, #444]	@ (8006004 <update_homing_sequence+0xb2c>)
 8005e48:	2209      	movs	r2, #9
 8005e4a:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005e4c:	4b6e      	ldr	r3, [pc, #440]	@ (8006008 <update_homing_sequence+0xb30>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
		break;
 8005e52:	e113      	b.n	800607c <update_homing_sequence+0xba4>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005e54:	4b64      	ldr	r3, [pc, #400]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005e56:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e5a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005e62:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005e64:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005e68:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005e6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e72:	4868      	ldr	r0, [pc, #416]	@ (8006014 <update_homing_sequence+0xb3c>)
 8005e74:	f7fb f9d0 	bl	8001218 <PID_CONTROLLER_Compute>
 8005e78:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005e7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fa fe1d 	bl	8000ac4 <__aeabi_d2iz>
 8005e8a:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005e8c:	4b59      	ldr	r3, [pc, #356]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005e8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e92:	4692      	mov	sl, r2
 8005e94:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	f7fa fe12 	bl	8000ac4 <__aeabi_d2iz>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8005eaa:	f7fb f953 	bl	8001154 <PWM_Satuation>
 8005eae:	ee07 0a90 	vmov	s15, r0
 8005eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005eb8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005ebc:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8005ec0:	4855      	ldr	r0, [pc, #340]	@ (8006018 <update_homing_sequence+0xb40>)
 8005ec2:	f7fb fb69 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005ec6:	eef0 7a40 	vmov.f32	s15, s0
 8005eca:	4b47      	ldr	r3, [pc, #284]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005ecc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8005ed0:	4b45      	ldr	r3, [pc, #276]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

	    static float ffd_filtered = 0.0f;
	    static float dfd_filtered = 0.0f;

	    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8005ed8:	4b50      	ldr	r3, [pc, #320]	@ (800601c <update_homing_sequence+0xb44>)
 8005eda:	edd3 7a00 	vldr	s15, [r3]
 8005ede:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006020 <update_homing_sequence+0xb48>
 8005ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ee6:	4b40      	ldr	r3, [pc, #256]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005ee8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005eec:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8006024 <update_homing_sequence+0xb4c>
 8005ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef8:	4b48      	ldr	r3, [pc, #288]	@ (800601c <update_homing_sequence+0xb44>)
 8005efa:	edc3 7a00 	vstr	s15, [r3]
	    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8005efe:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <update_homing_sequence+0xb50>)
 8005f00:	edd3 7a00 	vldr	s15, [r3]
 8005f04:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8006020 <update_homing_sequence+0xb48>
 8005f08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f0c:	4b36      	ldr	r3, [pc, #216]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005f0e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005f12:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8006024 <update_homing_sequence+0xb4c>
 8005f16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1e:	4b42      	ldr	r3, [pc, #264]	@ (8006028 <update_homing_sequence+0xb50>)
 8005f20:	edc3 7a00 	vstr	s15, [r3]

	    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8005f24:	4b30      	ldr	r3, [pc, #192]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fa fad9 	bl	80004e0 <__aeabi_f2d>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	4b3d      	ldr	r3, [pc, #244]	@ (8006028 <update_homing_sequence+0xb50>)
 8005f34:	ed93 7a00 	vldr	s14, [r3]
 8005f38:	4b38      	ldr	r3, [pc, #224]	@ (800601c <update_homing_sequence+0xb44>)
 8005f3a:	edd3 7a00 	vldr	s15, [r3]
 8005f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f42:	ee17 0a90 	vmov	r0, s15
 8005f46:	f7fa facb 	bl	80004e0 <__aeabi_f2d>
 8005f4a:	a325      	add	r3, pc, #148	@ (adr r3, 8005fe0 <update_homing_sequence+0xb08>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa fb1e 	bl	8000590 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa f962 	bl	8000224 <__adddf3>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4610      	mov	r0, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	f7fa fdf4 	bl	8000b54 <__aeabi_d2f>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005f70:	6253      	str	r3, [r2, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005f72:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005f74:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005f78:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005f7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fa fd9f 	bl	8000ac4 <__aeabi_d2iz>
 8005f86:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005f88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <update_homing_sequence+0xb1c>)
 8005f8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005f8e:	4690      	mov	r8, r2
 8005f90:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005f94:	4640      	mov	r0, r8
 8005f96:	4649      	mov	r1, r9
 8005f98:	f7fa fd94 	bl	8000ac4 <__aeabi_d2iz>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8005fa6:	f7fb f8d5 	bl	8001154 <PWM_Satuation>
 8005faa:	ee07 0a90 	vmov	s15, r0
 8005fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005fb4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005fb8:	4b13      	ldr	r3, [pc, #76]	@ (8006008 <update_homing_sequence+0xb30>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05f      	beq.n	8006080 <update_homing_sequence+0xba8>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005ffc <update_homing_sequence+0xb24>)
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <update_homing_sequence+0xb10>)
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <update_homing_sequence+0xb28>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <update_homing_sequence+0xb2c>)
 8005fd8:	220a      	movs	r2, #10
 8005fda:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005fdc:	e050      	b.n	8006080 <update_homing_sequence+0xba8>
 8005fde:	bf00      	nop
 8005fe0:	47ae147b 	.word	0x47ae147b
 8005fe4:	3f847ae1 	.word	0x3f847ae1
 8005fe8:	200002c4 	.word	0x200002c4
 8005fec:	20000420 	.word	0x20000420
 8005ff0:	2000041c 	.word	0x2000041c
 8005ff4:	20000000 	.word	0x20000000
 8005ff8:	20000378 	.word	0x20000378
 8005ffc:	20000280 	.word	0x20000280
 8006000:	20000360 	.word	0x20000360
 8006004:	2000036a 	.word	0x2000036a
 8006008:	20000364 	.word	0x20000364
 800600c:	20000376 	.word	0x20000376
 8006010:	48000400 	.word	0x48000400
 8006014:	200005fc 	.word	0x200005fc
 8006018:	20000658 	.word	0x20000658
 800601c:	20000424 	.word	0x20000424
 8006020:	3f4ccccd 	.word	0x3f4ccccd
 8006024:	3e4ccccd 	.word	0x3e4ccccd
 8006028:	20000428 	.word	0x20000428

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 800602c:	4b19      	ldr	r3, [pc, #100]	@ (8006094 <update_homing_sequence+0xbbc>)
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8006034:	4b18      	ldr	r3, [pc, #96]	@ (8006098 <update_homing_sequence+0xbc0>)
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800603c:	4b17      	ldr	r3, [pc, #92]	@ (800609c <update_homing_sequence+0xbc4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <update_homing_sequence+0xbc4>)
 8006044:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8006046:	4b15      	ldr	r3, [pc, #84]	@ (800609c <update_homing_sequence+0xbc4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800604e:	d319      	bcc.n	8006084 <update_homing_sequence+0xbac>
			homing_state = HOMING_COMPLETE;
 8006050:	4b13      	ldr	r3, [pc, #76]	@ (80060a0 <update_homing_sequence+0xbc8>)
 8006052:	220b      	movs	r2, #11
 8006054:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006056:	e015      	b.n	8006084 <update_homing_sequence+0xbac>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8006058:	f7ff f890 	bl	800517c <__NVIC_SystemReset>
		return;
 800605c:	bf00      	nop
 800605e:	e012      	b.n	8006086 <update_homing_sequence+0xbae>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006060:	bf00      	nop
 8006062:	e010      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006064:	bf00      	nop
 8006066:	e00e      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006068:	bf00      	nop
 800606a:	e00c      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 800606c:	bf00      	nop
 800606e:	e00a      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006070:	bf00      	nop
 8006072:	e008      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006074:	bf00      	nop
 8006076:	e006      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006078:	bf00      	nop
 800607a:	e004      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 800607c:	bf00      	nop
 800607e:	e002      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006080:	bf00      	nop
 8006082:	e000      	b.n	8006086 <update_homing_sequence+0xbae>
		break;
 8006084:	bf00      	nop
	}
}
 8006086:	3754      	adds	r7, #84	@ 0x54
 8006088:	46bd      	mov	sp, r7
 800608a:	ecbd 8b02 	vpop	{d8}
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	bf00      	nop
 8006094:	20000280 	.word	0x20000280
 8006098:	200002c4 	.word	0x200002c4
 800609c:	20000360 	.word	0x20000360
 80060a0:	2000036a 	.word	0x2000036a

080060a4 <normalize_angle>:

float normalize_angle(float angle_rad) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 80060ae:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80060ec <normalize_angle+0x48>
 80060b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80060b6:	f00c f833 	bl	8012120 <fmodf>
 80060ba:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 80060be:	edd7 7a03 	vldr	s15, [r7, #12]
 80060c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ca:	d507      	bpl.n	80060dc <normalize_angle+0x38>
		result += 2.0f * PI;
 80060cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80060d0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80060ec <normalize_angle+0x48>
 80060d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060d8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	ee07 3a90 	vmov	s15, r3
}
 80060e2:	eeb0 0a67 	vmov.f32	s0, s15
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40c90fdb 	.word	0x40c90fdb

080060f0 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80060fa:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8006104:	edd7 7a01 	vldr	s15, [r7, #4]
 8006108:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800626c <calculate_movement_deg+0x17c>
 800610c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006114:	d508      	bpl.n	8006128 <calculate_movement_deg+0x38>
 8006116:	edd7 7a00 	vldr	s15, [r7]
 800611a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800626c <calculate_movement_deg+0x17c>
 800611e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006126:	d411      	bmi.n	800614c <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8006128:	edd7 7a01 	vldr	s15, [r7, #4]
 800612c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800626c <calculate_movement_deg+0x17c>
 8006130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	db33      	blt.n	80061a2 <calculate_movement_deg+0xb2>
 800613a:	edd7 7a00 	vldr	s15, [r7]
 800613e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800626c <calculate_movement_deg+0x17c>
 8006142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614a:	db2a      	blt.n	80061a2 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 800614c:	ed97 7a00 	vldr	s14, [r7]
 8006150:	edd7 7a01 	vldr	s15, [r7, #4]
 8006154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006158:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 800615c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006160:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800626c <calculate_movement_deg+0x17c>
 8006164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	dd07      	ble.n	800617e <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 800616e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006172:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006270 <calculate_movement_deg+0x180>
 8006176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800617a:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 800617e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006182:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006274 <calculate_movement_deg+0x184>
 8006186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618e:	d562      	bpl.n	8006256 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006190:	edd7 7a03 	vldr	s15, [r7, #12]
 8006194:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006270 <calculate_movement_deg+0x180>
 8006198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800619c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 80061a0:	e059      	b.n	8006256 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 80061a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80061a6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800626c <calculate_movement_deg+0x17c>
 80061aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b2:	d52a      	bpl.n	800620a <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 80061b4:	edd7 7a00 	vldr	s15, [r7]
 80061b8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800626c <calculate_movement_deg+0x17c>
 80061bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80061c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	d50e      	bpl.n	80061ec <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 80061ce:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006270 <calculate_movement_deg+0x180>
 80061d2:	edd7 7a00 	vldr	s15, [r7]
 80061d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061da:	edd7 7a01 	vldr	s15, [r7, #4]
 80061de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e2:	eef1 7a67 	vneg.f32	s15, s15
 80061e6:	edc7 7a03 	vstr	s15, [r7, #12]
 80061ea:	e034      	b.n	8006256 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80061ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80061f0:	edd7 7a00 	vldr	s15, [r7]
 80061f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006270 <calculate_movement_deg+0x180>
 80061fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006200:	eef1 7a67 	vneg.f32	s15, s15
 8006204:	edc7 7a03 	vstr	s15, [r7, #12]
 8006208:	e025      	b.n	8006256 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 800620a:	edd7 7a01 	vldr	s15, [r7, #4]
 800620e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800626c <calculate_movement_deg+0x17c>
 8006212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006216:	ed97 7a00 	vldr	s14, [r7]
 800621a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006222:	d50c      	bpl.n	800623e <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8006224:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006270 <calculate_movement_deg+0x180>
 8006228:	edd7 7a01 	vldr	s15, [r7, #4]
 800622c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006230:	ed97 7a00 	vldr	s14, [r7]
 8006234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006238:	edc7 7a03 	vstr	s15, [r7, #12]
 800623c:	e00b      	b.n	8006256 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 800623e:	ed97 7a00 	vldr	s14, [r7]
 8006242:	edd7 7a01 	vldr	s15, [r7, #4]
 8006246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800624a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006270 <calculate_movement_deg+0x180>
 800624e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006252:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	ee07 3a90 	vmov	s15, r3
}
 800625c:	eeb0 0a67 	vmov.f32	s0, s15
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	43340000 	.word	0x43340000
 8006270:	43b40000 	.word	0x43b40000
 8006274:	c3340000 	.word	0xc3340000

08006278 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	ed2d 8b02 	vpush	{d8}
 800627e:	b089      	sub	sp, #36	@ 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	ed87 0a01 	vstr	s0, [r7, #4]
 8006286:	edc7 0a00 	vstr	s1, [r7]
	if (is_emergency_active() || homing_active) {
 800628a:	f000 fefd 	bl	8007088 <is_emergency_active>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 8098 	bne.w	80063c6 <start_combined_trajectory+0x14e>
 8006296:	4b4f      	ldr	r3, [pc, #316]	@ (80063d4 <start_combined_trajectory+0x15c>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f040 8093 	bne.w	80063c6 <start_combined_trajectory+0x14e>
		return; // Don't start trajectory if in emergency or homing
	}

	float pris_current = prismatic_encoder.mm;
 80062a0:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <start_combined_trajectory+0x160>)
 80062a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a4:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 80062a6:	4b4d      	ldr	r3, [pc, #308]	@ (80063dc <start_combined_trajectory+0x164>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	61bb      	str	r3, [r7, #24]

	prisEva.t = 0.0f;
 80062ac:	4b4c      	ldr	r3, [pc, #304]	@ (80063e0 <start_combined_trajectory+0x168>)
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80062b4:	4b4a      	ldr	r3, [pc, #296]	@ (80063e0 <start_combined_trajectory+0x168>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80062ba:	4b4a      	ldr	r3, [pc, #296]	@ (80063e4 <start_combined_trajectory+0x16c>)
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80062c2:	4b48      	ldr	r3, [pc, #288]	@ (80063e4 <start_combined_trajectory+0x16c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80062c8:	4a47      	ldr	r2, [pc, #284]	@ (80063e8 <start_combined_trajectory+0x170>)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80062ce:	4a47      	ldr	r2, [pc, #284]	@ (80063ec <start_combined_trajectory+0x174>)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	60d3      	str	r3, [r2, #12]
	prismatic_axis.target_pos = fminf(
 80062d4:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80063f0 <start_combined_trajectory+0x178>
 80062d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80062dc:	f00b ffe8 	bl	80122b0 <fmaxf>
 80062e0:	eef0 7a40 	vmov.f32	s15, s0
 80062e4:	eddf 0a43 	vldr	s1, [pc, #268]	@ 80063f4 <start_combined_trajectory+0x17c>
 80062e8:	eeb0 0a67 	vmov.f32	s0, s15
 80062ec:	f00b fffd 	bl	80122ea <fminf>
 80062f0:	eef0 7a40 	vmov.f32	s15, s0
 80062f4:	4b3c      	ldr	r3, [pc, #240]	@ (80063e8 <start_combined_trajectory+0x170>)
 80062f6:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS),
			PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 80062fa:	ed97 0a06 	vldr	s0, [r7, #24]
 80062fe:	f7ff fed1 	bl	80060a4 <normalize_angle>
 8006302:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_deg = normalized_current * 180.0f / PI;
 8006306:	edd7 7a05 	vldr	s15, [r7, #20]
 800630a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80063f8 <start_combined_trajectory+0x180>
 800630e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006312:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80063fc <start_combined_trajectory+0x184>
 8006316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800631a:	edc7 7a04 	vstr	s15, [r7, #16]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 800631e:	edd7 0a00 	vldr	s1, [r7]
 8006322:	ed97 0a04 	vldr	s0, [r7, #16]
 8006326:	f7ff fee3 	bl	80060f0 <calculate_movement_deg>
 800632a:	eef0 7a40 	vmov.f32	s15, s0
 800632e:	4b34      	ldr	r3, [pc, #208]	@ (8006400 <start_combined_trajectory+0x188>)
 8006330:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 8006334:	4b32      	ldr	r3, [pc, #200]	@ (8006400 <start_combined_trajectory+0x188>)
 8006336:	edd3 7a00 	vldr	s15, [r3]
 800633a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80063fc <start_combined_trajectory+0x184>
 800633e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006342:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80063f8 <start_combined_trajectory+0x180>
 8006346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800634a:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 800634e:	4b27      	ldr	r3, [pc, #156]	@ (80063ec <start_combined_trajectory+0x174>)
 8006350:	ed93 7a03 	vldr	s14, [r3, #12]
 8006354:	edd7 7a03 	vldr	s15, [r7, #12]
 8006358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800635c:	4b23      	ldr	r3, [pc, #140]	@ (80063ec <start_combined_trajectory+0x174>)
 800635e:	edc3 7a04 	vstr	s15, [r3, #16]

	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006362:	4b21      	ldr	r3, [pc, #132]	@ (80063e8 <start_combined_trajectory+0x170>)
 8006364:	ed93 8a03 	vldr	s16, [r3, #12]
 8006368:	4b1f      	ldr	r3, [pc, #124]	@ (80063e8 <start_combined_trajectory+0x170>)
 800636a:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 800636e:	4b25      	ldr	r3, [pc, #148]	@ (8006404 <start_combined_trajectory+0x18c>)
 8006370:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	f7fa fbec 	bl	8000b54 <__aeabi_d2f>
 800637c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800637e:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <start_combined_trajectory+0x18c>)
 8006380:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f7fa fbe4 	bl	8000b54 <__aeabi_d2f>
 800638c:	4603      	mov	r3, r0
 800638e:	ee01 3a90 	vmov	s3, r3
 8006392:	ee01 4a10 	vmov	s2, r4
 8006396:	eef0 0a68 	vmov.f32	s1, s17
 800639a:	eeb0 0a48 	vmov.f32	s0, s16
 800639e:	481a      	ldr	r0, [pc, #104]	@ (8006408 <start_combined_trajectory+0x190>)
 80063a0:	f7fd fd10 	bl	8003dc4 <Trapezoidal_Generator>

	prismatic_axis.trajectory_active = false;
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <start_combined_trajectory+0x170>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80063ac:	4b0f      	ldr	r3, [pc, #60]	@ (80063ec <start_combined_trajectory+0x174>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	plotter_pen_up();
 80063b4:	f002 fd24 	bl	8008e00 <plotter_pen_up>
	motion_delay_timer = 0;
 80063b8:	4b14      	ldr	r3, [pc, #80]	@ (800640c <start_combined_trajectory+0x194>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 80063be:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <start_combined_trajectory+0x198>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e000      	b.n	80063c8 <start_combined_trajectory+0x150>
		return; // Don't start trajectory if in emergency or homing
 80063c6:	bf00      	nop
}
 80063c8:	3724      	adds	r7, #36	@ 0x24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	ecbd 8b02 	vpop	{d8}
 80063d0:	bd90      	pop	{r4, r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000036b 	.word	0x2000036b
 80063d8:	200004cc 	.word	0x200004cc
 80063dc:	20000528 	.word	0x20000528
 80063e0:	20000334 	.word	0x20000334
 80063e4:	20000348 	.word	0x20000348
 80063e8:	20000280 	.word	0x20000280
 80063ec:	200002c4 	.word	0x200002c4
 80063f0:	00000000 	.word	0x00000000
 80063f4:	43960000 	.word	0x43960000
 80063f8:	43340000 	.word	0x43340000
 80063fc:	40490fdb 	.word	0x40490fdb
 8006400:	200003b0 	.word	0x200003b0
 8006404:	20000080 	.word	0x20000080
 8006408:	2000030c 	.word	0x2000030c
 800640c:	20000360 	.word	0x20000360
 8006410:	20000308 	.word	0x20000308

08006414 <update_position_control>:

void update_position_control(void) {
 8006414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006418:	ed2d 8b02 	vpush	{d8}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006420:	4b50      	ldr	r3, [pc, #320]	@ (8006564 <update_position_control+0x150>)
 8006422:	ed93 7a00 	vldr	s14, [r3]
 8006426:	4b50      	ldr	r3, [pc, #320]	@ (8006568 <update_position_control+0x154>)
 8006428:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800642c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006430:	4b4c      	ldr	r3, [pc, #304]	@ (8006564 <update_position_control+0x150>)
 8006432:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 8006436:	4b4b      	ldr	r3, [pc, #300]	@ (8006564 <update_position_control+0x150>)
 8006438:	edd3 7a05 	vldr	s15, [r3, #20]
 800643c:	eeb0 0a67 	vmov.f32	s0, s15
 8006440:	484a      	ldr	r0, [pc, #296]	@ (800656c <update_position_control+0x158>)
 8006442:	f7fa fee9 	bl	8001218 <PID_CONTROLLER_Compute>
 8006446:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800644a:	4b49      	ldr	r3, [pc, #292]	@ (8006570 <update_position_control+0x15c>)
 800644c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006450:	4610      	mov	r0, r2
 8006452:	4619      	mov	r1, r3
 8006454:	f7fa fb36 	bl	8000ac4 <__aeabi_d2iz>
 8006458:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800645a:	4b45      	ldr	r3, [pc, #276]	@ (8006570 <update_position_control+0x15c>)
 800645c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006460:	4690      	mov	r8, r2
 8006462:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8006466:	4640      	mov	r0, r8
 8006468:	4649      	mov	r1, r9
 800646a:	f7fa fb2b 	bl	8000ac4 <__aeabi_d2iz>
 800646e:	4603      	mov	r3, r0
 8006470:	4619      	mov	r1, r3
 8006472:	4630      	mov	r0, r6
 8006474:	eeb0 0a48 	vmov.f32	s0, s16
 8006478:	f7fa fe6c 	bl	8001154 <PWM_Satuation>
 800647c:	ee07 0a90 	vmov	s15, r0
 8006480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006484:	4b37      	ldr	r3, [pc, #220]	@ (8006564 <update_position_control+0x150>)
 8006486:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 800648a:	4b3a      	ldr	r3, [pc, #232]	@ (8006574 <update_position_control+0x160>)
 800648c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006490:	eeb0 0a67 	vmov.f32	s0, s15
 8006494:	f7ff fe06 	bl	80060a4 <normalize_angle>
 8006498:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 800649c:	4b36      	ldr	r3, [pc, #216]	@ (8006578 <update_position_control+0x164>)
 800649e:	ed93 7a00 	vldr	s14, [r3]
 80064a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064aa:	4b33      	ldr	r3, [pc, #204]	@ (8006578 <update_position_control+0x164>)
 80064ac:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80064b0:	4b31      	ldr	r3, [pc, #196]	@ (8006578 <update_position_control+0x164>)
 80064b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80064b6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800657c <update_position_control+0x168>
 80064ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c2:	dd09      	ble.n	80064d8 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 80064c4:	4b2c      	ldr	r3, [pc, #176]	@ (8006578 <update_position_control+0x164>)
 80064c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80064ca:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006580 <update_position_control+0x16c>
 80064ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <update_position_control+0x164>)
 80064d4:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 80064d8:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <update_position_control+0x164>)
 80064da:	edd3 7a05 	vldr	s15, [r3, #20]
 80064de:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006584 <update_position_control+0x170>
 80064e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	d509      	bpl.n	8006500 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 80064ec:	4b22      	ldr	r3, [pc, #136]	@ (8006578 <update_position_control+0x164>)
 80064ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80064f2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006580 <update_position_control+0x16c>
 80064f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006578 <update_position_control+0x164>)
 80064fc:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006500:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <update_position_control+0x164>)
 8006502:	edd3 7a05 	vldr	s15, [r3, #20]
 8006506:	eeb0 0a67 	vmov.f32	s0, s15
 800650a:	481f      	ldr	r0, [pc, #124]	@ (8006588 <update_position_control+0x174>)
 800650c:	f7fa fe84 	bl	8001218 <PID_CONTROLLER_Compute>
 8006510:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006514:	4b1d      	ldr	r3, [pc, #116]	@ (800658c <update_position_control+0x178>)
 8006516:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	f7fa fad1 	bl	8000ac4 <__aeabi_d2iz>
 8006522:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006524:	4b19      	ldr	r3, [pc, #100]	@ (800658c <update_position_control+0x178>)
 8006526:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800652a:	4614      	mov	r4, r2
 800652c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7fa fac6 	bl	8000ac4 <__aeabi_d2iz>
 8006538:	4603      	mov	r3, r0
 800653a:	4619      	mov	r1, r3
 800653c:	4630      	mov	r0, r6
 800653e:	eeb0 0a48 	vmov.f32	s0, s16
 8006542:	f7fa fe07 	bl	8001154 <PWM_Satuation>
 8006546:	ee07 0a90 	vmov	s15, r0
 800654a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654e:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <update_position_control+0x164>)
 8006550:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	ecbd 8b02 	vpop	{d8}
 800655e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006562:	bf00      	nop
 8006564:	20000280 	.word	0x20000280
 8006568:	200004cc 	.word	0x200004cc
 800656c:	20000584 	.word	0x20000584
 8006570:	20000080 	.word	0x20000080
 8006574:	20000528 	.word	0x20000528
 8006578:	200002c4 	.word	0x200002c4
 800657c:	40490fdb 	.word	0x40490fdb
 8006580:	40c90fdb 	.word	0x40c90fdb
 8006584:	c0490fdb 	.word	0xc0490fdb
 8006588:	200005d4 	.word	0x200005d4
 800658c:	20000000 	.word	0x20000000

08006590 <update_velocity_control>:

void update_velocity_control(void) {
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 800659c:	4b96      	ldr	r3, [pc, #600]	@ (80067f8 <update_velocity_control+0x268>)
 800659e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80065a6:	4b94      	ldr	r3, [pc, #592]	@ (80067f8 <update_velocity_control+0x268>)
 80065a8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80065ac:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <update_velocity_control+0x268>)
 80065ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80065b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065b6:	4b90      	ldr	r3, [pc, #576]	@ (80067f8 <update_velocity_control+0x268>)
 80065b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80065bc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80065c0:	4b8d      	ldr	r3, [pc, #564]	@ (80067f8 <update_velocity_control+0x268>)
 80065c2:	edc3 7a06 	vstr	s15, [r3, #24]
 80065c6:	e00a      	b.n	80065de <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80065c8:	4b8b      	ldr	r3, [pc, #556]	@ (80067f8 <update_velocity_control+0x268>)
 80065ca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80065ce:	4b8a      	ldr	r3, [pc, #552]	@ (80067f8 <update_velocity_control+0x268>)
 80065d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80065d4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80065d8:	4b87      	ldr	r3, [pc, #540]	@ (80067f8 <update_velocity_control+0x268>)
 80065da:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 80065de:	4b86      	ldr	r3, [pc, #536]	@ (80067f8 <update_velocity_control+0x268>)
 80065e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80065e4:	eeb0 0a67 	vmov.f32	s0, s15
 80065e8:	4884      	ldr	r0, [pc, #528]	@ (80067fc <update_velocity_control+0x26c>)
 80065ea:	f7fa fe15 	bl	8001218 <PID_CONTROLLER_Compute>
 80065ee:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 80065f2:	4b83      	ldr	r3, [pc, #524]	@ (8006800 <update_velocity_control+0x270>)
 80065f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 80065f8:	4610      	mov	r0, r2
 80065fa:	4619      	mov	r1, r3
 80065fc:	f7fa fa62 	bl	8000ac4 <__aeabi_d2iz>
 8006600:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006602:	4b7f      	ldr	r3, [pc, #508]	@ (8006800 <update_velocity_control+0x270>)
 8006604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006608:	603a      	str	r2, [r7, #0]
 800660a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800660e:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006614:	f7fa fa56 	bl	8000ac4 <__aeabi_d2iz>
 8006618:	4603      	mov	r3, r0
 800661a:	4619      	mov	r1, r3
 800661c:	4630      	mov	r0, r6
 800661e:	eeb0 0a48 	vmov.f32	s0, s16
 8006622:	f7fa fd97 	bl	8001154 <PWM_Satuation>
 8006626:	ee07 0a90 	vmov	s15, r0
 800662a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662e:	4b72      	ldr	r3, [pc, #456]	@ (80067f8 <update_velocity_control+0x268>)
 8006630:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006634:	4b70      	ldr	r3, [pc, #448]	@ (80067f8 <update_velocity_control+0x268>)
 8006636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800663a:	2b00      	cmp	r3, #0
 800663c:	d02c      	beq.n	8006698 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 800663e:	4b6e      	ldr	r3, [pc, #440]	@ (80067f8 <update_velocity_control+0x268>)
 8006640:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006644:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006804 <update_velocity_control+0x274>
 8006648:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800664c:	eeb0 0a47 	vmov.f32	s0, s14
 8006650:	486d      	ldr	r0, [pc, #436]	@ (8006808 <update_velocity_control+0x278>)
 8006652:	f7fb f91f 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8006656:	eef0 7a40 	vmov.f32	s15, s0
 800665a:	4b67      	ldr	r3, [pc, #412]	@ (80067f8 <update_velocity_control+0x268>)
 800665c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006660:	4b6a      	ldr	r3, [pc, #424]	@ (800680c <update_velocity_control+0x27c>)
 8006662:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006666:	4b6a      	ldr	r3, [pc, #424]	@ (8006810 <update_velocity_control+0x280>)
 8006668:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 800666c:	4b69      	ldr	r3, [pc, #420]	@ (8006814 <update_velocity_control+0x284>)
 800666e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006672:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006804 <update_velocity_control+0x274>
 8006676:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800667a:	eeb0 1a46 	vmov.f32	s2, s12
 800667e:	eef0 0a66 	vmov.f32	s1, s13
 8006682:	eeb0 0a47 	vmov.f32	s0, s14
 8006686:	4864      	ldr	r0, [pc, #400]	@ (8006818 <update_velocity_control+0x288>)
 8006688:	f7fb f997 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 800668c:	eef0 7a40 	vmov.f32	s15, s0
 8006690:	4b59      	ldr	r3, [pc, #356]	@ (80067f8 <update_velocity_control+0x268>)
 8006692:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006696:	e007      	b.n	80066a8 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006698:	4b57      	ldr	r3, [pc, #348]	@ (80067f8 <update_velocity_control+0x268>)
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80066a0:	4b55      	ldr	r3, [pc, #340]	@ (80067f8 <update_velocity_control+0x268>)
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80066a8:	4b53      	ldr	r3, [pc, #332]	@ (80067f8 <update_velocity_control+0x268>)
 80066aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80066ae:	4b52      	ldr	r3, [pc, #328]	@ (80067f8 <update_velocity_control+0x268>)
 80066b0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80066b4:	4b50      	ldr	r3, [pc, #320]	@ (80067f8 <update_velocity_control+0x268>)
 80066b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	4b4d      	ldr	r3, [pc, #308]	@ (80067f8 <update_velocity_control+0x268>)
 80066c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80066c8:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <update_velocity_control+0x268>)
 80066ca:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80066ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006800 <update_velocity_control+0x270>)
 80066d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	f7fa f9f4 	bl	8000ac4 <__aeabi_d2iz>
 80066dc:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80066de:	4b48      	ldr	r3, [pc, #288]	@ (8006800 <update_velocity_control+0x270>)
 80066e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80066e4:	4692      	mov	sl, r2
 80066e6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80066ea:	4650      	mov	r0, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	f7fa f9e9 	bl	8000ac4 <__aeabi_d2iz>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4619      	mov	r1, r3
 80066f6:	4630      	mov	r0, r6
 80066f8:	eeb0 0a48 	vmov.f32	s0, s16
 80066fc:	f7fa fd2a 	bl	8001154 <PWM_Satuation>
 8006700:	ee07 0a90 	vmov	s15, r0
 8006704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006708:	4b3b      	ldr	r3, [pc, #236]	@ (80067f8 <update_velocity_control+0x268>)
 800670a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 800670e:	4b40      	ldr	r3, [pc, #256]	@ (8006810 <update_velocity_control+0x280>)
 8006710:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006714:	2b00      	cmp	r3, #0
 8006716:	d010      	beq.n	800673a <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006718:	4b3d      	ldr	r3, [pc, #244]	@ (8006810 <update_velocity_control+0x280>)
 800671a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800671e:	4b3c      	ldr	r3, [pc, #240]	@ (8006810 <update_velocity_control+0x280>)
 8006720:	edd3 7a01 	vldr	s15, [r3, #4]
 8006724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006728:	4b39      	ldr	r3, [pc, #228]	@ (8006810 <update_velocity_control+0x280>)
 800672a:	edd3 7a07 	vldr	s15, [r3, #28]
 800672e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006732:	4b37      	ldr	r3, [pc, #220]	@ (8006810 <update_velocity_control+0x280>)
 8006734:	edc3 7a06 	vstr	s15, [r3, #24]
 8006738:	e00a      	b.n	8006750 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 800673a:	4b35      	ldr	r3, [pc, #212]	@ (8006810 <update_velocity_control+0x280>)
 800673c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006740:	4b33      	ldr	r3, [pc, #204]	@ (8006810 <update_velocity_control+0x280>)
 8006742:	edd3 7a07 	vldr	s15, [r3, #28]
 8006746:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800674a:	4b31      	ldr	r3, [pc, #196]	@ (8006810 <update_velocity_control+0x280>)
 800674c:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006750:	4b2f      	ldr	r3, [pc, #188]	@ (8006810 <update_velocity_control+0x280>)
 8006752:	edd3 7a06 	vldr	s15, [r3, #24]
 8006756:	eeb0 0a67 	vmov.f32	s0, s15
 800675a:	4830      	ldr	r0, [pc, #192]	@ (800681c <update_velocity_control+0x28c>)
 800675c:	f7fa fd5c 	bl	8001218 <PID_CONTROLLER_Compute>
 8006760:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006764:	4b2e      	ldr	r3, [pc, #184]	@ (8006820 <update_velocity_control+0x290>)
 8006766:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	f7fa f9a9 	bl	8000ac4 <__aeabi_d2iz>
 8006772:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006774:	4b2a      	ldr	r3, [pc, #168]	@ (8006820 <update_velocity_control+0x290>)
 8006776:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800677a:	4690      	mov	r8, r2
 800677c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa f99e 	bl	8000ac4 <__aeabi_d2iz>
 8006788:	4603      	mov	r3, r0
 800678a:	4619      	mov	r1, r3
 800678c:	4630      	mov	r0, r6
 800678e:	eeb0 0a48 	vmov.f32	s0, s16
 8006792:	f7fa fcdf 	bl	8001154 <PWM_Satuation>
 8006796:	ee07 0a90 	vmov	s15, r0
 800679a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679e:	4b1c      	ldr	r3, [pc, #112]	@ (8006810 <update_velocity_control+0x280>)
 80067a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80067a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <update_velocity_control+0x280>)
 80067a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d03e      	beq.n	800682c <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80067ae:	4b18      	ldr	r3, [pc, #96]	@ (8006810 <update_velocity_control+0x280>)
 80067b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067b4:	eeb0 0a67 	vmov.f32	s0, s15
 80067b8:	481a      	ldr	r0, [pc, #104]	@ (8006824 <update_velocity_control+0x294>)
 80067ba:	f7fa feed 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80067be:	eef0 7a40 	vmov.f32	s15, s0
 80067c2:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <update_velocity_control+0x280>)
 80067c4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80067c8:	4b10      	ldr	r3, [pc, #64]	@ (800680c <update_velocity_control+0x27c>)
 80067ca:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80067ce:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <update_velocity_control+0x284>)
 80067d0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80067d4:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006804 <update_velocity_control+0x274>
 80067d8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80067dc:	eef0 0a66 	vmov.f32	s1, s13
 80067e0:	eeb0 0a47 	vmov.f32	s0, s14
 80067e4:	4810      	ldr	r0, [pc, #64]	@ (8006828 <update_velocity_control+0x298>)
 80067e6:	f7fa ff6a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80067ea:	eef0 7a40 	vmov.f32	s15, s0
 80067ee:	4b08      	ldr	r3, [pc, #32]	@ (8006810 <update_velocity_control+0x280>)
 80067f0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80067f4:	e034      	b.n	8006860 <update_velocity_control+0x2d0>
 80067f6:	bf00      	nop
 80067f8:	20000280 	.word	0x20000280
 80067fc:	200005ac 	.word	0x200005ac
 8006800:	20000080 	.word	0x20000080
 8006804:	447a0000 	.word	0x447a0000
 8006808:	2000064c 	.word	0x2000064c
 800680c:	20000528 	.word	0x20000528
 8006810:	200002c4 	.word	0x200002c4
 8006814:	200004cc 	.word	0x200004cc
 8006818:	20000650 	.word	0x20000650
 800681c:	200005fc 	.word	0x200005fc
 8006820:	20000000 	.word	0x20000000
 8006824:	20000658 	.word	0x20000658
 8006828:	2000065c 	.word	0x2000065c
	} else {
		revolute_axis.ffd = 0.0f;
 800682c:	4b54      	ldr	r3, [pc, #336]	@ (8006980 <update_velocity_control+0x3f0>)
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006834:	4b53      	ldr	r3, [pc, #332]	@ (8006984 <update_velocity_control+0x3f4>)
 8006836:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800683a:	4b53      	ldr	r3, [pc, #332]	@ (8006988 <update_velocity_control+0x3f8>)
 800683c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006840:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 800698c <update_velocity_control+0x3fc>
 8006844:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006848:	eef0 0a66 	vmov.f32	s1, s13
 800684c:	eeb0 0a47 	vmov.f32	s0, s14
 8006850:	484f      	ldr	r0, [pc, #316]	@ (8006990 <update_velocity_control+0x400>)
 8006852:	f7fa ff34 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006856:	eef0 7a40 	vmov.f32	s15, s0
 800685a:	4b49      	ldr	r3, [pc, #292]	@ (8006980 <update_velocity_control+0x3f0>)
 800685c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006860:	4b4c      	ldr	r3, [pc, #304]	@ (8006994 <update_velocity_control+0x404>)
 8006862:	edd3 7a00 	vldr	s15, [r3]
 8006866:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006998 <update_velocity_control+0x408>
 800686a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800686e:	4b44      	ldr	r3, [pc, #272]	@ (8006980 <update_velocity_control+0x3f0>)
 8006870:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006874:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800699c <update_velocity_control+0x40c>
 8006878:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800687c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006880:	4b44      	ldr	r3, [pc, #272]	@ (8006994 <update_velocity_control+0x404>)
 8006882:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8006886:	4b46      	ldr	r3, [pc, #280]	@ (80069a0 <update_velocity_control+0x410>)
 8006888:	edd3 7a00 	vldr	s15, [r3]
 800688c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006998 <update_velocity_control+0x408>
 8006890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006894:	4b3a      	ldr	r3, [pc, #232]	@ (8006980 <update_velocity_control+0x3f0>)
 8006896:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800689a:	eddf 6a40 	vldr	s13, [pc, #256]	@ 800699c <update_velocity_control+0x40c>
 800689e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a6:	4b3e      	ldr	r3, [pc, #248]	@ (80069a0 <update_velocity_control+0x410>)
 80068a8:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 80068ac:	4b34      	ldr	r3, [pc, #208]	@ (8006980 <update_velocity_control+0x3f0>)
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7f9 fe15 	bl	80004e0 <__aeabi_f2d>
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	4b39      	ldr	r3, [pc, #228]	@ (80069a0 <update_velocity_control+0x410>)
 80068bc:	ed93 7a00 	vldr	s14, [r3]
 80068c0:	4b34      	ldr	r3, [pc, #208]	@ (8006994 <update_velocity_control+0x404>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	ee17 0a90 	vmov	r0, s15
 80068ce:	f7f9 fe07 	bl	80004e0 <__aeabi_f2d>
 80068d2:	a329      	add	r3, pc, #164	@ (adr r3, 8006978 <update_velocity_control+0x3e8>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fe5a 	bl	8000590 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7f9 fc9e 	bl	8000224 <__adddf3>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	f7fa f930 	bl	8000b54 <__aeabi_d2f>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4a22      	ldr	r2, [pc, #136]	@ (8006980 <update_velocity_control+0x3f0>)
 80068f8:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80068fa:	4b21      	ldr	r3, [pc, #132]	@ (8006980 <update_velocity_control+0x3f0>)
 80068fc:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006900:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <update_velocity_control+0x414>)
 8006902:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	f7fa f8db 	bl	8000ac4 <__aeabi_d2iz>
 800690e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006910:	4b24      	ldr	r3, [pc, #144]	@ (80069a4 <update_velocity_control+0x414>)
 8006912:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006916:	4614      	mov	r4, r2
 8006918:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7fa f8d0 	bl	8000ac4 <__aeabi_d2iz>
 8006924:	4603      	mov	r3, r0
 8006926:	4619      	mov	r1, r3
 8006928:	4630      	mov	r0, r6
 800692a:	eeb0 0a48 	vmov.f32	s0, s16
 800692e:	f7fa fc11 	bl	8001154 <PWM_Satuation>
 8006932:	ee07 0a90 	vmov	s15, r0
 8006936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800693a:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <update_velocity_control+0x3f0>)
 800693c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006940:	4b19      	ldr	r3, [pc, #100]	@ (80069a8 <update_velocity_control+0x418>)
 8006942:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006946:	eef0 0a67 	vmov.f32	s1, s15
 800694a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80069ac <update_velocity_control+0x41c>
 800694e:	4818      	ldr	r0, [pc, #96]	@ (80069b0 <update_velocity_control+0x420>)
 8006950:	f7fa fd3a 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006954:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <update_velocity_control+0x3f0>)
 8006956:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800695a:	eef0 0a67 	vmov.f32	s1, s15
 800695e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80069ac <update_velocity_control+0x41c>
 8006962:	4814      	ldr	r0, [pc, #80]	@ (80069b4 <update_velocity_control+0x424>)
 8006964:	f7fa fd30 	bl	80013c8 <MDXX_set_range>
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	ecbd 8b02 	vpop	{d8}
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	bf00      	nop
 8006978:	47ae147b 	.word	0x47ae147b
 800697c:	3f847ae1 	.word	0x3f847ae1
 8006980:	200002c4 	.word	0x200002c4
 8006984:	20000528 	.word	0x20000528
 8006988:	200004cc 	.word	0x200004cc
 800698c:	447a0000 	.word	0x447a0000
 8006990:	2000065c 	.word	0x2000065c
 8006994:	2000042c 	.word	0x2000042c
 8006998:	3f4ccccd 	.word	0x3f4ccccd
 800699c:	3e4ccccd 	.word	0x3e4ccccd
 80069a0:	20000430 	.word	0x20000430
 80069a4:	20000000 	.word	0x20000000
 80069a8:	20000280 	.word	0x20000280
 80069ac:	44fa0000 	.word	0x44fa0000
 80069b0:	20000434 	.word	0x20000434
 80069b4:	20000480 	.word	0x20000480

080069b8 <update_control_loops>:

void update_control_loops(void) {
 80069b8:	b598      	push	{r3, r4, r7, lr}
 80069ba:	ed2d 8b02 	vpush	{d8}
 80069be:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 80069c0:	4bac      	ldr	r3, [pc, #688]	@ (8006c74 <update_control_loops+0x2bc>)
 80069c2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80069c6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ca:	f7ff fb6b 	bl	80060a4 <normalize_angle>
 80069ce:	eef0 7a40 	vmov.f32	s15, s0
 80069d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006c78 <update_control_loops+0x2c0>)
 80069d4:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 80069d8:	f000 fb56 	bl	8007088 <is_emergency_active>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d015      	beq.n	8006a0e <update_control_loops+0x56>
		emergency_stop_all_motors();
 80069e2:	f000 fa89 	bl	8006ef8 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 80069e6:	4ba5      	ldr	r3, [pc, #660]	@ (8006c7c <update_control_loops+0x2c4>)
 80069e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ea:	4aa5      	ldr	r2, [pc, #660]	@ (8006c80 <update_control_loops+0x2c8>)
 80069ec:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 80069ee:	4ba2      	ldr	r3, [pc, #648]	@ (8006c78 <update_control_loops+0x2c0>)
 80069f0:	edd3 7a00 	vldr	s15, [r3]
 80069f4:	220e      	movs	r2, #14
 80069f6:	210f      	movs	r1, #15
 80069f8:	eeb0 0a67 	vmov.f32	s0, s15
 80069fc:	48a1      	ldr	r0, [pc, #644]	@ (8006c84 <update_control_loops+0x2cc>)
 80069fe:	f7fd fe3b 	bl	8004678 <UnitConverter_angle>
 8006a02:	eef0 7a40 	vmov.f32	s15, s0
 8006a06:	4ba0      	ldr	r3, [pc, #640]	@ (8006c88 <update_control_loops+0x2d0>)
 8006a08:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006a0c:	e16e      	b.n	8006cec <update_control_loops+0x334>
	}

	if (homing_active) {
 8006a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c8c <update_control_loops+0x2d4>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d029      	beq.n	8006a6a <update_control_loops+0xb2>
		update_homing_sequence();
 8006a16:	f7fe fd5f 	bl	80054d8 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006a1a:	4b99      	ldr	r3, [pc, #612]	@ (8006c80 <update_control_loops+0x2c8>)
 8006a1c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a20:	eef0 0a67 	vmov.f32	s1, s15
 8006a24:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006c90 <update_control_loops+0x2d8>
 8006a28:	489a      	ldr	r0, [pc, #616]	@ (8006c94 <update_control_loops+0x2dc>)
 8006a2a:	f7fa fccd 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006a2e:	4b96      	ldr	r3, [pc, #600]	@ (8006c88 <update_control_loops+0x2d0>)
 8006a30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a34:	eef0 0a67 	vmov.f32	s1, s15
 8006a38:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8006c90 <update_control_loops+0x2d8>
 8006a3c:	4896      	ldr	r0, [pc, #600]	@ (8006c98 <update_control_loops+0x2e0>)
 8006a3e:	f7fa fcc3 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006a42:	4b8e      	ldr	r3, [pc, #568]	@ (8006c7c <update_control_loops+0x2c4>)
 8006a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a46:	4a8e      	ldr	r2, [pc, #568]	@ (8006c80 <update_control_loops+0x2c8>)
 8006a48:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8006c78 <update_control_loops+0x2c0>)
 8006a4c:	edd3 7a00 	vldr	s15, [r3]
 8006a50:	220e      	movs	r2, #14
 8006a52:	210f      	movs	r1, #15
 8006a54:	eeb0 0a67 	vmov.f32	s0, s15
 8006a58:	488a      	ldr	r0, [pc, #552]	@ (8006c84 <update_control_loops+0x2cc>)
 8006a5a:	f7fd fe0d 	bl	8004678 <UnitConverter_angle>
 8006a5e:	eef0 7a40 	vmov.f32	s15, s0
 8006a62:	4b89      	ldr	r3, [pc, #548]	@ (8006c88 <update_control_loops+0x2d0>)
 8006a64:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006a68:	e140      	b.n	8006cec <update_control_loops+0x334>
	}

	switch (motion_sequence_state) {
 8006a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8006c9c <update_control_loops+0x2e4>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	f200 80f7 	bhi.w	8006c64 <update_control_loops+0x2ac>
 8006a76:	a201      	add	r2, pc, #4	@ (adr r2, 8006a7c <update_control_loops+0xc4>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006a91 	.word	0x08006a91
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006b99 	.word	0x08006b99
 8006a88:	08006c3f 	.word	0x08006c3f
 8006a8c:	08006c5d 	.word	0x08006c5d
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006a90:	4b83      	ldr	r3, [pc, #524]	@ (8006ca0 <update_control_loops+0x2e8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3301      	adds	r3, #1
 8006a96:	4a82      	ldr	r2, [pc, #520]	@ (8006ca0 <update_control_loops+0x2e8>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f240 80e2 	bls.w	8006c68 <update_control_loops+0x2b0>
			prismatic_axis.trajectory_active = true;
 8006aa4:	4b76      	ldr	r3, [pc, #472]	@ (8006c80 <update_control_loops+0x2c8>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006aac:	4b7b      	ldr	r3, [pc, #492]	@ (8006c9c <update_control_loops+0x2e4>)
 8006aae:	2202      	movs	r2, #2
 8006ab0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006ab2:	e0d9      	b.n	8006c68 <update_control_loops+0x2b0>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006ab4:	4b72      	ldr	r3, [pc, #456]	@ (8006c80 <update_control_loops+0x2c8>)
 8006ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80d6 	beq.w	8006c6c <update_control_loops+0x2b4>
 8006ac0:	4b78      	ldr	r3, [pc, #480]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006ac2:	7c1b      	ldrb	r3, [r3, #16]
 8006ac4:	f083 0301 	eor.w	r3, r3, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80ce 	beq.w	8006c6c <update_control_loops+0x2b4>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8006c80 <update_control_loops+0x2c8>)
 8006ad2:	ed93 8a03 	vldr	s16, [r3, #12]
 8006ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c80 <update_control_loops+0x2c8>)
 8006ad8:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006adc:	4b72      	ldr	r3, [pc, #456]	@ (8006ca8 <update_control_loops+0x2f0>)
 8006ade:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f7fa f835 	bl	8000b54 <__aeabi_d2f>
 8006aea:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006aec:	4b6e      	ldr	r3, [pc, #440]	@ (8006ca8 <update_control_loops+0x2f0>)
 8006aee:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006af2:	4610      	mov	r0, r2
 8006af4:	4619      	mov	r1, r3
 8006af6:	f7fa f82d 	bl	8000b54 <__aeabi_d2f>
 8006afa:	4603      	mov	r3, r0
 8006afc:	ee01 3a90 	vmov	s3, r3
 8006b00:	ee01 4a10 	vmov	s2, r4
 8006b04:	eef0 0a68 	vmov.f32	s1, s17
 8006b08:	eeb0 0a48 	vmov.f32	s0, s16
 8006b0c:	4965      	ldr	r1, [pc, #404]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006b0e:	4867      	ldr	r0, [pc, #412]	@ (8006cac <update_control_loops+0x2f4>)
 8006b10:	f7fd fa1a 	bl	8003f48 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 8006b14:	4b63      	ldr	r3, [pc, #396]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a59      	ldr	r2, [pc, #356]	@ (8006c80 <update_control_loops+0x2c8>)
 8006b1a:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 8006b1c:	4b61      	ldr	r3, [pc, #388]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a57      	ldr	r2, [pc, #348]	@ (8006c80 <update_control_loops+0x2c8>)
 8006b22:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 8006b24:	4b5f      	ldr	r3, [pc, #380]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006b26:	7c1b      	ldrb	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 809f 	beq.w	8006c6c <update_control_loops+0x2b4>
				prismatic_axis.trajectory_active = false;
 8006b2e:	4b54      	ldr	r3, [pc, #336]	@ (8006c80 <update_control_loops+0x2c8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 8006b36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <update_control_loops+0x2ec>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a51      	ldr	r2, [pc, #324]	@ (8006c80 <update_control_loops+0x2c8>)
 8006b3c:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006b3e:	4b50      	ldr	r3, [pc, #320]	@ (8006c80 <update_control_loops+0x2c8>)
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006b46:	4b50      	ldr	r3, [pc, #320]	@ (8006c88 <update_control_loops+0x2d0>)
 8006b48:	ed93 8a03 	vldr	s16, [r3, #12]
 8006b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8006c88 <update_control_loops+0x2d0>)
 8006b4e:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006b52:	4b57      	ldr	r3, [pc, #348]	@ (8006cb0 <update_control_loops+0x2f8>)
 8006b54:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7f9 fffa 	bl	8000b54 <__aeabi_d2f>
 8006b60:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006b62:	4b53      	ldr	r3, [pc, #332]	@ (8006cb0 <update_control_loops+0x2f8>)
 8006b64:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f7f9 fff2 	bl	8000b54 <__aeabi_d2f>
 8006b70:	4603      	mov	r3, r0
 8006b72:	ee01 3a90 	vmov	s3, r3
 8006b76:	ee01 4a10 	vmov	s2, r4
 8006b7a:	eef0 0a68 	vmov.f32	s1, s17
 8006b7e:	eeb0 0a48 	vmov.f32	s0, s16
 8006b82:	484c      	ldr	r0, [pc, #304]	@ (8006cb4 <update_control_loops+0x2fc>)
 8006b84:	f7fd f91e 	bl	8003dc4 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 8006b88:	4b3f      	ldr	r3, [pc, #252]	@ (8006c88 <update_control_loops+0x2d0>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006b90:	4b42      	ldr	r3, [pc, #264]	@ (8006c9c <update_control_loops+0x2e4>)
 8006b92:	2203      	movs	r2, #3
 8006b94:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006b96:	e069      	b.n	8006c6c <update_control_loops+0x2b4>

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006b98:	4b3b      	ldr	r3, [pc, #236]	@ (8006c88 <update_control_loops+0x2d0>)
 8006b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d066      	beq.n	8006c70 <update_control_loops+0x2b8>
 8006ba2:	4b45      	ldr	r3, [pc, #276]	@ (8006cb8 <update_control_loops+0x300>)
 8006ba4:	7c1b      	ldrb	r3, [r3, #16]
 8006ba6:	f083 0301 	eor.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05f      	beq.n	8006c70 <update_control_loops+0x2b8>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006bb0:	4b35      	ldr	r3, [pc, #212]	@ (8006c88 <update_control_loops+0x2d0>)
 8006bb2:	ed93 8a03 	vldr	s16, [r3, #12]
 8006bb6:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <update_control_loops+0x2d0>)
 8006bb8:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb0 <update_control_loops+0x2f8>)
 8006bbe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f7f9 ffc5 	bl	8000b54 <__aeabi_d2f>
 8006bca:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006bcc:	4b38      	ldr	r3, [pc, #224]	@ (8006cb0 <update_control_loops+0x2f8>)
 8006bce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f7f9 ffbd 	bl	8000b54 <__aeabi_d2f>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	ee01 3a90 	vmov	s3, r3
 8006be0:	ee01 4a10 	vmov	s2, r4
 8006be4:	eef0 0a68 	vmov.f32	s1, s17
 8006be8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bec:	4932      	ldr	r1, [pc, #200]	@ (8006cb8 <update_control_loops+0x300>)
 8006bee:	4831      	ldr	r0, [pc, #196]	@ (8006cb4 <update_control_loops+0x2fc>)
 8006bf0:	f7fd f9aa 	bl	8003f48 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 8006bf4:	4b30      	ldr	r3, [pc, #192]	@ (8006cb8 <update_control_loops+0x300>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a23      	ldr	r2, [pc, #140]	@ (8006c88 <update_control_loops+0x2d0>)
 8006bfa:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 8006bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8006cb8 <update_control_loops+0x300>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a21      	ldr	r2, [pc, #132]	@ (8006c88 <update_control_loops+0x2d0>)
 8006c02:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 8006c04:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb8 <update_control_loops+0x300>)
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d031      	beq.n	8006c70 <update_control_loops+0x2b8>
				revolute_axis.trajectory_active = false;
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <update_control_loops+0x2d0>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 8006c14:	4b28      	ldr	r3, [pc, #160]	@ (8006cb8 <update_control_loops+0x300>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <update_control_loops+0x2d0>)
 8006c1a:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c88 <update_control_loops+0x2d0>)
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006c24:	4825      	ldr	r0, [pc, #148]	@ (8006cbc <update_control_loops+0x304>)
 8006c26:	f7fa fb89 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c2a:	4825      	ldr	r0, [pc, #148]	@ (8006cc0 <update_control_loops+0x308>)
 8006c2c:	f7fa fb86 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 8006c30:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca0 <update_control_loops+0x2e8>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006c36:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <update_control_loops+0x2e4>)
 8006c38:	2204      	movs	r2, #4
 8006c3a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006c3c:	e018      	b.n	8006c70 <update_control_loops+0x2b8>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006c3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ca0 <update_control_loops+0x2e8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <update_control_loops+0x2e8>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d939      	bls.n	8006cc4 <update_control_loops+0x30c>
			plotter_pen_down();
 8006c50:	f002 f8e6 	bl	8008e20 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006c54:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <update_control_loops+0x2e4>)
 8006c56:	2205      	movs	r2, #5
 8006c58:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006c5a:	e033      	b.n	8006cc4 <update_control_loops+0x30c>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <update_control_loops+0x2e4>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
		break;
 8006c62:	e030      	b.n	8006cc6 <update_control_loops+0x30e>

	default:
		break;
 8006c64:	bf00      	nop
 8006c66:	e02e      	b.n	8006cc6 <update_control_loops+0x30e>
		break;
 8006c68:	bf00      	nop
 8006c6a:	e02c      	b.n	8006cc6 <update_control_loops+0x30e>
		break;
 8006c6c:	bf00      	nop
 8006c6e:	e02a      	b.n	8006cc6 <update_control_loops+0x30e>
		break;
 8006c70:	bf00      	nop
 8006c72:	e028      	b.n	8006cc6 <update_control_loops+0x30e>
 8006c74:	20000528 	.word	0x20000528
 8006c78:	200003ac 	.word	0x200003ac
 8006c7c:	200004cc 	.word	0x200004cc
 8006c80:	20000280 	.word	0x20000280
 8006c84:	200008c0 	.word	0x200008c0
 8006c88:	200002c4 	.word	0x200002c4
 8006c8c:	2000036b 	.word	0x2000036b
 8006c90:	44fa0000 	.word	0x44fa0000
 8006c94:	20000434 	.word	0x20000434
 8006c98:	20000480 	.word	0x20000480
 8006c9c:	20000308 	.word	0x20000308
 8006ca0:	20000360 	.word	0x20000360
 8006ca4:	20000334 	.word	0x20000334
 8006ca8:	20000080 	.word	0x20000080
 8006cac:	2000030c 	.word	0x2000030c
 8006cb0:	20000000 	.word	0x20000000
 8006cb4:	20000320 	.word	0x20000320
 8006cb8:	20000348 	.word	0x20000348
 8006cbc:	200005d4 	.word	0x200005d4
 8006cc0:	200005fc 	.word	0x200005fc
		break;
 8006cc4:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <update_control_loops+0x33c>)
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cca:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf8 <update_control_loops+0x340>)
 8006ccc:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006cce:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <update_control_loops+0x344>)
 8006cd0:	edd3 7a00 	vldr	s15, [r3]
 8006cd4:	220e      	movs	r2, #14
 8006cd6:	210f      	movs	r1, #15
 8006cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cdc:	4808      	ldr	r0, [pc, #32]	@ (8006d00 <update_control_loops+0x348>)
 8006cde:	f7fd fccb 	bl	8004678 <UnitConverter_angle>
 8006ce2:	eef0 7a40 	vmov.f32	s15, s0
 8006ce6:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <update_control_loops+0x34c>)
 8006ce8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006cec:	46bd      	mov	sp, r7
 8006cee:	ecbd 8b02 	vpop	{d8}
 8006cf2:	bd98      	pop	{r3, r4, r7, pc}
 8006cf4:	200004cc 	.word	0x200004cc
 8006cf8:	20000280 	.word	0x20000280
 8006cfc:	200003ac 	.word	0x200003ac
 8006d00:	200008c0 	.word	0x200008c0
 8006d04:	200002c4 	.word	0x200002c4

08006d08 <check_emergency_button>:

void check_emergency_button(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006d0e:	2110      	movs	r1, #16
 8006d10:	480c      	ldr	r0, [pc, #48]	@ (8006d44 <check_emergency_button+0x3c>)
 8006d12:	f005 fbb5 	bl	800c480 <HAL_GPIO_ReadPin>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006d2e:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <check_emergency_button+0x40>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d001      	beq.n	8006d3a <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006d36:	f000 f877 	bl	8006e28 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	48000400 	.word	0x48000400
 8006d48:	2000036c 	.word	0x2000036c

08006d4c <check_safety_conditions>:

void check_safety_conditions(void) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006d50:	4b16      	ldr	r3, [pc, #88]	@ (8006dac <check_safety_conditions+0x60>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d127      	bne.n	8006da8 <check_safety_conditions+0x5c>
 8006d58:	4b15      	ldr	r3, [pc, #84]	@ (8006db0 <check_safety_conditions+0x64>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d123      	bne.n	8006da8 <check_safety_conditions+0x5c>
 8006d60:	4b14      	ldr	r3, [pc, #80]	@ (8006db4 <check_safety_conditions+0x68>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11f      	bne.n	8006da8 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006d68:	4b13      	ldr	r3, [pc, #76]	@ (8006db8 <check_safety_conditions+0x6c>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <check_safety_conditions+0x3c>
 8006d72:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <check_safety_conditions+0x70>)
 8006d74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d80:	d502      	bpl.n	8006d88 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006d82:	f000 f81f 	bl	8006dc4 <trigger_software_emergency>
		return;
 8006d86:	e010      	b.n	8006daa <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006d88:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <check_safety_conditions+0x74>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <check_safety_conditions+0x5e>
 8006d92:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <check_safety_conditions+0x70>)
 8006d94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da0:	dd03      	ble.n	8006daa <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006da2:	f000 f80f 	bl	8006dc4 <trigger_software_emergency>
		return;
 8006da6:	e000      	b.n	8006daa <check_safety_conditions+0x5e>
		return;
 8006da8:	bf00      	nop
	}
}
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000134 	.word	0x20000134
 8006db0:	2000036c 	.word	0x2000036c
 8006db4:	2000036b 	.word	0x2000036b
 8006db8:	20000368 	.word	0x20000368
 8006dbc:	20000280 	.word	0x20000280
 8006dc0:	20000369 	.word	0x20000369

08006dc4 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8006dc8:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <trigger_software_emergency+0x48>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d11b      	bne.n	8006e08 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <trigger_software_emergency+0x48>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8006dd6:	f000 f88f 	bl	8006ef8 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <trigger_software_emergency+0x4c>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <trigger_software_emergency+0x50>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8006de6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <trigger_software_emergency+0x54>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006dec:	4b0b      	ldr	r3, [pc, #44]	@ (8006e1c <trigger_software_emergency+0x58>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006df4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <trigger_software_emergency+0x5c>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8006dfc:	4b09      	ldr	r3, [pc, #36]	@ (8006e24 <trigger_software_emergency+0x60>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8006e04:	f000 f9c2 	bl	800718c <exit_joy_mode>
		}
	}
}
 8006e08:	bf00      	nop
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	2000036c 	.word	0x2000036c
 8006e10:	20000370 	.word	0x20000370
 8006e14:	20000374 	.word	0x20000374
 8006e18:	20000308 	.word	0x20000308
 8006e1c:	20000280 	.word	0x20000280
 8006e20:	200002c4 	.word	0x200002c4
 8006e24:	200003b5 	.word	0x200003b5

08006e28 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006e2c:	4b13      	ldr	r3, [pc, #76]	@ (8006e7c <trigger_hardware_emergency+0x54>)
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8006e32:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <trigger_hardware_emergency+0x58>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006e38:	f000 f85e 	bl	8006ef8 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006e3c:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <trigger_hardware_emergency+0x5c>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006e42:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <trigger_hardware_emergency+0x60>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006e48:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <trigger_hardware_emergency+0x64>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006e4e:	4b10      	ldr	r3, [pc, #64]	@ (8006e90 <trigger_hardware_emergency+0x68>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006e54:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <trigger_hardware_emergency+0x6c>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <trigger_hardware_emergency+0x70>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006e62:	4b0e      	ldr	r3, [pc, #56]	@ (8006e9c <trigger_hardware_emergency+0x74>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <trigger_hardware_emergency+0x78>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8006e72:	f000 f98b 	bl	800718c <exit_joy_mode>
	}
}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2000036c 	.word	0x2000036c
 8006e80:	20000375 	.word	0x20000375
 8006e84:	20000370 	.word	0x20000370
 8006e88:	20000374 	.word	0x20000374
 8006e8c:	2000036b 	.word	0x2000036b
 8006e90:	2000036a 	.word	0x2000036a
 8006e94:	20000308 	.word	0x20000308
 8006e98:	20000280 	.word	0x20000280
 8006e9c:	200002c4 	.word	0x200002c4
 8006ea0:	200003b5 	.word	0x200003b5

08006ea4 <clear_emergency_state>:

void clear_emergency_state(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <clear_emergency_state+0x3c>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <clear_emergency_state+0x40>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <clear_emergency_state+0x44>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006eba:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <clear_emergency_state+0x48>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006eca:	f005 faf1 	bl	800c4b0 <HAL_GPIO_WritePin>
	up_photo = false;
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <clear_emergency_state+0x4c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006ed4:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <clear_emergency_state+0x50>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
}
 8006eda:	bf00      	nop
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000036c 	.word	0x2000036c
 8006ee4:	20000375 	.word	0x20000375
 8006ee8:	20000370 	.word	0x20000370
 8006eec:	20000374 	.word	0x20000374
 8006ef0:	20000368 	.word	0x20000368
 8006ef4:	20000369 	.word	0x20000369

08006ef8 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006efc:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8006f5c <emergency_stop_all_motors+0x64>
 8006f00:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8006f60 <emergency_stop_all_motors+0x68>
 8006f04:	4817      	ldr	r0, [pc, #92]	@ (8006f64 <emergency_stop_all_motors+0x6c>)
 8006f06:	f7fa fa5f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006f0a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8006f5c <emergency_stop_all_motors+0x64>
 8006f0e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006f60 <emergency_stop_all_motors+0x68>
 8006f12:	4815      	ldr	r0, [pc, #84]	@ (8006f68 <emergency_stop_all_motors+0x70>)
 8006f14:	f7fa fa58 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006f18:	4b14      	ldr	r3, [pc, #80]	@ (8006f6c <emergency_stop_all_motors+0x74>)
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006f20:	4b13      	ldr	r3, [pc, #76]	@ (8006f70 <emergency_stop_all_motors+0x78>)
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006f28:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <emergency_stop_all_motors+0x74>)
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <emergency_stop_all_motors+0x78>)
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006f38:	480e      	ldr	r0, [pc, #56]	@ (8006f74 <emergency_stop_all_motors+0x7c>)
 8006f3a:	f7fa f9ff 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006f3e:	480e      	ldr	r0, [pc, #56]	@ (8006f78 <emergency_stop_all_motors+0x80>)
 8006f40:	f7fa f9fc 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006f44:	480d      	ldr	r0, [pc, #52]	@ (8006f7c <emergency_stop_all_motors+0x84>)
 8006f46:	f7fa f9f9 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f4a:	480d      	ldr	r0, [pc, #52]	@ (8006f80 <emergency_stop_all_motors+0x88>)
 8006f4c:	f7fa f9f6 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f50:	480b      	ldr	r0, [pc, #44]	@ (8006f80 <emergency_stop_all_motors+0x88>)
 8006f52:	f7fa f9f3 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	00000000 	.word	0x00000000
 8006f60:	44fa0000 	.word	0x44fa0000
 8006f64:	20000434 	.word	0x20000434
 8006f68:	20000480 	.word	0x20000480
 8006f6c:	20000280 	.word	0x20000280
 8006f70:	200002c4 	.word	0x200002c4
 8006f74:	20000584 	.word	0x20000584
 8006f78:	200005ac 	.word	0x200005ac
 8006f7c:	200005d4 	.word	0x200005d4
 8006f80:	200005fc 	.word	0x200005fc

08006f84 <update_safety_system>:

void update_safety_system(void) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8006f88:	4b3a      	ldr	r3, [pc, #232]	@ (8007074 <update_safety_system+0xf0>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d16e      	bne.n	800706e <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006f90:	4b39      	ldr	r3, [pc, #228]	@ (8007078 <update_safety_system+0xf4>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d11f      	bne.n	8006fd8 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006f98:	4b38      	ldr	r3, [pc, #224]	@ (800707c <update_safety_system+0xf8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a37      	ldr	r2, [pc, #220]	@ (800707c <update_safety_system+0xf8>)
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	2bf9      	cmp	r3, #249	@ 0xf9
 8006fa4:	d918      	bls.n	8006fd8 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006fa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fae:	f005 fa97 	bl	800c4e0 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006fb2:	4b33      	ldr	r3, [pc, #204]	@ (8007080 <update_safety_system+0xfc>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f083 0301 	eor.w	r3, r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	4b2c      	ldr	r3, [pc, #176]	@ (8007080 <update_safety_system+0xfc>)
 8006fd0:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800707c <update_safety_system+0xf8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006fd8:	4b27      	ldr	r3, [pc, #156]	@ (8007078 <update_safety_system+0xf4>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d134      	bne.n	800704a <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006fe0:	2110      	movs	r1, #16
 8006fe2:	4828      	ldr	r0, [pc, #160]	@ (8007084 <update_safety_system+0x100>)
 8006fe4:	f005 fa4c 	bl	800c480 <HAL_GPIO_ReadPin>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d120      	bne.n	8007030 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006fee:	4b23      	ldr	r3, [pc, #140]	@ (800707c <update_safety_system+0xf8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	4a21      	ldr	r2, [pc, #132]	@ (800707c <update_safety_system+0xf8>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	2bf9      	cmp	r3, #249	@ 0xf9
 8006ffa:	d926      	bls.n	800704a <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006ffc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007004:	f005 fa6c 	bl	800c4e0 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007008:	4b1d      	ldr	r3, [pc, #116]	@ (8007080 <update_safety_system+0xfc>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf14      	ite	ne
 8007012:	2301      	movne	r3, #1
 8007014:	2300      	moveq	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f083 0301 	eor.w	r3, r3, #1
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	4b16      	ldr	r3, [pc, #88]	@ (8007080 <update_safety_system+0xfc>)
 8007026:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007028:	4b14      	ldr	r3, [pc, #80]	@ (800707c <update_safety_system+0xf8>)
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e00c      	b.n	800704a <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007030:	2200      	movs	r2, #0
 8007032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800703a:	f005 fa39 	bl	800c4b0 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <update_safety_system+0xfc>)
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007044:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <update_safety_system+0xf8>)
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 800704a:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <update_safety_system+0xf4>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10e      	bne.n	8007070 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007052:	2200      	movs	r2, #0
 8007054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800705c:	f005 fa28 	bl	800c4b0 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007060:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <update_safety_system+0xfc>)
 8007062:	2200      	movs	r2, #0
 8007064:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <update_safety_system+0xf8>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e000      	b.n	8007070 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 800706e:	bf00      	nop
	}
}
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200003b5 	.word	0x200003b5
 8007078:	2000036c 	.word	0x2000036c
 800707c:	20000370 	.word	0x20000370
 8007080:	20000374 	.word	0x20000374
 8007084:	48000400 	.word	0x48000400

08007088 <is_emergency_active>:

bool is_emergency_active(void) {
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <is_emergency_active+0x1c>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf14      	ite	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2300      	moveq	r3, #0
 8007098:	b2db      	uxtb	r3, r3
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	2000036c 	.word	0x2000036c

080070a8 <enter_joy_mode>:

void enter_joy_mode(void) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80070ac:	f7ff ffec 	bl	8007088 <is_emergency_active>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d14c      	bne.n	8007150 <enter_joy_mode+0xa8>
 80070b6:	4b27      	ldr	r3, [pc, #156]	@ (8007154 <enter_joy_mode+0xac>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d148      	bne.n	8007150 <enter_joy_mode+0xa8>
 80070be:	4b26      	ldr	r3, [pc, #152]	@ (8007158 <enter_joy_mode+0xb0>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d144      	bne.n	8007150 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 80070c6:	4b24      	ldr	r3, [pc, #144]	@ (8007158 <enter_joy_mode+0xb0>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 80070cc:	4b23      	ldr	r3, [pc, #140]	@ (800715c <enter_joy_mode+0xb4>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 80070d2:	f000 f95f 	bl	8007394 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80070d6:	2201      	movs	r2, #1
 80070d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80070dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070e0:	f005 f9e6 	bl	800c4b0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 80070e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007160 <enter_joy_mode+0xb8>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80070ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007164 <enter_joy_mode+0xbc>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <enter_joy_mode+0xc0>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80070f6:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <enter_joy_mode+0xc4>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80070fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007170 <enter_joy_mode+0xc8>)
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8007106:	4b1b      	ldr	r3, [pc, #108]	@ (8007174 <enter_joy_mode+0xcc>)
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	4a18      	ldr	r2, [pc, #96]	@ (800716c <enter_joy_mode+0xc4>)
 800710c:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800710e:	4b1a      	ldr	r3, [pc, #104]	@ (8007178 <enter_joy_mode+0xd0>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <enter_joy_mode+0xc8>)
 8007114:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8007116:	4b15      	ldr	r3, [pc, #84]	@ (800716c <enter_joy_mode+0xc4>)
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 800711e:	4b14      	ldr	r3, [pc, #80]	@ (8007170 <enter_joy_mode+0xc8>)
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007126:	4b11      	ldr	r3, [pc, #68]	@ (800716c <enter_joy_mode+0xc4>)
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 800712e:	4b10      	ldr	r3, [pc, #64]	@ (8007170 <enter_joy_mode+0xc8>)
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007136:	4811      	ldr	r0, [pc, #68]	@ (800717c <enter_joy_mode+0xd4>)
 8007138:	f7fa f900 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 800713c:	4810      	ldr	r0, [pc, #64]	@ (8007180 <enter_joy_mode+0xd8>)
 800713e:	f7fa f8fd 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8007142:	4810      	ldr	r0, [pc, #64]	@ (8007184 <enter_joy_mode+0xdc>)
 8007144:	f7fa f8fa 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007148:	480f      	ldr	r0, [pc, #60]	@ (8007188 <enter_joy_mode+0xe0>)
 800714a:	f7fa f8f7 	bl	800133c <PID_CONTROLLER_Reset>
 800714e:	e000      	b.n	8007152 <enter_joy_mode+0xaa>
		return;
 8007150:	bf00      	nop
}
 8007152:	bd80      	pop	{r7, pc}
 8007154:	2000036b 	.word	0x2000036b
 8007158:	200003b5 	.word	0x200003b5
 800715c:	200003b4 	.word	0x200003b4
 8007160:	20000410 	.word	0x20000410
 8007164:	2000040c 	.word	0x2000040c
 8007168:	20000308 	.word	0x20000308
 800716c:	20000280 	.word	0x20000280
 8007170:	200002c4 	.word	0x200002c4
 8007174:	200004cc 	.word	0x200004cc
 8007178:	20000528 	.word	0x20000528
 800717c:	20000584 	.word	0x20000584
 8007180:	200005ac 	.word	0x200005ac
 8007184:	200005d4 	.word	0x200005d4
 8007188:	200005fc 	.word	0x200005fc

0800718c <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007190:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <exit_joy_mode+0xcc>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8007196:	4b31      	ldr	r3, [pc, #196]	@ (800725c <exit_joy_mode+0xd0>)
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 800719c:	f000 f8fa 	bl	8007394 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80071a0:	2200      	movs	r2, #0
 80071a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80071a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071aa:	f005 f981 	bl	800c4b0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 80071ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007260 <exit_joy_mode+0xd4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80071b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007264 <exit_joy_mode+0xd8>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80071ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <exit_joy_mode+0xdc>)
 80071bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071be:	4a2b      	ldr	r2, [pc, #172]	@ (800726c <exit_joy_mode+0xe0>)
 80071c0:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80071c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007270 <exit_joy_mode+0xe4>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007274 <exit_joy_mode+0xe8>)
 80071c8:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 80071ca:	4b28      	ldr	r3, [pc, #160]	@ (800726c <exit_joy_mode+0xe0>)
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80071d2:	4b28      	ldr	r3, [pc, #160]	@ (8007274 <exit_joy_mode+0xe8>)
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <exit_joy_mode+0xe0>)
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 80071e2:	4b22      	ldr	r3, [pc, #136]	@ (800726c <exit_joy_mode+0xe0>)
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 80071ea:	4b22      	ldr	r3, [pc, #136]	@ (8007274 <exit_joy_mode+0xe8>)
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80071f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007270 <exit_joy_mode+0xe4>)
 80071f4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80071f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007268 <exit_joy_mode+0xdc>)
 80071fa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80071fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8007278 <exit_joy_mode+0xec>
 8007202:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007206:	eef0 0a66 	vmov.f32	s1, s13
 800720a:	eeb0 0a47 	vmov.f32	s0, s14
 800720e:	481b      	ldr	r0, [pc, #108]	@ (800727c <exit_joy_mode+0xf0>)
 8007210:	f7fa fa55 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007214:	eef0 7a40 	vmov.f32	s15, s0
 8007218:	4b16      	ldr	r3, [pc, #88]	@ (8007274 <exit_joy_mode+0xe8>)
 800721a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 800721e:	4818      	ldr	r0, [pc, #96]	@ (8007280 <exit_joy_mode+0xf4>)
 8007220:	f7fa f88c 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007224:	4817      	ldr	r0, [pc, #92]	@ (8007284 <exit_joy_mode+0xf8>)
 8007226:	f7fa f889 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800722a:	4817      	ldr	r0, [pc, #92]	@ (8007288 <exit_joy_mode+0xfc>)
 800722c:	f7fa f886 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007230:	4816      	ldr	r0, [pc, #88]	@ (800728c <exit_joy_mode+0x100>)
 8007232:	f7fa f883 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007236:	4815      	ldr	r0, [pc, #84]	@ (800728c <exit_joy_mode+0x100>)
 8007238:	f7fa f880 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 800723c:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <exit_joy_mode+0x104>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <exit_joy_mode+0xe0>)
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800724a:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <exit_joy_mode+0xe8>)
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	200003b5 	.word	0x200003b5
 800725c:	200003b4 	.word	0x200003b4
 8007260:	20000410 	.word	0x20000410
 8007264:	2000040c 	.word	0x2000040c
 8007268:	200004cc 	.word	0x200004cc
 800726c:	20000280 	.word	0x20000280
 8007270:	20000528 	.word	0x20000528
 8007274:	200002c4 	.word	0x200002c4
 8007278:	447a0000 	.word	0x447a0000
 800727c:	2000065c 	.word	0x2000065c
 8007280:	20000584 	.word	0x20000584
 8007284:	200005ac 	.word	0x200005ac
 8007288:	200005d4 	.word	0x200005d4
 800728c:	200005fc 	.word	0x200005fc
 8007290:	20000308 	.word	0x20000308

08007294 <save_current_position>:

void save_current_position(void) {
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007298:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <save_current_position+0x5c>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b09      	cmp	r3, #9
 800729e:	d822      	bhi.n	80072e6 <save_current_position+0x52>
		saved_positions[saved_position_count].prismatic_pos =
 80072a0:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <save_current_position+0x5c>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
				prismatic_encoder.mm;
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <save_current_position+0x60>)
 80072a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
		saved_positions[saved_position_count].prismatic_pos =
 80072aa:	4913      	ldr	r1, [pc, #76]	@ (80072f8 <save_current_position+0x64>)
 80072ac:	00c3      	lsls	r3, r0, #3
 80072ae:	440b      	add	r3, r1
 80072b0:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos =
 80072b2:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <save_current_position+0x5c>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
				revolute_encoder.rads;
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <save_current_position+0x68>)
 80072ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
		saved_positions[saved_position_count].revolute_pos =
 80072bc:	490e      	ldr	r1, [pc, #56]	@ (80072f8 <save_current_position+0x64>)
 80072be:	00c3      	lsls	r3, r0, #3
 80072c0:	440b      	add	r3, r1
 80072c2:	3304      	adds	r3, #4
 80072c4:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <save_current_position+0x5c>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <save_current_position+0x5c>)
 80072d0:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 80072d2:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <save_current_position+0x5c>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d905      	bls.n	80072e6 <save_current_position+0x52>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 80072da:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <save_current_position+0x6c>)
 80072dc:	2203      	movs	r2, #3
 80072de:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80072e0:	4b08      	ldr	r3, [pc, #32]	@ (8007304 <save_current_position+0x70>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80072e6:	bf00      	nop
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20000408 	.word	0x20000408
 80072f4:	200004cc 	.word	0x200004cc
 80072f8:	200003b8 	.word	0x200003b8
 80072fc:	20000528 	.word	0x20000528
 8007300:	200003b4 	.word	0x200003b4
 8007304:	2000040c 	.word	0x2000040c

08007308 <start_position_playback>:

void start_position_playback(void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
	if (saved_position_count > 0) {
 800730e:	4b19      	ldr	r3, [pc, #100]	@ (8007374 <start_position_playback+0x6c>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d02a      	beq.n	800736c <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007316:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <start_position_playback+0x70>)
 8007318:	2204      	movs	r2, #4
 800731a:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 800731c:	4b17      	ldr	r3, [pc, #92]	@ (800737c <start_position_playback+0x74>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007322:	4b17      	ldr	r3, [pc, #92]	@ (8007380 <start_position_playback+0x78>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007328:	2201      	movs	r2, #1
 800732a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800732e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007332:	f005 f8bd 	bl	800c4b0 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <start_position_playback+0x7c>)
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 800733c:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <start_position_playback+0x80>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007342:	4b11      	ldr	r3, [pc, #68]	@ (8007388 <start_position_playback+0x80>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007348:	edd7 7a02 	vldr	s15, [r7, #8]
 800734c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800738c <start_position_playback+0x84>
 8007350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007354:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007390 <start_position_playback+0x88>
 8007358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800735c:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007360:	edd7 0a01 	vldr	s1, [r7, #4]
 8007364:	ed97 0a03 	vldr	s0, [r7, #12]
 8007368:	f7fe ff86 	bl	8006278 <start_combined_trajectory>
	}
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000408 	.word	0x20000408
 8007378:	200003b4 	.word	0x200003b4
 800737c:	20000409 	.word	0x20000409
 8007380:	20000414 	.word	0x20000414
 8007384:	20000410 	.word	0x20000410
 8007388:	200003b8 	.word	0x200003b8
 800738c:	43340000 	.word	0x43340000
 8007390:	40490fdb 	.word	0x40490fdb

08007394 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 800739a:	4b19      	ldr	r3, [pc, #100]	@ (8007400 <reset_joy_mode_data+0x6c>)
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 80073a0:	4b18      	ldr	r3, [pc, #96]	@ (8007404 <reset_joy_mode_data+0x70>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	e011      	b.n	80073d0 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 80073ac:	4a16      	ldr	r2, [pc, #88]	@ (8007408 <reset_joy_mode_data+0x74>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 80073ba:	4a13      	ldr	r2, [pc, #76]	@ (8007408 <reset_joy_mode_data+0x74>)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	3304      	adds	r3, #4
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3301      	adds	r3, #1
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	ddea      	ble.n	80073ac <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <reset_joy_mode_data+0x78>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80073dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <reset_joy_mode_data+0x7c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 80073e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <reset_joy_mode_data+0x80>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 80073e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <reset_joy_mode_data+0x84>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 80073ee:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <reset_joy_mode_data+0x88>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000408 	.word	0x20000408
 8007404:	20000409 	.word	0x20000409
 8007408:	200003b8 	.word	0x200003b8
 800740c:	2000040c 	.word	0x2000040c
 8007410:	20000410 	.word	0x20000410
 8007414:	20000414 	.word	0x20000414
 8007418:	20000418 	.word	0x20000418
 800741c:	20000419 	.word	0x20000419

08007420 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	ed2d 8b02 	vpush	{d8}
 8007428:	b091      	sub	sp, #68	@ 0x44
 800742a:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800742c:	2101      	movs	r1, #1
 800742e:	48a2      	ldr	r0, [pc, #648]	@ (80076b8 <update_joy_mode_velocity_control+0x298>)
 8007430:	f005 f826 	bl	800c480 <HAL_GPIO_ReadPin>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	bf14      	ite	ne
 800743a:	2301      	movne	r3, #1
 800743c:	2300      	moveq	r3, #0
 800743e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007442:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007446:	489c      	ldr	r0, [pc, #624]	@ (80076b8 <update_joy_mode_velocity_control+0x298>)
 8007448:	f005 f81a 	bl	800c480 <HAL_GPIO_ReadPin>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	bf14      	ite	ne
 8007452:	2301      	movne	r3, #1
 8007454:	2300      	moveq	r3, #0
 8007456:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	bool pris_moving = false;
 8007460:	2300      	movs	r3, #0
 8007462:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007466:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00d      	beq.n	800748a <update_joy_mode_velocity_control+0x6a>
 800746e:	4b93      	ldr	r3, [pc, #588]	@ (80076bc <update_joy_mode_velocity_control+0x29c>)
 8007470:	edd3 7a00 	vldr	s15, [r3]
 8007474:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80076c0 <update_joy_mode_velocity_control+0x2a0>
 8007478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800747c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007480:	dd03      	ble.n	800748a <update_joy_mode_velocity_control+0x6a>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007488:	e04b      	b.n	8007522 <update_joy_mode_velocity_control+0x102>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 800748a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00d      	beq.n	80074ae <update_joy_mode_velocity_control+0x8e>
 8007492:	4b8a      	ldr	r3, [pc, #552]	@ (80076bc <update_joy_mode_velocity_control+0x29c>)
 8007494:	edd3 7a00 	vldr	s15, [r3]
 8007498:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80076c4 <update_joy_mode_velocity_control+0x2a4>
 800749c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	d503      	bpl.n	80074ae <update_joy_mode_velocity_control+0x8e>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ac:	e039      	b.n	8007522 <update_joy_mode_velocity_control+0x102>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80074ae:	4b83      	ldr	r3, [pc, #524]	@ (80076bc <update_joy_mode_velocity_control+0x29c>)
 80074b0:	edd3 7a00 	vldr	s15, [r3]
 80074b4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80076c4 <update_joy_mode_velocity_control+0x2a4>
 80074b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	d50f      	bpl.n	80074e2 <update_joy_mode_velocity_control+0xc2>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80074c2:	4b81      	ldr	r3, [pc, #516]	@ (80076c8 <update_joy_mode_velocity_control+0x2a8>)
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 80074cc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80074d0:	f083 0301 	eor.w	r3, r3, #1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d023      	beq.n	8007522 <update_joy_mode_velocity_control+0x102>
			up_photo = false;
 80074da:	4a7c      	ldr	r2, [pc, #496]	@ (80076cc <update_joy_mode_velocity_control+0x2ac>)
 80074dc:	2300      	movs	r3, #0
 80074de:	7013      	strb	r3, [r2, #0]
 80074e0:	e01f      	b.n	8007522 <update_joy_mode_velocity_control+0x102>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80074e2:	4b76      	ldr	r3, [pc, #472]	@ (80076bc <update_joy_mode_velocity_control+0x29c>)
 80074e4:	edd3 7a00 	vldr	s15, [r3]
 80074e8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80076c0 <update_joy_mode_velocity_control+0x2a0>
 80074ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	dd0f      	ble.n	8007516 <update_joy_mode_velocity_control+0xf6>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80074f6:	4b76      	ldr	r3, [pc, #472]	@ (80076d0 <update_joy_mode_velocity_control+0x2b0>)
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007500:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007504:	f083 0301 	eor.w	r3, r3, #1
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <update_joy_mode_velocity_control+0x102>
			low_photo = false;
 800750e:	4a71      	ldr	r2, [pc, #452]	@ (80076d4 <update_joy_mode_velocity_control+0x2b4>)
 8007510:	2300      	movs	r3, #0
 8007512:	7013      	strb	r3, [r2, #0]
 8007514:	e005      	b.n	8007522 <update_joy_mode_velocity_control+0x102>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = false;
 800751c:	2300      	movs	r3, #0
 800751e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
	bool rev_moving = false;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 800752e:	4b6a      	ldr	r3, [pc, #424]	@ (80076d8 <update_joy_mode_velocity_control+0x2b8>)
 8007530:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007534:	220e      	movs	r2, #14
 8007536:	210f      	movs	r1, #15
 8007538:	eeb0 0a67 	vmov.f32	s0, s15
 800753c:	4867      	ldr	r0, [pc, #412]	@ (80076dc <update_joy_mode_velocity_control+0x2bc>)
 800753e:	f7fd f89b 	bl	8004678 <UnitConverter_angle>
 8007542:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007546:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800754a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80076e0 <update_joy_mode_velocity_control+0x2c0>
 800754e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	dd09      	ble.n	800756c <update_joy_mode_velocity_control+0x14c>
 8007558:	4b62      	ldr	r3, [pc, #392]	@ (80076e4 <update_joy_mode_velocity_control+0x2c4>)
 800755a:	edd3 7a00 	vldr	s15, [r3]
 800755e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80076c0 <update_joy_mode_velocity_control+0x2a0>
 8007562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756a:	dc12      	bgt.n	8007592 <update_joy_mode_velocity_control+0x172>
			|| (revolute_deg < -175.0f
 800756c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007570:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80076e8 <update_joy_mode_velocity_control+0x2c8>
 8007574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	d510      	bpl.n	80075a0 <update_joy_mode_velocity_control+0x180>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 800757e:	4b59      	ldr	r3, [pc, #356]	@ (80076e4 <update_joy_mode_velocity_control+0x2c4>)
 8007580:	edd3 7a00 	vldr	s15, [r3]
 8007584:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80076c4 <update_joy_mode_velocity_control+0x2a4>
 8007588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800758c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007590:	d506      	bpl.n	80075a0 <update_joy_mode_velocity_control+0x180>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800759e:	e025      	b.n	80075ec <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 80075a0:	4b50      	ldr	r3, [pc, #320]	@ (80076e4 <update_joy_mode_velocity_control+0x2c4>)
 80075a2:	edd3 7a00 	vldr	s15, [r3]
 80075a6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80076c0 <update_joy_mode_velocity_control+0x2a0>
 80075aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	dd05      	ble.n	80075c0 <update_joy_mode_velocity_control+0x1a0>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 80075b4:	4b4d      	ldr	r3, [pc, #308]	@ (80076ec <update_joy_mode_velocity_control+0x2cc>)
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80075be:	e015      	b.n	80075ec <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 80075c0:	4b48      	ldr	r3, [pc, #288]	@ (80076e4 <update_joy_mode_velocity_control+0x2c4>)
 80075c2:	edd3 7a00 	vldr	s15, [r3]
 80075c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80076c4 <update_joy_mode_velocity_control+0x2a4>
 80075ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	d505      	bpl.n	80075e0 <update_joy_mode_velocity_control+0x1c0>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80075d4:	4b46      	ldr	r3, [pc, #280]	@ (80076f0 <update_joy_mode_velocity_control+0x2d0>)
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80075de:	e005      	b.n	80075ec <update_joy_mode_velocity_control+0x1cc>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	}

	/* PRISMATIC AXIS CONTROL */
	if (pris_moving) {
 80075ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 808f 	beq.w	8007714 <update_joy_mode_velocity_control+0x2f4>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 80075f6:	4b3f      	ldr	r3, [pc, #252]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 80075f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80075fc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007600:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007604:	4b3b      	ldr	r3, [pc, #236]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 8007606:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800760a:	4b3a      	ldr	r3, [pc, #232]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 800760c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007610:	eeb0 0a67 	vmov.f32	s0, s15
 8007614:	4838      	ldr	r0, [pc, #224]	@ (80076f8 <update_joy_mode_velocity_control+0x2d8>)
 8007616:	f7f9 fdff 	bl	8001218 <PID_CONTROLLER_Compute>
 800761a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800761e:	4b37      	ldr	r3, [pc, #220]	@ (80076fc <update_joy_mode_velocity_control+0x2dc>)
 8007620:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	f7f9 fa4c 	bl	8000ac4 <__aeabi_d2iz>
 800762c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800762e:	4b33      	ldr	r3, [pc, #204]	@ (80076fc <update_joy_mode_velocity_control+0x2dc>)
 8007630:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007634:	4690      	mov	r8, r2
 8007636:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f9 fa41 	bl	8000ac4 <__aeabi_d2iz>
 8007642:	4603      	mov	r3, r0
 8007644:	4619      	mov	r1, r3
 8007646:	4620      	mov	r0, r4
 8007648:	eeb0 0a48 	vmov.f32	s0, s16
 800764c:	f7f9 fd82 	bl	8001154 <PWM_Satuation>
 8007650:	ee07 0a90 	vmov	s15, r0
 8007654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007658:	4b26      	ldr	r3, [pc, #152]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 800765a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800765e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8007662:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007700 <update_joy_mode_velocity_control+0x2e0>
 8007666:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800766a:	eeb0 0a47 	vmov.f32	s0, s14
 800766e:	4825      	ldr	r0, [pc, #148]	@ (8007704 <update_joy_mode_velocity_control+0x2e4>)
 8007670:	f7fa f910 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8007674:	eef0 7a40 	vmov.f32	s15, s0
 8007678:	4b1e      	ldr	r3, [pc, #120]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 800767a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800767e:	4b16      	ldr	r3, [pc, #88]	@ (80076d8 <update_joy_mode_velocity_control+0x2b8>)
 8007680:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007684:	4b20      	ldr	r3, [pc, #128]	@ (8007708 <update_joy_mode_velocity_control+0x2e8>)
 8007686:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800768a:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8007700 <update_joy_mode_velocity_control+0x2e0>
 800768e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007692:	eeb0 1a66 	vmov.f32	s2, s13
 8007696:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800770c <update_joy_mode_velocity_control+0x2ec>
 800769a:	eeb0 0a47 	vmov.f32	s0, s14
 800769e:	481c      	ldr	r0, [pc, #112]	@ (8007710 <update_joy_mode_velocity_control+0x2f0>)
 80076a0:	f7fa f98b 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80076a4:	eef0 7a40 	vmov.f32	s15, s0
 80076a8:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 80076aa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		prismatic_axis.position = prismatic_encoder.mm;
 80076ae:	4b16      	ldr	r3, [pc, #88]	@ (8007708 <update_joy_mode_velocity_control+0x2e8>)
 80076b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b2:	4a10      	ldr	r2, [pc, #64]	@ (80076f4 <update_joy_mode_velocity_control+0x2d4>)
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e09f      	b.n	80077f8 <update_joy_mode_velocity_control+0x3d8>
 80076b8:	48000400 	.word	0x48000400
 80076bc:	2000199c 	.word	0x2000199c
 80076c0:	42200000 	.word	0x42200000
 80076c4:	c2200000 	.word	0xc2200000
 80076c8:	43480000 	.word	0x43480000
 80076cc:	20000368 	.word	0x20000368
 80076d0:	c3480000 	.word	0xc3480000
 80076d4:	20000369 	.word	0x20000369
 80076d8:	20000528 	.word	0x20000528
 80076dc:	200008c0 	.word	0x200008c0
 80076e0:	432f0000 	.word	0x432f0000
 80076e4:	200019a0 	.word	0x200019a0
 80076e8:	c32f0000 	.word	0xc32f0000
 80076ec:	40600000 	.word	0x40600000
 80076f0:	c0600000 	.word	0xc0600000
 80076f4:	20000280 	.word	0x20000280
 80076f8:	200005ac 	.word	0x200005ac
 80076fc:	20000080 	.word	0x20000080
 8007700:	447a0000 	.word	0x447a0000
 8007704:	2000064c 	.word	0x2000064c
 8007708:	200004cc 	.word	0x200004cc
 800770c:	00000000 	.word	0x00000000
 8007710:	20000650 	.word	0x20000650
	} else {
		// Not moving - hold current position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007714:	4b81      	ldr	r3, [pc, #516]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007716:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 800771a:	4b81      	ldr	r3, [pc, #516]	@ (8007920 <update_joy_mode_velocity_control+0x500>)
 800771c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007720:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007724:	4b7d      	ldr	r3, [pc, #500]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007726:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 800772a:	4b7c      	ldr	r3, [pc, #496]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 800772c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007730:	eeb0 0a67 	vmov.f32	s0, s15
 8007734:	487b      	ldr	r0, [pc, #492]	@ (8007924 <update_joy_mode_velocity_control+0x504>)
 8007736:	f7f9 fd6f 	bl	8001218 <PID_CONTROLLER_Compute>
 800773a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 800773e:	4b7a      	ldr	r3, [pc, #488]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 8007740:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	f7f9 f9bc 	bl	8000ac4 <__aeabi_d2iz>
 800774c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 800774e:	4b76      	ldr	r3, [pc, #472]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 8007750:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007754:	4692      	mov	sl, r2
 8007756:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_vel = PWM_Satuation(
 800775a:	4650      	mov	r0, sl
 800775c:	4659      	mov	r1, fp
 800775e:	f7f9 f9b1 	bl	8000ac4 <__aeabi_d2iz>
 8007762:	4603      	mov	r3, r0
 8007764:	4619      	mov	r1, r3
 8007766:	4620      	mov	r0, r4
 8007768:	eeb0 0a48 	vmov.f32	s0, s16
 800776c:	f7f9 fcf2 	bl	8001154 <PWM_Satuation>
 8007770:	ee07 0a90 	vmov	s15, r0
 8007774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007778:	4b68      	ldr	r3, [pc, #416]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 800777a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 800777e:	4b67      	ldr	r3, [pc, #412]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007780:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007784:	4b65      	ldr	r3, [pc, #404]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007786:	edd3 7a07 	vldr	s15, [r3, #28]
 800778a:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800778e:	4b63      	ldr	r3, [pc, #396]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007790:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007794:	4b61      	ldr	r3, [pc, #388]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007796:	edd3 7a06 	vldr	s15, [r3, #24]
 800779a:	eeb0 0a67 	vmov.f32	s0, s15
 800779e:	4863      	ldr	r0, [pc, #396]	@ (800792c <update_joy_mode_velocity_control+0x50c>)
 80077a0:	f7f9 fd3a 	bl	8001218 <PID_CONTROLLER_Compute>
 80077a4:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80077a8:	4b5f      	ldr	r3, [pc, #380]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 80077aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f9 f987 	bl	8000ac4 <__aeabi_d2iz>
 80077b6:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80077b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 80077ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80077be:	4615      	mov	r5, r2
 80077c0:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80077c4:	4628      	mov	r0, r5
 80077c6:	4631      	mov	r1, r6
 80077c8:	f7f9 f97c 	bl	8000ac4 <__aeabi_d2iz>
 80077cc:	4603      	mov	r3, r0
 80077ce:	4619      	mov	r1, r3
 80077d0:	4620      	mov	r0, r4
 80077d2:	eeb0 0a48 	vmov.f32	s0, s16
 80077d6:	f7f9 fcbd 	bl	8001154 <PWM_Satuation>
 80077da:	ee07 0a90 	vmov	s15, r0
 80077de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077e2:	4b4e      	ldr	r3, [pc, #312]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 80077e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80077e8:	4b4c      	ldr	r3, [pc, #304]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80077f0:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80077f8:	4b48      	ldr	r3, [pc, #288]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 80077fa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80077fe:	4b47      	ldr	r3, [pc, #284]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007800:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007804:	4b45      	ldr	r3, [pc, #276]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007806:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800780a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007812:	4b42      	ldr	r3, [pc, #264]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 8007814:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007818:	4b40      	ldr	r3, [pc, #256]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 800781a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800781e:	4b42      	ldr	r3, [pc, #264]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 8007820:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	f7f9 f94c 	bl	8000ac4 <__aeabi_d2iz>
 800782c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800782e:	4b3e      	ldr	r3, [pc, #248]	@ (8007928 <update_joy_mode_velocity_control+0x508>)
 8007830:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007834:	623a      	str	r2, [r7, #32]
 8007836:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800783a:	627b      	str	r3, [r7, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800783c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007840:	f7f9 f940 	bl	8000ac4 <__aeabi_d2iz>
 8007844:	4603      	mov	r3, r0
 8007846:	4619      	mov	r1, r3
 8007848:	4620      	mov	r0, r4
 800784a:	eeb0 0a48 	vmov.f32	s0, s16
 800784e:	f7f9 fc81 	bl	8001154 <PWM_Satuation>
 8007852:	ee07 0a90 	vmov	s15, r0
 8007856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800785a:	4b30      	ldr	r3, [pc, #192]	@ (800791c <update_joy_mode_velocity_control+0x4fc>)
 800785c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL */
	if (rev_moving) {
 8007860:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007864:	2b00      	cmp	r3, #0
 8007866:	d071      	beq.n	800794c <update_joy_mode_velocity_control+0x52c>
		// Moving - use velocity control
		revolute_axis.vel_error = rev_command_vel
				- revolute_axis.kalman_velocity;
 8007868:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 800786a:	edd3 7a07 	vldr	s15, [r3, #28]
 800786e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8007872:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = rev_command_vel
 8007876:	4b2e      	ldr	r3, [pc, #184]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 8007878:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 800787c:	4b2c      	ldr	r3, [pc, #176]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 800787e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007882:	eeb0 0a67 	vmov.f32	s0, s15
 8007886:	482b      	ldr	r0, [pc, #172]	@ (8007934 <update_joy_mode_velocity_control+0x514>)
 8007888:	f7f9 fcc6 	bl	8001218 <PID_CONTROLLER_Compute>
 800788c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8007890:	4b29      	ldr	r3, [pc, #164]	@ (8007938 <update_joy_mode_velocity_control+0x518>)
 8007892:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007896:	4610      	mov	r0, r2
 8007898:	4619      	mov	r1, r3
 800789a:	f7f9 f913 	bl	8000ac4 <__aeabi_d2iz>
 800789e:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80078a0:	4b25      	ldr	r3, [pc, #148]	@ (8007938 <update_joy_mode_velocity_control+0x518>)
 80078a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80078a6:	61ba      	str	r2, [r7, #24]
 80078a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	61fb      	str	r3, [r7, #28]
		revolute_axis.command_pos = PWM_Satuation(
 80078ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078b2:	f7f9 f907 	bl	8000ac4 <__aeabi_d2iz>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4619      	mov	r1, r3
 80078ba:	4620      	mov	r0, r4
 80078bc:	eeb0 0a48 	vmov.f32	s0, s16
 80078c0:	f7f9 fc48 	bl	8001154 <PWM_Satuation>
 80078c4:	ee07 0a90 	vmov	s15, r0
 80078c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078cc:	4b18      	ldr	r3, [pc, #96]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 80078ce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80078d2:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80078d6:	4819      	ldr	r0, [pc, #100]	@ (800793c <update_joy_mode_velocity_control+0x51c>)
 80078d8:	f7f9 fe5e 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80078dc:	eef0 7a40 	vmov.f32	s15, s0
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 80078e2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				rev_command_vel);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80078e6:	4b16      	ldr	r3, [pc, #88]	@ (8007940 <update_joy_mode_velocity_control+0x520>)
 80078e8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80078ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007920 <update_joy_mode_velocity_control+0x500>)
 80078ee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80078f2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007944 <update_joy_mode_velocity_control+0x524>
 80078f6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80078fa:	eef0 0a66 	vmov.f32	s1, s13
 80078fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007902:	4811      	ldr	r0, [pc, #68]	@ (8007948 <update_joy_mode_velocity_control+0x528>)
 8007904:	f7f9 fedb 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007908:	eef0 7a40 	vmov.f32	s15, s0
 800790c:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 800790e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		revolute_axis.position = revolute_encoder.rads;
 8007912:	4b0b      	ldr	r3, [pc, #44]	@ (8007940 <update_joy_mode_velocity_control+0x520>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	4a06      	ldr	r2, [pc, #24]	@ (8007930 <update_joy_mode_velocity_control+0x510>)
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	e0d1      	b.n	8007ac0 <update_joy_mode_velocity_control+0x6a0>
 800791c:	20000280 	.word	0x20000280
 8007920:	200004cc 	.word	0x200004cc
 8007924:	20000584 	.word	0x20000584
 8007928:	20000080 	.word	0x20000080
 800792c:	200005ac 	.word	0x200005ac
 8007930:	200002c4 	.word	0x200002c4
 8007934:	200005fc 	.word	0x200005fc
 8007938:	20000000 	.word	0x20000000
 800793c:	20000658 	.word	0x20000658
 8007940:	20000528 	.word	0x20000528
 8007944:	447a0000 	.word	0x447a0000
 8007948:	2000065c 	.word	0x2000065c
	} else {
		// Not moving - hold current position with position control
		revolute_axis.position = revolute_encoder.rads;
 800794c:	4b84      	ldr	r3, [pc, #528]	@ (8007b60 <update_joy_mode_velocity_control+0x740>)
 800794e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007950:	4a84      	ldr	r2, [pc, #528]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007952:	6013      	str	r3, [r2, #0]

		float normalized_position = normalize_angle(revolute_encoder.rads);
 8007954:	4b82      	ldr	r3, [pc, #520]	@ (8007b60 <update_joy_mode_velocity_control+0x740>)
 8007956:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800795a:	eeb0 0a67 	vmov.f32	s0, s15
 800795e:	f7fe fba1 	bl	80060a4 <normalize_angle>
 8007962:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8007966:	4b7f      	ldr	r3, [pc, #508]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007968:	ed93 7a00 	vldr	s14, [r3]
 800796c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007974:	4b7b      	ldr	r3, [pc, #492]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007976:	edc3 7a05 	vstr	s15, [r3, #20]

		// Handle angle wrapping for position error
		if (revolute_axis.pos_error > PI)
 800797a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 800797c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007980:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8007b68 <update_joy_mode_velocity_control+0x748>
 8007984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798c:	dd09      	ble.n	80079a2 <update_joy_mode_velocity_control+0x582>
			revolute_axis.pos_error -= 2.0f * PI;
 800798e:	4b75      	ldr	r3, [pc, #468]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007990:	edd3 7a05 	vldr	s15, [r3, #20]
 8007994:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8007b6c <update_joy_mode_velocity_control+0x74c>
 8007998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800799c:	4b71      	ldr	r3, [pc, #452]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 800799e:	edc3 7a05 	vstr	s15, [r3, #20]
		if (revolute_axis.pos_error < -PI)
 80079a2:	4b70      	ldr	r3, [pc, #448]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 80079a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80079a8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8007b70 <update_joy_mode_velocity_control+0x750>
 80079ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	d509      	bpl.n	80079ca <update_joy_mode_velocity_control+0x5aa>
			revolute_axis.pos_error += 2.0f * PI;
 80079b6:	4b6b      	ldr	r3, [pc, #428]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 80079b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80079bc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8007b6c <update_joy_mode_velocity_control+0x74c>
 80079c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079c4:	4b67      	ldr	r3, [pc, #412]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 80079c6:	edc3 7a05 	vstr	s15, [r3, #20]

		revolute_axis.command_vel = PWM_Satuation(
 80079ca:	4b66      	ldr	r3, [pc, #408]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 80079cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80079d0:	eeb0 0a67 	vmov.f32	s0, s15
 80079d4:	4867      	ldr	r0, [pc, #412]	@ (8007b74 <update_joy_mode_velocity_control+0x754>)
 80079d6:	f7f9 fc1f 	bl	8001218 <PID_CONTROLLER_Compute>
 80079da:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_position_pid,
						revolute_axis.pos_error),
				ZGX45RGG_150RPM_Constant.qd_max,
 80079de:	4b66      	ldr	r3, [pc, #408]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 80079e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		revolute_axis.command_vel = PWM_Satuation(
 80079e4:	4610      	mov	r0, r2
 80079e6:	4619      	mov	r1, r3
 80079e8:	f7f9 f86c 	bl	8000ac4 <__aeabi_d2iz>
 80079ec:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.qd_max);
 80079ee:	4b62      	ldr	r3, [pc, #392]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 80079f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80079f4:	613a      	str	r2, [r7, #16]
 80079f6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80079fa:	617b      	str	r3, [r7, #20]
		revolute_axis.command_vel = PWM_Satuation(
 80079fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a00:	f7f9 f860 	bl	8000ac4 <__aeabi_d2iz>
 8007a04:	4603      	mov	r3, r0
 8007a06:	4619      	mov	r1, r3
 8007a08:	4620      	mov	r0, r4
 8007a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a0e:	f7f9 fba1 	bl	8001154 <PWM_Satuation>
 8007a12:	ee07 0a90 	vmov	s15, r0
 8007a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a1a:	4b52      	ldr	r3, [pc, #328]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a1c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		revolute_axis.vel_error = revolute_axis.command_vel
 8007a20:	4b50      	ldr	r3, [pc, #320]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a22:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8007a26:	4b4f      	ldr	r3, [pc, #316]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a28:	edd3 7a07 	vldr	s15, [r3, #28]
 8007a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8007a30:	4b4c      	ldr	r3, [pc, #304]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a32:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8007a36:	4b4b      	ldr	r3, [pc, #300]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a38:	edd3 7a06 	vldr	s15, [r3, #24]
 8007a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a40:	484e      	ldr	r0, [pc, #312]	@ (8007b7c <update_joy_mode_velocity_control+0x75c>)
 8007a42:	f7f9 fbe9 	bl	8001218 <PID_CONTROLLER_Compute>
 8007a46:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8007a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 8007a4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7f9 f836 	bl	8000ac4 <__aeabi_d2iz>
 8007a58:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8007a5a:	4b47      	ldr	r3, [pc, #284]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 8007a5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007a60:	60ba      	str	r2, [r7, #8]
 8007a62:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007a66:	60fb      	str	r3, [r7, #12]
		revolute_axis.command_pos = PWM_Satuation(
 8007a68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a6c:	f7f9 f82a 	bl	8000ac4 <__aeabi_d2iz>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4619      	mov	r1, r3
 8007a74:	4620      	mov	r0, r4
 8007a76:	eeb0 0a48 	vmov.f32	s0, s16
 8007a7a:	f7f9 fb6b 	bl	8001154 <PWM_Satuation>
 8007a7e:	ee07 0a90 	vmov	s15, r0
 8007a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a86:	4b37      	ldr	r3, [pc, #220]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a88:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Always include DFD for gravity compensation, but no FFD when holding
		revolute_axis.ffd = 0.0f;
 8007a8c:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007a94:	4b32      	ldr	r3, [pc, #200]	@ (8007b60 <update_joy_mode_velocity_control+0x740>)
 8007a96:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007a9a:	4b39      	ldr	r3, [pc, #228]	@ (8007b80 <update_joy_mode_velocity_control+0x760>)
 8007a9c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007aa0:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8007b84 <update_joy_mode_velocity_control+0x764>
 8007aa4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007aa8:	eef0 0a66 	vmov.f32	s1, s13
 8007aac:	eeb0 0a47 	vmov.f32	s0, s14
 8007ab0:	4835      	ldr	r0, [pc, #212]	@ (8007b88 <update_joy_mode_velocity_control+0x768>)
 8007ab2:	f7f9 fe04 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007ab6:	eef0 7a40 	vmov.f32	s15, s0
 8007aba:	4b2a      	ldr	r3, [pc, #168]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007abc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//
//    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
//    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;

//    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
    revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 8007ac0:	4b28      	ldr	r3, [pc, #160]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007ac2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007ac6:	4b27      	ldr	r3, [pc, #156]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007ac8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007acc:	4b25      	ldr	r3, [pc, #148]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007ace:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ada:	4b22      	ldr	r3, [pc, #136]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007adc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007ae2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007ae6:	4b24      	ldr	r3, [pc, #144]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 8007ae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007aec:	4610      	mov	r0, r2
 8007aee:	4619      	mov	r1, r3
 8007af0:	f7f8 ffe8 	bl	8000ac4 <__aeabi_d2iz>
 8007af4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007af6:	4b20      	ldr	r3, [pc, #128]	@ (8007b78 <update_joy_mode_velocity_control+0x758>)
 8007af8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007afc:	603a      	str	r2, [r7, #0]
 8007afe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007b02:	607b      	str	r3, [r7, #4]
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b08:	f7f8 ffdc 	bl	8000ac4 <__aeabi_d2iz>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4620      	mov	r0, r4
 8007b12:	eeb0 0a48 	vmov.f32	s0, s16
 8007b16:	f7f9 fb1d 	bl	8001154 <PWM_Satuation>
 8007b1a:	ee07 0a90 	vmov	s15, r0
 8007b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b22:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007b24:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <update_joy_mode_velocity_control+0x76c>)
 8007b2a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b2e:	eef0 0a67 	vmov.f32	s1, s15
 8007b32:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007b90 <update_joy_mode_velocity_control+0x770>
 8007b36:	4817      	ldr	r0, [pc, #92]	@ (8007b94 <update_joy_mode_velocity_control+0x774>)
 8007b38:	f7f9 fc46 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8007b3c:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <update_joy_mode_velocity_control+0x744>)
 8007b3e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b42:	eef0 0a67 	vmov.f32	s1, s15
 8007b46:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8007b90 <update_joy_mode_velocity_control+0x770>
 8007b4a:	4813      	ldr	r0, [pc, #76]	@ (8007b98 <update_joy_mode_velocity_control+0x778>)
 8007b4c:	f7f9 fc3c 	bl	80013c8 <MDXX_set_range>
}
 8007b50:	bf00      	nop
 8007b52:	3744      	adds	r7, #68	@ 0x44
 8007b54:	46bd      	mov	sp, r7
 8007b56:	ecbd 8b02 	vpop	{d8}
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000528 	.word	0x20000528
 8007b64:	200002c4 	.word	0x200002c4
 8007b68:	40490fdb 	.word	0x40490fdb
 8007b6c:	40c90fdb 	.word	0x40c90fdb
 8007b70:	c0490fdb 	.word	0xc0490fdb
 8007b74:	200005d4 	.word	0x200005d4
 8007b78:	20000000 	.word	0x20000000
 8007b7c:	200005fc 	.word	0x200005fc
 8007b80:	200004cc 	.word	0x200004cc
 8007b84:	447a0000 	.word	0x447a0000
 8007b88:	2000065c 	.word	0x2000065c
 8007b8c:	20000280 	.word	0x20000280
 8007b90:	44fa0000 	.word	0x44fa0000
 8007b94:	20000434 	.word	0x20000434
 8007b98:	20000480 	.word	0x20000480

08007b9c <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007ba0:	4b14      	ldr	r3, [pc, #80]	@ (8007bf4 <update_joy_mode_pilot_light+0x58>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d122      	bne.n	8007bee <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8007ba8:	4b13      	ldr	r3, [pc, #76]	@ (8007bf8 <update_joy_mode_pilot_light+0x5c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	4a12      	ldr	r2, [pc, #72]	@ (8007bf8 <update_joy_mode_pilot_light+0x5c>)
 8007bb0:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8007bb2:	4b11      	ldr	r3, [pc, #68]	@ (8007bf8 <update_joy_mode_pilot_light+0x5c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bba:	d318      	bcc.n	8007bee <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007bbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007bc4:	f004 fc8c 	bl	800c4e0 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bfc <update_joy_mode_pilot_light+0x60>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	2300      	moveq	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <update_joy_mode_pilot_light+0x60>)
 8007be6:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007be8:	4b03      	ldr	r3, [pc, #12]	@ (8007bf8 <update_joy_mode_pilot_light+0x5c>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007bee:	bf00      	nop
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200003b4 	.word	0x200003b4
 8007bf8:	2000040c 	.word	0x2000040c
 8007bfc:	20000410 	.word	0x20000410

08007c00 <update_joy_mode>:

void update_joy_mode(void) {
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	ed2d 8b02 	vpush	{d8}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8007c0a:	4b8f      	ldr	r3, [pc, #572]	@ (8007e48 <update_joy_mode+0x248>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f083 0301 	eor.w	r3, r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 81c2 	bne.w	8007f9e <update_joy_mode+0x39e>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8007c1a:	4b8c      	ldr	r3, [pc, #560]	@ (8007e4c <update_joy_mode+0x24c>)
 8007c1c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007c20:	eeb0 0a67 	vmov.f32	s0, s15
 8007c24:	f7fe fa3e 	bl	80060a4 <normalize_angle>
 8007c28:	eef0 7a40 	vmov.f32	s15, s0
 8007c2c:	4b88      	ldr	r3, [pc, #544]	@ (8007e50 <update_joy_mode+0x250>)
 8007c2e:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8007c32:	4b88      	ldr	r3, [pc, #544]	@ (8007e54 <update_joy_mode+0x254>)
 8007c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c36:	4a88      	ldr	r2, [pc, #544]	@ (8007e58 <update_joy_mode+0x258>)
 8007c38:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007c3a:	4b85      	ldr	r3, [pc, #532]	@ (8007e50 <update_joy_mode+0x250>)
 8007c3c:	edd3 7a00 	vldr	s15, [r3]
 8007c40:	220e      	movs	r2, #14
 8007c42:	210f      	movs	r1, #15
 8007c44:	eeb0 0a67 	vmov.f32	s0, s15
 8007c48:	4884      	ldr	r0, [pc, #528]	@ (8007e5c <update_joy_mode+0x25c>)
 8007c4a:	f7fc fd15 	bl	8004678 <UnitConverter_angle>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	4b83      	ldr	r3, [pc, #524]	@ (8007e60 <update_joy_mode+0x260>)
 8007c54:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8007c58:	4b82      	ldr	r3, [pc, #520]	@ (8007e64 <update_joy_mode+0x264>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	f200 819f 	bhi.w	8007fa2 <update_joy_mode+0x3a2>
 8007c64:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <update_joy_mode+0x6c>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c81 	.word	0x08007c81
 8007c70:	08007c87 	.word	0x08007c87
 8007c74:	08007c8d 	.word	0x08007c8d
 8007c78:	08007c93 	.word	0x08007c93
 8007c7c:	08007f99 	.word	0x08007f99
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8007c80:	f7ff fbce 	bl	8007420 <update_joy_mode_velocity_control>
		break;
 8007c84:	e190      	b.n	8007fa8 <update_joy_mode+0x3a8>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8007c86:	f7ff fbcb 	bl	8007420 <update_joy_mode_velocity_control>
		break;
 8007c8a:	e18d      	b.n	8007fa8 <update_joy_mode+0x3a8>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8007c8c:	f7ff ff86 	bl	8007b9c <update_joy_mode_pilot_light>
		break;
 8007c90:	e18a      	b.n	8007fa8 <update_joy_mode+0x3a8>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8007c92:	4b75      	ldr	r3, [pc, #468]	@ (8007e68 <update_joy_mode+0x268>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	f200 8166 	bhi.w	8007f68 <update_joy_mode+0x368>
 8007c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <update_joy_mode+0xa4>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007d41 	.word	0x08007d41
 8007cac:	08007d65 	.word	0x08007d65
 8007cb0:	08007e9d 	.word	0x08007e9d
 8007cb4:	08007f43 	.word	0x08007f43
 8007cb8:	08007f61 	.word	0x08007f61
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 8007cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8007e6c <update_joy_mode+0x26c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8007e6c <update_joy_mode+0x26c>)
 8007cc4:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8007cc6:	4b69      	ldr	r3, [pc, #420]	@ (8007e6c <update_joy_mode+0x26c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007cce:	f0c0 814d 	bcc.w	8007f6c <update_joy_mode+0x36c>
				playback_position_index++;
 8007cd2:	4b67      	ldr	r3, [pc, #412]	@ (8007e70 <update_joy_mode+0x270>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4b65      	ldr	r3, [pc, #404]	@ (8007e70 <update_joy_mode+0x270>)
 8007cdc:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 8007cde:	4b64      	ldr	r3, [pc, #400]	@ (8007e70 <update_joy_mode+0x270>)
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	4b64      	ldr	r3, [pc, #400]	@ (8007e74 <update_joy_mode+0x274>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d224      	bcs.n	8007d34 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8007cea:	4b61      	ldr	r3, [pc, #388]	@ (8007e70 <update_joy_mode+0x270>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 8007cee:	4a62      	ldr	r2, [pc, #392]	@ (8007e78 <update_joy_mode+0x278>)
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8007cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8007e70 <update_joy_mode+0x270>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8007cfc:	4a5e      	ldr	r2, [pc, #376]	@ (8007e78 <update_joy_mode+0x278>)
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d0c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8007e7c <update_joy_mode+0x27c>
 8007d10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d14:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8007e80 <update_joy_mode+0x280>
 8007d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d1c:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 8007d20:	edd7 0a01 	vldr	s1, [r7, #4]
 8007d24:	ed97 0a03 	vldr	s0, [r7, #12]
 8007d28:	f7fe faa6 	bl	8006278 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8007d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e6c <update_joy_mode+0x26c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]

					// Start homing sequence after a short delay
					start_homing_sequence(false); // false = manual homing (not startup)
				}
			}
			break;
 8007d32:	e11b      	b.n	8007f6c <update_joy_mode+0x36c>
					exit_joy_mode();
 8007d34:	f7ff fa2a 	bl	800718c <exit_joy_mode>
					start_homing_sequence(false); // false = manual homing (not startup)
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f7fd fb15 	bl	8005368 <start_homing_sequence>
			break;
 8007d3e:	e115      	b.n	8007f6c <update_joy_mode+0x36c>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007d40:	4b50      	ldr	r3, [pc, #320]	@ (8007e84 <update_joy_mode+0x284>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	4a4f      	ldr	r2, [pc, #316]	@ (8007e84 <update_joy_mode+0x284>)
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	f240 810e 	bls.w	8007f70 <update_joy_mode+0x370>
				prismatic_axis.trajectory_active = true;
 8007d54:	4b40      	ldr	r3, [pc, #256]	@ (8007e58 <update_joy_mode+0x258>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8007d5c:	4b42      	ldr	r3, [pc, #264]	@ (8007e68 <update_joy_mode+0x268>)
 8007d5e:	2202      	movs	r2, #2
 8007d60:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007d62:	e105      	b.n	8007f70 <update_joy_mode+0x370>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007d64:	4b3c      	ldr	r3, [pc, #240]	@ (8007e58 <update_joy_mode+0x258>)
 8007d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8102 	beq.w	8007f74 <update_joy_mode+0x374>
 8007d70:	4b45      	ldr	r3, [pc, #276]	@ (8007e88 <update_joy_mode+0x288>)
 8007d72:	7c1b      	ldrb	r3, [r3, #16]
 8007d74:	f083 0301 	eor.w	r3, r3, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80fa 	beq.w	8007f74 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007d80:	4b35      	ldr	r3, [pc, #212]	@ (8007e58 <update_joy_mode+0x258>)
 8007d82:	ed93 8a03 	vldr	s16, [r3, #12]
 8007d86:	4b34      	ldr	r3, [pc, #208]	@ (8007e58 <update_joy_mode+0x258>)
 8007d88:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e8c <update_joy_mode+0x28c>)
 8007d8e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007d92:	4610      	mov	r0, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	f7f8 fedd 	bl	8000b54 <__aeabi_d2f>
 8007d9a:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e8c <update_joy_mode+0x28c>)
 8007d9e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007da2:	4610      	mov	r0, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	f7f8 fed5 	bl	8000b54 <__aeabi_d2f>
 8007daa:	4603      	mov	r3, r0
 8007dac:	ee01 3a90 	vmov	s3, r3
 8007db0:	ee01 4a10 	vmov	s2, r4
 8007db4:	eef0 0a68 	vmov.f32	s1, s17
 8007db8:	eeb0 0a48 	vmov.f32	s0, s16
 8007dbc:	4932      	ldr	r1, [pc, #200]	@ (8007e88 <update_joy_mode+0x288>)
 8007dbe:	4834      	ldr	r0, [pc, #208]	@ (8007e90 <update_joy_mode+0x290>)
 8007dc0:	f7fc f8c2 	bl	8003f48 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8007dc4:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <update_joy_mode+0x288>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a23      	ldr	r2, [pc, #140]	@ (8007e58 <update_joy_mode+0x258>)
 8007dca:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8007dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8007e88 <update_joy_mode+0x288>)
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4a21      	ldr	r2, [pc, #132]	@ (8007e58 <update_joy_mode+0x258>)
 8007dd2:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8007dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8007e88 <update_joy_mode+0x288>)
 8007dd6:	7c1b      	ldrb	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80cb 	beq.w	8007f74 <update_joy_mode+0x374>
					prismatic_axis.trajectory_active = false;
 8007dde:	4b1e      	ldr	r3, [pc, #120]	@ (8007e58 <update_joy_mode+0x258>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 8007de6:	4b28      	ldr	r3, [pc, #160]	@ (8007e88 <update_joy_mode+0x288>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1b      	ldr	r2, [pc, #108]	@ (8007e58 <update_joy_mode+0x258>)
 8007dec:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 8007dee:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <update_joy_mode+0x258>)
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007df6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e60 <update_joy_mode+0x260>)
 8007df8:	ed93 8a03 	vldr	s16, [r3, #12]
 8007dfc:	4b18      	ldr	r3, [pc, #96]	@ (8007e60 <update_joy_mode+0x260>)
 8007dfe:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007e02:	4b24      	ldr	r3, [pc, #144]	@ (8007e94 <update_joy_mode+0x294>)
 8007e04:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f7f8 fea2 	bl	8000b54 <__aeabi_d2f>
 8007e10:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007e12:	4b20      	ldr	r3, [pc, #128]	@ (8007e94 <update_joy_mode+0x294>)
 8007e14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7f8 fe9a 	bl	8000b54 <__aeabi_d2f>
 8007e20:	4603      	mov	r3, r0
 8007e22:	ee01 3a90 	vmov	s3, r3
 8007e26:	ee01 4a10 	vmov	s2, r4
 8007e2a:	eef0 0a68 	vmov.f32	s1, s17
 8007e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e32:	4819      	ldr	r0, [pc, #100]	@ (8007e98 <update_joy_mode+0x298>)
 8007e34:	f7fb ffc6 	bl	8003dc4 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8007e38:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <update_joy_mode+0x260>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8007e40:	4b09      	ldr	r3, [pc, #36]	@ (8007e68 <update_joy_mode+0x268>)
 8007e42:	2203      	movs	r2, #3
 8007e44:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007e46:	e095      	b.n	8007f74 <update_joy_mode+0x374>
 8007e48:	200003b5 	.word	0x200003b5
 8007e4c:	20000528 	.word	0x20000528
 8007e50:	200003ac 	.word	0x200003ac
 8007e54:	200004cc 	.word	0x200004cc
 8007e58:	20000280 	.word	0x20000280
 8007e5c:	200008c0 	.word	0x200008c0
 8007e60:	200002c4 	.word	0x200002c4
 8007e64:	200003b4 	.word	0x200003b4
 8007e68:	20000308 	.word	0x20000308
 8007e6c:	20000414 	.word	0x20000414
 8007e70:	20000409 	.word	0x20000409
 8007e74:	20000408 	.word	0x20000408
 8007e78:	200003b8 	.word	0x200003b8
 8007e7c:	43340000 	.word	0x43340000
 8007e80:	40490fdb 	.word	0x40490fdb
 8007e84:	20000360 	.word	0x20000360
 8007e88:	20000334 	.word	0x20000334
 8007e8c:	20000080 	.word	0x20000080
 8007e90:	2000030c 	.word	0x2000030c
 8007e94:	20000000 	.word	0x20000000
 8007e98:	20000320 	.word	0x20000320

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007e9c:	4b45      	ldr	r3, [pc, #276]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d068      	beq.n	8007f78 <update_joy_mode+0x378>
 8007ea6:	4b44      	ldr	r3, [pc, #272]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007ea8:	7c1b      	ldrb	r3, [r3, #16]
 8007eaa:	f083 0301 	eor.w	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d061      	beq.n	8007f78 <update_joy_mode+0x378>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007eb6:	ed93 8a03 	vldr	s16, [r3, #12]
 8007eba:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007ebc:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8007fbc <update_joy_mode+0x3bc>)
 8007ec2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7f8 fe43 	bl	8000b54 <__aeabi_d2f>
 8007ece:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8007fbc <update_joy_mode+0x3bc>)
 8007ed2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f7f8 fe3b 	bl	8000b54 <__aeabi_d2f>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	ee01 3a90 	vmov	s3, r3
 8007ee4:	ee01 4a10 	vmov	s2, r4
 8007ee8:	eef0 0a68 	vmov.f32	s1, s17
 8007eec:	eeb0 0a48 	vmov.f32	s0, s16
 8007ef0:	4931      	ldr	r1, [pc, #196]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007ef2:	4833      	ldr	r0, [pc, #204]	@ (8007fc0 <update_joy_mode+0x3c0>)
 8007ef4:	f7fc f828 	bl	8003f48 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8007ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a2d      	ldr	r2, [pc, #180]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007efe:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007f00:	4b2d      	ldr	r3, [pc, #180]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007f06:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8007f08:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d033      	beq.n	8007f78 <update_joy_mode+0x378>
					revolute_axis.trajectory_active = false;
 8007f10:	4b28      	ldr	r3, [pc, #160]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8007f18:	4b27      	ldr	r3, [pc, #156]	@ (8007fb8 <update_joy_mode+0x3b8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007f1e:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007f20:	4b24      	ldr	r3, [pc, #144]	@ (8007fb4 <update_joy_mode+0x3b4>)
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 8007f28:	4826      	ldr	r0, [pc, #152]	@ (8007fc4 <update_joy_mode+0x3c4>)
 8007f2a:	f7f9 fa07 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007f2e:	4826      	ldr	r0, [pc, #152]	@ (8007fc8 <update_joy_mode+0x3c8>)
 8007f30:	f7f9 fa04 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 8007f34:	4b25      	ldr	r3, [pc, #148]	@ (8007fcc <update_joy_mode+0x3cc>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007f3a:	4b25      	ldr	r3, [pc, #148]	@ (8007fd0 <update_joy_mode+0x3d0>)
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007f40:	e01a      	b.n	8007f78 <update_joy_mode+0x378>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007f42:	4b22      	ldr	r3, [pc, #136]	@ (8007fcc <update_joy_mode+0x3cc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a20      	ldr	r2, [pc, #128]	@ (8007fcc <update_joy_mode+0x3cc>)
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d913      	bls.n	8007f7c <update_joy_mode+0x37c>
				plotter_pen_down();
 8007f54:	f000 ff64 	bl	8008e20 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8007f58:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd0 <update_joy_mode+0x3d0>)
 8007f5a:	2205      	movs	r2, #5
 8007f5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007f5e:	e00d      	b.n	8007f7c <update_joy_mode+0x37c>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8007f60:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <update_joy_mode+0x3d0>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
			break;
 8007f66:	e00a      	b.n	8007f7e <update_joy_mode+0x37e>

		default:
			break;
 8007f68:	bf00      	nop
 8007f6a:	e008      	b.n	8007f7e <update_joy_mode+0x37e>
			break;
 8007f6c:	bf00      	nop
 8007f6e:	e006      	b.n	8007f7e <update_joy_mode+0x37e>
			break;
 8007f70:	bf00      	nop
 8007f72:	e004      	b.n	8007f7e <update_joy_mode+0x37e>
			break;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <update_joy_mode+0x37e>
			break;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <update_joy_mode+0x37e>
			break;
 8007f7c:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8007f7e:	4b14      	ldr	r3, [pc, #80]	@ (8007fd0 <update_joy_mode+0x3d0>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <update_joy_mode+0x3a6>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007f86:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <update_joy_mode+0x3d4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d901      	bls.n	8007f92 <update_joy_mode+0x392>
				update_position_control();
 8007f8e:	f7fe fa41 	bl	8006414 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 8007f92:	f7fe fafd 	bl	8006590 <update_velocity_control>
		}
		break;
 8007f96:	e006      	b.n	8007fa6 <update_joy_mode+0x3a6>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8007f98:	f7ff f8f8 	bl	800718c <exit_joy_mode>
		break;
 8007f9c:	e004      	b.n	8007fa8 <update_joy_mode+0x3a8>
		return;
 8007f9e:	bf00      	nop
 8007fa0:	e002      	b.n	8007fa8 <update_joy_mode+0x3a8>

	default:
		break;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <update_joy_mode+0x3a8>
		break;
 8007fa6:	bf00      	nop
	}
}
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	ecbd 8b02 	vpop	{d8}
 8007fb0:	bd90      	pop	{r4, r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200002c4 	.word	0x200002c4
 8007fb8:	20000348 	.word	0x20000348
 8007fbc:	20000000 	.word	0x20000000
 8007fc0:	20000320 	.word	0x20000320
 8007fc4:	200005d4 	.word	0x200005d4
 8007fc8:	200005fc 	.word	0x200005fc
 8007fcc:	20000360 	.word	0x20000360
 8007fd0:	20000308 	.word	0x20000308
 8007fd4:	200003a8 	.word	0x200003a8

08007fd8 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007fde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007fe2:	482c      	ldr	r0, [pc, #176]	@ (8008094 <handle_b2_button_polling+0xbc>)
 8007fe4:	f004 fa4c 	bl	800c480 <HAL_GPIO_ReadPin>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	71fb      	strb	r3, [r7, #7]

	// Simple edge detection without debounce timer here
	if (b2_current_state && !joy_mode_b2_last_state) {
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d03b      	beq.n	8008072 <handle_b2_button_polling+0x9a>
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <handle_b2_button_polling+0xc0>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f083 0301 	eor.w	r3, r3, #1
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d034      	beq.n	8008072 <handle_b2_button_polling+0x9a>
		// Button just pressed - trigger action immediately
		joy_mode_b2_pressed = true;
 8008008:	4b24      	ldr	r3, [pc, #144]	@ (800809c <handle_b2_button_polling+0xc4>)
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]

		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 800800e:	f7ff f83b 	bl	8007088 <is_emergency_active>
 8008012:	4603      	mov	r3, r0
 8008014:	f083 0301 	eor.w	r3, r3, #1
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d029      	beq.n	8008072 <handle_b2_button_polling+0x9a>
 800801e:	4b20      	ldr	r3, [pc, #128]	@ (80080a0 <handle_b2_button_polling+0xc8>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	f083 0301 	eor.w	r3, r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d022      	beq.n	8008072 <handle_b2_button_polling+0x9a>
				&& motion_sequence_state == MOTION_IDLE) {
 800802c:	4b1d      	ldr	r3, [pc, #116]	@ (80080a4 <handle_b2_button_polling+0xcc>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d11e      	bne.n	8008072 <handle_b2_button_polling+0x9a>
			if (!joy_mode_active) {
 8008034:	4b1c      	ldr	r3, [pc, #112]	@ (80080a8 <handle_b2_button_polling+0xd0>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f083 0301 	eor.w	r3, r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <handle_b2_button_polling+0x70>
				// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
				enter_joy_mode();
 8008042:	f7ff f831 	bl	80070a8 <enter_joy_mode>
 8008046:	e014      	b.n	8008072 <handle_b2_button_polling+0x9a>
			} else {
				// Joy mode is active, handle button press based on current state
				if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8008048:	4b18      	ldr	r3, [pc, #96]	@ (80080ac <handle_b2_button_polling+0xd4>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d103      	bne.n	8008058 <handle_b2_button_polling+0x80>
					// First B2 press in joy mode - start position saving mode
					joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8008050:	4b16      	ldr	r3, [pc, #88]	@ (80080ac <handle_b2_button_polling+0xd4>)
 8008052:	2202      	movs	r2, #2
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e00c      	b.n	8008072 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8008058:	4b14      	ldr	r3, [pc, #80]	@ (80080ac <handle_b2_button_polling+0xd4>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d102      	bne.n	8008066 <handle_b2_button_polling+0x8e>
					// Save current position
					save_current_position();
 8008060:	f7ff f918 	bl	8007294 <save_current_position>
 8008064:	e005      	b.n	8008072 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008066:	4b11      	ldr	r3, [pc, #68]	@ (80080ac <handle_b2_button_polling+0xd4>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b03      	cmp	r3, #3
 800806c:	d101      	bne.n	8008072 <handle_b2_button_polling+0x9a>
					// Start playback of saved positions
					start_position_playback();
 800806e:	f7ff f94b 	bl	8007308 <start_position_playback>
			}
		}
	}

	// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8008072:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <handle_b2_button_polling+0xc0>)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	7013      	strb	r3, [r2, #0]

	// Reset pressed flag when button is released
	if (!b2_current_state) {
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	f083 0301 	eor.w	r3, r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <handle_b2_button_polling+0xb2>
		joy_mode_b2_pressed = false;
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <handle_b2_button_polling+0xc4>)
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
	}
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	48000800 	.word	0x48000800
 8008098:	20000419 	.word	0x20000419
 800809c:	20000418 	.word	0x20000418
 80080a0:	2000036b 	.word	0x2000036b
 80080a4:	20000308 	.word	0x20000308
 80080a8:	200003b5 	.word	0x200003b5
 80080ac:	200003b4 	.word	0x200003b4

080080b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d105      	bne.n	80080cc <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80080c0:	4b4e      	ldr	r3, [pc, #312]	@ (80081fc <HAL_GPIO_EXTI_Callback+0x14c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a4d      	ldr	r2, [pc, #308]	@ (80081fc <HAL_GPIO_EXTI_Callback+0x14c>)
 80080c8:	6013      	str	r3, [r2, #0]
		return;
 80080ca:	e093      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d103      	bne.n	80080da <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 80080d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008200 <HAL_GPIO_EXTI_Callback+0x150>)
 80080d4:	2201      	movs	r2, #1
 80080d6:	701a      	strb	r2, [r3, #0]
		return;
 80080d8:	e08c      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e0:	d103      	bne.n	80080ea <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 80080e2:	4b48      	ldr	r3, [pc, #288]	@ (8008204 <HAL_GPIO_EXTI_Callback+0x154>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
		return;
 80080e8:	e084      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b10      	cmp	r3, #16
 80080ee:	d102      	bne.n	80080f6 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 80080f0:	f7fe fe9a 	bl	8006e28 <trigger_hardware_emergency>
		return;
 80080f4:	e07e      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b80      	cmp	r3, #128	@ 0x80
 80080fa:	d145      	bne.n	8008188 <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 80080fc:	f7fe ffc4 	bl	8007088 <is_emergency_active>
 8008100:	4603      	mov	r3, r0
 8008102:	f083 0301 	eor.w	r3, r3, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d06e      	beq.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
 800810c:	4b3e      	ldr	r3, [pc, #248]	@ (8008208 <HAL_GPIO_EXTI_Callback+0x158>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f083 0301 	eor.w	r3, r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d067      	beq.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
 800811a:	4b3c      	ldr	r3, [pc, #240]	@ (800820c <HAL_GPIO_EXTI_Callback+0x15c>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f083 0301 	eor.w	r3, r3, #1
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d060      	beq.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8008128:	4b39      	ldr	r3, [pc, #228]	@ (8008210 <HAL_GPIO_EXTI_Callback+0x160>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d15c      	bne.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
 8008130:	4b38      	ldr	r3, [pc, #224]	@ (8008214 <HAL_GPIO_EXTI_Callback+0x164>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	f083 0301 	eor.w	r3, r3, #1
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d055      	beq.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 800813e:	4b36      	ldr	r3, [pc, #216]	@ (8008218 <HAL_GPIO_EXTI_Callback+0x168>)
 8008140:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8008142:	4a36      	ldr	r2, [pc, #216]	@ (800821c <HAL_GPIO_EXTI_Callback+0x16c>)
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 800814c:	4b32      	ldr	r3, [pc, #200]	@ (8008218 <HAL_GPIO_EXTI_Callback+0x168>)
 800814e:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8008150:	4a33      	ldr	r2, [pc, #204]	@ (8008220 <HAL_GPIO_EXTI_Callback+0x170>)
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 800815a:	eef0 0a47 	vmov.f32	s1, s14
 800815e:	eeb0 0a67 	vmov.f32	s0, s15
 8008162:	f7fe f889 	bl	8006278 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8008166:	4b2c      	ldr	r3, [pc, #176]	@ (8008218 <HAL_GPIO_EXTI_Callback+0x168>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 800816c:	4b2d      	ldr	r3, [pc, #180]	@ (8008224 <HAL_GPIO_EXTI_Callback+0x174>)
 800816e:	fb83 3102 	smull	r3, r1, r3, r2
 8008172:	17d3      	asrs	r3, r2, #31
 8008174:	1ac9      	subs	r1, r1, r3
 8008176:	460b      	mov	r3, r1
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	440b      	add	r3, r1
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8008180:	b2ca      	uxtb	r2, r1
 8008182:	4b25      	ldr	r3, [pc, #148]	@ (8008218 <HAL_GPIO_EXTI_Callback+0x168>)
 8008184:	701a      	strb	r2, [r3, #0]
		}
		return;
 8008186:	e030      	b.n	80081ea <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800818e:	d116      	bne.n	80081be <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8008190:	f7fe ff7a 	bl	8007088 <is_emergency_active>
 8008194:	4603      	mov	r3, r0
 8008196:	f083 0301 	eor.w	r3, r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d026      	beq.n	80081ee <HAL_GPIO_EXTI_Callback+0x13e>
 80081a0:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <HAL_GPIO_EXTI_Callback+0x15c>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f083 0301 	eor.w	r3, r3, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01f      	beq.n	80081ee <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 80081ae:	4b18      	ldr	r3, [pc, #96]	@ (8008210 <HAL_GPIO_EXTI_Callback+0x160>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d11b      	bne.n	80081ee <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7fd f8d6 	bl	8005368 <start_homing_sequence>
		}
		return;
 80081bc:	e017      	b.n	80081ee <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c4:	d116      	bne.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 80081c6:	4b11      	ldr	r3, [pc, #68]	@ (800820c <HAL_GPIO_EXTI_Callback+0x15c>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 80081ce:	f7fe ffdd 	bl	800718c <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 80081d2:	e00e      	b.n	80081f2 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 80081d4:	f7fe ff58 	bl	8007088 <is_emergency_active>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 80081de:	f7fe fe61 	bl	8006ea4 <clear_emergency_state>
			start_homing_sequence(true);
 80081e2:	2001      	movs	r0, #1
 80081e4:	f7fd f8c0 	bl	8005368 <start_homing_sequence>
		return;
 80081e8:	e003      	b.n	80081f2 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 80081ea:	bf00      	nop
 80081ec:	e002      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 80081f2:	bf00      	nop
	}
}
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000364 	.word	0x20000364
 8008200:	20000368 	.word	0x20000368
 8008204:	20000369 	.word	0x20000369
 8008208:	2000036b 	.word	0x2000036b
 800820c:	200003b5 	.word	0x200003b5
 8008210:	20000308 	.word	0x20000308
 8008214:	20000133 	.word	0x20000133
 8008218:	2000035c 	.word	0x2000035c
 800821c:	08013e38 	.word	0x08013e38
 8008220:	08013e50 	.word	0x08013e50
 8008224:	2aaaaaab 	.word	0x2aaaaaab

08008228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a99      	ldr	r2, [pc, #612]	@ (8008498 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8008234:	4293      	cmp	r3, r2
 8008236:	f040 812b 	bne.w	8008490 <HAL_TIM_PeriodElapsedCallback+0x268>
		plotter_update_sensors();
 800823a:	f000 fd3b 	bl	8008cb4 <plotter_update_sensors>

		check_emergency_button();
 800823e:	f7fe fd63 	bl	8006d08 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8008242:	4896      	ldr	r0, [pc, #600]	@ (800849c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8008244:	f7fb fb78 	bl	8003938 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8008248:	4894      	ldr	r0, [pc, #592]	@ (800849c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800824a:	f7fb fc61 	bl	8003b10 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 800824e:	4894      	ldr	r0, [pc, #592]	@ (80084a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8008250:	f7fb fb72 	bl	8003938 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008254:	4892      	ldr	r0, [pc, #584]	@ (80084a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8008256:	f7fb fc5b 	bl	8003b10 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 800825a:	4b92      	ldr	r3, [pc, #584]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800825c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008260:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008264:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008268:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 80084a8 <HAL_TIM_PeriodElapsedCallback+0x280>
 800826c:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 80084ac <HAL_TIM_PeriodElapsedCallback+0x284>
 8008270:	eeb0 0a67 	vmov.f32	s0, s15
 8008274:	f7f9 fdcf 	bl	8001e16 <mapf>
 8008278:	eef0 7a40 	vmov.f32	s15, s0
 800827c:	4b89      	ldr	r3, [pc, #548]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800827e:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8008282:	4b88      	ldr	r3, [pc, #544]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8008284:	edd3 7a08 	vldr	s15, [r3, #32]
 8008288:	4b85      	ldr	r3, [pc, #532]	@ (80084a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800828a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800828e:	eef0 0a47 	vmov.f32	s1, s14
 8008292:	eeb0 0a67 	vmov.f32	s0, s15
 8008296:	4886      	ldr	r0, [pc, #536]	@ (80084b0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008298:	f7fc fc6a 	bl	8004b70 <SteadyStateKalmanFilter>
 800829c:	eef0 7a40 	vmov.f32	s15, s0
 80082a0:	4b80      	ldr	r3, [pc, #512]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80082a2:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 80082a6:	4b7f      	ldr	r3, [pc, #508]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80082a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80082ac:	eef4 7a67 	vcmp.f32	s15, s15
 80082b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b4:	d703      	bvc.n	80082be <HAL_TIM_PeriodElapsedCallback+0x96>
			revolute_axis.kalman_velocity = 0.0f;
 80082b6:	4b7b      	ldr	r3, [pc, #492]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 80082be:	4b7d      	ldr	r3, [pc, #500]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80082c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80082c4:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80082c8:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80082cc:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 80084a8 <HAL_TIM_PeriodElapsedCallback+0x280>
 80082d0:	eddf 0a76 	vldr	s1, [pc, #472]	@ 80084ac <HAL_TIM_PeriodElapsedCallback+0x284>
 80082d4:	eeb0 0a67 	vmov.f32	s0, s15
 80082d8:	f7f9 fd9d 	bl	8001e16 <mapf>
 80082dc:	eef0 7a40 	vmov.f32	s15, s0
 80082e0:	4b74      	ldr	r3, [pc, #464]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80082e2:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 80082e6:	4b73      	ldr	r3, [pc, #460]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80082e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80082ec:	4b6b      	ldr	r3, [pc, #428]	@ (800849c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80082ee:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80082f2:	eef0 0a47 	vmov.f32	s1, s14
 80082f6:	eeb0 0a67 	vmov.f32	s0, s15
 80082fa:	486f      	ldr	r0, [pc, #444]	@ (80084b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80082fc:	f7fa fd58 	bl	8002db0 <MotorKalman_Estimate>
 8008300:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008304:	4b6d      	ldr	r3, [pc, #436]	@ (80084bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008306:	edd3 7a04 	vldr	s15, [r3, #16]
 800830a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80084c0 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008312:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008316:	4b67      	ldr	r3, [pc, #412]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008318:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 800831c:	4b65      	ldr	r3, [pc, #404]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800831e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008322:	eef4 7a67 	vcmp.f32	s15, s15
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d703      	bvc.n	8008334 <HAL_TIM_PeriodElapsedCallback+0x10c>
			prismatic_axis.kalman_velocity = 0.0f;
 800832c:	4b61      	ldr	r3, [pc, #388]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	61da      	str	r2, [r3, #28]
		}

		// Position control update - ONLY exclude joy mode manual states from NORMAL control
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008334:	4b63      	ldr	r3, [pc, #396]	@ (80084c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a62      	ldr	r2, [pc, #392]	@ (80084c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	2b09      	cmp	r3, #9
 8008340:	d926      	bls.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x168>
			position_control_tick = 0;
 8008342:	4b60      	ldr	r3, [pc, #384]	@ (80084c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

			if (!homing_active
 8008348:	4b5f      	ldr	r3, [pc, #380]	@ (80084c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f083 0301 	eor.w	r3, r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01c      	beq.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x168>
					&& (!joy_mode_active
 8008356:	4b5d      	ldr	r3, [pc, #372]	@ (80084cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	f083 0301 	eor.w	r3, r3, #1
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d107      	bne.n	8008374 <HAL_TIM_PeriodElapsedCallback+0x14c>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008364:	4b5a      	ldr	r3, [pc, #360]	@ (80084d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d011      	beq.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x168>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL))
 800836c:	4b58      	ldr	r3, [pc, #352]	@ (80084d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800836e:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 8008370:	2b01      	cmp	r3, #1
 8008372:	d00d      	beq.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x168>
					&& (!is_emergency_active() || tuning_mode)) {
 8008374:	f7fe fe88 	bl	8007088 <is_emergency_active>
 8008378:	4603      	mov	r3, r0
 800837a:	f083 0301 	eor.w	r3, r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <HAL_TIM_PeriodElapsedCallback+0x164>
 8008384:	4b53      	ldr	r3, [pc, #332]	@ (80084d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x168>
				update_position_control();
 800838c:	f7fe f842 	bl	8006414 <update_position_control>
			}
		}

		// Velocity control update - ONLY exclude joy mode manual states from NORMAL control
		if (!homing_active
 8008390:	4b4d      	ldr	r3, [pc, #308]	@ (80084c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f083 0301 	eor.w	r3, r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01c      	beq.n	80083d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				&& (!joy_mode_active
 800839e:	4b4b      	ldr	r3, [pc, #300]	@ (80084cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <HAL_TIM_PeriodElapsedCallback+0x194>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80083ac:	4b48      	ldr	r3, [pc, #288]	@ (80084d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d011      	beq.n	80083d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 80083b4:	4b46      	ldr	r3, [pc, #280]	@ (80084d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d00d      	beq.n	80083d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				&& (!is_emergency_active() || tuning_mode)) {
 80083bc:	f7fe fe64 	bl	8007088 <is_emergency_active>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f083 0301 	eor.w	r3, r3, #1
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 80083cc:	4b41      	ldr	r3, [pc, #260]	@ (80084d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			update_velocity_control();
 80083d4:	f7fe f8dc 	bl	8006590 <update_velocity_control>
		}

		update_safety_system();
 80083d8:	f7fe fdd4 	bl	8006f84 <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 80083dc:	f7fe fe54 	bl	8007088 <is_emergency_active>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f083 0301 	eor.w	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 80083ec:	4b39      	ldr	r3, [pc, #228]	@ (80084d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			check_safety_conditions();
 80083f4:	f7fe fcaa 	bl	8006d4c <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 80083f8:	4b34      	ldr	r3, [pc, #208]	@ (80084cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	f083 0301 	eor.w	r3, r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_TIM_PeriodElapsedCallback+0x1e4>
			update_control_loops();
 8008406:	f7fe fad7 	bl	80069b8 <update_control_loops>
 800840a:	e001      	b.n	8008410 <HAL_TIM_PeriodElapsedCallback+0x1e8>
		} else {
			update_joy_mode();
 800840c:	f7ff fbf8 	bl	8007c00 <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 8008410:	4b2e      	ldr	r3, [pc, #184]	@ (80084cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f083 0301 	eor.w	r3, r3, #1
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01e      	beq.n	800845c <HAL_TIM_PeriodElapsedCallback+0x234>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 800841e:	4b20      	ldr	r3, [pc, #128]	@ (80084a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8008420:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008424:	eeb0 0a67 	vmov.f32	s0, s15
 8008428:	f7fd fe3c 	bl	80060a4 <normalize_angle>
 800842c:	eef0 7a40 	vmov.f32	s15, s0
 8008430:	4b29      	ldr	r3, [pc, #164]	@ (80084d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008432:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008436:	4b19      	ldr	r3, [pc, #100]	@ (800849c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	4a1e      	ldr	r2, [pc, #120]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800843c:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 800843e:	4b26      	ldr	r3, [pc, #152]	@ (80084d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008440:	edd3 7a00 	vldr	s15, [r3]
 8008444:	220e      	movs	r2, #14
 8008446:	210f      	movs	r1, #15
 8008448:	eeb0 0a67 	vmov.f32	s0, s15
 800844c:	4823      	ldr	r0, [pc, #140]	@ (80084dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800844e:	f7fc f913 	bl	8004678 <UnitConverter_angle>
 8008452:	eef0 7a40 	vmov.f32	s15, s0
 8008456:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8008458:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel, prismatic_encoder.mmpss);
 800845c:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800845e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008462:	eeb0 0a67 	vmov.f32	s0, s15
 8008466:	481e      	ldr	r0, [pc, #120]	@ (80084e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008468:	f7f9 fc7c 	bl	8001d64 <FIR_process>
 800846c:	eef0 7a40 	vmov.f32	s15, s0
 8008470:	4b10      	ldr	r3, [pc, #64]	@ (80084b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008472:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel, revolute_encoder.radpss);
 8008476:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8008478:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800847c:	eeb0 0a67 	vmov.f32	s0, s15
 8008480:	4818      	ldr	r0, [pc, #96]	@ (80084e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008482:	f7f9 fc6f 	bl	8001d64 <FIR_process>
 8008486:	eef0 7a40 	vmov.f32	s15, s0
 800848a:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800848c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20001a8c 	.word	0x20001a8c
 800849c:	200004cc 	.word	0x200004cc
 80084a0:	20000528 	.word	0x20000528
 80084a4:	200002c4 	.word	0x200002c4
 80084a8:	477fff00 	.word	0x477fff00
 80084ac:	c77fff00 	.word	0xc77fff00
 80084b0:	200015cc 	.word	0x200015cc
 80084b4:	20000280 	.word	0x20000280
 80084b8:	20001260 	.word	0x20001260
 80084bc:	20000100 	.word	0x20000100
 80084c0:	447a0000 	.word	0x447a0000
 80084c4:	200003a8 	.word	0x200003a8
 80084c8:	2000036b 	.word	0x2000036b
 80084cc:	200003b5 	.word	0x200003b5
 80084d0:	200003b4 	.word	0x200003b4
 80084d4:	20000134 	.word	0x20000134
 80084d8:	200003ac 	.word	0x200003ac
 80084dc:	200008c0 	.word	0x200008c0
 80084e0:	20000b18 	.word	0x20000b18
 80084e4:	20000b24 	.word	0x20000b24

080084e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80084ec:	b672      	cpsid	i
}
 80084ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <Error_Handler+0x8>
 80084f4:	0000      	movs	r0, r0
	...

080084f8 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80084f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084fc:	ed2d 8b02 	vpush	{d8}
 8008500:	b083      	sub	sp, #12
 8008502:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008504:	4bc6      	ldr	r3, [pc, #792]	@ (8008820 <plotter_begin+0x328>)
 8008506:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800850a:	4bc6      	ldr	r3, [pc, #792]	@ (8008824 <plotter_begin+0x32c>)
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	4618      	mov	r0, r3
 8008510:	f7f7 ffe6 	bl	80004e0 <__aeabi_f2d>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f8 f838 	bl	8000590 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	4bbe      	ldr	r3, [pc, #760]	@ (8008828 <plotter_begin+0x330>)
 800852e:	f7f8 f82f 	bl	8000590 <__aeabi_dmul>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008536:	49ba      	ldr	r1, [pc, #744]	@ (8008820 <plotter_begin+0x328>)
 8008538:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 800853c:	4bb8      	ldr	r3, [pc, #736]	@ (8008820 <plotter_begin+0x328>)
 800853e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	f7f7 fe6d 	bl	8000224 <__adddf3>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	49b4      	ldr	r1, [pc, #720]	@ (8008820 <plotter_begin+0x328>)
 8008550:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008554:	49b2      	ldr	r1, [pc, #712]	@ (8008820 <plotter_begin+0x328>)
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	4bb4      	ldr	r3, [pc, #720]	@ (800882c <plotter_begin+0x334>)
 800855c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008560:	49af      	ldr	r1, [pc, #700]	@ (8008820 <plotter_begin+0x328>)
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	4bb0      	ldr	r3, [pc, #704]	@ (8008828 <plotter_begin+0x330>)
 8008568:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 800856c:	4bb0      	ldr	r3, [pc, #704]	@ (8008830 <plotter_begin+0x338>)
 800856e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008572:	a3a9      	add	r3, pc, #676	@ (adr r3, 8008818 <plotter_begin+0x320>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f7f8 f80a 	bl	8000590 <__aeabi_dmul>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008580:	49ab      	ldr	r1, [pc, #684]	@ (8008830 <plotter_begin+0x338>)
 8008582:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008586:	49aa      	ldr	r1, [pc, #680]	@ (8008830 <plotter_begin+0x338>)
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	4ba9      	ldr	r3, [pc, #676]	@ (8008834 <plotter_begin+0x33c>)
 800858e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 8008592:	49a7      	ldr	r1, [pc, #668]	@ (8008830 <plotter_begin+0x338>)
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800859c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80085a0:	2100      	movs	r1, #0
 80085a2:	48a5      	ldr	r0, [pc, #660]	@ (8008838 <plotter_begin+0x340>)
 80085a4:	f000 fc4c 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80085a8:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 800883c <plotter_begin+0x344>
 80085ac:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008840 <plotter_begin+0x348>
 80085b0:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008878 <plotter_begin+0x380>
 80085b4:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008878 <plotter_begin+0x380>
 80085b8:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008844 <plotter_begin+0x34c>
 80085bc:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 800883c <plotter_begin+0x344>
 80085c0:	489d      	ldr	r0, [pc, #628]	@ (8008838 <plotter_begin+0x340>)
 80085c2:	f000 fc9b 	bl	8008efc <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80085c6:	2102      	movs	r1, #2
 80085c8:	489f      	ldr	r0, [pc, #636]	@ (8008848 <plotter_begin+0x350>)
 80085ca:	f000 fc39 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80085ce:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 800883c <plotter_begin+0x344>
 80085d2:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8008840 <plotter_begin+0x348>
 80085d6:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8008878 <plotter_begin+0x380>
 80085da:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8008878 <plotter_begin+0x380>
 80085de:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80085e2:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8008844 <plotter_begin+0x34c>
 80085e6:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 800883c <plotter_begin+0x344>
 80085ea:	4897      	ldr	r0, [pc, #604]	@ (8008848 <plotter_begin+0x350>)
 80085ec:	f000 fcb1 	bl	8008f52 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80085f0:	2100      	movs	r1, #0
 80085f2:	4896      	ldr	r0, [pc, #600]	@ (800884c <plotter_begin+0x354>)
 80085f4:	f000 fc24 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80085f8:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008850 <plotter_begin+0x358>
 80085fc:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008854 <plotter_begin+0x35c>
 8008600:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008878 <plotter_begin+0x380>
 8008604:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008878 <plotter_begin+0x380>
 8008608:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008844 <plotter_begin+0x34c>
 800860c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008850 <plotter_begin+0x358>
 8008610:	488e      	ldr	r0, [pc, #568]	@ (800884c <plotter_begin+0x354>)
 8008612:	f000 fc73 	bl	8008efc <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008616:	2102      	movs	r1, #2
 8008618:	488f      	ldr	r0, [pc, #572]	@ (8008858 <plotter_begin+0x360>)
 800861a:	f000 fc11 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 800861e:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008622:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008626:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8008878 <plotter_begin+0x380>
 800862a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8008878 <plotter_begin+0x380>
 800862e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008632:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8008844 <plotter_begin+0x34c>
 8008636:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800863a:	4887      	ldr	r0, [pc, #540]	@ (8008858 <plotter_begin+0x360>)
 800863c:	f000 fc89 	bl	8008f52 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008640:	2100      	movs	r1, #0
 8008642:	4886      	ldr	r0, [pc, #536]	@ (800885c <plotter_begin+0x364>)
 8008644:	f000 fbfc 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008648:	4b75      	ldr	r3, [pc, #468]	@ (8008820 <plotter_begin+0x328>)
 800864a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800864e:	4610      	mov	r0, r2
 8008650:	4619      	mov	r1, r3
 8008652:	f7f8 fa7f 	bl	8000b54 <__aeabi_d2f>
 8008656:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008658:	4b71      	ldr	r3, [pc, #452]	@ (8008820 <plotter_begin+0x328>)
 800865a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	f7f8 fa77 	bl	8000b54 <__aeabi_d2f>
 8008666:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008670:	4b6b      	ldr	r3, [pc, #428]	@ (8008820 <plotter_begin+0x328>)
 8008672:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f7f8 fa6b 	bl	8000b54 <__aeabi_d2f>
 800867e:	4603      	mov	r3, r0
 8008680:	ee02 3a90 	vmov	s5, r3
 8008684:	eeb0 2a48 	vmov.f32	s4, s16
 8008688:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008878 <plotter_begin+0x380>
 800868c:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008878 <plotter_begin+0x380>
 8008690:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008844 <plotter_begin+0x34c>
 8008694:	ee00 4a10 	vmov	s0, r4
 8008698:	4870      	ldr	r0, [pc, #448]	@ (800885c <plotter_begin+0x364>)
 800869a:	f000 fc2f 	bl	8008efc <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800869e:	2102      	movs	r1, #2
 80086a0:	486f      	ldr	r0, [pc, #444]	@ (8008860 <plotter_begin+0x368>)
 80086a2:	f000 fbcd 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80086a6:	4b5e      	ldr	r3, [pc, #376]	@ (8008820 <plotter_begin+0x328>)
 80086a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7f8 fa50 	bl	8000b54 <__aeabi_d2f>
 80086b4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80086b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008820 <plotter_begin+0x328>)
 80086b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80086bc:	4610      	mov	r0, r2
 80086be:	4619      	mov	r1, r3
 80086c0:	f7f8 fa48 	bl	8000b54 <__aeabi_d2f>
 80086c4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80086ce:	4b54      	ldr	r3, [pc, #336]	@ (8008820 <plotter_begin+0x328>)
 80086d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80086d4:	4610      	mov	r0, r2
 80086d6:	4619      	mov	r1, r3
 80086d8:	f7f8 fa3c 	bl	8000b54 <__aeabi_d2f>
 80086dc:	4603      	mov	r3, r0
 80086de:	ee03 3a10 	vmov	s6, r3
 80086e2:	eef0 2a48 	vmov.f32	s5, s16
 80086e6:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8008878 <plotter_begin+0x380>
 80086ea:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8008878 <plotter_begin+0x380>
 80086ee:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80086f2:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8008844 <plotter_begin+0x34c>
 80086f6:	ee00 4a10 	vmov	s0, r4
 80086fa:	4859      	ldr	r0, [pc, #356]	@ (8008860 <plotter_begin+0x368>)
 80086fc:	f000 fc29 	bl	8008f52 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008700:	2100      	movs	r1, #0
 8008702:	4858      	ldr	r0, [pc, #352]	@ (8008864 <plotter_begin+0x36c>)
 8008704:	f000 fb9c 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008708:	4b49      	ldr	r3, [pc, #292]	@ (8008830 <plotter_begin+0x338>)
 800870a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800870e:	4610      	mov	r0, r2
 8008710:	4619      	mov	r1, r3
 8008712:	f7f8 fa1f 	bl	8000b54 <__aeabi_d2f>
 8008716:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008718:	4b45      	ldr	r3, [pc, #276]	@ (8008830 <plotter_begin+0x338>)
 800871a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	f7f8 fa17 	bl	8000b54 <__aeabi_d2f>
 8008726:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008730:	4b3f      	ldr	r3, [pc, #252]	@ (8008830 <plotter_begin+0x338>)
 8008732:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	f7f8 fa0b 	bl	8000b54 <__aeabi_d2f>
 800873e:	4603      	mov	r3, r0
 8008740:	ee02 3a90 	vmov	s5, r3
 8008744:	eeb0 2a48 	vmov.f32	s4, s16
 8008748:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008878 <plotter_begin+0x380>
 800874c:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008878 <plotter_begin+0x380>
 8008750:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008844 <plotter_begin+0x34c>
 8008754:	ee00 4a10 	vmov	s0, r4
 8008758:	4842      	ldr	r0, [pc, #264]	@ (8008864 <plotter_begin+0x36c>)
 800875a:	f000 fbcf 	bl	8008efc <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800875e:	2102      	movs	r1, #2
 8008760:	4841      	ldr	r0, [pc, #260]	@ (8008868 <plotter_begin+0x370>)
 8008762:	f000 fb6d 	bl	8008e40 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008766:	4b32      	ldr	r3, [pc, #200]	@ (8008830 <plotter_begin+0x338>)
 8008768:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f7f8 f9f0 	bl	8000b54 <__aeabi_d2f>
 8008774:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008776:	4b2e      	ldr	r3, [pc, #184]	@ (8008830 <plotter_begin+0x338>)
 8008778:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	f7f8 f9e8 	bl	8000b54 <__aeabi_d2f>
 8008784:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800878e:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <plotter_begin+0x338>)
 8008790:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	f7f8 f9dc 	bl	8000b54 <__aeabi_d2f>
 800879c:	4603      	mov	r3, r0
 800879e:	ee03 3a10 	vmov	s6, r3
 80087a2:	eef0 2a48 	vmov.f32	s5, s16
 80087a6:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8008878 <plotter_begin+0x380>
 80087aa:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8008878 <plotter_begin+0x380>
 80087ae:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80087b2:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8008844 <plotter_begin+0x34c>
 80087b6:	ee00 4a10 	vmov	s0, r4
 80087ba:	482b      	ldr	r0, [pc, #172]	@ (8008868 <plotter_begin+0x370>)
 80087bc:	f000 fbc9 	bl	8008f52 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80087c0:	482a      	ldr	r0, [pc, #168]	@ (800886c <plotter_begin+0x374>)
 80087c2:	f7fb fec3 	bl	800454c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80087c6:	4b17      	ldr	r3, [pc, #92]	@ (8008824 <plotter_begin+0x32c>)
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 fe88 	bl	80004e0 <__aeabi_f2d>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	f7f7 fd26 	bl	8000224 <__adddf3>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	4b10      	ldr	r3, [pc, #64]	@ (8008828 <plotter_begin+0x330>)
 80087e6:	f7f7 fed3 	bl	8000590 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80087ee:	4610      	mov	r0, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	f7f8 f9af 	bl	8000b54 <__aeabi_d2f>
 80087f6:	4603      	mov	r3, r0
 80087f8:	ee00 3a90 	vmov	s1, r3
 80087fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008808:	4919      	ldr	r1, [pc, #100]	@ (8008870 <plotter_begin+0x378>)
 800880a:	481a      	ldr	r0, [pc, #104]	@ (8008874 <plotter_begin+0x37c>)
 800880c:	f7fb f822 	bl	8003854 <QEI_init>
 8008810:	e034      	b.n	800887c <plotter_begin+0x384>
 8008812:	bf00      	nop
 8008814:	f3af 8000 	nop.w
 8008818:	55555555 	.word	0x55555555
 800881c:	3fe55555 	.word	0x3fe55555
 8008820:	20000080 	.word	0x20000080
 8008824:	20000100 	.word	0x20000100
 8008828:	408f4000 	.word	0x408f4000
 800882c:	407f4000 	.word	0x407f4000
 8008830:	20000000 	.word	0x20000000
 8008834:	40140000 	.word	0x40140000
 8008838:	200006a0 	.word	0x200006a0
 800883c:	477fff00 	.word	0x477fff00
 8008840:	c77fff00 	.word	0xc77fff00
 8008844:	3dcccccd 	.word	0x3dcccccd
 8008848:	200006e4 	.word	0x200006e4
 800884c:	20000728 	.word	0x20000728
 8008850:	43480000 	.word	0x43480000
 8008854:	c3480000 	.word	0xc3480000
 8008858:	2000076c 	.word	0x2000076c
 800885c:	200007b0 	.word	0x200007b0
 8008860:	200007f4 	.word	0x200007f4
 8008864:	20000838 	.word	0x20000838
 8008868:	2000087c 	.word	0x2000087c
 800886c:	200008c0 	.word	0x200008c0
 8008870:	20001cf0 	.word	0x20001cf0
 8008874:	200004cc 	.word	0x200004cc
 8008878:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 800887c:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008878 <plotter_begin+0x380>
 8008880:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800888c:	49b8      	ldr	r1, [pc, #736]	@ (8008b70 <plotter_begin+0x678>)
 800888e:	48b9      	ldr	r0, [pc, #740]	@ (8008b74 <plotter_begin+0x67c>)
 8008890:	f7fa ffe0 	bl	8003854 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8008894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800889e:	2204      	movs	r2, #4
 80088a0:	49b5      	ldr	r1, [pc, #724]	@ (8008b78 <plotter_begin+0x680>)
 80088a2:	48b6      	ldr	r0, [pc, #728]	@ (8008b7c <plotter_begin+0x684>)
 80088a4:	f7f8 fd6c 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80088a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4bb4      	ldr	r3, [pc, #720]	@ (8008b80 <plotter_begin+0x688>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	49b1      	ldr	r1, [pc, #708]	@ (8008b78 <plotter_begin+0x680>)
 80088b4:	48b3      	ldr	r0, [pc, #716]	@ (8008b84 <plotter_begin+0x68c>)
 80088b6:	f7f8 fd63 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80088ba:	220c      	movs	r2, #12
 80088bc:	49b2      	ldr	r1, [pc, #712]	@ (8008b88 <plotter_begin+0x690>)
 80088be:	48b3      	ldr	r0, [pc, #716]	@ (8008b8c <plotter_begin+0x694>)
 80088c0:	f7fa fd9c 	bl	80033fc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80088c4:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8008b90 <plotter_begin+0x698>
 80088c8:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8008b94 <plotter_begin+0x69c>
 80088cc:	48ab      	ldr	r0, [pc, #684]	@ (8008b7c <plotter_begin+0x684>)
 80088ce:	f7f8 fd7b 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80088d2:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8008b90 <plotter_begin+0x698>
 80088d6:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8008b94 <plotter_begin+0x69c>
 80088da:	48aa      	ldr	r0, [pc, #680]	@ (8008b84 <plotter_begin+0x68c>)
 80088dc:	f7f8 fd74 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 80088e0:	4bad      	ldr	r3, [pc, #692]	@ (8008b98 <plotter_begin+0x6a0>)
 80088e2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f933 	bl	8000b54 <__aeabi_d2f>
 80088ee:	4603      	mov	r3, r0
 80088f0:	ee01 3a90 	vmov	s3, r3
 80088f4:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8008b9c <plotter_begin+0x6a4>
 80088f8:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8008ba0 <plotter_begin+0x6a8>
 80088fc:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8008ba4 <plotter_begin+0x6ac>
 8008900:	48a9      	ldr	r0, [pc, #676]	@ (8008ba8 <plotter_begin+0x6b0>)
 8008902:	f7f8 fc56 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008906:	4ba4      	ldr	r3, [pc, #656]	@ (8008b98 <plotter_begin+0x6a0>)
 8008908:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 800890c:	4610      	mov	r0, r2
 800890e:	4619      	mov	r1, r3
 8008910:	f7f8 f920 	bl	8000b54 <__aeabi_d2f>
 8008914:	4603      	mov	r3, r0
 8008916:	ee01 3a90 	vmov	s3, r3
 800891a:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 8008b90 <plotter_begin+0x698>
 800891e:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8008bac <plotter_begin+0x6b4>
 8008922:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8008bb0 <plotter_begin+0x6b8>
 8008926:	48a3      	ldr	r0, [pc, #652]	@ (8008bb4 <plotter_begin+0x6bc>)
 8008928:	f7f8 fc43 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 800892c:	4ba2      	ldr	r3, [pc, #648]	@ (8008bb8 <plotter_begin+0x6c0>)
 800892e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
 8008932:	4610      	mov	r0, r2
 8008934:	4619      	mov	r1, r3
 8008936:	f7f8 f90d 	bl	8000b54 <__aeabi_d2f>
 800893a:	4603      	mov	r3, r0
 800893c:	ee01 3a90 	vmov	s3, r3
 8008940:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8008bbc <plotter_begin+0x6c4>
 8008944:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8008bc0 <plotter_begin+0x6c8>
 8008948:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8008bc4 <plotter_begin+0x6cc>
 800894c:	489e      	ldr	r0, [pc, #632]	@ (8008bc8 <plotter_begin+0x6d0>)
 800894e:	f7f8 fc30 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
			ZGX45RGG_150RPM_Constant.U_max);
 8008952:	4b99      	ldr	r3, [pc, #612]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008954:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 8008958:	4610      	mov	r0, r2
 800895a:	4619      	mov	r1, r3
 800895c:	f7f8 f8fa 	bl	8000b54 <__aeabi_d2f>
 8008960:	4603      	mov	r3, r0
 8008962:	ee01 3a90 	vmov	s3, r3
 8008966:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8008bcc <plotter_begin+0x6d4>
 800896a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 800896e:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8008b94 <plotter_begin+0x69c>
 8008972:	4897      	ldr	r0, [pc, #604]	@ (8008bd0 <plotter_begin+0x6d8>)
 8008974:	f7f8 fc1d 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008978:	4b8f      	ldr	r3, [pc, #572]	@ (8008bb8 <plotter_begin+0x6c0>)
 800897a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 800897e:	4610      	mov	r0, r2
 8008980:	4619      	mov	r1, r3
 8008982:	f7f8 f8e7 	bl	8000b54 <__aeabi_d2f>
 8008986:	4603      	mov	r3, r0
 8008988:	ee01 3a90 	vmov	s3, r3
 800898c:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8008b94 <plotter_begin+0x69c>
 8008990:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8008bc4 <plotter_begin+0x6cc>
 8008994:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8008bd4 <plotter_begin+0x6dc>
 8008998:	488f      	ldr	r0, [pc, #572]	@ (8008bd8 <plotter_begin+0x6e0>)
 800899a:	f7f8 fc0a 	bl	80011b2 <PID_CONTROLLER_Init>


	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800899e:	4986      	ldr	r1, [pc, #536]	@ (8008bb8 <plotter_begin+0x6c0>)
 80089a0:	488e      	ldr	r0, [pc, #568]	@ (8008bdc <plotter_begin+0x6e4>)
 80089a2:	f7f8 fdeb 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80089a6:	497c      	ldr	r1, [pc, #496]	@ (8008b98 <plotter_begin+0x6a0>)
 80089a8:	488d      	ldr	r0, [pc, #564]	@ (8008be0 <plotter_begin+0x6e8>)
 80089aa:	f7f8 ff65 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80089ae:	4a8d      	ldr	r2, [pc, #564]	@ (8008be4 <plotter_begin+0x6ec>)
 80089b0:	4981      	ldr	r1, [pc, #516]	@ (8008bb8 <plotter_begin+0x6c0>)
 80089b2:	488d      	ldr	r0, [pc, #564]	@ (8008be8 <plotter_begin+0x6f0>)
 80089b4:	f7f8 fe71 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80089b8:	4a8a      	ldr	r2, [pc, #552]	@ (8008be4 <plotter_begin+0x6ec>)
 80089ba:	4977      	ldr	r1, [pc, #476]	@ (8008b98 <plotter_begin+0x6a0>)
 80089bc:	488b      	ldr	r0, [pc, #556]	@ (8008bec <plotter_begin+0x6f4>)
 80089be:	f7f8 ffea 	bl	8001996 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80089c2:	2302      	movs	r3, #2
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8008bf0 <plotter_begin+0x6f8>
 80089ca:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8008bf4 <plotter_begin+0x6fc>
 80089ce:	2364      	movs	r3, #100	@ 0x64
 80089d0:	4a89      	ldr	r2, [pc, #548]	@ (8008bf8 <plotter_begin+0x700>)
 80089d2:	498a      	ldr	r1, [pc, #552]	@ (8008bfc <plotter_begin+0x704>)
 80089d4:	488a      	ldr	r0, [pc, #552]	@ (8008c00 <plotter_begin+0x708>)
 80089d6:	f7f8 faa3 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80089da:	2105      	movs	r1, #5
 80089dc:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8008c04 <plotter_begin+0x70c>
 80089e0:	4887      	ldr	r0, [pc, #540]	@ (8008c00 <plotter_begin+0x708>)
 80089e2:	f7f8 fb4f 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80089e6:	4886      	ldr	r0, [pc, #536]	@ (8008c00 <plotter_begin+0x708>)
 80089e8:	f7f8 faf2 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80089ec:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8008c08 <plotter_begin+0x710>
 80089f0:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80089f4:	211f      	movs	r1, #31
 80089f6:	4885      	ldr	r0, [pc, #532]	@ (8008c0c <plotter_begin+0x714>)
 80089f8:	f7f9 f894 	bl	8001b24 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80089fc:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8008c08 <plotter_begin+0x710>
 8008a00:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008a04:	211f      	movs	r1, #31
 8008a06:	4882      	ldr	r0, [pc, #520]	@ (8008c10 <plotter_begin+0x718>)
 8008a08:	f7f9 f88c 	bl	8001b24 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a0c:	4b62      	ldr	r3, [pc, #392]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a12:	4610      	mov	r0, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	f7f8 f89d 	bl	8000b54 <__aeabi_d2f>
 8008a1a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	f7f8 f895 	bl	8000b54 <__aeabi_d2f>
 8008a2a:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7f8 f88d 	bl	8000b54 <__aeabi_d2f>
 8008a3a:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008a3c:	4b56      	ldr	r3, [pc, #344]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	f7f8 f885 	bl	8000b54 <__aeabi_d2f>
 8008a4a:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008a4c:	4b52      	ldr	r3, [pc, #328]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a52:	4610      	mov	r0, r2
 8008a54:	4619      	mov	r1, r3
 8008a56:	f7f8 f87d 	bl	8000b54 <__aeabi_d2f>
 8008a5a:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8008b98 <plotter_begin+0x6a0>)
 8008a5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	f7f8 f875 	bl	8000b54 <__aeabi_d2f>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008a70:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008a74:	ee03 3a10 	vmov	s6, r3
 8008a78:	ee02 9a90 	vmov	s5, r9
 8008a7c:	ee02 8a10 	vmov	s4, r8
 8008a80:	ee01 6a90 	vmov	s3, r6
 8008a84:	ee01 5a10 	vmov	s2, r5
 8008a88:	ee00 4a90 	vmov	s1, r4
 8008a8c:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8008c14 <plotter_begin+0x71c>
 8008a90:	4861      	ldr	r0, [pc, #388]	@ (8008c18 <plotter_begin+0x720>)
 8008a92:	f7f9 fa9f 	bl	8001fd4 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008a96:	4b48      	ldr	r3, [pc, #288]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008a98:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f7f8 f858 	bl	8000b54 <__aeabi_d2f>
 8008aa4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008aa6:	4b44      	ldr	r3, [pc, #272]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008aa8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008aac:	4610      	mov	r0, r2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f7f8 f850 	bl	8000b54 <__aeabi_d2f>
 8008ab4:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008ab6:	4b40      	ldr	r3, [pc, #256]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008ab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008abc:	4610      	mov	r0, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f7f8 f848 	bl	8000b54 <__aeabi_d2f>
 8008ac4:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008ac8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008acc:	a326      	add	r3, pc, #152	@ (adr r3, 8008b68 <plotter_begin+0x670>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fd5d 	bl	8000590 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	f7f8 f839 	bl	8000b54 <__aeabi_d2f>
 8008ae2:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008ae4:	4b34      	ldr	r3, [pc, #208]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7f8 f831 	bl	8000b54 <__aeabi_d2f>
 8008af2:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8008af4:	4b30      	ldr	r3, [pc, #192]	@ (8008bb8 <plotter_begin+0x6c0>)
 8008af6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7f8 f829 	bl	8000b54 <__aeabi_d2f>
 8008b02:	4603      	mov	r3, r0
 8008b04:	4945      	ldr	r1, [pc, #276]	@ (8008c1c <plotter_begin+0x724>)
 8008b06:	4846      	ldr	r0, [pc, #280]	@ (8008c20 <plotter_begin+0x728>)
 8008b08:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8008c14 <plotter_begin+0x71c>
 8008b0c:	ee02 3a90 	vmov	s5, r3
 8008b10:	ee02 9a10 	vmov	s4, r9
 8008b14:	ee01 8a90 	vmov	s3, r8
 8008b18:	ee01 6a10 	vmov	s2, r6
 8008b1c:	ee00 5a90 	vmov	s1, r5
 8008b20:	ee00 4a10 	vmov	s0, r4
 8008b24:	f7fa fc02 	bl	800332c <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8008b28:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8008c24 <plotter_begin+0x72c>
 8008b2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008b30:	4a3a      	ldr	r2, [pc, #232]	@ (8008c1c <plotter_begin+0x724>)
 8008b32:	493b      	ldr	r1, [pc, #236]	@ (8008c20 <plotter_begin+0x728>)
 8008b34:	483c      	ldr	r0, [pc, #240]	@ (8008c28 <plotter_begin+0x730>)
 8008b36:	f7fc f965 	bl	8004e04 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8008b3a:	23c8      	movs	r3, #200	@ 0xc8
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	2315      	movs	r3, #21
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4b3a      	ldr	r3, [pc, #232]	@ (8008c2c <plotter_begin+0x734>)
 8008b44:	4a3a      	ldr	r2, [pc, #232]	@ (8008c30 <plotter_begin+0x738>)
 8008b46:	493b      	ldr	r1, [pc, #236]	@ (8008c34 <plotter_begin+0x73c>)
 8008b48:	483b      	ldr	r0, [pc, #236]	@ (8008c38 <plotter_begin+0x740>)
 8008b4a:	f7f9 f9db 	bl	8001f04 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8008b4e:	483b      	ldr	r0, [pc, #236]	@ (8008c3c <plotter_begin+0x744>)
 8008b50:	f004 fdfc 	bl	800d74c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8008b54:	f000 f874 	bl	8008c40 <plotter_reset>
}
 8008b58:	bf00      	nop
 8008b5a:	3704      	adds	r7, #4
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	ecbd 8b02 	vpop	{d8}
 8008b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b66:	bf00      	nop
 8008b68:	9999999a 	.word	0x9999999a
 8008b6c:	40019999 	.word	0x40019999
 8008b70:	20001c24 	.word	0x20001c24
 8008b74:	20000528 	.word	0x20000528
 8008b78:	20001dbc 	.word	0x20001dbc
 8008b7c:	20000434 	.word	0x20000434
 8008b80:	48000800 	.word	0x48000800
 8008b84:	20000480 	.word	0x20000480
 8008b88:	200019c0 	.word	0x200019c0
 8008b8c:	20000664 	.word	0x20000664
 8008b90:	00000000 	.word	0x00000000
 8008b94:	44fa0000 	.word	0x44fa0000
 8008b98:	20000080 	.word	0x20000080
 8008b9c:	42f00000 	.word	0x42f00000
 8008ba0:	2edbe6ff 	.word	0x2edbe6ff
 8008ba4:	42960000 	.word	0x42960000
 8008ba8:	20000584 	.word	0x20000584
 8008bac:	3727c5ac 	.word	0x3727c5ac
 8008bb0:	43160000 	.word	0x43160000
 8008bb4:	200005ac 	.word	0x200005ac
 8008bb8:	20000000 	.word	0x20000000
 8008bbc:	43e10000 	.word	0x43e10000
 8008bc0:	3dcccccd 	.word	0x3dcccccd
 8008bc4:	42c80000 	.word	0x42c80000
 8008bc8:	200005d4 	.word	0x200005d4
 8008bcc:	43fa0000 	.word	0x43fa0000
 8008bd0:	200005fc 	.word	0x200005fc
 8008bd4:	45ea6000 	.word	0x45ea6000
 8008bd8:	20000624 	.word	0x20000624
 8008bdc:	20000658 	.word	0x20000658
 8008be0:	2000064c 	.word	0x2000064c
 8008be4:	20000100 	.word	0x20000100
 8008be8:	2000065c 	.word	0x2000065c
 8008bec:	20000650 	.word	0x20000650
 8008bf0:	457ff000 	.word	0x457ff000
 8008bf4:	40533333 	.word	0x40533333
 8008bf8:	20000b30 	.word	0x20000b30
 8008bfc:	200001b4 	.word	0x200001b4
 8008c00:	2000067c 	.word	0x2000067c
 8008c04:	45000000 	.word	0x45000000
 8008c08:	447a0000 	.word	0x447a0000
 8008c0c:	20000b18 	.word	0x20000b18
 8008c10:	20000b24 	.word	0x20000b24
 8008c14:	3a83126f 	.word	0x3a83126f
 8008c18:	20001260 	.word	0x20001260
 8008c1c:	2000198c 	.word	0x2000198c
 8008c20:	2000194c 	.word	0x2000194c
 8008c24:	3d4ccccd 	.word	0x3d4ccccd
 8008c28:	200015cc 	.word	0x200015cc
 8008c2c:	200010d0 	.word	0x200010d0
 8008c30:	20001e88 	.word	0x20001e88
 8008c34:	20002020 	.word	0x20002020
 8008c38:	20000bf8 	.word	0x20000bf8
 8008c3c:	20001a8c 	.word	0x20001a8c

08008c40 <plotter_reset>:

void plotter_reset() {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8008c44:	4819      	ldr	r0, [pc, #100]	@ (8008cac <plotter_reset+0x6c>)
 8008c46:	f7fb f887 	bl	8003d58 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8008c4a:	4818      	ldr	r0, [pc, #96]	@ (8008cac <plotter_reset+0x6c>)
 8008c4c:	f7fb f884 	bl	8003d58 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8008c50:	4b16      	ldr	r3, [pc, #88]	@ (8008cac <plotter_reset+0x6c>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8008c56:	4b15      	ldr	r3, [pc, #84]	@ (8008cac <plotter_reset+0x6c>)
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8008c5e:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <plotter_reset+0x6c>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8008c64:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <plotter_reset+0x6c>)
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8008c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <plotter_reset+0x6c>)
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8008c74:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <plotter_reset+0x6c>)
 8008c76:	f04f 0200 	mov.w	r2, #0
 8008c7a:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb0 <plotter_reset+0x70>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8008c82:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <plotter_reset+0x70>)
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8008c8a:	4b09      	ldr	r3, [pc, #36]	@ (8008cb0 <plotter_reset+0x70>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8008c90:	4b07      	ldr	r3, [pc, #28]	@ (8008cb0 <plotter_reset+0x70>)
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <plotter_reset+0x70>)
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8008ca0:	4b03      	ldr	r3, [pc, #12]	@ (8008cb0 <plotter_reset+0x70>)
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008ca8:	bf00      	nop
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200004cc 	.word	0x200004cc
 8008cb0:	20000528 	.word	0x20000528

08008cb4 <plotter_update_sensors>:

void plotter_update_sensors() {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8008cb8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8008dc0 <plotter_update_sensors+0x10c>
 8008cbc:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8008dc4 <plotter_update_sensors+0x110>
 8008cc0:	2106      	movs	r1, #6
 8008cc2:	4841      	ldr	r0, [pc, #260]	@ (8008dc8 <plotter_update_sensors+0x114>)
 8008cc4:	f7f8 fa08 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008cc8:	eef0 7a40 	vmov.f32	s15, s0
 8008ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8008dcc <plotter_update_sensors+0x118>)
 8008cce:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8008cd2:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8008dc0 <plotter_update_sensors+0x10c>
 8008cd6:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8008dc4 <plotter_update_sensors+0x110>
 8008cda:	2107      	movs	r1, #7
 8008cdc:	483a      	ldr	r0, [pc, #232]	@ (8008dc8 <plotter_update_sensors+0x114>)
 8008cde:	f7f8 f9fb 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008ce2:	eef0 7a40 	vmov.f32	s15, s0
 8008ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8008dd0 <plotter_update_sensors+0x11c>)
 8008ce8:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8008cec:	2180      	movs	r1, #128	@ 0x80
 8008cee:	4839      	ldr	r0, [pc, #228]	@ (8008dd4 <plotter_update_sensors+0x120>)
 8008cf0:	f003 fbc6 	bl	800c480 <HAL_GPIO_ReadPin>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b35      	ldr	r3, [pc, #212]	@ (8008dd8 <plotter_update_sensors+0x124>)
 8008d04:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8008d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008d0a:	4834      	ldr	r0, [pc, #208]	@ (8008ddc <plotter_update_sensors+0x128>)
 8008d0c:	f003 fbb8 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf0c      	ite	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	2300      	movne	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4b30      	ldr	r3, [pc, #192]	@ (8008de0 <plotter_update_sensors+0x12c>)
 8008d20:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8008d22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008d26:	482d      	ldr	r0, [pc, #180]	@ (8008ddc <plotter_update_sensors+0x128>)
 8008d28:	f003 fbaa 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf0c      	ite	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	2300      	movne	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008de4 <plotter_update_sensors+0x130>)
 8008d3c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8008d3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008d42:	4826      	ldr	r0, [pc, #152]	@ (8008ddc <plotter_update_sensors+0x128>)
 8008d44:	f003 fb9c 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	4b24      	ldr	r3, [pc, #144]	@ (8008de8 <plotter_update_sensors+0x134>)
 8008d58:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	481d      	ldr	r0, [pc, #116]	@ (8008dd4 <plotter_update_sensors+0x120>)
 8008d5e:	f003 fb8f 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d62:	4603      	mov	r3, r0
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b21      	ldr	r3, [pc, #132]	@ (8008dec <plotter_update_sensors+0x138>)
 8008d68:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4819      	ldr	r0, [pc, #100]	@ (8008dd4 <plotter_update_sensors+0x120>)
 8008d6e:	f003 fb87 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b1e      	ldr	r3, [pc, #120]	@ (8008df0 <plotter_update_sensors+0x13c>)
 8008d78:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008df4 <plotter_update_sensors+0x140>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f083 0301 	eor.w	r3, r3, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d018      	beq.n	8008dba <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8008d88:	2101      	movs	r1, #1
 8008d8a:	4812      	ldr	r0, [pc, #72]	@ (8008dd4 <plotter_update_sensors+0x120>)
 8008d8c:	f003 fb78 	bl	800c480 <HAL_GPIO_ReadPin>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bf14      	ite	ne
 8008d96:	2301      	movne	r3, #1
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	4b16      	ldr	r3, [pc, #88]	@ (8008df8 <plotter_update_sensors+0x144>)
 8008d9e:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8008da0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008da4:	480b      	ldr	r0, [pc, #44]	@ (8008dd4 <plotter_update_sensors+0x120>)
 8008da6:	f003 fb6b 	bl	800c480 <HAL_GPIO_ReadPin>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf14      	ite	ne
 8008db0:	2301      	movne	r3, #1
 8008db2:	2300      	moveq	r3, #0
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	4b11      	ldr	r3, [pc, #68]	@ (8008dfc <plotter_update_sensors+0x148>)
 8008db8:	701a      	strb	r2, [r3, #0]
	}
}
 8008dba:	bf00      	nop
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	42480000 	.word	0x42480000
 8008dc4:	c2480000 	.word	0xc2480000
 8008dc8:	2000067c 	.word	0x2000067c
 8008dcc:	2000199c 	.word	0x2000199c
 8008dd0:	200019a0 	.word	0x200019a0
 8008dd4:	48000400 	.word	0x48000400
 8008dd8:	200019ac 	.word	0x200019ac
 8008ddc:	48000800 	.word	0x48000800
 8008de0:	200019b0 	.word	0x200019b0
 8008de4:	200019b4 	.word	0x200019b4
 8008de8:	200019b8 	.word	0x200019b8
 8008dec:	200019a4 	.word	0x200019a4
 8008df0:	200019a8 	.word	0x200019a8
 8008df4:	2000036b 	.word	0x2000036b
 8008df8:	20000368 	.word	0x20000368
 8008dfc:	20000369 	.word	0x20000369

08008e00 <plotter_pen_up>:

void plotter_pen_up() {
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8008e04:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8008e08:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008e18 <plotter_pen_up+0x18>
 8008e0c:	4803      	ldr	r0, [pc, #12]	@ (8008e1c <plotter_pen_up+0x1c>)
 8008e0e:	f7fa fb17 	bl	8003440 <PWM_write_duty>
}
 8008e12:	bf00      	nop
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	42480000 	.word	0x42480000
 8008e1c:	20000664 	.word	0x20000664

08008e20 <plotter_pen_down>:

void plotter_pen_down() {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8008e24:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8008e28:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008e38 <plotter_pen_down+0x18>
 8008e2c:	4803      	ldr	r0, [pc, #12]	@ (8008e3c <plotter_pen_down+0x1c>)
 8008e2e:	f7fa fb07 	bl	8003440 <PWM_write_duty>
}
 8008e32:	bf00      	nop
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	42480000 	.word	0x42480000
 8008e3c:	20000664 	.word	0x20000664

08008e40 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008e58:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008e60:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <SIGNAL_init+0xb4>)
 8008e86:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d828      	bhi.n	8008ee8 <SIGNAL_init+0xa8>
 8008e96:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <SIGNAL_init+0x5c>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ee7 	.word	0x08008ee7
 8008ea0:	08008ead 	.word	0x08008ead
 8008ea4:	08008ecb 	.word	0x08008ecb
 8008ea8:	08008ed5 	.word	0x08008ed5
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008eb8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8008ef8 <SIGNAL_init+0xb8>)
 8008ebe:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008ec6:	621a      	str	r2, [r3, #32]
            break;
 8008ec8:	e00e      	b.n	8008ee8 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008ed0:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8008ed2:	e009      	b.n	8008ee8 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008ee2:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8008ee4:	e000      	b.n	8008ee8 <SIGNAL_init+0xa8>
            break;
 8008ee6:	bf00      	nop
    }
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	bf800000 	.word	0xbf800000
 8008ef8:	41200000 	.word	0x41200000

08008efc <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8008efc:	b480      	push	{r7}
 8008efe:	b089      	sub	sp, #36	@ 0x24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	61f8      	str	r0, [r7, #28]
 8008f04:	ed87 0a06 	vstr	s0, [r7, #24]
 8008f08:	edc7 0a05 	vstr	s1, [r7, #20]
 8008f0c:	ed87 1a04 	vstr	s2, [r7, #16]
 8008f10:	edc7 1a03 	vstr	s3, [r7, #12]
 8008f14:	ed87 2a02 	vstr	s4, [r7, #8]
 8008f18:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008f46:	bf00      	nop
 8008f48:	3724      	adds	r7, #36	@ 0x24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8008f52:	b480      	push	{r7}
 8008f54:	b089      	sub	sp, #36	@ 0x24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	61f8      	str	r0, [r7, #28]
 8008f5a:	ed87 0a06 	vstr	s0, [r7, #24]
 8008f5e:	edc7 0a05 	vstr	s1, [r7, #20]
 8008f62:	ed87 1a04 	vstr	s2, [r7, #16]
 8008f66:	edc7 1a03 	vstr	s3, [r7, #12]
 8008f6a:	ed87 2a02 	vstr	s4, [r7, #8]
 8008f6e:	edc7 2a01 	vstr	s5, [r7, #4]
 8008f72:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008fa6:	bf00      	nop
 8008fa8:	3724      	adds	r7, #36	@ 0x24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fba:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fc0:	f043 0301 	orr.w	r3, r3, #1
 8008fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	607b      	str	r3, [r7, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd6:	4a08      	ldr	r2, [pc, #32]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fde:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <HAL_MspInit+0x44>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008fea:	f003 fb4f 	bl	800c68c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40021000 	.word	0x40021000

08008ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009000:	bf00      	nop
 8009002:	e7fd      	b.n	8009000 <NMI_Handler+0x4>

08009004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009008:	bf00      	nop
 800900a:	e7fd      	b.n	8009008 <HardFault_Handler+0x4>

0800900c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <MemManage_Handler+0x4>

08009014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <BusFault_Handler+0x4>

0800901c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <UsageFault_Handler+0x4>

08009024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009028:	bf00      	nop
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009032:	b480      	push	{r7}
 8009034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009036:	bf00      	nop
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009052:	f000 ffbb 	bl	8009fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009056:	bf00      	nop
 8009058:	bd80      	pop	{r7, pc}

0800905a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800905e:	2001      	movs	r0, #1
 8009060:	f003 fa58 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009064:	bf00      	nop
 8009066:	bd80      	pop	{r7, pc}

08009068 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 800906c:	2010      	movs	r0, #16
 800906e:	f003 fa51 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800907c:	4802      	ldr	r0, [pc, #8]	@ (8009088 <DMA1_Channel1_IRQHandler+0x10>)
 800907e:	f002 ff2e 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000220 	.word	0x20000220

0800908c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009090:	4802      	ldr	r0, [pc, #8]	@ (800909c <DMA1_Channel2_IRQHandler+0x10>)
 8009092:	f002 ff24 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009096:	bf00      	nop
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200021ac 	.word	0x200021ac

080090a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80090a4:	4802      	ldr	r0, [pc, #8]	@ (80090b0 <DMA1_Channel3_IRQHandler+0x10>)
 80090a6:	f002 ff1a 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80090aa:	bf00      	nop
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	2000220c 	.word	0x2000220c

080090b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80090b8:	4802      	ldr	r0, [pc, #8]	@ (80090c4 <DMA1_Channel4_IRQHandler+0x10>)
 80090ba:	f002 ff10 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200020ec 	.word	0x200020ec

080090c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80090cc:	4802      	ldr	r0, [pc, #8]	@ (80090d8 <DMA1_Channel5_IRQHandler+0x10>)
 80090ce:	f002 ff06 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80090d2:	bf00      	nop
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2000214c 	.word	0x2000214c

080090dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 80090e0:	2040      	movs	r0, #64	@ 0x40
 80090e2:	f003 fa17 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 80090e6:	2080      	movs	r0, #128	@ 0x80
 80090e8:	f003 fa14 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80090ec:	bf00      	nop
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80090f4:	4803      	ldr	r0, [pc, #12]	@ (8009104 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80090f6:	f004 ff4f 	bl	800df98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80090fa:	4803      	ldr	r0, [pc, #12]	@ (8009108 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80090fc:	f004 ff4c 	bl	800df98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009100:	bf00      	nop
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200019c0 	.word	0x200019c0
 8009108:	20001e88 	.word	0x20001e88

0800910c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009110:	4802      	ldr	r0, [pc, #8]	@ (800911c <TIM2_IRQHandler+0x10>)
 8009112:	f004 ff41 	bl	800df98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009116:	bf00      	nop
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20001a8c 	.word	0x20001a8c

08009120 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009124:	4802      	ldr	r0, [pc, #8]	@ (8009130 <TIM3_IRQHandler+0x10>)
 8009126:	f004 ff37 	bl	800df98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20001b58 	.word	0x20001b58

08009134 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009138:	4802      	ldr	r0, [pc, #8]	@ (8009144 <TIM4_IRQHandler+0x10>)
 800913a:	f004 ff2d 	bl	800df98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800913e:	bf00      	nop
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20001c24 	.word	0x20001c24

08009148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800914c:	4802      	ldr	r0, [pc, #8]	@ (8009158 <USART2_IRQHandler+0x10>)
 800914e:	f006 fc77 	bl	800fa40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009152:	bf00      	nop
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20002020 	.word	0x20002020

0800915c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8009160:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009164:	f003 f9d6 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8009168:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800916c:	f003 f9d2 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8009170:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009174:	f003 f9ce 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009178:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800917c:	f003 f9ca 	bl	800c514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}

08009184 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009188:	4802      	ldr	r0, [pc, #8]	@ (8009194 <LPUART1_IRQHandler+0x10>)
 800918a:	f006 fc59 	bl	800fa40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800918e:	bf00      	nop
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20001f54 	.word	0x20001f54

08009198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091a0:	4a14      	ldr	r2, [pc, #80]	@ (80091f4 <_sbrk+0x5c>)
 80091a2:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <_sbrk+0x60>)
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091ac:	4b13      	ldr	r3, [pc, #76]	@ (80091fc <_sbrk+0x64>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091b4:	4b11      	ldr	r3, [pc, #68]	@ (80091fc <_sbrk+0x64>)
 80091b6:	4a12      	ldr	r2, [pc, #72]	@ (8009200 <_sbrk+0x68>)
 80091b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091ba:	4b10      	ldr	r3, [pc, #64]	@ (80091fc <_sbrk+0x64>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d207      	bcs.n	80091d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091c8:	f008 fec8 	bl	8011f5c <__errno>
 80091cc:	4603      	mov	r3, r0
 80091ce:	220c      	movs	r2, #12
 80091d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	e009      	b.n	80091ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091d8:	4b08      	ldr	r3, [pc, #32]	@ (80091fc <_sbrk+0x64>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80091de:	4b07      	ldr	r3, [pc, #28]	@ (80091fc <_sbrk+0x64>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a05      	ldr	r2, [pc, #20]	@ (80091fc <_sbrk+0x64>)
 80091e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80091ea:	68fb      	ldr	r3, [r7, #12]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20020000 	.word	0x20020000
 80091f8:	00000400 	.word	0x00000400
 80091fc:	200019bc 	.word	0x200019bc
 8009200:	200023b8 	.word	0x200023b8

08009204 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009208:	4b06      	ldr	r3, [pc, #24]	@ (8009224 <SystemInit+0x20>)
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920e:	4a05      	ldr	r2, [pc, #20]	@ (8009224 <SystemInit+0x20>)
 8009210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009218:	bf00      	nop
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b098      	sub	sp, #96	@ 0x60
 800922c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800922e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	605a      	str	r2, [r3, #4]
 8009238:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800923a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	609a      	str	r2, [r3, #8]
 8009246:	60da      	str	r2, [r3, #12]
 8009248:	611a      	str	r2, [r3, #16]
 800924a:	615a      	str	r2, [r3, #20]
 800924c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800924e:	1d3b      	adds	r3, r7, #4
 8009250:	2234      	movs	r2, #52	@ 0x34
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f008 fe69 	bl	8011f2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800925a:	4b3b      	ldr	r3, [pc, #236]	@ (8009348 <MX_TIM1_Init+0x120>)
 800925c:	4a3b      	ldr	r2, [pc, #236]	@ (800934c <MX_TIM1_Init+0x124>)
 800925e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009260:	4b39      	ldr	r3, [pc, #228]	@ (8009348 <MX_TIM1_Init+0x120>)
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009266:	4b38      	ldr	r3, [pc, #224]	@ (8009348 <MX_TIM1_Init+0x120>)
 8009268:	2200      	movs	r2, #0
 800926a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800926c:	4b36      	ldr	r3, [pc, #216]	@ (8009348 <MX_TIM1_Init+0x120>)
 800926e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009272:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009274:	4b34      	ldr	r3, [pc, #208]	@ (8009348 <MX_TIM1_Init+0x120>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800927a:	4b33      	ldr	r3, [pc, #204]	@ (8009348 <MX_TIM1_Init+0x120>)
 800927c:	2200      	movs	r2, #0
 800927e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009280:	4b31      	ldr	r3, [pc, #196]	@ (8009348 <MX_TIM1_Init+0x120>)
 8009282:	2200      	movs	r2, #0
 8009284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009286:	4830      	ldr	r0, [pc, #192]	@ (8009348 <MX_TIM1_Init+0x120>)
 8009288:	f004 fad8 	bl	800d83c <HAL_TIM_PWM_Init>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009292:	f7ff f929 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009296:	2300      	movs	r3, #0
 8009298:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800929a:	2300      	movs	r3, #0
 800929c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800929e:	2300      	movs	r3, #0
 80092a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80092a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80092a6:	4619      	mov	r1, r3
 80092a8:	4827      	ldr	r0, [pc, #156]	@ (8009348 <MX_TIM1_Init+0x120>)
 80092aa:	f006 f8e9 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80092b4:	f7ff f918 	bl	80084e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80092b8:	2360      	movs	r3, #96	@ 0x60
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092c0:	2300      	movs	r3, #0
 80092c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80092c4:	2300      	movs	r3, #0
 80092c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80092cc:	2300      	movs	r3, #0
 80092ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80092d0:	2300      	movs	r3, #0
 80092d2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80092d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80092d8:	220c      	movs	r2, #12
 80092da:	4619      	mov	r1, r3
 80092dc:	481a      	ldr	r0, [pc, #104]	@ (8009348 <MX_TIM1_Init+0x120>)
 80092de:	f004 ffd5 	bl	800e28c <HAL_TIM_PWM_ConfigChannel>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80092e8:	f7ff f8fe 	bl	80084e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800930a:	2300      	movs	r3, #0
 800930c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800930e:	2300      	movs	r3, #0
 8009310:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800931c:	2300      	movs	r3, #0
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009320:	2300      	movs	r3, #0
 8009322:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4807      	ldr	r0, [pc, #28]	@ (8009348 <MX_TIM1_Init+0x120>)
 800932a:	f006 f93f 	bl	800f5ac <HAL_TIMEx_ConfigBreakDeadTime>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009334:	f7ff f8d8 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009338:	4803      	ldr	r0, [pc, #12]	@ (8009348 <MX_TIM1_Init+0x120>)
 800933a:	f000 fb77 	bl	8009a2c <HAL_TIM_MspPostInit>

}
 800933e:	bf00      	nop
 8009340:	3760      	adds	r7, #96	@ 0x60
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200019c0 	.word	0x200019c0
 800934c:	40012c00 	.word	0x40012c00

08009350 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009356:	f107 0310 	add.w	r3, r7, #16
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009364:	1d3b      	adds	r3, r7, #4
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800936e:	4b1e      	ldr	r3, [pc, #120]	@ (80093e8 <MX_TIM2_Init+0x98>)
 8009370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009374:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8009376:	4b1c      	ldr	r3, [pc, #112]	@ (80093e8 <MX_TIM2_Init+0x98>)
 8009378:	22a9      	movs	r2, #169	@ 0xa9
 800937a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800937c:	4b1a      	ldr	r3, [pc, #104]	@ (80093e8 <MX_TIM2_Init+0x98>)
 800937e:	2200      	movs	r2, #0
 8009380:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8009382:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <MX_TIM2_Init+0x98>)
 8009384:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009388:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800938a:	4b17      	ldr	r3, [pc, #92]	@ (80093e8 <MX_TIM2_Init+0x98>)
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009390:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <MX_TIM2_Init+0x98>)
 8009392:	2200      	movs	r2, #0
 8009394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009396:	4814      	ldr	r0, [pc, #80]	@ (80093e8 <MX_TIM2_Init+0x98>)
 8009398:	f004 f904 	bl	800d5a4 <HAL_TIM_Base_Init>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80093a2:	f7ff f8a1 	bl	80084e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80093ac:	f107 0310 	add.w	r3, r7, #16
 80093b0:	4619      	mov	r1, r3
 80093b2:	480d      	ldr	r0, [pc, #52]	@ (80093e8 <MX_TIM2_Init+0x98>)
 80093b4:	f005 f87e 	bl	800e4b4 <HAL_TIM_ConfigClockSource>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80093be:	f7ff f893 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80093ca:	1d3b      	adds	r3, r7, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4806      	ldr	r0, [pc, #24]	@ (80093e8 <MX_TIM2_Init+0x98>)
 80093d0:	f006 f856 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80093da:	f7ff f885 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80093de:	bf00      	nop
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20001a8c 	.word	0x20001a8c

080093ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08c      	sub	sp, #48	@ 0x30
 80093f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	2224      	movs	r2, #36	@ 0x24
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f008 fd96 	bl	8011f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009400:	463b      	mov	r3, r7
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800940a:	4b21      	ldr	r3, [pc, #132]	@ (8009490 <MX_TIM3_Init+0xa4>)
 800940c:	4a21      	ldr	r2, [pc, #132]	@ (8009494 <MX_TIM3_Init+0xa8>)
 800940e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009410:	4b1f      	ldr	r3, [pc, #124]	@ (8009490 <MX_TIM3_Init+0xa4>)
 8009412:	2200      	movs	r2, #0
 8009414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009416:	4b1e      	ldr	r3, [pc, #120]	@ (8009490 <MX_TIM3_Init+0xa4>)
 8009418:	2200      	movs	r2, #0
 800941a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800941c:	4b1c      	ldr	r3, [pc, #112]	@ (8009490 <MX_TIM3_Init+0xa4>)
 800941e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009424:	4b1a      	ldr	r3, [pc, #104]	@ (8009490 <MX_TIM3_Init+0xa4>)
 8009426:	2200      	movs	r2, #0
 8009428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800942a:	4b19      	ldr	r3, [pc, #100]	@ (8009490 <MX_TIM3_Init+0xa4>)
 800942c:	2200      	movs	r2, #0
 800942e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009430:	2303      	movs	r3, #3
 8009432:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009434:	2300      	movs	r3, #0
 8009436:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800943c:	2300      	movs	r3, #0
 800943e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009448:	2301      	movs	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800944c:	2300      	movs	r3, #0
 800944e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009454:	f107 030c 	add.w	r3, r7, #12
 8009458:	4619      	mov	r1, r3
 800945a:	480d      	ldr	r0, [pc, #52]	@ (8009490 <MX_TIM3_Init+0xa4>)
 800945c:	f004 fc5a 	bl	800dd14 <HAL_TIM_Encoder_Init>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009466:	f7ff f83f 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800946a:	2300      	movs	r3, #0
 800946c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800946e:	2300      	movs	r3, #0
 8009470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009472:	463b      	mov	r3, r7
 8009474:	4619      	mov	r1, r3
 8009476:	4806      	ldr	r0, [pc, #24]	@ (8009490 <MX_TIM3_Init+0xa4>)
 8009478:	f006 f802 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8009482:	f7ff f831 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009486:	bf00      	nop
 8009488:	3730      	adds	r7, #48	@ 0x30
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20001b58 	.word	0x20001b58
 8009494:	40000400 	.word	0x40000400

08009498 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08c      	sub	sp, #48	@ 0x30
 800949c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800949e:	f107 030c 	add.w	r3, r7, #12
 80094a2:	2224      	movs	r2, #36	@ 0x24
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f008 fd40 	bl	8011f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094ac:	463b      	mov	r3, r7
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	605a      	str	r2, [r3, #4]
 80094b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80094b6:	4b21      	ldr	r3, [pc, #132]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094b8:	4a21      	ldr	r2, [pc, #132]	@ (8009540 <MX_TIM4_Init+0xa8>)
 80094ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80094bc:	4b1f      	ldr	r3, [pc, #124]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094be:	2200      	movs	r2, #0
 80094c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094c2:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80094c8:	4b1c      	ldr	r3, [pc, #112]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094d0:	4b1a      	ldr	r3, [pc, #104]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094d6:	4b19      	ldr	r3, [pc, #100]	@ (800953c <MX_TIM4_Init+0xa4>)
 80094d8:	2200      	movs	r2, #0
 80094da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80094dc:	2303      	movs	r3, #3
 80094de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80094f0:	2300      	movs	r3, #0
 80094f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80094f4:	2301      	movs	r3, #1
 80094f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80094f8:	2300      	movs	r3, #0
 80094fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009500:	f107 030c 	add.w	r3, r7, #12
 8009504:	4619      	mov	r1, r3
 8009506:	480d      	ldr	r0, [pc, #52]	@ (800953c <MX_TIM4_Init+0xa4>)
 8009508:	f004 fc04 	bl	800dd14 <HAL_TIM_Encoder_Init>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8009512:	f7fe ffe9 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009516:	2300      	movs	r3, #0
 8009518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800951a:	2300      	movs	r3, #0
 800951c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800951e:	463b      	mov	r3, r7
 8009520:	4619      	mov	r1, r3
 8009522:	4806      	ldr	r0, [pc, #24]	@ (800953c <MX_TIM4_Init+0xa4>)
 8009524:	f005 ffac 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800952e:	f7fe ffdb 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009532:	bf00      	nop
 8009534:	3730      	adds	r7, #48	@ 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20001c24 	.word	0x20001c24
 8009540:	40000800 	.word	0x40000800

08009544 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08c      	sub	sp, #48	@ 0x30
 8009548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800954a:	f107 030c 	add.w	r3, r7, #12
 800954e:	2224      	movs	r2, #36	@ 0x24
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f008 fcea 	bl	8011f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009558:	463b      	mov	r3, r7
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	605a      	str	r2, [r3, #4]
 8009560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009562:	4b21      	ldr	r3, [pc, #132]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 8009564:	4a21      	ldr	r2, [pc, #132]	@ (80095ec <MX_TIM5_Init+0xa8>)
 8009566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009568:	4b1f      	ldr	r3, [pc, #124]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 800956a:	2200      	movs	r2, #0
 800956c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800956e:	4b1e      	ldr	r3, [pc, #120]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 8009570:	2200      	movs	r2, #0
 8009572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009574:	4b1c      	ldr	r3, [pc, #112]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 8009576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800957a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800957c:	4b1a      	ldr	r3, [pc, #104]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 800957e:	2200      	movs	r2, #0
 8009580:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009582:	4b19      	ldr	r3, [pc, #100]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 8009584:	2200      	movs	r2, #0
 8009586:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009588:	2303      	movs	r3, #3
 800958a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800958c:	2300      	movs	r3, #0
 800958e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009590:	2301      	movs	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800959c:	2300      	movs	r3, #0
 800959e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80095a0:	2301      	movs	r3, #1
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80095a4:	2300      	movs	r3, #0
 80095a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	4619      	mov	r1, r3
 80095b2:	480d      	ldr	r0, [pc, #52]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 80095b4:	f004 fbae 	bl	800dd14 <HAL_TIM_Encoder_Init>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80095be:	f7fe ff93 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095c2:	2300      	movs	r3, #0
 80095c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80095ca:	463b      	mov	r3, r7
 80095cc:	4619      	mov	r1, r3
 80095ce:	4806      	ldr	r0, [pc, #24]	@ (80095e8 <MX_TIM5_Init+0xa4>)
 80095d0:	f005 ff56 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80095da:	f7fe ff85 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80095de:	bf00      	nop
 80095e0:	3730      	adds	r7, #48	@ 0x30
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20001cf0 	.word	0x20001cf0
 80095ec:	40000c00 	.word	0x40000c00

080095f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b09c      	sub	sp, #112	@ 0x70
 80095f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	605a      	str	r2, [r3, #4]
 8009600:	609a      	str	r2, [r3, #8]
 8009602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009604:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009610:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	605a      	str	r2, [r3, #4]
 800961a:	609a      	str	r2, [r3, #8]
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	611a      	str	r2, [r3, #16]
 8009620:	615a      	str	r2, [r3, #20]
 8009622:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009624:	1d3b      	adds	r3, r7, #4
 8009626:	2234      	movs	r2, #52	@ 0x34
 8009628:	2100      	movs	r1, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f008 fc7e 	bl	8011f2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009630:	4b4c      	ldr	r3, [pc, #304]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009632:	4a4d      	ldr	r2, [pc, #308]	@ (8009768 <MX_TIM8_Init+0x178>)
 8009634:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009636:	4b4b      	ldr	r3, [pc, #300]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009638:	2200      	movs	r2, #0
 800963a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800963c:	4b49      	ldr	r3, [pc, #292]	@ (8009764 <MX_TIM8_Init+0x174>)
 800963e:	2200      	movs	r2, #0
 8009640:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009642:	4b48      	ldr	r3, [pc, #288]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009648:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800964a:	4b46      	ldr	r3, [pc, #280]	@ (8009764 <MX_TIM8_Init+0x174>)
 800964c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009650:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009652:	4b44      	ldr	r3, [pc, #272]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009654:	2200      	movs	r2, #0
 8009656:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009658:	4b42      	ldr	r3, [pc, #264]	@ (8009764 <MX_TIM8_Init+0x174>)
 800965a:	2200      	movs	r2, #0
 800965c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800965e:	4841      	ldr	r0, [pc, #260]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009660:	f003 ffa0 	bl	800d5a4 <HAL_TIM_Base_Init>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800966a:	f7fe ff3d 	bl	80084e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800966e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009672:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009674:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009678:	4619      	mov	r1, r3
 800967a:	483a      	ldr	r0, [pc, #232]	@ (8009764 <MX_TIM8_Init+0x174>)
 800967c:	f004 ff1a 	bl	800e4b4 <HAL_TIM_ConfigClockSource>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009686:	f7fe ff2f 	bl	80084e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800968a:	4836      	ldr	r0, [pc, #216]	@ (8009764 <MX_TIM8_Init+0x174>)
 800968c:	f004 f8d6 	bl	800d83c <HAL_TIM_PWM_Init>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009696:	f7fe ff27 	bl	80084e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800969a:	2300      	movs	r3, #0
 800969c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800969e:	2300      	movs	r3, #0
 80096a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80096a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80096aa:	4619      	mov	r1, r3
 80096ac:	482d      	ldr	r0, [pc, #180]	@ (8009764 <MX_TIM8_Init+0x174>)
 80096ae:	f005 fee7 	bl	800f480 <HAL_TIMEx_MasterConfigSynchronization>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80096b8:	f7fe ff16 	bl	80084e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096bc:	2360      	movs	r3, #96	@ 0x60
 80096be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096c4:	2300      	movs	r3, #0
 80096c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096c8:	2300      	movs	r3, #0
 80096ca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80096d0:	2300      	movs	r3, #0
 80096d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80096d4:	2300      	movs	r3, #0
 80096d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80096d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80096dc:	2200      	movs	r2, #0
 80096de:	4619      	mov	r1, r3
 80096e0:	4820      	ldr	r0, [pc, #128]	@ (8009764 <MX_TIM8_Init+0x174>)
 80096e2:	f004 fdd3 	bl	800e28c <HAL_TIM_PWM_ConfigChannel>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80096ec:	f7fe fefc 	bl	80084e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80096f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80096f4:	2204      	movs	r2, #4
 80096f6:	4619      	mov	r1, r3
 80096f8:	481a      	ldr	r0, [pc, #104]	@ (8009764 <MX_TIM8_Init+0x174>)
 80096fa:	f004 fdc7 	bl	800e28c <HAL_TIM_PWM_ConfigChannel>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009704:	f7fe fef0 	bl	80084e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009708:	2300      	movs	r3, #0
 800970a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800970c:	2300      	movs	r3, #0
 800970e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800971c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009720:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009726:	2300      	movs	r3, #0
 8009728:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800972e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009732:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009738:	2300      	movs	r3, #0
 800973a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800973c:	2300      	movs	r3, #0
 800973e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	4619      	mov	r1, r3
 8009744:	4807      	ldr	r0, [pc, #28]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009746:	f005 ff31 	bl	800f5ac <HAL_TIMEx_ConfigBreakDeadTime>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009750:	f7fe feca 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009754:	4803      	ldr	r0, [pc, #12]	@ (8009764 <MX_TIM8_Init+0x174>)
 8009756:	f000 f969 	bl	8009a2c <HAL_TIM_MspPostInit>

}
 800975a:	bf00      	nop
 800975c:	3770      	adds	r7, #112	@ 0x70
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20001dbc 	.word	0x20001dbc
 8009768:	40013400 	.word	0x40013400

0800976c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009770:	4b14      	ldr	r3, [pc, #80]	@ (80097c4 <MX_TIM16_Init+0x58>)
 8009772:	4a15      	ldr	r2, [pc, #84]	@ (80097c8 <MX_TIM16_Init+0x5c>)
 8009774:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <MX_TIM16_Init+0x58>)
 8009778:	22a9      	movs	r2, #169	@ 0xa9
 800977a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800977c:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <MX_TIM16_Init+0x58>)
 800977e:	2200      	movs	r2, #0
 8009780:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009782:	4b10      	ldr	r3, [pc, #64]	@ (80097c4 <MX_TIM16_Init+0x58>)
 8009784:	f240 4279 	movw	r2, #1145	@ 0x479
 8009788:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800978a:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <MX_TIM16_Init+0x58>)
 800978c:	2200      	movs	r2, #0
 800978e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009790:	4b0c      	ldr	r3, [pc, #48]	@ (80097c4 <MX_TIM16_Init+0x58>)
 8009792:	2200      	movs	r2, #0
 8009794:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009796:	4b0b      	ldr	r3, [pc, #44]	@ (80097c4 <MX_TIM16_Init+0x58>)
 8009798:	2200      	movs	r2, #0
 800979a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800979c:	4809      	ldr	r0, [pc, #36]	@ (80097c4 <MX_TIM16_Init+0x58>)
 800979e:	f003 ff01 	bl	800d5a4 <HAL_TIM_Base_Init>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80097a8:	f7fe fe9e 	bl	80084e8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80097ac:	2108      	movs	r1, #8
 80097ae:	4805      	ldr	r0, [pc, #20]	@ (80097c4 <MX_TIM16_Init+0x58>)
 80097b0:	f004 f9ba 	bl	800db28 <HAL_TIM_OnePulse_Init>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80097ba:	f7fe fe95 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80097be:	bf00      	nop
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20001e88 	.word	0x20001e88
 80097c8:	40014400 	.word	0x40014400

080097cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009810 <HAL_TIM_PWM_MspInit+0x44>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d113      	bne.n	8009806 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80097de:	4b0d      	ldr	r3, [pc, #52]	@ (8009814 <HAL_TIM_PWM_MspInit+0x48>)
 80097e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009814 <HAL_TIM_PWM_MspInit+0x48>)
 80097e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80097e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80097ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <HAL_TIM_PWM_MspInit+0x48>)
 80097ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	2019      	movs	r0, #25
 80097fc:	f002 f957 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009800:	2019      	movs	r0, #25
 8009802:	f002 f96e 	bl	800bae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009806:	bf00      	nop
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	40012c00 	.word	0x40012c00
 8009814:	40021000 	.word	0x40021000

08009818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009828:	d114      	bne.n	8009854 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800982a:	4b22      	ldr	r3, [pc, #136]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800982e:	4a21      	ldr	r2, [pc, #132]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	6593      	str	r3, [r2, #88]	@ 0x58
 8009836:	4b1f      	ldr	r3, [pc, #124]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	201c      	movs	r0, #28
 8009848:	f002 f931 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800984c:	201c      	movs	r0, #28
 800984e:	f002 f948 	bl	800bae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009852:	e02a      	b.n	80098aa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a17      	ldr	r2, [pc, #92]	@ (80098b8 <HAL_TIM_Base_MspInit+0xa0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d10c      	bne.n	8009878 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800985e:	4b15      	ldr	r3, [pc, #84]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009862:	4a14      	ldr	r2, [pc, #80]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009864:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009868:	6613      	str	r3, [r2, #96]	@ 0x60
 800986a:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 800986c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800986e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	693b      	ldr	r3, [r7, #16]
}
 8009876:	e018      	b.n	80098aa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a0f      	ldr	r2, [pc, #60]	@ (80098bc <HAL_TIM_Base_MspInit+0xa4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d113      	bne.n	80098aa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009886:	4a0b      	ldr	r2, [pc, #44]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800988c:	6613      	str	r3, [r2, #96]	@ 0x60
 800988e:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <HAL_TIM_Base_MspInit+0x9c>)
 8009890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800989a:	2200      	movs	r2, #0
 800989c:	2100      	movs	r1, #0
 800989e:	2019      	movs	r0, #25
 80098a0:	f002 f905 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80098a4:	2019      	movs	r0, #25
 80098a6:	f002 f91c 	bl	800bae2 <HAL_NVIC_EnableIRQ>
}
 80098aa:	bf00      	nop
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	40021000 	.word	0x40021000
 80098b8:	40013400 	.word	0x40013400
 80098bc:	40014400 	.word	0x40014400

080098c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08e      	sub	sp, #56	@ 0x38
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	609a      	str	r2, [r3, #8]
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a4f      	ldr	r2, [pc, #316]	@ (8009a1c <HAL_TIM_Encoder_MspInit+0x15c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d131      	bne.n	8009946 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80098e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80098e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80098ee:	4b4c      	ldr	r3, [pc, #304]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80098f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	623b      	str	r3, [r7, #32]
 80098f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098fa:	4b49      	ldr	r3, [pc, #292]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80098fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fe:	4a48      	ldr	r2, [pc, #288]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 8009900:	f043 0301 	orr.w	r3, r3, #1
 8009904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009906:	4b46      	ldr	r3, [pc, #280]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 8009908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009912:	23c0      	movs	r3, #192	@ 0xc0
 8009914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009916:	2302      	movs	r3, #2
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800991a:	2300      	movs	r3, #0
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800991e:	2300      	movs	r3, #0
 8009920:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009922:	2302      	movs	r3, #2
 8009924:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992a:	4619      	mov	r1, r3
 800992c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009930:	f002 fc24 	bl	800c17c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	2100      	movs	r1, #0
 8009938:	201d      	movs	r0, #29
 800993a:	f002 f8b8 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800993e:	201d      	movs	r0, #29
 8009940:	f002 f8cf 	bl	800bae2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009944:	e065      	b.n	8009a12 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a36      	ldr	r2, [pc, #216]	@ (8009a24 <HAL_TIM_Encoder_MspInit+0x164>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d132      	bne.n	80099b6 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009950:	4b33      	ldr	r3, [pc, #204]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009954:	4a32      	ldr	r2, [pc, #200]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 8009956:	f043 0304 	orr.w	r3, r3, #4
 800995a:	6593      	str	r3, [r2, #88]	@ 0x58
 800995c:	4b30      	ldr	r3, [pc, #192]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 800995e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009968:	4b2d      	ldr	r3, [pc, #180]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 800996a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800996c:	4a2c      	ldr	r2, [pc, #176]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009974:	4b2a      	ldr	r3, [pc, #168]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 8009976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009980:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009986:	2302      	movs	r3, #2
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998a:	2300      	movs	r3, #0
 800998c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800998e:	2300      	movs	r3, #0
 8009990:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8009992:	230a      	movs	r3, #10
 8009994:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800999a:	4619      	mov	r1, r3
 800999c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80099a0:	f002 fbec 	bl	800c17c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	201e      	movs	r0, #30
 80099aa:	f002 f880 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80099ae:	201e      	movs	r0, #30
 80099b0:	f002 f897 	bl	800bae2 <HAL_NVIC_EnableIRQ>
}
 80099b4:	e02d      	b.n	8009a12 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <HAL_TIM_Encoder_MspInit+0x168>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d128      	bne.n	8009a12 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80099c0:	4b17      	ldr	r3, [pc, #92]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c4:	4a16      	ldr	r2, [pc, #88]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099c6:	f043 0308 	orr.w	r3, r3, #8
 80099ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80099cc:	4b14      	ldr	r3, [pc, #80]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099d8:	4b11      	ldr	r3, [pc, #68]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099dc:	4a10      	ldr	r2, [pc, #64]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a20 <HAL_TIM_Encoder_MspInit+0x160>)
 80099e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80099f0:	2303      	movs	r3, #3
 80099f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099f4:	2302      	movs	r3, #2
 80099f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099fc:	2300      	movs	r3, #0
 80099fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009a00:	2302      	movs	r3, #2
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a0e:	f002 fbb5 	bl	800c17c <HAL_GPIO_Init>
}
 8009a12:	bf00      	nop
 8009a14:	3738      	adds	r7, #56	@ 0x38
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40021000 	.word	0x40021000
 8009a24:	40000800 	.word	0x40000800
 8009a28:	40000c00 	.word	0x40000c00

08009a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	@ 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a34:	f107 0314 	add.w	r3, r7, #20
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
 8009a40:	60da      	str	r2, [r3, #12]
 8009a42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a22      	ldr	r2, [pc, #136]	@ (8009ad4 <HAL_TIM_MspPostInit+0xa8>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d11c      	bne.n	8009a88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a4e:	4b22      	ldr	r3, [pc, #136]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a52:	4a21      	ldr	r2, [pc, #132]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009a54:	f043 0304 	orr.w	r3, r3, #4
 8009a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	613b      	str	r3, [r7, #16]
 8009a64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009a66:	2308      	movs	r3, #8
 8009a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a72:	2300      	movs	r3, #0
 8009a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009a76:	2302      	movs	r3, #2
 8009a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a7a:	f107 0314 	add.w	r3, r7, #20
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4816      	ldr	r0, [pc, #88]	@ (8009adc <HAL_TIM_MspPostInit+0xb0>)
 8009a82:	f002 fb7b 	bl	800c17c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009a86:	e020      	b.n	8009aca <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a14      	ldr	r2, [pc, #80]	@ (8009ae0 <HAL_TIM_MspPostInit+0xb4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d11b      	bne.n	8009aca <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a92:	4b11      	ldr	r3, [pc, #68]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a96:	4a10      	ldr	r2, [pc, #64]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009a98:	f043 0304 	orr.w	r3, r3, #4
 8009a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <HAL_TIM_MspPostInit+0xac>)
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009aaa:	23c0      	movs	r3, #192	@ 0xc0
 8009aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009aba:	2304      	movs	r3, #4
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009abe:	f107 0314 	add.w	r3, r7, #20
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4805      	ldr	r0, [pc, #20]	@ (8009adc <HAL_TIM_MspPostInit+0xb0>)
 8009ac6:	f002 fb59 	bl	800c17c <HAL_GPIO_Init>
}
 8009aca:	bf00      	nop
 8009acc:	3728      	adds	r7, #40	@ 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40012c00 	.word	0x40012c00
 8009ad8:	40021000 	.word	0x40021000
 8009adc:	48000800 	.word	0x48000800
 8009ae0:	40013400 	.word	0x40013400

08009ae4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009ae8:	4b20      	ldr	r3, [pc, #128]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009aea:	4a21      	ldr	r2, [pc, #132]	@ (8009b70 <MX_LPUART1_UART_Init+0x8c>)
 8009aec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8009aee:	4b1f      	ldr	r3, [pc, #124]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009af0:	4a20      	ldr	r2, [pc, #128]	@ (8009b74 <MX_LPUART1_UART_Init+0x90>)
 8009af2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009af4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009afa:	4b1c      	ldr	r3, [pc, #112]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009b00:	4b1a      	ldr	r3, [pc, #104]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009b06:	4b19      	ldr	r3, [pc, #100]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b08:	220c      	movs	r2, #12
 8009b0a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b0c:	4b17      	ldr	r3, [pc, #92]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009b12:	4b16      	ldr	r3, [pc, #88]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009b18:	4b14      	ldr	r3, [pc, #80]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009b1e:	4b13      	ldr	r3, [pc, #76]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009b24:	4811      	ldr	r0, [pc, #68]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b26:	f005 fe25 	bl	800f774 <HAL_UART_Init>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8009b30:	f7fe fcda 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009b34:	2100      	movs	r1, #0
 8009b36:	480d      	ldr	r0, [pc, #52]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b38:	f007 fb82 	bl	8011240 <HAL_UARTEx_SetTxFifoThreshold>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8009b42:	f7fe fcd1 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009b46:	2100      	movs	r1, #0
 8009b48:	4808      	ldr	r0, [pc, #32]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b4a:	f007 fbb7 	bl	80112bc <HAL_UARTEx_SetRxFifoThreshold>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8009b54:	f7fe fcc8 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009b58:	4804      	ldr	r0, [pc, #16]	@ (8009b6c <MX_LPUART1_UART_Init+0x88>)
 8009b5a:	f007 fb38 	bl	80111ce <HAL_UARTEx_DisableFifoMode>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009b64:	f7fe fcc0 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20001f54 	.word	0x20001f54
 8009b70:	40008000 	.word	0x40008000
 8009b74:	001e8480 	.word	0x001e8480

08009b78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009b7c:	4b23      	ldr	r3, [pc, #140]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009b7e:	4a24      	ldr	r2, [pc, #144]	@ (8009c10 <MX_USART2_UART_Init+0x98>)
 8009b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8009b82:	4b22      	ldr	r3, [pc, #136]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009b84:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8009b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8009b8a:	4b20      	ldr	r3, [pc, #128]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009b8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009b90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009b92:	4b1e      	ldr	r3, [pc, #120]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8009b98:	4b1c      	ldr	r3, [pc, #112]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009ba2:	220c      	movs	r2, #12
 8009ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ba6:	4b19      	ldr	r3, [pc, #100]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bac:	4b17      	ldr	r3, [pc, #92]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009bb2:	4b16      	ldr	r3, [pc, #88]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009bb8:	4b14      	ldr	r3, [pc, #80]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009bbe:	4b13      	ldr	r3, [pc, #76]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bc4:	4811      	ldr	r0, [pc, #68]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bc6:	f005 fdd5 	bl	800f774 <HAL_UART_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8009bd0:	f7fe fc8a 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	480d      	ldr	r0, [pc, #52]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bd8:	f007 fb32 	bl	8011240 <HAL_UARTEx_SetTxFifoThreshold>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8009be2:	f7fe fc81 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009be6:	2100      	movs	r1, #0
 8009be8:	4808      	ldr	r0, [pc, #32]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bea:	f007 fb67 	bl	80112bc <HAL_UARTEx_SetRxFifoThreshold>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8009bf4:	f7fe fc78 	bl	80084e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009bf8:	4804      	ldr	r0, [pc, #16]	@ (8009c0c <MX_USART2_UART_Init+0x94>)
 8009bfa:	f007 fae8 	bl	80111ce <HAL_UARTEx_DisableFifoMode>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8009c04:	f7fe fc70 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009c08:	bf00      	nop
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20002020 	.word	0x20002020
 8009c10:	40004400 	.word	0x40004400

08009c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b0a0      	sub	sp, #128	@ 0x80
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	605a      	str	r2, [r3, #4]
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c2c:	f107 0318 	add.w	r3, r7, #24
 8009c30:	2254      	movs	r2, #84	@ 0x54
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f008 f979 	bl	8011f2c <memset>
  if(uartHandle->Instance==LPUART1)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a99      	ldr	r2, [pc, #612]	@ (8009ea4 <HAL_UART_MspInit+0x290>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	f040 8093 	bne.w	8009d6c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009c46:	2320      	movs	r3, #32
 8009c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c4e:	f107 0318 	add.w	r3, r7, #24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f003 fa58 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009c5e:	f7fe fc43 	bl	80084e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009c62:	4b91      	ldr	r3, [pc, #580]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c66:	4a90      	ldr	r2, [pc, #576]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c68:	f043 0301 	orr.w	r3, r3, #1
 8009c6c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8009c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7e:	4a8a      	ldr	r2, [pc, #552]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c80:	f043 0302 	orr.w	r3, r3, #2
 8009c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c86:	4b88      	ldr	r3, [pc, #544]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009c92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ca8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009cac:	4619      	mov	r1, r3
 8009cae:	487f      	ldr	r0, [pc, #508]	@ (8009eac <HAL_UART_MspInit+0x298>)
 8009cb0:	f002 fa64 	bl	800c17c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8009cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cb6:	4a7f      	ldr	r2, [pc, #508]	@ (8009eb4 <HAL_UART_MspInit+0x2a0>)
 8009cb8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8009cba:	4b7d      	ldr	r3, [pc, #500]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cbc:	2222      	movs	r2, #34	@ 0x22
 8009cbe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009ccc:	4b78      	ldr	r3, [pc, #480]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cce:	2280      	movs	r2, #128	@ 0x80
 8009cd0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009cd2:	4b77      	ldr	r3, [pc, #476]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009cd8:	4b75      	ldr	r3, [pc, #468]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8009cde:	4b74      	ldr	r3, [pc, #464]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009ce4:	4b72      	ldr	r3, [pc, #456]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8009cea:	4871      	ldr	r0, [pc, #452]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cec:	f001 ff14 	bl	800bb18 <HAL_DMA_Init>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8009cf6:	f7fe fbf7 	bl	80084e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009cfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009d02:	4a6b      	ldr	r2, [pc, #428]	@ (8009eb0 <HAL_UART_MspInit+0x29c>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8009d08:	4b6b      	ldr	r3, [pc, #428]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8009ebc <HAL_UART_MspInit+0x2a8>)
 8009d0c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d10:	2223      	movs	r2, #35	@ 0x23
 8009d12:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d14:	4b68      	ldr	r3, [pc, #416]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d16:	2210      	movs	r2, #16
 8009d18:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d1a:	4b67      	ldr	r3, [pc, #412]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009d20:	4b65      	ldr	r3, [pc, #404]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d22:	2280      	movs	r2, #128	@ 0x80
 8009d24:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d26:	4b64      	ldr	r3, [pc, #400]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d2c:	4b62      	ldr	r3, [pc, #392]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8009d32:	4b61      	ldr	r3, [pc, #388]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009d38:	4b5f      	ldr	r3, [pc, #380]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8009d3e:	485e      	ldr	r0, [pc, #376]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d40:	f001 feea 	bl	800bb18 <HAL_DMA_Init>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8009d4a:	f7fe fbcd 	bl	80084e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a59      	ldr	r2, [pc, #356]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d52:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009d54:	4a58      	ldr	r2, [pc, #352]	@ (8009eb8 <HAL_UART_MspInit+0x2a4>)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	205b      	movs	r0, #91	@ 0x5b
 8009d60:	f001 fea5 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009d64:	205b      	movs	r0, #91	@ 0x5b
 8009d66:	f001 febc 	bl	800bae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009d6a:	e097      	b.n	8009e9c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a53      	ldr	r2, [pc, #332]	@ (8009ec0 <HAL_UART_MspInit+0x2ac>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	f040 8092 	bne.w	8009e9c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d80:	f107 0318 	add.w	r3, r7, #24
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 f9bf 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8009d90:	f7fe fbaa 	bl	80084e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009d94:	4b44      	ldr	r3, [pc, #272]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d98:	4a43      	ldr	r2, [pc, #268]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009da0:	4b41      	ldr	r3, [pc, #260]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dac:	4b3e      	ldr	r3, [pc, #248]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009db0:	4a3d      	ldr	r2, [pc, #244]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009db8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <HAL_UART_MspInit+0x294>)
 8009dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	60bb      	str	r3, [r7, #8]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009dd4:	2307      	movs	r3, #7
 8009dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009de2:	f002 f9cb 	bl	800c17c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8009de6:	4b37      	ldr	r3, [pc, #220]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009de8:	4a37      	ldr	r2, [pc, #220]	@ (8009ec8 <HAL_UART_MspInit+0x2b4>)
 8009dea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8009dec:	4b35      	ldr	r3, [pc, #212]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009dee:	221a      	movs	r2, #26
 8009df0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009df2:	4b34      	ldr	r3, [pc, #208]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009df8:	4b32      	ldr	r3, [pc, #200]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e00:	2280      	movs	r2, #128	@ 0x80
 8009e02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e04:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009e10:	4b2c      	ldr	r3, [pc, #176]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e16:	4b2b      	ldr	r3, [pc, #172]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009e1c:	4829      	ldr	r0, [pc, #164]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e1e:	f001 fe7b 	bl	800bb18 <HAL_DMA_Init>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8009e28:	f7fe fb5e 	bl	80084e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a25      	ldr	r2, [pc, #148]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009e34:	4a23      	ldr	r2, [pc, #140]	@ (8009ec4 <HAL_UART_MspInit+0x2b0>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8009e3a:	4b24      	ldr	r3, [pc, #144]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e3c:	4a24      	ldr	r2, [pc, #144]	@ (8009ed0 <HAL_UART_MspInit+0x2bc>)
 8009e3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009e40:	4b22      	ldr	r3, [pc, #136]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e42:	221b      	movs	r2, #27
 8009e44:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e46:	4b21      	ldr	r3, [pc, #132]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e48:	2210      	movs	r2, #16
 8009e4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e52:	4b1e      	ldr	r3, [pc, #120]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e54:	2280      	movs	r2, #128	@ 0x80
 8009e56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e58:	4b1c      	ldr	r3, [pc, #112]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009e64:	4b19      	ldr	r3, [pc, #100]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e6a:	4b18      	ldr	r3, [pc, #96]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009e70:	4816      	ldr	r0, [pc, #88]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e72:	f001 fe51 	bl	800bb18 <HAL_DMA_Init>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8009e7c:	f7fe fb34 	bl	80084e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a12      	ldr	r2, [pc, #72]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e84:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009e86:	4a11      	ldr	r2, [pc, #68]	@ (8009ecc <HAL_UART_MspInit+0x2b8>)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	2026      	movs	r0, #38	@ 0x26
 8009e92:	f001 fe0c 	bl	800baae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009e96:	2026      	movs	r0, #38	@ 0x26
 8009e98:	f001 fe23 	bl	800bae2 <HAL_NVIC_EnableIRQ>
}
 8009e9c:	bf00      	nop
 8009e9e:	3780      	adds	r7, #128	@ 0x80
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	40008000 	.word	0x40008000
 8009ea8:	40021000 	.word	0x40021000
 8009eac:	48000400 	.word	0x48000400
 8009eb0:	200020ec 	.word	0x200020ec
 8009eb4:	40020044 	.word	0x40020044
 8009eb8:	2000214c 	.word	0x2000214c
 8009ebc:	40020058 	.word	0x40020058
 8009ec0:	40004400 	.word	0x40004400
 8009ec4:	200021ac 	.word	0x200021ac
 8009ec8:	4002001c 	.word	0x4002001c
 8009ecc:	2000220c 	.word	0x2000220c
 8009ed0:	40020030 	.word	0x40020030

08009ed4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8009ed4:	480d      	ldr	r0, [pc, #52]	@ (8009f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8009ed8:	f7ff f994 	bl	8009204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009edc:	480c      	ldr	r0, [pc, #48]	@ (8009f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8009ede:	490d      	ldr	r1, [pc, #52]	@ (8009f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8009f18 <LoopForever+0xe>)
  movs r3, #0
 8009ee2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009ee4:	e002      	b.n	8009eec <LoopCopyDataInit>

08009ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009eea:	3304      	adds	r3, #4

08009eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ef0:	d3f9      	bcc.n	8009ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8009f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8009f20 <LoopForever+0x16>)
  movs r3, #0
 8009ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ef8:	e001      	b.n	8009efe <LoopFillZerobss>

08009efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009efc:	3204      	adds	r2, #4

08009efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f00:	d3fb      	bcc.n	8009efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009f02:	f008 f831 	bl	8011f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009f06:	f7fb f94f 	bl	80051a8 <main>

08009f0a <LoopForever>:

LoopForever:
    b LoopForever
 8009f0a:	e7fe      	b.n	8009f0a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8009f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f14:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009f18:	08014468 	.word	0x08014468
  ldr r2, =_sbss
 8009f1c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009f20:	200023b8 	.word	0x200023b8

08009f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009f24:	e7fe      	b.n	8009f24 <ADC1_2_IRQHandler>

08009f26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f30:	2003      	movs	r0, #3
 8009f32:	f001 fdb1 	bl	800ba98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009f36:	2000      	movs	r0, #0
 8009f38:	f000 f80e 	bl	8009f58 <HAL_InitTick>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	71fb      	strb	r3, [r7, #7]
 8009f46:	e001      	b.n	8009f4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009f48:	f7ff f834 	bl	8008fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009f4c:	79fb      	ldrb	r3, [r7, #7]

}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009f64:	4b16      	ldr	r3, [pc, #88]	@ (8009fc0 <HAL_InitTick+0x68>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d022      	beq.n	8009fb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009f6c:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <HAL_InitTick+0x6c>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <HAL_InitTick+0x68>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fdbc 	bl	800bafe <HAL_SYSTICK_Config>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10f      	bne.n	8009fac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	d809      	bhi.n	8009fa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f92:	2200      	movs	r2, #0
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	f001 fd88 	bl	800baae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8009fc8 <HAL_InitTick+0x70>)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e007      	b.n	8009fb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	73fb      	strb	r3, [r7, #15]
 8009faa:	e004      	b.n	8009fb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
 8009fb0:	e001      	b.n	8009fb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000140 	.word	0x20000140
 8009fc4:	20000138 	.word	0x20000138
 8009fc8:	2000013c 	.word	0x2000013c

08009fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009fd0:	4b05      	ldr	r3, [pc, #20]	@ (8009fe8 <HAL_IncTick+0x1c>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <HAL_IncTick+0x20>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4413      	add	r3, r2
 8009fda:	4a03      	ldr	r2, [pc, #12]	@ (8009fe8 <HAL_IncTick+0x1c>)
 8009fdc:	6013      	str	r3, [r2, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	2000226c 	.word	0x2000226c
 8009fec:	20000140 	.word	0x20000140

08009ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8009ff4:	4b03      	ldr	r3, [pc, #12]	@ (800a004 <HAL_GetTick+0x14>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	2000226c 	.word	0x2000226c

0800a008 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	609a      	str	r2, [r3, #8]
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	609a      	str	r2, [r3, #8]
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3360      	adds	r3, #96	@ 0x60
 800a082:	461a      	mov	r2, r3
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	4b08      	ldr	r3, [pc, #32]	@ (800a0b4 <LL_ADC_SetOffset+0x44>)
 800a092:	4013      	ands	r3, r2
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a0a8:	bf00      	nop
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	03fff000 	.word	0x03fff000

0800a0b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3360      	adds	r3, #96	@ 0x60
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3360      	adds	r3, #96	@ 0x60
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	431a      	orrs	r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a10e:	bf00      	nop
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3360      	adds	r3, #96	@ 0x60
 800a12a:	461a      	mov	r2, r3
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	431a      	orrs	r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3360      	adds	r3, #96	@ 0x60
 800a160:	461a      	mov	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	431a      	orrs	r2, r3
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	615a      	str	r2, [r3, #20]
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e000      	b.n	800a1c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b087      	sub	sp, #28
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3330      	adds	r3, #48	@ 0x30
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	f003 030c 	and.w	r3, r3, #12
 800a1ee:	4413      	add	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f003 031f 	and.w	r3, r3, #31
 800a1fc:	211f      	movs	r1, #31
 800a1fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a202:	43db      	mvns	r3, r3
 800a204:	401a      	ands	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	0e9b      	lsrs	r3, r3, #26
 800a20a:	f003 011f 	and.w	r1, r3, #31
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f003 031f 	and.w	r3, r3, #31
 800a214:	fa01 f303 	lsl.w	r3, r1, r3
 800a218:	431a      	orrs	r2, r3
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a21e:	bf00      	nop
 800a220:	371c      	adds	r7, #28
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b087      	sub	sp, #28
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3314      	adds	r3, #20
 800a23a:	461a      	mov	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	0e5b      	lsrs	r3, r3, #25
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	4413      	add	r3, r2
 800a248:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	0d1b      	lsrs	r3, r3, #20
 800a252:	f003 031f 	and.w	r3, r3, #31
 800a256:	2107      	movs	r1, #7
 800a258:	fa01 f303 	lsl.w	r3, r1, r3
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	0d1b      	lsrs	r3, r3, #20
 800a264:	f003 031f 	and.w	r3, r3, #31
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	fa01 f303 	lsl.w	r3, r1, r3
 800a26e:	431a      	orrs	r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a298:	43db      	mvns	r3, r3
 800a29a:	401a      	ands	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f003 0318 	and.w	r3, r3, #24
 800a2a2:	4908      	ldr	r1, [pc, #32]	@ (800a2c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a2a4:	40d9      	lsrs	r1, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	400b      	ands	r3, r1
 800a2aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	0007ffff 	.word	0x0007ffff

0800a2c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f003 031f 	and.w	r3, r3, #31
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a2f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6093      	str	r3, [r2, #8]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a31c:	d101      	bne.n	800a322 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a344:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a36c:	d101      	bne.n	800a372 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a394:	f043 0201 	orr.w	r2, r3, #1
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3bc:	f043 0202 	orr.w	r2, r3, #2
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <LL_ADC_IsEnabled+0x18>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e000      	b.n	800a3ea <LL_ADC_IsEnabled+0x1a>
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b02      	cmp	r3, #2
 800a408:	d101      	bne.n	800a40e <LL_ADC_IsDisableOngoing+0x18>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <LL_ADC_IsDisableOngoing+0x1a>
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a42c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a430:	f043 0204 	orr.w	r2, r3, #4
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 0304 	and.w	r3, r3, #4
 800a454:	2b04      	cmp	r3, #4
 800a456:	d101      	bne.n	800a45c <LL_ADC_REG_IsConversionOngoing+0x18>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	d101      	bne.n	800a482 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b089      	sub	sp, #36	@ 0x24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e1a9      	b.n	800a7fe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d109      	bne.n	800a4cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7fa f98f 	bl	80047dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff ff19 	bl	800a308 <LL_ADC_IsDeepPowerDownEnabled>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff feff 	bl	800a2e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff ff34 	bl	800a358 <LL_ADC_IsInternalRegulatorEnabled>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d115      	bne.n	800a522 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff ff18 	bl	800a330 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a500:	4b9c      	ldr	r3, [pc, #624]	@ (800a774 <HAL_ADC_Init+0x2e4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	099b      	lsrs	r3, r3, #6
 800a506:	4a9c      	ldr	r2, [pc, #624]	@ (800a778 <HAL_ADC_Init+0x2e8>)
 800a508:	fba2 2303 	umull	r2, r3, r2, r3
 800a50c:	099b      	lsrs	r3, r3, #6
 800a50e:	3301      	adds	r3, #1
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a514:	e002      	b.n	800a51c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b01      	subs	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f9      	bne.n	800a516 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff ff16 	bl	800a358 <LL_ADC_IsInternalRegulatorEnabled>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a536:	f043 0210 	orr.w	r2, r3, #16
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a542:	f043 0201 	orr.w	r2, r3, #1
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff ff76 	bl	800a444 <LL_ADC_REG_IsConversionOngoing>
 800a558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a55e:	f003 0310 	and.w	r3, r3, #16
 800a562:	2b00      	cmp	r3, #0
 800a564:	f040 8142 	bne.w	800a7ec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 813e 	bne.w	800a7ec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a574:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a578:	f043 0202 	orr.w	r2, r3, #2
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ff23 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d141      	bne.n	800a614 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a598:	d004      	beq.n	800a5a4 <HAL_ADC_Init+0x114>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a77      	ldr	r2, [pc, #476]	@ (800a77c <HAL_ADC_Init+0x2ec>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d10f      	bne.n	800a5c4 <HAL_ADC_Init+0x134>
 800a5a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a5a8:	f7ff ff12 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4873      	ldr	r0, [pc, #460]	@ (800a77c <HAL_ADC_Init+0x2ec>)
 800a5b0:	f7ff ff0e 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4323      	orrs	r3, r4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bf0c      	ite	eq
 800a5bc:	2301      	moveq	r3, #1
 800a5be:	2300      	movne	r3, #0
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	e012      	b.n	800a5ea <HAL_ADC_Init+0x15a>
 800a5c4:	486e      	ldr	r0, [pc, #440]	@ (800a780 <HAL_ADC_Init+0x2f0>)
 800a5c6:	f7ff ff03 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	486d      	ldr	r0, [pc, #436]	@ (800a784 <HAL_ADC_Init+0x2f4>)
 800a5ce:	f7ff feff 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	431c      	orrs	r4, r3
 800a5d6:	486c      	ldr	r0, [pc, #432]	@ (800a788 <HAL_ADC_Init+0x2f8>)
 800a5d8:	f7ff fefa 	bl	800a3d0 <LL_ADC_IsEnabled>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4323      	orrs	r3, r4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bf0c      	ite	eq
 800a5e4:	2301      	moveq	r3, #1
 800a5e6:	2300      	movne	r3, #0
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5f6:	d004      	beq.n	800a602 <HAL_ADC_Init+0x172>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a5f      	ldr	r2, [pc, #380]	@ (800a77c <HAL_ADC_Init+0x2ec>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d101      	bne.n	800a606 <HAL_ADC_Init+0x176>
 800a602:	4a62      	ldr	r2, [pc, #392]	@ (800a78c <HAL_ADC_Init+0x2fc>)
 800a604:	e000      	b.n	800a608 <HAL_ADC_Init+0x178>
 800a606:	4a62      	ldr	r2, [pc, #392]	@ (800a790 <HAL_ADC_Init+0x300>)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f7ff fcfa 	bl	800a008 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7f5b      	ldrb	r3, [r3, #29]
 800a618:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a61e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a624:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a62a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a632:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a634:	4313      	orrs	r3, r2
 800a636:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d106      	bne.n	800a650 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	3b01      	subs	r3, #1
 800a648:	045b      	lsls	r3, r3, #17
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a664:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	4313      	orrs	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68da      	ldr	r2, [r3, #12]
 800a672:	4b48      	ldr	r3, [pc, #288]	@ (800a794 <HAL_ADC_Init+0x304>)
 800a674:	4013      	ands	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	69b9      	ldr	r1, [r7, #24]
 800a67c:	430b      	orrs	r3, r1
 800a67e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fee5 	bl	800a46a <LL_ADC_INJ_IsConversionOngoing>
 800a6a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d17f      	bne.n	800a7a8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d17c      	bne.n	800a7a8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a6b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a6ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6ca:	f023 0302 	bic.w	r3, r3, #2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	69b9      	ldr	r1, [r7, #24]
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d017      	beq.n	800a710 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a6fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6911      	ldr	r1, [r2, #16]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	430b      	orrs	r3, r1
 800a70a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800a70e:	e013      	b.n	800a738 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	691a      	ldr	r2, [r3, #16]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a71e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a730:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a734:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d12a      	bne.n	800a798 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a74c:	f023 0304 	bic.w	r3, r3, #4
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a758:	4311      	orrs	r1, r2
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a75e:	4311      	orrs	r1, r2
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a764:	430a      	orrs	r2, r1
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0201 	orr.w	r2, r2, #1
 800a770:	611a      	str	r2, [r3, #16]
 800a772:	e019      	b.n	800a7a8 <HAL_ADC_Init+0x318>
 800a774:	20000138 	.word	0x20000138
 800a778:	053e2d63 	.word	0x053e2d63
 800a77c:	50000100 	.word	0x50000100
 800a780:	50000400 	.word	0x50000400
 800a784:	50000500 	.word	0x50000500
 800a788:	50000600 	.word	0x50000600
 800a78c:	50000300 	.word	0x50000300
 800a790:	50000700 	.word	0x50000700
 800a794:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691a      	ldr	r2, [r3, #16]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0201 	bic.w	r2, r2, #1
 800a7a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d10c      	bne.n	800a7ca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b6:	f023 010f 	bic.w	r1, r3, #15
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	1e5a      	subs	r2, r3, #1
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7c8:	e007      	b.n	800a7da <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 020f 	bic.w	r2, r2, #15
 800a7d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7de:	f023 0303 	bic.w	r3, r3, #3
 800a7e2:	f043 0201 	orr.w	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a7ea:	e007      	b.n	800a7fc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7f0:	f043 0210 	orr.w	r2, r3, #16
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3724      	adds	r7, #36	@ 0x24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd90      	pop	{r4, r7, pc}
 800a806:	bf00      	nop

0800a808 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a81c:	d004      	beq.n	800a828 <HAL_ADC_Start_DMA+0x20>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a5a      	ldr	r2, [pc, #360]	@ (800a98c <HAL_ADC_Start_DMA+0x184>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d101      	bne.n	800a82c <HAL_ADC_Start_DMA+0x24>
 800a828:	4b59      	ldr	r3, [pc, #356]	@ (800a990 <HAL_ADC_Start_DMA+0x188>)
 800a82a:	e000      	b.n	800a82e <HAL_ADC_Start_DMA+0x26>
 800a82c:	4b59      	ldr	r3, [pc, #356]	@ (800a994 <HAL_ADC_Start_DMA+0x18c>)
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff fd4a 	bl	800a2c8 <LL_ADC_GetMultimode>
 800a834:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff fe02 	bl	800a444 <LL_ADC_REG_IsConversionOngoing>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	f040 809b 	bne.w	800a97e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <HAL_ADC_Start_DMA+0x4e>
 800a852:	2302      	movs	r3, #2
 800a854:	e096      	b.n	800a984 <HAL_ADC_Start_DMA+0x17c>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a4d      	ldr	r2, [pc, #308]	@ (800a998 <HAL_ADC_Start_DMA+0x190>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d008      	beq.n	800a87a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b05      	cmp	r3, #5
 800a872:	d002      	beq.n	800a87a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b09      	cmp	r3, #9
 800a878:	d17a      	bne.n	800a970 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 fcf6 	bl	800b26c <ADC_Enable>
 800a880:	4603      	mov	r3, r0
 800a882:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a884:	7dfb      	ldrb	r3, [r7, #23]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d16d      	bne.n	800a966 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a88e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a892:	f023 0301 	bic.w	r3, r3, #1
 800a896:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a3a      	ldr	r2, [pc, #232]	@ (800a98c <HAL_ADC_Start_DMA+0x184>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d009      	beq.n	800a8bc <HAL_ADC_Start_DMA+0xb4>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a3b      	ldr	r2, [pc, #236]	@ (800a99c <HAL_ADC_Start_DMA+0x194>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d002      	beq.n	800a8b8 <HAL_ADC_Start_DMA+0xb0>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	e003      	b.n	800a8c0 <HAL_ADC_Start_DMA+0xb8>
 800a8b8:	4b39      	ldr	r3, [pc, #228]	@ (800a9a0 <HAL_ADC_Start_DMA+0x198>)
 800a8ba:	e001      	b.n	800a8c0 <HAL_ADC_Start_DMA+0xb8>
 800a8bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d002      	beq.n	800a8ce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d006      	beq.n	800a8f4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ea:	f023 0206 	bic.w	r2, r3, #6
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a8f2:	e002      	b.n	800a8fa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fe:	4a29      	ldr	r2, [pc, #164]	@ (800a9a4 <HAL_ADC_Start_DMA+0x19c>)
 800a900:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a906:	4a28      	ldr	r2, [pc, #160]	@ (800a9a8 <HAL_ADC_Start_DMA+0x1a0>)
 800a908:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90e:	4a27      	ldr	r2, [pc, #156]	@ (800a9ac <HAL_ADC_Start_DMA+0x1a4>)
 800a910:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	221c      	movs	r2, #28
 800a918:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0210 	orr.w	r2, r2, #16
 800a930:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f042 0201 	orr.w	r2, r2, #1
 800a940:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3340      	adds	r3, #64	@ 0x40
 800a94c:	4619      	mov	r1, r3
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f001 f989 	bl	800bc68 <HAL_DMA_Start_IT>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fd5c 	bl	800a41c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a964:	e00d      	b.n	800a982 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800a96e:	e008      	b.n	800a982 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800a97c:	e001      	b.n	800a982 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a97e:	2302      	movs	r3, #2
 800a980:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	50000100 	.word	0x50000100
 800a990:	50000300 	.word	0x50000300
 800a994:	50000700 	.word	0x50000700
 800a998:	50000600 	.word	0x50000600
 800a99c:	50000500 	.word	0x50000500
 800a9a0:	50000400 	.word	0x50000400
 800a9a4:	0800b457 	.word	0x0800b457
 800a9a8:	0800b52f 	.word	0x0800b52f
 800a9ac:	0800b54b 	.word	0x0800b54b

0800a9b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b0b6      	sub	sp, #216	@ 0xd8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d102      	bne.n	800aa10 <HAL_ADC_ConfigChannel+0x24>
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	f000 bc13 	b.w	800b236 <HAL_ADC_ConfigChannel+0x84a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fd11 	bl	800a444 <LL_ADC_REG_IsConversionOngoing>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 83f3 	bne.w	800b210 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6859      	ldr	r1, [r3, #4]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7ff fbcb 	bl	800a1d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fcff 	bl	800a444 <LL_ADC_REG_IsConversionOngoing>
 800aa46:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff fd0b 	bl	800a46a <LL_ADC_INJ_IsConversionOngoing>
 800aa54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f040 81d9 	bne.w	800ae14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aa62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f040 81d4 	bne.w	800ae14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa74:	d10f      	bne.n	800aa96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4619      	mov	r1, r3
 800aa82:	f7ff fbd2 	bl	800a22a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fb79 	bl	800a186 <LL_ADC_SetSamplingTimeCommonConfig>
 800aa94:	e00e      	b.n	800aab4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6819      	ldr	r1, [r3, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7ff fbc1 	bl	800a22a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff fb69 	bl	800a186 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	695a      	ldr	r2, [r3, #20]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d022      	beq.n	800ab1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	6919      	ldr	r1, [r3, #16]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aae6:	f7ff fac3 	bl	800a070 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6919      	ldr	r1, [r3, #16]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7ff fb0f 	bl	800a11a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d102      	bne.n	800ab12 <HAL_ADC_ConfigChannel+0x126>
 800ab0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab10:	e000      	b.n	800ab14 <HAL_ADC_ConfigChannel+0x128>
 800ab12:	2300      	movs	r3, #0
 800ab14:	461a      	mov	r2, r3
 800ab16:	f7ff fb1b 	bl	800a150 <LL_ADC_SetOffsetSaturation>
 800ab1a:	e17b      	b.n	800ae14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fac8 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10a      	bne.n	800ab48 <HAL_ADC_ConfigChannel+0x15c>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fabd 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	0e9b      	lsrs	r3, r3, #26
 800ab42:	f003 021f 	and.w	r2, r3, #31
 800ab46:	e01e      	b.n	800ab86 <HAL_ADC_ConfigChannel+0x19a>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fab2 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ab5e:	fa93 f3a3 	rbit	r3, r3
 800ab62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ab66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ab6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800ab76:	2320      	movs	r3, #32
 800ab78:	e004      	b.n	800ab84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800ab7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab7e:	fab3 f383 	clz	r3, r3
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d105      	bne.n	800ab9e <HAL_ADC_ConfigChannel+0x1b2>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	0e9b      	lsrs	r3, r3, #26
 800ab98:	f003 031f 	and.w	r3, r3, #31
 800ab9c:	e018      	b.n	800abd0 <HAL_ADC_ConfigChannel+0x1e4>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800abaa:	fa93 f3a3 	rbit	r3, r3
 800abae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800abb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800abba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800abc2:	2320      	movs	r3, #32
 800abc4:	e004      	b.n	800abd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800abc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abca:	fab3 f383 	clz	r3, r3
 800abce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d106      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff fa81 	bl	800a0e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2101      	movs	r1, #1
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff fa65 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800abee:	4603      	mov	r3, r0
 800abf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <HAL_ADC_ConfigChannel+0x222>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2101      	movs	r1, #1
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fa5a 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ac04:	4603      	mov	r3, r0
 800ac06:	0e9b      	lsrs	r3, r3, #26
 800ac08:	f003 021f 	and.w	r2, r3, #31
 800ac0c:	e01e      	b.n	800ac4c <HAL_ADC_ConfigChannel+0x260>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2101      	movs	r1, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fa4f 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ac24:	fa93 f3a3 	rbit	r3, r3
 800ac28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800ac2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800ac34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	e004      	b.n	800ac4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800ac40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac44:	fab3 f383 	clz	r3, r3
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <HAL_ADC_ConfigChannel+0x278>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	0e9b      	lsrs	r3, r3, #26
 800ac5e:	f003 031f 	and.w	r3, r3, #31
 800ac62:	e018      	b.n	800ac96 <HAL_ADC_ConfigChannel+0x2aa>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac70:	fa93 f3a3 	rbit	r3, r3
 800ac74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800ac78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800ac80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800ac88:	2320      	movs	r3, #32
 800ac8a:	e004      	b.n	800ac96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800ac8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac90:	fab3 f383 	clz	r3, r3
 800ac94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d106      	bne.n	800aca8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2101      	movs	r1, #1
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fa1e 	bl	800a0e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2102      	movs	r1, #2
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fa02 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <HAL_ADC_ConfigChannel+0x2e8>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2102      	movs	r1, #2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff f9f7 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800acca:	4603      	mov	r3, r0
 800accc:	0e9b      	lsrs	r3, r3, #26
 800acce:	f003 021f 	and.w	r2, r3, #31
 800acd2:	e01e      	b.n	800ad12 <HAL_ADC_ConfigChannel+0x326>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2102      	movs	r1, #2
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff f9ec 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ace6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acea:	fa93 f3a3 	rbit	r3, r3
 800acee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800acf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800acfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800ad02:	2320      	movs	r3, #32
 800ad04:	e004      	b.n	800ad10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800ad06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad0a:	fab3 f383 	clz	r3, r3
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d105      	bne.n	800ad2a <HAL_ADC_ConfigChannel+0x33e>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	0e9b      	lsrs	r3, r3, #26
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	e016      	b.n	800ad58 <HAL_ADC_ConfigChannel+0x36c>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad36:	fa93 f3a3 	rbit	r3, r3
 800ad3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800ad3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800ad42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800ad4a:	2320      	movs	r3, #32
 800ad4c:	e004      	b.n	800ad58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800ad4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad52:	fab3 f383 	clz	r3, r3
 800ad56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d106      	bne.n	800ad6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2200      	movs	r2, #0
 800ad62:	2102      	movs	r1, #2
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff f9bd 	bl	800a0e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2103      	movs	r1, #3
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff f9a1 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <HAL_ADC_ConfigChannel+0x3aa>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2103      	movs	r1, #3
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff f996 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	0e9b      	lsrs	r3, r3, #26
 800ad90:	f003 021f 	and.w	r2, r3, #31
 800ad94:	e017      	b.n	800adc6 <HAL_ADC_ConfigChannel+0x3da>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2103      	movs	r1, #3
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff f98b 	bl	800a0b8 <LL_ADC_GetOffsetChannel>
 800ada2:	4603      	mov	r3, r0
 800ada4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ada6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ada8:	fa93 f3a3 	rbit	r3, r3
 800adac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800adae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800adb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800adb8:	2320      	movs	r3, #32
 800adba:	e003      	b.n	800adc4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800adbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adbe:	fab3 f383 	clz	r3, r3
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adce:	2b00      	cmp	r3, #0
 800add0:	d105      	bne.n	800adde <HAL_ADC_ConfigChannel+0x3f2>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	0e9b      	lsrs	r3, r3, #26
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	e011      	b.n	800ae02 <HAL_ADC_ConfigChannel+0x416>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ade6:	fa93 f3a3 	rbit	r3, r3
 800adea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800adec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800adf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800adf6:	2320      	movs	r3, #32
 800adf8:	e003      	b.n	800ae02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800adfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adfc:	fab3 f383 	clz	r3, r3
 800ae00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d106      	bne.n	800ae14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2103      	movs	r1, #3
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff f968 	bl	800a0e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fad9 	bl	800a3d0 <LL_ADC_IsEnabled>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 813d 	bne.w	800b0a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	6819      	ldr	r1, [r3, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7ff fa24 	bl	800a280 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	4aa2      	ldr	r2, [pc, #648]	@ (800b0c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	f040 812e 	bne.w	800b0a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10b      	bne.n	800ae6c <HAL_ADC_ConfigChannel+0x480>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	0e9b      	lsrs	r3, r3, #26
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	f003 031f 	and.w	r3, r3, #31
 800ae60:	2b09      	cmp	r3, #9
 800ae62:	bf94      	ite	ls
 800ae64:	2301      	movls	r3, #1
 800ae66:	2300      	movhi	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	e019      	b.n	800aea0 <HAL_ADC_ConfigChannel+0x4b4>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae74:	fa93 f3a3 	rbit	r3, r3
 800ae78:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800ae7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae7c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800ae7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ae84:	2320      	movs	r3, #32
 800ae86:	e003      	b.n	800ae90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ae88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae8a:	fab3 f383 	clz	r3, r3
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	3301      	adds	r3, #1
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	bf94      	ite	ls
 800ae9a:	2301      	movls	r3, #1
 800ae9c:	2300      	movhi	r3, #0
 800ae9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d079      	beq.n	800af98 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d107      	bne.n	800aec0 <HAL_ADC_ConfigChannel+0x4d4>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	0e9b      	lsrs	r3, r3, #26
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	069b      	lsls	r3, r3, #26
 800aeba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aebe:	e015      	b.n	800aeec <HAL_ADC_ConfigChannel+0x500>
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec8:	fa93 f3a3 	rbit	r3, r3
 800aecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800aece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800aed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800aed8:	2320      	movs	r3, #32
 800aeda:	e003      	b.n	800aee4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800aedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aede:	fab3 f383 	clz	r3, r3
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	3301      	adds	r3, #1
 800aee6:	069b      	lsls	r3, r3, #26
 800aee8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <HAL_ADC_ConfigChannel+0x520>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	0e9b      	lsrs	r3, r3, #26
 800aefe:	3301      	adds	r3, #1
 800af00:	f003 031f 	and.w	r3, r3, #31
 800af04:	2101      	movs	r1, #1
 800af06:	fa01 f303 	lsl.w	r3, r1, r3
 800af0a:	e017      	b.n	800af3c <HAL_ADC_ConfigChannel+0x550>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af14:	fa93 f3a3 	rbit	r3, r3
 800af18:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800af1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800af1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800af24:	2320      	movs	r3, #32
 800af26:	e003      	b.n	800af30 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800af28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af2a:	fab3 f383 	clz	r3, r3
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	3301      	adds	r3, #1
 800af32:	f003 031f 	and.w	r3, r3, #31
 800af36:	2101      	movs	r1, #1
 800af38:	fa01 f303 	lsl.w	r3, r1, r3
 800af3c:	ea42 0103 	orr.w	r1, r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <HAL_ADC_ConfigChannel+0x576>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	0e9b      	lsrs	r3, r3, #26
 800af52:	3301      	adds	r3, #1
 800af54:	f003 021f 	and.w	r2, r3, #31
 800af58:	4613      	mov	r3, r2
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	4413      	add	r3, r2
 800af5e:	051b      	lsls	r3, r3, #20
 800af60:	e018      	b.n	800af94 <HAL_ADC_ConfigChannel+0x5a8>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6a:	fa93 f3a3 	rbit	r3, r3
 800af6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800af70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800af74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800af7a:	2320      	movs	r3, #32
 800af7c:	e003      	b.n	800af86 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af80:	fab3 f383 	clz	r3, r3
 800af84:	b2db      	uxtb	r3, r3
 800af86:	3301      	adds	r3, #1
 800af88:	f003 021f 	and.w	r2, r3, #31
 800af8c:	4613      	mov	r3, r2
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	4413      	add	r3, r2
 800af92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800af94:	430b      	orrs	r3, r1
 800af96:	e07e      	b.n	800b096 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d107      	bne.n	800afb4 <HAL_ADC_ConfigChannel+0x5c8>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	0e9b      	lsrs	r3, r3, #26
 800afaa:	3301      	adds	r3, #1
 800afac:	069b      	lsls	r3, r3, #26
 800afae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800afb2:	e015      	b.n	800afe0 <HAL_ADC_ConfigChannel+0x5f4>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	fa93 f3a3 	rbit	r3, r3
 800afc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800afcc:	2320      	movs	r3, #32
 800afce:	e003      	b.n	800afd8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800afd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd2:	fab3 f383 	clz	r3, r3
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	3301      	adds	r3, #1
 800afda:	069b      	lsls	r3, r3, #26
 800afdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <HAL_ADC_ConfigChannel+0x614>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	0e9b      	lsrs	r3, r3, #26
 800aff2:	3301      	adds	r3, #1
 800aff4:	f003 031f 	and.w	r3, r3, #31
 800aff8:	2101      	movs	r1, #1
 800affa:	fa01 f303 	lsl.w	r3, r1, r3
 800affe:	e017      	b.n	800b030 <HAL_ADC_ConfigChannel+0x644>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	fa93 f3a3 	rbit	r3, r3
 800b00c:	61fb      	str	r3, [r7, #28]
  return result;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800b018:	2320      	movs	r3, #32
 800b01a:	e003      	b.n	800b024 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	fab3 f383 	clz	r3, r3
 800b022:	b2db      	uxtb	r3, r3
 800b024:	3301      	adds	r3, #1
 800b026:	f003 031f 	and.w	r3, r3, #31
 800b02a:	2101      	movs	r1, #1
 800b02c:	fa01 f303 	lsl.w	r3, r1, r3
 800b030:	ea42 0103 	orr.w	r1, r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10d      	bne.n	800b05c <HAL_ADC_ConfigChannel+0x670>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	0e9b      	lsrs	r3, r3, #26
 800b046:	3301      	adds	r3, #1
 800b048:	f003 021f 	and.w	r2, r3, #31
 800b04c:	4613      	mov	r3, r2
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	4413      	add	r3, r2
 800b052:	3b1e      	subs	r3, #30
 800b054:	051b      	lsls	r3, r3, #20
 800b056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b05a:	e01b      	b.n	800b094 <HAL_ADC_ConfigChannel+0x6a8>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	fa93 f3a3 	rbit	r3, r3
 800b068:	613b      	str	r3, [r7, #16]
  return result;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800b074:	2320      	movs	r3, #32
 800b076:	e003      	b.n	800b080 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	fab3 f383 	clz	r3, r3
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	3301      	adds	r3, #1
 800b082:	f003 021f 	and.w	r2, r3, #31
 800b086:	4613      	mov	r3, r2
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	4413      	add	r3, r2
 800b08c:	3b1e      	subs	r3, #30
 800b08e:	051b      	lsls	r3, r3, #20
 800b090:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b094:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b09a:	4619      	mov	r1, r3
 800b09c:	f7ff f8c5 	bl	800a22a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	4b09      	ldr	r3, [pc, #36]	@ (800b0cc <HAL_ADC_ConfigChannel+0x6e0>)
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 80be 	beq.w	800b22a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0b6:	d004      	beq.n	800b0c2 <HAL_ADC_ConfigChannel+0x6d6>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a04      	ldr	r2, [pc, #16]	@ (800b0d0 <HAL_ADC_ConfigChannel+0x6e4>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d10a      	bne.n	800b0d8 <HAL_ADC_ConfigChannel+0x6ec>
 800b0c2:	4b04      	ldr	r3, [pc, #16]	@ (800b0d4 <HAL_ADC_ConfigChannel+0x6e8>)
 800b0c4:	e009      	b.n	800b0da <HAL_ADC_ConfigChannel+0x6ee>
 800b0c6:	bf00      	nop
 800b0c8:	407f0000 	.word	0x407f0000
 800b0cc:	80080000 	.word	0x80080000
 800b0d0:	50000100 	.word	0x50000100
 800b0d4:	50000300 	.word	0x50000300
 800b0d8:	4b59      	ldr	r3, [pc, #356]	@ (800b240 <HAL_ADC_ConfigChannel+0x854>)
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe ffba 	bl	800a054 <LL_ADC_GetCommonPathInternalCh>
 800b0e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a56      	ldr	r2, [pc, #344]	@ (800b244 <HAL_ADC_ConfigChannel+0x858>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_ADC_ConfigChannel+0x70c>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a55      	ldr	r2, [pc, #340]	@ (800b248 <HAL_ADC_ConfigChannel+0x85c>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d13a      	bne.n	800b16e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b0f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b0fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d134      	bne.n	800b16e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b10c:	d005      	beq.n	800b11a <HAL_ADC_ConfigChannel+0x72e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a4e      	ldr	r2, [pc, #312]	@ (800b24c <HAL_ADC_ConfigChannel+0x860>)
 800b114:	4293      	cmp	r3, r2
 800b116:	f040 8085 	bne.w	800b224 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b122:	d004      	beq.n	800b12e <HAL_ADC_ConfigChannel+0x742>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a49      	ldr	r2, [pc, #292]	@ (800b250 <HAL_ADC_ConfigChannel+0x864>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d101      	bne.n	800b132 <HAL_ADC_ConfigChannel+0x746>
 800b12e:	4a49      	ldr	r2, [pc, #292]	@ (800b254 <HAL_ADC_ConfigChannel+0x868>)
 800b130:	e000      	b.n	800b134 <HAL_ADC_ConfigChannel+0x748>
 800b132:	4a43      	ldr	r2, [pc, #268]	@ (800b240 <HAL_ADC_ConfigChannel+0x854>)
 800b134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b138:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f7fe ff75 	bl	800a02e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b144:	4b44      	ldr	r3, [pc, #272]	@ (800b258 <HAL_ADC_ConfigChannel+0x86c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	099b      	lsrs	r3, r3, #6
 800b14a:	4a44      	ldr	r2, [pc, #272]	@ (800b25c <HAL_ADC_ConfigChannel+0x870>)
 800b14c:	fba2 2303 	umull	r2, r3, r2, r3
 800b150:	099b      	lsrs	r3, r3, #6
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	4613      	mov	r3, r2
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b15e:	e002      	b.n	800b166 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b01      	subs	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1f9      	bne.n	800b160 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b16c:	e05a      	b.n	800b224 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a3b      	ldr	r2, [pc, #236]	@ (800b260 <HAL_ADC_ConfigChannel+0x874>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d125      	bne.n	800b1c4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b17c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d11f      	bne.n	800b1c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a31      	ldr	r2, [pc, #196]	@ (800b250 <HAL_ADC_ConfigChannel+0x864>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d104      	bne.n	800b198 <HAL_ADC_ConfigChannel+0x7ac>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a34      	ldr	r2, [pc, #208]	@ (800b264 <HAL_ADC_ConfigChannel+0x878>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d047      	beq.n	800b228 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1a0:	d004      	beq.n	800b1ac <HAL_ADC_ConfigChannel+0x7c0>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b250 <HAL_ADC_ConfigChannel+0x864>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d101      	bne.n	800b1b0 <HAL_ADC_ConfigChannel+0x7c4>
 800b1ac:	4a29      	ldr	r2, [pc, #164]	@ (800b254 <HAL_ADC_ConfigChannel+0x868>)
 800b1ae:	e000      	b.n	800b1b2 <HAL_ADC_ConfigChannel+0x7c6>
 800b1b0:	4a23      	ldr	r2, [pc, #140]	@ (800b240 <HAL_ADC_ConfigChannel+0x854>)
 800b1b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b1b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4610      	mov	r0, r2
 800b1be:	f7fe ff36 	bl	800a02e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b1c2:	e031      	b.n	800b228 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a27      	ldr	r2, [pc, #156]	@ (800b268 <HAL_ADC_ConfigChannel+0x87c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d12d      	bne.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b1ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b1d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d127      	bne.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a1c      	ldr	r2, [pc, #112]	@ (800b250 <HAL_ADC_ConfigChannel+0x864>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d022      	beq.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1ec:	d004      	beq.n	800b1f8 <HAL_ADC_ConfigChannel+0x80c>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <HAL_ADC_ConfigChannel+0x864>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d101      	bne.n	800b1fc <HAL_ADC_ConfigChannel+0x810>
 800b1f8:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <HAL_ADC_ConfigChannel+0x868>)
 800b1fa:	e000      	b.n	800b1fe <HAL_ADC_ConfigChannel+0x812>
 800b1fc:	4a10      	ldr	r2, [pc, #64]	@ (800b240 <HAL_ADC_ConfigChannel+0x854>)
 800b1fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fe ff10 	bl	800a02e <LL_ADC_SetCommonPathInternalCh>
 800b20e:	e00c      	b.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b214:	f043 0220 	orr.w	r2, r3, #32
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b222:	e002      	b.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b224:	bf00      	nop
 800b226:	e000      	b.n	800b22a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b228:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b232:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b236:	4618      	mov	r0, r3
 800b238:	37d8      	adds	r7, #216	@ 0xd8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	50000700 	.word	0x50000700
 800b244:	c3210000 	.word	0xc3210000
 800b248:	90c00010 	.word	0x90c00010
 800b24c:	50000600 	.word	0x50000600
 800b250:	50000100 	.word	0x50000100
 800b254:	50000300 	.word	0x50000300
 800b258:	20000138 	.word	0x20000138
 800b25c:	053e2d63 	.word	0x053e2d63
 800b260:	c7520000 	.word	0xc7520000
 800b264:	50000500 	.word	0x50000500
 800b268:	cb840000 	.word	0xcb840000

0800b26c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b274:	2300      	movs	r3, #0
 800b276:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff f8a7 	bl	800a3d0 <LL_ADC_IsEnabled>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d176      	bne.n	800b376 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	4b3c      	ldr	r3, [pc, #240]	@ (800b380 <ADC_Enable+0x114>)
 800b290:	4013      	ands	r3, r2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00d      	beq.n	800b2b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b29a:	f043 0210 	orr.w	r2, r3, #16
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2a6:	f043 0201 	orr.w	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e062      	b.n	800b378 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff f862 	bl	800a380 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2c4:	d004      	beq.n	800b2d0 <ADC_Enable+0x64>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a2e      	ldr	r2, [pc, #184]	@ (800b384 <ADC_Enable+0x118>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d101      	bne.n	800b2d4 <ADC_Enable+0x68>
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b388 <ADC_Enable+0x11c>)
 800b2d2:	e000      	b.n	800b2d6 <ADC_Enable+0x6a>
 800b2d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b38c <ADC_Enable+0x120>)
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe febc 	bl	800a054 <LL_ADC_GetCommonPathInternalCh>
 800b2dc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b2de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d013      	beq.n	800b30e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b2e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b390 <ADC_Enable+0x124>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	099b      	lsrs	r3, r3, #6
 800b2ec:	4a29      	ldr	r2, [pc, #164]	@ (800b394 <ADC_Enable+0x128>)
 800b2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f2:	099b      	lsrs	r3, r3, #6
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	4413      	add	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b300:	e002      	b.n	800b308 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	3b01      	subs	r3, #1
 800b306:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f9      	bne.n	800b302 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b30e:	f7fe fe6f 	bl	8009ff0 <HAL_GetTick>
 800b312:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b314:	e028      	b.n	800b368 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff f858 	bl	800a3d0 <LL_ADC_IsEnabled>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d104      	bne.n	800b330 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff f828 	bl	800a380 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b330:	f7fe fe5e 	bl	8009ff0 <HAL_GetTick>
 800b334:	4602      	mov	r2, r0
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d914      	bls.n	800b368 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d00d      	beq.n	800b368 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b350:	f043 0210 	orr.w	r2, r3, #16
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b35c:	f043 0201 	orr.w	r2, r3, #1
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	e007      	b.n	800b378 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b01      	cmp	r3, #1
 800b374:	d1cf      	bne.n	800b316 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	8000003f 	.word	0x8000003f
 800b384:	50000100 	.word	0x50000100
 800b388:	50000300 	.word	0x50000300
 800b38c:	50000700 	.word	0x50000700
 800b390:	20000138 	.word	0x20000138
 800b394:	053e2d63 	.word	0x053e2d63

0800b398 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff f826 	bl	800a3f6 <LL_ADC_IsDisableOngoing>
 800b3aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff f80d 	bl	800a3d0 <LL_ADC_IsEnabled>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d047      	beq.n	800b44c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d144      	bne.n	800b44c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f003 030d 	and.w	r3, r3, #13
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d10c      	bne.n	800b3ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe ffe7 	bl	800a3a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2203      	movs	r2, #3
 800b3e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b3e2:	f7fe fe05 	bl	8009ff0 <HAL_GetTick>
 800b3e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b3e8:	e029      	b.n	800b43e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ee:	f043 0210 	orr.w	r2, r3, #16
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3fa:	f043 0201 	orr.w	r2, r3, #1
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e023      	b.n	800b44e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b406:	f7fe fdf3 	bl	8009ff0 <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	2b02      	cmp	r3, #2
 800b412:	d914      	bls.n	800b43e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00d      	beq.n	800b43e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b426:	f043 0210 	orr.w	r2, r3, #16
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b432:	f043 0201 	orr.w	r2, r3, #1
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e007      	b.n	800b44e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1dc      	bne.n	800b406 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b462:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d14b      	bne.n	800b508 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b474:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0308 	and.w	r3, r3, #8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d021      	beq.n	800b4ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe fe8c 	bl	800a1ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d032      	beq.n	800b500 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d12b      	bne.n	800b500 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11f      	bne.n	800b500 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c4:	f043 0201 	orr.w	r2, r3, #1
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b4cc:	e018      	b.n	800b500 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d111      	bne.n	800b500 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4f8:	f043 0201 	orr.w	r2, r3, #1
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f7ff fa55 	bl	800a9b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b506:	e00e      	b.n	800b526 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7ff fa5f 	bl	800a9d8 <HAL_ADC_ErrorCallback>
}
 800b51a:	e004      	b.n	800b526 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
}
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fa41 	bl	800a9c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b55c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b568:	f043 0204 	orr.w	r2, r3, #4
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7ff fa31 	bl	800a9d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <LL_ADC_IsEnabled>:
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <LL_ADC_IsEnabled+0x18>
 800b592:	2301      	movs	r3, #1
 800b594:	e000      	b.n	800b598 <LL_ADC_IsEnabled+0x1a>
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <LL_ADC_StartCalibration>:
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b5b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	609a      	str	r2, [r3, #8]
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <LL_ADC_IsCalibrationOnGoing>:
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ea:	d101      	bne.n	800b5f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e000      	b.n	800b5f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <LL_ADC_REG_IsConversionOngoing>:
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d101      	bne.n	800b616 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b62e:	2300      	movs	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <HAL_ADCEx_Calibration_Start+0x1c>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e04d      	b.n	800b6dc <HAL_ADCEx_Calibration_Start+0xb8>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fea5 	bl	800b398 <ADC_Disable>
 800b64e:	4603      	mov	r3, r0
 800b650:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b652:	7bfb      	ldrb	r3, [r7, #15]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d136      	bne.n	800b6c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b65c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b660:	f023 0302 	bic.w	r3, r3, #2
 800b664:	f043 0202 	orr.w	r2, r3, #2
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff ff96 	bl	800b5a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b678:	e014      	b.n	800b6a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	3301      	adds	r3, #1
 800b67e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	4a18      	ldr	r2, [pc, #96]	@ (800b6e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d90d      	bls.n	800b6a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b68c:	f023 0312 	bic.w	r3, r3, #18
 800b690:	f043 0210 	orr.w	r2, r3, #16
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e01b      	b.n	800b6dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7ff ff94 	bl	800b5d6 <LL_ADC_IsCalibrationOnGoing>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e2      	bne.n	800b67a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	f043 0201 	orr.w	r2, r3, #1
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6c4:	e005      	b.n	800b6d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6ca:	f043 0210 	orr.w	r2, r3, #16
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	0004de01 	.word	0x0004de01

0800b6e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b6e8:	b590      	push	{r4, r7, lr}
 800b6ea:	b0a1      	sub	sp, #132	@ 0x84
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b702:	2302      	movs	r3, #2
 800b704:	e0e7      	b.n	800b8d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b70e:	2300      	movs	r3, #0
 800b710:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b712:	2300      	movs	r3, #0
 800b714:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b71e:	d102      	bne.n	800b726 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b720:	4b6f      	ldr	r3, [pc, #444]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	e009      	b.n	800b73a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a6e      	ldr	r2, [pc, #440]	@ (800b8e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d102      	bne.n	800b736 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b730:	4b6d      	ldr	r3, [pc, #436]	@ (800b8e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b732:	60bb      	str	r3, [r7, #8]
 800b734:	e001      	b.n	800b73a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10b      	bne.n	800b758 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b744:	f043 0220 	orr.w	r2, r3, #32
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e0be      	b.n	800b8d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff ff4f 	bl	800b5fe <LL_ADC_REG_IsConversionOngoing>
 800b760:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff ff49 	bl	800b5fe <LL_ADC_REG_IsConversionOngoing>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f040 80a0 	bne.w	800b8b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b776:	2b00      	cmp	r3, #0
 800b778:	f040 809c 	bne.w	800b8b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b784:	d004      	beq.n	800b790 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a55      	ldr	r2, [pc, #340]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d101      	bne.n	800b794 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b790:	4b56      	ldr	r3, [pc, #344]	@ (800b8ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b792:	e000      	b.n	800b796 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b794:	4b56      	ldr	r3, [pc, #344]	@ (800b8f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b796:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d04b      	beq.n	800b838 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b7a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6859      	ldr	r1, [r3, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b7b2:	035b      	lsls	r3, r3, #13
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7c4:	d004      	beq.n	800b7d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a45      	ldr	r2, [pc, #276]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d10f      	bne.n	800b7f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b7d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b7d4:	f7ff fed3 	bl	800b57e <LL_ADC_IsEnabled>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	4841      	ldr	r0, [pc, #260]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b7dc:	f7ff fecf 	bl	800b57e <LL_ADC_IsEnabled>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	4323      	orrs	r3, r4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bf0c      	ite	eq
 800b7e8:	2301      	moveq	r3, #1
 800b7ea:	2300      	movne	r3, #0
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	e012      	b.n	800b816 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b7f0:	483c      	ldr	r0, [pc, #240]	@ (800b8e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b7f2:	f7ff fec4 	bl	800b57e <LL_ADC_IsEnabled>
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	483b      	ldr	r0, [pc, #236]	@ (800b8e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b7fa:	f7ff fec0 	bl	800b57e <LL_ADC_IsEnabled>
 800b7fe:	4603      	mov	r3, r0
 800b800:	431c      	orrs	r4, r3
 800b802:	483c      	ldr	r0, [pc, #240]	@ (800b8f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b804:	f7ff febb 	bl	800b57e <LL_ADC_IsEnabled>
 800b808:	4603      	mov	r3, r0
 800b80a:	4323      	orrs	r3, r4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bf0c      	ite	eq
 800b810:	2301      	moveq	r3, #1
 800b812:	2300      	movne	r3, #0
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d056      	beq.n	800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b81a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b822:	f023 030f 	bic.w	r3, r3, #15
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	6811      	ldr	r1, [r2, #0]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	6892      	ldr	r2, [r2, #8]
 800b82e:	430a      	orrs	r2, r1
 800b830:	431a      	orrs	r2, r3
 800b832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b834:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b836:	e047      	b.n	800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b842:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b84c:	d004      	beq.n	800b858 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a23      	ldr	r2, [pc, #140]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d10f      	bne.n	800b878 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b858:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b85c:	f7ff fe8f 	bl	800b57e <LL_ADC_IsEnabled>
 800b860:	4604      	mov	r4, r0
 800b862:	481f      	ldr	r0, [pc, #124]	@ (800b8e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b864:	f7ff fe8b 	bl	800b57e <LL_ADC_IsEnabled>
 800b868:	4603      	mov	r3, r0
 800b86a:	4323      	orrs	r3, r4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bf0c      	ite	eq
 800b870:	2301      	moveq	r3, #1
 800b872:	2300      	movne	r3, #0
 800b874:	b2db      	uxtb	r3, r3
 800b876:	e012      	b.n	800b89e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b878:	481a      	ldr	r0, [pc, #104]	@ (800b8e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b87a:	f7ff fe80 	bl	800b57e <LL_ADC_IsEnabled>
 800b87e:	4604      	mov	r4, r0
 800b880:	4819      	ldr	r0, [pc, #100]	@ (800b8e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b882:	f7ff fe7c 	bl	800b57e <LL_ADC_IsEnabled>
 800b886:	4603      	mov	r3, r0
 800b888:	431c      	orrs	r4, r3
 800b88a:	481a      	ldr	r0, [pc, #104]	@ (800b8f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b88c:	f7ff fe77 	bl	800b57e <LL_ADC_IsEnabled>
 800b890:	4603      	mov	r3, r0
 800b892:	4323      	orrs	r3, r4
 800b894:	2b00      	cmp	r3, #0
 800b896:	bf0c      	ite	eq
 800b898:	2301      	moveq	r3, #1
 800b89a:	2300      	movne	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d012      	beq.n	800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b8a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b8aa:	f023 030f 	bic.w	r3, r3, #15
 800b8ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b8b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b8b2:	e009      	b.n	800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8b8:	f043 0220 	orr.w	r2, r3, #32
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b8c6:	e000      	b.n	800b8ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b8c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b8d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3784      	adds	r7, #132	@ 0x84
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd90      	pop	{r4, r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	50000100 	.word	0x50000100
 800b8e4:	50000400 	.word	0x50000400
 800b8e8:	50000500 	.word	0x50000500
 800b8ec:	50000300 	.word	0x50000300
 800b8f0:	50000700 	.word	0x50000700
 800b8f4:	50000600 	.word	0x50000600

0800b8f8 <__NVIC_SetPriorityGrouping>:
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b908:	4b0c      	ldr	r3, [pc, #48]	@ (800b93c <__NVIC_SetPriorityGrouping+0x44>)
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b914:	4013      	ands	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b92a:	4a04      	ldr	r2, [pc, #16]	@ (800b93c <__NVIC_SetPriorityGrouping+0x44>)
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	60d3      	str	r3, [r2, #12]
}
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	e000ed00 	.word	0xe000ed00

0800b940 <__NVIC_GetPriorityGrouping>:
{
 800b940:	b480      	push	{r7}
 800b942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b944:	4b04      	ldr	r3, [pc, #16]	@ (800b958 <__NVIC_GetPriorityGrouping+0x18>)
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	0a1b      	lsrs	r3, r3, #8
 800b94a:	f003 0307 	and.w	r3, r3, #7
}
 800b94e:	4618      	mov	r0, r3
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	e000ed00 	.word	0xe000ed00

0800b95c <__NVIC_EnableIRQ>:
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	db0b      	blt.n	800b986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	f003 021f 	and.w	r2, r3, #31
 800b974:	4907      	ldr	r1, [pc, #28]	@ (800b994 <__NVIC_EnableIRQ+0x38>)
 800b976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97a:	095b      	lsrs	r3, r3, #5
 800b97c:	2001      	movs	r0, #1
 800b97e:	fa00 f202 	lsl.w	r2, r0, r2
 800b982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b986:	bf00      	nop
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	e000e100 	.word	0xe000e100

0800b998 <__NVIC_SetPriority>:
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	db0a      	blt.n	800b9c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	490c      	ldr	r1, [pc, #48]	@ (800b9e4 <__NVIC_SetPriority+0x4c>)
 800b9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9b6:	0112      	lsls	r2, r2, #4
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	440b      	add	r3, r1
 800b9bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b9c0:	e00a      	b.n	800b9d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4908      	ldr	r1, [pc, #32]	@ (800b9e8 <__NVIC_SetPriority+0x50>)
 800b9c8:	79fb      	ldrb	r3, [r7, #7]
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	3b04      	subs	r3, #4
 800b9d0:	0112      	lsls	r2, r2, #4
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	440b      	add	r3, r1
 800b9d6:	761a      	strb	r2, [r3, #24]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	e000e100 	.word	0xe000e100
 800b9e8:	e000ed00 	.word	0xe000ed00

0800b9ec <NVIC_EncodePriority>:
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b089      	sub	sp, #36	@ 0x24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	f1c3 0307 	rsb	r3, r3, #7
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	bf28      	it	cs
 800ba0a:	2304      	movcs	r3, #4
 800ba0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	3304      	adds	r3, #4
 800ba12:	2b06      	cmp	r3, #6
 800ba14:	d902      	bls.n	800ba1c <NVIC_EncodePriority+0x30>
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	3b03      	subs	r3, #3
 800ba1a:	e000      	b.n	800ba1e <NVIC_EncodePriority+0x32>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba20:	f04f 32ff 	mov.w	r2, #4294967295
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2a:	43da      	mvns	r2, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	401a      	ands	r2, r3
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba34:	f04f 31ff 	mov.w	r1, #4294967295
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3e:	43d9      	mvns	r1, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba44:	4313      	orrs	r3, r2
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3724      	adds	r7, #36	@ 0x24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
	...

0800ba54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba64:	d301      	bcc.n	800ba6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba66:	2301      	movs	r3, #1
 800ba68:	e00f      	b.n	800ba8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba6a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba94 <SysTick_Config+0x40>)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba72:	210f      	movs	r1, #15
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	f7ff ff8e 	bl	800b998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba7c:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <SysTick_Config+0x40>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba82:	4b04      	ldr	r3, [pc, #16]	@ (800ba94 <SysTick_Config+0x40>)
 800ba84:	2207      	movs	r2, #7
 800ba86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	e000e010 	.word	0xe000e010

0800ba98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ff29 	bl	800b8f8 <__NVIC_SetPriorityGrouping>
}
 800baa6:	bf00      	nop
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b086      	sub	sp, #24
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	4603      	mov	r3, r0
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800babc:	f7ff ff40 	bl	800b940 <__NVIC_GetPriorityGrouping>
 800bac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	6978      	ldr	r0, [r7, #20]
 800bac8:	f7ff ff90 	bl	800b9ec <NVIC_EncodePriority>
 800bacc:	4602      	mov	r2, r0
 800bace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff ff5f 	bl	800b998 <__NVIC_SetPriority>
}
 800bada:	bf00      	nop
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	4603      	mov	r3, r0
 800baea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800baec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff ff33 	bl	800b95c <__NVIC_EnableIRQ>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff ffa4 	bl	800ba54 <SysTick_Config>
 800bb0c:	4603      	mov	r3, r0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e08d      	b.n	800bc46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4b47      	ldr	r3, [pc, #284]	@ (800bc50 <HAL_DMA_Init+0x138>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d80f      	bhi.n	800bb56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4b45      	ldr	r3, [pc, #276]	@ (800bc54 <HAL_DMA_Init+0x13c>)
 800bb3e:	4413      	add	r3, r2
 800bb40:	4a45      	ldr	r2, [pc, #276]	@ (800bc58 <HAL_DMA_Init+0x140>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	091b      	lsrs	r3, r3, #4
 800bb48:	009a      	lsls	r2, r3, #2
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a42      	ldr	r2, [pc, #264]	@ (800bc5c <HAL_DMA_Init+0x144>)
 800bb52:	641a      	str	r2, [r3, #64]	@ 0x40
 800bb54:	e00e      	b.n	800bb74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4b40      	ldr	r3, [pc, #256]	@ (800bc60 <HAL_DMA_Init+0x148>)
 800bb5e:	4413      	add	r3, r2
 800bb60:	4a3d      	ldr	r2, [pc, #244]	@ (800bc58 <HAL_DMA_Init+0x140>)
 800bb62:	fba2 2303 	umull	r2, r3, r2, r3
 800bb66:	091b      	lsrs	r3, r3, #4
 800bb68:	009a      	lsls	r2, r3, #2
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a3c      	ldr	r2, [pc, #240]	@ (800bc64 <HAL_DMA_Init+0x14c>)
 800bb72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bb8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bb98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fa76 	bl	800c0b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbd4:	d102      	bne.n	800bbdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbe4:	b2d2      	uxtb	r2, r2
 800bbe6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bbf0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d010      	beq.n	800bc1c <HAL_DMA_Init+0x104>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d80c      	bhi.n	800bc1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fa96 	bl	800c134 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	e008      	b.n	800bc2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	40020407 	.word	0x40020407
 800bc54:	bffdfff8 	.word	0xbffdfff8
 800bc58:	cccccccd 	.word	0xcccccccd
 800bc5c:	40020000 	.word	0x40020000
 800bc60:	bffdfbf8 	.word	0xbffdfbf8
 800bc64:	40020400 	.word	0x40020400

0800bc68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d101      	bne.n	800bc88 <HAL_DMA_Start_IT+0x20>
 800bc84:	2302      	movs	r3, #2
 800bc86:	e066      	b.n	800bd56 <HAL_DMA_Start_IT+0xee>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d155      	bne.n	800bd48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f022 0201 	bic.w	r2, r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f9bb 	bl	800c03c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d008      	beq.n	800bce0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f042 020e 	orr.w	r2, r2, #14
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e00f      	b.n	800bd00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f022 0204 	bic.w	r2, r2, #4
 800bcee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f042 020a 	orr.w	r2, r2, #10
 800bcfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e005      	b.n	800bd54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
 800bd52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b085      	sub	sp, #20
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d005      	beq.n	800bd82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]
 800bd80:	e037      	b.n	800bdf2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 020e 	bic.w	r2, r2, #14
 800bd90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bda0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f022 0201 	bic.w	r2, r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdb6:	f003 021f 	and.w	r2, r3, #31
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	fa01 f202 	lsl.w	r2, r1, r2
 800bdc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bdce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00c      	beq.n	800bdf2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bde2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bde6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bdf0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b02      	cmp	r3, #2
 800be26:	d00d      	beq.n	800be44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2204      	movs	r2, #4
 800be2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	73fb      	strb	r3, [r7, #15]
 800be42:	e047      	b.n	800bed4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f022 020e 	bic.w	r2, r2, #14
 800be52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 0201 	bic.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be78:	f003 021f 	and.w	r2, r3, #31
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f202 	lsl.w	r2, r1, r2
 800be86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800be90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bea8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800beb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
    }
  }
  return status;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800befa:	f003 031f 	and.w	r3, r3, #31
 800befe:	2204      	movs	r2, #4
 800bf00:	409a      	lsls	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	4013      	ands	r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d026      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x7a>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d021      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d107      	bne.n	800bf32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f022 0204 	bic.w	r2, r2, #4
 800bf30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf36:	f003 021f 	and.w	r2, r3, #31
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf3e:	2104      	movs	r1, #4
 800bf40:	fa01 f202 	lsl.w	r2, r1, r2
 800bf44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d071      	beq.n	800c032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bf56:	e06c      	b.n	800c032 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5c:	f003 031f 	and.w	r3, r3, #31
 800bf60:	2202      	movs	r2, #2
 800bf62:	409a      	lsls	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4013      	ands	r3, r2
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d02e      	beq.n	800bfca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d029      	beq.n	800bfca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10b      	bne.n	800bf9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 020a 	bic.w	r2, r2, #10
 800bf92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa0:	f003 021f 	and.w	r2, r3, #31
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	fa01 f202 	lsl.w	r2, r1, r2
 800bfae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d038      	beq.n	800c032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bfc8:	e033      	b.n	800c032 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfce:	f003 031f 	and.w	r3, r3, #31
 800bfd2:	2208      	movs	r2, #8
 800bfd4:	409a      	lsls	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d02a      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d025      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f022 020e 	bic.w	r2, r2, #14
 800bff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bffc:	f003 021f 	and.w	r2, r3, #31
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f202 	lsl.w	r2, r1, r2
 800c00a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c032:	bf00      	nop
 800c034:	bf00      	nop
}
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c052:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c064:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c06a:	f003 021f 	and.w	r2, r3, #31
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c072:	2101      	movs	r1, #1
 800c074:	fa01 f202 	lsl.w	r2, r1, r2
 800c078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	2b10      	cmp	r3, #16
 800c088:	d108      	bne.n	800c09c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c09a:	e007      	b.n	800c0ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	60da      	str	r2, [r3, #12]
}
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	4b16      	ldr	r3, [pc, #88]	@ (800c120 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d802      	bhi.n	800c0d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c0cc:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c0ce:	617b      	str	r3, [r7, #20]
 800c0d0:	e001      	b.n	800c0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c0d2:	4b15      	ldr	r3, [pc, #84]	@ (800c128 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c0d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	3b08      	subs	r3, #8
 800c0e2:	4a12      	ldr	r2, [pc, #72]	@ (800c12c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e8:	091b      	lsrs	r3, r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0f0:	089b      	lsrs	r3, r3, #2
 800c0f2:	009a      	lsls	r2, r3, #2
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a0b      	ldr	r2, [pc, #44]	@ (800c130 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f003 031f 	and.w	r3, r3, #31
 800c10a:	2201      	movs	r2, #1
 800c10c:	409a      	lsls	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c112:	bf00      	nop
 800c114:	371c      	adds	r7, #28
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	40020407 	.word	0x40020407
 800c124:	40020800 	.word	0x40020800
 800c128:	40020820 	.word	0x40020820
 800c12c:	cccccccd 	.word	0xcccccccd
 800c130:	40020880 	.word	0x40020880

0800c134 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a08      	ldr	r2, [pc, #32]	@ (800c178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c156:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	f003 031f 	and.w	r3, r3, #31
 800c160:	2201      	movs	r2, #1
 800c162:	409a      	lsls	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	1000823f 	.word	0x1000823f
 800c178:	40020940 	.word	0x40020940

0800c17c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c18a:	e15a      	b.n	800c442 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	2101      	movs	r1, #1
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	fa01 f303 	lsl.w	r3, r1, r3
 800c198:	4013      	ands	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 814c 	beq.w	800c43c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d005      	beq.n	800c1bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d130      	bne.n	800c21e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	2203      	movs	r2, #3
 800c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1cc:	43db      	mvns	r3, r3
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	68da      	ldr	r2, [r3, #12]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1fa:	43db      	mvns	r3, r3
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	4013      	ands	r3, r2
 800c200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	091b      	lsrs	r3, r3, #4
 800c208:	f003 0201 	and.w	r2, r3, #1
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	4313      	orrs	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b03      	cmp	r3, #3
 800c228:	d017      	beq.n	800c25a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	2203      	movs	r2, #3
 800c236:	fa02 f303 	lsl.w	r3, r2, r3
 800c23a:	43db      	mvns	r3, r3
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	4013      	ands	r3, r2
 800c240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	fa02 f303 	lsl.w	r3, r2, r3
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	4313      	orrs	r3, r2
 800c252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b02      	cmp	r3, #2
 800c264:	d123      	bne.n	800c2ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	08da      	lsrs	r2, r3, #3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3208      	adds	r2, #8
 800c26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	220f      	movs	r2, #15
 800c27e:	fa02 f303 	lsl.w	r3, r2, r3
 800c282:	43db      	mvns	r3, r3
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	4013      	ands	r3, r2
 800c288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	691a      	ldr	r2, [r3, #16]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f003 0307 	and.w	r3, r3, #7
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	fa02 f303 	lsl.w	r3, r2, r3
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	08da      	lsrs	r2, r3, #3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3208      	adds	r2, #8
 800c2a8:	6939      	ldr	r1, [r7, #16]
 800c2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43db      	mvns	r3, r3
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f003 0203 	and.w	r2, r3, #3
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	005b      	lsls	r3, r3, #1
 800c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80a6 	beq.w	800c43c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2f0:	4b5b      	ldr	r3, [pc, #364]	@ (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2f4:	4a5a      	ldr	r2, [pc, #360]	@ (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2f6:	f043 0301 	orr.w	r3, r3, #1
 800c2fa:	6613      	str	r3, [r2, #96]	@ 0x60
 800c2fc:	4b58      	ldr	r3, [pc, #352]	@ (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	60bb      	str	r3, [r7, #8]
 800c306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c308:	4a56      	ldr	r2, [pc, #344]	@ (800c464 <HAL_GPIO_Init+0x2e8>)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	089b      	lsrs	r3, r3, #2
 800c30e:	3302      	adds	r3, #2
 800c310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	220f      	movs	r2, #15
 800c320:	fa02 f303 	lsl.w	r3, r2, r3
 800c324:	43db      	mvns	r3, r3
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4013      	ands	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c332:	d01f      	beq.n	800c374 <HAL_GPIO_Init+0x1f8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a4c      	ldr	r2, [pc, #304]	@ (800c468 <HAL_GPIO_Init+0x2ec>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d019      	beq.n	800c370 <HAL_GPIO_Init+0x1f4>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a4b      	ldr	r2, [pc, #300]	@ (800c46c <HAL_GPIO_Init+0x2f0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d013      	beq.n	800c36c <HAL_GPIO_Init+0x1f0>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a4a      	ldr	r2, [pc, #296]	@ (800c470 <HAL_GPIO_Init+0x2f4>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00d      	beq.n	800c368 <HAL_GPIO_Init+0x1ec>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a49      	ldr	r2, [pc, #292]	@ (800c474 <HAL_GPIO_Init+0x2f8>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d007      	beq.n	800c364 <HAL_GPIO_Init+0x1e8>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a48      	ldr	r2, [pc, #288]	@ (800c478 <HAL_GPIO_Init+0x2fc>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d101      	bne.n	800c360 <HAL_GPIO_Init+0x1e4>
 800c35c:	2305      	movs	r3, #5
 800c35e:	e00a      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c360:	2306      	movs	r3, #6
 800c362:	e008      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c364:	2304      	movs	r3, #4
 800c366:	e006      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c368:	2303      	movs	r3, #3
 800c36a:	e004      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e002      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c370:	2301      	movs	r3, #1
 800c372:	e000      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c374:	2300      	movs	r3, #0
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	f002 0203 	and.w	r2, r2, #3
 800c37c:	0092      	lsls	r2, r2, #2
 800c37e:	4093      	lsls	r3, r2
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	4313      	orrs	r3, r2
 800c384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c386:	4937      	ldr	r1, [pc, #220]	@ (800c464 <HAL_GPIO_Init+0x2e8>)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	089b      	lsrs	r3, r3, #2
 800c38c:	3302      	adds	r3, #2
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c394:	4b39      	ldr	r3, [pc, #228]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	43db      	mvns	r3, r3
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	4013      	ands	r3, r2
 800c3a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c3b8:	4a30      	ldr	r2, [pc, #192]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c3be:	4b2f      	ldr	r3, [pc, #188]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	43db      	mvns	r3, r3
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c3e2:	4a26      	ldr	r2, [pc, #152]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c3e8:	4b24      	ldr	r3, [pc, #144]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	43db      	mvns	r3, r3
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d003      	beq.n	800c40c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c40c:	4a1b      	ldr	r2, [pc, #108]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c412:	4b1a      	ldr	r3, [pc, #104]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	43db      	mvns	r3, r3
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	4013      	ands	r3, r2
 800c420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c436:	4a11      	ldr	r2, [pc, #68]	@ (800c47c <HAL_GPIO_Init+0x300>)
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	3301      	adds	r3, #1
 800c440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	fa22 f303 	lsr.w	r3, r2, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f47f ae9d 	bne.w	800c18c <HAL_GPIO_Init+0x10>
  }
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	371c      	adds	r7, #28
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	40021000 	.word	0x40021000
 800c464:	40010000 	.word	0x40010000
 800c468:	48000400 	.word	0x48000400
 800c46c:	48000800 	.word	0x48000800
 800c470:	48000c00 	.word	0x48000c00
 800c474:	48001000 	.word	0x48001000
 800c478:	48001400 	.word	0x48001400
 800c47c:	40010400 	.word	0x40010400

0800c480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691a      	ldr	r2, [r3, #16]
 800c490:	887b      	ldrh	r3, [r7, #2]
 800c492:	4013      	ands	r3, r2
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
 800c49c:	e001      	b.n	800c4a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	807b      	strh	r3, [r7, #2]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c4c0:	787b      	ldrb	r3, [r7, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c4c6:	887a      	ldrh	r2, [r7, #2]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c4cc:	e002      	b.n	800c4d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c4ce:	887a      	ldrh	r2, [r7, #2]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c4f2:	887a      	ldrh	r2, [r7, #2]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	041a      	lsls	r2, r3, #16
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	43d9      	mvns	r1, r3
 800c4fe:	887b      	ldrh	r3, [r7, #2]
 800c500:	400b      	ands	r3, r1
 800c502:	431a      	orrs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	619a      	str	r2, [r3, #24]
}
 800c508:	bf00      	nop
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c51e:	4b08      	ldr	r3, [pc, #32]	@ (800c540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c520:	695a      	ldr	r2, [r3, #20]
 800c522:	88fb      	ldrh	r3, [r7, #6]
 800c524:	4013      	ands	r3, r2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d006      	beq.n	800c538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c52a:	4a05      	ldr	r2, [pc, #20]	@ (800c540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c52c:	88fb      	ldrh	r3, [r7, #6]
 800c52e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	4618      	mov	r0, r3
 800c534:	f7fb fdbc 	bl	80080b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800c538:	bf00      	nop
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	40010400 	.word	0x40010400

0800c544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d141      	bne.n	800c5d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c552:	4b4b      	ldr	r3, [pc, #300]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c55a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c55e:	d131      	bne.n	800c5c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c560:	4b47      	ldr	r3, [pc, #284]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c566:	4a46      	ldr	r2, [pc, #280]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c56c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c570:	4b43      	ldr	r3, [pc, #268]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c578:	4a41      	ldr	r2, [pc, #260]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c57a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c57e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c580:	4b40      	ldr	r3, [pc, #256]	@ (800c684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2232      	movs	r2, #50	@ 0x32
 800c586:	fb02 f303 	mul.w	r3, r2, r3
 800c58a:	4a3f      	ldr	r2, [pc, #252]	@ (800c688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c58c:	fba2 2303 	umull	r2, r3, r2, r3
 800c590:	0c9b      	lsrs	r3, r3, #18
 800c592:	3301      	adds	r3, #1
 800c594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c596:	e002      	b.n	800c59e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c59e:	4b38      	ldr	r3, [pc, #224]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5aa:	d102      	bne.n	800c5b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1f2      	bne.n	800c598 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c5b2:	4b33      	ldr	r3, [pc, #204]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5be:	d158      	bne.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e057      	b.n	800c674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c5c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ca:	4a2d      	ldr	r2, [pc, #180]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c5d4:	e04d      	b.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5dc:	d141      	bne.n	800c662 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c5de:	4b28      	ldr	r3, [pc, #160]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c5e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5ea:	d131      	bne.n	800c650 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c5ec:	4b24      	ldr	r3, [pc, #144]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5f2:	4a23      	ldr	r2, [pc, #140]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5fc:	4b20      	ldr	r3, [pc, #128]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c604:	4a1e      	ldr	r2, [pc, #120]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c60a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c60c:	4b1d      	ldr	r3, [pc, #116]	@ (800c684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2232      	movs	r2, #50	@ 0x32
 800c612:	fb02 f303 	mul.w	r3, r2, r3
 800c616:	4a1c      	ldr	r2, [pc, #112]	@ (800c688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c618:	fba2 2303 	umull	r2, r3, r2, r3
 800c61c:	0c9b      	lsrs	r3, r3, #18
 800c61e:	3301      	adds	r3, #1
 800c620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c622:	e002      	b.n	800c62a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3b01      	subs	r3, #1
 800c628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c62a:	4b15      	ldr	r3, [pc, #84]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c636:	d102      	bne.n	800c63e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1f2      	bne.n	800c624 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c63e:	4b10      	ldr	r3, [pc, #64]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c64a:	d112      	bne.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e011      	b.n	800c674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c656:	4a0a      	ldr	r2, [pc, #40]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c65c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c660:	e007      	b.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c662:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c66a:	4a05      	ldr	r2, [pc, #20]	@ (800c680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c66c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c670:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	40007000 	.word	0x40007000
 800c684:	20000138 	.word	0x20000138
 800c688:	431bde83 	.word	0x431bde83

0800c68c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c690:	4b05      	ldr	r3, [pc, #20]	@ (800c6a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	4a04      	ldr	r2, [pc, #16]	@ (800c6a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c69a:	6093      	str	r3, [r2, #8]
}
 800c69c:	bf00      	nop
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	40007000 	.word	0x40007000

0800c6ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e2fe      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d075      	beq.n	800c7b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6ca:	4b97      	ldr	r3, [pc, #604]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f003 030c 	and.w	r3, r3, #12
 800c6d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c6d4:	4b94      	ldr	r3, [pc, #592]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	f003 0303 	and.w	r3, r3, #3
 800c6dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b0c      	cmp	r3, #12
 800c6e2:	d102      	bne.n	800c6ea <HAL_RCC_OscConfig+0x3e>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d002      	beq.n	800c6f0 <HAL_RCC_OscConfig+0x44>
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b08      	cmp	r3, #8
 800c6ee:	d10b      	bne.n	800c708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6f0:	4b8d      	ldr	r3, [pc, #564]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d05b      	beq.n	800c7b4 <HAL_RCC_OscConfig+0x108>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d157      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e2d9      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c710:	d106      	bne.n	800c720 <HAL_RCC_OscConfig+0x74>
 800c712:	4b85      	ldr	r3, [pc, #532]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a84      	ldr	r2, [pc, #528]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	e01d      	b.n	800c75c <HAL_RCC_OscConfig+0xb0>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c728:	d10c      	bne.n	800c744 <HAL_RCC_OscConfig+0x98>
 800c72a:	4b7f      	ldr	r3, [pc, #508]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a7e      	ldr	r2, [pc, #504]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	4b7c      	ldr	r3, [pc, #496]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a7b      	ldr	r2, [pc, #492]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c73c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	e00b      	b.n	800c75c <HAL_RCC_OscConfig+0xb0>
 800c744:	4b78      	ldr	r3, [pc, #480]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a77      	ldr	r2, [pc, #476]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c74a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	4b75      	ldr	r3, [pc, #468]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a74      	ldr	r2, [pc, #464]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c75a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d013      	beq.n	800c78c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c764:	f7fd fc44 	bl	8009ff0 <HAL_GetTick>
 800c768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c76a:	e008      	b.n	800c77e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c76c:	f7fd fc40 	bl	8009ff0 <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	2b64      	cmp	r3, #100	@ 0x64
 800c778:	d901      	bls.n	800c77e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c77a:	2303      	movs	r3, #3
 800c77c:	e29e      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c77e:	4b6a      	ldr	r3, [pc, #424]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f0      	beq.n	800c76c <HAL_RCC_OscConfig+0xc0>
 800c78a:	e014      	b.n	800c7b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c78c:	f7fd fc30 	bl	8009ff0 <HAL_GetTick>
 800c790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c792:	e008      	b.n	800c7a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c794:	f7fd fc2c 	bl	8009ff0 <HAL_GetTick>
 800c798:	4602      	mov	r2, r0
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	2b64      	cmp	r3, #100	@ 0x64
 800c7a0:	d901      	bls.n	800c7a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e28a      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c7a6:	4b60      	ldr	r3, [pc, #384]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1f0      	bne.n	800c794 <HAL_RCC_OscConfig+0xe8>
 800c7b2:	e000      	b.n	800c7b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0302 	and.w	r3, r3, #2
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d075      	beq.n	800c8ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7c2:	4b59      	ldr	r3, [pc, #356]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f003 030c 	and.w	r3, r3, #12
 800c7ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7cc:	4b56      	ldr	r3, [pc, #344]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	2b0c      	cmp	r3, #12
 800c7da:	d102      	bne.n	800c7e2 <HAL_RCC_OscConfig+0x136>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d002      	beq.n	800c7e8 <HAL_RCC_OscConfig+0x13c>
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d11f      	bne.n	800c828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c7e8:	4b4f      	ldr	r3, [pc, #316]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d005      	beq.n	800c800 <HAL_RCC_OscConfig+0x154>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e25d      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c800:	4b49      	ldr	r3, [pc, #292]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	061b      	lsls	r3, r3, #24
 800c80e:	4946      	ldr	r1, [pc, #280]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c810:	4313      	orrs	r3, r2
 800c812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c814:	4b45      	ldr	r3, [pc, #276]	@ (800c92c <HAL_RCC_OscConfig+0x280>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fd fb9d 	bl	8009f58 <HAL_InitTick>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d043      	beq.n	800c8ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e249      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d023      	beq.n	800c878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c830:	4b3d      	ldr	r3, [pc, #244]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a3c      	ldr	r2, [pc, #240]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c83a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c83c:	f7fd fbd8 	bl	8009ff0 <HAL_GetTick>
 800c840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c842:	e008      	b.n	800c856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c844:	f7fd fbd4 	bl	8009ff0 <HAL_GetTick>
 800c848:	4602      	mov	r2, r0
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d901      	bls.n	800c856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e232      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c856:	4b34      	ldr	r3, [pc, #208]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f0      	beq.n	800c844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c862:	4b31      	ldr	r3, [pc, #196]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	061b      	lsls	r3, r3, #24
 800c870:	492d      	ldr	r1, [pc, #180]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c872:	4313      	orrs	r3, r2
 800c874:	604b      	str	r3, [r1, #4]
 800c876:	e01a      	b.n	800c8ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c878:	4b2b      	ldr	r3, [pc, #172]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a2a      	ldr	r2, [pc, #168]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c87e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c884:	f7fd fbb4 	bl	8009ff0 <HAL_GetTick>
 800c888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c88a:	e008      	b.n	800c89e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c88c:	f7fd fbb0 	bl	8009ff0 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d901      	bls.n	800c89e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e20e      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c89e:	4b22      	ldr	r3, [pc, #136]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1f0      	bne.n	800c88c <HAL_RCC_OscConfig+0x1e0>
 800c8aa:	e000      	b.n	800c8ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0308 	and.w	r3, r3, #8
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d041      	beq.n	800c93e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d01c      	beq.n	800c8fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8c2:	4b19      	ldr	r3, [pc, #100]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c8c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8c8:	4a17      	ldr	r2, [pc, #92]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c8ca:	f043 0301 	orr.w	r3, r3, #1
 800c8ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d2:	f7fd fb8d 	bl	8009ff0 <HAL_GetTick>
 800c8d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c8d8:	e008      	b.n	800c8ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c8da:	f7fd fb89 	bl	8009ff0 <HAL_GetTick>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d901      	bls.n	800c8ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	e1e7      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c8ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8f2:	f003 0302 	and.w	r3, r3, #2
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d0ef      	beq.n	800c8da <HAL_RCC_OscConfig+0x22e>
 800c8fa:	e020      	b.n	800c93e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c902:	4a09      	ldr	r2, [pc, #36]	@ (800c928 <HAL_RCC_OscConfig+0x27c>)
 800c904:	f023 0301 	bic.w	r3, r3, #1
 800c908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c90c:	f7fd fb70 	bl	8009ff0 <HAL_GetTick>
 800c910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c912:	e00d      	b.n	800c930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c914:	f7fd fb6c 	bl	8009ff0 <HAL_GetTick>
 800c918:	4602      	mov	r2, r0
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d906      	bls.n	800c930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c922:	2303      	movs	r3, #3
 800c924:	e1ca      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
 800c926:	bf00      	nop
 800c928:	40021000 	.word	0x40021000
 800c92c:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c930:	4b8c      	ldr	r3, [pc, #560]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c936:	f003 0302 	and.w	r3, r3, #2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1ea      	bne.n	800c914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0304 	and.w	r3, r3, #4
 800c946:	2b00      	cmp	r3, #0
 800c948:	f000 80a6 	beq.w	800ca98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c94c:	2300      	movs	r3, #0
 800c94e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c950:	4b84      	ldr	r3, [pc, #528]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <HAL_RCC_OscConfig+0x2b4>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e000      	b.n	800c962 <HAL_RCC_OscConfig+0x2b6>
 800c960:	2300      	movs	r3, #0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00d      	beq.n	800c982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c966:	4b7f      	ldr	r3, [pc, #508]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96a:	4a7e      	ldr	r2, [pc, #504]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c96c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c970:	6593      	str	r3, [r2, #88]	@ 0x58
 800c972:	4b7c      	ldr	r3, [pc, #496]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c97e:	2301      	movs	r3, #1
 800c980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c982:	4b79      	ldr	r3, [pc, #484]	@ (800cb68 <HAL_RCC_OscConfig+0x4bc>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d118      	bne.n	800c9c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c98e:	4b76      	ldr	r3, [pc, #472]	@ (800cb68 <HAL_RCC_OscConfig+0x4bc>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a75      	ldr	r2, [pc, #468]	@ (800cb68 <HAL_RCC_OscConfig+0x4bc>)
 800c994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c99a:	f7fd fb29 	bl	8009ff0 <HAL_GetTick>
 800c99e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c9a0:	e008      	b.n	800c9b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9a2:	f7fd fb25 	bl	8009ff0 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d901      	bls.n	800c9b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e183      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c9b4:	4b6c      	ldr	r3, [pc, #432]	@ (800cb68 <HAL_RCC_OscConfig+0x4bc>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0f0      	beq.n	800c9a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d108      	bne.n	800c9da <HAL_RCC_OscConfig+0x32e>
 800c9c8:	4b66      	ldr	r3, [pc, #408]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ce:	4a65      	ldr	r2, [pc, #404]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9d0:	f043 0301 	orr.w	r3, r3, #1
 800c9d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c9d8:	e024      	b.n	800ca24 <HAL_RCC_OscConfig+0x378>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d110      	bne.n	800ca04 <HAL_RCC_OscConfig+0x358>
 800c9e2:	4b60      	ldr	r3, [pc, #384]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9e8:	4a5e      	ldr	r2, [pc, #376]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9ea:	f043 0304 	orr.w	r3, r3, #4
 800c9ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c9f2:	4b5c      	ldr	r3, [pc, #368]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9f8:	4a5a      	ldr	r2, [pc, #360]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ca02:	e00f      	b.n	800ca24 <HAL_RCC_OscConfig+0x378>
 800ca04:	4b57      	ldr	r3, [pc, #348]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca0a:	4a56      	ldr	r2, [pc, #344]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ca14:	4b53      	ldr	r3, [pc, #332]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca1a:	4a52      	ldr	r2, [pc, #328]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca1c:	f023 0304 	bic.w	r3, r3, #4
 800ca20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d016      	beq.n	800ca5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca2c:	f7fd fae0 	bl	8009ff0 <HAL_GetTick>
 800ca30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ca32:	e00a      	b.n	800ca4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca34:	f7fd fadc 	bl	8009ff0 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d901      	bls.n	800ca4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e138      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ca4a:	4b46      	ldr	r3, [pc, #280]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca50:	f003 0302 	and.w	r3, r3, #2
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0ed      	beq.n	800ca34 <HAL_RCC_OscConfig+0x388>
 800ca58:	e015      	b.n	800ca86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca5a:	f7fd fac9 	bl	8009ff0 <HAL_GetTick>
 800ca5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ca60:	e00a      	b.n	800ca78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca62:	f7fd fac5 	bl	8009ff0 <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d901      	bls.n	800ca78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ca74:	2303      	movs	r3, #3
 800ca76:	e121      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ca78:	4b3a      	ldr	r3, [pc, #232]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1ed      	bne.n	800ca62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ca86:	7ffb      	ldrb	r3, [r7, #31]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d105      	bne.n	800ca98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca8c:	4b35      	ldr	r3, [pc, #212]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca90:	4a34      	ldr	r2, [pc, #208]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800ca92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 0320 	and.w	r3, r3, #32
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d03c      	beq.n	800cb1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01c      	beq.n	800cae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800caac:	4b2d      	ldr	r3, [pc, #180]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800caae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cab2:	4a2c      	ldr	r2, [pc, #176]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cab4:	f043 0301 	orr.w	r3, r3, #1
 800cab8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cabc:	f7fd fa98 	bl	8009ff0 <HAL_GetTick>
 800cac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cac2:	e008      	b.n	800cad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cac4:	f7fd fa94 	bl	8009ff0 <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d901      	bls.n	800cad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e0f2      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cad6:	4b23      	ldr	r3, [pc, #140]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cadc:	f003 0302 	and.w	r3, r3, #2
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d0ef      	beq.n	800cac4 <HAL_RCC_OscConfig+0x418>
 800cae4:	e01b      	b.n	800cb1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cae6:	4b1f      	ldr	r3, [pc, #124]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800caec:	4a1d      	ldr	r2, [pc, #116]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800caee:	f023 0301 	bic.w	r3, r3, #1
 800caf2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caf6:	f7fd fa7b 	bl	8009ff0 <HAL_GetTick>
 800cafa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cafc:	e008      	b.n	800cb10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cafe:	f7fd fa77 	bl	8009ff0 <HAL_GetTick>
 800cb02:	4602      	mov	r2, r0
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d901      	bls.n	800cb10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e0d5      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cb10:	4b14      	ldr	r3, [pc, #80]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cb12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1ef      	bne.n	800cafe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 80c9 	beq.w	800ccba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb28:	4b0e      	ldr	r3, [pc, #56]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f003 030c 	and.w	r3, r3, #12
 800cb30:	2b0c      	cmp	r3, #12
 800cb32:	f000 8083 	beq.w	800cc3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	69db      	ldr	r3, [r3, #28]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d15e      	bne.n	800cbfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb3e:	4b09      	ldr	r3, [pc, #36]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a08      	ldr	r2, [pc, #32]	@ (800cb64 <HAL_RCC_OscConfig+0x4b8>)
 800cb44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4a:	f7fd fa51 	bl	8009ff0 <HAL_GetTick>
 800cb4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb50:	e00c      	b.n	800cb6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb52:	f7fd fa4d 	bl	8009ff0 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d905      	bls.n	800cb6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e0ab      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
 800cb64:	40021000 	.word	0x40021000
 800cb68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb6c:	4b55      	ldr	r3, [pc, #340]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1ec      	bne.n	800cb52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb78:	4b52      	ldr	r3, [pc, #328]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	4b52      	ldr	r3, [pc, #328]	@ (800ccc8 <HAL_RCC_OscConfig+0x61c>)
 800cb7e:	4013      	ands	r3, r2
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6a11      	ldr	r1, [r2, #32]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cb88:	3a01      	subs	r2, #1
 800cb8a:	0112      	lsls	r2, r2, #4
 800cb8c:	4311      	orrs	r1, r2
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cb92:	0212      	lsls	r2, r2, #8
 800cb94:	4311      	orrs	r1, r2
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb9a:	0852      	lsrs	r2, r2, #1
 800cb9c:	3a01      	subs	r2, #1
 800cb9e:	0552      	lsls	r2, r2, #21
 800cba0:	4311      	orrs	r1, r2
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cba6:	0852      	lsrs	r2, r2, #1
 800cba8:	3a01      	subs	r2, #1
 800cbaa:	0652      	lsls	r2, r2, #25
 800cbac:	4311      	orrs	r1, r2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cbb2:	06d2      	lsls	r2, r2, #27
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	4943      	ldr	r1, [pc, #268]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cbbc:	4b41      	ldr	r3, [pc, #260]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a40      	ldr	r2, [pc, #256]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cbc8:	4b3e      	ldr	r3, [pc, #248]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4a3d      	ldr	r2, [pc, #244]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd4:	f7fd fa0c 	bl	8009ff0 <HAL_GetTick>
 800cbd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbda:	e008      	b.n	800cbee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbdc:	f7fd fa08 	bl	8009ff0 <HAL_GetTick>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d901      	bls.n	800cbee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e066      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbee:	4b35      	ldr	r3, [pc, #212]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0f0      	beq.n	800cbdc <HAL_RCC_OscConfig+0x530>
 800cbfa:	e05e      	b.n	800ccba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbfc:	4b31      	ldr	r3, [pc, #196]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a30      	ldr	r2, [pc, #192]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cc02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cc06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc08:	f7fd f9f2 	bl	8009ff0 <HAL_GetTick>
 800cc0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc0e:	e008      	b.n	800cc22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc10:	f7fd f9ee 	bl	8009ff0 <HAL_GetTick>
 800cc14:	4602      	mov	r2, r0
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d901      	bls.n	800cc22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	e04c      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc22:	4b28      	ldr	r3, [pc, #160]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1f0      	bne.n	800cc10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cc2e:	4b25      	ldr	r3, [pc, #148]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cc30:	68da      	ldr	r2, [r3, #12]
 800cc32:	4924      	ldr	r1, [pc, #144]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cc34:	4b25      	ldr	r3, [pc, #148]	@ (800cccc <HAL_RCC_OscConfig+0x620>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	60cb      	str	r3, [r1, #12]
 800cc3a:	e03e      	b.n	800ccba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	69db      	ldr	r3, [r3, #28]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d101      	bne.n	800cc48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e039      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cc48:	4b1e      	ldr	r3, [pc, #120]	@ (800ccc4 <HAL_RCC_OscConfig+0x618>)
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f003 0203 	and.w	r2, r3, #3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d12c      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc66:	3b01      	subs	r3, #1
 800cc68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d123      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d11b      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d113      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc98:	085b      	lsrs	r3, r3, #1
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d109      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccac:	085b      	lsrs	r3, r3, #1
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d001      	beq.n	800ccba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	40021000 	.word	0x40021000
 800ccc8:	019f800c 	.word	0x019f800c
 800cccc:	feeefffc 	.word	0xfeeefffc

0800ccd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e11e      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cce8:	4b91      	ldr	r3, [pc, #580]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 030f 	and.w	r3, r3, #15
 800ccf0:	683a      	ldr	r2, [r7, #0]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d910      	bls.n	800cd18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccf6:	4b8e      	ldr	r3, [pc, #568]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f023 020f 	bic.w	r2, r3, #15
 800ccfe:	498c      	ldr	r1, [pc, #560]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd06:	4b8a      	ldr	r3, [pc, #552]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f003 030f 	and.w	r3, r3, #15
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d001      	beq.n	800cd18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e106      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d073      	beq.n	800ce0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	2b03      	cmp	r3, #3
 800cd2a:	d129      	bne.n	800cd80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd2c:	4b81      	ldr	r3, [pc, #516]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e0f4      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cd3c:	f000 f99e 	bl	800d07c <RCC_GetSysClockFreqFromPLLSource>
 800cd40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	4a7c      	ldr	r2, [pc, #496]	@ (800cf38 <HAL_RCC_ClockConfig+0x268>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d93f      	bls.n	800cdca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cd4a:	4b7a      	ldr	r3, [pc, #488]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d009      	beq.n	800cd6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d033      	beq.n	800cdca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d12f      	bne.n	800cdca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cd6a:	4b72      	ldr	r3, [pc, #456]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cd72:	4a70      	ldr	r2, [pc, #448]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cd7a:	2380      	movs	r3, #128	@ 0x80
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	e024      	b.n	800cdca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d107      	bne.n	800cd98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd88:	4b6a      	ldr	r3, [pc, #424]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d109      	bne.n	800cda8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e0c6      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd98:	4b66      	ldr	r3, [pc, #408]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e0be      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cda8:	f000 f8ce 	bl	800cf48 <HAL_RCC_GetSysClockFreq>
 800cdac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	4a61      	ldr	r2, [pc, #388]	@ (800cf38 <HAL_RCC_ClockConfig+0x268>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d909      	bls.n	800cdca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cdb6:	4b5f      	ldr	r3, [pc, #380]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cdbe:	4a5d      	ldr	r2, [pc, #372]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cdc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cdc6:	2380      	movs	r3, #128	@ 0x80
 800cdc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cdca:	4b5a      	ldr	r3, [pc, #360]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f023 0203 	bic.w	r2, r3, #3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	4957      	ldr	r1, [pc, #348]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cddc:	f7fd f908 	bl	8009ff0 <HAL_GetTick>
 800cde0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cde2:	e00a      	b.n	800cdfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cde4:	f7fd f904 	bl	8009ff0 <HAL_GetTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e095      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdfa:	4b4e      	ldr	r3, [pc, #312]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	f003 020c 	and.w	r2, r3, #12
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d1eb      	bne.n	800cde4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0302 	and.w	r3, r3, #2
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d023      	beq.n	800ce60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce24:	4b43      	ldr	r3, [pc, #268]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	4a42      	ldr	r2, [pc, #264]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ce2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ce3c:	4b3d      	ldr	r3, [pc, #244]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce44:	4a3b      	ldr	r2, [pc, #236]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ce4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce4c:	4b39      	ldr	r3, [pc, #228]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4936      	ldr	r1, [pc, #216]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	608b      	str	r3, [r1, #8]
 800ce5e:	e008      	b.n	800ce72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	2b80      	cmp	r3, #128	@ 0x80
 800ce64:	d105      	bne.n	800ce72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ce66:	4b33      	ldr	r3, [pc, #204]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	4a32      	ldr	r2, [pc, #200]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ce6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ce70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ce72:	4b2f      	ldr	r3, [pc, #188]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 030f 	and.w	r3, r3, #15
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d21d      	bcs.n	800cebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce80:	4b2b      	ldr	r3, [pc, #172]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f023 020f 	bic.w	r2, r3, #15
 800ce88:	4929      	ldr	r1, [pc, #164]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ce90:	f7fd f8ae 	bl	8009ff0 <HAL_GetTick>
 800ce94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce96:	e00a      	b.n	800ceae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce98:	f7fd f8aa 	bl	8009ff0 <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d901      	bls.n	800ceae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	e03b      	b.n	800cf26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ceae:	4b20      	ldr	r3, [pc, #128]	@ (800cf30 <HAL_RCC_ClockConfig+0x260>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 030f 	and.w	r3, r3, #15
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d1ed      	bne.n	800ce98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 0304 	and.w	r3, r3, #4
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d008      	beq.n	800ceda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cec8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	4917      	ldr	r1, [pc, #92]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0308 	and.w	r3, r3, #8
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d009      	beq.n	800cefa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cee6:	4b13      	ldr	r3, [pc, #76]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	490f      	ldr	r1, [pc, #60]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cefa:	f000 f825 	bl	800cf48 <HAL_RCC_GetSysClockFreq>
 800cefe:	4602      	mov	r2, r0
 800cf00:	4b0c      	ldr	r3, [pc, #48]	@ (800cf34 <HAL_RCC_ClockConfig+0x264>)
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	091b      	lsrs	r3, r3, #4
 800cf06:	f003 030f 	and.w	r3, r3, #15
 800cf0a:	490c      	ldr	r1, [pc, #48]	@ (800cf3c <HAL_RCC_ClockConfig+0x26c>)
 800cf0c:	5ccb      	ldrb	r3, [r1, r3]
 800cf0e:	f003 031f 	and.w	r3, r3, #31
 800cf12:	fa22 f303 	lsr.w	r3, r2, r3
 800cf16:	4a0a      	ldr	r2, [pc, #40]	@ (800cf40 <HAL_RCC_ClockConfig+0x270>)
 800cf18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cf1a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf44 <HAL_RCC_ClockConfig+0x274>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fd f81a 	bl	8009f58 <HAL_InitTick>
 800cf24:	4603      	mov	r3, r0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	40022000 	.word	0x40022000
 800cf34:	40021000 	.word	0x40021000
 800cf38:	04c4b400 	.word	0x04c4b400
 800cf3c:	08013e68 	.word	0x08013e68
 800cf40:	20000138 	.word	0x20000138
 800cf44:	2000013c 	.word	0x2000013c

0800cf48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cf4e:	4b2c      	ldr	r3, [pc, #176]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 030c 	and.w	r3, r3, #12
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d102      	bne.n	800cf60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cf5a:	4b2a      	ldr	r3, [pc, #168]	@ (800d004 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cf5c:	613b      	str	r3, [r7, #16]
 800cf5e:	e047      	b.n	800cff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cf60:	4b27      	ldr	r3, [pc, #156]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f003 030c 	and.w	r3, r3, #12
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d102      	bne.n	800cf72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cf6c:	4b26      	ldr	r3, [pc, #152]	@ (800d008 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cf6e:	613b      	str	r3, [r7, #16]
 800cf70:	e03e      	b.n	800cff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cf72:	4b23      	ldr	r3, [pc, #140]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 030c 	and.w	r3, r3, #12
 800cf7a:	2b0c      	cmp	r3, #12
 800cf7c:	d136      	bne.n	800cfec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cf7e:	4b20      	ldr	r3, [pc, #128]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	f003 0303 	and.w	r3, r3, #3
 800cf86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cf88:	4b1d      	ldr	r3, [pc, #116]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	091b      	lsrs	r3, r3, #4
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	3301      	adds	r3, #1
 800cf94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d10c      	bne.n	800cfb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf9c:	4a1a      	ldr	r2, [pc, #104]	@ (800d008 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa4:	4a16      	ldr	r2, [pc, #88]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cfa6:	68d2      	ldr	r2, [r2, #12]
 800cfa8:	0a12      	lsrs	r2, r2, #8
 800cfaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cfae:	fb02 f303 	mul.w	r3, r2, r3
 800cfb2:	617b      	str	r3, [r7, #20]
      break;
 800cfb4:	e00c      	b.n	800cfd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cfb6:	4a13      	ldr	r2, [pc, #76]	@ (800d004 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfbe:	4a10      	ldr	r2, [pc, #64]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cfc0:	68d2      	ldr	r2, [r2, #12]
 800cfc2:	0a12      	lsrs	r2, r2, #8
 800cfc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cfc8:	fb02 f303 	mul.w	r3, r2, r3
 800cfcc:	617b      	str	r3, [r7, #20]
      break;
 800cfce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800d000 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	0e5b      	lsrs	r3, r3, #25
 800cfd6:	f003 0303 	and.w	r3, r3, #3
 800cfda:	3301      	adds	r3, #1
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cfe0:	697a      	ldr	r2, [r7, #20]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe8:	613b      	str	r3, [r7, #16]
 800cfea:	e001      	b.n	800cff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cff0:	693b      	ldr	r3, [r7, #16]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	371c      	adds	r7, #28
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	40021000 	.word	0x40021000
 800d004:	00f42400 	.word	0x00f42400
 800d008:	016e3600 	.word	0x016e3600

0800d00c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d010:	4b03      	ldr	r3, [pc, #12]	@ (800d020 <HAL_RCC_GetHCLKFreq+0x14>)
 800d012:	681b      	ldr	r3, [r3, #0]
}
 800d014:	4618      	mov	r0, r3
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20000138 	.word	0x20000138

0800d024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d028:	f7ff fff0 	bl	800d00c <HAL_RCC_GetHCLKFreq>
 800d02c:	4602      	mov	r2, r0
 800d02e:	4b06      	ldr	r3, [pc, #24]	@ (800d048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	0a1b      	lsrs	r3, r3, #8
 800d034:	f003 0307 	and.w	r3, r3, #7
 800d038:	4904      	ldr	r1, [pc, #16]	@ (800d04c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d03a:	5ccb      	ldrb	r3, [r1, r3]
 800d03c:	f003 031f 	and.w	r3, r3, #31
 800d040:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d044:	4618      	mov	r0, r3
 800d046:	bd80      	pop	{r7, pc}
 800d048:	40021000 	.word	0x40021000
 800d04c:	08013e78 	.word	0x08013e78

0800d050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d054:	f7ff ffda 	bl	800d00c <HAL_RCC_GetHCLKFreq>
 800d058:	4602      	mov	r2, r0
 800d05a:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	0adb      	lsrs	r3, r3, #11
 800d060:	f003 0307 	and.w	r3, r3, #7
 800d064:	4904      	ldr	r1, [pc, #16]	@ (800d078 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d066:	5ccb      	ldrb	r3, [r1, r3]
 800d068:	f003 031f 	and.w	r3, r3, #31
 800d06c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d070:	4618      	mov	r0, r3
 800d072:	bd80      	pop	{r7, pc}
 800d074:	40021000 	.word	0x40021000
 800d078:	08013e78 	.word	0x08013e78

0800d07c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d082:	4b1e      	ldr	r3, [pc, #120]	@ (800d0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d08c:	4b1b      	ldr	r3, [pc, #108]	@ (800d0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	091b      	lsrs	r3, r3, #4
 800d092:	f003 030f 	and.w	r3, r3, #15
 800d096:	3301      	adds	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d10c      	bne.n	800d0ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0a0:	4a17      	ldr	r2, [pc, #92]	@ (800d100 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a8:	4a14      	ldr	r2, [pc, #80]	@ (800d0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0aa:	68d2      	ldr	r2, [r2, #12]
 800d0ac:	0a12      	lsrs	r2, r2, #8
 800d0ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d0b2:	fb02 f303 	mul.w	r3, r2, r3
 800d0b6:	617b      	str	r3, [r7, #20]
    break;
 800d0b8:	e00c      	b.n	800d0d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0ba:	4a12      	ldr	r2, [pc, #72]	@ (800d104 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c2:	4a0e      	ldr	r2, [pc, #56]	@ (800d0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0c4:	68d2      	ldr	r2, [r2, #12]
 800d0c6:	0a12      	lsrs	r2, r2, #8
 800d0c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d0cc:	fb02 f303 	mul.w	r3, r2, r3
 800d0d0:	617b      	str	r3, [r7, #20]
    break;
 800d0d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d0d4:	4b09      	ldr	r3, [pc, #36]	@ (800d0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	0e5b      	lsrs	r3, r3, #25
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	3301      	adds	r3, #1
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d0ee:	687b      	ldr	r3, [r7, #4]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	371c      	adds	r7, #28
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	40021000 	.word	0x40021000
 800d100:	016e3600 	.word	0x016e3600
 800d104:	00f42400 	.word	0x00f42400

0800d108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d110:	2300      	movs	r3, #0
 800d112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d114:	2300      	movs	r3, #0
 800d116:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 8098 	beq.w	800d256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d126:	2300      	movs	r3, #0
 800d128:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d12a:	4b43      	ldr	r3, [pc, #268]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d12e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10d      	bne.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d136:	4b40      	ldr	r3, [pc, #256]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d13a:	4a3f      	ldr	r2, [pc, #252]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d13c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d140:	6593      	str	r3, [r2, #88]	@ 0x58
 800d142:	4b3d      	ldr	r3, [pc, #244]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d14a:	60bb      	str	r3, [r7, #8]
 800d14c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d14e:	2301      	movs	r3, #1
 800d150:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d152:	4b3a      	ldr	r3, [pc, #232]	@ (800d23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a39      	ldr	r2, [pc, #228]	@ (800d23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d15c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d15e:	f7fc ff47 	bl	8009ff0 <HAL_GetTick>
 800d162:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d164:	e009      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d166:	f7fc ff43 	bl	8009ff0 <HAL_GetTick>
 800d16a:	4602      	mov	r2, r0
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	2b02      	cmp	r3, #2
 800d172:	d902      	bls.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d174:	2303      	movs	r3, #3
 800d176:	74fb      	strb	r3, [r7, #19]
        break;
 800d178:	e005      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d17a:	4b30      	ldr	r3, [pc, #192]	@ (800d23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0ef      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d186:	7cfb      	ldrb	r3, [r7, #19]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d159      	bne.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d18c:	4b2a      	ldr	r3, [pc, #168]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d196:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01e      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d019      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d1a8:	4b23      	ldr	r3, [pc, #140]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1b4:	4b20      	ldr	r3, [pc, #128]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ba:	4a1f      	ldr	r2, [pc, #124]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d1d4:	4a18      	ldr	r2, [pc, #96]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d016      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1e6:	f7fc ff03 	bl	8009ff0 <HAL_GetTick>
 800d1ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d1ec:	e00b      	b.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1ee:	f7fc feff 	bl	8009ff0 <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d902      	bls.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	74fb      	strb	r3, [r7, #19]
            break;
 800d204:	e006      	b.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d206:	4b0c      	ldr	r3, [pc, #48]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d0ec      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d214:	7cfb      	ldrb	r3, [r7, #19]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10b      	bne.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d21a:	4b07      	ldr	r3, [pc, #28]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d228:	4903      	ldr	r1, [pc, #12]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d22a:	4313      	orrs	r3, r2
 800d22c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d230:	e008      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d232:	7cfb      	ldrb	r3, [r7, #19]
 800d234:	74bb      	strb	r3, [r7, #18]
 800d236:	e005      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d238:	40021000 	.word	0x40021000
 800d23c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d240:	7cfb      	ldrb	r3, [r7, #19]
 800d242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d244:	7c7b      	ldrb	r3, [r7, #17]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d105      	bne.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d24a:	4ba7      	ldr	r3, [pc, #668]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d24e:	4aa6      	ldr	r2, [pc, #664]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00a      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d262:	4ba1      	ldr	r3, [pc, #644]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d268:	f023 0203 	bic.w	r2, r3, #3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	499d      	ldr	r1, [pc, #628]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d272:	4313      	orrs	r3, r2
 800d274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0302 	and.w	r3, r3, #2
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00a      	beq.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d284:	4b98      	ldr	r3, [pc, #608]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d28a:	f023 020c 	bic.w	r2, r3, #12
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	4995      	ldr	r1, [pc, #596]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d294:	4313      	orrs	r3, r2
 800d296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0304 	and.w	r3, r3, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00a      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d2a6:	4b90      	ldr	r3, [pc, #576]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	498c      	ldr	r1, [pc, #560]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0308 	and.w	r3, r3, #8
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d2c8:	4b87      	ldr	r3, [pc, #540]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	4984      	ldr	r1, [pc, #528]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 0310 	and.w	r3, r3, #16
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d2ea:	4b7f      	ldr	r3, [pc, #508]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	497b      	ldr	r1, [pc, #492]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00a      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d30c:	4b76      	ldr	r3, [pc, #472]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	4973      	ldr	r1, [pc, #460]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d32e:	4b6e      	ldr	r3, [pc, #440]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d334:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	496a      	ldr	r1, [pc, #424]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00a      	beq.n	800d366 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d350:	4b65      	ldr	r3, [pc, #404]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d356:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	4962      	ldr	r1, [pc, #392]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d360:	4313      	orrs	r3, r2
 800d362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00a      	beq.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d372:	4b5d      	ldr	r3, [pc, #372]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d380:	4959      	ldr	r1, [pc, #356]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d382:	4313      	orrs	r3, r2
 800d384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00a      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d394:	4b54      	ldr	r3, [pc, #336]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d39a:	f023 0203 	bic.w	r2, r3, #3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a2:	4951      	ldr	r1, [pc, #324]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00a      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d3b6:	4b4c      	ldr	r3, [pc, #304]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c4:	4948      	ldr	r1, [pc, #288]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d015      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3d8:	4b43      	ldr	r3, [pc, #268]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3e6:	4940      	ldr	r1, [pc, #256]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3f6:	d105      	bne.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d3f8:	4b3b      	ldr	r3, [pc, #236]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	4a3a      	ldr	r2, [pc, #232]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d402:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d015      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d410:	4b35      	ldr	r3, [pc, #212]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d416:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d41e:	4932      	ldr	r1, [pc, #200]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d420:	4313      	orrs	r3, r2
 800d422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d42e:	d105      	bne.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d430:	4b2d      	ldr	r3, [pc, #180]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	4a2c      	ldr	r2, [pc, #176]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d43a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d015      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d448:	4b27      	ldr	r3, [pc, #156]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d44e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d456:	4924      	ldr	r1, [pc, #144]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d466:	d105      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d468:	4b1f      	ldr	r3, [pc, #124]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	4a1e      	ldr	r2, [pc, #120]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d46e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d472:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d015      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d480:	4b19      	ldr	r3, [pc, #100]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d48e:	4916      	ldr	r1, [pc, #88]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d490:	4313      	orrs	r3, r2
 800d492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d49e:	d105      	bne.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4a0:	4b11      	ldr	r3, [pc, #68]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	4a10      	ldr	r2, [pc, #64]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d019      	beq.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4b8:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c6:	4908      	ldr	r1, [pc, #32]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4d6:	d109      	bne.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4d8:	4b03      	ldr	r3, [pc, #12]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	4a02      	ldr	r2, [pc, #8]	@ (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4e2:	60d3      	str	r3, [r2, #12]
 800d4e4:	e002      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d4e6:	bf00      	nop
 800d4e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d015      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d4f8:	4b29      	ldr	r3, [pc, #164]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d506:	4926      	ldr	r1, [pc, #152]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d516:	d105      	bne.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d518:	4b21      	ldr	r3, [pc, #132]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	4a20      	ldr	r2, [pc, #128]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d51e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d522:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d015      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d530:	4b1b      	ldr	r3, [pc, #108]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d536:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d53e:	4918      	ldr	r1, [pc, #96]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d540:	4313      	orrs	r3, r2
 800d542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d54a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d54e:	d105      	bne.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d550:	4b13      	ldr	r3, [pc, #76]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	4a12      	ldr	r2, [pc, #72]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d55a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d015      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d568:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d56a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d56e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d576:	490a      	ldr	r1, [pc, #40]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d578:	4313      	orrs	r3, r2
 800d57a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d586:	d105      	bne.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d588:	4b05      	ldr	r3, [pc, #20]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	4a04      	ldr	r2, [pc, #16]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d592:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d594:	7cbb      	ldrb	r3, [r7, #18]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	40021000 	.word	0x40021000

0800d5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e054      	b.n	800d660 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d111      	bne.n	800d5e6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 fee2 	bl	800f394 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a23      	ldr	r2, [pc, #140]	@ (800d668 <HAL_TIM_Base_Init+0xc4>)
 800d5dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f001 fa2b 	bl	800ea54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	08009819 	.word	0x08009819

0800d66c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d001      	beq.n	800d684 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e04c      	b.n	800d71e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a26      	ldr	r2, [pc, #152]	@ (800d72c <HAL_TIM_Base_Start+0xc0>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d022      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d69e:	d01d      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a22      	ldr	r2, [pc, #136]	@ (800d730 <HAL_TIM_Base_Start+0xc4>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d018      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a21      	ldr	r2, [pc, #132]	@ (800d734 <HAL_TIM_Base_Start+0xc8>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d013      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800d738 <HAL_TIM_Base_Start+0xcc>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00e      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d73c <HAL_TIM_Base_Start+0xd0>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d009      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a1c      	ldr	r2, [pc, #112]	@ (800d740 <HAL_TIM_Base_Start+0xd4>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d004      	beq.n	800d6dc <HAL_TIM_Base_Start+0x70>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a1b      	ldr	r2, [pc, #108]	@ (800d744 <HAL_TIM_Base_Start+0xd8>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d115      	bne.n	800d708 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	689a      	ldr	r2, [r3, #8]
 800d6e2:	4b19      	ldr	r3, [pc, #100]	@ (800d748 <HAL_TIM_Base_Start+0xdc>)
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b06      	cmp	r3, #6
 800d6ec:	d015      	beq.n	800d71a <HAL_TIM_Base_Start+0xae>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f4:	d011      	beq.n	800d71a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f042 0201 	orr.w	r2, r2, #1
 800d704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d706:	e008      	b.n	800d71a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f042 0201 	orr.w	r2, r2, #1
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	e000      	b.n	800d71c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d71a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	40012c00 	.word	0x40012c00
 800d730:	40000400 	.word	0x40000400
 800d734:	40000800 	.word	0x40000800
 800d738:	40000c00 	.word	0x40000c00
 800d73c:	40013400 	.word	0x40013400
 800d740:	40014000 	.word	0x40014000
 800d744:	40015000 	.word	0x40015000
 800d748:	00010007 	.word	0x00010007

0800d74c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d001      	beq.n	800d764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e054      	b.n	800d80e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2202      	movs	r2, #2
 800d768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 0201 	orr.w	r2, r2, #1
 800d77a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a26      	ldr	r2, [pc, #152]	@ (800d81c <HAL_TIM_Base_Start_IT+0xd0>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d022      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d78e:	d01d      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a22      	ldr	r2, [pc, #136]	@ (800d820 <HAL_TIM_Base_Start_IT+0xd4>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d018      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a21      	ldr	r2, [pc, #132]	@ (800d824 <HAL_TIM_Base_Start_IT+0xd8>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d013      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d828 <HAL_TIM_Base_Start_IT+0xdc>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d00e      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d82c <HAL_TIM_Base_Start_IT+0xe0>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d009      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a1c      	ldr	r2, [pc, #112]	@ (800d830 <HAL_TIM_Base_Start_IT+0xe4>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d004      	beq.n	800d7cc <HAL_TIM_Base_Start_IT+0x80>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d834 <HAL_TIM_Base_Start_IT+0xe8>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d115      	bne.n	800d7f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	689a      	ldr	r2, [r3, #8]
 800d7d2:	4b19      	ldr	r3, [pc, #100]	@ (800d838 <HAL_TIM_Base_Start_IT+0xec>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b06      	cmp	r3, #6
 800d7dc:	d015      	beq.n	800d80a <HAL_TIM_Base_Start_IT+0xbe>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7e4:	d011      	beq.n	800d80a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f042 0201 	orr.w	r2, r2, #1
 800d7f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f6:	e008      	b.n	800d80a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f042 0201 	orr.w	r2, r2, #1
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	e000      	b.n	800d80c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d80a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	40012c00 	.word	0x40012c00
 800d820:	40000400 	.word	0x40000400
 800d824:	40000800 	.word	0x40000800
 800d828:	40000c00 	.word	0x40000c00
 800d82c:	40013400 	.word	0x40013400
 800d830:	40014000 	.word	0x40014000
 800d834:	40015000 	.word	0x40015000
 800d838:	00010007 	.word	0x00010007

0800d83c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e054      	b.n	800d8f8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d111      	bne.n	800d87e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f001 fd96 	bl	800f394 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a23      	ldr	r2, [pc, #140]	@ (800d900 <HAL_TIM_PWM_Init+0xc4>)
 800d874:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2202      	movs	r2, #2
 800d882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f001 f8df 	bl	800ea54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	080097cd 	.word	0x080097cd

0800d904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d109      	bne.n	800d928 <HAL_TIM_PWM_Start+0x24>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	bf14      	ite	ne
 800d920:	2301      	movne	r3, #1
 800d922:	2300      	moveq	r3, #0
 800d924:	b2db      	uxtb	r3, r3
 800d926:	e03c      	b.n	800d9a2 <HAL_TIM_PWM_Start+0x9e>
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2b04      	cmp	r3, #4
 800d92c:	d109      	bne.n	800d942 <HAL_TIM_PWM_Start+0x3e>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b01      	cmp	r3, #1
 800d938:	bf14      	ite	ne
 800d93a:	2301      	movne	r3, #1
 800d93c:	2300      	moveq	r3, #0
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	e02f      	b.n	800d9a2 <HAL_TIM_PWM_Start+0x9e>
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b08      	cmp	r3, #8
 800d946:	d109      	bne.n	800d95c <HAL_TIM_PWM_Start+0x58>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b01      	cmp	r3, #1
 800d952:	bf14      	ite	ne
 800d954:	2301      	movne	r3, #1
 800d956:	2300      	moveq	r3, #0
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	e022      	b.n	800d9a2 <HAL_TIM_PWM_Start+0x9e>
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b0c      	cmp	r3, #12
 800d960:	d109      	bne.n	800d976 <HAL_TIM_PWM_Start+0x72>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	bf14      	ite	ne
 800d96e:	2301      	movne	r3, #1
 800d970:	2300      	moveq	r3, #0
 800d972:	b2db      	uxtb	r3, r3
 800d974:	e015      	b.n	800d9a2 <HAL_TIM_PWM_Start+0x9e>
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b10      	cmp	r3, #16
 800d97a:	d109      	bne.n	800d990 <HAL_TIM_PWM_Start+0x8c>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b01      	cmp	r3, #1
 800d986:	bf14      	ite	ne
 800d988:	2301      	movne	r3, #1
 800d98a:	2300      	moveq	r3, #0
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	e008      	b.n	800d9a2 <HAL_TIM_PWM_Start+0x9e>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b01      	cmp	r3, #1
 800d99a:	bf14      	ite	ne
 800d99c:	2301      	movne	r3, #1
 800d99e:	2300      	moveq	r3, #0
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e0a6      	b.n	800daf8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d104      	bne.n	800d9ba <HAL_TIM_PWM_Start+0xb6>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9b8:	e023      	b.n	800da02 <HAL_TIM_PWM_Start+0xfe>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d104      	bne.n	800d9ca <HAL_TIM_PWM_Start+0xc6>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9c8:	e01b      	b.n	800da02 <HAL_TIM_PWM_Start+0xfe>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d104      	bne.n	800d9da <HAL_TIM_PWM_Start+0xd6>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9d8:	e013      	b.n	800da02 <HAL_TIM_PWM_Start+0xfe>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b0c      	cmp	r3, #12
 800d9de:	d104      	bne.n	800d9ea <HAL_TIM_PWM_Start+0xe6>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d9e8:	e00b      	b.n	800da02 <HAL_TIM_PWM_Start+0xfe>
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b10      	cmp	r3, #16
 800d9ee:	d104      	bne.n	800d9fa <HAL_TIM_PWM_Start+0xf6>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2202      	movs	r2, #2
 800d9f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d9f8:	e003      	b.n	800da02 <HAL_TIM_PWM_Start+0xfe>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2201      	movs	r2, #1
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f001 fc9c 	bl	800f348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a3a      	ldr	r2, [pc, #232]	@ (800db00 <HAL_TIM_PWM_Start+0x1fc>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d018      	beq.n	800da4c <HAL_TIM_PWM_Start+0x148>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a39      	ldr	r2, [pc, #228]	@ (800db04 <HAL_TIM_PWM_Start+0x200>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d013      	beq.n	800da4c <HAL_TIM_PWM_Start+0x148>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a37      	ldr	r2, [pc, #220]	@ (800db08 <HAL_TIM_PWM_Start+0x204>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00e      	beq.n	800da4c <HAL_TIM_PWM_Start+0x148>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a36      	ldr	r2, [pc, #216]	@ (800db0c <HAL_TIM_PWM_Start+0x208>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d009      	beq.n	800da4c <HAL_TIM_PWM_Start+0x148>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a34      	ldr	r2, [pc, #208]	@ (800db10 <HAL_TIM_PWM_Start+0x20c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d004      	beq.n	800da4c <HAL_TIM_PWM_Start+0x148>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a33      	ldr	r2, [pc, #204]	@ (800db14 <HAL_TIM_PWM_Start+0x210>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d101      	bne.n	800da50 <HAL_TIM_PWM_Start+0x14c>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e000      	b.n	800da52 <HAL_TIM_PWM_Start+0x14e>
 800da50:	2300      	movs	r3, #0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d007      	beq.n	800da66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a25      	ldr	r2, [pc, #148]	@ (800db00 <HAL_TIM_PWM_Start+0x1fc>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d022      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da78:	d01d      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a26      	ldr	r2, [pc, #152]	@ (800db18 <HAL_TIM_PWM_Start+0x214>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d018      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a24      	ldr	r2, [pc, #144]	@ (800db1c <HAL_TIM_PWM_Start+0x218>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d013      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a23      	ldr	r2, [pc, #140]	@ (800db20 <HAL_TIM_PWM_Start+0x21c>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d00e      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a19      	ldr	r2, [pc, #100]	@ (800db04 <HAL_TIM_PWM_Start+0x200>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d009      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a18      	ldr	r2, [pc, #96]	@ (800db08 <HAL_TIM_PWM_Start+0x204>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d004      	beq.n	800dab6 <HAL_TIM_PWM_Start+0x1b2>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a18      	ldr	r2, [pc, #96]	@ (800db14 <HAL_TIM_PWM_Start+0x210>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d115      	bne.n	800dae2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	689a      	ldr	r2, [r3, #8]
 800dabc:	4b19      	ldr	r3, [pc, #100]	@ (800db24 <HAL_TIM_PWM_Start+0x220>)
 800dabe:	4013      	ands	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b06      	cmp	r3, #6
 800dac6:	d015      	beq.n	800daf4 <HAL_TIM_PWM_Start+0x1f0>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dace:	d011      	beq.n	800daf4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f042 0201 	orr.w	r2, r2, #1
 800dade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dae0:	e008      	b.n	800daf4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f042 0201 	orr.w	r2, r2, #1
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	e000      	b.n	800daf6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	40012c00 	.word	0x40012c00
 800db04:	40013400 	.word	0x40013400
 800db08:	40014000 	.word	0x40014000
 800db0c:	40014400 	.word	0x40014400
 800db10:	40014800 	.word	0x40014800
 800db14:	40015000 	.word	0x40015000
 800db18:	40000400 	.word	0x40000400
 800db1c:	40000800 	.word	0x40000800
 800db20:	40000c00 	.word	0x40000c00
 800db24:	00010007 	.word	0x00010007

0800db28 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e04c      	b.n	800dbd6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	d111      	bne.n	800db6c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 fc1f 	bl	800f394 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d102      	bne.n	800db64 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a1f      	ldr	r2, [pc, #124]	@ (800dbe0 <HAL_TIM_OnePulse_Init+0xb8>)
 800db62:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2202      	movs	r2, #2
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3304      	adds	r3, #4
 800db7c:	4619      	mov	r1, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	f000 ff68 	bl	800ea54 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f022 0208 	bic.w	r2, r2, #8
 800db92:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	6819      	ldr	r1, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	430a      	orrs	r2, r1
 800dba2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	0800dbe5 	.word	0x0800dbe5

0800dbe4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc20:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d108      	bne.n	800dc3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d105      	bne.n	800dc3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc2e:	7b7b      	ldrb	r3, [r7, #13]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d102      	bne.n	800dc3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc34:	7b3b      	ldrb	r3, [r7, #12]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d001      	beq.n	800dc3e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e059      	b.n	800dcf2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2202      	movs	r2, #2
 800dc42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2202      	movs	r2, #2
 800dc4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2202      	movs	r2, #2
 800dc52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68da      	ldr	r2, [r3, #12]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f042 0202 	orr.w	r2, r2, #2
 800dc6c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68da      	ldr	r2, [r3, #12]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f042 0204 	orr.w	r2, r2, #4
 800dc7c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2201      	movs	r2, #1
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 fb5e 	bl	800f348 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2201      	movs	r2, #1
 800dc92:	2104      	movs	r1, #4
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 fb57 	bl	800f348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a17      	ldr	r2, [pc, #92]	@ (800dcfc <HAL_TIM_OnePulse_Start_IT+0x104>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d018      	beq.n	800dcd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a15      	ldr	r2, [pc, #84]	@ (800dd00 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d013      	beq.n	800dcd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a14      	ldr	r2, [pc, #80]	@ (800dd04 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d00e      	beq.n	800dcd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a12      	ldr	r2, [pc, #72]	@ (800dd08 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d009      	beq.n	800dcd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a11      	ldr	r2, [pc, #68]	@ (800dd0c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d004      	beq.n	800dcd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a0f      	ldr	r2, [pc, #60]	@ (800dd10 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d101      	bne.n	800dcda <HAL_TIM_OnePulse_Start_IT+0xe2>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e000      	b.n	800dcdc <HAL_TIM_OnePulse_Start_IT+0xe4>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d007      	beq.n	800dcf0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dcee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	40012c00 	.word	0x40012c00
 800dd00:	40013400 	.word	0x40013400
 800dd04:	40014000 	.word	0x40014000
 800dd08:	40014400 	.word	0x40014400
 800dd0c:	40014800 	.word	0x40014800
 800dd10:	40015000 	.word	0x40015000

0800dd14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e0a2      	b.n	800de6e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d111      	bne.n	800dd58 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 fb29 	bl	800f394 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d102      	bne.n	800dd50 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a4a      	ldr	r2, [pc, #296]	@ (800de78 <HAL_TIM_Encoder_Init+0x164>)
 800dd4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800dd6e:	f023 0307 	bic.w	r3, r3, #7
 800dd72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f000 fe68 	bl	800ea54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6a1b      	ldr	r3, [r3, #32]
 800dd9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	697a      	ldr	r2, [r7, #20]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ddac:	f023 0303 	bic.w	r3, r3, #3
 800ddb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	689a      	ldr	r2, [r3, #8]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ddca:	f023 030c 	bic.w	r3, r3, #12
 800ddce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ddd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ddda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	68da      	ldr	r2, [r3, #12]
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	69db      	ldr	r3, [r3, #28]
 800dde4:	021b      	lsls	r3, r3, #8
 800dde6:	4313      	orrs	r3, r2
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	011a      	lsls	r2, r3, #4
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	031b      	lsls	r3, r3, #12
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800de08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800de10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	685a      	ldr	r2, [r3, #4]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	695b      	ldr	r3, [r3, #20]
 800de1a:	011b      	lsls	r3, r3, #4
 800de1c:	4313      	orrs	r3, r2
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	4313      	orrs	r3, r2
 800de22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	080098c1 	.word	0x080098c1

0800de7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dea4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d110      	bne.n	800dece <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d102      	bne.n	800deb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800deb2:	7b7b      	ldrb	r3, [r7, #13]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d001      	beq.n	800debc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	e069      	b.n	800df90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800decc:	e031      	b.n	800df32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2b04      	cmp	r3, #4
 800ded2:	d110      	bne.n	800def6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d102      	bne.n	800dee0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800deda:	7b3b      	ldrb	r3, [r7, #12]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d001      	beq.n	800dee4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e055      	b.n	800df90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2202      	movs	r2, #2
 800dee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800def4:	e01d      	b.n	800df32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d108      	bne.n	800df0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d105      	bne.n	800df0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800df02:	7b7b      	ldrb	r3, [r7, #13]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d102      	bne.n	800df0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800df08:	7b3b      	ldrb	r3, [r7, #12]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d001      	beq.n	800df12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	e03e      	b.n	800df90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2202      	movs	r2, #2
 800df16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2202      	movs	r2, #2
 800df1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2202      	movs	r2, #2
 800df26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2202      	movs	r2, #2
 800df2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d003      	beq.n	800df40 <HAL_TIM_Encoder_Start+0xc4>
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d008      	beq.n	800df50 <HAL_TIM_Encoder_Start+0xd4>
 800df3e:	e00f      	b.n	800df60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2201      	movs	r2, #1
 800df46:	2100      	movs	r1, #0
 800df48:	4618      	mov	r0, r3
 800df4a:	f001 f9fd 	bl	800f348 <TIM_CCxChannelCmd>
      break;
 800df4e:	e016      	b.n	800df7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2201      	movs	r2, #1
 800df56:	2104      	movs	r1, #4
 800df58:	4618      	mov	r0, r3
 800df5a:	f001 f9f5 	bl	800f348 <TIM_CCxChannelCmd>
      break;
 800df5e:	e00e      	b.n	800df7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2201      	movs	r2, #1
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 f9ed 	bl	800f348 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2201      	movs	r2, #1
 800df74:	2104      	movs	r1, #4
 800df76:	4618      	mov	r0, r3
 800df78:	f001 f9e6 	bl	800f348 <TIM_CCxChannelCmd>
      break;
 800df7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f042 0201 	orr.w	r2, r2, #1
 800df8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	f003 0302 	and.w	r3, r3, #2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d026      	beq.n	800e008 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d021      	beq.n	800e008 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f06f 0202 	mvn.w	r2, #2
 800dfcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	f003 0303 	and.w	r3, r3, #3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d005      	beq.n	800dfee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	4798      	blx	r3
 800dfec:	e009      	b.n	800e002 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	f003 0304 	and.w	r3, r3, #4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d026      	beq.n	800e060 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d021      	beq.n	800e060 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f06f 0204 	mvn.w	r2, #4
 800e024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2202      	movs	r2, #2
 800e02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e036:	2b00      	cmp	r3, #0
 800e038:	d005      	beq.n	800e046 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	4798      	blx	r3
 800e044:	e009      	b.n	800e05a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	f003 0308 	and.w	r3, r3, #8
 800e066:	2b00      	cmp	r3, #0
 800e068:	d026      	beq.n	800e0b8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f003 0308 	and.w	r3, r3, #8
 800e070:	2b00      	cmp	r3, #0
 800e072:	d021      	beq.n	800e0b8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f06f 0208 	mvn.w	r2, #8
 800e07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2204      	movs	r2, #4
 800e082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d005      	beq.n	800e09e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	4798      	blx	r3
 800e09c:	e009      	b.n	800e0b2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f003 0310 	and.w	r3, r3, #16
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d026      	beq.n	800e110 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f003 0310 	and.w	r3, r3, #16
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d021      	beq.n	800e110 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f06f 0210 	mvn.w	r2, #16
 800e0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2208      	movs	r2, #8
 800e0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d005      	beq.n	800e0f6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	4798      	blx	r3
 800e0f4:	e009      	b.n	800e10a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	f003 0301 	and.w	r3, r3, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	d009      	beq.n	800e138 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f06f 0201 	mvn.w	r2, #1
 800e12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d104      	bne.n	800e14c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00e      	beq.n	800e16a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e152:	2b00      	cmp	r3, #0
 800e154:	d009      	beq.n	800e16a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00e      	beq.n	800e192 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d009      	beq.n	800e192 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00e      	beq.n	800e1ba <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	f003 0320 	and.w	r3, r3, #32
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00e      	beq.n	800e1e2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d009      	beq.n	800e1e2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f06f 0220 	mvn.w	r2, #32
 800e1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00e      	beq.n	800e20a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d009      	beq.n	800e20a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00e      	beq.n	800e232 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d009      	beq.n	800e232 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00e      	beq.n	800e25a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d009      	beq.n	800e25a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00e      	beq.n	800e282 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d009      	beq.n	800e282 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d101      	bne.n	800e2aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	e0ff      	b.n	800e4aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b14      	cmp	r3, #20
 800e2b6:	f200 80f0 	bhi.w	800e49a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e2c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c0:	0800e315 	.word	0x0800e315
 800e2c4:	0800e49b 	.word	0x0800e49b
 800e2c8:	0800e49b 	.word	0x0800e49b
 800e2cc:	0800e49b 	.word	0x0800e49b
 800e2d0:	0800e355 	.word	0x0800e355
 800e2d4:	0800e49b 	.word	0x0800e49b
 800e2d8:	0800e49b 	.word	0x0800e49b
 800e2dc:	0800e49b 	.word	0x0800e49b
 800e2e0:	0800e397 	.word	0x0800e397
 800e2e4:	0800e49b 	.word	0x0800e49b
 800e2e8:	0800e49b 	.word	0x0800e49b
 800e2ec:	0800e49b 	.word	0x0800e49b
 800e2f0:	0800e3d7 	.word	0x0800e3d7
 800e2f4:	0800e49b 	.word	0x0800e49b
 800e2f8:	0800e49b 	.word	0x0800e49b
 800e2fc:	0800e49b 	.word	0x0800e49b
 800e300:	0800e419 	.word	0x0800e419
 800e304:	0800e49b 	.word	0x0800e49b
 800e308:	0800e49b 	.word	0x0800e49b
 800e30c:	0800e49b 	.word	0x0800e49b
 800e310:	0800e459 	.word	0x0800e459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 fc4e 	bl	800ebbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	699a      	ldr	r2, [r3, #24]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f042 0208 	orr.w	r2, r2, #8
 800e32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	699a      	ldr	r2, [r3, #24]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 0204 	bic.w	r2, r2, #4
 800e33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6999      	ldr	r1, [r3, #24]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	430a      	orrs	r2, r1
 800e350:	619a      	str	r2, [r3, #24]
      break;
 800e352:	e0a5      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f000 fcc8 	bl	800ecf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	699a      	ldr	r2, [r3, #24]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	699a      	ldr	r2, [r3, #24]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6999      	ldr	r1, [r3, #24]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	021a      	lsls	r2, r3, #8
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	619a      	str	r2, [r3, #24]
      break;
 800e394:	e084      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 fd3b 	bl	800ee18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69da      	ldr	r2, [r3, #28]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f042 0208 	orr.w	r2, r2, #8
 800e3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	69da      	ldr	r2, [r3, #28]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f022 0204 	bic.w	r2, r2, #4
 800e3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	69d9      	ldr	r1, [r3, #28]
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	691a      	ldr	r2, [r3, #16]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	430a      	orrs	r2, r1
 800e3d2:	61da      	str	r2, [r3, #28]
      break;
 800e3d4:	e064      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68b9      	ldr	r1, [r7, #8]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 fdad 	bl	800ef3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69da      	ldr	r2, [r3, #28]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	69da      	ldr	r2, [r3, #28]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	69d9      	ldr	r1, [r3, #28]
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	021a      	lsls	r2, r3, #8
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	61da      	str	r2, [r3, #28]
      break;
 800e416:	e043      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68b9      	ldr	r1, [r7, #8]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fe20 	bl	800f064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0208 	orr.w	r2, r2, #8
 800e432:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f022 0204 	bic.w	r2, r2, #4
 800e442:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	691a      	ldr	r2, [r3, #16]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	430a      	orrs	r2, r1
 800e454:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e456:	e023      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68b9      	ldr	r1, [r7, #8]
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 fe6a 	bl	800f138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e472:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e482:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	021a      	lsls	r2, r3, #8
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	430a      	orrs	r2, r1
 800e496:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e498:	e002      	b.n	800e4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	75fb      	strb	r3, [r7, #23]
      break;
 800e49e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop

0800e4b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d101      	bne.n	800e4d0 <HAL_TIM_ConfigClockSource+0x1c>
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	e0f6      	b.n	800e6be <HAL_TIM_ConfigClockSource+0x20a>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2202      	movs	r2, #2
 800e4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e4ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68ba      	ldr	r2, [r7, #8]
 800e502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a6f      	ldr	r2, [pc, #444]	@ (800e6c8 <HAL_TIM_ConfigClockSource+0x214>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	f000 80c1 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e510:	4a6d      	ldr	r2, [pc, #436]	@ (800e6c8 <HAL_TIM_ConfigClockSource+0x214>)
 800e512:	4293      	cmp	r3, r2
 800e514:	f200 80c6 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e518:	4a6c      	ldr	r2, [pc, #432]	@ (800e6cc <HAL_TIM_ConfigClockSource+0x218>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	f000 80b9 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e520:	4a6a      	ldr	r2, [pc, #424]	@ (800e6cc <HAL_TIM_ConfigClockSource+0x218>)
 800e522:	4293      	cmp	r3, r2
 800e524:	f200 80be 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e528:	4a69      	ldr	r2, [pc, #420]	@ (800e6d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	f000 80b1 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e530:	4a67      	ldr	r2, [pc, #412]	@ (800e6d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800e532:	4293      	cmp	r3, r2
 800e534:	f200 80b6 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e538:	4a66      	ldr	r2, [pc, #408]	@ (800e6d4 <HAL_TIM_ConfigClockSource+0x220>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	f000 80a9 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e540:	4a64      	ldr	r2, [pc, #400]	@ (800e6d4 <HAL_TIM_ConfigClockSource+0x220>)
 800e542:	4293      	cmp	r3, r2
 800e544:	f200 80ae 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e548:	4a63      	ldr	r2, [pc, #396]	@ (800e6d8 <HAL_TIM_ConfigClockSource+0x224>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	f000 80a1 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e550:	4a61      	ldr	r2, [pc, #388]	@ (800e6d8 <HAL_TIM_ConfigClockSource+0x224>)
 800e552:	4293      	cmp	r3, r2
 800e554:	f200 80a6 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e558:	4a60      	ldr	r2, [pc, #384]	@ (800e6dc <HAL_TIM_ConfigClockSource+0x228>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	f000 8099 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e560:	4a5e      	ldr	r2, [pc, #376]	@ (800e6dc <HAL_TIM_ConfigClockSource+0x228>)
 800e562:	4293      	cmp	r3, r2
 800e564:	f200 809e 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e568:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e56c:	f000 8091 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e570:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e574:	f200 8096 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e57c:	f000 8089 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e584:	f200 808e 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e58c:	d03e      	beq.n	800e60c <HAL_TIM_ConfigClockSource+0x158>
 800e58e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e592:	f200 8087 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e59a:	f000 8086 	beq.w	800e6aa <HAL_TIM_ConfigClockSource+0x1f6>
 800e59e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5a2:	d87f      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5a4:	2b70      	cmp	r3, #112	@ 0x70
 800e5a6:	d01a      	beq.n	800e5de <HAL_TIM_ConfigClockSource+0x12a>
 800e5a8:	2b70      	cmp	r3, #112	@ 0x70
 800e5aa:	d87b      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5ac:	2b60      	cmp	r3, #96	@ 0x60
 800e5ae:	d050      	beq.n	800e652 <HAL_TIM_ConfigClockSource+0x19e>
 800e5b0:	2b60      	cmp	r3, #96	@ 0x60
 800e5b2:	d877      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5b4:	2b50      	cmp	r3, #80	@ 0x50
 800e5b6:	d03c      	beq.n	800e632 <HAL_TIM_ConfigClockSource+0x17e>
 800e5b8:	2b50      	cmp	r3, #80	@ 0x50
 800e5ba:	d873      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5bc:	2b40      	cmp	r3, #64	@ 0x40
 800e5be:	d058      	beq.n	800e672 <HAL_TIM_ConfigClockSource+0x1be>
 800e5c0:	2b40      	cmp	r3, #64	@ 0x40
 800e5c2:	d86f      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5c4:	2b30      	cmp	r3, #48	@ 0x30
 800e5c6:	d064      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e5c8:	2b30      	cmp	r3, #48	@ 0x30
 800e5ca:	d86b      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5cc:	2b20      	cmp	r3, #32
 800e5ce:	d060      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e5d0:	2b20      	cmp	r3, #32
 800e5d2:	d867      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d05c      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e5d8:	2b10      	cmp	r3, #16
 800e5da:	d05a      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1de>
 800e5dc:	e062      	b.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5ee:	f000 fe8b 	bl	800f308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	609a      	str	r2, [r3, #8]
      break;
 800e60a:	e04f      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e61c:	f000 fe74 	bl	800f308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689a      	ldr	r2, [r3, #8]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e62e:	609a      	str	r2, [r3, #8]
      break;
 800e630:	e03c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e63e:	461a      	mov	r2, r3
 800e640:	f000 fde6 	bl	800f210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2150      	movs	r1, #80	@ 0x50
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 fe3f 	bl	800f2ce <TIM_ITRx_SetConfig>
      break;
 800e650:	e02c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e65e:	461a      	mov	r2, r3
 800e660:	f000 fe05 	bl	800f26e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2160      	movs	r1, #96	@ 0x60
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fe2f 	bl	800f2ce <TIM_ITRx_SetConfig>
      break;
 800e670:	e01c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e67e:	461a      	mov	r2, r3
 800e680:	f000 fdc6 	bl	800f210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2140      	movs	r1, #64	@ 0x40
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 fe1f 	bl	800f2ce <TIM_ITRx_SetConfig>
      break;
 800e690:	e00c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	4610      	mov	r0, r2
 800e69e:	f000 fe16 	bl	800f2ce <TIM_ITRx_SetConfig>
      break;
 800e6a2:	e003      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a8:	e000      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e6aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	00100070 	.word	0x00100070
 800e6cc:	00100060 	.word	0x00100060
 800e6d0:	00100050 	.word	0x00100050
 800e6d4:	00100040 	.word	0x00100040
 800e6d8:	00100030 	.word	0x00100030
 800e6dc:	00100020 	.word	0x00100020

0800e6e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800e6e8:	bf00      	nop
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800e794:	b480      	push	{r7}
 800e796:	b087      	sub	sp, #28
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	460b      	mov	r3, r1
 800e79e:	607a      	str	r2, [r7, #4]
 800e7a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e14a      	b.n	800ea46 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	f040 80dd 	bne.w	800e978 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800e7be:	7afb      	ldrb	r3, [r7, #11]
 800e7c0:	2b1f      	cmp	r3, #31
 800e7c2:	f200 80d6 	bhi.w	800e972 <HAL_TIM_RegisterCallback+0x1de>
 800e7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <HAL_TIM_RegisterCallback+0x38>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e84d 	.word	0x0800e84d
 800e7d0:	0800e855 	.word	0x0800e855
 800e7d4:	0800e85d 	.word	0x0800e85d
 800e7d8:	0800e865 	.word	0x0800e865
 800e7dc:	0800e86d 	.word	0x0800e86d
 800e7e0:	0800e875 	.word	0x0800e875
 800e7e4:	0800e87d 	.word	0x0800e87d
 800e7e8:	0800e885 	.word	0x0800e885
 800e7ec:	0800e88d 	.word	0x0800e88d
 800e7f0:	0800e895 	.word	0x0800e895
 800e7f4:	0800e89d 	.word	0x0800e89d
 800e7f8:	0800e8a5 	.word	0x0800e8a5
 800e7fc:	0800e8ad 	.word	0x0800e8ad
 800e800:	0800e8b5 	.word	0x0800e8b5
 800e804:	0800e8bf 	.word	0x0800e8bf
 800e808:	0800e8c9 	.word	0x0800e8c9
 800e80c:	0800e8d3 	.word	0x0800e8d3
 800e810:	0800e8dd 	.word	0x0800e8dd
 800e814:	0800e8e7 	.word	0x0800e8e7
 800e818:	0800e8f1 	.word	0x0800e8f1
 800e81c:	0800e8fb 	.word	0x0800e8fb
 800e820:	0800e905 	.word	0x0800e905
 800e824:	0800e90f 	.word	0x0800e90f
 800e828:	0800e919 	.word	0x0800e919
 800e82c:	0800e923 	.word	0x0800e923
 800e830:	0800e92d 	.word	0x0800e92d
 800e834:	0800e937 	.word	0x0800e937
 800e838:	0800e941 	.word	0x0800e941
 800e83c:	0800e94b 	.word	0x0800e94b
 800e840:	0800e955 	.word	0x0800e955
 800e844:	0800e95f 	.word	0x0800e95f
 800e848:	0800e969 	.word	0x0800e969
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e852:	e0f7      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e85a:	e0f3      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e862:	e0ef      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e86a:	e0eb      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e872:	e0e7      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e87a:	e0e3      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e882:	e0df      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e88a:	e0db      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e892:	e0d7      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e89a:	e0d3      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e8a2:	e0cf      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e8aa:	e0cb      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e8b2:	e0c7      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e8bc:	e0c2      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e8c6:	e0bd      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800e8d0:	e0b8      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800e8da:	e0b3      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800e8e4:	e0ae      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e8ee:	e0a9      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e8f8:	e0a4      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e902:	e09f      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e90c:	e09a      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e916:	e095      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e920:	e090      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e92a:	e08b      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e934:	e086      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e93e:	e081      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e948:	e07c      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e952:	e077      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800e95c:	e072      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e966:	e06d      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e970:	e068      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	75fb      	strb	r3, [r7, #23]
        break;
 800e976:	e065      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d15d      	bne.n	800ea40 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800e984:	7afb      	ldrb	r3, [r7, #11]
 800e986:	2b0d      	cmp	r3, #13
 800e988:	d857      	bhi.n	800ea3a <HAL_TIM_RegisterCallback+0x2a6>
 800e98a:	a201      	add	r2, pc, #4	@ (adr r2, 800e990 <HAL_TIM_RegisterCallback+0x1fc>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9c9 	.word	0x0800e9c9
 800e994:	0800e9d1 	.word	0x0800e9d1
 800e998:	0800e9d9 	.word	0x0800e9d9
 800e99c:	0800e9e1 	.word	0x0800e9e1
 800e9a0:	0800e9e9 	.word	0x0800e9e9
 800e9a4:	0800e9f1 	.word	0x0800e9f1
 800e9a8:	0800e9f9 	.word	0x0800e9f9
 800e9ac:	0800ea01 	.word	0x0800ea01
 800e9b0:	0800ea09 	.word	0x0800ea09
 800e9b4:	0800ea11 	.word	0x0800ea11
 800e9b8:	0800ea19 	.word	0x0800ea19
 800e9bc:	0800ea21 	.word	0x0800ea21
 800e9c0:	0800ea29 	.word	0x0800ea29
 800e9c4:	0800ea31 	.word	0x0800ea31
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e9ce:	e039      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e9d6:	e035      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e9de:	e031      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e9e6:	e02d      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e9ee:	e029      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e9f6:	e025      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e9fe:	e021      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ea06:	e01d      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ea0e:	e019      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ea16:	e015      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ea1e:	e011      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ea26:	e00d      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ea2e:	e009      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ea38:	e004      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	75fb      	strb	r3, [r7, #23]
        break;
 800ea3e:	e001      	b.n	800ea44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ea40:	2301      	movs	r3, #1
 800ea42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	371c      	adds	r7, #28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop

0800ea54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a4c      	ldr	r2, [pc, #304]	@ (800eb98 <TIM_Base_SetConfig+0x144>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d017      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea72:	d013      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a49      	ldr	r2, [pc, #292]	@ (800eb9c <TIM_Base_SetConfig+0x148>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d00f      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a48      	ldr	r2, [pc, #288]	@ (800eba0 <TIM_Base_SetConfig+0x14c>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d00b      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a47      	ldr	r2, [pc, #284]	@ (800eba4 <TIM_Base_SetConfig+0x150>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d007      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a46      	ldr	r2, [pc, #280]	@ (800eba8 <TIM_Base_SetConfig+0x154>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d003      	beq.n	800ea9c <TIM_Base_SetConfig+0x48>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4a45      	ldr	r2, [pc, #276]	@ (800ebac <TIM_Base_SetConfig+0x158>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d108      	bne.n	800eaae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eaa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a39      	ldr	r2, [pc, #228]	@ (800eb98 <TIM_Base_SetConfig+0x144>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d023      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eabc:	d01f      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a36      	ldr	r2, [pc, #216]	@ (800eb9c <TIM_Base_SetConfig+0x148>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d01b      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a35      	ldr	r2, [pc, #212]	@ (800eba0 <TIM_Base_SetConfig+0x14c>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d017      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a34      	ldr	r2, [pc, #208]	@ (800eba4 <TIM_Base_SetConfig+0x150>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d013      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a33      	ldr	r2, [pc, #204]	@ (800eba8 <TIM_Base_SetConfig+0x154>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d00f      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a33      	ldr	r2, [pc, #204]	@ (800ebb0 <TIM_Base_SetConfig+0x15c>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d00b      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a32      	ldr	r2, [pc, #200]	@ (800ebb4 <TIM_Base_SetConfig+0x160>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d007      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a31      	ldr	r2, [pc, #196]	@ (800ebb8 <TIM_Base_SetConfig+0x164>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d003      	beq.n	800eafe <TIM_Base_SetConfig+0xaa>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a2c      	ldr	r2, [pc, #176]	@ (800ebac <TIM_Base_SetConfig+0x158>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d108      	bne.n	800eb10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a18      	ldr	r2, [pc, #96]	@ (800eb98 <TIM_Base_SetConfig+0x144>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d013      	beq.n	800eb64 <TIM_Base_SetConfig+0x110>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a1a      	ldr	r2, [pc, #104]	@ (800eba8 <TIM_Base_SetConfig+0x154>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d00f      	beq.n	800eb64 <TIM_Base_SetConfig+0x110>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a1a      	ldr	r2, [pc, #104]	@ (800ebb0 <TIM_Base_SetConfig+0x15c>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d00b      	beq.n	800eb64 <TIM_Base_SetConfig+0x110>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a19      	ldr	r2, [pc, #100]	@ (800ebb4 <TIM_Base_SetConfig+0x160>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d007      	beq.n	800eb64 <TIM_Base_SetConfig+0x110>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a18      	ldr	r2, [pc, #96]	@ (800ebb8 <TIM_Base_SetConfig+0x164>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_Base_SetConfig+0x110>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a13      	ldr	r2, [pc, #76]	@ (800ebac <TIM_Base_SetConfig+0x158>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d103      	bne.n	800eb6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	691a      	ldr	r2, [r3, #16]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d105      	bne.n	800eb8a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	f023 0201 	bic.w	r2, r3, #1
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	611a      	str	r2, [r3, #16]
  }
}
 800eb8a:	bf00      	nop
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	40012c00 	.word	0x40012c00
 800eb9c:	40000400 	.word	0x40000400
 800eba0:	40000800 	.word	0x40000800
 800eba4:	40000c00 	.word	0x40000c00
 800eba8:	40013400 	.word	0x40013400
 800ebac:	40015000 	.word	0x40015000
 800ebb0:	40014000 	.word	0x40014000
 800ebb4:	40014400 	.word	0x40014400
 800ebb8:	40014800 	.word	0x40014800

0800ebbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b087      	sub	sp, #28
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a1b      	ldr	r3, [r3, #32]
 800ebd0:	f023 0201 	bic.w	r2, r3, #1
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ebea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f023 0303 	bic.w	r3, r3, #3
 800ebf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f023 0302 	bic.w	r3, r3, #2
 800ec08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4a30      	ldr	r2, [pc, #192]	@ (800ecd8 <TIM_OC1_SetConfig+0x11c>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d013      	beq.n	800ec44 <TIM_OC1_SetConfig+0x88>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a2f      	ldr	r2, [pc, #188]	@ (800ecdc <TIM_OC1_SetConfig+0x120>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d00f      	beq.n	800ec44 <TIM_OC1_SetConfig+0x88>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a2e      	ldr	r2, [pc, #184]	@ (800ece0 <TIM_OC1_SetConfig+0x124>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d00b      	beq.n	800ec44 <TIM_OC1_SetConfig+0x88>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a2d      	ldr	r2, [pc, #180]	@ (800ece4 <TIM_OC1_SetConfig+0x128>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d007      	beq.n	800ec44 <TIM_OC1_SetConfig+0x88>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a2c      	ldr	r2, [pc, #176]	@ (800ece8 <TIM_OC1_SetConfig+0x12c>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d003      	beq.n	800ec44 <TIM_OC1_SetConfig+0x88>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a2b      	ldr	r2, [pc, #172]	@ (800ecec <TIM_OC1_SetConfig+0x130>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d10c      	bne.n	800ec5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	f023 0308 	bic.w	r3, r3, #8
 800ec4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	697a      	ldr	r2, [r7, #20]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f023 0304 	bic.w	r3, r3, #4
 800ec5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd8 <TIM_OC1_SetConfig+0x11c>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d013      	beq.n	800ec8e <TIM_OC1_SetConfig+0xd2>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a1c      	ldr	r2, [pc, #112]	@ (800ecdc <TIM_OC1_SetConfig+0x120>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d00f      	beq.n	800ec8e <TIM_OC1_SetConfig+0xd2>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4a1b      	ldr	r2, [pc, #108]	@ (800ece0 <TIM_OC1_SetConfig+0x124>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d00b      	beq.n	800ec8e <TIM_OC1_SetConfig+0xd2>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4a1a      	ldr	r2, [pc, #104]	@ (800ece4 <TIM_OC1_SetConfig+0x128>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d007      	beq.n	800ec8e <TIM_OC1_SetConfig+0xd2>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a19      	ldr	r2, [pc, #100]	@ (800ece8 <TIM_OC1_SetConfig+0x12c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d003      	beq.n	800ec8e <TIM_OC1_SetConfig+0xd2>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a18      	ldr	r2, [pc, #96]	@ (800ecec <TIM_OC1_SetConfig+0x130>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d111      	bne.n	800ecb2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	699b      	ldr	r3, [r3, #24]
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	621a      	str	r2, [r3, #32]
}
 800eccc:	bf00      	nop
 800ecce:	371c      	adds	r7, #28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	40012c00 	.word	0x40012c00
 800ecdc:	40013400 	.word	0x40013400
 800ece0:	40014000 	.word	0x40014000
 800ece4:	40014400 	.word	0x40014400
 800ece8:	40014800 	.word	0x40014800
 800ecec:	40015000 	.word	0x40015000

0800ecf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6a1b      	ldr	r3, [r3, #32]
 800ed04:	f023 0210 	bic.w	r2, r3, #16
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f023 0320 	bic.w	r3, r3, #32
 800ed3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a2c      	ldr	r2, [pc, #176]	@ (800ee00 <TIM_OC2_SetConfig+0x110>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d007      	beq.n	800ed64 <TIM_OC2_SetConfig+0x74>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a2b      	ldr	r2, [pc, #172]	@ (800ee04 <TIM_OC2_SetConfig+0x114>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d003      	beq.n	800ed64 <TIM_OC2_SetConfig+0x74>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ee08 <TIM_OC2_SetConfig+0x118>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d10d      	bne.n	800ed80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	011b      	lsls	r3, r3, #4
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a1f      	ldr	r2, [pc, #124]	@ (800ee00 <TIM_OC2_SetConfig+0x110>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d013      	beq.n	800edb0 <TIM_OC2_SetConfig+0xc0>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a1e      	ldr	r2, [pc, #120]	@ (800ee04 <TIM_OC2_SetConfig+0x114>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d00f      	beq.n	800edb0 <TIM_OC2_SetConfig+0xc0>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a1e      	ldr	r2, [pc, #120]	@ (800ee0c <TIM_OC2_SetConfig+0x11c>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d00b      	beq.n	800edb0 <TIM_OC2_SetConfig+0xc0>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ee10 <TIM_OC2_SetConfig+0x120>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d007      	beq.n	800edb0 <TIM_OC2_SetConfig+0xc0>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a1c      	ldr	r2, [pc, #112]	@ (800ee14 <TIM_OC2_SetConfig+0x124>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d003      	beq.n	800edb0 <TIM_OC2_SetConfig+0xc0>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a17      	ldr	r2, [pc, #92]	@ (800ee08 <TIM_OC2_SetConfig+0x118>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d113      	bne.n	800edd8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800edb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800edbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	695b      	ldr	r3, [r3, #20]
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	4313      	orrs	r3, r2
 800edca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	621a      	str	r2, [r3, #32]
}
 800edf2:	bf00      	nop
 800edf4:	371c      	adds	r7, #28
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	40012c00 	.word	0x40012c00
 800ee04:	40013400 	.word	0x40013400
 800ee08:	40015000 	.word	0x40015000
 800ee0c:	40014000 	.word	0x40014000
 800ee10:	40014400 	.word	0x40014400
 800ee14:	40014800 	.word	0x40014800

0800ee18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b087      	sub	sp, #28
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a1b      	ldr	r3, [r3, #32]
 800ee2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f023 0303 	bic.w	r3, r3, #3
 800ee52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a2b      	ldr	r2, [pc, #172]	@ (800ef24 <TIM_OC3_SetConfig+0x10c>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d007      	beq.n	800ee8a <TIM_OC3_SetConfig+0x72>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a2a      	ldr	r2, [pc, #168]	@ (800ef28 <TIM_OC3_SetConfig+0x110>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d003      	beq.n	800ee8a <TIM_OC3_SetConfig+0x72>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a29      	ldr	r2, [pc, #164]	@ (800ef2c <TIM_OC3_SetConfig+0x114>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d10d      	bne.n	800eea6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	021b      	lsls	r3, r3, #8
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a1e      	ldr	r2, [pc, #120]	@ (800ef24 <TIM_OC3_SetConfig+0x10c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d013      	beq.n	800eed6 <TIM_OC3_SetConfig+0xbe>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4a1d      	ldr	r2, [pc, #116]	@ (800ef28 <TIM_OC3_SetConfig+0x110>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00f      	beq.n	800eed6 <TIM_OC3_SetConfig+0xbe>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ef30 <TIM_OC3_SetConfig+0x118>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d00b      	beq.n	800eed6 <TIM_OC3_SetConfig+0xbe>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4a1c      	ldr	r2, [pc, #112]	@ (800ef34 <TIM_OC3_SetConfig+0x11c>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d007      	beq.n	800eed6 <TIM_OC3_SetConfig+0xbe>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef38 <TIM_OC3_SetConfig+0x120>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d003      	beq.n	800eed6 <TIM_OC3_SetConfig+0xbe>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a16      	ldr	r2, [pc, #88]	@ (800ef2c <TIM_OC3_SetConfig+0x114>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d113      	bne.n	800eefe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	693a      	ldr	r2, [r7, #16]
 800ef02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	621a      	str	r2, [r3, #32]
}
 800ef18:	bf00      	nop
 800ef1a:	371c      	adds	r7, #28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	40012c00 	.word	0x40012c00
 800ef28:	40013400 	.word	0x40013400
 800ef2c:	40015000 	.word	0x40015000
 800ef30:	40014000 	.word	0x40014000
 800ef34:	40014400 	.word	0x40014400
 800ef38:	40014800 	.word	0x40014800

0800ef3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b087      	sub	sp, #28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	69db      	ldr	r3, [r3, #28]
 800ef62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ef6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	031b      	lsls	r3, r3, #12
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a2c      	ldr	r2, [pc, #176]	@ (800f04c <TIM_OC4_SetConfig+0x110>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d007      	beq.n	800efb0 <TIM_OC4_SetConfig+0x74>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a2b      	ldr	r2, [pc, #172]	@ (800f050 <TIM_OC4_SetConfig+0x114>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d003      	beq.n	800efb0 <TIM_OC4_SetConfig+0x74>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a2a      	ldr	r2, [pc, #168]	@ (800f054 <TIM_OC4_SetConfig+0x118>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d10d      	bne.n	800efcc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800efb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	031b      	lsls	r3, r3, #12
 800efbe:	697a      	ldr	r2, [r7, #20]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800efca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a1f      	ldr	r2, [pc, #124]	@ (800f04c <TIM_OC4_SetConfig+0x110>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d013      	beq.n	800effc <TIM_OC4_SetConfig+0xc0>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a1e      	ldr	r2, [pc, #120]	@ (800f050 <TIM_OC4_SetConfig+0x114>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d00f      	beq.n	800effc <TIM_OC4_SetConfig+0xc0>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a1e      	ldr	r2, [pc, #120]	@ (800f058 <TIM_OC4_SetConfig+0x11c>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d00b      	beq.n	800effc <TIM_OC4_SetConfig+0xc0>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a1d      	ldr	r2, [pc, #116]	@ (800f05c <TIM_OC4_SetConfig+0x120>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d007      	beq.n	800effc <TIM_OC4_SetConfig+0xc0>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a1c      	ldr	r2, [pc, #112]	@ (800f060 <TIM_OC4_SetConfig+0x124>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d003      	beq.n	800effc <TIM_OC4_SetConfig+0xc0>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a17      	ldr	r2, [pc, #92]	@ (800f054 <TIM_OC4_SetConfig+0x118>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d113      	bne.n	800f024 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f002:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f00a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	019b      	lsls	r3, r3, #6
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	4313      	orrs	r3, r2
 800f016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	019b      	lsls	r3, r3, #6
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	4313      	orrs	r3, r2
 800f022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	693a      	ldr	r2, [r7, #16]
 800f028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	621a      	str	r2, [r3, #32]
}
 800f03e:	bf00      	nop
 800f040:	371c      	adds	r7, #28
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	40012c00 	.word	0x40012c00
 800f050:	40013400 	.word	0x40013400
 800f054:	40015000 	.word	0x40015000
 800f058:	40014000 	.word	0x40014000
 800f05c:	40014400 	.word	0x40014400
 800f060:	40014800 	.word	0x40014800

0800f064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f064:	b480      	push	{r7}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6a1b      	ldr	r3, [r3, #32]
 800f078:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	68fa      	ldr	r2, [r7, #12]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f0a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	041b      	lsls	r3, r3, #16
 800f0b0:	693a      	ldr	r2, [r7, #16]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a19      	ldr	r2, [pc, #100]	@ (800f120 <TIM_OC5_SetConfig+0xbc>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d013      	beq.n	800f0e6 <TIM_OC5_SetConfig+0x82>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a18      	ldr	r2, [pc, #96]	@ (800f124 <TIM_OC5_SetConfig+0xc0>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_OC5_SetConfig+0x82>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a17      	ldr	r2, [pc, #92]	@ (800f128 <TIM_OC5_SetConfig+0xc4>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_OC5_SetConfig+0x82>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a16      	ldr	r2, [pc, #88]	@ (800f12c <TIM_OC5_SetConfig+0xc8>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_OC5_SetConfig+0x82>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a15      	ldr	r2, [pc, #84]	@ (800f130 <TIM_OC5_SetConfig+0xcc>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_OC5_SetConfig+0x82>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a14      	ldr	r2, [pc, #80]	@ (800f134 <TIM_OC5_SetConfig+0xd0>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d109      	bne.n	800f0fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	695b      	ldr	r3, [r3, #20]
 800f0f2:	021b      	lsls	r3, r3, #8
 800f0f4:	697a      	ldr	r2, [r7, #20]
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	697a      	ldr	r2, [r7, #20]
 800f0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	685a      	ldr	r2, [r3, #4]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	621a      	str	r2, [r3, #32]
}
 800f114:	bf00      	nop
 800f116:	371c      	adds	r7, #28
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	40012c00 	.word	0x40012c00
 800f124:	40013400 	.word	0x40013400
 800f128:	40014000 	.word	0x40014000
 800f12c:	40014400 	.word	0x40014400
 800f130:	40014800 	.word	0x40014800
 800f134:	40015000 	.word	0x40015000

0800f138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f138:	b480      	push	{r7}
 800f13a:	b087      	sub	sp, #28
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6a1b      	ldr	r3, [r3, #32]
 800f14c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	021b      	lsls	r3, r3, #8
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	4313      	orrs	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f17e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	051b      	lsls	r3, r3, #20
 800f186:	693a      	ldr	r2, [r7, #16]
 800f188:	4313      	orrs	r3, r2
 800f18a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a1a      	ldr	r2, [pc, #104]	@ (800f1f8 <TIM_OC6_SetConfig+0xc0>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d013      	beq.n	800f1bc <TIM_OC6_SetConfig+0x84>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a19      	ldr	r2, [pc, #100]	@ (800f1fc <TIM_OC6_SetConfig+0xc4>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00f      	beq.n	800f1bc <TIM_OC6_SetConfig+0x84>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a18      	ldr	r2, [pc, #96]	@ (800f200 <TIM_OC6_SetConfig+0xc8>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d00b      	beq.n	800f1bc <TIM_OC6_SetConfig+0x84>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a17      	ldr	r2, [pc, #92]	@ (800f204 <TIM_OC6_SetConfig+0xcc>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d007      	beq.n	800f1bc <TIM_OC6_SetConfig+0x84>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a16      	ldr	r2, [pc, #88]	@ (800f208 <TIM_OC6_SetConfig+0xd0>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d003      	beq.n	800f1bc <TIM_OC6_SetConfig+0x84>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a15      	ldr	r2, [pc, #84]	@ (800f20c <TIM_OC6_SetConfig+0xd4>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d109      	bne.n	800f1d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	029b      	lsls	r3, r3, #10
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	693a      	ldr	r2, [r7, #16]
 800f1e8:	621a      	str	r2, [r3, #32]
}
 800f1ea:	bf00      	nop
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	40012c00 	.word	0x40012c00
 800f1fc:	40013400 	.word	0x40013400
 800f200:	40014000 	.word	0x40014000
 800f204:	40014400 	.word	0x40014400
 800f208:	40014800 	.word	0x40014800
 800f20c:	40015000 	.word	0x40015000

0800f210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6a1b      	ldr	r3, [r3, #32]
 800f226:	f023 0201 	bic.w	r2, r3, #1
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f23a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	011b      	lsls	r3, r3, #4
 800f240:	693a      	ldr	r2, [r7, #16]
 800f242:	4313      	orrs	r3, r2
 800f244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f023 030a 	bic.w	r3, r3, #10
 800f24c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	4313      	orrs	r3, r2
 800f254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	621a      	str	r2, [r3, #32]
}
 800f262:	bf00      	nop
 800f264:	371c      	adds	r7, #28
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr

0800f26e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f26e:	b480      	push	{r7}
 800f270:	b087      	sub	sp, #28
 800f272:	af00      	add	r7, sp, #0
 800f274:	60f8      	str	r0, [r7, #12]
 800f276:	60b9      	str	r1, [r7, #8]
 800f278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	f023 0210 	bic.w	r2, r3, #16
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	031b      	lsls	r3, r3, #12
 800f29e:	693a      	ldr	r2, [r7, #16]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f2aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	011b      	lsls	r3, r3, #4
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	621a      	str	r2, [r3, #32]
}
 800f2c2:	bf00      	nop
 800f2c4:	371c      	adds	r7, #28
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b085      	sub	sp, #20
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f2e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	f043 0307 	orr.w	r3, r3, #7
 800f2f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	609a      	str	r2, [r3, #8]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f308:	b480      	push	{r7}
 800f30a:	b087      	sub	sp, #28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	021a      	lsls	r2, r3, #8
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	431a      	orrs	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	4313      	orrs	r3, r2
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	4313      	orrs	r3, r2
 800f334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	697a      	ldr	r2, [r7, #20]
 800f33a:	609a      	str	r2, [r3, #8]
}
 800f33c:	bf00      	nop
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	f003 031f 	and.w	r3, r3, #31
 800f35a:	2201      	movs	r2, #1
 800f35c:	fa02 f303 	lsl.w	r3, r2, r3
 800f360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a1a      	ldr	r2, [r3, #32]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	43db      	mvns	r3, r3
 800f36a:	401a      	ands	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6a1a      	ldr	r2, [r3, #32]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	f003 031f 	and.w	r3, r3, #31
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	fa01 f303 	lsl.w	r3, r1, r3
 800f380:	431a      	orrs	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	621a      	str	r2, [r3, #32]
}
 800f386:	bf00      	nop
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
	...

0800f394 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a26      	ldr	r2, [pc, #152]	@ (800f438 <TIM_ResetCallback+0xa4>)
 800f3a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a25      	ldr	r2, [pc, #148]	@ (800f43c <TIM_ResetCallback+0xa8>)
 800f3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4a24      	ldr	r2, [pc, #144]	@ (800f440 <TIM_ResetCallback+0xac>)
 800f3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a23      	ldr	r2, [pc, #140]	@ (800f444 <TIM_ResetCallback+0xb0>)
 800f3b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a22      	ldr	r2, [pc, #136]	@ (800f448 <TIM_ResetCallback+0xb4>)
 800f3c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4a21      	ldr	r2, [pc, #132]	@ (800f44c <TIM_ResetCallback+0xb8>)
 800f3c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a20      	ldr	r2, [pc, #128]	@ (800f450 <TIM_ResetCallback+0xbc>)
 800f3d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a1f      	ldr	r2, [pc, #124]	@ (800f454 <TIM_ResetCallback+0xc0>)
 800f3d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a1e      	ldr	r2, [pc, #120]	@ (800f458 <TIM_ResetCallback+0xc4>)
 800f3e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a1d      	ldr	r2, [pc, #116]	@ (800f45c <TIM_ResetCallback+0xc8>)
 800f3e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a1c      	ldr	r2, [pc, #112]	@ (800f460 <TIM_ResetCallback+0xcc>)
 800f3f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a1b      	ldr	r2, [pc, #108]	@ (800f464 <TIM_ResetCallback+0xd0>)
 800f3f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a1a      	ldr	r2, [pc, #104]	@ (800f468 <TIM_ResetCallback+0xd4>)
 800f400:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a19      	ldr	r2, [pc, #100]	@ (800f46c <TIM_ResetCallback+0xd8>)
 800f408:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a18      	ldr	r2, [pc, #96]	@ (800f470 <TIM_ResetCallback+0xdc>)
 800f410:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a17      	ldr	r2, [pc, #92]	@ (800f474 <TIM_ResetCallback+0xe0>)
 800f418:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a16      	ldr	r2, [pc, #88]	@ (800f478 <TIM_ResetCallback+0xe4>)
 800f420:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a15      	ldr	r2, [pc, #84]	@ (800f47c <TIM_ResetCallback+0xe8>)
 800f428:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr
 800f438:	08008229 	.word	0x08008229
 800f43c:	0800e6e1 	.word	0x0800e6e1
 800f440:	0800e759 	.word	0x0800e759
 800f444:	0800e76d 	.word	0x0800e76d
 800f448:	0800e709 	.word	0x0800e709
 800f44c:	0800e71d 	.word	0x0800e71d
 800f450:	0800e6f5 	.word	0x0800e6f5
 800f454:	0800e731 	.word	0x0800e731
 800f458:	0800e745 	.word	0x0800e745
 800f45c:	0800e781 	.word	0x0800e781
 800f460:	0800f6d5 	.word	0x0800f6d5
 800f464:	0800f6e9 	.word	0x0800f6e9
 800f468:	0800f6fd 	.word	0x0800f6fd
 800f46c:	0800f711 	.word	0x0800f711
 800f470:	0800f725 	.word	0x0800f725
 800f474:	0800f739 	.word	0x0800f739
 800f478:	0800f74d 	.word	0x0800f74d
 800f47c:	0800f761 	.word	0x0800f761

0800f480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f490:	2b01      	cmp	r3, #1
 800f492:	d101      	bne.n	800f498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f494:	2302      	movs	r3, #2
 800f496:	e074      	b.n	800f582 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2202      	movs	r2, #2
 800f4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a34      	ldr	r2, [pc, #208]	@ (800f590 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d009      	beq.n	800f4d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a33      	ldr	r2, [pc, #204]	@ (800f594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d004      	beq.n	800f4d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a31      	ldr	r2, [pc, #196]	@ (800f598 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d108      	bne.n	800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f4dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a21      	ldr	r2, [pc, #132]	@ (800f590 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d022      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f518:	d01d      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4a1f      	ldr	r2, [pc, #124]	@ (800f59c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d018      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d013      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4a1c      	ldr	r2, [pc, #112]	@ (800f5a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d00e      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a15      	ldr	r2, [pc, #84]	@ (800f594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d009      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a18      	ldr	r2, [pc, #96]	@ (800f5a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d004      	beq.n	800f556 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a11      	ldr	r2, [pc, #68]	@ (800f598 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d10c      	bne.n	800f570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f55c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	4313      	orrs	r3, r2
 800f566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	40012c00 	.word	0x40012c00
 800f594:	40013400 	.word	0x40013400
 800f598:	40015000 	.word	0x40015000
 800f59c:	40000400 	.word	0x40000400
 800f5a0:	40000800 	.word	0x40000800
 800f5a4:	40000c00 	.word	0x40000c00
 800f5a8:	40014000 	.word	0x40014000

0800f5ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d101      	bne.n	800f5c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	e078      	b.n	800f6ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4313      	orrs	r3, r2
 800f606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	691b      	ldr	r3, [r3, #16]
 800f612:	4313      	orrs	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	695b      	ldr	r3, [r3, #20]
 800f620:	4313      	orrs	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f62e:	4313      	orrs	r3, r2
 800f630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	041b      	lsls	r3, r3, #16
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a1c      	ldr	r2, [pc, #112]	@ (800f6c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d009      	beq.n	800f66e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a1b      	ldr	r2, [pc, #108]	@ (800f6cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d004      	beq.n	800f66e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a19      	ldr	r2, [pc, #100]	@ (800f6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d11c      	bne.n	800f6a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f678:	051b      	lsls	r3, r3, #20
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	4313      	orrs	r3, r2
 800f68a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f696:	4313      	orrs	r3, r2
 800f698:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3714      	adds	r7, #20
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	40012c00 	.word	0x40012c00
 800f6cc:	40013400 	.word	0x40013400
 800f6d0:	40015000 	.word	0x40015000

0800f6d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	e050      	b.n	800f828 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d114      	bne.n	800f7ba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fd65 	bl	8010268 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d103      	bne.n	800f7b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a21      	ldr	r2, [pc, #132]	@ (800f830 <HAL_UART_Init+0xbc>)
 800f7ac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2224      	movs	r2, #36	@ 0x24
 800f7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f022 0201 	bic.w	r2, r2, #1
 800f7d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f001 f892 	bl	8010904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fd93 	bl	801030c <UART_SetConfig>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d101      	bne.n	800f7f0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e01b      	b.n	800f828 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f7fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	689a      	ldr	r2, [r3, #8]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f80e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f042 0201 	orr.w	r2, r2, #1
 800f81e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f001 f911 	bl	8010a48 <UART_CheckIdleState>
 800f826:	4603      	mov	r3, r0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	08009c15 	.word	0x08009c15

0800f834 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	460b      	mov	r3, r1
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d109      	bne.n	800f860 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e09c      	b.n	800f99a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f866:	2b20      	cmp	r3, #32
 800f868:	d16c      	bne.n	800f944 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800f86a:	7afb      	ldrb	r3, [r7, #11]
 800f86c:	2b0c      	cmp	r3, #12
 800f86e:	d85e      	bhi.n	800f92e <HAL_UART_RegisterCallback+0xfa>
 800f870:	a201      	add	r2, pc, #4	@ (adr r2, 800f878 <HAL_UART_RegisterCallback+0x44>)
 800f872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f876:	bf00      	nop
 800f878:	0800f8ad 	.word	0x0800f8ad
 800f87c:	0800f8b7 	.word	0x0800f8b7
 800f880:	0800f8c1 	.word	0x0800f8c1
 800f884:	0800f8cb 	.word	0x0800f8cb
 800f888:	0800f8d5 	.word	0x0800f8d5
 800f88c:	0800f8df 	.word	0x0800f8df
 800f890:	0800f8e9 	.word	0x0800f8e9
 800f894:	0800f8f3 	.word	0x0800f8f3
 800f898:	0800f8fd 	.word	0x0800f8fd
 800f89c:	0800f907 	.word	0x0800f907
 800f8a0:	0800f911 	.word	0x0800f911
 800f8a4:	0800f91b 	.word	0x0800f91b
 800f8a8:	0800f925 	.word	0x0800f925
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f8b4:	e070      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f8be:	e06b      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f8c8:	e066      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f8d2:	e061      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f8dc:	e05c      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f8e6:	e057      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f8f0:	e052      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f8fa:	e04d      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f904:	e048      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f90e:	e043      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f918:	e03e      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f922:	e039      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f92c:	e034      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f934:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f93e:	2301      	movs	r3, #1
 800f940:	75fb      	strb	r3, [r7, #23]
        break;
 800f942:	e029      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d11a      	bne.n	800f984 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800f94e:	7afb      	ldrb	r3, [r7, #11]
 800f950:	2b0b      	cmp	r3, #11
 800f952:	d002      	beq.n	800f95a <HAL_UART_RegisterCallback+0x126>
 800f954:	2b0c      	cmp	r3, #12
 800f956:	d005      	beq.n	800f964 <HAL_UART_RegisterCallback+0x130>
 800f958:	e009      	b.n	800f96e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f962:	e019      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f96c:	e014      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f974:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	75fb      	strb	r3, [r7, #23]
        break;
 800f982:	e009      	b.n	800f998 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f98a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800f994:	2301      	movs	r3, #1
 800f996:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f998:	7dfb      	ldrb	r3, [r7, #23]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	371c      	adds	r7, #28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop

0800f9a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	@ 0x28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9bc:	2b20      	cmp	r3, #32
 800f9be:	d137      	bne.n	800fa30 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <HAL_UART_Receive_DMA+0x24>
 800f9c6:	88fb      	ldrh	r3, [r7, #6]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e030      	b.n	800fa32 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a18      	ldr	r2, [pc, #96]	@ (800fa3c <HAL_UART_Receive_DMA+0x94>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d01f      	beq.n	800fa20 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d018      	beq.n	800fa20 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	e853 3f00 	ldrex	r3, [r3]
 800f9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa02:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0c:	623b      	str	r3, [r7, #32]
 800fa0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa10:	69f9      	ldr	r1, [r7, #28]
 800fa12:	6a3a      	ldr	r2, [r7, #32]
 800fa14:	e841 2300 	strex	r3, r2, [r1]
 800fa18:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1e6      	bne.n	800f9ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fa20:	88fb      	ldrh	r3, [r7, #6]
 800fa22:	461a      	mov	r2, r3
 800fa24:	68b9      	ldr	r1, [r7, #8]
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f001 f926 	bl	8010c78 <UART_Start_Receive_DMA>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	e000      	b.n	800fa32 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fa30:	2302      	movs	r3, #2
  }
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3728      	adds	r7, #40	@ 0x28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	40008000 	.word	0x40008000

0800fa40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b0ba      	sub	sp, #232	@ 0xe8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	69db      	ldr	r3, [r3, #28]
 800fa4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fa66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fa6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fa6e:	4013      	ands	r3, r2
 800fa70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fa74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d11b      	bne.n	800fab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa80:	f003 0320 	and.w	r3, r3, #32
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d015      	beq.n	800fab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa8c:	f003 0320 	and.w	r3, r3, #32
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d105      	bne.n	800faa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d009      	beq.n	800fab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 8312 	beq.w	80100ce <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	4798      	blx	r3
      }
      return;
 800fab2:	e30c      	b.n	80100ce <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 8129 	beq.w	800fd10 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fabe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fac2:	4b90      	ldr	r3, [pc, #576]	@ (800fd04 <HAL_UART_IRQHandler+0x2c4>)
 800fac4:	4013      	ands	r3, r2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800faca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800face:	4b8e      	ldr	r3, [pc, #568]	@ (800fd08 <HAL_UART_IRQHandler+0x2c8>)
 800fad0:	4013      	ands	r3, r2
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f000 811c 	beq.w	800fd10 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fadc:	f003 0301 	and.w	r3, r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d011      	beq.n	800fb08 <HAL_UART_IRQHandler+0xc8>
 800fae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00b      	beq.n	800fb08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2201      	movs	r2, #1
 800faf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fafe:	f043 0201 	orr.w	r2, r3, #1
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb0c:	f003 0302 	and.w	r3, r3, #2
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d011      	beq.n	800fb38 <HAL_UART_IRQHandler+0xf8>
 800fb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb18:	f003 0301 	and.w	r3, r3, #1
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00b      	beq.n	800fb38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2202      	movs	r2, #2
 800fb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb2e:	f043 0204 	orr.w	r2, r3, #4
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d011      	beq.n	800fb68 <HAL_UART_IRQHandler+0x128>
 800fb44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2204      	movs	r2, #4
 800fb56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb5e:	f043 0202 	orr.w	r2, r3, #2
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb6c:	f003 0308 	and.w	r3, r3, #8
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d017      	beq.n	800fba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb78:	f003 0320 	and.w	r3, r3, #32
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d105      	bne.n	800fb8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fb80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fb84:	4b5f      	ldr	r3, [pc, #380]	@ (800fd04 <HAL_UART_IRQHandler+0x2c4>)
 800fb86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00b      	beq.n	800fba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2208      	movs	r2, #8
 800fb92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb9a:	f043 0208 	orr.w	r2, r3, #8
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d012      	beq.n	800fbd6 <HAL_UART_IRQHandler+0x196>
 800fbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00c      	beq.n	800fbd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fbc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbcc:	f043 0220 	orr.w	r2, r3, #32
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 8278 	beq.w	80100d2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbe6:	f003 0320 	and.w	r3, r3, #32
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d013      	beq.n	800fc16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fbee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbf2:	f003 0320 	and.w	r3, r3, #32
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d105      	bne.n	800fc06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d007      	beq.n	800fc16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc2a:	2b40      	cmp	r3, #64	@ 0x40
 800fc2c:	d005      	beq.n	800fc3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fc2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fc32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d058      	beq.n	800fcec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f001 f903 	bl	8010e46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc4a:	2b40      	cmp	r3, #64	@ 0x40
 800fc4c:	d148      	bne.n	800fce0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3308      	adds	r3, #8
 800fc54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc5c:	e853 3f00 	ldrex	r3, [r3]
 800fc60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fc64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3308      	adds	r3, #8
 800fc76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fc7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fc7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fc86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fc8a:	e841 2300 	strex	r3, r2, [r1]
 800fc8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fc92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1d9      	bne.n	800fc4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d017      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcaa:	4a18      	ldr	r2, [pc, #96]	@ (800fd0c <HAL_UART_IRQHandler+0x2cc>)
 800fcac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fc f8ab 	bl	800be10 <HAL_DMA_Abort_IT>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d01f      	beq.n	800fd00 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fcce:	4610      	mov	r0, r2
 800fcd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcd2:	e015      	b.n	800fd00 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcde:	e00f      	b.n	800fd00 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcea:	e009      	b.n	800fd00 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fcfe:	e1e8      	b.n	80100d2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd00:	bf00      	nop
    return;
 800fd02:	e1e6      	b.n	80100d2 <HAL_UART_IRQHandler+0x692>
 800fd04:	10000001 	.word	0x10000001
 800fd08:	04000120 	.word	0x04000120
 800fd0c:	08011111 	.word	0x08011111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	f040 8176 	bne.w	8010006 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd1e:	f003 0310 	and.w	r3, r3, #16
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 816f 	beq.w	8010006 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fd28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd2c:	f003 0310 	and.w	r3, r3, #16
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 8168 	beq.w	8010006 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2210      	movs	r2, #16
 800fd3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd48:	2b40      	cmp	r3, #64	@ 0x40
 800fd4a:	f040 80dc 	bne.w	800ff06 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fd5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 80b1 	beq.w	800fec8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd70:	429a      	cmp	r2, r3
 800fd72:	f080 80a9 	bcs.w	800fec8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f003 0320 	and.w	r3, r3, #32
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f040 8087 	bne.w	800fea2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fda0:	e853 3f00 	ldrex	r3, [r3]
 800fda4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fda8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fdac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fdb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fdbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fdc2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fdca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fdce:	e841 2300 	strex	r3, r2, [r1]
 800fdd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fdd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1da      	bne.n	800fd94 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3308      	adds	r3, #8
 800fde4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fde8:	e853 3f00 	ldrex	r3, [r3]
 800fdec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fdee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fdf0:	f023 0301 	bic.w	r3, r3, #1
 800fdf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3308      	adds	r3, #8
 800fdfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fe02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fe06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fe0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fe0e:	e841 2300 	strex	r3, r2, [r1]
 800fe12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fe14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1e1      	bne.n	800fdde <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	3308      	adds	r3, #8
 800fe20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe24:	e853 3f00 	ldrex	r3, [r3]
 800fe28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fe2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3308      	adds	r3, #8
 800fe3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fe3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fe46:	e841 2300 	strex	r3, r2, [r1]
 800fe4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fe4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1e3      	bne.n	800fe1a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2220      	movs	r2, #32
 800fe56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe68:	e853 3f00 	ldrex	r3, [r3]
 800fe6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fe6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe70:	f023 0310 	bic.w	r3, r3, #16
 800fe74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe8a:	e841 2300 	strex	r3, r2, [r1]
 800fe8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fe90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1e4      	bne.n	800fe60 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fb ff5e 	bl	800bd5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2202      	movs	r2, #2
 800fea6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800feba:	b292      	uxth	r2, r2
 800febc:	1a8a      	subs	r2, r1, r2
 800febe:	b292      	uxth	r2, r2
 800fec0:	4611      	mov	r1, r2
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fec6:	e106      	b.n	80100d6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fed2:	429a      	cmp	r2, r3
 800fed4:	f040 80ff 	bne.w	80100d6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 0320 	and.w	r3, r3, #32
 800fee6:	2b20      	cmp	r3, #32
 800fee8:	f040 80f5 	bne.w	80100d6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2202      	movs	r2, #2
 800fef0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fefe:	4611      	mov	r1, r2
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	4798      	blx	r3
      return;
 800ff04:	e0e7      	b.n	80100d6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	1ad3      	subs	r3, r2, r3
 800ff16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 80d9 	beq.w	80100da <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800ff28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 80d4 	beq.w	80100da <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff3a:	e853 3f00 	ldrex	r3, [r3]
 800ff3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ff40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff5c:	e841 2300 	strex	r3, r2, [r1]
 800ff60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ff62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e4      	bne.n	800ff32 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3308      	adds	r3, #8
 800ff6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	e853 3f00 	ldrex	r3, [r3]
 800ff76:	623b      	str	r3, [r7, #32]
   return(result);
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff7e:	f023 0301 	bic.w	r3, r3, #1
 800ff82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3308      	adds	r3, #8
 800ff8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ff90:	633a      	str	r2, [r7, #48]	@ 0x30
 800ff92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff98:	e841 2300 	strex	r3, r2, [r1]
 800ff9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1e1      	bne.n	800ff68 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2220      	movs	r2, #32
 800ffa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	e853 3f00 	ldrex	r3, [r3]
 800ffc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f023 0310 	bic.w	r3, r3, #16
 800ffcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ffda:	61fb      	str	r3, [r7, #28]
 800ffdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffde:	69b9      	ldr	r1, [r7, #24]
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	e841 2300 	strex	r3, r2, [r1]
 800ffe6:	617b      	str	r3, [r7, #20]
   return(result);
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1e4      	bne.n	800ffb8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2202      	movs	r2, #2
 800fff2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fffa:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800fffe:	4611      	mov	r1, r2
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010004:	e069      	b.n	80100da <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801000a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d010      	beq.n	8010034 <HAL_UART_IRQHandler+0x5f4>
 8010012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00a      	beq.n	8010034 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010026:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010032:	e055      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801003c:	2b00      	cmp	r3, #0
 801003e:	d014      	beq.n	801006a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010048:	2b00      	cmp	r3, #0
 801004a:	d105      	bne.n	8010058 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801004c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010054:	2b00      	cmp	r3, #0
 8010056:	d008      	beq.n	801006a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801005c:	2b00      	cmp	r3, #0
 801005e:	d03e      	beq.n	80100de <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	4798      	blx	r3
    }
    return;
 8010068:	e039      	b.n	80100de <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801006a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801006e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010072:	2b00      	cmp	r3, #0
 8010074:	d009      	beq.n	801008a <HAL_UART_IRQHandler+0x64a>
 8010076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801007a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801007e:	2b00      	cmp	r3, #0
 8010080:	d003      	beq.n	801008a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f001 f858 	bl	8011138 <UART_EndTransmit_IT>
    return;
 8010088:	e02a      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801008a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801008e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00b      	beq.n	80100ae <HAL_UART_IRQHandler+0x66e>
 8010096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801009a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80100ac:	e018      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80100ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d012      	beq.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
 80100ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	da0e      	bge.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80100cc:	e008      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80100ce:	bf00      	nop
 80100d0:	e006      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80100d2:	bf00      	nop
 80100d4:	e004      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80100d6:	bf00      	nop
 80100d8:	e002      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80100da:	bf00      	nop
 80100dc:	e000      	b.n	80100e0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80100de:	bf00      	nop
  }
}
 80100e0:	37e8      	adds	r7, #232	@ 0xe8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop

080100e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801012c:	bf00      	nop
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010140:	bf00      	nop
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010154:	bf00      	nop
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	460b      	mov	r3, r1
 8010192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a09      	ldr	r2, [pc, #36]	@ (80101d4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d009      	beq.n	80101c8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	695b      	ldr	r3, [r3, #20]
 80101ba:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	430a      	orrs	r2, r1
 80101c6:	615a      	str	r2, [r3, #20]
  }
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	40008000 	.word	0x40008000

080101d8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a18      	ldr	r2, [pc, #96]	@ (8010248 <HAL_UART_EnableReceiverTimeout+0x70>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d027      	beq.n	801023a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101f0:	2b20      	cmp	r3, #32
 80101f2:	d120      	bne.n	8010236 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d101      	bne.n	8010202 <HAL_UART_EnableReceiverTimeout+0x2a>
 80101fe:	2302      	movs	r3, #2
 8010200:	e01c      	b.n	801023c <HAL_UART_EnableReceiverTimeout+0x64>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2224      	movs	r2, #36	@ 0x24
 801020e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8010220:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2220      	movs	r2, #32
 8010226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	e002      	b.n	801023c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010236:	2302      	movs	r3, #2
 8010238:	e000      	b.n	801023c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 801023a:	2301      	movs	r3, #1
  }
}
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	40008000 	.word	0x40008000

0801024c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 801025a:	4618      	mov	r0, r3
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr
	...

08010268 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4a1a      	ldr	r2, [pc, #104]	@ (80102dc <UART_InitCallbacksToDefault+0x74>)
 8010274:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4a19      	ldr	r2, [pc, #100]	@ (80102e0 <UART_InitCallbacksToDefault+0x78>)
 801027c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a18      	ldr	r2, [pc, #96]	@ (80102e4 <UART_InitCallbacksToDefault+0x7c>)
 8010284:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4a17      	ldr	r2, [pc, #92]	@ (80102e8 <UART_InitCallbacksToDefault+0x80>)
 801028c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4a16      	ldr	r2, [pc, #88]	@ (80102ec <UART_InitCallbacksToDefault+0x84>)
 8010294:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a15      	ldr	r2, [pc, #84]	@ (80102f0 <UART_InitCallbacksToDefault+0x88>)
 801029c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a14      	ldr	r2, [pc, #80]	@ (80102f4 <UART_InitCallbacksToDefault+0x8c>)
 80102a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a13      	ldr	r2, [pc, #76]	@ (80102f8 <UART_InitCallbacksToDefault+0x90>)
 80102ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a12      	ldr	r2, [pc, #72]	@ (80102fc <UART_InitCallbacksToDefault+0x94>)
 80102b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a11      	ldr	r2, [pc, #68]	@ (8010300 <UART_InitCallbacksToDefault+0x98>)
 80102bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a10      	ldr	r2, [pc, #64]	@ (8010304 <UART_InitCallbacksToDefault+0x9c>)
 80102c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a0f      	ldr	r2, [pc, #60]	@ (8010308 <UART_InitCallbacksToDefault+0xa0>)
 80102cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	080100fd 	.word	0x080100fd
 80102e0:	080100e9 	.word	0x080100e9
 80102e4:	08010125 	.word	0x08010125
 80102e8:	08010111 	.word	0x08010111
 80102ec:	08010139 	.word	0x08010139
 80102f0:	0801014d 	.word	0x0801014d
 80102f4:	08010161 	.word	0x08010161
 80102f8:	08010175 	.word	0x08010175
 80102fc:	08011193 	.word	0x08011193
 8010300:	080111a7 	.word	0x080111a7
 8010304:	080111bb 	.word	0x080111bb
 8010308:	08010189 	.word	0x08010189

0801030c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801030c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010310:	b08c      	sub	sp, #48	@ 0x30
 8010312:	af00      	add	r7, sp, #0
 8010314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010316:	2300      	movs	r3, #0
 8010318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	689a      	ldr	r2, [r3, #8]
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	691b      	ldr	r3, [r3, #16]
 8010324:	431a      	orrs	r2, r3
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	695b      	ldr	r3, [r3, #20]
 801032a:	431a      	orrs	r2, r3
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	4313      	orrs	r3, r2
 8010332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	4baa      	ldr	r3, [pc, #680]	@ (80105e4 <UART_SetConfig+0x2d8>)
 801033c:	4013      	ands	r3, r2
 801033e:	697a      	ldr	r2, [r7, #20]
 8010340:	6812      	ldr	r2, [r2, #0]
 8010342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010344:	430b      	orrs	r3, r1
 8010346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	68da      	ldr	r2, [r3, #12]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	430a      	orrs	r2, r1
 801035c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	699b      	ldr	r3, [r3, #24]
 8010362:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4a9f      	ldr	r2, [pc, #636]	@ (80105e8 <UART_SetConfig+0x2dc>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d004      	beq.n	8010378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010374:	4313      	orrs	r3, r2
 8010376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	689b      	ldr	r3, [r3, #8]
 801037e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010382:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801038c:	430b      	orrs	r3, r1
 801038e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010396:	f023 010f 	bic.w	r1, r3, #15
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	430a      	orrs	r2, r1
 80103a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a90      	ldr	r2, [pc, #576]	@ (80105ec <UART_SetConfig+0x2e0>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d125      	bne.n	80103fc <UART_SetConfig+0xf0>
 80103b0:	4b8f      	ldr	r3, [pc, #572]	@ (80105f0 <UART_SetConfig+0x2e4>)
 80103b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103b6:	f003 0303 	and.w	r3, r3, #3
 80103ba:	2b03      	cmp	r3, #3
 80103bc:	d81a      	bhi.n	80103f4 <UART_SetConfig+0xe8>
 80103be:	a201      	add	r2, pc, #4	@ (adr r2, 80103c4 <UART_SetConfig+0xb8>)
 80103c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c4:	080103d5 	.word	0x080103d5
 80103c8:	080103e5 	.word	0x080103e5
 80103cc:	080103dd 	.word	0x080103dd
 80103d0:	080103ed 	.word	0x080103ed
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103da:	e116      	b.n	801060a <UART_SetConfig+0x2fe>
 80103dc:	2302      	movs	r3, #2
 80103de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103e2:	e112      	b.n	801060a <UART_SetConfig+0x2fe>
 80103e4:	2304      	movs	r3, #4
 80103e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103ea:	e10e      	b.n	801060a <UART_SetConfig+0x2fe>
 80103ec:	2308      	movs	r3, #8
 80103ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103f2:	e10a      	b.n	801060a <UART_SetConfig+0x2fe>
 80103f4:	2310      	movs	r3, #16
 80103f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103fa:	e106      	b.n	801060a <UART_SetConfig+0x2fe>
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a7c      	ldr	r2, [pc, #496]	@ (80105f4 <UART_SetConfig+0x2e8>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d138      	bne.n	8010478 <UART_SetConfig+0x16c>
 8010406:	4b7a      	ldr	r3, [pc, #488]	@ (80105f0 <UART_SetConfig+0x2e4>)
 8010408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801040c:	f003 030c 	and.w	r3, r3, #12
 8010410:	2b0c      	cmp	r3, #12
 8010412:	d82d      	bhi.n	8010470 <UART_SetConfig+0x164>
 8010414:	a201      	add	r2, pc, #4	@ (adr r2, 801041c <UART_SetConfig+0x110>)
 8010416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801041a:	bf00      	nop
 801041c:	08010451 	.word	0x08010451
 8010420:	08010471 	.word	0x08010471
 8010424:	08010471 	.word	0x08010471
 8010428:	08010471 	.word	0x08010471
 801042c:	08010461 	.word	0x08010461
 8010430:	08010471 	.word	0x08010471
 8010434:	08010471 	.word	0x08010471
 8010438:	08010471 	.word	0x08010471
 801043c:	08010459 	.word	0x08010459
 8010440:	08010471 	.word	0x08010471
 8010444:	08010471 	.word	0x08010471
 8010448:	08010471 	.word	0x08010471
 801044c:	08010469 	.word	0x08010469
 8010450:	2300      	movs	r3, #0
 8010452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010456:	e0d8      	b.n	801060a <UART_SetConfig+0x2fe>
 8010458:	2302      	movs	r3, #2
 801045a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801045e:	e0d4      	b.n	801060a <UART_SetConfig+0x2fe>
 8010460:	2304      	movs	r3, #4
 8010462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010466:	e0d0      	b.n	801060a <UART_SetConfig+0x2fe>
 8010468:	2308      	movs	r3, #8
 801046a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801046e:	e0cc      	b.n	801060a <UART_SetConfig+0x2fe>
 8010470:	2310      	movs	r3, #16
 8010472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010476:	e0c8      	b.n	801060a <UART_SetConfig+0x2fe>
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a5e      	ldr	r2, [pc, #376]	@ (80105f8 <UART_SetConfig+0x2ec>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d125      	bne.n	80104ce <UART_SetConfig+0x1c2>
 8010482:	4b5b      	ldr	r3, [pc, #364]	@ (80105f0 <UART_SetConfig+0x2e4>)
 8010484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010488:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801048c:	2b30      	cmp	r3, #48	@ 0x30
 801048e:	d016      	beq.n	80104be <UART_SetConfig+0x1b2>
 8010490:	2b30      	cmp	r3, #48	@ 0x30
 8010492:	d818      	bhi.n	80104c6 <UART_SetConfig+0x1ba>
 8010494:	2b20      	cmp	r3, #32
 8010496:	d00a      	beq.n	80104ae <UART_SetConfig+0x1a2>
 8010498:	2b20      	cmp	r3, #32
 801049a:	d814      	bhi.n	80104c6 <UART_SetConfig+0x1ba>
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <UART_SetConfig+0x19a>
 80104a0:	2b10      	cmp	r3, #16
 80104a2:	d008      	beq.n	80104b6 <UART_SetConfig+0x1aa>
 80104a4:	e00f      	b.n	80104c6 <UART_SetConfig+0x1ba>
 80104a6:	2300      	movs	r3, #0
 80104a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104ac:	e0ad      	b.n	801060a <UART_SetConfig+0x2fe>
 80104ae:	2302      	movs	r3, #2
 80104b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104b4:	e0a9      	b.n	801060a <UART_SetConfig+0x2fe>
 80104b6:	2304      	movs	r3, #4
 80104b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104bc:	e0a5      	b.n	801060a <UART_SetConfig+0x2fe>
 80104be:	2308      	movs	r3, #8
 80104c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104c4:	e0a1      	b.n	801060a <UART_SetConfig+0x2fe>
 80104c6:	2310      	movs	r3, #16
 80104c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104cc:	e09d      	b.n	801060a <UART_SetConfig+0x2fe>
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4a4a      	ldr	r2, [pc, #296]	@ (80105fc <UART_SetConfig+0x2f0>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d125      	bne.n	8010524 <UART_SetConfig+0x218>
 80104d8:	4b45      	ldr	r3, [pc, #276]	@ (80105f0 <UART_SetConfig+0x2e4>)
 80104da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80104e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80104e4:	d016      	beq.n	8010514 <UART_SetConfig+0x208>
 80104e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80104e8:	d818      	bhi.n	801051c <UART_SetConfig+0x210>
 80104ea:	2b80      	cmp	r3, #128	@ 0x80
 80104ec:	d00a      	beq.n	8010504 <UART_SetConfig+0x1f8>
 80104ee:	2b80      	cmp	r3, #128	@ 0x80
 80104f0:	d814      	bhi.n	801051c <UART_SetConfig+0x210>
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <UART_SetConfig+0x1f0>
 80104f6:	2b40      	cmp	r3, #64	@ 0x40
 80104f8:	d008      	beq.n	801050c <UART_SetConfig+0x200>
 80104fa:	e00f      	b.n	801051c <UART_SetConfig+0x210>
 80104fc:	2300      	movs	r3, #0
 80104fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010502:	e082      	b.n	801060a <UART_SetConfig+0x2fe>
 8010504:	2302      	movs	r3, #2
 8010506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801050a:	e07e      	b.n	801060a <UART_SetConfig+0x2fe>
 801050c:	2304      	movs	r3, #4
 801050e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010512:	e07a      	b.n	801060a <UART_SetConfig+0x2fe>
 8010514:	2308      	movs	r3, #8
 8010516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801051a:	e076      	b.n	801060a <UART_SetConfig+0x2fe>
 801051c:	2310      	movs	r3, #16
 801051e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010522:	e072      	b.n	801060a <UART_SetConfig+0x2fe>
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a35      	ldr	r2, [pc, #212]	@ (8010600 <UART_SetConfig+0x2f4>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d12a      	bne.n	8010584 <UART_SetConfig+0x278>
 801052e:	4b30      	ldr	r3, [pc, #192]	@ (80105f0 <UART_SetConfig+0x2e4>)
 8010530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801053c:	d01a      	beq.n	8010574 <UART_SetConfig+0x268>
 801053e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010542:	d81b      	bhi.n	801057c <UART_SetConfig+0x270>
 8010544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010548:	d00c      	beq.n	8010564 <UART_SetConfig+0x258>
 801054a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801054e:	d815      	bhi.n	801057c <UART_SetConfig+0x270>
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <UART_SetConfig+0x250>
 8010554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010558:	d008      	beq.n	801056c <UART_SetConfig+0x260>
 801055a:	e00f      	b.n	801057c <UART_SetConfig+0x270>
 801055c:	2300      	movs	r3, #0
 801055e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010562:	e052      	b.n	801060a <UART_SetConfig+0x2fe>
 8010564:	2302      	movs	r3, #2
 8010566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801056a:	e04e      	b.n	801060a <UART_SetConfig+0x2fe>
 801056c:	2304      	movs	r3, #4
 801056e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010572:	e04a      	b.n	801060a <UART_SetConfig+0x2fe>
 8010574:	2308      	movs	r3, #8
 8010576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801057a:	e046      	b.n	801060a <UART_SetConfig+0x2fe>
 801057c:	2310      	movs	r3, #16
 801057e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010582:	e042      	b.n	801060a <UART_SetConfig+0x2fe>
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a17      	ldr	r2, [pc, #92]	@ (80105e8 <UART_SetConfig+0x2dc>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d13a      	bne.n	8010604 <UART_SetConfig+0x2f8>
 801058e:	4b18      	ldr	r3, [pc, #96]	@ (80105f0 <UART_SetConfig+0x2e4>)
 8010590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801059c:	d01a      	beq.n	80105d4 <UART_SetConfig+0x2c8>
 801059e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80105a2:	d81b      	bhi.n	80105dc <UART_SetConfig+0x2d0>
 80105a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105a8:	d00c      	beq.n	80105c4 <UART_SetConfig+0x2b8>
 80105aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105ae:	d815      	bhi.n	80105dc <UART_SetConfig+0x2d0>
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d003      	beq.n	80105bc <UART_SetConfig+0x2b0>
 80105b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105b8:	d008      	beq.n	80105cc <UART_SetConfig+0x2c0>
 80105ba:	e00f      	b.n	80105dc <UART_SetConfig+0x2d0>
 80105bc:	2300      	movs	r3, #0
 80105be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105c2:	e022      	b.n	801060a <UART_SetConfig+0x2fe>
 80105c4:	2302      	movs	r3, #2
 80105c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105ca:	e01e      	b.n	801060a <UART_SetConfig+0x2fe>
 80105cc:	2304      	movs	r3, #4
 80105ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105d2:	e01a      	b.n	801060a <UART_SetConfig+0x2fe>
 80105d4:	2308      	movs	r3, #8
 80105d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105da:	e016      	b.n	801060a <UART_SetConfig+0x2fe>
 80105dc:	2310      	movs	r3, #16
 80105de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80105e2:	e012      	b.n	801060a <UART_SetConfig+0x2fe>
 80105e4:	cfff69f3 	.word	0xcfff69f3
 80105e8:	40008000 	.word	0x40008000
 80105ec:	40013800 	.word	0x40013800
 80105f0:	40021000 	.word	0x40021000
 80105f4:	40004400 	.word	0x40004400
 80105f8:	40004800 	.word	0x40004800
 80105fc:	40004c00 	.word	0x40004c00
 8010600:	40005000 	.word	0x40005000
 8010604:	2310      	movs	r3, #16
 8010606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4aae      	ldr	r2, [pc, #696]	@ (80108c8 <UART_SetConfig+0x5bc>)
 8010610:	4293      	cmp	r3, r2
 8010612:	f040 8097 	bne.w	8010744 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010616:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801061a:	2b08      	cmp	r3, #8
 801061c:	d823      	bhi.n	8010666 <UART_SetConfig+0x35a>
 801061e:	a201      	add	r2, pc, #4	@ (adr r2, 8010624 <UART_SetConfig+0x318>)
 8010620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010624:	08010649 	.word	0x08010649
 8010628:	08010667 	.word	0x08010667
 801062c:	08010651 	.word	0x08010651
 8010630:	08010667 	.word	0x08010667
 8010634:	08010657 	.word	0x08010657
 8010638:	08010667 	.word	0x08010667
 801063c:	08010667 	.word	0x08010667
 8010640:	08010667 	.word	0x08010667
 8010644:	0801065f 	.word	0x0801065f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010648:	f7fc fcec 	bl	800d024 <HAL_RCC_GetPCLK1Freq>
 801064c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801064e:	e010      	b.n	8010672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010650:	4b9e      	ldr	r3, [pc, #632]	@ (80108cc <UART_SetConfig+0x5c0>)
 8010652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010654:	e00d      	b.n	8010672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010656:	f7fc fc77 	bl	800cf48 <HAL_RCC_GetSysClockFreq>
 801065a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801065c:	e009      	b.n	8010672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801065e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010664:	e005      	b.n	8010672 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010666:	2300      	movs	r3, #0
 8010668:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010674:	2b00      	cmp	r3, #0
 8010676:	f000 8130 	beq.w	80108da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801067e:	4a94      	ldr	r2, [pc, #592]	@ (80108d0 <UART_SetConfig+0x5c4>)
 8010680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010684:	461a      	mov	r2, r3
 8010686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010688:	fbb3 f3f2 	udiv	r3, r3, r2
 801068c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	429a      	cmp	r2, r3
 801069c:	d305      	bcc.n	80106aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106a4:	69ba      	ldr	r2, [r7, #24]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d903      	bls.n	80106b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80106aa:	2301      	movs	r3, #1
 80106ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80106b0:	e113      	b.n	80108da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b4:	2200      	movs	r2, #0
 80106b6:	60bb      	str	r3, [r7, #8]
 80106b8:	60fa      	str	r2, [r7, #12]
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106be:	4a84      	ldr	r2, [pc, #528]	@ (80108d0 <UART_SetConfig+0x5c4>)
 80106c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	2200      	movs	r2, #0
 80106c8:	603b      	str	r3, [r7, #0]
 80106ca:	607a      	str	r2, [r7, #4]
 80106cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106d4:	f7f0 fa8e 	bl	8000bf4 <__aeabi_uldivmod>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	4610      	mov	r0, r2
 80106de:	4619      	mov	r1, r3
 80106e0:	f04f 0200 	mov.w	r2, #0
 80106e4:	f04f 0300 	mov.w	r3, #0
 80106e8:	020b      	lsls	r3, r1, #8
 80106ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106ee:	0202      	lsls	r2, r0, #8
 80106f0:	6979      	ldr	r1, [r7, #20]
 80106f2:	6849      	ldr	r1, [r1, #4]
 80106f4:	0849      	lsrs	r1, r1, #1
 80106f6:	2000      	movs	r0, #0
 80106f8:	460c      	mov	r4, r1
 80106fa:	4605      	mov	r5, r0
 80106fc:	eb12 0804 	adds.w	r8, r2, r4
 8010700:	eb43 0905 	adc.w	r9, r3, r5
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	469a      	mov	sl, r3
 801070c:	4693      	mov	fp, r2
 801070e:	4652      	mov	r2, sl
 8010710:	465b      	mov	r3, fp
 8010712:	4640      	mov	r0, r8
 8010714:	4649      	mov	r1, r9
 8010716:	f7f0 fa6d 	bl	8000bf4 <__aeabi_uldivmod>
 801071a:	4602      	mov	r2, r0
 801071c:	460b      	mov	r3, r1
 801071e:	4613      	mov	r3, r2
 8010720:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010728:	d308      	bcc.n	801073c <UART_SetConfig+0x430>
 801072a:	6a3b      	ldr	r3, [r7, #32]
 801072c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010730:	d204      	bcs.n	801073c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6a3a      	ldr	r2, [r7, #32]
 8010738:	60da      	str	r2, [r3, #12]
 801073a:	e0ce      	b.n	80108da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010742:	e0ca      	b.n	80108da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801074c:	d166      	bne.n	801081c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801074e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010752:	2b08      	cmp	r3, #8
 8010754:	d827      	bhi.n	80107a6 <UART_SetConfig+0x49a>
 8010756:	a201      	add	r2, pc, #4	@ (adr r2, 801075c <UART_SetConfig+0x450>)
 8010758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075c:	08010781 	.word	0x08010781
 8010760:	08010789 	.word	0x08010789
 8010764:	08010791 	.word	0x08010791
 8010768:	080107a7 	.word	0x080107a7
 801076c:	08010797 	.word	0x08010797
 8010770:	080107a7 	.word	0x080107a7
 8010774:	080107a7 	.word	0x080107a7
 8010778:	080107a7 	.word	0x080107a7
 801077c:	0801079f 	.word	0x0801079f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010780:	f7fc fc50 	bl	800d024 <HAL_RCC_GetPCLK1Freq>
 8010784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010786:	e014      	b.n	80107b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010788:	f7fc fc62 	bl	800d050 <HAL_RCC_GetPCLK2Freq>
 801078c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801078e:	e010      	b.n	80107b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010790:	4b4e      	ldr	r3, [pc, #312]	@ (80108cc <UART_SetConfig+0x5c0>)
 8010792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010794:	e00d      	b.n	80107b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010796:	f7fc fbd7 	bl	800cf48 <HAL_RCC_GetSysClockFreq>
 801079a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801079c:	e009      	b.n	80107b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801079e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80107a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80107a4:	e005      	b.n	80107b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80107a6:	2300      	movs	r3, #0
 80107a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80107b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80107b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f000 8090 	beq.w	80108da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107be:	4a44      	ldr	r2, [pc, #272]	@ (80108d0 <UART_SetConfig+0x5c4>)
 80107c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107c4:	461a      	mov	r2, r3
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80107cc:	005a      	lsls	r2, r3, #1
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	085b      	lsrs	r3, r3, #1
 80107d4:	441a      	add	r2, r3
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	fbb2 f3f3 	udiv	r3, r2, r3
 80107de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	2b0f      	cmp	r3, #15
 80107e4:	d916      	bls.n	8010814 <UART_SetConfig+0x508>
 80107e6:	6a3b      	ldr	r3, [r7, #32]
 80107e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107ec:	d212      	bcs.n	8010814 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	f023 030f 	bic.w	r3, r3, #15
 80107f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	085b      	lsrs	r3, r3, #1
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	f003 0307 	and.w	r3, r3, #7
 8010802:	b29a      	uxth	r2, r3
 8010804:	8bfb      	ldrh	r3, [r7, #30]
 8010806:	4313      	orrs	r3, r2
 8010808:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	8bfa      	ldrh	r2, [r7, #30]
 8010810:	60da      	str	r2, [r3, #12]
 8010812:	e062      	b.n	80108da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010814:	2301      	movs	r3, #1
 8010816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801081a:	e05e      	b.n	80108da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801081c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010820:	2b08      	cmp	r3, #8
 8010822:	d828      	bhi.n	8010876 <UART_SetConfig+0x56a>
 8010824:	a201      	add	r2, pc, #4	@ (adr r2, 801082c <UART_SetConfig+0x520>)
 8010826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801082a:	bf00      	nop
 801082c:	08010851 	.word	0x08010851
 8010830:	08010859 	.word	0x08010859
 8010834:	08010861 	.word	0x08010861
 8010838:	08010877 	.word	0x08010877
 801083c:	08010867 	.word	0x08010867
 8010840:	08010877 	.word	0x08010877
 8010844:	08010877 	.word	0x08010877
 8010848:	08010877 	.word	0x08010877
 801084c:	0801086f 	.word	0x0801086f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010850:	f7fc fbe8 	bl	800d024 <HAL_RCC_GetPCLK1Freq>
 8010854:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010856:	e014      	b.n	8010882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010858:	f7fc fbfa 	bl	800d050 <HAL_RCC_GetPCLK2Freq>
 801085c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801085e:	e010      	b.n	8010882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010860:	4b1a      	ldr	r3, [pc, #104]	@ (80108cc <UART_SetConfig+0x5c0>)
 8010862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010864:	e00d      	b.n	8010882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010866:	f7fc fb6f 	bl	800cf48 <HAL_RCC_GetSysClockFreq>
 801086a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801086c:	e009      	b.n	8010882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801086e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010874:	e005      	b.n	8010882 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010876:	2300      	movs	r3, #0
 8010878:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801087a:	2301      	movs	r3, #1
 801087c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010880:	bf00      	nop
    }

    if (pclk != 0U)
 8010882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d028      	beq.n	80108da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088c:	4a10      	ldr	r2, [pc, #64]	@ (80108d0 <UART_SetConfig+0x5c4>)
 801088e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010892:	461a      	mov	r2, r3
 8010894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010896:	fbb3 f2f2 	udiv	r2, r3, r2
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	085b      	lsrs	r3, r3, #1
 80108a0:	441a      	add	r2, r3
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80108aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108ac:	6a3b      	ldr	r3, [r7, #32]
 80108ae:	2b0f      	cmp	r3, #15
 80108b0:	d910      	bls.n	80108d4 <UART_SetConfig+0x5c8>
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108b8:	d20c      	bcs.n	80108d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60da      	str	r2, [r3, #12]
 80108c4:	e009      	b.n	80108da <UART_SetConfig+0x5ce>
 80108c6:	bf00      	nop
 80108c8:	40008000 	.word	0x40008000
 80108cc:	00f42400 	.word	0x00f42400
 80108d0:	08013e80 	.word	0x08013e80
      }
      else
      {
        ret = HAL_ERROR;
 80108d4:	2301      	movs	r3, #1
 80108d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2201      	movs	r2, #1
 80108de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2200      	movs	r2, #0
 80108ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	2200      	movs	r2, #0
 80108f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80108f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3730      	adds	r7, #48	@ 0x30
 80108fe:	46bd      	mov	sp, r7
 8010900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010910:	f003 0308 	and.w	r3, r3, #8
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00a      	beq.n	801092e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	430a      	orrs	r2, r1
 801092c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010932:	f003 0301 	and.w	r3, r3, #1
 8010936:	2b00      	cmp	r3, #0
 8010938:	d00a      	beq.n	8010950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	430a      	orrs	r2, r1
 801094e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010954:	f003 0302 	and.w	r3, r3, #2
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00a      	beq.n	8010972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	430a      	orrs	r2, r1
 8010970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010976:	f003 0304 	and.w	r3, r3, #4
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00a      	beq.n	8010994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	430a      	orrs	r2, r1
 8010992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010998:	f003 0310 	and.w	r3, r3, #16
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00a      	beq.n	80109b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	430a      	orrs	r2, r1
 80109b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ba:	f003 0320 	and.w	r3, r3, #32
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00a      	beq.n	80109d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	430a      	orrs	r2, r1
 80109d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d01a      	beq.n	8010a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	430a      	orrs	r2, r1
 80109f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a02:	d10a      	bne.n	8010a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	430a      	orrs	r2, r1
 8010a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00a      	beq.n	8010a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	430a      	orrs	r2, r1
 8010a3a:	605a      	str	r2, [r3, #4]
  }
}
 8010a3c:	bf00      	nop
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b098      	sub	sp, #96	@ 0x60
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a58:	f7f9 faca 	bl	8009ff0 <HAL_GetTick>
 8010a5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f003 0308 	and.w	r3, r3, #8
 8010a68:	2b08      	cmp	r3, #8
 8010a6a:	d12f      	bne.n	8010acc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a74:	2200      	movs	r2, #0
 8010a76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f88e 	bl	8010b9c <UART_WaitOnFlagUntilTimeout>
 8010a80:	4603      	mov	r3, r0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d022      	beq.n	8010acc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8e:	e853 3f00 	ldrex	r3, [r3]
 8010a92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010aac:	e841 2300 	strex	r3, r2, [r1]
 8010ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e6      	bne.n	8010a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2220      	movs	r2, #32
 8010abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ac8:	2303      	movs	r3, #3
 8010aca:	e063      	b.n	8010b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f003 0304 	and.w	r3, r3, #4
 8010ad6:	2b04      	cmp	r3, #4
 8010ad8:	d149      	bne.n	8010b6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ada:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f857 	bl	8010b9c <UART_WaitOnFlagUntilTimeout>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d03c      	beq.n	8010b6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afc:	e853 3f00 	ldrex	r3, [r3]
 8010b00:	623b      	str	r3, [r7, #32]
   return(result);
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	461a      	mov	r2, r3
 8010b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b1a:	e841 2300 	strex	r3, r2, [r1]
 8010b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1e6      	bne.n	8010af4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3308      	adds	r3, #8
 8010b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	e853 3f00 	ldrex	r3, [r3]
 8010b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f023 0301 	bic.w	r3, r3, #1
 8010b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3308      	adds	r3, #8
 8010b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b46:	61fa      	str	r2, [r7, #28]
 8010b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4a:	69b9      	ldr	r1, [r7, #24]
 8010b4c:	69fa      	ldr	r2, [r7, #28]
 8010b4e:	e841 2300 	strex	r3, r2, [r1]
 8010b52:	617b      	str	r3, [r7, #20]
   return(result);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1e5      	bne.n	8010b26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2220      	movs	r2, #32
 8010b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b6a:	2303      	movs	r3, #3
 8010b6c:	e012      	b.n	8010b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2220      	movs	r2, #32
 8010b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2220      	movs	r2, #32
 8010b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2200      	movs	r2, #0
 8010b88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3758      	adds	r7, #88	@ 0x58
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bac:	e04f      	b.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bae:	69bb      	ldr	r3, [r7, #24]
 8010bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb4:	d04b      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bb6:	f7f9 fa1b 	bl	8009ff0 <HAL_GetTick>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	69ba      	ldr	r2, [r7, #24]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d302      	bcc.n	8010bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d101      	bne.n	8010bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010bcc:	2303      	movs	r3, #3
 8010bce:	e04e      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f003 0304 	and.w	r3, r3, #4
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d037      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b80      	cmp	r3, #128	@ 0x80
 8010be2:	d034      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2b40      	cmp	r3, #64	@ 0x40
 8010be8:	d031      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	69db      	ldr	r3, [r3, #28]
 8010bf0:	f003 0308 	and.w	r3, r3, #8
 8010bf4:	2b08      	cmp	r3, #8
 8010bf6:	d110      	bne.n	8010c1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2208      	movs	r2, #8
 8010bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f000 f920 	bl	8010e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2208      	movs	r2, #8
 8010c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e029      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	69db      	ldr	r3, [r3, #28]
 8010c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c28:	d111      	bne.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f000 f906 	bl	8010e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2220      	movs	r2, #32
 8010c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	e00f      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	69da      	ldr	r2, [r3, #28]
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	4013      	ands	r3, r2
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	bf0c      	ite	eq
 8010c5e:	2301      	moveq	r3, #1
 8010c60:	2300      	movne	r3, #0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	79fb      	ldrb	r3, [r7, #7]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d0a0      	beq.n	8010bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b096      	sub	sp, #88	@ 0x58
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	4613      	mov	r3, r2
 8010c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	88fa      	ldrh	r2, [r7, #6]
 8010c90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2222      	movs	r2, #34	@ 0x22
 8010ca0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d02d      	beq.n	8010d0a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cb4:	4a40      	ldr	r2, [pc, #256]	@ (8010db8 <UART_Start_Receive_DMA+0x140>)
 8010cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8010dbc <UART_Start_Receive_DMA+0x144>)
 8010cc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8010dc0 <UART_Start_Receive_DMA+0x148>)
 8010cca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	3324      	adds	r3, #36	@ 0x24
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ce8:	461a      	mov	r2, r3
 8010cea:	88fb      	ldrh	r3, [r7, #6]
 8010cec:	f7fa ffbc 	bl	800bc68 <HAL_DMA_Start_IT>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2210      	movs	r2, #16
 8010cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2220      	movs	r2, #32
 8010d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	e051      	b.n	8010dae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d018      	beq.n	8010d44 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d1a:	e853 3f00 	ldrex	r3, [r3]
 8010d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d26:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d32:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d38:	e841 2300 	strex	r3, r2, [r1]
 8010d3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1e6      	bne.n	8010d12 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	3308      	adds	r3, #8
 8010d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d4e:	e853 3f00 	ldrex	r3, [r3]
 8010d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d56:	f043 0301 	orr.w	r3, r3, #1
 8010d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	3308      	adds	r3, #8
 8010d62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010d64:	637a      	str	r2, [r7, #52]	@ 0x34
 8010d66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d6c:	e841 2300 	strex	r3, r2, [r1]
 8010d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1e5      	bne.n	8010d44 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	e853 3f00 	ldrex	r3, [r3]
 8010d86:	613b      	str	r3, [r7, #16]
   return(result);
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	3308      	adds	r3, #8
 8010d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d98:	623a      	str	r2, [r7, #32]
 8010d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9c:	69f9      	ldr	r1, [r7, #28]
 8010d9e:	6a3a      	ldr	r2, [r7, #32]
 8010da0:	e841 2300 	strex	r3, r2, [r1]
 8010da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1e5      	bne.n	8010d78 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3758      	adds	r7, #88	@ 0x58
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	08010f13 	.word	0x08010f13
 8010dbc:	08011047 	.word	0x08011047
 8010dc0:	0801108d 	.word	0x0801108d

08010dc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b08f      	sub	sp, #60	@ 0x3c
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	e853 3f00 	ldrex	r3, [r3]
 8010dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	461a      	mov	r2, r3
 8010de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010dec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010df2:	e841 2300 	strex	r3, r2, [r1]
 8010df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1e6      	bne.n	8010dcc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	3308      	adds	r3, #8
 8010e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	e853 3f00 	ldrex	r3, [r3]
 8010e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	3308      	adds	r3, #8
 8010e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e1e:	61ba      	str	r2, [r7, #24]
 8010e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e22:	6979      	ldr	r1, [r7, #20]
 8010e24:	69ba      	ldr	r2, [r7, #24]
 8010e26:	e841 2300 	strex	r3, r2, [r1]
 8010e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1e5      	bne.n	8010dfe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2220      	movs	r2, #32
 8010e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010e3a:	bf00      	nop
 8010e3c:	373c      	adds	r7, #60	@ 0x3c
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b095      	sub	sp, #84	@ 0x54
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e56:	e853 3f00 	ldrex	r3, [r3]
 8010e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e74:	e841 2300 	strex	r3, r2, [r1]
 8010e78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1e6      	bne.n	8010e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3308      	adds	r3, #8
 8010e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e88:	6a3b      	ldr	r3, [r7, #32]
 8010e8a:	e853 3f00 	ldrex	r3, [r3]
 8010e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e96:	f023 0301 	bic.w	r3, r3, #1
 8010e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010eac:	e841 2300 	strex	r3, r2, [r1]
 8010eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d1e3      	bne.n	8010e80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d118      	bne.n	8010ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	e853 3f00 	ldrex	r3, [r3]
 8010ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f023 0310 	bic.w	r3, r3, #16
 8010ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	461a      	mov	r2, r3
 8010edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ede:	61bb      	str	r3, [r7, #24]
 8010ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee2:	6979      	ldr	r1, [r7, #20]
 8010ee4:	69ba      	ldr	r2, [r7, #24]
 8010ee6:	e841 2300 	strex	r3, r2, [r1]
 8010eea:	613b      	str	r3, [r7, #16]
   return(result);
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d1e6      	bne.n	8010ec0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2200      	movs	r2, #0
 8010f04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f06:	bf00      	nop
 8010f08:	3754      	adds	r7, #84	@ 0x54
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b09c      	sub	sp, #112	@ 0x70
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f003 0320 	and.w	r3, r3, #32
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d171      	bne.n	8011012 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f30:	2200      	movs	r2, #0
 8010f32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f3e:	e853 3f00 	ldrex	r3, [r3]
 8010f42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	461a      	mov	r2, r3
 8010f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f56:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f5c:	e841 2300 	strex	r3, r2, [r1]
 8010f60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e6      	bne.n	8010f36 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	3308      	adds	r3, #8
 8010f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f72:	e853 3f00 	ldrex	r3, [r3]
 8010f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7a:	f023 0301 	bic.w	r3, r3, #1
 8010f7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3308      	adds	r3, #8
 8010f86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010f88:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f90:	e841 2300 	strex	r3, r2, [r1]
 8010f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1e5      	bne.n	8010f68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	3308      	adds	r3, #8
 8010fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa6:	e853 3f00 	ldrex	r3, [r3]
 8010faa:	623b      	str	r3, [r7, #32]
   return(result);
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	3308      	adds	r3, #8
 8010fba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010fbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8010fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc4:	e841 2300 	strex	r3, r2, [r1]
 8010fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d1e5      	bne.n	8010f9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fd2:	2220      	movs	r2, #32
 8010fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d118      	bne.n	8011012 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	e853 3f00 	ldrex	r3, [r3]
 8010fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f023 0310 	bic.w	r3, r3, #16
 8010ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ffe:	61fb      	str	r3, [r7, #28]
 8011000:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011002:	69b9      	ldr	r1, [r7, #24]
 8011004:	69fa      	ldr	r2, [r7, #28]
 8011006:	e841 2300 	strex	r3, r2, [r1]
 801100a:	617b      	str	r3, [r7, #20]
   return(result);
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1e6      	bne.n	8010fe0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011014:	2200      	movs	r2, #0
 8011016:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801101a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801101c:	2b01      	cmp	r3, #1
 801101e:	d109      	bne.n	8011034 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011022:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011026:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011028:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 801102c:	4611      	mov	r1, r2
 801102e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011030:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011032:	e004      	b.n	801103e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8011034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801103a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801103c:	4798      	blx	r3
}
 801103e:	bf00      	nop
 8011040:	3770      	adds	r7, #112	@ 0x70
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011046:	b580      	push	{r7, lr}
 8011048:	b084      	sub	sp, #16
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011052:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2201      	movs	r2, #1
 8011058:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801105e:	2b01      	cmp	r3, #1
 8011060:	d10b      	bne.n	801107a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 801106e:	0852      	lsrs	r2, r2, #1
 8011070:	b292      	uxth	r2, r2
 8011072:	4611      	mov	r1, r2
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011078:	e004      	b.n	8011084 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	4798      	blx	r3
}
 8011084:	bf00      	nop
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b086      	sub	sp, #24
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011098:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80110a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80110a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110b4:	2b80      	cmp	r3, #128	@ 0x80
 80110b6:	d109      	bne.n	80110cc <UART_DMAError+0x40>
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	2b21      	cmp	r3, #33	@ 0x21
 80110bc:	d106      	bne.n	80110cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	2200      	movs	r2, #0
 80110c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80110c6:	6978      	ldr	r0, [r7, #20]
 80110c8:	f7ff fe7c 	bl	8010dc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	689b      	ldr	r3, [r3, #8]
 80110d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110d6:	2b40      	cmp	r3, #64	@ 0x40
 80110d8:	d109      	bne.n	80110ee <UART_DMAError+0x62>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2b22      	cmp	r3, #34	@ 0x22
 80110de:	d106      	bne.n	80110ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	2200      	movs	r2, #0
 80110e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80110e8:	6978      	ldr	r0, [r7, #20]
 80110ea:	f7ff feac 	bl	8010e46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110f4:	f043 0210 	orr.w	r2, r3, #16
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011104:	6978      	ldr	r0, [r7, #20]
 8011106:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011108:	bf00      	nop
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801111c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011130:	bf00      	nop
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b088      	sub	sp, #32
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	e853 3f00 	ldrex	r3, [r3]
 801114c:	60bb      	str	r3, [r7, #8]
   return(result);
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011154:	61fb      	str	r3, [r7, #28]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	461a      	mov	r2, r3
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	61bb      	str	r3, [r7, #24]
 8011160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011162:	6979      	ldr	r1, [r7, #20]
 8011164:	69ba      	ldr	r2, [r7, #24]
 8011166:	e841 2300 	strex	r3, r2, [r1]
 801116a:	613b      	str	r3, [r7, #16]
   return(result);
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1e6      	bne.n	8011140 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2220      	movs	r2, #32
 8011176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801118a:	bf00      	nop
 801118c:	3720      	adds	r7, #32
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011192:	b480      	push	{r7}
 8011194:	b083      	sub	sp, #12
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801119a:	bf00      	nop
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80111a6:	b480      	push	{r7}
 80111a8:	b083      	sub	sp, #12
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80111ae:	bf00      	nop
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80111c2:	bf00      	nop
 80111c4:	370c      	adds	r7, #12
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr

080111ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80111ce:	b480      	push	{r7}
 80111d0:	b085      	sub	sp, #20
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d101      	bne.n	80111e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80111e0:	2302      	movs	r3, #2
 80111e2:	e027      	b.n	8011234 <HAL_UARTEx_DisableFifoMode+0x66>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2201      	movs	r2, #1
 80111e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2224      	movs	r2, #36	@ 0x24
 80111f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f022 0201 	bic.w	r2, r2, #1
 801120a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	68fa      	ldr	r2, [r7, #12]
 8011220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2220      	movs	r2, #32
 8011226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3714      	adds	r7, #20
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011250:	2b01      	cmp	r3, #1
 8011252:	d101      	bne.n	8011258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011254:	2302      	movs	r3, #2
 8011256:	e02d      	b.n	80112b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2201      	movs	r2, #1
 801125c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2224      	movs	r2, #36	@ 0x24
 8011264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f022 0201 	bic.w	r2, r2, #1
 801127e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	430a      	orrs	r2, r1
 8011292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 f84f 	bl	8011338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2220      	movs	r2, #32
 80112a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3710      	adds	r7, #16
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d101      	bne.n	80112d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80112d0:	2302      	movs	r3, #2
 80112d2:	e02d      	b.n	8011330 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2224      	movs	r2, #36	@ 0x24
 80112e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f022 0201 	bic.w	r2, r2, #1
 80112fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	430a      	orrs	r2, r1
 801130e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 f811 	bl	8011338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2220      	movs	r2, #32
 8011322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011344:	2b00      	cmp	r3, #0
 8011346:	d108      	bne.n	801135a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2201      	movs	r2, #1
 8011354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011358:	e031      	b.n	80113be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801135a:	2308      	movs	r3, #8
 801135c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801135e:	2308      	movs	r3, #8
 8011360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	0e5b      	lsrs	r3, r3, #25
 801136a:	b2db      	uxtb	r3, r3
 801136c:	f003 0307 	and.w	r3, r3, #7
 8011370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	689b      	ldr	r3, [r3, #8]
 8011378:	0f5b      	lsrs	r3, r3, #29
 801137a:	b2db      	uxtb	r3, r3
 801137c:	f003 0307 	and.w	r3, r3, #7
 8011380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011382:	7bbb      	ldrb	r3, [r7, #14]
 8011384:	7b3a      	ldrb	r2, [r7, #12]
 8011386:	4911      	ldr	r1, [pc, #68]	@ (80113cc <UARTEx_SetNbDataToProcess+0x94>)
 8011388:	5c8a      	ldrb	r2, [r1, r2]
 801138a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801138e:	7b3a      	ldrb	r2, [r7, #12]
 8011390:	490f      	ldr	r1, [pc, #60]	@ (80113d0 <UARTEx_SetNbDataToProcess+0x98>)
 8011392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011394:	fb93 f3f2 	sdiv	r3, r3, r2
 8011398:	b29a      	uxth	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113a0:	7bfb      	ldrb	r3, [r7, #15]
 80113a2:	7b7a      	ldrb	r2, [r7, #13]
 80113a4:	4909      	ldr	r1, [pc, #36]	@ (80113cc <UARTEx_SetNbDataToProcess+0x94>)
 80113a6:	5c8a      	ldrb	r2, [r1, r2]
 80113a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80113ac:	7b7a      	ldrb	r2, [r7, #13]
 80113ae:	4908      	ldr	r1, [pc, #32]	@ (80113d0 <UARTEx_SetNbDataToProcess+0x98>)
 80113b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80113be:	bf00      	nop
 80113c0:	3714      	adds	r7, #20
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr
 80113ca:	bf00      	nop
 80113cc:	08013e98 	.word	0x08013e98
 80113d0:	08013ea0 	.word	0x08013ea0

080113d4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b08b      	sub	sp, #44	@ 0x2c
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	461a      	mov	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	885b      	ldrh	r3, [r3, #2]
 80113fc:	fb02 f303 	mul.w	r3, r2, r3
 8011400:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011406:	e013      	b.n	8011430 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8011408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801140a:	1d1a      	adds	r2, r3, #4
 801140c:	627a      	str	r2, [r7, #36]	@ 0x24
 801140e:	ed93 7a00 	vldr	s14, [r3]
 8011412:	6a3b      	ldr	r3, [r7, #32]
 8011414:	1d1a      	adds	r2, r3, #4
 8011416:	623a      	str	r2, [r7, #32]
 8011418:	edd3 7a00 	vldr	s15, [r3]
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	1d1a      	adds	r2, r3, #4
 8011420:	61fa      	str	r2, [r7, #28]
 8011422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011426:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	3b01      	subs	r3, #1
 801142e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d1e8      	bne.n	8011408 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011436:	2300      	movs	r3, #0
 8011438:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801143a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801143e:	4618      	mov	r0, r3
 8011440:	372c      	adds	r7, #44	@ 0x2c
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr

0801144a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 801144a:	b480      	push	{r7}
 801144c:	b085      	sub	sp, #20
 801144e:	af00      	add	r7, sp, #0
 8011450:	60f8      	str	r0, [r7, #12]
 8011452:	607b      	str	r3, [r7, #4]
 8011454:	460b      	mov	r3, r1
 8011456:	817b      	strh	r3, [r7, #10]
 8011458:	4613      	mov	r3, r2
 801145a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	897a      	ldrh	r2, [r7, #10]
 8011460:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	893a      	ldrh	r2, [r7, #8]
 8011466:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	605a      	str	r2, [r3, #4]
}
 801146e:	bf00      	nop
 8011470:	3714      	adds	r7, #20
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801147a:	b480      	push	{r7}
 801147c:	b0bb      	sub	sp, #236	@ 0xec
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	881b      	ldrh	r3, [r3, #0]
 8011494:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	885b      	ldrh	r3, [r3, #2]
 801149a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 801149c:	f04f 0300 	mov.w	r3, #0
 80114a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80114a4:	f04f 0300 	mov.w	r3, #0
 80114a8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80114b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80114b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80114b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80114bc:	e03b      	b.n	8011536 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80114be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80114c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80114ca:	e00c      	b.n	80114e6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80114cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114d0:	1d1a      	adds	r2, r3, #4
 80114d2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80114d6:	f04f 0200 	mov.w	r2, #0
 80114da:	601a      	str	r2, [r3, #0]
        j--;
 80114dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80114e0:	3b01      	subs	r3, #1
 80114e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80114e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1ee      	bne.n	80114cc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80114ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114f2:	1d1a      	adds	r2, r3, #4
 80114f4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80114f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80114fc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80114fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011502:	3b01      	subs	r3, #1
 8011504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011508:	e00c      	b.n	8011524 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801150a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801150e:	1d1a      	adds	r2, r3, #4
 8011510:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011514:	f04f 0200 	mov.w	r2, #0
 8011518:	601a      	str	r2, [r3, #0]
        j--;
 801151a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801151e:	3b01      	subs	r3, #1
 8011520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1ee      	bne.n	801150a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 801152c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011530:	3b01      	subs	r3, #1
 8011532:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1bf      	bne.n	80114be <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801153e:	2300      	movs	r3, #0
 8011540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011544:	e2c7      	b.n	8011ad6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801154a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	685a      	ldr	r2, [r3, #4]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	885b      	ldrh	r3, [r3, #2]
 8011554:	3301      	adds	r3, #1
 8011556:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 801155a:	fb01 f303 	mul.w	r3, r1, r3
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4413      	add	r3, r2
 8011562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011574:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801157c:	3301      	adds	r3, #1
 801157e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011582:	e02c      	b.n	80115de <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685a      	ldr	r2, [r3, #4]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	885b      	ldrh	r3, [r3, #2]
 801158c:	4619      	mov	r1, r3
 801158e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011592:	fb03 f101 	mul.w	r1, r3, r1
 8011596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801159a:	440b      	add	r3, r1
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	4413      	add	r3, r2
 80115a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80115a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80115ac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80115b0:	eeb0 7ae7 	vabs.f32	s14, s15
 80115b4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115b8:	eef0 7ae7 	vabs.f32	s15, s15
 80115bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c4:	dd06      	ble.n	80115d4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80115c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80115ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 80115ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80115d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80115d8:	3301      	adds	r3, #1
 80115da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80115de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80115e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d3cd      	bcc.n	8011584 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80115e8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	f000 809b 	beq.w	801172e <arm_mat_inverse_f32+0x2b4>
 80115f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80115fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011600:	429a      	cmp	r2, r3
 8011602:	f000 8094 	beq.w	801172e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	885b      	ldrh	r3, [r3, #2]
 801161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801161c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801161e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011628:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801162a:	fb03 f202 	mul.w	r2, r3, r2
 801162e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011632:	4413      	add	r3, r2
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801163a:	4413      	add	r3, r2
 801163c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011642:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011646:	fb03 f202 	mul.w	r2, r3, r2
 801164a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801164e:	4413      	add	r3, r2
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011656:	4413      	add	r3, r2
 8011658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801165c:	2300      	movs	r3, #0
 801165e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011662:	e018      	b.n	8011696 <arm_mat_inverse_f32+0x21c>
 8011664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801166c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011670:	1d1a      	adds	r2, r3, #4
 8011672:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011682:	1d1a      	adds	r2, r3, #4
 8011684:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801168a:	601a      	str	r2, [r3, #0]
 801168c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011690:	3301      	adds	r3, #1
 8011692:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801169a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801169c:	429a      	cmp	r2, r3
 801169e:	dbe1      	blt.n	8011664 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	885b      	ldrh	r3, [r3, #2]
 80116b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80116b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80116ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80116be:	fb02 f303 	mul.w	r3, r2, r3
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80116c8:	4413      	add	r3, r2
 80116ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80116ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80116d4:	fb02 f303 	mul.w	r3, r2, r3
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80116de:	4413      	add	r3, r2
 80116e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80116e4:	2300      	movs	r3, #0
 80116e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80116ea:	e018      	b.n	801171e <arm_mat_inverse_f32+0x2a4>
 80116ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80116f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116f8:	1d1a      	adds	r2, r3, #4
 80116fa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80116fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011702:	6812      	ldr	r2, [r2, #0]
 8011704:	601a      	str	r2, [r3, #0]
 8011706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801170a:	1d1a      	adds	r2, r3, #4
 801170c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011718:	3301      	adds	r3, #1
 801171a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801171e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011724:	429a      	cmp	r2, r3
 8011726:	dbe1      	blt.n	80116ec <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011728:	2301      	movs	r3, #1
 801172a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801172e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011732:	2b01      	cmp	r3, #1
 8011734:	d009      	beq.n	801174a <arm_mat_inverse_f32+0x2d0>
 8011736:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801173a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011742:	d102      	bne.n	801174a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011744:	f06f 0304 	mvn.w	r3, #4
 8011748:	e208      	b.n	8011b5c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801174a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801174e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8011752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011756:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	885b      	ldrh	r3, [r3, #2]
 8011766:	637b      	str	r3, [r7, #52]	@ 0x34
 8011768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801176a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	633b      	str	r3, [r7, #48]	@ 0x30
 8011772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011776:	fb03 f202 	mul.w	r2, r3, r2
 801177a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801177e:	4413      	add	r3, r2
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011786:	4413      	add	r3, r2
 8011788:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801178c:	2300      	movs	r3, #0
 801178e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011792:	e011      	b.n	80117b8 <arm_mat_inverse_f32+0x33e>
 8011794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011798:	1d1a      	adds	r2, r3, #4
 801179a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801179e:	ed93 7a00 	vldr	s14, [r3]
 80117a2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80117a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117aa:	edc3 7a00 	vstr	s15, [r3]
 80117ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80117b2:	3301      	adds	r3, #1
 80117b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80117b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80117bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117be:	429a      	cmp	r2, r3
 80117c0:	dbe8      	blt.n	8011794 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	885b      	ldrh	r3, [r3, #2]
 80117ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117d8:	fb02 f303 	mul.w	r3, r2, r3
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80117e2:	4413      	add	r3, r2
 80117e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80117e8:	2300      	movs	r3, #0
 80117ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80117ee:	e011      	b.n	8011814 <arm_mat_inverse_f32+0x39a>
 80117f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117f4:	1d1a      	adds	r2, r3, #4
 80117f6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80117fa:	ed93 7a00 	vldr	s14, [r3]
 80117fe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011806:	edc3 7a00 	vstr	s15, [r3]
 801180a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801180e:	3301      	adds	r3, #1
 8011810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011814:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801181a:	429a      	cmp	r2, r3
 801181c:	dbe8      	blt.n	80117f0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011824:	e0ae      	b.n	8011984 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	685a      	ldr	r2, [r3, #4]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	885b      	ldrh	r3, [r3, #2]
 801182e:	4619      	mov	r1, r3
 8011830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011834:	fb03 f101 	mul.w	r1, r3, r1
 8011838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801183c:	440b      	add	r3, r1
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4413      	add	r3, r2
 8011842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	885b      	ldrh	r3, [r3, #2]
 8011864:	617b      	str	r3, [r7, #20]
 8011866:	697a      	ldr	r2, [r7, #20]
 8011868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	613b      	str	r3, [r7, #16]
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011876:	fb03 f202 	mul.w	r2, r3, r2
 801187a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801187e:	4413      	add	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011886:	4413      	add	r3, r2
 8011888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011890:	fb03 f202 	mul.w	r2, r3, r2
 8011894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011898:	4413      	add	r3, r2
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80118a0:	4413      	add	r3, r2
 80118a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80118a6:	2300      	movs	r3, #0
 80118a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80118ac:	e01a      	b.n	80118e4 <arm_mat_inverse_f32+0x46a>
 80118ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118b2:	1d1a      	adds	r2, r3, #4
 80118b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80118b8:	ed93 7a00 	vldr	s14, [r3]
 80118bc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80118c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118c8:	1d1a      	adds	r2, r3, #4
 80118ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80118ce:	ed93 7a00 	vldr	s14, [r3]
 80118d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118d6:	edc3 7a00 	vstr	s15, [r3]
 80118da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80118de:	3301      	adds	r3, #1
 80118e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80118e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	dbdf      	blt.n	80118ae <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	885b      	ldrh	r3, [r3, #2]
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	60bb      	str	r3, [r7, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801190e:	fb02 f303 	mul.w	r3, r2, r3
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011918:	4413      	add	r3, r2
 801191a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011922:	fb02 f303 	mul.w	r3, r2, r3
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801192c:	4413      	add	r3, r2
 801192e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011932:	2300      	movs	r3, #0
 8011934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011938:	e01a      	b.n	8011970 <arm_mat_inverse_f32+0x4f6>
 801193a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801193e:	1d1a      	adds	r2, r3, #4
 8011940:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011944:	ed93 7a00 	vldr	s14, [r3]
 8011948:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011954:	1d1a      	adds	r2, r3, #4
 8011956:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801195a:	ed93 7a00 	vldr	s14, [r3]
 801195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011962:	edc3 7a00 	vstr	s15, [r3]
 8011966:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801196a:	3301      	adds	r3, #1
 801196c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011970:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	429a      	cmp	r2, r3
 8011978:	dbdf      	blt.n	801193a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 801197a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801197e:	3301      	adds	r3, #1
 8011980:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011984:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801198a:	429a      	cmp	r2, r3
 801198c:	f4ff af4b 	bcc.w	8011826 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011992:	3301      	adds	r3, #1
 8011994:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011998:	e092      	b.n	8011ac0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	885b      	ldrh	r3, [r3, #2]
 80119a2:	4619      	mov	r1, r3
 80119a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80119a8:	fb03 f101 	mul.w	r1, r3, r1
 80119ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80119b0:	440b      	add	r3, r1
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80119ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	885b      	ldrh	r3, [r3, #2]
 80119d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80119d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	623b      	str	r3, [r7, #32]
 80119e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80119e6:	fb03 f202 	mul.w	r2, r3, r2
 80119ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80119f4:	4413      	add	r3, r2
 80119f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80119f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119fc:	fb03 f202 	mul.w	r2, r3, r2
 8011a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011a04:	4413      	add	r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011a0a:	4413      	add	r3, r2
 8011a0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8011a0e:	2300      	movs	r3, #0
 8011a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011a12:	e014      	b.n	8011a3e <arm_mat_inverse_f32+0x5c4>
 8011a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a16:	1d1a      	adds	r2, r3, #4
 8011a18:	677a      	str	r2, [r7, #116]	@ 0x74
 8011a1a:	ed93 7a00 	vldr	s14, [r3]
 8011a1e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a28:	1d1a      	adds	r2, r3, #4
 8011a2a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011a2c:	ed93 7a00 	vldr	s14, [r3]
 8011a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a34:	edc3 7a00 	vstr	s15, [r3]
 8011a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011a3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	dbe6      	blt.n	8011a14 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	885b      	ldrh	r3, [r3, #2]
 8011a56:	61fb      	str	r3, [r7, #28]
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	61bb      	str	r3, [r7, #24]
 8011a5c:	69fb      	ldr	r3, [r7, #28]
 8011a5e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011a62:	fb02 f303 	mul.w	r3, r2, r3
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011a6a:	4413      	add	r3, r2
 8011a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a72:	fb02 f303 	mul.w	r3, r2, r3
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011a7a:	4413      	add	r3, r2
 8011a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a7e:	2300      	movs	r3, #0
 8011a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8011a82:	e014      	b.n	8011aae <arm_mat_inverse_f32+0x634>
 8011a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011a86:	1d1a      	adds	r2, r3, #4
 8011a88:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011a8a:	ed93 7a00 	vldr	s14, [r3]
 8011a8e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a98:	1d1a      	adds	r2, r3, #4
 8011a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011a9c:	ed93 7a00 	vldr	s14, [r3]
 8011aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aa4:	edc3 7a00 	vstr	s15, [r3]
 8011aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011aaa:	3301      	adds	r3, #1
 8011aac:	673b      	str	r3, [r7, #112]	@ 0x70
 8011aae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	dbe6      	blt.n	8011a84 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011aba:	3301      	adds	r3, #1
 8011abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011ac0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	f4ff af67 	bcc.w	801199a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8011acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011adc:	429a      	cmp	r2, r3
 8011ade:	f4ff ad32 	bcc.w	8011546 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8011ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d033      	beq.n	8011b58 <arm_mat_inverse_f32+0x6de>
 8011af0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afc:	d12c      	bne.n	8011b58 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8011b04:	2300      	movs	r3, #0
 8011b06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011b0a:	e010      	b.n	8011b2e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8011b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011b14:	4413      	add	r3, r2
 8011b16:	edd3 7a00 	vldr	s15, [r3]
 8011b1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b22:	d10d      	bne.n	8011b40 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8011b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011b28:	3301      	adds	r3, #1
 8011b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b32:	fb02 f303 	mul.w	r3, r2, r3
 8011b36:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d3e6      	bcc.n	8011b0c <arm_mat_inverse_f32+0x692>
 8011b3e:	e000      	b.n	8011b42 <arm_mat_inverse_f32+0x6c8>
            break;
 8011b40:	bf00      	nop
      }

      if (i == numRows * numCols)
 8011b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b46:	fb02 f303 	mul.w	r3, r2, r3
 8011b4a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d102      	bne.n	8011b58 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8011b52:	23fb      	movs	r3, #251	@ 0xfb
 8011b54:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8011b58:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	37ec      	adds	r7, #236	@ 0xec
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b093      	sub	sp, #76	@ 0x4c
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	885b      	ldrh	r3, [r3, #2]
 8011b9c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	885b      	ldrh	r3, [r3, #2]
 8011ba2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ba8:	8b7b      	ldrh	r3, [r7, #26]
 8011baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8011bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8011bb6:	8b3b      	ldrh	r3, [r7, #24]
 8011bb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8011bc0:	f04f 0300 	mov.w	r3, #0
 8011bc4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8011bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bc8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8011bca:	8afb      	ldrh	r3, [r7, #22]
 8011bcc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8011bce:	e017      	b.n	8011c00 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8011bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bd2:	1d1a      	adds	r2, r3, #4
 8011bd4:	647a      	str	r2, [r7, #68]	@ 0x44
 8011bd6:	ed93 7a00 	vldr	s14, [r3]
 8011bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bdc:	edd3 7a00 	vldr	s15, [r3]
 8011be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011be4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8011bf0:	8b3b      	ldrh	r3, [r7, #24]
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011bf6:	4413      	add	r3, r2
 8011bf8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8011c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e4      	bne.n	8011bd0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8011c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c08:	1d1a      	adds	r2, r3, #4
 8011c0a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c0e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8011c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c12:	3b01      	subs	r3, #1
 8011c14:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8011c16:	8b3a      	ldrh	r2, [r7, #24]
 8011c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	009b      	lsls	r3, r3, #2
 8011c1e:	6a3a      	ldr	r2, [r7, #32]
 8011c20:	4413      	add	r3, r2
 8011c22:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8011c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1ca      	bne.n	8011bc0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8011c2a:	8b3b      	ldrh	r3, [r7, #24]
 8011c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c2e:	4413      	add	r3, r2
 8011c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8011c32:	8afb      	ldrh	r3, [r7, #22]
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011c38:	4413      	add	r3, r2
 8011c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8011c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8011c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d1b1      	bne.n	8011bac <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8011c4c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	374c      	adds	r7, #76	@ 0x4c
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b08b      	sub	sp, #44	@ 0x2c
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	ed87 0a02 	vstr	s0, [r7, #8]
 8011c68:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	885b      	ldrh	r3, [r3, #2]
 8011c80:	fb02 f303 	mul.w	r3, r2, r3
 8011c84:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011c8a:	e010      	b.n	8011cae <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8e:	1d1a      	adds	r2, r3, #4
 8011c90:	627a      	str	r2, [r7, #36]	@ 0x24
 8011c92:	ed93 7a00 	vldr	s14, [r3]
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	1d1a      	adds	r2, r3, #4
 8011c9a:	623a      	str	r2, [r7, #32]
 8011c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ca4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1eb      	bne.n	8011c8c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8011cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	372c      	adds	r7, #44	@ 0x2c
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b08b      	sub	sp, #44	@ 0x2c
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	881b      	ldrh	r3, [r3, #0]
 8011cea:	461a      	mov	r2, r3
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	885b      	ldrh	r3, [r3, #2]
 8011cf0:	fb02 f303 	mul.w	r3, r2, r3
 8011cf4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011cfa:	e013      	b.n	8011d24 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8011d02:	ed93 7a00 	vldr	s14, [r3]
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	1d1a      	adds	r2, r3, #4
 8011d0a:	623a      	str	r2, [r7, #32]
 8011d0c:	edd3 7a00 	vldr	s15, [r3]
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	1d1a      	adds	r2, r3, #4
 8011d14:	61fa      	str	r2, [r7, #28]
 8011d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d1a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	3b01      	subs	r3, #1
 8011d22:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d1e8      	bne.n	8011cfc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	372c      	adds	r7, #44	@ 0x2c
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011d3e:	b480      	push	{r7}
 8011d40:	b08b      	sub	sp, #44	@ 0x2c
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	885b      	ldrh	r3, [r3, #2]
 8011d5e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8011d60:	89fb      	ldrh	r3, [r7, #14]
 8011d62:	61bb      	str	r3, [r7, #24]
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	693a      	ldr	r2, [r7, #16]
 8011d6e:	4413      	add	r3, r2
 8011d70:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8011d72:	89bb      	ldrh	r3, [r7, #12]
 8011d74:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8011d76:	e00d      	b.n	8011d94 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	1d1a      	adds	r2, r3, #4
 8011d7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	6a3b      	ldr	r3, [r7, #32]
 8011d82:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8011d84:	89fb      	ldrh	r3, [r7, #14]
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	6a3a      	ldr	r2, [r7, #32]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	3b01      	subs	r3, #1
 8011d92:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1ee      	bne.n	8011d78 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1dd      	bne.n	8011d68 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011dac:	2300      	movs	r3, #0
 8011dae:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8011db0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	372c      	adds	r7, #44	@ 0x2c
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <malloc>:
 8011dc0:	4b02      	ldr	r3, [pc, #8]	@ (8011dcc <malloc+0xc>)
 8011dc2:	4601      	mov	r1, r0
 8011dc4:	6818      	ldr	r0, [r3, #0]
 8011dc6:	f000 b825 	b.w	8011e14 <_malloc_r>
 8011dca:	bf00      	nop
 8011dcc:	20000144 	.word	0x20000144

08011dd0 <sbrk_aligned>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8011e10 <sbrk_aligned+0x40>)
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	6831      	ldr	r1, [r6, #0]
 8011dd8:	4605      	mov	r5, r0
 8011dda:	b911      	cbnz	r1, 8011de2 <sbrk_aligned+0x12>
 8011ddc:	f000 f8ae 	bl	8011f3c <_sbrk_r>
 8011de0:	6030      	str	r0, [r6, #0]
 8011de2:	4621      	mov	r1, r4
 8011de4:	4628      	mov	r0, r5
 8011de6:	f000 f8a9 	bl	8011f3c <_sbrk_r>
 8011dea:	1c43      	adds	r3, r0, #1
 8011dec:	d103      	bne.n	8011df6 <sbrk_aligned+0x26>
 8011dee:	f04f 34ff 	mov.w	r4, #4294967295
 8011df2:	4620      	mov	r0, r4
 8011df4:	bd70      	pop	{r4, r5, r6, pc}
 8011df6:	1cc4      	adds	r4, r0, #3
 8011df8:	f024 0403 	bic.w	r4, r4, #3
 8011dfc:	42a0      	cmp	r0, r4
 8011dfe:	d0f8      	beq.n	8011df2 <sbrk_aligned+0x22>
 8011e00:	1a21      	subs	r1, r4, r0
 8011e02:	4628      	mov	r0, r5
 8011e04:	f000 f89a 	bl	8011f3c <_sbrk_r>
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d1f2      	bne.n	8011df2 <sbrk_aligned+0x22>
 8011e0c:	e7ef      	b.n	8011dee <sbrk_aligned+0x1e>
 8011e0e:	bf00      	nop
 8011e10:	20002270 	.word	0x20002270

08011e14 <_malloc_r>:
 8011e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e18:	1ccd      	adds	r5, r1, #3
 8011e1a:	f025 0503 	bic.w	r5, r5, #3
 8011e1e:	3508      	adds	r5, #8
 8011e20:	2d0c      	cmp	r5, #12
 8011e22:	bf38      	it	cc
 8011e24:	250c      	movcc	r5, #12
 8011e26:	2d00      	cmp	r5, #0
 8011e28:	4606      	mov	r6, r0
 8011e2a:	db01      	blt.n	8011e30 <_malloc_r+0x1c>
 8011e2c:	42a9      	cmp	r1, r5
 8011e2e:	d904      	bls.n	8011e3a <_malloc_r+0x26>
 8011e30:	230c      	movs	r3, #12
 8011e32:	6033      	str	r3, [r6, #0]
 8011e34:	2000      	movs	r0, #0
 8011e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f10 <_malloc_r+0xfc>
 8011e3e:	f000 f869 	bl	8011f14 <__malloc_lock>
 8011e42:	f8d8 3000 	ldr.w	r3, [r8]
 8011e46:	461c      	mov	r4, r3
 8011e48:	bb44      	cbnz	r4, 8011e9c <_malloc_r+0x88>
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7ff ffbf 	bl	8011dd0 <sbrk_aligned>
 8011e52:	1c43      	adds	r3, r0, #1
 8011e54:	4604      	mov	r4, r0
 8011e56:	d158      	bne.n	8011f0a <_malloc_r+0xf6>
 8011e58:	f8d8 4000 	ldr.w	r4, [r8]
 8011e5c:	4627      	mov	r7, r4
 8011e5e:	2f00      	cmp	r7, #0
 8011e60:	d143      	bne.n	8011eea <_malloc_r+0xd6>
 8011e62:	2c00      	cmp	r4, #0
 8011e64:	d04b      	beq.n	8011efe <_malloc_r+0xea>
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	4639      	mov	r1, r7
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	eb04 0903 	add.w	r9, r4, r3
 8011e70:	f000 f864 	bl	8011f3c <_sbrk_r>
 8011e74:	4581      	cmp	r9, r0
 8011e76:	d142      	bne.n	8011efe <_malloc_r+0xea>
 8011e78:	6821      	ldr	r1, [r4, #0]
 8011e7a:	1a6d      	subs	r5, r5, r1
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	4630      	mov	r0, r6
 8011e80:	f7ff ffa6 	bl	8011dd0 <sbrk_aligned>
 8011e84:	3001      	adds	r0, #1
 8011e86:	d03a      	beq.n	8011efe <_malloc_r+0xea>
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	442b      	add	r3, r5
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011e92:	685a      	ldr	r2, [r3, #4]
 8011e94:	bb62      	cbnz	r2, 8011ef0 <_malloc_r+0xdc>
 8011e96:	f8c8 7000 	str.w	r7, [r8]
 8011e9a:	e00f      	b.n	8011ebc <_malloc_r+0xa8>
 8011e9c:	6822      	ldr	r2, [r4, #0]
 8011e9e:	1b52      	subs	r2, r2, r5
 8011ea0:	d420      	bmi.n	8011ee4 <_malloc_r+0xd0>
 8011ea2:	2a0b      	cmp	r2, #11
 8011ea4:	d917      	bls.n	8011ed6 <_malloc_r+0xc2>
 8011ea6:	1961      	adds	r1, r4, r5
 8011ea8:	42a3      	cmp	r3, r4
 8011eaa:	6025      	str	r5, [r4, #0]
 8011eac:	bf18      	it	ne
 8011eae:	6059      	strne	r1, [r3, #4]
 8011eb0:	6863      	ldr	r3, [r4, #4]
 8011eb2:	bf08      	it	eq
 8011eb4:	f8c8 1000 	streq.w	r1, [r8]
 8011eb8:	5162      	str	r2, [r4, r5]
 8011eba:	604b      	str	r3, [r1, #4]
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	f000 f82f 	bl	8011f20 <__malloc_unlock>
 8011ec2:	f104 000b 	add.w	r0, r4, #11
 8011ec6:	1d23      	adds	r3, r4, #4
 8011ec8:	f020 0007 	bic.w	r0, r0, #7
 8011ecc:	1ac2      	subs	r2, r0, r3
 8011ece:	bf1c      	itt	ne
 8011ed0:	1a1b      	subne	r3, r3, r0
 8011ed2:	50a3      	strne	r3, [r4, r2]
 8011ed4:	e7af      	b.n	8011e36 <_malloc_r+0x22>
 8011ed6:	6862      	ldr	r2, [r4, #4]
 8011ed8:	42a3      	cmp	r3, r4
 8011eda:	bf0c      	ite	eq
 8011edc:	f8c8 2000 	streq.w	r2, [r8]
 8011ee0:	605a      	strne	r2, [r3, #4]
 8011ee2:	e7eb      	b.n	8011ebc <_malloc_r+0xa8>
 8011ee4:	4623      	mov	r3, r4
 8011ee6:	6864      	ldr	r4, [r4, #4]
 8011ee8:	e7ae      	b.n	8011e48 <_malloc_r+0x34>
 8011eea:	463c      	mov	r4, r7
 8011eec:	687f      	ldr	r7, [r7, #4]
 8011eee:	e7b6      	b.n	8011e5e <_malloc_r+0x4a>
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	42a3      	cmp	r3, r4
 8011ef6:	d1fb      	bne.n	8011ef0 <_malloc_r+0xdc>
 8011ef8:	2300      	movs	r3, #0
 8011efa:	6053      	str	r3, [r2, #4]
 8011efc:	e7de      	b.n	8011ebc <_malloc_r+0xa8>
 8011efe:	230c      	movs	r3, #12
 8011f00:	6033      	str	r3, [r6, #0]
 8011f02:	4630      	mov	r0, r6
 8011f04:	f000 f80c 	bl	8011f20 <__malloc_unlock>
 8011f08:	e794      	b.n	8011e34 <_malloc_r+0x20>
 8011f0a:	6005      	str	r5, [r0, #0]
 8011f0c:	e7d6      	b.n	8011ebc <_malloc_r+0xa8>
 8011f0e:	bf00      	nop
 8011f10:	20002274 	.word	0x20002274

08011f14 <__malloc_lock>:
 8011f14:	4801      	ldr	r0, [pc, #4]	@ (8011f1c <__malloc_lock+0x8>)
 8011f16:	f000 b84b 	b.w	8011fb0 <__retarget_lock_acquire_recursive>
 8011f1a:	bf00      	nop
 8011f1c:	200023b4 	.word	0x200023b4

08011f20 <__malloc_unlock>:
 8011f20:	4801      	ldr	r0, [pc, #4]	@ (8011f28 <__malloc_unlock+0x8>)
 8011f22:	f000 b846 	b.w	8011fb2 <__retarget_lock_release_recursive>
 8011f26:	bf00      	nop
 8011f28:	200023b4 	.word	0x200023b4

08011f2c <memset>:
 8011f2c:	4402      	add	r2, r0
 8011f2e:	4603      	mov	r3, r0
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d100      	bne.n	8011f36 <memset+0xa>
 8011f34:	4770      	bx	lr
 8011f36:	f803 1b01 	strb.w	r1, [r3], #1
 8011f3a:	e7f9      	b.n	8011f30 <memset+0x4>

08011f3c <_sbrk_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d06      	ldr	r5, [pc, #24]	@ (8011f58 <_sbrk_r+0x1c>)
 8011f40:	2300      	movs	r3, #0
 8011f42:	4604      	mov	r4, r0
 8011f44:	4608      	mov	r0, r1
 8011f46:	602b      	str	r3, [r5, #0]
 8011f48:	f7f7 f926 	bl	8009198 <_sbrk>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_sbrk_r+0x1a>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_sbrk_r+0x1a>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	200023b0 	.word	0x200023b0

08011f5c <__errno>:
 8011f5c:	4b01      	ldr	r3, [pc, #4]	@ (8011f64 <__errno+0x8>)
 8011f5e:	6818      	ldr	r0, [r3, #0]
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	20000144 	.word	0x20000144

08011f68 <__libc_init_array>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8011fa0 <__libc_init_array+0x38>)
 8011f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8011fa4 <__libc_init_array+0x3c>)
 8011f6e:	1b64      	subs	r4, r4, r5
 8011f70:	10a4      	asrs	r4, r4, #2
 8011f72:	2600      	movs	r6, #0
 8011f74:	42a6      	cmp	r6, r4
 8011f76:	d109      	bne.n	8011f8c <__libc_init_array+0x24>
 8011f78:	4d0b      	ldr	r5, [pc, #44]	@ (8011fa8 <__libc_init_array+0x40>)
 8011f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8011fac <__libc_init_array+0x44>)
 8011f7c:	f001 ff30 	bl	8013de0 <_init>
 8011f80:	1b64      	subs	r4, r4, r5
 8011f82:	10a4      	asrs	r4, r4, #2
 8011f84:	2600      	movs	r6, #0
 8011f86:	42a6      	cmp	r6, r4
 8011f88:	d105      	bne.n	8011f96 <__libc_init_array+0x2e>
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}
 8011f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f90:	4798      	blx	r3
 8011f92:	3601      	adds	r6, #1
 8011f94:	e7ee      	b.n	8011f74 <__libc_init_array+0xc>
 8011f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f9a:	4798      	blx	r3
 8011f9c:	3601      	adds	r6, #1
 8011f9e:	e7f2      	b.n	8011f86 <__libc_init_array+0x1e>
 8011fa0:	08014460 	.word	0x08014460
 8011fa4:	08014460 	.word	0x08014460
 8011fa8:	08014460 	.word	0x08014460
 8011fac:	08014464 	.word	0x08014464

08011fb0 <__retarget_lock_acquire_recursive>:
 8011fb0:	4770      	bx	lr

08011fb2 <__retarget_lock_release_recursive>:
 8011fb2:	4770      	bx	lr

08011fb4 <memcpy>:
 8011fb4:	440a      	add	r2, r1
 8011fb6:	4291      	cmp	r1, r2
 8011fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fbc:	d100      	bne.n	8011fc0 <memcpy+0xc>
 8011fbe:	4770      	bx	lr
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fca:	4291      	cmp	r1, r2
 8011fcc:	d1f9      	bne.n	8011fc2 <memcpy+0xe>
 8011fce:	bd10      	pop	{r4, pc}

08011fd0 <cos>:
 8011fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fd2:	ec53 2b10 	vmov	r2, r3, d0
 8011fd6:	4826      	ldr	r0, [pc, #152]	@ (8012070 <cos+0xa0>)
 8011fd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011fdc:	4281      	cmp	r1, r0
 8011fde:	d806      	bhi.n	8011fee <cos+0x1e>
 8011fe0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012068 <cos+0x98>
 8011fe4:	b005      	add	sp, #20
 8011fe6:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fea:	f000 b9bd 	b.w	8012368 <__kernel_cos>
 8011fee:	4821      	ldr	r0, [pc, #132]	@ (8012074 <cos+0xa4>)
 8011ff0:	4281      	cmp	r1, r0
 8011ff2:	d908      	bls.n	8012006 <cos+0x36>
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	f7ee f912 	bl	8000220 <__aeabi_dsub>
 8011ffc:	ec41 0b10 	vmov	d0, r0, r1
 8012000:	b005      	add	sp, #20
 8012002:	f85d fb04 	ldr.w	pc, [sp], #4
 8012006:	4668      	mov	r0, sp
 8012008:	f000 fb32 	bl	8012670 <__ieee754_rem_pio2>
 801200c:	f000 0003 	and.w	r0, r0, #3
 8012010:	2801      	cmp	r0, #1
 8012012:	d00b      	beq.n	801202c <cos+0x5c>
 8012014:	2802      	cmp	r0, #2
 8012016:	d015      	beq.n	8012044 <cos+0x74>
 8012018:	b9d8      	cbnz	r0, 8012052 <cos+0x82>
 801201a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801201e:	ed9d 0b00 	vldr	d0, [sp]
 8012022:	f000 f9a1 	bl	8012368 <__kernel_cos>
 8012026:	ec51 0b10 	vmov	r0, r1, d0
 801202a:	e7e7      	b.n	8011ffc <cos+0x2c>
 801202c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012030:	ed9d 0b00 	vldr	d0, [sp]
 8012034:	f000 fa60 	bl	80124f8 <__kernel_sin>
 8012038:	ec53 2b10 	vmov	r2, r3, d0
 801203c:	4610      	mov	r0, r2
 801203e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012042:	e7db      	b.n	8011ffc <cos+0x2c>
 8012044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012048:	ed9d 0b00 	vldr	d0, [sp]
 801204c:	f000 f98c 	bl	8012368 <__kernel_cos>
 8012050:	e7f2      	b.n	8012038 <cos+0x68>
 8012052:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012056:	ed9d 0b00 	vldr	d0, [sp]
 801205a:	2001      	movs	r0, #1
 801205c:	f000 fa4c 	bl	80124f8 <__kernel_sin>
 8012060:	e7e1      	b.n	8012026 <cos+0x56>
 8012062:	bf00      	nop
 8012064:	f3af 8000 	nop.w
	...
 8012070:	3fe921fb 	.word	0x3fe921fb
 8012074:	7fefffff 	.word	0x7fefffff

08012078 <sin>:
 8012078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801207a:	ec53 2b10 	vmov	r2, r3, d0
 801207e:	4826      	ldr	r0, [pc, #152]	@ (8012118 <sin+0xa0>)
 8012080:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012084:	4281      	cmp	r1, r0
 8012086:	d807      	bhi.n	8012098 <sin+0x20>
 8012088:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012110 <sin+0x98>
 801208c:	2000      	movs	r0, #0
 801208e:	b005      	add	sp, #20
 8012090:	f85d eb04 	ldr.w	lr, [sp], #4
 8012094:	f000 ba30 	b.w	80124f8 <__kernel_sin>
 8012098:	4820      	ldr	r0, [pc, #128]	@ (801211c <sin+0xa4>)
 801209a:	4281      	cmp	r1, r0
 801209c:	d908      	bls.n	80120b0 <sin+0x38>
 801209e:	4610      	mov	r0, r2
 80120a0:	4619      	mov	r1, r3
 80120a2:	f7ee f8bd 	bl	8000220 <__aeabi_dsub>
 80120a6:	ec41 0b10 	vmov	d0, r0, r1
 80120aa:	b005      	add	sp, #20
 80120ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80120b0:	4668      	mov	r0, sp
 80120b2:	f000 fadd 	bl	8012670 <__ieee754_rem_pio2>
 80120b6:	f000 0003 	and.w	r0, r0, #3
 80120ba:	2801      	cmp	r0, #1
 80120bc:	d00c      	beq.n	80120d8 <sin+0x60>
 80120be:	2802      	cmp	r0, #2
 80120c0:	d011      	beq.n	80120e6 <sin+0x6e>
 80120c2:	b9e8      	cbnz	r0, 8012100 <sin+0x88>
 80120c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120c8:	ed9d 0b00 	vldr	d0, [sp]
 80120cc:	2001      	movs	r0, #1
 80120ce:	f000 fa13 	bl	80124f8 <__kernel_sin>
 80120d2:	ec51 0b10 	vmov	r0, r1, d0
 80120d6:	e7e6      	b.n	80120a6 <sin+0x2e>
 80120d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120dc:	ed9d 0b00 	vldr	d0, [sp]
 80120e0:	f000 f942 	bl	8012368 <__kernel_cos>
 80120e4:	e7f5      	b.n	80120d2 <sin+0x5a>
 80120e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120ea:	ed9d 0b00 	vldr	d0, [sp]
 80120ee:	2001      	movs	r0, #1
 80120f0:	f000 fa02 	bl	80124f8 <__kernel_sin>
 80120f4:	ec53 2b10 	vmov	r2, r3, d0
 80120f8:	4610      	mov	r0, r2
 80120fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80120fe:	e7d2      	b.n	80120a6 <sin+0x2e>
 8012100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012104:	ed9d 0b00 	vldr	d0, [sp]
 8012108:	f000 f92e 	bl	8012368 <__kernel_cos>
 801210c:	e7f2      	b.n	80120f4 <sin+0x7c>
 801210e:	bf00      	nop
	...
 8012118:	3fe921fb 	.word	0x3fe921fb
 801211c:	7fefffff 	.word	0x7fefffff

08012120 <fmodf>:
 8012120:	b508      	push	{r3, lr}
 8012122:	ed2d 8b02 	vpush	{d8}
 8012126:	eef0 8a40 	vmov.f32	s17, s0
 801212a:	eeb0 8a60 	vmov.f32	s16, s1
 801212e:	f000 fd43 	bl	8012bb8 <__ieee754_fmodf>
 8012132:	eef4 8a48 	vcmp.f32	s17, s16
 8012136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213a:	d60c      	bvs.n	8012156 <fmodf+0x36>
 801213c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801215c <fmodf+0x3c>
 8012140:	eeb4 8a68 	vcmp.f32	s16, s17
 8012144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012148:	d105      	bne.n	8012156 <fmodf+0x36>
 801214a:	f7ff ff07 	bl	8011f5c <__errno>
 801214e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012152:	2321      	movs	r3, #33	@ 0x21
 8012154:	6003      	str	r3, [r0, #0]
 8012156:	ecbd 8b02 	vpop	{d8}
 801215a:	bd08      	pop	{r3, pc}
 801215c:	00000000 	.word	0x00000000

08012160 <sqrtf>:
 8012160:	b508      	push	{r3, lr}
 8012162:	ed2d 8b02 	vpush	{d8}
 8012166:	eeb0 8a40 	vmov.f32	s16, s0
 801216a:	f000 f8f7 	bl	801235c <__ieee754_sqrtf>
 801216e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012176:	d60c      	bvs.n	8012192 <sqrtf+0x32>
 8012178:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012198 <sqrtf+0x38>
 801217c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	d505      	bpl.n	8012192 <sqrtf+0x32>
 8012186:	f7ff fee9 	bl	8011f5c <__errno>
 801218a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801218e:	2321      	movs	r3, #33	@ 0x21
 8012190:	6003      	str	r3, [r0, #0]
 8012192:	ecbd 8b02 	vpop	{d8}
 8012196:	bd08      	pop	{r3, pc}
 8012198:	00000000 	.word	0x00000000

0801219c <cosf>:
 801219c:	ee10 3a10 	vmov	r3, s0
 80121a0:	b507      	push	{r0, r1, r2, lr}
 80121a2:	4a1e      	ldr	r2, [pc, #120]	@ (801221c <cosf+0x80>)
 80121a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121a8:	4293      	cmp	r3, r2
 80121aa:	d806      	bhi.n	80121ba <cosf+0x1e>
 80121ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012220 <cosf+0x84>
 80121b0:	b003      	add	sp, #12
 80121b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80121b6:	f000 bc5f 	b.w	8012a78 <__kernel_cosf>
 80121ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80121be:	d304      	bcc.n	80121ca <cosf+0x2e>
 80121c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80121c4:	b003      	add	sp, #12
 80121c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80121ca:	4668      	mov	r0, sp
 80121cc:	f000 fd76 	bl	8012cbc <__ieee754_rem_pio2f>
 80121d0:	f000 0003 	and.w	r0, r0, #3
 80121d4:	2801      	cmp	r0, #1
 80121d6:	d009      	beq.n	80121ec <cosf+0x50>
 80121d8:	2802      	cmp	r0, #2
 80121da:	d010      	beq.n	80121fe <cosf+0x62>
 80121dc:	b9b0      	cbnz	r0, 801220c <cosf+0x70>
 80121de:	eddd 0a01 	vldr	s1, [sp, #4]
 80121e2:	ed9d 0a00 	vldr	s0, [sp]
 80121e6:	f000 fc47 	bl	8012a78 <__kernel_cosf>
 80121ea:	e7eb      	b.n	80121c4 <cosf+0x28>
 80121ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80121f0:	ed9d 0a00 	vldr	s0, [sp]
 80121f4:	f000 fc98 	bl	8012b28 <__kernel_sinf>
 80121f8:	eeb1 0a40 	vneg.f32	s0, s0
 80121fc:	e7e2      	b.n	80121c4 <cosf+0x28>
 80121fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8012202:	ed9d 0a00 	vldr	s0, [sp]
 8012206:	f000 fc37 	bl	8012a78 <__kernel_cosf>
 801220a:	e7f5      	b.n	80121f8 <cosf+0x5c>
 801220c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012210:	ed9d 0a00 	vldr	s0, [sp]
 8012214:	2001      	movs	r0, #1
 8012216:	f000 fc87 	bl	8012b28 <__kernel_sinf>
 801221a:	e7d3      	b.n	80121c4 <cosf+0x28>
 801221c:	3f490fd8 	.word	0x3f490fd8
 8012220:	00000000 	.word	0x00000000

08012224 <sinf>:
 8012224:	ee10 3a10 	vmov	r3, s0
 8012228:	b507      	push	{r0, r1, r2, lr}
 801222a:	4a1f      	ldr	r2, [pc, #124]	@ (80122a8 <sinf+0x84>)
 801222c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012230:	4293      	cmp	r3, r2
 8012232:	d807      	bhi.n	8012244 <sinf+0x20>
 8012234:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80122ac <sinf+0x88>
 8012238:	2000      	movs	r0, #0
 801223a:	b003      	add	sp, #12
 801223c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012240:	f000 bc72 	b.w	8012b28 <__kernel_sinf>
 8012244:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012248:	d304      	bcc.n	8012254 <sinf+0x30>
 801224a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801224e:	b003      	add	sp, #12
 8012250:	f85d fb04 	ldr.w	pc, [sp], #4
 8012254:	4668      	mov	r0, sp
 8012256:	f000 fd31 	bl	8012cbc <__ieee754_rem_pio2f>
 801225a:	f000 0003 	and.w	r0, r0, #3
 801225e:	2801      	cmp	r0, #1
 8012260:	d00a      	beq.n	8012278 <sinf+0x54>
 8012262:	2802      	cmp	r0, #2
 8012264:	d00f      	beq.n	8012286 <sinf+0x62>
 8012266:	b9c0      	cbnz	r0, 801229a <sinf+0x76>
 8012268:	eddd 0a01 	vldr	s1, [sp, #4]
 801226c:	ed9d 0a00 	vldr	s0, [sp]
 8012270:	2001      	movs	r0, #1
 8012272:	f000 fc59 	bl	8012b28 <__kernel_sinf>
 8012276:	e7ea      	b.n	801224e <sinf+0x2a>
 8012278:	eddd 0a01 	vldr	s1, [sp, #4]
 801227c:	ed9d 0a00 	vldr	s0, [sp]
 8012280:	f000 fbfa 	bl	8012a78 <__kernel_cosf>
 8012284:	e7e3      	b.n	801224e <sinf+0x2a>
 8012286:	eddd 0a01 	vldr	s1, [sp, #4]
 801228a:	ed9d 0a00 	vldr	s0, [sp]
 801228e:	2001      	movs	r0, #1
 8012290:	f000 fc4a 	bl	8012b28 <__kernel_sinf>
 8012294:	eeb1 0a40 	vneg.f32	s0, s0
 8012298:	e7d9      	b.n	801224e <sinf+0x2a>
 801229a:	eddd 0a01 	vldr	s1, [sp, #4]
 801229e:	ed9d 0a00 	vldr	s0, [sp]
 80122a2:	f000 fbe9 	bl	8012a78 <__kernel_cosf>
 80122a6:	e7f5      	b.n	8012294 <sinf+0x70>
 80122a8:	3f490fd8 	.word	0x3f490fd8
 80122ac:	00000000 	.word	0x00000000

080122b0 <fmaxf>:
 80122b0:	b508      	push	{r3, lr}
 80122b2:	ed2d 8b02 	vpush	{d8}
 80122b6:	eeb0 8a40 	vmov.f32	s16, s0
 80122ba:	eef0 8a60 	vmov.f32	s17, s1
 80122be:	f000 f831 	bl	8012324 <__fpclassifyf>
 80122c2:	b930      	cbnz	r0, 80122d2 <fmaxf+0x22>
 80122c4:	eeb0 8a68 	vmov.f32	s16, s17
 80122c8:	eeb0 0a48 	vmov.f32	s0, s16
 80122cc:	ecbd 8b02 	vpop	{d8}
 80122d0:	bd08      	pop	{r3, pc}
 80122d2:	eeb0 0a68 	vmov.f32	s0, s17
 80122d6:	f000 f825 	bl	8012324 <__fpclassifyf>
 80122da:	2800      	cmp	r0, #0
 80122dc:	d0f4      	beq.n	80122c8 <fmaxf+0x18>
 80122de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80122e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e6:	dded      	ble.n	80122c4 <fmaxf+0x14>
 80122e8:	e7ee      	b.n	80122c8 <fmaxf+0x18>

080122ea <fminf>:
 80122ea:	b508      	push	{r3, lr}
 80122ec:	ed2d 8b02 	vpush	{d8}
 80122f0:	eeb0 8a40 	vmov.f32	s16, s0
 80122f4:	eef0 8a60 	vmov.f32	s17, s1
 80122f8:	f000 f814 	bl	8012324 <__fpclassifyf>
 80122fc:	b930      	cbnz	r0, 801230c <fminf+0x22>
 80122fe:	eeb0 8a68 	vmov.f32	s16, s17
 8012302:	eeb0 0a48 	vmov.f32	s0, s16
 8012306:	ecbd 8b02 	vpop	{d8}
 801230a:	bd08      	pop	{r3, pc}
 801230c:	eeb0 0a68 	vmov.f32	s0, s17
 8012310:	f000 f808 	bl	8012324 <__fpclassifyf>
 8012314:	2800      	cmp	r0, #0
 8012316:	d0f4      	beq.n	8012302 <fminf+0x18>
 8012318:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012320:	d5ed      	bpl.n	80122fe <fminf+0x14>
 8012322:	e7ee      	b.n	8012302 <fminf+0x18>

08012324 <__fpclassifyf>:
 8012324:	ee10 3a10 	vmov	r3, s0
 8012328:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801232c:	d00d      	beq.n	801234a <__fpclassifyf+0x26>
 801232e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012332:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012336:	d30a      	bcc.n	801234e <__fpclassifyf+0x2a>
 8012338:	4b07      	ldr	r3, [pc, #28]	@ (8012358 <__fpclassifyf+0x34>)
 801233a:	1e42      	subs	r2, r0, #1
 801233c:	429a      	cmp	r2, r3
 801233e:	d908      	bls.n	8012352 <__fpclassifyf+0x2e>
 8012340:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012344:	4258      	negs	r0, r3
 8012346:	4158      	adcs	r0, r3
 8012348:	4770      	bx	lr
 801234a:	2002      	movs	r0, #2
 801234c:	4770      	bx	lr
 801234e:	2004      	movs	r0, #4
 8012350:	4770      	bx	lr
 8012352:	2003      	movs	r0, #3
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop
 8012358:	007ffffe 	.word	0x007ffffe

0801235c <__ieee754_sqrtf>:
 801235c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012360:	4770      	bx	lr
 8012362:	0000      	movs	r0, r0
 8012364:	0000      	movs	r0, r0
	...

08012368 <__kernel_cos>:
 8012368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	ec57 6b10 	vmov	r6, r7, d0
 8012370:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012374:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012378:	ed8d 1b00 	vstr	d1, [sp]
 801237c:	d206      	bcs.n	801238c <__kernel_cos+0x24>
 801237e:	4630      	mov	r0, r6
 8012380:	4639      	mov	r1, r7
 8012382:	f7ee fb9f 	bl	8000ac4 <__aeabi_d2iz>
 8012386:	2800      	cmp	r0, #0
 8012388:	f000 8088 	beq.w	801249c <__kernel_cos+0x134>
 801238c:	4632      	mov	r2, r6
 801238e:	463b      	mov	r3, r7
 8012390:	4630      	mov	r0, r6
 8012392:	4639      	mov	r1, r7
 8012394:	f7ee f8fc 	bl	8000590 <__aeabi_dmul>
 8012398:	4b51      	ldr	r3, [pc, #324]	@ (80124e0 <__kernel_cos+0x178>)
 801239a:	2200      	movs	r2, #0
 801239c:	4604      	mov	r4, r0
 801239e:	460d      	mov	r5, r1
 80123a0:	f7ee f8f6 	bl	8000590 <__aeabi_dmul>
 80123a4:	a340      	add	r3, pc, #256	@ (adr r3, 80124a8 <__kernel_cos+0x140>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	4682      	mov	sl, r0
 80123ac:	468b      	mov	fp, r1
 80123ae:	4620      	mov	r0, r4
 80123b0:	4629      	mov	r1, r5
 80123b2:	f7ee f8ed 	bl	8000590 <__aeabi_dmul>
 80123b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80124b0 <__kernel_cos+0x148>)
 80123b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123bc:	f7ed ff32 	bl	8000224 <__adddf3>
 80123c0:	4622      	mov	r2, r4
 80123c2:	462b      	mov	r3, r5
 80123c4:	f7ee f8e4 	bl	8000590 <__aeabi_dmul>
 80123c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80124b8 <__kernel_cos+0x150>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ed ff27 	bl	8000220 <__aeabi_dsub>
 80123d2:	4622      	mov	r2, r4
 80123d4:	462b      	mov	r3, r5
 80123d6:	f7ee f8db 	bl	8000590 <__aeabi_dmul>
 80123da:	a339      	add	r3, pc, #228	@ (adr r3, 80124c0 <__kernel_cos+0x158>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff20 	bl	8000224 <__adddf3>
 80123e4:	4622      	mov	r2, r4
 80123e6:	462b      	mov	r3, r5
 80123e8:	f7ee f8d2 	bl	8000590 <__aeabi_dmul>
 80123ec:	a336      	add	r3, pc, #216	@ (adr r3, 80124c8 <__kernel_cos+0x160>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	f7ed ff15 	bl	8000220 <__aeabi_dsub>
 80123f6:	4622      	mov	r2, r4
 80123f8:	462b      	mov	r3, r5
 80123fa:	f7ee f8c9 	bl	8000590 <__aeabi_dmul>
 80123fe:	a334      	add	r3, pc, #208	@ (adr r3, 80124d0 <__kernel_cos+0x168>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed ff0e 	bl	8000224 <__adddf3>
 8012408:	4622      	mov	r2, r4
 801240a:	462b      	mov	r3, r5
 801240c:	f7ee f8c0 	bl	8000590 <__aeabi_dmul>
 8012410:	4622      	mov	r2, r4
 8012412:	462b      	mov	r3, r5
 8012414:	f7ee f8bc 	bl	8000590 <__aeabi_dmul>
 8012418:	e9dd 2300 	ldrd	r2, r3, [sp]
 801241c:	4604      	mov	r4, r0
 801241e:	460d      	mov	r5, r1
 8012420:	4630      	mov	r0, r6
 8012422:	4639      	mov	r1, r7
 8012424:	f7ee f8b4 	bl	8000590 <__aeabi_dmul>
 8012428:	460b      	mov	r3, r1
 801242a:	4602      	mov	r2, r0
 801242c:	4629      	mov	r1, r5
 801242e:	4620      	mov	r0, r4
 8012430:	f7ed fef6 	bl	8000220 <__aeabi_dsub>
 8012434:	4b2b      	ldr	r3, [pc, #172]	@ (80124e4 <__kernel_cos+0x17c>)
 8012436:	4598      	cmp	r8, r3
 8012438:	4606      	mov	r6, r0
 801243a:	460f      	mov	r7, r1
 801243c:	d810      	bhi.n	8012460 <__kernel_cos+0xf8>
 801243e:	4602      	mov	r2, r0
 8012440:	460b      	mov	r3, r1
 8012442:	4650      	mov	r0, sl
 8012444:	4659      	mov	r1, fp
 8012446:	f7ed feeb 	bl	8000220 <__aeabi_dsub>
 801244a:	460b      	mov	r3, r1
 801244c:	4926      	ldr	r1, [pc, #152]	@ (80124e8 <__kernel_cos+0x180>)
 801244e:	4602      	mov	r2, r0
 8012450:	2000      	movs	r0, #0
 8012452:	f7ed fee5 	bl	8000220 <__aeabi_dsub>
 8012456:	ec41 0b10 	vmov	d0, r0, r1
 801245a:	b003      	add	sp, #12
 801245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012460:	4b22      	ldr	r3, [pc, #136]	@ (80124ec <__kernel_cos+0x184>)
 8012462:	4921      	ldr	r1, [pc, #132]	@ (80124e8 <__kernel_cos+0x180>)
 8012464:	4598      	cmp	r8, r3
 8012466:	bf8c      	ite	hi
 8012468:	4d21      	ldrhi	r5, [pc, #132]	@ (80124f0 <__kernel_cos+0x188>)
 801246a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801246e:	2400      	movs	r4, #0
 8012470:	4622      	mov	r2, r4
 8012472:	462b      	mov	r3, r5
 8012474:	2000      	movs	r0, #0
 8012476:	f7ed fed3 	bl	8000220 <__aeabi_dsub>
 801247a:	4622      	mov	r2, r4
 801247c:	4680      	mov	r8, r0
 801247e:	4689      	mov	r9, r1
 8012480:	462b      	mov	r3, r5
 8012482:	4650      	mov	r0, sl
 8012484:	4659      	mov	r1, fp
 8012486:	f7ed fecb 	bl	8000220 <__aeabi_dsub>
 801248a:	4632      	mov	r2, r6
 801248c:	463b      	mov	r3, r7
 801248e:	f7ed fec7 	bl	8000220 <__aeabi_dsub>
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	4640      	mov	r0, r8
 8012498:	4649      	mov	r1, r9
 801249a:	e7da      	b.n	8012452 <__kernel_cos+0xea>
 801249c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80124d8 <__kernel_cos+0x170>
 80124a0:	e7db      	b.n	801245a <__kernel_cos+0xf2>
 80124a2:	bf00      	nop
 80124a4:	f3af 8000 	nop.w
 80124a8:	be8838d4 	.word	0xbe8838d4
 80124ac:	bda8fae9 	.word	0xbda8fae9
 80124b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80124b4:	3e21ee9e 	.word	0x3e21ee9e
 80124b8:	809c52ad 	.word	0x809c52ad
 80124bc:	3e927e4f 	.word	0x3e927e4f
 80124c0:	19cb1590 	.word	0x19cb1590
 80124c4:	3efa01a0 	.word	0x3efa01a0
 80124c8:	16c15177 	.word	0x16c15177
 80124cc:	3f56c16c 	.word	0x3f56c16c
 80124d0:	5555554c 	.word	0x5555554c
 80124d4:	3fa55555 	.word	0x3fa55555
 80124d8:	00000000 	.word	0x00000000
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	3fe00000 	.word	0x3fe00000
 80124e4:	3fd33332 	.word	0x3fd33332
 80124e8:	3ff00000 	.word	0x3ff00000
 80124ec:	3fe90000 	.word	0x3fe90000
 80124f0:	3fd20000 	.word	0x3fd20000
 80124f4:	00000000 	.word	0x00000000

080124f8 <__kernel_sin>:
 80124f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fc:	ec55 4b10 	vmov	r4, r5, d0
 8012500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012504:	b085      	sub	sp, #20
 8012506:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801250a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801250e:	4680      	mov	r8, r0
 8012510:	d205      	bcs.n	801251e <__kernel_sin+0x26>
 8012512:	4620      	mov	r0, r4
 8012514:	4629      	mov	r1, r5
 8012516:	f7ee fad5 	bl	8000ac4 <__aeabi_d2iz>
 801251a:	2800      	cmp	r0, #0
 801251c:	d052      	beq.n	80125c4 <__kernel_sin+0xcc>
 801251e:	4622      	mov	r2, r4
 8012520:	462b      	mov	r3, r5
 8012522:	4620      	mov	r0, r4
 8012524:	4629      	mov	r1, r5
 8012526:	f7ee f833 	bl	8000590 <__aeabi_dmul>
 801252a:	4682      	mov	sl, r0
 801252c:	468b      	mov	fp, r1
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	4620      	mov	r0, r4
 8012534:	4629      	mov	r1, r5
 8012536:	f7ee f82b 	bl	8000590 <__aeabi_dmul>
 801253a:	a342      	add	r3, pc, #264	@ (adr r3, 8012644 <__kernel_sin+0x14c>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	e9cd 0100 	strd	r0, r1, [sp]
 8012544:	4650      	mov	r0, sl
 8012546:	4659      	mov	r1, fp
 8012548:	f7ee f822 	bl	8000590 <__aeabi_dmul>
 801254c:	a33f      	add	r3, pc, #252	@ (adr r3, 801264c <__kernel_sin+0x154>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f7ed fe65 	bl	8000220 <__aeabi_dsub>
 8012556:	4652      	mov	r2, sl
 8012558:	465b      	mov	r3, fp
 801255a:	f7ee f819 	bl	8000590 <__aeabi_dmul>
 801255e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012654 <__kernel_sin+0x15c>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	f7ed fe5e 	bl	8000224 <__adddf3>
 8012568:	4652      	mov	r2, sl
 801256a:	465b      	mov	r3, fp
 801256c:	f7ee f810 	bl	8000590 <__aeabi_dmul>
 8012570:	a33a      	add	r3, pc, #232	@ (adr r3, 801265c <__kernel_sin+0x164>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7ed fe53 	bl	8000220 <__aeabi_dsub>
 801257a:	4652      	mov	r2, sl
 801257c:	465b      	mov	r3, fp
 801257e:	f7ee f807 	bl	8000590 <__aeabi_dmul>
 8012582:	a338      	add	r3, pc, #224	@ (adr r3, 8012664 <__kernel_sin+0x16c>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	f7ed fe4c 	bl	8000224 <__adddf3>
 801258c:	4606      	mov	r6, r0
 801258e:	460f      	mov	r7, r1
 8012590:	f1b8 0f00 	cmp.w	r8, #0
 8012594:	d11b      	bne.n	80125ce <__kernel_sin+0xd6>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4650      	mov	r0, sl
 801259c:	4659      	mov	r1, fp
 801259e:	f7ed fff7 	bl	8000590 <__aeabi_dmul>
 80125a2:	a325      	add	r3, pc, #148	@ (adr r3, 8012638 <__kernel_sin+0x140>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	f7ed fe3a 	bl	8000220 <__aeabi_dsub>
 80125ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125b0:	f7ed ffee 	bl	8000590 <__aeabi_dmul>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	4620      	mov	r0, r4
 80125ba:	4629      	mov	r1, r5
 80125bc:	f7ed fe32 	bl	8000224 <__adddf3>
 80125c0:	4604      	mov	r4, r0
 80125c2:	460d      	mov	r5, r1
 80125c4:	ec45 4b10 	vmov	d0, r4, r5
 80125c8:	b005      	add	sp, #20
 80125ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012640 <__kernel_sin+0x148>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	f7ed ffdb 	bl	8000590 <__aeabi_dmul>
 80125da:	4632      	mov	r2, r6
 80125dc:	4680      	mov	r8, r0
 80125de:	4689      	mov	r9, r1
 80125e0:	463b      	mov	r3, r7
 80125e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125e6:	f7ed ffd3 	bl	8000590 <__aeabi_dmul>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4640      	mov	r0, r8
 80125f0:	4649      	mov	r1, r9
 80125f2:	f7ed fe15 	bl	8000220 <__aeabi_dsub>
 80125f6:	4652      	mov	r2, sl
 80125f8:	465b      	mov	r3, fp
 80125fa:	f7ed ffc9 	bl	8000590 <__aeabi_dmul>
 80125fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012602:	f7ed fe0d 	bl	8000220 <__aeabi_dsub>
 8012606:	a30c      	add	r3, pc, #48	@ (adr r3, 8012638 <__kernel_sin+0x140>)
 8012608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260c:	4606      	mov	r6, r0
 801260e:	460f      	mov	r7, r1
 8012610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012614:	f7ed ffbc 	bl	8000590 <__aeabi_dmul>
 8012618:	4602      	mov	r2, r0
 801261a:	460b      	mov	r3, r1
 801261c:	4630      	mov	r0, r6
 801261e:	4639      	mov	r1, r7
 8012620:	f7ed fe00 	bl	8000224 <__adddf3>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	4620      	mov	r0, r4
 801262a:	4629      	mov	r1, r5
 801262c:	f7ed fdf8 	bl	8000220 <__aeabi_dsub>
 8012630:	e7c6      	b.n	80125c0 <__kernel_sin+0xc8>
 8012632:	bf00      	nop
 8012634:	f3af 8000 	nop.w
 8012638:	55555549 	.word	0x55555549
 801263c:	3fc55555 	.word	0x3fc55555
 8012640:	3fe00000 	.word	0x3fe00000
 8012644:	5acfd57c 	.word	0x5acfd57c
 8012648:	3de5d93a 	.word	0x3de5d93a
 801264c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012650:	3e5ae5e6 	.word	0x3e5ae5e6
 8012654:	57b1fe7d 	.word	0x57b1fe7d
 8012658:	3ec71de3 	.word	0x3ec71de3
 801265c:	19c161d5 	.word	0x19c161d5
 8012660:	3f2a01a0 	.word	0x3f2a01a0
 8012664:	1110f8a6 	.word	0x1110f8a6
 8012668:	3f811111 	.word	0x3f811111
 801266c:	00000000 	.word	0x00000000

08012670 <__ieee754_rem_pio2>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	ec57 6b10 	vmov	r6, r7, d0
 8012678:	4bc5      	ldr	r3, [pc, #788]	@ (8012990 <__ieee754_rem_pio2+0x320>)
 801267a:	b08d      	sub	sp, #52	@ 0x34
 801267c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012680:	4598      	cmp	r8, r3
 8012682:	4604      	mov	r4, r0
 8012684:	9704      	str	r7, [sp, #16]
 8012686:	d807      	bhi.n	8012698 <__ieee754_rem_pio2+0x28>
 8012688:	2200      	movs	r2, #0
 801268a:	2300      	movs	r3, #0
 801268c:	ed80 0b00 	vstr	d0, [r0]
 8012690:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012694:	2500      	movs	r5, #0
 8012696:	e028      	b.n	80126ea <__ieee754_rem_pio2+0x7a>
 8012698:	4bbe      	ldr	r3, [pc, #760]	@ (8012994 <__ieee754_rem_pio2+0x324>)
 801269a:	4598      	cmp	r8, r3
 801269c:	d878      	bhi.n	8012790 <__ieee754_rem_pio2+0x120>
 801269e:	9b04      	ldr	r3, [sp, #16]
 80126a0:	4dbd      	ldr	r5, [pc, #756]	@ (8012998 <__ieee754_rem_pio2+0x328>)
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	4630      	mov	r0, r6
 80126a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012958 <__ieee754_rem_pio2+0x2e8>)
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	4639      	mov	r1, r7
 80126ae:	dd38      	ble.n	8012722 <__ieee754_rem_pio2+0xb2>
 80126b0:	f7ed fdb6 	bl	8000220 <__aeabi_dsub>
 80126b4:	45a8      	cmp	r8, r5
 80126b6:	4606      	mov	r6, r0
 80126b8:	460f      	mov	r7, r1
 80126ba:	d01a      	beq.n	80126f2 <__ieee754_rem_pio2+0x82>
 80126bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012960 <__ieee754_rem_pio2+0x2f0>)
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ed fdad 	bl	8000220 <__aeabi_dsub>
 80126c6:	4602      	mov	r2, r0
 80126c8:	460b      	mov	r3, r1
 80126ca:	4680      	mov	r8, r0
 80126cc:	4689      	mov	r9, r1
 80126ce:	4630      	mov	r0, r6
 80126d0:	4639      	mov	r1, r7
 80126d2:	f7ed fda5 	bl	8000220 <__aeabi_dsub>
 80126d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012960 <__ieee754_rem_pio2+0x2f0>)
 80126d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126dc:	f7ed fda0 	bl	8000220 <__aeabi_dsub>
 80126e0:	e9c4 8900 	strd	r8, r9, [r4]
 80126e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80126e8:	2501      	movs	r5, #1
 80126ea:	4628      	mov	r0, r5
 80126ec:	b00d      	add	sp, #52	@ 0x34
 80126ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8012968 <__ieee754_rem_pio2+0x2f8>)
 80126f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f8:	f7ed fd92 	bl	8000220 <__aeabi_dsub>
 80126fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8012970 <__ieee754_rem_pio2+0x300>)
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	f7ed fd8b 	bl	8000220 <__aeabi_dsub>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4680      	mov	r8, r0
 8012710:	4689      	mov	r9, r1
 8012712:	4630      	mov	r0, r6
 8012714:	4639      	mov	r1, r7
 8012716:	f7ed fd83 	bl	8000220 <__aeabi_dsub>
 801271a:	a395      	add	r3, pc, #596	@ (adr r3, 8012970 <__ieee754_rem_pio2+0x300>)
 801271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012720:	e7dc      	b.n	80126dc <__ieee754_rem_pio2+0x6c>
 8012722:	f7ed fd7f 	bl	8000224 <__adddf3>
 8012726:	45a8      	cmp	r8, r5
 8012728:	4606      	mov	r6, r0
 801272a:	460f      	mov	r7, r1
 801272c:	d018      	beq.n	8012760 <__ieee754_rem_pio2+0xf0>
 801272e:	a38c      	add	r3, pc, #560	@ (adr r3, 8012960 <__ieee754_rem_pio2+0x2f0>)
 8012730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012734:	f7ed fd76 	bl	8000224 <__adddf3>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4680      	mov	r8, r0
 801273e:	4689      	mov	r9, r1
 8012740:	4630      	mov	r0, r6
 8012742:	4639      	mov	r1, r7
 8012744:	f7ed fd6c 	bl	8000220 <__aeabi_dsub>
 8012748:	a385      	add	r3, pc, #532	@ (adr r3, 8012960 <__ieee754_rem_pio2+0x2f0>)
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	f7ed fd69 	bl	8000224 <__adddf3>
 8012752:	f04f 35ff 	mov.w	r5, #4294967295
 8012756:	e9c4 8900 	strd	r8, r9, [r4]
 801275a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801275e:	e7c4      	b.n	80126ea <__ieee754_rem_pio2+0x7a>
 8012760:	a381      	add	r3, pc, #516	@ (adr r3, 8012968 <__ieee754_rem_pio2+0x2f8>)
 8012762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012766:	f7ed fd5d 	bl	8000224 <__adddf3>
 801276a:	a381      	add	r3, pc, #516	@ (adr r3, 8012970 <__ieee754_rem_pio2+0x300>)
 801276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012770:	4606      	mov	r6, r0
 8012772:	460f      	mov	r7, r1
 8012774:	f7ed fd56 	bl	8000224 <__adddf3>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4680      	mov	r8, r0
 801277e:	4689      	mov	r9, r1
 8012780:	4630      	mov	r0, r6
 8012782:	4639      	mov	r1, r7
 8012784:	f7ed fd4c 	bl	8000220 <__aeabi_dsub>
 8012788:	a379      	add	r3, pc, #484	@ (adr r3, 8012970 <__ieee754_rem_pio2+0x300>)
 801278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278e:	e7de      	b.n	801274e <__ieee754_rem_pio2+0xde>
 8012790:	4b82      	ldr	r3, [pc, #520]	@ (801299c <__ieee754_rem_pio2+0x32c>)
 8012792:	4598      	cmp	r8, r3
 8012794:	f200 80d1 	bhi.w	801293a <__ieee754_rem_pio2+0x2ca>
 8012798:	f000 f966 	bl	8012a68 <fabs>
 801279c:	ec57 6b10 	vmov	r6, r7, d0
 80127a0:	a375      	add	r3, pc, #468	@ (adr r3, 8012978 <__ieee754_rem_pio2+0x308>)
 80127a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	f7ed fef1 	bl	8000590 <__aeabi_dmul>
 80127ae:	4b7c      	ldr	r3, [pc, #496]	@ (80129a0 <__ieee754_rem_pio2+0x330>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	f7ed fd37 	bl	8000224 <__adddf3>
 80127b6:	f7ee f985 	bl	8000ac4 <__aeabi_d2iz>
 80127ba:	4605      	mov	r5, r0
 80127bc:	f7ed fe7e 	bl	80004bc <__aeabi_i2d>
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80127c8:	a363      	add	r3, pc, #396	@ (adr r3, 8012958 <__ieee754_rem_pio2+0x2e8>)
 80127ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ce:	f7ed fedf 	bl	8000590 <__aeabi_dmul>
 80127d2:	4602      	mov	r2, r0
 80127d4:	460b      	mov	r3, r1
 80127d6:	4630      	mov	r0, r6
 80127d8:	4639      	mov	r1, r7
 80127da:	f7ed fd21 	bl	8000220 <__aeabi_dsub>
 80127de:	a360      	add	r3, pc, #384	@ (adr r3, 8012960 <__ieee754_rem_pio2+0x2f0>)
 80127e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e4:	4682      	mov	sl, r0
 80127e6:	468b      	mov	fp, r1
 80127e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ec:	f7ed fed0 	bl	8000590 <__aeabi_dmul>
 80127f0:	2d1f      	cmp	r5, #31
 80127f2:	4606      	mov	r6, r0
 80127f4:	460f      	mov	r7, r1
 80127f6:	dc0c      	bgt.n	8012812 <__ieee754_rem_pio2+0x1a2>
 80127f8:	4b6a      	ldr	r3, [pc, #424]	@ (80129a4 <__ieee754_rem_pio2+0x334>)
 80127fa:	1e6a      	subs	r2, r5, #1
 80127fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012800:	4543      	cmp	r3, r8
 8012802:	d006      	beq.n	8012812 <__ieee754_rem_pio2+0x1a2>
 8012804:	4632      	mov	r2, r6
 8012806:	463b      	mov	r3, r7
 8012808:	4650      	mov	r0, sl
 801280a:	4659      	mov	r1, fp
 801280c:	f7ed fd08 	bl	8000220 <__aeabi_dsub>
 8012810:	e00e      	b.n	8012830 <__ieee754_rem_pio2+0x1c0>
 8012812:	463b      	mov	r3, r7
 8012814:	4632      	mov	r2, r6
 8012816:	4650      	mov	r0, sl
 8012818:	4659      	mov	r1, fp
 801281a:	f7ed fd01 	bl	8000220 <__aeabi_dsub>
 801281e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012822:	9305      	str	r3, [sp, #20]
 8012824:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012828:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801282c:	2b10      	cmp	r3, #16
 801282e:	dc02      	bgt.n	8012836 <__ieee754_rem_pio2+0x1c6>
 8012830:	e9c4 0100 	strd	r0, r1, [r4]
 8012834:	e039      	b.n	80128aa <__ieee754_rem_pio2+0x23a>
 8012836:	a34c      	add	r3, pc, #304	@ (adr r3, 8012968 <__ieee754_rem_pio2+0x2f8>)
 8012838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012840:	f7ed fea6 	bl	8000590 <__aeabi_dmul>
 8012844:	4606      	mov	r6, r0
 8012846:	460f      	mov	r7, r1
 8012848:	4602      	mov	r2, r0
 801284a:	460b      	mov	r3, r1
 801284c:	4650      	mov	r0, sl
 801284e:	4659      	mov	r1, fp
 8012850:	f7ed fce6 	bl	8000220 <__aeabi_dsub>
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	4680      	mov	r8, r0
 801285a:	4689      	mov	r9, r1
 801285c:	4650      	mov	r0, sl
 801285e:	4659      	mov	r1, fp
 8012860:	f7ed fcde 	bl	8000220 <__aeabi_dsub>
 8012864:	4632      	mov	r2, r6
 8012866:	463b      	mov	r3, r7
 8012868:	f7ed fcda 	bl	8000220 <__aeabi_dsub>
 801286c:	a340      	add	r3, pc, #256	@ (adr r3, 8012970 <__ieee754_rem_pio2+0x300>)
 801286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012872:	4606      	mov	r6, r0
 8012874:	460f      	mov	r7, r1
 8012876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801287a:	f7ed fe89 	bl	8000590 <__aeabi_dmul>
 801287e:	4632      	mov	r2, r6
 8012880:	463b      	mov	r3, r7
 8012882:	f7ed fccd 	bl	8000220 <__aeabi_dsub>
 8012886:	4602      	mov	r2, r0
 8012888:	460b      	mov	r3, r1
 801288a:	4606      	mov	r6, r0
 801288c:	460f      	mov	r7, r1
 801288e:	4640      	mov	r0, r8
 8012890:	4649      	mov	r1, r9
 8012892:	f7ed fcc5 	bl	8000220 <__aeabi_dsub>
 8012896:	9a05      	ldr	r2, [sp, #20]
 8012898:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801289c:	1ad3      	subs	r3, r2, r3
 801289e:	2b31      	cmp	r3, #49	@ 0x31
 80128a0:	dc20      	bgt.n	80128e4 <__ieee754_rem_pio2+0x274>
 80128a2:	e9c4 0100 	strd	r0, r1, [r4]
 80128a6:	46c2      	mov	sl, r8
 80128a8:	46cb      	mov	fp, r9
 80128aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80128ae:	4650      	mov	r0, sl
 80128b0:	4642      	mov	r2, r8
 80128b2:	464b      	mov	r3, r9
 80128b4:	4659      	mov	r1, fp
 80128b6:	f7ed fcb3 	bl	8000220 <__aeabi_dsub>
 80128ba:	463b      	mov	r3, r7
 80128bc:	4632      	mov	r2, r6
 80128be:	f7ed fcaf 	bl	8000220 <__aeabi_dsub>
 80128c2:	9b04      	ldr	r3, [sp, #16]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80128ca:	f6bf af0e 	bge.w	80126ea <__ieee754_rem_pio2+0x7a>
 80128ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80128d2:	6063      	str	r3, [r4, #4]
 80128d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80128d8:	f8c4 8000 	str.w	r8, [r4]
 80128dc:	60a0      	str	r0, [r4, #8]
 80128de:	60e3      	str	r3, [r4, #12]
 80128e0:	426d      	negs	r5, r5
 80128e2:	e702      	b.n	80126ea <__ieee754_rem_pio2+0x7a>
 80128e4:	a326      	add	r3, pc, #152	@ (adr r3, 8012980 <__ieee754_rem_pio2+0x310>)
 80128e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ee:	f7ed fe4f 	bl	8000590 <__aeabi_dmul>
 80128f2:	4606      	mov	r6, r0
 80128f4:	460f      	mov	r7, r1
 80128f6:	4602      	mov	r2, r0
 80128f8:	460b      	mov	r3, r1
 80128fa:	4640      	mov	r0, r8
 80128fc:	4649      	mov	r1, r9
 80128fe:	f7ed fc8f 	bl	8000220 <__aeabi_dsub>
 8012902:	4602      	mov	r2, r0
 8012904:	460b      	mov	r3, r1
 8012906:	4682      	mov	sl, r0
 8012908:	468b      	mov	fp, r1
 801290a:	4640      	mov	r0, r8
 801290c:	4649      	mov	r1, r9
 801290e:	f7ed fc87 	bl	8000220 <__aeabi_dsub>
 8012912:	4632      	mov	r2, r6
 8012914:	463b      	mov	r3, r7
 8012916:	f7ed fc83 	bl	8000220 <__aeabi_dsub>
 801291a:	a31b      	add	r3, pc, #108	@ (adr r3, 8012988 <__ieee754_rem_pio2+0x318>)
 801291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012920:	4606      	mov	r6, r0
 8012922:	460f      	mov	r7, r1
 8012924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012928:	f7ed fe32 	bl	8000590 <__aeabi_dmul>
 801292c:	4632      	mov	r2, r6
 801292e:	463b      	mov	r3, r7
 8012930:	f7ed fc76 	bl	8000220 <__aeabi_dsub>
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	e764      	b.n	8012804 <__ieee754_rem_pio2+0x194>
 801293a:	4b1b      	ldr	r3, [pc, #108]	@ (80129a8 <__ieee754_rem_pio2+0x338>)
 801293c:	4598      	cmp	r8, r3
 801293e:	d935      	bls.n	80129ac <__ieee754_rem_pio2+0x33c>
 8012940:	4632      	mov	r2, r6
 8012942:	463b      	mov	r3, r7
 8012944:	4630      	mov	r0, r6
 8012946:	4639      	mov	r1, r7
 8012948:	f7ed fc6a 	bl	8000220 <__aeabi_dsub>
 801294c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012950:	e9c4 0100 	strd	r0, r1, [r4]
 8012954:	e69e      	b.n	8012694 <__ieee754_rem_pio2+0x24>
 8012956:	bf00      	nop
 8012958:	54400000 	.word	0x54400000
 801295c:	3ff921fb 	.word	0x3ff921fb
 8012960:	1a626331 	.word	0x1a626331
 8012964:	3dd0b461 	.word	0x3dd0b461
 8012968:	1a600000 	.word	0x1a600000
 801296c:	3dd0b461 	.word	0x3dd0b461
 8012970:	2e037073 	.word	0x2e037073
 8012974:	3ba3198a 	.word	0x3ba3198a
 8012978:	6dc9c883 	.word	0x6dc9c883
 801297c:	3fe45f30 	.word	0x3fe45f30
 8012980:	2e000000 	.word	0x2e000000
 8012984:	3ba3198a 	.word	0x3ba3198a
 8012988:	252049c1 	.word	0x252049c1
 801298c:	397b839a 	.word	0x397b839a
 8012990:	3fe921fb 	.word	0x3fe921fb
 8012994:	4002d97b 	.word	0x4002d97b
 8012998:	3ff921fb 	.word	0x3ff921fb
 801299c:	413921fb 	.word	0x413921fb
 80129a0:	3fe00000 	.word	0x3fe00000
 80129a4:	08013ea8 	.word	0x08013ea8
 80129a8:	7fefffff 	.word	0x7fefffff
 80129ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80129b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80129b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80129b8:	4630      	mov	r0, r6
 80129ba:	460f      	mov	r7, r1
 80129bc:	f7ee f882 	bl	8000ac4 <__aeabi_d2iz>
 80129c0:	f7ed fd7c 	bl	80004bc <__aeabi_i2d>
 80129c4:	4602      	mov	r2, r0
 80129c6:	460b      	mov	r3, r1
 80129c8:	4630      	mov	r0, r6
 80129ca:	4639      	mov	r1, r7
 80129cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80129d0:	f7ed fc26 	bl	8000220 <__aeabi_dsub>
 80129d4:	4b22      	ldr	r3, [pc, #136]	@ (8012a60 <__ieee754_rem_pio2+0x3f0>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	f7ed fdda 	bl	8000590 <__aeabi_dmul>
 80129dc:	460f      	mov	r7, r1
 80129de:	4606      	mov	r6, r0
 80129e0:	f7ee f870 	bl	8000ac4 <__aeabi_d2iz>
 80129e4:	f7ed fd6a 	bl	80004bc <__aeabi_i2d>
 80129e8:	4602      	mov	r2, r0
 80129ea:	460b      	mov	r3, r1
 80129ec:	4630      	mov	r0, r6
 80129ee:	4639      	mov	r1, r7
 80129f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80129f4:	f7ed fc14 	bl	8000220 <__aeabi_dsub>
 80129f8:	4b19      	ldr	r3, [pc, #100]	@ (8012a60 <__ieee754_rem_pio2+0x3f0>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	f7ed fdc8 	bl	8000590 <__aeabi_dmul>
 8012a00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8012a04:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8012a08:	f04f 0803 	mov.w	r8, #3
 8012a0c:	2600      	movs	r6, #0
 8012a0e:	2700      	movs	r7, #0
 8012a10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012a14:	4632      	mov	r2, r6
 8012a16:	463b      	mov	r3, r7
 8012a18:	46c2      	mov	sl, r8
 8012a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a1e:	f7ee f81f 	bl	8000a60 <__aeabi_dcmpeq>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d1f4      	bne.n	8012a10 <__ieee754_rem_pio2+0x3a0>
 8012a26:	4b0f      	ldr	r3, [pc, #60]	@ (8012a64 <__ieee754_rem_pio2+0x3f4>)
 8012a28:	9301      	str	r3, [sp, #4]
 8012a2a:	2302      	movs	r3, #2
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	462a      	mov	r2, r5
 8012a30:	4653      	mov	r3, sl
 8012a32:	4621      	mov	r1, r4
 8012a34:	a806      	add	r0, sp, #24
 8012a36:	f000 fb5b 	bl	80130f0 <__kernel_rem_pio2>
 8012a3a:	9b04      	ldr	r3, [sp, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	4605      	mov	r5, r0
 8012a40:	f6bf ae53 	bge.w	80126ea <__ieee754_rem_pio2+0x7a>
 8012a44:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012a48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a4c:	e9c4 2300 	strd	r2, r3, [r4]
 8012a50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012a54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012a5c:	e740      	b.n	80128e0 <__ieee754_rem_pio2+0x270>
 8012a5e:	bf00      	nop
 8012a60:	41700000 	.word	0x41700000
 8012a64:	08013f28 	.word	0x08013f28

08012a68 <fabs>:
 8012a68:	ec51 0b10 	vmov	r0, r1, d0
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012a72:	ec43 2b10 	vmov	d0, r2, r3
 8012a76:	4770      	bx	lr

08012a78 <__kernel_cosf>:
 8012a78:	ee10 3a10 	vmov	r3, s0
 8012a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012a80:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012a84:	eef0 6a40 	vmov.f32	s13, s0
 8012a88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012a8c:	d204      	bcs.n	8012a98 <__kernel_cosf+0x20>
 8012a8e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012a92:	ee17 2a90 	vmov	r2, s15
 8012a96:	b342      	cbz	r2, 8012aea <__kernel_cosf+0x72>
 8012a98:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012a9c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012b08 <__kernel_cosf+0x90>
 8012aa0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8012b0c <__kernel_cosf+0x94>
 8012aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8012b10 <__kernel_cosf+0x98>)
 8012aa6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012b14 <__kernel_cosf+0x9c>
 8012ab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ab4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8012b18 <__kernel_cosf+0xa0>
 8012ab8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012abc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012b1c <__kernel_cosf+0xa4>
 8012ac0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ac4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012b20 <__kernel_cosf+0xa8>
 8012ac8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012acc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012ad0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012ad4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012ad8:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ae0:	d804      	bhi.n	8012aec <__kernel_cosf+0x74>
 8012ae2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012ae6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012aea:	4770      	bx	lr
 8012aec:	4a0d      	ldr	r2, [pc, #52]	@ (8012b24 <__kernel_cosf+0xac>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	bf9a      	itte	ls
 8012af2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8012af6:	ee07 3a10 	vmovls	s14, r3
 8012afa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8012afe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b06:	e7ec      	b.n	8012ae2 <__kernel_cosf+0x6a>
 8012b08:	ad47d74e 	.word	0xad47d74e
 8012b0c:	310f74f6 	.word	0x310f74f6
 8012b10:	3e999999 	.word	0x3e999999
 8012b14:	b493f27c 	.word	0xb493f27c
 8012b18:	37d00d01 	.word	0x37d00d01
 8012b1c:	bab60b61 	.word	0xbab60b61
 8012b20:	3d2aaaab 	.word	0x3d2aaaab
 8012b24:	3f480000 	.word	0x3f480000

08012b28 <__kernel_sinf>:
 8012b28:	ee10 3a10 	vmov	r3, s0
 8012b2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012b34:	d204      	bcs.n	8012b40 <__kernel_sinf+0x18>
 8012b36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012b3a:	ee17 3a90 	vmov	r3, s15
 8012b3e:	b35b      	cbz	r3, 8012b98 <__kernel_sinf+0x70>
 8012b40:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012b44:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012b9c <__kernel_sinf+0x74>
 8012b48:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012ba0 <__kernel_sinf+0x78>
 8012b4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012b50:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012ba4 <__kernel_sinf+0x7c>
 8012b54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012b58:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012ba8 <__kernel_sinf+0x80>
 8012b5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012b60:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012bac <__kernel_sinf+0x84>
 8012b64:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012b68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012b6c:	b930      	cbnz	r0, 8012b7c <__kernel_sinf+0x54>
 8012b6e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012bb0 <__kernel_sinf+0x88>
 8012b72:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012b76:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012b7a:	4770      	bx	lr
 8012b7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012b80:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012b84:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012b88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012b8c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012bb4 <__kernel_sinf+0x8c>
 8012b90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012b94:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop
 8012b9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012ba0:	b2d72f34 	.word	0xb2d72f34
 8012ba4:	3638ef1b 	.word	0x3638ef1b
 8012ba8:	b9500d01 	.word	0xb9500d01
 8012bac:	3c088889 	.word	0x3c088889
 8012bb0:	be2aaaab 	.word	0xbe2aaaab
 8012bb4:	3e2aaaab 	.word	0x3e2aaaab

08012bb8 <__ieee754_fmodf>:
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	ee10 6a90 	vmov	r6, s1
 8012bbe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012bc2:	1e5a      	subs	r2, r3, #1
 8012bc4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012bc8:	d206      	bcs.n	8012bd8 <__ieee754_fmodf+0x20>
 8012bca:	ee10 4a10 	vmov	r4, s0
 8012bce:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8012bd2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012bd6:	d304      	bcc.n	8012be2 <__ieee754_fmodf+0x2a>
 8012bd8:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012bdc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012be0:	bd70      	pop	{r4, r5, r6, pc}
 8012be2:	4299      	cmp	r1, r3
 8012be4:	dbfc      	blt.n	8012be0 <__ieee754_fmodf+0x28>
 8012be6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8012bea:	d105      	bne.n	8012bf8 <__ieee754_fmodf+0x40>
 8012bec:	4b32      	ldr	r3, [pc, #200]	@ (8012cb8 <__ieee754_fmodf+0x100>)
 8012bee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8012bf2:	ed93 0a00 	vldr	s0, [r3]
 8012bf6:	e7f3      	b.n	8012be0 <__ieee754_fmodf+0x28>
 8012bf8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8012bfc:	d146      	bne.n	8012c8c <__ieee754_fmodf+0xd4>
 8012bfe:	020a      	lsls	r2, r1, #8
 8012c00:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8012c04:	2a00      	cmp	r2, #0
 8012c06:	dc3e      	bgt.n	8012c86 <__ieee754_fmodf+0xce>
 8012c08:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012c0c:	bf01      	itttt	eq
 8012c0e:	021a      	lsleq	r2, r3, #8
 8012c10:	fab2 f282 	clzeq	r2, r2
 8012c14:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8012c18:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8012c1c:	bf16      	itet	ne
 8012c1e:	15da      	asrne	r2, r3, #23
 8012c20:	3282      	addeq	r2, #130	@ 0x82
 8012c22:	3a7f      	subne	r2, #127	@ 0x7f
 8012c24:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8012c28:	bfbb      	ittet	lt
 8012c2a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8012c2e:	1a24      	sublt	r4, r4, r0
 8012c30:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8012c34:	40a1      	lsllt	r1, r4
 8012c36:	bfa8      	it	ge
 8012c38:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8012c3c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012c40:	bfb5      	itete	lt
 8012c42:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8012c46:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8012c4a:	1aa4      	sublt	r4, r4, r2
 8012c4c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8012c50:	bfb8      	it	lt
 8012c52:	fa03 f404 	lsllt.w	r4, r3, r4
 8012c56:	1a80      	subs	r0, r0, r2
 8012c58:	1b0b      	subs	r3, r1, r4
 8012c5a:	b9d0      	cbnz	r0, 8012c92 <__ieee754_fmodf+0xda>
 8012c5c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012c60:	bf28      	it	cs
 8012c62:	460b      	movcs	r3, r1
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d0c1      	beq.n	8012bec <__ieee754_fmodf+0x34>
 8012c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012c6c:	db19      	blt.n	8012ca2 <__ieee754_fmodf+0xea>
 8012c6e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012c72:	db19      	blt.n	8012ca8 <__ieee754_fmodf+0xf0>
 8012c74:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8012c78:	327f      	adds	r2, #127	@ 0x7f
 8012c7a:	432b      	orrs	r3, r5
 8012c7c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012c80:	ee00 3a10 	vmov	s0, r3
 8012c84:	e7ac      	b.n	8012be0 <__ieee754_fmodf+0x28>
 8012c86:	3801      	subs	r0, #1
 8012c88:	0052      	lsls	r2, r2, #1
 8012c8a:	e7bb      	b.n	8012c04 <__ieee754_fmodf+0x4c>
 8012c8c:	15c8      	asrs	r0, r1, #23
 8012c8e:	387f      	subs	r0, #127	@ 0x7f
 8012c90:	e7ba      	b.n	8012c08 <__ieee754_fmodf+0x50>
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	da02      	bge.n	8012c9c <__ieee754_fmodf+0xe4>
 8012c96:	0049      	lsls	r1, r1, #1
 8012c98:	3801      	subs	r0, #1
 8012c9a:	e7dd      	b.n	8012c58 <__ieee754_fmodf+0xa0>
 8012c9c:	d0a6      	beq.n	8012bec <__ieee754_fmodf+0x34>
 8012c9e:	0059      	lsls	r1, r3, #1
 8012ca0:	e7fa      	b.n	8012c98 <__ieee754_fmodf+0xe0>
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	3a01      	subs	r2, #1
 8012ca6:	e7df      	b.n	8012c68 <__ieee754_fmodf+0xb0>
 8012ca8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8012cac:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012cb0:	3282      	adds	r2, #130	@ 0x82
 8012cb2:	4113      	asrs	r3, r2
 8012cb4:	432b      	orrs	r3, r5
 8012cb6:	e7e3      	b.n	8012c80 <__ieee754_fmodf+0xc8>
 8012cb8:	08014030 	.word	0x08014030

08012cbc <__ieee754_rem_pio2f>:
 8012cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cbe:	ee10 6a10 	vmov	r6, s0
 8012cc2:	4b88      	ldr	r3, [pc, #544]	@ (8012ee4 <__ieee754_rem_pio2f+0x228>)
 8012cc4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012cc8:	429d      	cmp	r5, r3
 8012cca:	b087      	sub	sp, #28
 8012ccc:	4604      	mov	r4, r0
 8012cce:	d805      	bhi.n	8012cdc <__ieee754_rem_pio2f+0x20>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	ed80 0a00 	vstr	s0, [r0]
 8012cd6:	6043      	str	r3, [r0, #4]
 8012cd8:	2000      	movs	r0, #0
 8012cda:	e022      	b.n	8012d22 <__ieee754_rem_pio2f+0x66>
 8012cdc:	4b82      	ldr	r3, [pc, #520]	@ (8012ee8 <__ieee754_rem_pio2f+0x22c>)
 8012cde:	429d      	cmp	r5, r3
 8012ce0:	d83a      	bhi.n	8012d58 <__ieee754_rem_pio2f+0x9c>
 8012ce2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012ce6:	2e00      	cmp	r6, #0
 8012ce8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012eec <__ieee754_rem_pio2f+0x230>
 8012cec:	4a80      	ldr	r2, [pc, #512]	@ (8012ef0 <__ieee754_rem_pio2f+0x234>)
 8012cee:	f023 030f 	bic.w	r3, r3, #15
 8012cf2:	dd18      	ble.n	8012d26 <__ieee754_rem_pio2f+0x6a>
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012cfa:	bf09      	itett	eq
 8012cfc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012ef4 <__ieee754_rem_pio2f+0x238>
 8012d00:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012ef8 <__ieee754_rem_pio2f+0x23c>
 8012d04:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012efc <__ieee754_rem_pio2f+0x240>
 8012d08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012d0c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d14:	ed80 7a00 	vstr	s14, [r0]
 8012d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d1c:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d20:	2001      	movs	r0, #1
 8012d22:	b007      	add	sp, #28
 8012d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d26:	4293      	cmp	r3, r2
 8012d28:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012d2c:	bf09      	itett	eq
 8012d2e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012ef4 <__ieee754_rem_pio2f+0x238>
 8012d32:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012ef8 <__ieee754_rem_pio2f+0x23c>
 8012d36:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012efc <__ieee754_rem_pio2f+0x240>
 8012d3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012d3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d46:	ed80 7a00 	vstr	s14, [r0]
 8012d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d4e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d52:	f04f 30ff 	mov.w	r0, #4294967295
 8012d56:	e7e4      	b.n	8012d22 <__ieee754_rem_pio2f+0x66>
 8012d58:	4b69      	ldr	r3, [pc, #420]	@ (8012f00 <__ieee754_rem_pio2f+0x244>)
 8012d5a:	429d      	cmp	r5, r3
 8012d5c:	d873      	bhi.n	8012e46 <__ieee754_rem_pio2f+0x18a>
 8012d5e:	f000 f8dd 	bl	8012f1c <fabsf>
 8012d62:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012f04 <__ieee754_rem_pio2f+0x248>
 8012d66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012d6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012d76:	ee17 0a90 	vmov	r0, s15
 8012d7a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012eec <__ieee754_rem_pio2f+0x230>
 8012d7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012d82:	281f      	cmp	r0, #31
 8012d84:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012ef8 <__ieee754_rem_pio2f+0x23c>
 8012d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d8c:	eeb1 6a47 	vneg.f32	s12, s14
 8012d90:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012d94:	ee16 1a90 	vmov	r1, s13
 8012d98:	dc09      	bgt.n	8012dae <__ieee754_rem_pio2f+0xf2>
 8012d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8012f08 <__ieee754_rem_pio2f+0x24c>)
 8012d9c:	1e47      	subs	r7, r0, #1
 8012d9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012da2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d107      	bne.n	8012dbe <__ieee754_rem_pio2f+0x102>
 8012dae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012db2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012db6:	2a08      	cmp	r2, #8
 8012db8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012dbc:	dc14      	bgt.n	8012de8 <__ieee754_rem_pio2f+0x12c>
 8012dbe:	6021      	str	r1, [r4, #0]
 8012dc0:	ed94 7a00 	vldr	s14, [r4]
 8012dc4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012dc8:	2e00      	cmp	r6, #0
 8012dca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012dce:	ed84 0a01 	vstr	s0, [r4, #4]
 8012dd2:	daa6      	bge.n	8012d22 <__ieee754_rem_pio2f+0x66>
 8012dd4:	eeb1 7a47 	vneg.f32	s14, s14
 8012dd8:	eeb1 0a40 	vneg.f32	s0, s0
 8012ddc:	ed84 7a00 	vstr	s14, [r4]
 8012de0:	ed84 0a01 	vstr	s0, [r4, #4]
 8012de4:	4240      	negs	r0, r0
 8012de6:	e79c      	b.n	8012d22 <__ieee754_rem_pio2f+0x66>
 8012de8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012ef4 <__ieee754_rem_pio2f+0x238>
 8012dec:	eef0 6a40 	vmov.f32	s13, s0
 8012df0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012df4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012df8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012dfc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012efc <__ieee754_rem_pio2f+0x240>
 8012e00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012e04:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012e08:	ee15 2a90 	vmov	r2, s11
 8012e0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012e10:	1a5b      	subs	r3, r3, r1
 8012e12:	2b19      	cmp	r3, #25
 8012e14:	dc04      	bgt.n	8012e20 <__ieee754_rem_pio2f+0x164>
 8012e16:	edc4 5a00 	vstr	s11, [r4]
 8012e1a:	eeb0 0a66 	vmov.f32	s0, s13
 8012e1e:	e7cf      	b.n	8012dc0 <__ieee754_rem_pio2f+0x104>
 8012e20:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012f0c <__ieee754_rem_pio2f+0x250>
 8012e24:	eeb0 0a66 	vmov.f32	s0, s13
 8012e28:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012e2c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012e30:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012f10 <__ieee754_rem_pio2f+0x254>
 8012e34:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012e38:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012e3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012e40:	ed84 7a00 	vstr	s14, [r4]
 8012e44:	e7bc      	b.n	8012dc0 <__ieee754_rem_pio2f+0x104>
 8012e46:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012e4a:	d306      	bcc.n	8012e5a <__ieee754_rem_pio2f+0x19e>
 8012e4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012e50:	edc0 7a01 	vstr	s15, [r0, #4]
 8012e54:	edc0 7a00 	vstr	s15, [r0]
 8012e58:	e73e      	b.n	8012cd8 <__ieee754_rem_pio2f+0x1c>
 8012e5a:	15ea      	asrs	r2, r5, #23
 8012e5c:	3a86      	subs	r2, #134	@ 0x86
 8012e5e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012e62:	ee07 3a90 	vmov	s15, r3
 8012e66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e6a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012f14 <__ieee754_rem_pio2f+0x258>
 8012e6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e76:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012e7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e8a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	edcd 7a05 	vstr	s15, [sp, #20]
 8012e9e:	d11e      	bne.n	8012ede <__ieee754_rem_pio2f+0x222>
 8012ea0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea8:	bf0c      	ite	eq
 8012eaa:	2301      	moveq	r3, #1
 8012eac:	2302      	movne	r3, #2
 8012eae:	491a      	ldr	r1, [pc, #104]	@ (8012f18 <__ieee754_rem_pio2f+0x25c>)
 8012eb0:	9101      	str	r1, [sp, #4]
 8012eb2:	2102      	movs	r1, #2
 8012eb4:	9100      	str	r1, [sp, #0]
 8012eb6:	a803      	add	r0, sp, #12
 8012eb8:	4621      	mov	r1, r4
 8012eba:	f000 fc69 	bl	8013790 <__kernel_rem_pio2f>
 8012ebe:	2e00      	cmp	r6, #0
 8012ec0:	f6bf af2f 	bge.w	8012d22 <__ieee754_rem_pio2f+0x66>
 8012ec4:	edd4 7a00 	vldr	s15, [r4]
 8012ec8:	eef1 7a67 	vneg.f32	s15, s15
 8012ecc:	edc4 7a00 	vstr	s15, [r4]
 8012ed0:	edd4 7a01 	vldr	s15, [r4, #4]
 8012ed4:	eef1 7a67 	vneg.f32	s15, s15
 8012ed8:	edc4 7a01 	vstr	s15, [r4, #4]
 8012edc:	e782      	b.n	8012de4 <__ieee754_rem_pio2f+0x128>
 8012ede:	2303      	movs	r3, #3
 8012ee0:	e7e5      	b.n	8012eae <__ieee754_rem_pio2f+0x1f2>
 8012ee2:	bf00      	nop
 8012ee4:	3f490fd8 	.word	0x3f490fd8
 8012ee8:	4016cbe3 	.word	0x4016cbe3
 8012eec:	3fc90f80 	.word	0x3fc90f80
 8012ef0:	3fc90fd0 	.word	0x3fc90fd0
 8012ef4:	37354400 	.word	0x37354400
 8012ef8:	37354443 	.word	0x37354443
 8012efc:	2e85a308 	.word	0x2e85a308
 8012f00:	43490f80 	.word	0x43490f80
 8012f04:	3f22f984 	.word	0x3f22f984
 8012f08:	08014038 	.word	0x08014038
 8012f0c:	2e85a300 	.word	0x2e85a300
 8012f10:	248d3132 	.word	0x248d3132
 8012f14:	43800000 	.word	0x43800000
 8012f18:	080140b8 	.word	0x080140b8

08012f1c <fabsf>:
 8012f1c:	ee10 3a10 	vmov	r3, s0
 8012f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f24:	ee00 3a10 	vmov	s0, r3
 8012f28:	4770      	bx	lr
 8012f2a:	0000      	movs	r0, r0
 8012f2c:	0000      	movs	r0, r0
	...

08012f30 <scalbn>:
 8012f30:	b570      	push	{r4, r5, r6, lr}
 8012f32:	ec55 4b10 	vmov	r4, r5, d0
 8012f36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012f3a:	4606      	mov	r6, r0
 8012f3c:	462b      	mov	r3, r5
 8012f3e:	b991      	cbnz	r1, 8012f66 <scalbn+0x36>
 8012f40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012f44:	4323      	orrs	r3, r4
 8012f46:	d03b      	beq.n	8012fc0 <scalbn+0x90>
 8012f48:	4b33      	ldr	r3, [pc, #204]	@ (8013018 <scalbn+0xe8>)
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	2200      	movs	r2, #0
 8012f50:	f7ed fb1e 	bl	8000590 <__aeabi_dmul>
 8012f54:	4b31      	ldr	r3, [pc, #196]	@ (801301c <scalbn+0xec>)
 8012f56:	429e      	cmp	r6, r3
 8012f58:	4604      	mov	r4, r0
 8012f5a:	460d      	mov	r5, r1
 8012f5c:	da0f      	bge.n	8012f7e <scalbn+0x4e>
 8012f5e:	a326      	add	r3, pc, #152	@ (adr r3, 8012ff8 <scalbn+0xc8>)
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	e01e      	b.n	8012fa4 <scalbn+0x74>
 8012f66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012f6a:	4291      	cmp	r1, r2
 8012f6c:	d10b      	bne.n	8012f86 <scalbn+0x56>
 8012f6e:	4622      	mov	r2, r4
 8012f70:	4620      	mov	r0, r4
 8012f72:	4629      	mov	r1, r5
 8012f74:	f7ed f956 	bl	8000224 <__adddf3>
 8012f78:	4604      	mov	r4, r0
 8012f7a:	460d      	mov	r5, r1
 8012f7c:	e020      	b.n	8012fc0 <scalbn+0x90>
 8012f7e:	460b      	mov	r3, r1
 8012f80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012f84:	3936      	subs	r1, #54	@ 0x36
 8012f86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012f8a:	4296      	cmp	r6, r2
 8012f8c:	dd0d      	ble.n	8012faa <scalbn+0x7a>
 8012f8e:	2d00      	cmp	r5, #0
 8012f90:	a11b      	add	r1, pc, #108	@ (adr r1, 8013000 <scalbn+0xd0>)
 8012f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f96:	da02      	bge.n	8012f9e <scalbn+0x6e>
 8012f98:	a11b      	add	r1, pc, #108	@ (adr r1, 8013008 <scalbn+0xd8>)
 8012f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f9e:	a318      	add	r3, pc, #96	@ (adr r3, 8013000 <scalbn+0xd0>)
 8012fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa4:	f7ed faf4 	bl	8000590 <__aeabi_dmul>
 8012fa8:	e7e6      	b.n	8012f78 <scalbn+0x48>
 8012faa:	1872      	adds	r2, r6, r1
 8012fac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012fb0:	428a      	cmp	r2, r1
 8012fb2:	dcec      	bgt.n	8012f8e <scalbn+0x5e>
 8012fb4:	2a00      	cmp	r2, #0
 8012fb6:	dd06      	ble.n	8012fc6 <scalbn+0x96>
 8012fb8:	f36f 531e 	bfc	r3, #20, #11
 8012fbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fc0:	ec45 4b10 	vmov	d0, r4, r5
 8012fc4:	bd70      	pop	{r4, r5, r6, pc}
 8012fc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012fca:	da08      	bge.n	8012fde <scalbn+0xae>
 8012fcc:	2d00      	cmp	r5, #0
 8012fce:	a10a      	add	r1, pc, #40	@ (adr r1, 8012ff8 <scalbn+0xc8>)
 8012fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd4:	dac3      	bge.n	8012f5e <scalbn+0x2e>
 8012fd6:	a10e      	add	r1, pc, #56	@ (adr r1, 8013010 <scalbn+0xe0>)
 8012fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fdc:	e7bf      	b.n	8012f5e <scalbn+0x2e>
 8012fde:	3236      	adds	r2, #54	@ 0x36
 8012fe0:	f36f 531e 	bfc	r3, #20, #11
 8012fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fe8:	4620      	mov	r0, r4
 8012fea:	4b0d      	ldr	r3, [pc, #52]	@ (8013020 <scalbn+0xf0>)
 8012fec:	4629      	mov	r1, r5
 8012fee:	2200      	movs	r2, #0
 8012ff0:	e7d8      	b.n	8012fa4 <scalbn+0x74>
 8012ff2:	bf00      	nop
 8012ff4:	f3af 8000 	nop.w
 8012ff8:	c2f8f359 	.word	0xc2f8f359
 8012ffc:	01a56e1f 	.word	0x01a56e1f
 8013000:	8800759c 	.word	0x8800759c
 8013004:	7e37e43c 	.word	0x7e37e43c
 8013008:	8800759c 	.word	0x8800759c
 801300c:	fe37e43c 	.word	0xfe37e43c
 8013010:	c2f8f359 	.word	0xc2f8f359
 8013014:	81a56e1f 	.word	0x81a56e1f
 8013018:	43500000 	.word	0x43500000
 801301c:	ffff3cb0 	.word	0xffff3cb0
 8013020:	3c900000 	.word	0x3c900000

08013024 <scalbnf>:
 8013024:	ee10 3a10 	vmov	r3, s0
 8013028:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801302c:	d02b      	beq.n	8013086 <scalbnf+0x62>
 801302e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013032:	d302      	bcc.n	801303a <scalbnf+0x16>
 8013034:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013038:	4770      	bx	lr
 801303a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801303e:	d123      	bne.n	8013088 <scalbnf+0x64>
 8013040:	4b24      	ldr	r3, [pc, #144]	@ (80130d4 <scalbnf+0xb0>)
 8013042:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80130d8 <scalbnf+0xb4>
 8013046:	4298      	cmp	r0, r3
 8013048:	ee20 0a27 	vmul.f32	s0, s0, s15
 801304c:	db17      	blt.n	801307e <scalbnf+0x5a>
 801304e:	ee10 3a10 	vmov	r3, s0
 8013052:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013056:	3a19      	subs	r2, #25
 8013058:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801305c:	4288      	cmp	r0, r1
 801305e:	dd15      	ble.n	801308c <scalbnf+0x68>
 8013060:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80130dc <scalbnf+0xb8>
 8013064:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80130e0 <scalbnf+0xbc>
 8013068:	ee10 3a10 	vmov	r3, s0
 801306c:	eeb0 7a67 	vmov.f32	s14, s15
 8013070:	2b00      	cmp	r3, #0
 8013072:	bfb8      	it	lt
 8013074:	eef0 7a66 	vmovlt.f32	s15, s13
 8013078:	ee27 0a87 	vmul.f32	s0, s15, s14
 801307c:	4770      	bx	lr
 801307e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80130e4 <scalbnf+0xc0>
 8013082:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013086:	4770      	bx	lr
 8013088:	0dd2      	lsrs	r2, r2, #23
 801308a:	e7e5      	b.n	8013058 <scalbnf+0x34>
 801308c:	4410      	add	r0, r2
 801308e:	28fe      	cmp	r0, #254	@ 0xfe
 8013090:	dce6      	bgt.n	8013060 <scalbnf+0x3c>
 8013092:	2800      	cmp	r0, #0
 8013094:	dd06      	ble.n	80130a4 <scalbnf+0x80>
 8013096:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801309a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801309e:	ee00 3a10 	vmov	s0, r3
 80130a2:	4770      	bx	lr
 80130a4:	f110 0f16 	cmn.w	r0, #22
 80130a8:	da09      	bge.n	80130be <scalbnf+0x9a>
 80130aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80130e4 <scalbnf+0xc0>
 80130ae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80130e8 <scalbnf+0xc4>
 80130b2:	ee10 3a10 	vmov	r3, s0
 80130b6:	eeb0 7a67 	vmov.f32	s14, s15
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	e7d9      	b.n	8013072 <scalbnf+0x4e>
 80130be:	3019      	adds	r0, #25
 80130c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80130c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80130c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80130ec <scalbnf+0xc8>
 80130cc:	ee07 3a90 	vmov	s15, r3
 80130d0:	e7d7      	b.n	8013082 <scalbnf+0x5e>
 80130d2:	bf00      	nop
 80130d4:	ffff3cb0 	.word	0xffff3cb0
 80130d8:	4c000000 	.word	0x4c000000
 80130dc:	7149f2ca 	.word	0x7149f2ca
 80130e0:	f149f2ca 	.word	0xf149f2ca
 80130e4:	0da24260 	.word	0x0da24260
 80130e8:	8da24260 	.word	0x8da24260
 80130ec:	33000000 	.word	0x33000000

080130f0 <__kernel_rem_pio2>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	ed2d 8b02 	vpush	{d8}
 80130f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80130fc:	f112 0f14 	cmn.w	r2, #20
 8013100:	9306      	str	r3, [sp, #24]
 8013102:	9104      	str	r1, [sp, #16]
 8013104:	4bc2      	ldr	r3, [pc, #776]	@ (8013410 <__kernel_rem_pio2+0x320>)
 8013106:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013108:	9008      	str	r0, [sp, #32]
 801310a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801310e:	9300      	str	r3, [sp, #0]
 8013110:	9b06      	ldr	r3, [sp, #24]
 8013112:	f103 33ff 	add.w	r3, r3, #4294967295
 8013116:	bfa8      	it	ge
 8013118:	1ed4      	subge	r4, r2, #3
 801311a:	9305      	str	r3, [sp, #20]
 801311c:	bfb2      	itee	lt
 801311e:	2400      	movlt	r4, #0
 8013120:	2318      	movge	r3, #24
 8013122:	fb94 f4f3 	sdivge	r4, r4, r3
 8013126:	f06f 0317 	mvn.w	r3, #23
 801312a:	fb04 3303 	mla	r3, r4, r3, r3
 801312e:	eb03 0b02 	add.w	fp, r3, r2
 8013132:	9b00      	ldr	r3, [sp, #0]
 8013134:	9a05      	ldr	r2, [sp, #20]
 8013136:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8013400 <__kernel_rem_pio2+0x310>
 801313a:	eb03 0802 	add.w	r8, r3, r2
 801313e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013140:	1aa7      	subs	r7, r4, r2
 8013142:	ae20      	add	r6, sp, #128	@ 0x80
 8013144:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013148:	2500      	movs	r5, #0
 801314a:	4545      	cmp	r5, r8
 801314c:	dd12      	ble.n	8013174 <__kernel_rem_pio2+0x84>
 801314e:	9b06      	ldr	r3, [sp, #24]
 8013150:	aa20      	add	r2, sp, #128	@ 0x80
 8013152:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013156:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801315a:	2700      	movs	r7, #0
 801315c:	9b00      	ldr	r3, [sp, #0]
 801315e:	429f      	cmp	r7, r3
 8013160:	dc2e      	bgt.n	80131c0 <__kernel_rem_pio2+0xd0>
 8013162:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8013400 <__kernel_rem_pio2+0x310>
 8013166:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801316a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801316e:	46a8      	mov	r8, r5
 8013170:	2600      	movs	r6, #0
 8013172:	e01b      	b.n	80131ac <__kernel_rem_pio2+0xbc>
 8013174:	42ef      	cmn	r7, r5
 8013176:	d407      	bmi.n	8013188 <__kernel_rem_pio2+0x98>
 8013178:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801317c:	f7ed f99e 	bl	80004bc <__aeabi_i2d>
 8013180:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013184:	3501      	adds	r5, #1
 8013186:	e7e0      	b.n	801314a <__kernel_rem_pio2+0x5a>
 8013188:	ec51 0b18 	vmov	r0, r1, d8
 801318c:	e7f8      	b.n	8013180 <__kernel_rem_pio2+0x90>
 801318e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013192:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013196:	f7ed f9fb 	bl	8000590 <__aeabi_dmul>
 801319a:	4602      	mov	r2, r0
 801319c:	460b      	mov	r3, r1
 801319e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131a2:	f7ed f83f 	bl	8000224 <__adddf3>
 80131a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131aa:	3601      	adds	r6, #1
 80131ac:	9b05      	ldr	r3, [sp, #20]
 80131ae:	429e      	cmp	r6, r3
 80131b0:	dded      	ble.n	801318e <__kernel_rem_pio2+0x9e>
 80131b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131b6:	3701      	adds	r7, #1
 80131b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80131bc:	3508      	adds	r5, #8
 80131be:	e7cd      	b.n	801315c <__kernel_rem_pio2+0x6c>
 80131c0:	9b00      	ldr	r3, [sp, #0]
 80131c2:	f8dd 8000 	ldr.w	r8, [sp]
 80131c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80131c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80131cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80131ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80131d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80131d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80131d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80131da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131dc:	ab98      	add	r3, sp, #608	@ 0x260
 80131de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80131e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80131e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80131ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80131ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80131f2:	46a1      	mov	r9, r4
 80131f4:	46c2      	mov	sl, r8
 80131f6:	f1ba 0f00 	cmp.w	sl, #0
 80131fa:	dc77      	bgt.n	80132ec <__kernel_rem_pio2+0x1fc>
 80131fc:	4658      	mov	r0, fp
 80131fe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013202:	f7ff fe95 	bl	8012f30 <scalbn>
 8013206:	ec57 6b10 	vmov	r6, r7, d0
 801320a:	2200      	movs	r2, #0
 801320c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013210:	4630      	mov	r0, r6
 8013212:	4639      	mov	r1, r7
 8013214:	f7ed f9bc 	bl	8000590 <__aeabi_dmul>
 8013218:	ec41 0b10 	vmov	d0, r0, r1
 801321c:	f000 fd20 	bl	8013c60 <floor>
 8013220:	4b7c      	ldr	r3, [pc, #496]	@ (8013414 <__kernel_rem_pio2+0x324>)
 8013222:	ec51 0b10 	vmov	r0, r1, d0
 8013226:	2200      	movs	r2, #0
 8013228:	f7ed f9b2 	bl	8000590 <__aeabi_dmul>
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	4630      	mov	r0, r6
 8013232:	4639      	mov	r1, r7
 8013234:	f7ec fff4 	bl	8000220 <__aeabi_dsub>
 8013238:	460f      	mov	r7, r1
 801323a:	4606      	mov	r6, r0
 801323c:	f7ed fc42 	bl	8000ac4 <__aeabi_d2iz>
 8013240:	9002      	str	r0, [sp, #8]
 8013242:	f7ed f93b 	bl	80004bc <__aeabi_i2d>
 8013246:	4602      	mov	r2, r0
 8013248:	460b      	mov	r3, r1
 801324a:	4630      	mov	r0, r6
 801324c:	4639      	mov	r1, r7
 801324e:	f7ec ffe7 	bl	8000220 <__aeabi_dsub>
 8013252:	f1bb 0f00 	cmp.w	fp, #0
 8013256:	4606      	mov	r6, r0
 8013258:	460f      	mov	r7, r1
 801325a:	dd6c      	ble.n	8013336 <__kernel_rem_pio2+0x246>
 801325c:	f108 31ff 	add.w	r1, r8, #4294967295
 8013260:	ab0c      	add	r3, sp, #48	@ 0x30
 8013262:	9d02      	ldr	r5, [sp, #8]
 8013264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013268:	f1cb 0018 	rsb	r0, fp, #24
 801326c:	fa43 f200 	asr.w	r2, r3, r0
 8013270:	4415      	add	r5, r2
 8013272:	4082      	lsls	r2, r0
 8013274:	1a9b      	subs	r3, r3, r2
 8013276:	aa0c      	add	r2, sp, #48	@ 0x30
 8013278:	9502      	str	r5, [sp, #8]
 801327a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801327e:	f1cb 0217 	rsb	r2, fp, #23
 8013282:	fa43 f902 	asr.w	r9, r3, r2
 8013286:	f1b9 0f00 	cmp.w	r9, #0
 801328a:	dd64      	ble.n	8013356 <__kernel_rem_pio2+0x266>
 801328c:	9b02      	ldr	r3, [sp, #8]
 801328e:	2200      	movs	r2, #0
 8013290:	3301      	adds	r3, #1
 8013292:	9302      	str	r3, [sp, #8]
 8013294:	4615      	mov	r5, r2
 8013296:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801329a:	4590      	cmp	r8, r2
 801329c:	f300 80a1 	bgt.w	80133e2 <__kernel_rem_pio2+0x2f2>
 80132a0:	f1bb 0f00 	cmp.w	fp, #0
 80132a4:	dd07      	ble.n	80132b6 <__kernel_rem_pio2+0x1c6>
 80132a6:	f1bb 0f01 	cmp.w	fp, #1
 80132aa:	f000 80c1 	beq.w	8013430 <__kernel_rem_pio2+0x340>
 80132ae:	f1bb 0f02 	cmp.w	fp, #2
 80132b2:	f000 80c8 	beq.w	8013446 <__kernel_rem_pio2+0x356>
 80132b6:	f1b9 0f02 	cmp.w	r9, #2
 80132ba:	d14c      	bne.n	8013356 <__kernel_rem_pio2+0x266>
 80132bc:	4632      	mov	r2, r6
 80132be:	463b      	mov	r3, r7
 80132c0:	4955      	ldr	r1, [pc, #340]	@ (8013418 <__kernel_rem_pio2+0x328>)
 80132c2:	2000      	movs	r0, #0
 80132c4:	f7ec ffac 	bl	8000220 <__aeabi_dsub>
 80132c8:	4606      	mov	r6, r0
 80132ca:	460f      	mov	r7, r1
 80132cc:	2d00      	cmp	r5, #0
 80132ce:	d042      	beq.n	8013356 <__kernel_rem_pio2+0x266>
 80132d0:	4658      	mov	r0, fp
 80132d2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8013408 <__kernel_rem_pio2+0x318>
 80132d6:	f7ff fe2b 	bl	8012f30 <scalbn>
 80132da:	4630      	mov	r0, r6
 80132dc:	4639      	mov	r1, r7
 80132de:	ec53 2b10 	vmov	r2, r3, d0
 80132e2:	f7ec ff9d 	bl	8000220 <__aeabi_dsub>
 80132e6:	4606      	mov	r6, r0
 80132e8:	460f      	mov	r7, r1
 80132ea:	e034      	b.n	8013356 <__kernel_rem_pio2+0x266>
 80132ec:	4b4b      	ldr	r3, [pc, #300]	@ (801341c <__kernel_rem_pio2+0x32c>)
 80132ee:	2200      	movs	r2, #0
 80132f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132f4:	f7ed f94c 	bl	8000590 <__aeabi_dmul>
 80132f8:	f7ed fbe4 	bl	8000ac4 <__aeabi_d2iz>
 80132fc:	f7ed f8de 	bl	80004bc <__aeabi_i2d>
 8013300:	4b47      	ldr	r3, [pc, #284]	@ (8013420 <__kernel_rem_pio2+0x330>)
 8013302:	2200      	movs	r2, #0
 8013304:	4606      	mov	r6, r0
 8013306:	460f      	mov	r7, r1
 8013308:	f7ed f942 	bl	8000590 <__aeabi_dmul>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013314:	f7ec ff84 	bl	8000220 <__aeabi_dsub>
 8013318:	f7ed fbd4 	bl	8000ac4 <__aeabi_d2iz>
 801331c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013320:	f849 0b04 	str.w	r0, [r9], #4
 8013324:	4639      	mov	r1, r7
 8013326:	4630      	mov	r0, r6
 8013328:	f7ec ff7c 	bl	8000224 <__adddf3>
 801332c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013334:	e75f      	b.n	80131f6 <__kernel_rem_pio2+0x106>
 8013336:	d107      	bne.n	8013348 <__kernel_rem_pio2+0x258>
 8013338:	f108 33ff 	add.w	r3, r8, #4294967295
 801333c:	aa0c      	add	r2, sp, #48	@ 0x30
 801333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013342:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013346:	e79e      	b.n	8013286 <__kernel_rem_pio2+0x196>
 8013348:	4b36      	ldr	r3, [pc, #216]	@ (8013424 <__kernel_rem_pio2+0x334>)
 801334a:	2200      	movs	r2, #0
 801334c:	f7ed fba6 	bl	8000a9c <__aeabi_dcmpge>
 8013350:	2800      	cmp	r0, #0
 8013352:	d143      	bne.n	80133dc <__kernel_rem_pio2+0x2ec>
 8013354:	4681      	mov	r9, r0
 8013356:	2200      	movs	r2, #0
 8013358:	2300      	movs	r3, #0
 801335a:	4630      	mov	r0, r6
 801335c:	4639      	mov	r1, r7
 801335e:	f7ed fb7f 	bl	8000a60 <__aeabi_dcmpeq>
 8013362:	2800      	cmp	r0, #0
 8013364:	f000 80c1 	beq.w	80134ea <__kernel_rem_pio2+0x3fa>
 8013368:	f108 33ff 	add.w	r3, r8, #4294967295
 801336c:	2200      	movs	r2, #0
 801336e:	9900      	ldr	r1, [sp, #0]
 8013370:	428b      	cmp	r3, r1
 8013372:	da70      	bge.n	8013456 <__kernel_rem_pio2+0x366>
 8013374:	2a00      	cmp	r2, #0
 8013376:	f000 808b 	beq.w	8013490 <__kernel_rem_pio2+0x3a0>
 801337a:	f108 38ff 	add.w	r8, r8, #4294967295
 801337e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013380:	f1ab 0b18 	sub.w	fp, fp, #24
 8013384:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d0f6      	beq.n	801337a <__kernel_rem_pio2+0x28a>
 801338c:	4658      	mov	r0, fp
 801338e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8013408 <__kernel_rem_pio2+0x318>
 8013392:	f7ff fdcd 	bl	8012f30 <scalbn>
 8013396:	f108 0301 	add.w	r3, r8, #1
 801339a:	00da      	lsls	r2, r3, #3
 801339c:	9205      	str	r2, [sp, #20]
 801339e:	ec55 4b10 	vmov	r4, r5, d0
 80133a2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80133a4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801341c <__kernel_rem_pio2+0x32c>
 80133a8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80133ac:	4646      	mov	r6, r8
 80133ae:	f04f 0a00 	mov.w	sl, #0
 80133b2:	2e00      	cmp	r6, #0
 80133b4:	f280 80d1 	bge.w	801355a <__kernel_rem_pio2+0x46a>
 80133b8:	4644      	mov	r4, r8
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	f2c0 80ff 	blt.w	80135be <__kernel_rem_pio2+0x4ce>
 80133c0:	4b19      	ldr	r3, [pc, #100]	@ (8013428 <__kernel_rem_pio2+0x338>)
 80133c2:	461f      	mov	r7, r3
 80133c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80133c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80133ca:	9306      	str	r3, [sp, #24]
 80133cc:	f04f 0a00 	mov.w	sl, #0
 80133d0:	f04f 0b00 	mov.w	fp, #0
 80133d4:	2600      	movs	r6, #0
 80133d6:	eba8 0504 	sub.w	r5, r8, r4
 80133da:	e0e4      	b.n	80135a6 <__kernel_rem_pio2+0x4b6>
 80133dc:	f04f 0902 	mov.w	r9, #2
 80133e0:	e754      	b.n	801328c <__kernel_rem_pio2+0x19c>
 80133e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80133e6:	bb0d      	cbnz	r5, 801342c <__kernel_rem_pio2+0x33c>
 80133e8:	b123      	cbz	r3, 80133f4 <__kernel_rem_pio2+0x304>
 80133ea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80133ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80133f2:	2301      	movs	r3, #1
 80133f4:	3201      	adds	r2, #1
 80133f6:	461d      	mov	r5, r3
 80133f8:	e74f      	b.n	801329a <__kernel_rem_pio2+0x1aa>
 80133fa:	bf00      	nop
 80133fc:	f3af 8000 	nop.w
	...
 801340c:	3ff00000 	.word	0x3ff00000
 8013410:	08014410 	.word	0x08014410
 8013414:	40200000 	.word	0x40200000
 8013418:	3ff00000 	.word	0x3ff00000
 801341c:	3e700000 	.word	0x3e700000
 8013420:	41700000 	.word	0x41700000
 8013424:	3fe00000 	.word	0x3fe00000
 8013428:	080143d0 	.word	0x080143d0
 801342c:	1acb      	subs	r3, r1, r3
 801342e:	e7de      	b.n	80133ee <__kernel_rem_pio2+0x2fe>
 8013430:	f108 32ff 	add.w	r2, r8, #4294967295
 8013434:	ab0c      	add	r3, sp, #48	@ 0x30
 8013436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801343a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801343e:	a90c      	add	r1, sp, #48	@ 0x30
 8013440:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013444:	e737      	b.n	80132b6 <__kernel_rem_pio2+0x1c6>
 8013446:	f108 32ff 	add.w	r2, r8, #4294967295
 801344a:	ab0c      	add	r3, sp, #48	@ 0x30
 801344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013450:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013454:	e7f3      	b.n	801343e <__kernel_rem_pio2+0x34e>
 8013456:	a90c      	add	r1, sp, #48	@ 0x30
 8013458:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801345c:	3b01      	subs	r3, #1
 801345e:	430a      	orrs	r2, r1
 8013460:	e785      	b.n	801336e <__kernel_rem_pio2+0x27e>
 8013462:	3401      	adds	r4, #1
 8013464:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013468:	2a00      	cmp	r2, #0
 801346a:	d0fa      	beq.n	8013462 <__kernel_rem_pio2+0x372>
 801346c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801346e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013472:	eb0d 0503 	add.w	r5, sp, r3
 8013476:	9b06      	ldr	r3, [sp, #24]
 8013478:	aa20      	add	r2, sp, #128	@ 0x80
 801347a:	4443      	add	r3, r8
 801347c:	f108 0701 	add.w	r7, r8, #1
 8013480:	3d98      	subs	r5, #152	@ 0x98
 8013482:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013486:	4444      	add	r4, r8
 8013488:	42bc      	cmp	r4, r7
 801348a:	da04      	bge.n	8013496 <__kernel_rem_pio2+0x3a6>
 801348c:	46a0      	mov	r8, r4
 801348e:	e6a2      	b.n	80131d6 <__kernel_rem_pio2+0xe6>
 8013490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013492:	2401      	movs	r4, #1
 8013494:	e7e6      	b.n	8013464 <__kernel_rem_pio2+0x374>
 8013496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013498:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801349c:	f7ed f80e 	bl	80004bc <__aeabi_i2d>
 80134a0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013760 <__kernel_rem_pio2+0x670>
 80134a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80134a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80134b0:	46b2      	mov	sl, r6
 80134b2:	f04f 0800 	mov.w	r8, #0
 80134b6:	9b05      	ldr	r3, [sp, #20]
 80134b8:	4598      	cmp	r8, r3
 80134ba:	dd05      	ble.n	80134c8 <__kernel_rem_pio2+0x3d8>
 80134bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134c0:	3701      	adds	r7, #1
 80134c2:	eca5 7b02 	vstmia	r5!, {d7}
 80134c6:	e7df      	b.n	8013488 <__kernel_rem_pio2+0x398>
 80134c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80134cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80134d0:	f7ed f85e 	bl	8000590 <__aeabi_dmul>
 80134d4:	4602      	mov	r2, r0
 80134d6:	460b      	mov	r3, r1
 80134d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134dc:	f7ec fea2 	bl	8000224 <__adddf3>
 80134e0:	f108 0801 	add.w	r8, r8, #1
 80134e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134e8:	e7e5      	b.n	80134b6 <__kernel_rem_pio2+0x3c6>
 80134ea:	f1cb 0000 	rsb	r0, fp, #0
 80134ee:	ec47 6b10 	vmov	d0, r6, r7
 80134f2:	f7ff fd1d 	bl	8012f30 <scalbn>
 80134f6:	ec55 4b10 	vmov	r4, r5, d0
 80134fa:	4b9b      	ldr	r3, [pc, #620]	@ (8013768 <__kernel_rem_pio2+0x678>)
 80134fc:	2200      	movs	r2, #0
 80134fe:	4620      	mov	r0, r4
 8013500:	4629      	mov	r1, r5
 8013502:	f7ed facb 	bl	8000a9c <__aeabi_dcmpge>
 8013506:	b300      	cbz	r0, 801354a <__kernel_rem_pio2+0x45a>
 8013508:	4b98      	ldr	r3, [pc, #608]	@ (801376c <__kernel_rem_pio2+0x67c>)
 801350a:	2200      	movs	r2, #0
 801350c:	4620      	mov	r0, r4
 801350e:	4629      	mov	r1, r5
 8013510:	f7ed f83e 	bl	8000590 <__aeabi_dmul>
 8013514:	f7ed fad6 	bl	8000ac4 <__aeabi_d2iz>
 8013518:	4606      	mov	r6, r0
 801351a:	f7ec ffcf 	bl	80004bc <__aeabi_i2d>
 801351e:	4b92      	ldr	r3, [pc, #584]	@ (8013768 <__kernel_rem_pio2+0x678>)
 8013520:	2200      	movs	r2, #0
 8013522:	f7ed f835 	bl	8000590 <__aeabi_dmul>
 8013526:	460b      	mov	r3, r1
 8013528:	4602      	mov	r2, r0
 801352a:	4629      	mov	r1, r5
 801352c:	4620      	mov	r0, r4
 801352e:	f7ec fe77 	bl	8000220 <__aeabi_dsub>
 8013532:	f7ed fac7 	bl	8000ac4 <__aeabi_d2iz>
 8013536:	ab0c      	add	r3, sp, #48	@ 0x30
 8013538:	f10b 0b18 	add.w	fp, fp, #24
 801353c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013540:	f108 0801 	add.w	r8, r8, #1
 8013544:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013548:	e720      	b.n	801338c <__kernel_rem_pio2+0x29c>
 801354a:	4620      	mov	r0, r4
 801354c:	4629      	mov	r1, r5
 801354e:	f7ed fab9 	bl	8000ac4 <__aeabi_d2iz>
 8013552:	ab0c      	add	r3, sp, #48	@ 0x30
 8013554:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013558:	e718      	b.n	801338c <__kernel_rem_pio2+0x29c>
 801355a:	ab0c      	add	r3, sp, #48	@ 0x30
 801355c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013560:	f7ec ffac 	bl	80004bc <__aeabi_i2d>
 8013564:	4622      	mov	r2, r4
 8013566:	462b      	mov	r3, r5
 8013568:	f7ed f812 	bl	8000590 <__aeabi_dmul>
 801356c:	4652      	mov	r2, sl
 801356e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013572:	465b      	mov	r3, fp
 8013574:	4620      	mov	r0, r4
 8013576:	4629      	mov	r1, r5
 8013578:	f7ed f80a 	bl	8000590 <__aeabi_dmul>
 801357c:	3e01      	subs	r6, #1
 801357e:	4604      	mov	r4, r0
 8013580:	460d      	mov	r5, r1
 8013582:	e716      	b.n	80133b2 <__kernel_rem_pio2+0x2c2>
 8013584:	9906      	ldr	r1, [sp, #24]
 8013586:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801358a:	9106      	str	r1, [sp, #24]
 801358c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013590:	f7ec fffe 	bl	8000590 <__aeabi_dmul>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	4650      	mov	r0, sl
 801359a:	4659      	mov	r1, fp
 801359c:	f7ec fe42 	bl	8000224 <__adddf3>
 80135a0:	3601      	adds	r6, #1
 80135a2:	4682      	mov	sl, r0
 80135a4:	468b      	mov	fp, r1
 80135a6:	9b00      	ldr	r3, [sp, #0]
 80135a8:	429e      	cmp	r6, r3
 80135aa:	dc01      	bgt.n	80135b0 <__kernel_rem_pio2+0x4c0>
 80135ac:	42ae      	cmp	r6, r5
 80135ae:	dde9      	ble.n	8013584 <__kernel_rem_pio2+0x494>
 80135b0:	ab48      	add	r3, sp, #288	@ 0x120
 80135b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80135b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80135ba:	3c01      	subs	r4, #1
 80135bc:	e6fd      	b.n	80133ba <__kernel_rem_pio2+0x2ca>
 80135be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80135c0:	2b02      	cmp	r3, #2
 80135c2:	dc0b      	bgt.n	80135dc <__kernel_rem_pio2+0x4ec>
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	dc35      	bgt.n	8013634 <__kernel_rem_pio2+0x544>
 80135c8:	d059      	beq.n	801367e <__kernel_rem_pio2+0x58e>
 80135ca:	9b02      	ldr	r3, [sp, #8]
 80135cc:	f003 0007 	and.w	r0, r3, #7
 80135d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80135d4:	ecbd 8b02 	vpop	{d8}
 80135d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d1f3      	bne.n	80135ca <__kernel_rem_pio2+0x4da>
 80135e2:	9b05      	ldr	r3, [sp, #20]
 80135e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80135e8:	eb0d 0403 	add.w	r4, sp, r3
 80135ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80135f0:	4625      	mov	r5, r4
 80135f2:	46c2      	mov	sl, r8
 80135f4:	f1ba 0f00 	cmp.w	sl, #0
 80135f8:	dc69      	bgt.n	80136ce <__kernel_rem_pio2+0x5de>
 80135fa:	4645      	mov	r5, r8
 80135fc:	2d01      	cmp	r5, #1
 80135fe:	f300 8087 	bgt.w	8013710 <__kernel_rem_pio2+0x620>
 8013602:	9c05      	ldr	r4, [sp, #20]
 8013604:	ab48      	add	r3, sp, #288	@ 0x120
 8013606:	441c      	add	r4, r3
 8013608:	2000      	movs	r0, #0
 801360a:	2100      	movs	r1, #0
 801360c:	f1b8 0f01 	cmp.w	r8, #1
 8013610:	f300 809c 	bgt.w	801374c <__kernel_rem_pio2+0x65c>
 8013614:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8013618:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801361c:	f1b9 0f00 	cmp.w	r9, #0
 8013620:	f040 80a6 	bne.w	8013770 <__kernel_rem_pio2+0x680>
 8013624:	9b04      	ldr	r3, [sp, #16]
 8013626:	e9c3 5600 	strd	r5, r6, [r3]
 801362a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801362e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013632:	e7ca      	b.n	80135ca <__kernel_rem_pio2+0x4da>
 8013634:	9d05      	ldr	r5, [sp, #20]
 8013636:	ab48      	add	r3, sp, #288	@ 0x120
 8013638:	441d      	add	r5, r3
 801363a:	4644      	mov	r4, r8
 801363c:	2000      	movs	r0, #0
 801363e:	2100      	movs	r1, #0
 8013640:	2c00      	cmp	r4, #0
 8013642:	da35      	bge.n	80136b0 <__kernel_rem_pio2+0x5c0>
 8013644:	f1b9 0f00 	cmp.w	r9, #0
 8013648:	d038      	beq.n	80136bc <__kernel_rem_pio2+0x5cc>
 801364a:	4602      	mov	r2, r0
 801364c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013650:	9c04      	ldr	r4, [sp, #16]
 8013652:	e9c4 2300 	strd	r2, r3, [r4]
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801365e:	f7ec fddf 	bl	8000220 <__aeabi_dsub>
 8013662:	ad4a      	add	r5, sp, #296	@ 0x128
 8013664:	2401      	movs	r4, #1
 8013666:	45a0      	cmp	r8, r4
 8013668:	da2b      	bge.n	80136c2 <__kernel_rem_pio2+0x5d2>
 801366a:	f1b9 0f00 	cmp.w	r9, #0
 801366e:	d002      	beq.n	8013676 <__kernel_rem_pio2+0x586>
 8013670:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013674:	4619      	mov	r1, r3
 8013676:	9b04      	ldr	r3, [sp, #16]
 8013678:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801367c:	e7a5      	b.n	80135ca <__kernel_rem_pio2+0x4da>
 801367e:	9c05      	ldr	r4, [sp, #20]
 8013680:	ab48      	add	r3, sp, #288	@ 0x120
 8013682:	441c      	add	r4, r3
 8013684:	2000      	movs	r0, #0
 8013686:	2100      	movs	r1, #0
 8013688:	f1b8 0f00 	cmp.w	r8, #0
 801368c:	da09      	bge.n	80136a2 <__kernel_rem_pio2+0x5b2>
 801368e:	f1b9 0f00 	cmp.w	r9, #0
 8013692:	d002      	beq.n	801369a <__kernel_rem_pio2+0x5aa>
 8013694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013698:	4619      	mov	r1, r3
 801369a:	9b04      	ldr	r3, [sp, #16]
 801369c:	e9c3 0100 	strd	r0, r1, [r3]
 80136a0:	e793      	b.n	80135ca <__kernel_rem_pio2+0x4da>
 80136a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80136a6:	f7ec fdbd 	bl	8000224 <__adddf3>
 80136aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80136ae:	e7eb      	b.n	8013688 <__kernel_rem_pio2+0x598>
 80136b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80136b4:	f7ec fdb6 	bl	8000224 <__adddf3>
 80136b8:	3c01      	subs	r4, #1
 80136ba:	e7c1      	b.n	8013640 <__kernel_rem_pio2+0x550>
 80136bc:	4602      	mov	r2, r0
 80136be:	460b      	mov	r3, r1
 80136c0:	e7c6      	b.n	8013650 <__kernel_rem_pio2+0x560>
 80136c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80136c6:	f7ec fdad 	bl	8000224 <__adddf3>
 80136ca:	3401      	adds	r4, #1
 80136cc:	e7cb      	b.n	8013666 <__kernel_rem_pio2+0x576>
 80136ce:	ed35 7b02 	vldmdb	r5!, {d7}
 80136d2:	ed8d 7b00 	vstr	d7, [sp]
 80136d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80136da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136de:	ec53 2b17 	vmov	r2, r3, d7
 80136e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80136e6:	f7ec fd9d 	bl	8000224 <__adddf3>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4606      	mov	r6, r0
 80136f0:	460f      	mov	r7, r1
 80136f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136f6:	f7ec fd93 	bl	8000220 <__aeabi_dsub>
 80136fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80136fe:	f7ec fd91 	bl	8000224 <__adddf3>
 8013702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013706:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801370a:	e9c5 6700 	strd	r6, r7, [r5]
 801370e:	e771      	b.n	80135f4 <__kernel_rem_pio2+0x504>
 8013710:	ed34 7b02 	vldmdb	r4!, {d7}
 8013714:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013718:	ec51 0b17 	vmov	r0, r1, d7
 801371c:	4652      	mov	r2, sl
 801371e:	465b      	mov	r3, fp
 8013720:	ed8d 7b00 	vstr	d7, [sp]
 8013724:	f7ec fd7e 	bl	8000224 <__adddf3>
 8013728:	4602      	mov	r2, r0
 801372a:	460b      	mov	r3, r1
 801372c:	4606      	mov	r6, r0
 801372e:	460f      	mov	r7, r1
 8013730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013734:	f7ec fd74 	bl	8000220 <__aeabi_dsub>
 8013738:	4652      	mov	r2, sl
 801373a:	465b      	mov	r3, fp
 801373c:	f7ec fd72 	bl	8000224 <__adddf3>
 8013740:	3d01      	subs	r5, #1
 8013742:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013746:	e9c4 6700 	strd	r6, r7, [r4]
 801374a:	e757      	b.n	80135fc <__kernel_rem_pio2+0x50c>
 801374c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013750:	f7ec fd68 	bl	8000224 <__adddf3>
 8013754:	f108 38ff 	add.w	r8, r8, #4294967295
 8013758:	e758      	b.n	801360c <__kernel_rem_pio2+0x51c>
 801375a:	bf00      	nop
 801375c:	f3af 8000 	nop.w
	...
 8013768:	41700000 	.word	0x41700000
 801376c:	3e700000 	.word	0x3e700000
 8013770:	9b04      	ldr	r3, [sp, #16]
 8013772:	9a04      	ldr	r2, [sp, #16]
 8013774:	601d      	str	r5, [r3, #0]
 8013776:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801377a:	605c      	str	r4, [r3, #4]
 801377c:	609f      	str	r7, [r3, #8]
 801377e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013782:	60d3      	str	r3, [r2, #12]
 8013784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013788:	6110      	str	r0, [r2, #16]
 801378a:	6153      	str	r3, [r2, #20]
 801378c:	e71d      	b.n	80135ca <__kernel_rem_pio2+0x4da>
 801378e:	bf00      	nop

08013790 <__kernel_rem_pio2f>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	ed2d 8b04 	vpush	{d8-d9}
 8013798:	b0d9      	sub	sp, #356	@ 0x164
 801379a:	4690      	mov	r8, r2
 801379c:	9001      	str	r0, [sp, #4]
 801379e:	4ab6      	ldr	r2, [pc, #728]	@ (8013a78 <__kernel_rem_pio2f+0x2e8>)
 80137a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80137a2:	f118 0f04 	cmn.w	r8, #4
 80137a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80137aa:	460f      	mov	r7, r1
 80137ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80137b0:	db26      	blt.n	8013800 <__kernel_rem_pio2f+0x70>
 80137b2:	f1b8 0203 	subs.w	r2, r8, #3
 80137b6:	bf48      	it	mi
 80137b8:	f108 0204 	addmi.w	r2, r8, #4
 80137bc:	10d2      	asrs	r2, r2, #3
 80137be:	1c55      	adds	r5, r2, #1
 80137c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80137c2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 80137c6:	00e8      	lsls	r0, r5, #3
 80137c8:	eba2 060b 	sub.w	r6, r2, fp
 80137cc:	9002      	str	r0, [sp, #8]
 80137ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80137d2:	eb0a 0c0b 	add.w	ip, sl, fp
 80137d6:	ac1c      	add	r4, sp, #112	@ 0x70
 80137d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80137dc:	2000      	movs	r0, #0
 80137de:	4560      	cmp	r0, ip
 80137e0:	dd10      	ble.n	8013804 <__kernel_rem_pio2f+0x74>
 80137e2:	a91c      	add	r1, sp, #112	@ 0x70
 80137e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80137e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80137ec:	2600      	movs	r6, #0
 80137ee:	4556      	cmp	r6, sl
 80137f0:	dc24      	bgt.n	801383c <__kernel_rem_pio2f+0xac>
 80137f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80137f6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 80137fa:	4684      	mov	ip, r0
 80137fc:	2400      	movs	r4, #0
 80137fe:	e016      	b.n	801382e <__kernel_rem_pio2f+0x9e>
 8013800:	2200      	movs	r2, #0
 8013802:	e7dc      	b.n	80137be <__kernel_rem_pio2f+0x2e>
 8013804:	42c6      	cmn	r6, r0
 8013806:	bf5d      	ittte	pl
 8013808:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801380c:	ee07 1a90 	vmovpl	s15, r1
 8013810:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013814:	eef0 7a47 	vmovmi.f32	s15, s14
 8013818:	ece4 7a01 	vstmia	r4!, {s15}
 801381c:	3001      	adds	r0, #1
 801381e:	e7de      	b.n	80137de <__kernel_rem_pio2f+0x4e>
 8013820:	ecfe 6a01 	vldmia	lr!, {s13}
 8013824:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013828:	eee6 7a87 	vfma.f32	s15, s13, s14
 801382c:	3401      	adds	r4, #1
 801382e:	455c      	cmp	r4, fp
 8013830:	ddf6      	ble.n	8013820 <__kernel_rem_pio2f+0x90>
 8013832:	ece9 7a01 	vstmia	r9!, {s15}
 8013836:	3601      	adds	r6, #1
 8013838:	3004      	adds	r0, #4
 801383a:	e7d8      	b.n	80137ee <__kernel_rem_pio2f+0x5e>
 801383c:	a908      	add	r1, sp, #32
 801383e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013842:	9104      	str	r1, [sp, #16]
 8013844:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013846:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8013a84 <__kernel_rem_pio2f+0x2f4>
 801384a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013a80 <__kernel_rem_pio2f+0x2f0>
 801384e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013852:	9203      	str	r2, [sp, #12]
 8013854:	4654      	mov	r4, sl
 8013856:	00a2      	lsls	r2, r4, #2
 8013858:	9205      	str	r2, [sp, #20]
 801385a:	aa58      	add	r2, sp, #352	@ 0x160
 801385c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013860:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013864:	a944      	add	r1, sp, #272	@ 0x110
 8013866:	aa08      	add	r2, sp, #32
 8013868:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801386c:	4694      	mov	ip, r2
 801386e:	4626      	mov	r6, r4
 8013870:	2e00      	cmp	r6, #0
 8013872:	dc4c      	bgt.n	801390e <__kernel_rem_pio2f+0x17e>
 8013874:	4628      	mov	r0, r5
 8013876:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801387a:	f7ff fbd3 	bl	8013024 <scalbnf>
 801387e:	eeb0 8a40 	vmov.f32	s16, s0
 8013882:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013886:	ee28 0a00 	vmul.f32	s0, s16, s0
 801388a:	f000 fa65 	bl	8013d58 <floorf>
 801388e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013892:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013896:	2d00      	cmp	r5, #0
 8013898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801389c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80138a0:	ee17 9a90 	vmov	r9, s15
 80138a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80138ac:	dd41      	ble.n	8013932 <__kernel_rem_pio2f+0x1a2>
 80138ae:	f104 3cff 	add.w	ip, r4, #4294967295
 80138b2:	a908      	add	r1, sp, #32
 80138b4:	f1c5 0e08 	rsb	lr, r5, #8
 80138b8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80138bc:	fa46 f00e 	asr.w	r0, r6, lr
 80138c0:	4481      	add	r9, r0
 80138c2:	fa00 f00e 	lsl.w	r0, r0, lr
 80138c6:	1a36      	subs	r6, r6, r0
 80138c8:	f1c5 0007 	rsb	r0, r5, #7
 80138cc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80138d0:	4106      	asrs	r6, r0
 80138d2:	2e00      	cmp	r6, #0
 80138d4:	dd3c      	ble.n	8013950 <__kernel_rem_pio2f+0x1c0>
 80138d6:	f04f 0e00 	mov.w	lr, #0
 80138da:	f109 0901 	add.w	r9, r9, #1
 80138de:	4670      	mov	r0, lr
 80138e0:	4574      	cmp	r4, lr
 80138e2:	dc68      	bgt.n	80139b6 <__kernel_rem_pio2f+0x226>
 80138e4:	2d00      	cmp	r5, #0
 80138e6:	dd03      	ble.n	80138f0 <__kernel_rem_pio2f+0x160>
 80138e8:	2d01      	cmp	r5, #1
 80138ea:	d074      	beq.n	80139d6 <__kernel_rem_pio2f+0x246>
 80138ec:	2d02      	cmp	r5, #2
 80138ee:	d07d      	beq.n	80139ec <__kernel_rem_pio2f+0x25c>
 80138f0:	2e02      	cmp	r6, #2
 80138f2:	d12d      	bne.n	8013950 <__kernel_rem_pio2f+0x1c0>
 80138f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80138f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80138fc:	b340      	cbz	r0, 8013950 <__kernel_rem_pio2f+0x1c0>
 80138fe:	4628      	mov	r0, r5
 8013900:	9306      	str	r3, [sp, #24]
 8013902:	f7ff fb8f 	bl	8013024 <scalbnf>
 8013906:	9b06      	ldr	r3, [sp, #24]
 8013908:	ee38 8a40 	vsub.f32	s16, s16, s0
 801390c:	e020      	b.n	8013950 <__kernel_rem_pio2f+0x1c0>
 801390e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013912:	3e01      	subs	r6, #1
 8013914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801391c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013920:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013924:	ecac 0a01 	vstmia	ip!, {s0}
 8013928:	ed30 0a01 	vldmdb	r0!, {s0}
 801392c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013930:	e79e      	b.n	8013870 <__kernel_rem_pio2f+0xe0>
 8013932:	d105      	bne.n	8013940 <__kernel_rem_pio2f+0x1b0>
 8013934:	1e60      	subs	r0, r4, #1
 8013936:	a908      	add	r1, sp, #32
 8013938:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801393c:	11f6      	asrs	r6, r6, #7
 801393e:	e7c8      	b.n	80138d2 <__kernel_rem_pio2f+0x142>
 8013940:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013944:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394c:	da31      	bge.n	80139b2 <__kernel_rem_pio2f+0x222>
 801394e:	2600      	movs	r6, #0
 8013950:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013958:	f040 8098 	bne.w	8013a8c <__kernel_rem_pio2f+0x2fc>
 801395c:	1e60      	subs	r0, r4, #1
 801395e:	2200      	movs	r2, #0
 8013960:	4550      	cmp	r0, sl
 8013962:	da4b      	bge.n	80139fc <__kernel_rem_pio2f+0x26c>
 8013964:	2a00      	cmp	r2, #0
 8013966:	d065      	beq.n	8013a34 <__kernel_rem_pio2f+0x2a4>
 8013968:	3c01      	subs	r4, #1
 801396a:	ab08      	add	r3, sp, #32
 801396c:	3d08      	subs	r5, #8
 801396e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d0f8      	beq.n	8013968 <__kernel_rem_pio2f+0x1d8>
 8013976:	4628      	mov	r0, r5
 8013978:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801397c:	f7ff fb52 	bl	8013024 <scalbnf>
 8013980:	1c63      	adds	r3, r4, #1
 8013982:	aa44      	add	r2, sp, #272	@ 0x110
 8013984:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013a84 <__kernel_rem_pio2f+0x2f4>
 8013988:	0099      	lsls	r1, r3, #2
 801398a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801398e:	4623      	mov	r3, r4
 8013990:	2b00      	cmp	r3, #0
 8013992:	f280 80a9 	bge.w	8013ae8 <__kernel_rem_pio2f+0x358>
 8013996:	4623      	mov	r3, r4
 8013998:	2b00      	cmp	r3, #0
 801399a:	f2c0 80c7 	blt.w	8013b2c <__kernel_rem_pio2f+0x39c>
 801399e:	aa44      	add	r2, sp, #272	@ 0x110
 80139a0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80139a4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013a7c <__kernel_rem_pio2f+0x2ec>
 80139a8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 80139ac:	2000      	movs	r0, #0
 80139ae:	1ae2      	subs	r2, r4, r3
 80139b0:	e0b1      	b.n	8013b16 <__kernel_rem_pio2f+0x386>
 80139b2:	2602      	movs	r6, #2
 80139b4:	e78f      	b.n	80138d6 <__kernel_rem_pio2f+0x146>
 80139b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80139ba:	b948      	cbnz	r0, 80139d0 <__kernel_rem_pio2f+0x240>
 80139bc:	b121      	cbz	r1, 80139c8 <__kernel_rem_pio2f+0x238>
 80139be:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80139c2:	f842 1c04 	str.w	r1, [r2, #-4]
 80139c6:	2101      	movs	r1, #1
 80139c8:	f10e 0e01 	add.w	lr, lr, #1
 80139cc:	4608      	mov	r0, r1
 80139ce:	e787      	b.n	80138e0 <__kernel_rem_pio2f+0x150>
 80139d0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80139d4:	e7f5      	b.n	80139c2 <__kernel_rem_pio2f+0x232>
 80139d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80139da:	aa08      	add	r2, sp, #32
 80139dc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80139e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80139e4:	a908      	add	r1, sp, #32
 80139e6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80139ea:	e781      	b.n	80138f0 <__kernel_rem_pio2f+0x160>
 80139ec:	f104 3cff 	add.w	ip, r4, #4294967295
 80139f0:	aa08      	add	r2, sp, #32
 80139f2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80139f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80139fa:	e7f3      	b.n	80139e4 <__kernel_rem_pio2f+0x254>
 80139fc:	a908      	add	r1, sp, #32
 80139fe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013a02:	3801      	subs	r0, #1
 8013a04:	430a      	orrs	r2, r1
 8013a06:	e7ab      	b.n	8013960 <__kernel_rem_pio2f+0x1d0>
 8013a08:	3201      	adds	r2, #1
 8013a0a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8013a0e:	2e00      	cmp	r6, #0
 8013a10:	d0fa      	beq.n	8013a08 <__kernel_rem_pio2f+0x278>
 8013a12:	9905      	ldr	r1, [sp, #20]
 8013a14:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013a18:	eb0d 0001 	add.w	r0, sp, r1
 8013a1c:	18e6      	adds	r6, r4, r3
 8013a1e:	a91c      	add	r1, sp, #112	@ 0x70
 8013a20:	f104 0c01 	add.w	ip, r4, #1
 8013a24:	384c      	subs	r0, #76	@ 0x4c
 8013a26:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013a2a:	4422      	add	r2, r4
 8013a2c:	4562      	cmp	r2, ip
 8013a2e:	da04      	bge.n	8013a3a <__kernel_rem_pio2f+0x2aa>
 8013a30:	4614      	mov	r4, r2
 8013a32:	e710      	b.n	8013856 <__kernel_rem_pio2f+0xc6>
 8013a34:	9804      	ldr	r0, [sp, #16]
 8013a36:	2201      	movs	r2, #1
 8013a38:	e7e7      	b.n	8013a0a <__kernel_rem_pio2f+0x27a>
 8013a3a:	9903      	ldr	r1, [sp, #12]
 8013a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013a40:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013a44:	9105      	str	r1, [sp, #20]
 8013a46:	ee07 1a90 	vmov	s15, r1
 8013a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a4e:	2400      	movs	r4, #0
 8013a50:	ece6 7a01 	vstmia	r6!, {s15}
 8013a54:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 8013a58:	46b1      	mov	r9, r6
 8013a5a:	455c      	cmp	r4, fp
 8013a5c:	dd04      	ble.n	8013a68 <__kernel_rem_pio2f+0x2d8>
 8013a5e:	ece0 7a01 	vstmia	r0!, {s15}
 8013a62:	f10c 0c01 	add.w	ip, ip, #1
 8013a66:	e7e1      	b.n	8013a2c <__kernel_rem_pio2f+0x29c>
 8013a68:	ecfe 6a01 	vldmia	lr!, {s13}
 8013a6c:	ed39 7a01 	vldmdb	r9!, {s14}
 8013a70:	3401      	adds	r4, #1
 8013a72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a76:	e7f0      	b.n	8013a5a <__kernel_rem_pio2f+0x2ca>
 8013a78:	0801444c 	.word	0x0801444c
 8013a7c:	08014420 	.word	0x08014420
 8013a80:	43800000 	.word	0x43800000
 8013a84:	3b800000 	.word	0x3b800000
 8013a88:	00000000 	.word	0x00000000
 8013a8c:	9b02      	ldr	r3, [sp, #8]
 8013a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8013a92:	eba3 0008 	sub.w	r0, r3, r8
 8013a96:	f7ff fac5 	bl	8013024 <scalbnf>
 8013a9a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013a80 <__kernel_rem_pio2f+0x2f0>
 8013a9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa6:	db19      	blt.n	8013adc <__kernel_rem_pio2f+0x34c>
 8013aa8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013a84 <__kernel_rem_pio2f+0x2f4>
 8013aac:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013ab0:	aa08      	add	r2, sp, #32
 8013ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ab6:	3508      	adds	r5, #8
 8013ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013abc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ac4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013ac8:	ee10 3a10 	vmov	r3, s0
 8013acc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013ad0:	ee17 3a90 	vmov	r3, s15
 8013ad4:	3401      	adds	r4, #1
 8013ad6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013ada:	e74c      	b.n	8013976 <__kernel_rem_pio2f+0x1e6>
 8013adc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013ae0:	aa08      	add	r2, sp, #32
 8013ae2:	ee10 3a10 	vmov	r3, s0
 8013ae6:	e7f6      	b.n	8013ad6 <__kernel_rem_pio2f+0x346>
 8013ae8:	a808      	add	r0, sp, #32
 8013aea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013aee:	9001      	str	r0, [sp, #4]
 8013af0:	ee07 0a90 	vmov	s15, r0
 8013af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013af8:	3b01      	subs	r3, #1
 8013afa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013afe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013b02:	ed62 7a01 	vstmdb	r2!, {s15}
 8013b06:	e743      	b.n	8013990 <__kernel_rem_pio2f+0x200>
 8013b08:	ecfc 6a01 	vldmia	ip!, {s13}
 8013b0c:	ecb5 7a01 	vldmia	r5!, {s14}
 8013b10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b14:	3001      	adds	r0, #1
 8013b16:	4550      	cmp	r0, sl
 8013b18:	dc01      	bgt.n	8013b1e <__kernel_rem_pio2f+0x38e>
 8013b1a:	4290      	cmp	r0, r2
 8013b1c:	ddf4      	ble.n	8013b08 <__kernel_rem_pio2f+0x378>
 8013b1e:	a858      	add	r0, sp, #352	@ 0x160
 8013b20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013b24:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	e735      	b.n	8013998 <__kernel_rem_pio2f+0x208>
 8013b2c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013b2e:	2b02      	cmp	r3, #2
 8013b30:	dc09      	bgt.n	8013b46 <__kernel_rem_pio2f+0x3b6>
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	dc27      	bgt.n	8013b86 <__kernel_rem_pio2f+0x3f6>
 8013b36:	d040      	beq.n	8013bba <__kernel_rem_pio2f+0x42a>
 8013b38:	f009 0007 	and.w	r0, r9, #7
 8013b3c:	b059      	add	sp, #356	@ 0x164
 8013b3e:	ecbd 8b04 	vpop	{d8-d9}
 8013b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b46:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013b48:	2b03      	cmp	r3, #3
 8013b4a:	d1f5      	bne.n	8013b38 <__kernel_rem_pio2f+0x3a8>
 8013b4c:	aa30      	add	r2, sp, #192	@ 0xc0
 8013b4e:	1f0b      	subs	r3, r1, #4
 8013b50:	4413      	add	r3, r2
 8013b52:	461a      	mov	r2, r3
 8013b54:	4620      	mov	r0, r4
 8013b56:	2800      	cmp	r0, #0
 8013b58:	dc50      	bgt.n	8013bfc <__kernel_rem_pio2f+0x46c>
 8013b5a:	4622      	mov	r2, r4
 8013b5c:	2a01      	cmp	r2, #1
 8013b5e:	dc5d      	bgt.n	8013c1c <__kernel_rem_pio2f+0x48c>
 8013b60:	ab30      	add	r3, sp, #192	@ 0xc0
 8013b62:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 8013b66:	440b      	add	r3, r1
 8013b68:	2c01      	cmp	r4, #1
 8013b6a:	dc67      	bgt.n	8013c3c <__kernel_rem_pio2f+0x4ac>
 8013b6c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013b70:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013b74:	2e00      	cmp	r6, #0
 8013b76:	d167      	bne.n	8013c48 <__kernel_rem_pio2f+0x4b8>
 8013b78:	edc7 6a00 	vstr	s13, [r7]
 8013b7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8013b80:	edc7 7a02 	vstr	s15, [r7, #8]
 8013b84:	e7d8      	b.n	8013b38 <__kernel_rem_pio2f+0x3a8>
 8013b86:	ab30      	add	r3, sp, #192	@ 0xc0
 8013b88:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 8013b8c:	440b      	add	r3, r1
 8013b8e:	4622      	mov	r2, r4
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	da24      	bge.n	8013bde <__kernel_rem_pio2f+0x44e>
 8013b94:	b34e      	cbz	r6, 8013bea <__kernel_rem_pio2f+0x45a>
 8013b96:	eef1 7a47 	vneg.f32	s15, s14
 8013b9a:	edc7 7a00 	vstr	s15, [r7]
 8013b9e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ba6:	aa31      	add	r2, sp, #196	@ 0xc4
 8013ba8:	2301      	movs	r3, #1
 8013baa:	429c      	cmp	r4, r3
 8013bac:	da20      	bge.n	8013bf0 <__kernel_rem_pio2f+0x460>
 8013bae:	b10e      	cbz	r6, 8013bb4 <__kernel_rem_pio2f+0x424>
 8013bb0:	eef1 7a67 	vneg.f32	s15, s15
 8013bb4:	edc7 7a01 	vstr	s15, [r7, #4]
 8013bb8:	e7be      	b.n	8013b38 <__kernel_rem_pio2f+0x3a8>
 8013bba:	ab30      	add	r3, sp, #192	@ 0xc0
 8013bbc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013a88 <__kernel_rem_pio2f+0x2f8>
 8013bc0:	440b      	add	r3, r1
 8013bc2:	2c00      	cmp	r4, #0
 8013bc4:	da05      	bge.n	8013bd2 <__kernel_rem_pio2f+0x442>
 8013bc6:	b10e      	cbz	r6, 8013bcc <__kernel_rem_pio2f+0x43c>
 8013bc8:	eef1 7a67 	vneg.f32	s15, s15
 8013bcc:	edc7 7a00 	vstr	s15, [r7]
 8013bd0:	e7b2      	b.n	8013b38 <__kernel_rem_pio2f+0x3a8>
 8013bd2:	ed33 7a01 	vldmdb	r3!, {s14}
 8013bd6:	3c01      	subs	r4, #1
 8013bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bdc:	e7f1      	b.n	8013bc2 <__kernel_rem_pio2f+0x432>
 8013bde:	ed73 7a01 	vldmdb	r3!, {s15}
 8013be2:	3a01      	subs	r2, #1
 8013be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013be8:	e7d2      	b.n	8013b90 <__kernel_rem_pio2f+0x400>
 8013bea:	eef0 7a47 	vmov.f32	s15, s14
 8013bee:	e7d4      	b.n	8013b9a <__kernel_rem_pio2f+0x40a>
 8013bf0:	ecb2 7a01 	vldmia	r2!, {s14}
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bfa:	e7d6      	b.n	8013baa <__kernel_rem_pio2f+0x41a>
 8013bfc:	ed72 7a01 	vldmdb	r2!, {s15}
 8013c00:	edd2 6a01 	vldr	s13, [r2, #4]
 8013c04:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c08:	3801      	subs	r0, #1
 8013c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c0e:	ed82 7a00 	vstr	s14, [r2]
 8013c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c16:	edc2 7a01 	vstr	s15, [r2, #4]
 8013c1a:	e79c      	b.n	8013b56 <__kernel_rem_pio2f+0x3c6>
 8013c1c:	ed73 7a01 	vldmdb	r3!, {s15}
 8013c20:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c24:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c28:	3a01      	subs	r2, #1
 8013c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c2e:	ed83 7a00 	vstr	s14, [r3]
 8013c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c36:	edc3 7a01 	vstr	s15, [r3, #4]
 8013c3a:	e78f      	b.n	8013b5c <__kernel_rem_pio2f+0x3cc>
 8013c3c:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c40:	3c01      	subs	r4, #1
 8013c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c46:	e78f      	b.n	8013b68 <__kernel_rem_pio2f+0x3d8>
 8013c48:	eef1 6a66 	vneg.f32	s13, s13
 8013c4c:	eeb1 7a47 	vneg.f32	s14, s14
 8013c50:	edc7 6a00 	vstr	s13, [r7]
 8013c54:	ed87 7a01 	vstr	s14, [r7, #4]
 8013c58:	eef1 7a67 	vneg.f32	s15, s15
 8013c5c:	e790      	b.n	8013b80 <__kernel_rem_pio2f+0x3f0>
 8013c5e:	bf00      	nop

08013c60 <floor>:
 8013c60:	ec51 0b10 	vmov	r0, r1, d0
 8013c64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013c70:	2e13      	cmp	r6, #19
 8013c72:	460c      	mov	r4, r1
 8013c74:	4605      	mov	r5, r0
 8013c76:	4680      	mov	r8, r0
 8013c78:	dc34      	bgt.n	8013ce4 <floor+0x84>
 8013c7a:	2e00      	cmp	r6, #0
 8013c7c:	da17      	bge.n	8013cae <floor+0x4e>
 8013c7e:	a332      	add	r3, pc, #200	@ (adr r3, 8013d48 <floor+0xe8>)
 8013c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c84:	f7ec face 	bl	8000224 <__adddf3>
 8013c88:	2200      	movs	r2, #0
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	f7ec ff10 	bl	8000ab0 <__aeabi_dcmpgt>
 8013c90:	b150      	cbz	r0, 8013ca8 <floor+0x48>
 8013c92:	2c00      	cmp	r4, #0
 8013c94:	da55      	bge.n	8013d42 <floor+0xe2>
 8013c96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013c9a:	432c      	orrs	r4, r5
 8013c9c:	2500      	movs	r5, #0
 8013c9e:	42ac      	cmp	r4, r5
 8013ca0:	4c2b      	ldr	r4, [pc, #172]	@ (8013d50 <floor+0xf0>)
 8013ca2:	bf08      	it	eq
 8013ca4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013ca8:	4621      	mov	r1, r4
 8013caa:	4628      	mov	r0, r5
 8013cac:	e023      	b.n	8013cf6 <floor+0x96>
 8013cae:	4f29      	ldr	r7, [pc, #164]	@ (8013d54 <floor+0xf4>)
 8013cb0:	4137      	asrs	r7, r6
 8013cb2:	ea01 0307 	and.w	r3, r1, r7
 8013cb6:	4303      	orrs	r3, r0
 8013cb8:	d01d      	beq.n	8013cf6 <floor+0x96>
 8013cba:	a323      	add	r3, pc, #140	@ (adr r3, 8013d48 <floor+0xe8>)
 8013cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc0:	f7ec fab0 	bl	8000224 <__adddf3>
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	f7ec fef2 	bl	8000ab0 <__aeabi_dcmpgt>
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	d0eb      	beq.n	8013ca8 <floor+0x48>
 8013cd0:	2c00      	cmp	r4, #0
 8013cd2:	bfbe      	ittt	lt
 8013cd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013cd8:	4133      	asrlt	r3, r6
 8013cda:	18e4      	addlt	r4, r4, r3
 8013cdc:	ea24 0407 	bic.w	r4, r4, r7
 8013ce0:	2500      	movs	r5, #0
 8013ce2:	e7e1      	b.n	8013ca8 <floor+0x48>
 8013ce4:	2e33      	cmp	r6, #51	@ 0x33
 8013ce6:	dd0a      	ble.n	8013cfe <floor+0x9e>
 8013ce8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013cec:	d103      	bne.n	8013cf6 <floor+0x96>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	460b      	mov	r3, r1
 8013cf2:	f7ec fa97 	bl	8000224 <__adddf3>
 8013cf6:	ec41 0b10 	vmov	d0, r0, r1
 8013cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cfe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013d02:	f04f 37ff 	mov.w	r7, #4294967295
 8013d06:	40df      	lsrs	r7, r3
 8013d08:	4207      	tst	r7, r0
 8013d0a:	d0f4      	beq.n	8013cf6 <floor+0x96>
 8013d0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013d48 <floor+0xe8>)
 8013d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d12:	f7ec fa87 	bl	8000224 <__adddf3>
 8013d16:	2200      	movs	r2, #0
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f7ec fec9 	bl	8000ab0 <__aeabi_dcmpgt>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d0c2      	beq.n	8013ca8 <floor+0x48>
 8013d22:	2c00      	cmp	r4, #0
 8013d24:	da0a      	bge.n	8013d3c <floor+0xdc>
 8013d26:	2e14      	cmp	r6, #20
 8013d28:	d101      	bne.n	8013d2e <floor+0xce>
 8013d2a:	3401      	adds	r4, #1
 8013d2c:	e006      	b.n	8013d3c <floor+0xdc>
 8013d2e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013d32:	2301      	movs	r3, #1
 8013d34:	40b3      	lsls	r3, r6
 8013d36:	441d      	add	r5, r3
 8013d38:	4545      	cmp	r5, r8
 8013d3a:	d3f6      	bcc.n	8013d2a <floor+0xca>
 8013d3c:	ea25 0507 	bic.w	r5, r5, r7
 8013d40:	e7b2      	b.n	8013ca8 <floor+0x48>
 8013d42:	2500      	movs	r5, #0
 8013d44:	462c      	mov	r4, r5
 8013d46:	e7af      	b.n	8013ca8 <floor+0x48>
 8013d48:	8800759c 	.word	0x8800759c
 8013d4c:	7e37e43c 	.word	0x7e37e43c
 8013d50:	bff00000 	.word	0xbff00000
 8013d54:	000fffff 	.word	0x000fffff

08013d58 <floorf>:
 8013d58:	ee10 3a10 	vmov	r3, s0
 8013d5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013d60:	3a7f      	subs	r2, #127	@ 0x7f
 8013d62:	2a16      	cmp	r2, #22
 8013d64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013d68:	dc2b      	bgt.n	8013dc2 <floorf+0x6a>
 8013d6a:	2a00      	cmp	r2, #0
 8013d6c:	da12      	bge.n	8013d94 <floorf+0x3c>
 8013d6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013dd4 <floorf+0x7c>
 8013d72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013d76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7e:	dd06      	ble.n	8013d8e <floorf+0x36>
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	da24      	bge.n	8013dce <floorf+0x76>
 8013d84:	2900      	cmp	r1, #0
 8013d86:	4b14      	ldr	r3, [pc, #80]	@ (8013dd8 <floorf+0x80>)
 8013d88:	bf08      	it	eq
 8013d8a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013d8e:	ee00 3a10 	vmov	s0, r3
 8013d92:	4770      	bx	lr
 8013d94:	4911      	ldr	r1, [pc, #68]	@ (8013ddc <floorf+0x84>)
 8013d96:	4111      	asrs	r1, r2
 8013d98:	420b      	tst	r3, r1
 8013d9a:	d0fa      	beq.n	8013d92 <floorf+0x3a>
 8013d9c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013dd4 <floorf+0x7c>
 8013da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013da4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dac:	ddef      	ble.n	8013d8e <floorf+0x36>
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	bfbe      	ittt	lt
 8013db2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013db6:	fa40 f202 	asrlt.w	r2, r0, r2
 8013dba:	189b      	addlt	r3, r3, r2
 8013dbc:	ea23 0301 	bic.w	r3, r3, r1
 8013dc0:	e7e5      	b.n	8013d8e <floorf+0x36>
 8013dc2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013dc6:	d3e4      	bcc.n	8013d92 <floorf+0x3a>
 8013dc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013dcc:	4770      	bx	lr
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e7dd      	b.n	8013d8e <floorf+0x36>
 8013dd2:	bf00      	nop
 8013dd4:	7149f2ca 	.word	0x7149f2ca
 8013dd8:	bf800000 	.word	0xbf800000
 8013ddc:	007fffff 	.word	0x007fffff

08013de0 <_init>:
 8013de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013de2:	bf00      	nop
 8013de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013de6:	bc08      	pop	{r3}
 8013de8:	469e      	mov	lr, r3
 8013dea:	4770      	bx	lr

08013dec <_fini>:
 8013dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dee:	bf00      	nop
 8013df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013df2:	bc08      	pop	{r3}
 8013df4:	469e      	mov	lr, r3
 8013df6:	4770      	bx	lr
